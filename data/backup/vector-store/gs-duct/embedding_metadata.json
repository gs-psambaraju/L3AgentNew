[{"source":"5bfb0e0f-e0ad-46ef-ac64-b63f976d8570","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":474,"endLine":496,"content":"ctName = getMetadataConfig(ductResponse.getConnectorType());\n    QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n    List<Map<String, Object>> responseList = new ArrayList<>();\n    Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n    if (!first.isPresent())\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    ResourceConfig resourceConfig = first.get();\n    List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n    });\n    if (resourceConfig.getMetadataTransformationConfig() != null) {\n      data = sanitizeData(data, resourceConfig);\n    }\n    responseList.addAll(data);\n    queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n    queryAPIResponseBean.setRecords(responseList);\n    return queryAPIResponseBean;\n  }\n\n  private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n    List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n    Chainr chainr = Chainr.fromSpec(spec);\n    List<Map<String, Object>> finalData = new ArrayList<>();\n    for (Map<String, Object> datum : ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7f488a4-02fd-439e-a732-8fafbf3a1504","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":174,"endLine":182,"content":"EABLE, true);\n        meta.put(DuctConstants.DescribeMetaConstants.CREATEABLE, true);\n        meta.put(DuctConstants.DescribeMetaConstants.SCHEMA_UPDATEABLE, true);\n        retMap.put(IPaasConstants.META, meta);\n        return retMap;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33757b45-9b81-435a-803a-d5799ec11538","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":393,"endLine":427,"content":"rties = (Map<String, Object>) connectionInfoAsMap.get(\"properties\");\n        if (!properties.containsKey(IPAAS_PROPERTIES)) {\n            return;\n        }\n\n        properties = (Map<String, Object>) properties.get(IPAAS_PROPERTIES);\n        Object oauthClientId = properties.getOrDefault(UCConstants.GSIntegration.OAUTH_CLIENT_ID, null);\n        Object oauthClientSecret = properties.getOrDefault(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET, null);\n\n        if ((Objects.isNull(oauthClientId) || Objects.isNull(oauthClientSecret))) {\n            return;\n        }\n\n        if (oauthClientId instanceof byte[]) {\n            properties.put(UCConstants.GSIntegration.OAUTH_CLIENT_ID, CryptHandler.getInstance().decrypt((byte[]) oauthClientId));\n        }\n\n        if (oauthClientSecret instanceof byte[]) {\n            properties.put(GSIntegration.OAUTH_CLIENT_SECRET, CryptHandler.getInstance().decrypt((byte[]) oauthClientSecret));\n        }\n    }\n\n    private static void checkAndAddValue(Object nullCheckValue, Map<String, Object> map, String key) {\n        if (nullCheckValue != null) {\n            if (nullCheckValue instanceof SecretData)\n                map.put(key, ((SecretData) nullCheckValue).getString());\n            else\n                map.put(key, nullCheckValue);\n        }\n    }\n\n    public static boolean checkIfIpaasAndFTEnabled(PNPConnectionsInfo pnpConnectionsInfo) {\n        if (!IPAAS_CONNECTORS.contains(pnpConnectionsInfo.getConnectionType()))\n            return true;\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"628a4659-3af0-49a0-9623-53c29c08889b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":143,"endLine":149,"content":"GROUPABLE, true);\n        meta.put(ORIGINAL_DATA_TYPE, fieldDataType);\n        retMap.put(META, meta);\n        return retMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5702cd8-26e6-4759-a17f-c8c4d5fe714d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UsageDataSourceType.java","startLine":1,"endLine":16,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.enums;\n\n/**\n * User: santa\n * Date: 17/6/14\n * Time: 9:17 PM\n */\npublic enum UsageDataSourceType {\n  USAGE_FEED,\n  SFDC,\n  GS_DEFINED;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a490f339-dabd-4e61-b075-365cfe827832","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/PipedriveV2ConnectionService.java","startLine":58,"endLine":80,"content":"\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.getProperties().put(IPaasConstants.IPAAS_PROPERTIES, DuctUtils.removeCEPropertiesFromIpaasPropertiesIfPresent(pnpConnectionsInfo));\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(ConnectorType.PIPEDRIVEV2);\n        Optional<AuthDetails> authInfoOptional = metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails authDetails = authInfoOptional.get();\n        AuthorizationUrl authorizationUrl = authDetails.getAuthoriz","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c0aabd0-cf30-4aea-855c-9bec6157b59a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":25,"endLine":57,"content":"um;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils.GainsightPrecondition.assertTrue;\n\n@Service\n@Order(14000)\n@Slf4j\npublic class ServicenowNativeDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String CAAS_SERVICENOW_EXTRACT =","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e02d168-40c0-439d-b164-bd1b0d40218c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/DuctSingleCEQueryBuilder.java","startLine":30,"endLine":56,"content":" = new StringBuilder();\n        stringBuilder.append(createFilterQueryFromEachRule(filterRule, stringBuilder));\n        return stringBuilder.toString();\n    }\n\n    private static String createFilterQueryFromEachRule(FilterRule filterRule, StringBuilder stringBuilder) throws UnsupportedEncodingException {\n        List<String> whereClauses = Lists.newArrayList();\n        for (FilterRule rule : filterRule.getRules()) {\n            whereClauses.addAll(buildRule(rule));\n        }\n        String joiner =\n                filterRule.getCondition() != null\n                        ? filterRule.getCondition().getFilterCondition() + URLEncoder.encode(SPACE, \"UTF-8\")\n                        : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses).replaceAll(\"\\\\+\", \"%20\");\n    }\n\n\n    private static List<String> buildRule(FilterRule rule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(URLEncoder.encode(rule.getFieldInfo().getJsonPath(), \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(Operators.getExternaSystemOperator(rule.getOp()), \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            handleD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ca50e7c-936a-4074-a25b-a951c90f386c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/ObjectsCacheDao.java","startLine":1,"endLine":8,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.metadata.engine.ObjectsCache;\n\npublic interface ObjectsCacheDao extends AbstractEntityDao<ObjectsCache> {\n    ObjectsCache getObjectsByConnectionId(String connectionId);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fbd361e0-62b0-42bd-a9a8-160dacdfa691","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchServiceImpl.java","startLine":56,"endLine":73,"content":"ssertNotNull(pnpConnectionsInfo.getTokenDetail(),UCValidationCode.PNP_TOKEN_DETAILS_NOT_FOUND);\n\n        UCAptrinsicChannelService ucAptrinsicChannelService = getUCAptrinsicChannelService(pnpConnectionsInfo);\n        GSIntegrationResponse gsIntegrationResponse = new GSIntegrationResponse();\n        try {\n            InputStream inputStream = ucAptrinsicChannelService.getObjectDescription(pnpConnectionsInfo, objectName);\n            List<GainsightPXFieldDescription> result = mapper.readValue(IOUtils.toString(inputStream), new TypeReference<List<GainsightPXFieldDescription>>() {});\n            List<GainsightPXFieldDescription> feildDescriptionList= result.stream()\n                    .filter(gainsightPXFieldDescription -> !LOCATION_FIELD_EXCLUSION.contains(gainsightPXFieldDescription.getApiName())) // for now excluding locations' fields'\n                    .collect(Collectors.toList());\n            feildDescriptionList.forEach(gainsightPXFieldDescription -> {\n                if (gainsightPXFieldDescription.getOrigin().equalsIgnoreCase(UCConstants.GSIntegration.CUSTOM)) {\n                    gainsightPXFieldDescription.setCanonicalName(UCConstants.GSIntegration.CUSTOM_ATTRIBUTES + UCConstants.PERIOD + gainsightPXFieldDescription.getApiName());\n                }\n                else{\n                    gainsightPXFieldDescription.setCanonicalName(gainsightPXFieldDescription.getApiName());\n                }\n                if (gainsightPXFieldDescription.getApiName().equalsIgnor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d83a8ee-413a-4a44-8170-24a86db9ec21","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/TenantUtility.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.bean.TenantAuthInfo;\nimport com.gainsight.bean.UserAuthInfo;\nimport com.gainsight.service.CachedTenantService;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport com.gainsight.utils.GainsightUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.MapUtils;\n\nimport java.util.Map;\n\n/**\n * Created by vipinsharma on 29/03/18.\n */\n@Slf4j\npublic class TenantUtility {\n\n    private static CachedTenantService cachedTenantService = null;\n\n    public static RequestInfo getRequestInfoForTenant(String tenantId){\n        Tenant tenant = getBaseTenantService().findById(tenantId);\n        RequestInfo requestInfo = new RequestInfo();\n        TenantAuthInfo tenantAuthInfo = TenantAuthInfo.fromTenant(tenant);\n        if (tenantAuthInfo != null) {\n            requestInfo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n            requestInfo.setTenantAuthInfo(tenantAuthInfo);\n\n            UserAuthInfo userAuthInfo = getSystemGSUserAuthInfo(tenant);\n            requestInfo.setUserAuthInfo(userAuthInfo);\n            requestInfo.setGsUserAuthInfo(userAuthInfo);\n        }\n        return requestInfo;\n    }\n\n    public static UserAuthInfo getSystemGSUserAuthInfo(Tenant tenant) {\n        if(tenant == null) {\n            return new UserAuthInfo();\n        }\n        Map<String, Object> systemAdministrator = tenant.getSystemAdministrator();\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"436b92eb-c263-4506-8c35-bad2cb50b245","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":456,"endLine":478,"content":"  throw e;\n        } catch (Exception e) {\n            LOGGER.error(\"{CAAS} Error in Internal System\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private String compareCEAndNativeMetadata(Map<String, Map<String, Object>> fieldNameToCEMetadataMap, Map<String, GSFieldDefinition> fieldNameToNativeMetadataMap,\n                                              ConnectorType connectorType) {\n        StringBuilder sb = new StringBuilder();\n        Set<String> nativeFields = new HashSet<>(fieldNameToNativeMetadataMap.keySet());\n        for (Map.Entry<String, Map<String, Object>> entry : fieldNameToCEMetadataMap.entrySet()) {\n            if (nativeFields.contains(entry.getKey()))\n                nativeFields.remove(entry.getKey());\n            else {\n                sb.append(\"Field Not present in native metadata : \").append(entry.getKey()).append(NEW_LINE_CHAR);\n                continue;\n            }\n            Map<String, Object> ceMetadata = entry.getValue();\n            Map<String, Object> meta = MAPPER.convertValue(ceMetadata.get(META), new TypeReference<Map<String, Object>>() {\n            });\n            GSFieldDefinition gsFieldDefinition = fieldNameToNativeMetadataMap.get(entry.getKey());\n            compareValues(ceMetadata.get(FIELD_NAME), gsFieldDefinition.getFieldName(), \"Field Name doesn't Match with native field name - CE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b96b19e-f243-43af-8783-a77b0dc51e75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.Metad","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9145def6-10ca-4eec-92f7-9548a9882cff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchServiceImpl.java","startLine":35,"endLine":58,"content":".List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GainsightPXFetchServiceImpl implements GainsightPXFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightPXFetchServiceImpl.class);\n    private static final List<String> LOCATION_FIELD_EXCLUSION = Lists.newArrayList(\n            \"countryName\",\"countryCode\",\"stateName\",\"stateCode\",\"city\",\"street\",\"postalCode\",\"continent\",\"regionName\",\"timeZone\",\"latitude\",\"longitude\");\n    private final ObjectMapper mapper = new ObjectMapper();\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n\n    @Override\n    public GSIntegrationResponse getObjectDescription(String connectionId, String objectName) throws CaasException {\n        GainsightPrecondition.assertNotNull(connectionId, UCValidationCode.PNP_INVALID_INPUT, \"Invalid input\", HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.assertNotNull(objectName, UCValidationCode.PNP_INVALID_INPUT, \"Invalid input\", HttpStatus.SC_BAD_REQUEST);\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing ConnectionInfo\", HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo.getTokenDetail(),UCValidationCode.PNP_TOKEN_DETAILS_NOT_FOUND);\n\n        UCAptrinsicChannelService ucAptrinsicChannelService = getUCAptrinsicChannelService(pnpConnectio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74107bc1-891e-45a6-a9e4-cbcef7047f06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":140,"endLine":180,"content":"AS \" + field);\n            } else\n                joiner.add(field);\n        }\n        String fields = joiner.toString();\n        if (StringUtils.isEmpty(whereClause)) {\n            return String.format(SELECT_QUERY_WITHOUT_WHERE_CLAUSE, fields, table, limit, page);\n        } else {\n            return String.format(SELECT_QUERY_WITH_WHERE_CLAUSE, fields, table, whereClause, limit, page);\n        }\n    }\n\n\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38a3b19d-8c2c-4ada-ab96-5c86e1ca9423","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctOperatorType.java","startLine":1,"endLine":30,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum DuctOperatorType {\n\n  //Organized as display name, symbol, alias\n  //Example Equals, = , eq\n  //Server builds the query from display name, SalesForce will send alias.\n  EQ(\"=\", \"=\", \"eq\", \"$left = $right\", DuctOperandType.BINARY),\n  NE(\"!=\", \"!=\", \"ne\", \"$left != $right\", DuctOperandType.BINARY),\n  LT(\"<\", \"<\", \"lt\", \"$left < $right\", DuctOperandType.BINARY),\n  LTE(\"<=\", \"<=\", \"lte\", \"$left <= $right\", DuctOperandType.BINARY),\n  GT(\">\", \">\", \"gt\", \"$left > $right\", DuctOperandType.BINARY),\n  GTE(\">=\", \">=\", \"gte\", \"$left >= $right\", DuctOperandType.BINARY),\n  IN(\"In\", \"IN\", \"in\", \"$left IN ($right)\", DuctOperandType.BINARY),\n  NOT_IN(\"Not In\", \"NOT IN\", \"nin\", \"$left NOT IN ($right)\", DuctOperandType.BINARY),\n  LIKE(\"Like\", \"LIKE\", \"like\", \"$left LIKE $right\", DuctOperandType.BINARY),\n  CONTAINS(\"Like\", \"LIKE\", \"contains\", \"$left ILIKE $right\", DuctOperandType.BINARY),\n  NOT_CONTAINS(\"Like\", \"LIKE\", \"notContains\", \"$left NOT ILIKE $right\", DuctOperandType.BINARY),\n  STARTS_WITH(\"LIKE\", \"LIKE\", \"startsWith\", \"$left ILIKE $right\", DuctOperandType.BINARY),\n  ENDS_WITH(\"Ends With\", \"ILIKE\", \"endsWith\", \"$left ILIKE $right\", DuctOperandType.BINARY),\n  //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n  INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", DuctOperandType.BINARY),\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"882f4aa8-853b-4a44-b902-da4f69e2bd5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/MeetingDetailsRequestDTO.java","startLine":1,"endLine":24,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Builder\n@Setter @Getter\n@AllArgsConstructor\npublic class MeetingDetailsRequestDTO {\n    private String meetingId;\n    private ConnectorType connectorType;\n    private String connectionId;\n    private Map<String, Object> properties;\n\n    public MeetingDetailsRequestDTO() {\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"254e90f5-72cc-4eb0-9092-5b19552597d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":321,"endLine":345,"content":"tClientSecret().getString());\n        accessDetails.setAccessToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken()));\n        accessDetails.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        return accessDetails;\n    }\n\n    private void updateTokenDetails(String connectionId, TokenDetails tokenDetails) {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n        pnpConnectionsInfo.getTokenDetail().setAccessToken(CryptHandler.getInstance().encrypt(tokenDetails.getAccessToken()));\n        pnpConnectionsInfo.getTokenDetail().setRefreshToken(CryptHandler.getInstance().encrypt(tokenDetails.getRefreshToken()));\n        pnpConnectionInfoDao.save(pnpConnectionsInfo);\n    }\n\n    private PNPConnectionsInfo getConnectionId(String connectionId) {\n        return pnpConnectionInfoDao.findByConnectionId(connectionId);\n    }\n\n    private Map<String, Object> extractResponse(HttpResponse response) throws CaasException {\n        Map<String, Object> responseMap = new HashMap<>();\n        try {\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            responseMap = (Map) MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, Duct","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3e7c1d93-6b24-4be5-a157-03d35e16a47d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":27,"endLine":69,"content":"ramework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils.ResponseObj;\n\nimport javax.validation.constraints.NotNull;\nimport javax.ws.rs.QueryParam;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/metadata\")\n@EnableSwagger2\n@Api(value = \"CAAS Metadata Api's\", description = \"CAAS related Metadata api's\")\n@ApiResponses(value = {\n        @ApiResponse(code = 200, message = \"Successfully retrieved list\"),\n        @ApiResponse(code = 401, message = \"You are not authorized to view the resource\"),\n        @ApiResponse(code = 404, message = \"The resource you were trying to reach is not found\")\n})\npublic class DuctMetadataController {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private EnhanceMetadataService enhanceMetadataService;\n\n    @Autowired\n    private MetadataDriver metadataDriver ;\n\n    @Autowired\n    private GeneratedMetadataCacheDao generatedMetadataCacheDao;\n\n    @Autowired\n    private MetadataCacheDao metadataCacheDao;\n\n    @Autowired\n    private MetadataGenerationDetailsDao metadataGenerationDetailsDao;\n\n    @ApiOperation(value = \"Insert Attribute Config\", response = DuctResponseDTO.class)\n    @PostMapping(value = \"/enhance/fields/{connectionId}/{object}\", consumes = MediaType.APPLICATION_JSON_VALUE, pr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0938f266-75be-4003-86f3-efebbef191db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":189,"endLine":209,"content":"  Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(ductResponse.getExternalResourceName())).findFirst();\n        if (caasObjectApiConfig.isPresent() && null != caasObjectApiConfig.get().getAdditionalProperties().get(RESPONSE_KEY))\n            externalResultsList = MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(caasObjectApiConfig.get().getAdditionalProperties().get(RESPONSE_KEY)), new TypeReference<List<Map<String, Object>>>() {\n            });\n        else\n            externalResultsList.add(ductResponse.getExternalSystemResponse());\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(externalResultsList);\n        return queryAPIResponseBean;\n    }\n\n    private DuctResponse fetchSynchronizedDataWithPagination(DuctJobMapping ductJobMapping, String baseUrl,String recordId, TokenDetails tokenDetails) throws CaasException {\n        int limit = Math.min(ductJobMapping.getLimit(), 100);\n\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        String nextPageToken = \"\";\n        try {\n            if (ductJobMapping.getNextPageToken() != null)\n                nextPageToken = ductJobMapping.getNextPageToken();\n            String url = StringUtils.isEmpty(recordId) ? String.format(baseUrl, limit, nextPageToken) : String.format(baseUrl, recordId, limit, nextPageToken);\n            externalSystemR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de3e4e40-ba7f-4052-bce6-744114347d34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":64,"endLine":96,"content":"_SECRET_KEY);\n        }\n    }\n\n    public static URL getSignedURL (String fileName) throws CaasException {\n        return getSignedURL(fileName, 15);\n    }\n\n    public static URL getSignedURL (String fileName, int expiryInMinutes) throws CaasException {\n        return getSignedURL(CAAS_BUCKET_NAME, expiryInMinutes, fileName, HttpMethod.GET);\n    }\n\n    public static URL getSignedURL (String bucketName, int expiryInMinutes, String fileName, HttpMethod httpMethod) throws CaasException {\n        boolean fileExists = keyExists(bucketName, fileName);\n        if (!fileExists) {\n            DuctUtils.throwError(CaasValidationCode.S3_FILE_NOT_PRESENT.getGsEventCode(), String.format(CaasValidationCode.S3_FILE_NOT_PRESENT.getUserText() + \" : Path : {}\", fileName), String.format(CaasValidationCode.S3_FILE_NOT_PRESENT.getUserText() + \" : Path : {}\", fileName));\n        }\n        if(AWS_ROLE_MANDATORY)\n            return gainsightS3.generatePresignedURL(bucketName, (Integer)null, fileName, httpMethod);\n        else\n            return gainsightS3.generatePresignedURL(bucketName, expiryInMinutes, fileName, httpMethod);\n    }\n\n    public static boolean keyExists(String fileName) {\n        return keyExists(CAAS_BUCKET_NAME, fileName);\n    }\n\n    public static boolean keyExists(String bucketName, String fileName) {\n        return gainsightS3.doesObjectExist(bucketName, fileName);\n    }\n\n    public static void deleteObjectsInS3Folder(String folderPath) {\n        for (S3ObjectSummary file : list","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51135093-ea68-4246-8174-bfeb24a73691","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/GsDuctWorkerApp.java","startLine":1,"endLine":25,"content":"package com.gainsight.duct;\n\nimport com.gainsight.InstanceNameGenerator;\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.duct.config.GSDuctWorkerConfiguration;\nimport com.gainsight.duct.config.dbqueue.DynamicQueuePropertiesConfigProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.instrumentation.gsintegration.config.GSInstrumentationConfigProvider;\nimport com.gainsight.instrumentation.job.tracer.JobTracer;\nimport com.gainsight.properties.ApplicationInitializer;\nimport com.gainsight.queue.db.SpringDbQueueInitializer;\nimport com.gainsight.queue.db.spring.configuration.worker.DbQueueSpringConfiguration;\nimport com.gainsight.utils.PID;\nimport com.gainsight.utils.configserver.ApplicationConfigProperties;\nimport com.google.common.collect.Sets;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.WebApplicationType;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d826773c-d280-44a1-a02d-431c5c30b0f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct;\n\n\nimport com.gainsight.annotation.APIScope;\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.dto.GsExternalSystemErrorMappingDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.connectordependency.DuctDependencyFrameworkService;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.enums.AuthorizationLevel;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport io.swagger.annotations.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ca73f1a-9bc4-422d-9894-5d3d2887ac97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/ObjectsCacheDaoImpl.java","startLine":33,"endLine":41,"content":"enantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public ObjectsCache getObjectsByConnectionId(String connectionId) {\n        Query query = Query.query(Criteria.where(MetadataCache.CONNECTION_ID_PROP).is(connectionId));\n        return getMongoTemplate().findOne(query, ObjectsCache.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa99d17d-f740-412c-9958-ad140e76a660","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":208,"endLine":240,"content":"jectAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                i.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n                                i.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                return i;\n                            }).collect(Collectors.toList()));\n                }\n                relationshipFieldsAlreadyAdded.add(relationshipName);\n            }\n        }\n        return baseAttributes;\n    }\n\n    @Override\n    protected String getNameForDHFilterRule(String mapping, String resourceName) {\n        return mapping;\n    }\n\n    private Map<String, String> createRelationshipNameToObjectNameMap(DuctJobMapping ductJobMapping, CaasMetadataService service, Map<String, ObjectDefinition> baseAttributes) {\n        Map<String, String> relationToObjectNameMap = new HashMap<>();\n        for (GSFieldDefinition field : baseAttributes.get(ductJobMapping.getResourceName()).getFields()) {\n            if (field.getMeta().getLookupDetail() != null) {\n                relationToObjectNameMap.put(field.getMeta().getLookupDetail().getLookupId(), field.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName());\n            }\n        }\n        return relationToObjectNameMap;\n    }\n\n}\nionToObjectNameMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d393fe2-f9ae-405a-945e-9f0d7f705405","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/OAuthV2TokenDetail.java","startLine":1,"endLine":41,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.bean.account.BaseTokenDetail;\n\n\n/**\n * User: SGotety\n * Date: 06/02/20\n */\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class OAuthV2TokenDetail extends BaseTokenDetail {\n    private static final long serialVersionUID = -5153713763582905705L;\n    private String serviceProviderAuthorizationURI;\n    private String serviceProviderAccessTokenURI;\n    private String payloadContentType;\n    private String redirectURI;\n    private String scope;\n\n    public OAuthV2TokenDetail() {\n    }\n\n    public OAuthV2TokenDetail(String serviceProviderAuthorizationURI, String serviceProviderAccessTokenURI,\n                              String payloadContentType, String redirectURI, String scope, String clientId, String clientSecret) {\n        this.serviceProviderAuthorizationURI = serviceProviderAuthorizationURI;\n        this.serviceProviderAccessTokenURI = serviceProviderAccessTokenURI;\n        this.payloadContentType = payloadContentType;\n        this.redirectURI = redirectURI;\n        this.scope = scope;\n        this.setClientId(SecretData.fromValue(clientId));\n        this.setClientSecret(SecretData.fromValue(clientSecret));\n    }\n\n    public OAuthV2TokenDetail(String serviceProviderAccessTokenURI, String payloadContentType, String clientId,\n                              Strin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a77456e7-0d12-496c-936b-f96b063bf9be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":601,"endLine":624,"content":"otected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n\n    @SneakyThrows\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        log.info(\"Getting additional details for Dynamics connector\");\n        HashMap<String, Object> additionalDetails = new HashMap<>();\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTOR_CONNECTION_INFO_NULL, \"Connection not found\");\n        additionalDetails.put(BASE_OBJECT_PLURAL_NAME, ductJobMapping.getProperties().get(BASE_OBJECT_PLURAL_NAME));\n        additionalDetails.put(DuctConstants.RESOLVE_PICKLIST_OPTIONS,\n                ductJobMapping.getProperties().getOrDefault(DuctConstants.RESOLVE_PICKLIST_OPTIONS, false));\n        additionalDetails.put(UCConstants.MASTER_LOOKUP_CONFIGURATION, DynamicsGainsightUtils.fetchMapFromConfigServer());\n        additionalDetails.put(LOAD_TO_DYNAMICS_ACTION_ENABLED,\n                FeatureToggleUtil.evaluateBooleanFeature(LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()));\n\n        if (null != ductJobMapping.getCriteria","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"68787146-4bd8-4db2-8f4f-8a7bf596919b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":25,"endLine":52,"content":"DTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.data.ConnectorDataSourceFactory;\nimport com.gainsight.duct.data.ConnectorDataSourceService;\nimport com.gainsight.duct.data.EngineCommonDataSourceService;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.gsload.GainsightLoadFactory;\nimport com.gainsight.duct.gsload.GainsightLoadService;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.processor.MSTeamsEventProcessorService;\nimport com.gainsight.duct.processor.ZoomEventProcessorService;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.duct.validation.DuctValidationService;\nimport com.gainsight.duct.validation.ValidationConnectorDataSourceFactory;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8ceaa07-9b7a-474f-97f0-c9103132f0ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":828,"endLine":849,"content":"DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords() == 0) {\n            bulkActionResponse.setStatus(ExecutionStatus.SUCCESS);\n        } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords() > 0) {\n            bulkActionResponse.setStatus(ExecutionStatus.FAILED);\n        } else if (ductJobMapping.getDuctStatus() == DuctStatus.FAILED) {\n            bulkActionResponse.setStatus(ExecutionStatus.FAILED);\n        }\n    }\n\n\n    private DuctStatus populateExecutionStatus(DuctJobMapping ductJobMapping) {\n        if (ductJobMapping.isBulk()) {\n            if (ductJobMapping.getDuctStatus() == null) {\n                return DuctStatus.IN_PROGRESS;\n            }\n            if (ductJobMapping.getDuctStatus() == DuctStatus.IN_PROGRESS) {\n                return DuctStatus.IN_PROGRESS;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() > 0 && ductJobMapping.getFailedRecords() == 0) {\n                return DuctStatus.SUCCESS;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() > 0 && ductJobMapping.getFailedRecords() > 0) {\n                return DuctStatus.PARTIAL_SUCCESS;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"571ae758-7d01-41e3-ba4d-23cb86f981e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/DuctClientConfiguration.java","startLine":21,"endLine":49,"content":" \"com.gainsight.web\",\"com.gainsight.queue\",\"com.gainsight.service\",\"com.gainsight.dao\",\"com.gainsight.duct\"},excludeFilters  = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE, classes = {DbQueueSpringConfiguration.class})}, basePackageClasses = DbQueueProducerSpringConfiguration.class)\npublic class DuctClientConfiguration {\n\n    @Bean\n    public DuctDatabaseTemplateService ductDatabaseTemplateService(){\n        return new DuctDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public CaasRedisTemplate gsIntegrationsRedisTemplate(){\n        return new CaasRedisTemplateImpl();\n    }\n\n    @Bean\n    public GainsightExecutorService getExecutorService(){\n        return new GainsightExecutorServiceImpl();\n    }\n\n    @Bean\n    public HAPostgresDatabaseTemplate haPostgresDatabaseTemplate() {\n        return new HAPostgresDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public SpringServiceLocatorFactory ucSpringServiceLocatorFactory() {\n        return new SpringServiceLocatorFactory();\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90291b0d-8e47-4ab7-a6c5-dec827254ea5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":202,"endLine":228,"content":", caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @SneakyThrows\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap;\n        try {\n            attributesMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n        } catch (CaasException ex) {\n            throw new RuntimeException(ex);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0630ac7f-3a11-4060-ad06-34717a43efa3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.IntercomV2Region;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.utils.FeatureToggleUtil;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"684b5b48-6182-47d5-a49c-cdc8a7ab5771","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":161,"endLine":193,"content":"INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aec55762-231f-430f-8828-92d5e1edbd70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":146,"endLine":168,"content":"f (GainsightCollectionUtils.nullSafeList(pnpConnectionInputs).isEmpty()) {\n                return new ResponseObj(true, CaasValidationCode.NO_CONNECTION_FOUND.getUserText(), CaasValidationCode.NO_CONNECTION_FOUND);\n            }\n            return new ResponseObj(true, pnpConnectionInputs);\n        } catch (CaasException ex) {\n            log.error(\"Error occurred while fetching connection details for given connectionId\", ex);\n            return new ResponseObj(false, ConnectorI18nService.getTranslation(ex.getErrorCode().name(), ex.getMessage(), RequestContextProvider.getTenantLanguage()));\n        }\n    }\n\n    @GetMapping(value = \"/{connectionId}\")\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.LIST)\n    public ResponseObj getConnectionDetails(@PathVariable(\"connectionId\") String connectionId) {\n        try {\n            GainsightPrecondition.assertTrue(StringUtils.isNoneEmpty(connectionId), CaasValidationCode.CONNECTION_ID_IS_NULL, SC_BAD_REQUEST);\n            return new ResponseObj(true, ductConnectionService.findByConnectionId(connectionId));\n        } catch (CaasException ex) {\n            log.error(\"Error occurred while fetching connection details for given connectionId\", ex);\n            return new ResponseObj(false, ConnectorI18nService.getTranslation(ex.getErrorCode().name(), ex.getMessage(), RequestContextProvider.getTenantLanguage()));\n        }\n    }\n\n    @DeleteMapping(value = \"/{connectionId}\", consumes = MediaType.APPLICATION_JSO","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e85b551c-132e-4867-9a0b-b9dd1afcf321","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":541,"endLine":576,"content":"ieldCriteria.setOperatorType(FilterOperator.GT);\n    fieldCriteria.setValues(Lists.newArrayList(\"0\"));\n\n    criteria.setFilters(Lists.newArrayList(fieldCriteria));\n    return criteria;\n  }\n\n  @NotNull\n  private Optional<ResourceConfig> getResourceConfig(DuctJobMapping ductJobMapping) {\n    MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n    Optional<ResourceConfig> optionalResourceConfig = connectorConfigByObjectName.getResources()\n        .stream()\n        .filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName()))\n        .findFirst();\n    return optionalResourceConfig;\n  }\n\n  @Override\n  protected Boolean generateFreeFormTask() {\n    return true;\n  }\n\n  /**\n   * @param apiConfigAttributes {@link ApiConfigAttributes}\n   * @return {@link Boolean}\n   * only api which are search api and post method are required to have filters\n   * As of now, contacts and conversations are the only objects which supports filtering in request body\n   */\n  private boolean isQueryBodyRequiredForRequest(ApiConfigAttributes apiConfigAttributes) {\n    return HttpMethod.POST == apiConfigAttributes.getHttpMethod() && apiConfigAttributes.getBodyParamDetails() != null && !apiConfigAttributes.getBodyParamDetails().isEmpty();\n  }\n\n  /**\n   * @param data              {@link List<Map>} data response received from external system\n   * @param dateTimeFieldsMap {@link Map<String, GSFieldDefinition>} map of datetime fields\n   * @param ductJ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7185535a-7963-47b0-b677-91ebc7548ba5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":99,"endLine":118,"content":";\n        } catch (JsonProcessingException ex) {\n            log.error(\"Exception occurred while flattening connection info\", ex);\n            return null;\n        }\n\n        Map<String, Object> ipaasProps = (Map) pnpConnectionInput.getProperties().getOrDefault(IPaasConstants.IPAAS_PROPERTIES, Maps.newHashMap());\n\n        String oldClientId = (String) flattenConnectionInfo.getOrDefault(\"properties.IPAAS_PROPERTIES.oauthClientId\", StringUtils.EMPTY);\n        String oldClientSecret = (String) flattenConnectionInfo.getOrDefault(\"properties.IPAAS_PROPERTIES.oauthClientSecret\", StringUtils.EMPTY);\n        String newClientId = (String) ipaasProps.getOrDefault(UCConstants.GSIntegration.OAUTH_CLIENT_ID, StringUtils.EMPTY);\n        String newClientSecret = (String) ipaasProps.getOrDefault(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET, StringUtils.EMPTY);\n\n        if (oldClientId.equals(newClientId) && oldClientSecret.equals(newClientSecret)) {\n            String subDomain = (String) ipaasProps.getOrDefault(\"subdomain\", StringUtils.EMPTY);\n            ((Map) pnpConnectionsInfo.getProperties().getOrDefault(IPaasConstants.IPAAS_PROPERTIES, Maps.newHashMap())).put(\"subdomain\", subDomain);\n        } else {\n            ipaasProps.put(UCConstants.GSIntegration.OAUTH_CLIENT_ID, SecretData.fromValue(newClientId));\n            ipaasProps.put(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET, SecretData.fromValue(newClientSecret));\n            ((Map) pnpConnectionsInfo.getProperties().getOrDefault(I","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2405c1f-6de2-46ee-ba55-09b116352e2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":106,"endLine":124,"content":" response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/generated/attributes/{jobId}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getRefreshMetadataStatus(@ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"jobId\") String jobId) {\n        try {\n            return new ResponseObj(true, metadataDriver.getMetadataGenerationStatus(jobId));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Force refresh metadata\", response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/{connectionId}/{objectname}/generated/attributes\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getGeneratedObjectAttributesUsingEngine(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                               @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                                               @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                                               @ApiParam(value = \"Force ref","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd86bb09-edd6-4596-a087-db73cf93ccba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountEventMeasureMapping.java","startLine":54,"endLine":91,"content":"ggregationKey = aggregationKey;\n  }\n\n  /**\n   * Represents displayName that is to be stored in mongo collection collectionmaster\n   * @return\n   */\n  public String getFlippedMeasureDisplayName() {\n    return flippedMeasureDisplayName;\n  }\n\n  public void setFlippedMeasureDisplayName(String flippedMeasureDisplayName) {\n    this.flippedMeasureDisplayName = flippedMeasureDisplayName;\n  }\n\n  /**\n   * Represents the dbName of the field in mongo document/collection master\n   * @return\n   */\n  public String getFlippedMeasureDbName() {\n    return flippedMeasureDbName;\n  }\n\n  public void setFlippedMeasureDbName(String flippedMeasureDbName) {\n    this.flippedMeasureDbName = flippedMeasureDbName;\n  }\n\n  @Override\n  public String toString() {\n    return \"AccountEventMeasureMapping{\" +\n        \"event='\" + event + '\\'' +\n        \", aggregationFunction=\" + aggregationFunction +\n        \", aggregationKey='\" + aggregationKey + '\\'' +\n        \", flippedMeasureDisplayName='\" + flippedMeasureDisplayName + '\\'' +\n        \", flippedMeasureDbName='\" + flippedMeasureDbName + '\\'' +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69024abf-2e99-4ee3-8c32-1abc16caa290","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":164,"endLine":190,"content":"ull) {\n            JsonNode picklistValues = field.get(CUSTOM_FIELD_OPTIONS_KEY) == null ? field.get(SYSTEM_FIELD_OPTIONS_KEY) : field.get(CUSTOM_FIELD_OPTIONS_KEY);\n            List<Map> picklistOptions = new ArrayList<>();\n            for (JsonNode option : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(LABEL, option.get(NAME_KEY_PICKLIST).asText());\n                picklistOption.put(VALUE, ObjectUtils.isNotEmpty(option.get(VALUE_KEY_PICKLIST)) ? option.get(VALUE_KEY_PICKLIST).asText() : option.get(NAME_KEY_PICKLIST).asText());\n                picklistOptions.add(picklistOption);\n            }\n            fieldDefinition.put(OPTIONS, picklistOptions);\n        }\n    }\n\n    private static void populateValueIfPresent(JsonNode sourceMap, String sourceKey,\n                                               Map<String, Object> targetMap, String targetKey, Class<?> type) {\n        if (sourceMap.get(sourceKey) != null) {\n            if (type == Boolean.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asBoolean());\n            else if (type == Integer.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asInt());\n            else if (type == Double.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asDouble());\n            else\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asText());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2de5ea75-7e0a-47c0-a015-f1e4433db450","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/MSTeamsValidationDataSourceService.java","startLine":50,"endLine":72,"content":"sFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String type = gsFieldDefinition.getMeta().getOriginalDataType();\n        String fieldType = gsFieldDefinition.getMeta().getOriginalDataType();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if (isSync) {\n                supportedOperators = dataTypeMappings.stream(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab39be83-e6c5-4add-9264-b928ee73600d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":207,"endLine":233,"content":"(),\n                    ArrayUtils.subarray(path, depth + 1, path.length));\n            if (!MapUtils.isEmpty(tempResult)) //if child map is empty no point populating parent\n                result.put(key, tempResult);\n            return result;\n        }\n        return result;\n    }\n\n    private static Object getWritableValue(GSFieldDefinition fieldInfo, JsonElement jsonObject) {\n        Object val = null;\n        if (jsonObject.isJsonPrimitive()) {\n            if (fieldInfo.getDataType().equalsIgnoreCase(\"boolean\") && jsonObject.getAsJsonPrimitive().isBoolean())\n                val = jsonObject.getAsJsonPrimitive().getAsBoolean();\n            else if (fieldInfo.getDataType().equalsIgnoreCase(\"number\") && jsonObject.getAsJsonPrimitive().isNumber()) {\n                Number num = jsonObject.getAsJsonPrimitive().getAsNumber();\n                if (StringUtils.isNotEmpty(fieldInfo.getMeta().getOriginalDataType())) {\n                    String originalDataType = fieldInfo.getMeta().getOriginalDataType();\n                    if (originalDataType.equalsIgnoreCase(\"integer\"))\n                        val = num.intValue();\n                    else if (originalDataType.equalsIgnoreCase(\"long\"))\n                        val = num.longValue();\n                    else if (originalDataType.equalsIgnoreCase(\"double\"))\n                        val = num.doubleValue();\n                    else if (originalDataType.equalsIgnoreCase(\"float\"))\n                        val = num.floatValue();\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0f99280-a2d2-4806-83ac-f09cf012bd5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ConnectorDataSourceService.java","startLine":30,"endLine":58,"content":"ception;\n\n    default DuctResponse createData(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return createData(ductJobMapping);\n    }\n\n    DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    default DuctResponse updateData(DuctJobMapping ductJobMapping, List<String> identifiers, PNPConnectionsInfo pnpConnectionsInfo,\n                                    ObjectDefinition objectDefinition) throws CaasException {\n        return updateData(ductJobMapping);\n    }\n\n    DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException;\n\n    CaaSExtractDetails getExtractTask(DuctJobMapping ductJobMapping, Map<String, Object> fieldNameDataTypeMap,\n                                      Map<String, GSFieldDefinition> fieldNameMetaMap, Map<String, String> fieldNameToFielAlias) throws CaasException;\n\n    Map<String, Object> getMetadataForTask(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition,\n                                           DHTaskType dpTaskType, String parentId,Map<String, String> fieldNameToFieldAlias)throws CaasException;\n\n}\neldAlias)throws CaasException;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34aee8a9-549f-4596-85c0-effe69b9710b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":103,"endLine":132,"content":"me\n   * full_name -> db_name\n   * label -> label\n   * object_id -> object_name\n   * object_id -> object_db_name\n   */\n\n  public Map<String, Object> generateFieldDefinitionFromFieldInfo(Map<String, Object> fieldInfo, CaasConnectorConfig connectorConfig, Map<String, Object> objectDefinition) {\n    Map<String, Object> fieldDefinition = Maps.newHashMap();\n    Map<String, Object> meta = Maps.newHashMap();\n\n    fieldDefinition.put(FIELD_NAME, DuctUtils.valueOf(fieldInfo.get(FULL_NAME)));\n    fieldDefinition.put(DB_NAME, DuctUtils.valueOf(fieldInfo.get(FULL_NAME)));\n    fieldDefinition.put(LABEL, DuctUtils.valueOf(fieldInfo.get(LABEL)));\n    fieldDefinition.put(OBJECT_NAME, DuctUtils.valueOf(objectDefinition.get(OBJECT_ID)));\n    fieldDefinition.put(OBJECT_DBNAME, DuctUtils.valueOf(objectDefinition.get(OBJECT_ID)));\n    fieldDefinition.put(OPTIONS, DuctUtils.valueOf(objectDefinition.get(OPTIONS)));\n\n    String gainsightDataType = getGainsightDataTypeFromExternalSourceDataType(connectorConfig, DuctUtils.valueOf(fieldInfo.get(DATA_TYPE)));\n    if (StringUtils.isBlank(gainsightDataType)) {\n      log.info(\"[Intercom V2] External DataType {} is not supported, hence skipping it\", DuctUtils.valueOf(fieldInfo.get(DATA_TYPE)));\n      return null;\n    }\n    fieldDefinition.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, gainsightDataType);\n    populateMetaForFieldInfo(fieldDefinition, fieldInfo, meta, connectorConfig);\n    return fieldDefinition;\n  }\n\n\n  public void populateMetaForFieldInf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a5de58e-bc0b-4254-b3b5-3ade1e5f316b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":337,"endLine":360,"content":"jackson.core.JsonProcessingException jex) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", jex.getMessage(), jex);\n      DuctUtils.populateAndInsertError(CaasValidationCode.FAILED_WHILE_FLATTENING_CONNECTION_DETAILS.getUserText(), null);\n    } catch (CaasException cex) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", DuctUtils.getErrorMessageToPopulateFromException(cex), cex);\n      throw cex;\n    } catch (Exception e) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", e.getMessage(), e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n    }\n    return null;\n  }\n\n  /**\n   * @param metadataEngineConfig {@link MetadataEngineConfig}\n   * @param pnpConnectionsInfo   {@link PNPConnectionsInfo\n   * @param objectName           {@link String}\n   * @param objectDefinitionMap  {@link Map}\n   *                             For any connector, if we want to postprocess the fields present in our config, we can do it here.\n   */\n\n  private void processSystemFieldsIfRequired(MetadataEngineConfig metadataEngineConfig, PNPConnectionsInfo pnpConnectionsInfo, String objectName, Map<String, ObjectDefinition> objectDefinitionMap) {\n    try {\n      Optional<ResourceConfig> optionalResourceConfig = metadataEngineCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc726673-9a3f-483d-b053-672fb1f223b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":497,"endLine":516,"content":"{%s}\", entry.getKey(), sb);\n            }\n            if (ceMetadata.containsKey(OPTIONS)) {\n                List<Map<String, String>> options = MAPPER.convertValue(ceMetadata.get(OPTIONS), new TypeReference<List<Map<String, String>>>() {\n                });\n                Map<String, String> picklistOptionsCE = options.stream().collect(Collectors.toMap(i -> i.get(LABEL) + \"____\" + i.get(VALUE), i -> i.get(VALUE)));\n                gsFieldDefinition.getOptions().forEach(i -> {\n                    if (picklistOptionsCE.containsKey(i.getLabel() + \"____\" + i.getValue())) {\n                        if (picklistOptionsCE.get(i.getLabel() + \"____\" + i.getValue()).equals(i.getValue()))\n                            picklistOptionsCE.remove(i.getLabel() + \"____\" + i.getValue());\n                        else\n                            sb.append(String.format(\"Picklist Value mismatch - CE : {%s}, Native : {%s}, FieldName : {%s}\", picklistOptionsCE.get(i.getLabel()), i.getValue(), entry.getKey())).append(NEW_LINE_CHAR);\n                    } else\n                        sb.append(String.format(\"Option Not found in CE but present in native : {%s}, FieldName : {%s}\", i.getLabel(), entry.getKey())).append(NEW_LINE_CHAR);\n                });\n                if (!picklistOptionsCE.isEmpty())\n                    sb.append(String.format(\"Excess picklist option found in CE for fieldName : {%s} : \", entry.getKey())).append(String.join(\",\", picklistOptionsCE.keySet()));\n            }\n        }\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c0a499f-a5b9-4c76-a3e4-72bfdea42e70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.actions.bean.actionowner.BulkActionResponse;\nimport com.gainsight.actions.bean.actionowner.BulkDataLoadRequest;\nimport com.gainsight.actions.bean.common.FileFormat;\nimport com.gainsight.actions.bean.common.Mapping;\nimport com.gainsight.actions.bean.common.S3BucketDetails;\nimport com.gainsight.actions.enums.ExecutionStatus;\nimport com.gainsight.actions.enums.OperationType;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dbqueue.CheckerMessageInfo;\nimport com.gainsight.duct.beans.dbqueue.ExternalDataBaseWBMessageInfo;\nimport com.gainsight.duct.beans.dbqueue.WriteBackDynamicsMessageInfo;\nimport com.gainsight.duct.beans.dbqueue.WriteBackHubspotMessageInfo;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.DuctJ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4565b72-d056-4043-a288-769ec95dae77","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/AuthTokenGenServiceImpl.java","startLine":1,"endLine":37,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.enums.AuthTokenType;\nimport com.gainsight.service.UserSessionService;\nimport com.google.common.collect.Maps;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class AuthTokenGenServiceImpl implements AuthTokenGenService {\n    private static final Map<AuthTokenType, IAuthTokenGenerationStrategy> AUTH_STRATEGIES = Maps.newHashMap();\n    private final UserSessionService userSessionService;\n\n    @Autowired\n    public AuthTokenGenServiceImpl(UserSessionService userSessionService, List<IAuthTokenGenerationStrategy> strategies) {\n        this.userSessionService = userSessionService;\n        for (IAuthTokenGenerationStrategy strategy : strategies) {\n            AUTH_STRATEGIES.put(strategy.getAuthTokenType(), strategy);\n        }\n    }\n\n    public RequestInfo generateToken(AuthTokenType tokenType, Map<String, Object> parameters) {\n        IAuthTokenGenerationStrategy authTokenGenerationStrategy = AUTH_STRATEGIES.get(tokenType);\n        RequestInfo requestInfo = authTokenGenerationStrategy.createRequestInfo();\n        requestInfo.setAdditionalInfo(parameters);\n        return userSessionService.create(requestInfo);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2023307-6889-4b28-8b18-6ab7e0edccdc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebMvcConfiguration.java","startLine":38,"endLine":65,"content":"lvers.add(new PageableHandlerMethodArgumentResolver());\n  }\n\n  @Override\n  public void addInterceptors(InterceptorRegistry registry) {\n    final boolean apiScopeEnabled = DeploymentProperties.getDeploymentProperties().getBooleanValue(\"api.authorization.check.enabled\", false);\n    final boolean permissionCheckEnabled = DeploymentProperties.getDeploymentProperties().getBooleanValue(\"api.permission.check.enabled\", false);\n    final String EXCLUDE_INTERCEPTOR_URIS = DeploymentProperties.getDeploymentProperties().getValue(\"excluded.b2b.interceptor.uri\",\"/**/duct/external/notification/ZOOM, /**/duct/external/notification/MSTEAMS\");\n    final List<String> excludeInterceptorURIs = Arrays.stream(EXCLUDE_INTERCEPTOR_URIS.split(UCConstants.COMMA)).map(uri -> uri.trim()).collect(Collectors.toList());\n\n    if (SwaggerConfiguration.SWAGGER_ENABLED) {\n      excludeInterceptorURIs.add(\"/status\");\n      excludeInterceptorURIs.add(\"/*swagger*/**\");\n      excludeInterceptorURIs.add(\"/v2/**\");\n      excludeInterceptorURIs.add(\"/webjars/**\");\n      registry.addInterceptor(gainsightB2BInterceptor)\n              .excludePathPatterns(excludeInterceptorURIs);\n    } else {\n      excludeInterceptorURIs.add(\"/status\");\n      registry.addInterceptor(gainsightB2BInterceptor)\n              .excludePathPatterns(excludeInterceptorURIs);\n    }\n\n    if (apiScopeEnabled) {\n      registry.addInterceptor(new ApiScopeInterceptor());\n    }\n    if (permissionCheckEnabled) {\n      registry.addInterceptor(new Permissi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ef6fce7-3ec6-4e61-bbaa-8ca1f204fe2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/SwaggerConfiguration.java","startLine":1,"endLine":44,"content":"package com.gainsight.config;\n\nimport com.gainsight.properties.DeploymentProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.*;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.*;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spi.service.contexts.SecurityContext;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils.Constants;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @author psharma\n * on 19-Mar-2020 11:07 AM\n */\n@Slf4j\n@EnableSwagger2\n@Configuration\n@Profile({\"!client & !test\"})\n@Conditional(SwaggerConfiguration.SwaggerCondition.class)\npublic class SwaggerConfiguration {\n\n  public static final boolean SWAGGER_ENABLED = !DeploymentProperties.getDeploymentProperties()\n      .getBooleanValue(Constants.GS_PRODUCTION_KEY, true);\n\n  @Bean\n  public Docket api() {\n    log.info(\"Creating bean of swagger Docket\");\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .apis(RequestHandlerSelectors.any())\n        .paths(PathSelectors.any())\n        .build()\n        .securityContexts(Collections.singletonList(securityContext()))\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"820086e3-a65f-45bf-896c-ad122d9023a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":256,"endLine":289,"content":"pe.replace(CUSTOM_PREFIX, \"\");\n    }\n\n    if (originalDataType.startsWith(DEFAULT_PREFIX)) {\n      originalDataType = originalDataType.replace(DEFAULT_PREFIX, \"\");\n    }\n\n    meta.put(ORIGINAL_DATA_TYPE, originalDataType);\n    meta.put(ACCESSIBLE, true);\n    DataTypeMappings dataTypeMappingsForField = getDataTypeMappingFromExternalSourceDataType(connectorConfig, originalDataType);\n\n    // since the properties we are receiving are less in number, we are copying the properties as it is and adding the required properties\n    Map<String, Object> metaProperties = DuctUtils.deepCopy(fieldInfo, Map.class);\n\n    if (Objects.nonNull(dataTypeMappingsForField) && dataTypeMappingsForField.getDecimalPlaces() != null) {\n      meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n    }\n\n    if (DataType.DATE.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name())\n        || DataType.DATETIME.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name()) ||\n        DataType.TIMESTAMP.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name())) {\n      metaProperties.put(\"format\", dataTypeMappingsForField.getFormat());\n    }\n\n    meta.put(PROPERTIES, metaProperties);\n    fieldDefinition.put(META, meta);\n  }\n\n\n  private String getGainsightDataTypeFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String\n      externalSourceDataType) {\n\n    if (StringUtils.isBlank(externalSourceDataType)) {\n      return n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3dba41e-076a-4ffd-9331-3b06d8970c62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":556,"endLine":572,"content":"tes(dataEnum, dataApi, recordId, objectName);\n\n      for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n        String fieldPrefix = apiConfigAttribute.getPrefixForMetadataFetch();\n        HttpRequestBase httpClientForApiCall = authService.getHttpClientForMetadataRequest(metadataEngineConfig,\n            apiConfigAttribute, objectName, pnpConnectionsInfo, flattenedConnectionInfo, null);\n        Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(apiConfigAttribute.getResponseType()) && apiConfigAttribute.getResponseType().equals(ResponseType.XML);\n        resultData = metadataEngineService.executeApi(httpClientForApiCall, apiConfigAttribute.getResponseRootKey(),\n            metadataEngineConfig.getRateLimitDetails(), isXmlResponse);\n        if (ObjectUtils.isNotEmpty(resourceConfig.getMetadataTransformationConfig()))\n          resultData = sanitizeData(resultData, resourceConfig);\n        File file = new File(\"temp.json\");\n        Files.write(file.toPath(), OBJECT_MAPPER.writeValueAsBytes(resultData));\n        String filePath = FILE_PATH + FORWARD_SLASH + pnpConnectionsInfo.getTenantId() + FORWARD_SLASH + pnpConnectionsInfo.getConnectionId() + FORWARD_SLASH + objectName + FORWARD_SLASH + metadataGenerationDetails.getJobId() + FORWARD_SLASH + objectName + \"_\" + metadataGenerationDetails.getJobId() + \".json\";\n        DuctS3Utility.uploadFilesOnS3(filePath, file);\n        metadataGenerationDetails.setDataFilePath(filePath);\n        generatedFi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d06853ed-455a-46fb-8e0b-1752bb3a13b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctGSServiceUrlUtil.java","startLine":1,"endLine":52,"content":"package com.gainsight.duct.utils;\n\n\nimport com.gainsight.commons.enums.GSService;\nimport com.gainsight.commons.utils.GSServiceURLFactory;\nimport com.gainsight.properties.DeploymentProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Objects;\n\n/**\n * @author puneetsaluja\n * @created 22/05/23\n */\n@Slf4j\npublic class DuctGSServiceUrlUtil {\n\n    public static String getCasesApiUrl() {\n        return getUrlWithFallback(GSService.GS_CASES_ENDPOINT, \"gs.cases.ms.url\");\n    }\n\n    public static String getCAASApiUrl() {\n        return getUrlWithFallback(GSService.GS_CAAS_ENDPOINT, \"gs.caas.api.url\");\n    }\n\n    public static String getScribbleApiUrl() {\n        return getUrlWithFallback(GSService.GS_SCRIBBLE_ENDPOINT, \"gs.scribble.base.url\");\n    }\n\n    public static String getRoadMapToolingApiUrl() {\n        return getUrlWithFallback(null, \"RMT.BASE.URL\");\n    }\n\n    public static String getUserApiUrl() {\n        return getUrlWithFallback(GSService.GS_USERS_ENDPOINT, \"gs.users.url\");\n    }\n\n    public static String getGSObjectApiUrl() {\n        return getUrlWithFallback(GSService.GS_OBJECT_ENDPOINT, \"gs.object.base.url\");\n    }\n\n    public static String getProductDataloadApiUrl() {\n        return getUrlWithFallback(null, \"product.dataload.url\");\n    }\n\n    public static String getPersonApiUrl() {\n        return getUrlWithFallback(null, \"gs.people.ms.base.url\");\n    }\n\n    public stati","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83ec91ec-8704-4ee0-a7ac-2f25bc285056","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1215,"endLine":1248,"content":"B_JOBS, true);\n        pnpConnectionsInfo.setSalesforceComponentName(RandomStringUtils.random(20, CHARSET));\n        return pnpConnectionsInfo;\n    }\n\n    private String populateCustomDomain(PNPConnectionsInfo pnpConnectionsInfo, boolean isCustomDomain) {\n        String customDomainUrl = StringUtils.EMPTY;\n        if (isCustomDomain) {\n            customDomainUrl = GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL));\n            if (customDomainUrl.startsWith(HTTP)) {\n                customDomainUrl = customDomainUrl.replace(HTTP, HTTPS);\n            } else if (!customDomainUrl.startsWith(HTTPS)) {\n                customDomainUrl = HTTPS + customDomainUrl;\n            }\n            if (!customDomainUrl.trim().endsWith(\"/\")) {\n                customDomainUrl = customDomainUrl.concat(\"/\");\n            }\n        }\n        return customDomainUrl;\n    }\n\n    private BaseTokenDetail getEncryptedBaseTokenDetail(String accessSecret, ConnectorType connectorTypeEnumType) {\n        BaseTokenDetail baseTokenDetail = new BaseTokenDetail();\n        switch (connectorTypeEnumType) {\n            case MIXPANEL:\n            case SEGMENT_IO:\n                baseTokenDetail.setAccessSecret(SecretData.fromValue(accessSecret));\n                break;\n            case GS_BULK_API:\n            case GAINSIGHT_PX:\n            case SAP_MKT:\n                baseTokenDetail.setAccessKey(SecretData.fromValue(accessSecret));\n                break;\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18d19869-e48c-44aa-9320-8fe273ea384e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.cons","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"008d4e95-b113-4344-bc66-005b1089c886","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GSIntegrationResponse.java","startLine":1,"endLine":65,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n/**\n * Created by vgautam on 09/03/18.\n */\n// TODO : Should be removed @Aditya\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GSIntegrationResponse implements Serializable{\n\n    private static final long serialVersionUID = -1l;\n\n    private boolean isSuccessful;\n    private Object result;\n    private String additionalMessage;\n    private int httpStatusCode;\n    private String errorCode;\n    private String errorMessage;\n\n\n    public GSIntegrationResponse() {\n    }\n\n    public GSIntegrationResponse(boolean isSuccessful, int httpStatusCode) {\n        this.isSuccessful = isSuccessful;\n        this.httpStatusCode = httpStatusCode;\n    }\n\n    public boolean isSuccessful() {\n        return isSuccessful;\n    }\n\n    public void setSuccessful(boolean successful) {\n        isSuccessful = successful;\n    }\n\n    public Object getResult() {\n        return result;\n    }\n\n    public void setResult(Object result) {\n        this.result = result;\n    }\n\n    public String getAdditionalMessage() {\n        return additionalMessage;\n    }\n\n    public void setAdditionalMessage(String additionalMessage) {\n        this.additionalMessage = additionalMessage;\n    }\n\n    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }\n\n    public void setHttpStatusCode(int httpStatusCode) {\n        this.httpSt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b3ec44d-7986-4aee-b35f-bc50a90d3fb7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.bionicrules.helper.BionicRuleHttpHelper;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Maps;\nimport lombok.SneakyThrows;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * createdBy: snargana\n * date: 25/06/24\n */\n\n@Order(10000)\n@Service\npublic class FreshdeskConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d492efc-f8db-48d2-a267-f06e3ff58394","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":103,"endLine":127,"content":"Null(RequestContextProvider.getRequestInfo().getJwtToken())) {\n                httpHeaders.put(\"authToken\", Lists.newArrayList(RequestContextProvider.getRequestInfo().getJwtToken()));\n            }\n            if (StringUtils.isNotBlank(RequestContextProvider.getRequestId())) {\n                httpHeaders.put(X_REQUEST_ID, Lists.newArrayList(RequestContextProvider.getRequestId()));\n            } else if (StringUtils.isNotBlank(MDC.get(X_REQUEST_ID))) {\n                httpHeaders.put(X_REQUEST_ID, Lists.newArrayList(MDC.get(X_REQUEST_ID)));\n            }\n            GainsightCollectionUtils.nullSafeMap(customHeaders).forEach((k, v) -> httpHeaders.put(k, Lists.newArrayList(v)));\n            return httpHeaders;\n        } catch (Exception e) {\n            throw new SystemException(e.getMessage(), e);\n        }\n    }\n\n    private static String getEncryptedRequestInfo() {\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        try {\n            if (MapUtils.isNotEmpty(RequestContextProvider.getRequestInfo().getAdditionalInfo())) {\n                RequestInfo modifiedRequestInfo =\n                        GainsightUtils.convertJsonToObject(GainsightUtils.convertObjectToJson(requestInfo), RequestInfo.class);\n                removeProperty(modifiedRequestInfo, \"companyCollection\");\n                removeProperty(modifiedRequestInfo, \"relationshipCollection\");\n                removeProperty(modifiedRequestInfo, \"authToken\");\n                RequestContextProv","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2f599715-ef79-4656-bd2e-5f762437c2fc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/CaasRedisTemplateImpl.java","startLine":54,"endLine":67,"content":"Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                if (factory != null) {\n                    try {\n                        factory.destroy();\n                    } catch (Exception e) {\n                        LOGGER.warn(REDIS_ERROR, e);\n                    }\n                }\n            }\n        });\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ac6cb41-2150-460f-9163-c2a1c188850f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":172,"endLine":192,"content":"             && !ConnectionStatus.AUTHORIZED_AND_LINKED.equals(pnpConnectionsInfo.getConnectionStatus()))\n                    throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.CONNECTION_NOT_AUTHORIZED.getGsEventCode(), CaasValidationCode.CONNECTION_NOT_AUTHORIZED.getUserText(), null, null, \"Connection is not authorized\"));\n                break;\n            default:\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_CONNECTOR_TYPE.getGsEventCode(), CaasValidationCode.INVALID_CONNECTOR_TYPE.getUserText(), null, null, \"Connector Type is not Valid\"));\n        }\n    }\n\n    public static void populateAndInsertError(String message, String jobId) throws CaasException {\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = populateError(message, jobId);\n        throw new CaasException(gsExternalSystemErrorMapping);\n    }\n\n\n    private static GsExternalSystemErrorMapping populateError(String hubspotBulkWriteBackNotSupported, String jobId) {\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping();\n        gsExternalSystemErrorMapping.setGsErrorCode(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE);\n        gsExternalSystemErrorMapping.setGsErrorMessage(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE);\n        gsExternalSystemErrorMapping.setMessage(hubspotBulkWriteBackNotSupported);\n        gsExternalSystemErrorMapping.setJobId(jobId);\n        return gs","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6cb37273-47ee-40e9-aa45-0daf00358a12","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":341,"endLine":364,"content":"      log.error(\"Error while generating query payload for object search, Falling back to default payload\", ex);\n      return getDefaultQueryBodyMap(criteria);\n    }\n\n  }\n\n\n  @Override\n  protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n    Optional<ResourceConfig> optionalResourceConfig = getResourceConfig(ductJobMapping);\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.INTERCOMV2);\n    if (!optionalResourceConfig.isPresent()) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    }\n    ResourceConfig resourceConfig = optionalResourceConfig.get();\n    ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_ASYNC);\n    boolean generateQueryBodyForRequest = isQueryBodyRequiredForRequest(apiConfigAttributes);\n    if (!generateQueryBodyForRequest) {\n      // since no filters should be applied, return empty filter rule\n      return new FilterRule();\n    }\n    Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n    Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n    return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, f","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d82c3895-4201-4c9b-81f7-35a577c8efcf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":83,"endLine":119,"content":";\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.databricks.external.task.databricks.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.databricks.external.task.databricks.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.databricks.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DATABRICKS);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.DATABRICKS;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        return null;\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6298318-a639-456e-a053-84799fa760c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":92,"endLine":119,"content":"ata = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n            if (Objects.isNull(nextPageToken) || \"null\".equalsIgnoreCase(nextPageToken)) {\n                nextPageToken = null;\n            }\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (\n                Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n        return ConnectorDataSourceService.super.fetchSynchronziedData(ductJobMapping, objectDefinition, maxPageSize);\n    }\n\n\n    private static String populatePaginationDetails(JsonNo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79349808-a7cc-4a1e-9f17-c101d70b5226","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":147,"endLine":186,"content":"  }\n\n  @Override\n  public List<PNPConnectionsInfo> findByConnectionType(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    return find(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findByConnectionIds(List<String> connectionIds) {\n    Query query = new Query(Criteria.where(\"connectionId\").in(connectionIds));\n    return find(query);\n  }\n\n  @Override\n  public PNPConnectionsInfo findByCrmId(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    return findOne(query);\n\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findByConnectionTypes(List<ConnectorType> connectorTypes) {\n    return find(new Query().addCriteria(Criteria.where(\"connectionType\").in(connectorTypes)));\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findByExcludingConnectionTypes(List<ConnectorType> connectorTypes) {\n    return find(new Query().addCriteria(Criteria.where(\"connectionType\").nin(connectorTypes)));\n  }\n\n  @Override\n  public boolean findIfTenantAlreadyLinked(ConnectorType connectorType){\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(\"properties.\" + UCConstants.GSIntegration.IS_PRIMARY_CONNECTION).is(true));\n    return GainsightCollectionUtils.nullSafeList(find(query)).isEmpty();\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findPrimaryConnectionsByConnectorType(Connect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db065866-e53c-4596-ae0f-0873e1aac393","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/IAuthTokenGenerationStrategy.java","startLine":1,"endLine":21,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.enums.AuthTokenType;\n\n/**\n * Created by Sunand on 8/27/2014.\n */\npublic interface IAuthTokenGenerationStrategy {\n  AuthTokenType getAuthTokenType();\n\n  RequestInfo createRequestInfo();\n\n  void removeAuthToken();\n\n  void expireToken();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"25c4dfd3-7041-4a9e-98aa-0b01d0aa10a6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZendeskConnectionService.java","startLine":59,"endLine":82,"content":" pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        if (pnpConnectionsInfo.isIpaasConnection()) {\n            // TODO : Delete CE Instance @Aditya\n        }\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.getProperties().put(IPaasConstants.IPAAS_PROPERTIES, DuctUtils.removeCEPropertiesFromIpaasPropertiesIfPresent(pnpConnectionsInfo));\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(ConnectorType.ZENDESK);\n        Optional<AuthDetails> authInfoOptional = metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails auth","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9ecdc5f-ac4b-4885-be49-a8b8fcfcf46d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/SwaggerConfiguration.java","startLine":74,"endLine":86,"content":"(\"v1.0\")\n        .license(\"GainSight\")\n        .build();\n  }\n\n  public static class SwaggerCondition implements Condition {\n    @Override\n    public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata) {\n      SwaggerConfiguration.log.info(\"Swagger enabled : {}\", SWAGGER_ENABLED);\n      return SWAGGER_ENABLED;\n    }\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3724c006-b37b-4bb6-8513-e71832b0a276","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":56,"endLine":77,"content":"ayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n\n        //Get the list of normalizable internal types from the connector config, and create separate fields for each of them\n        List<String> normalizableInternalTypes = (List) connectorConfig.getAdditionalProperties().getOrDefault(NORMALIZABLE_INTERNAL_TYPES,\n                Lists.newArrayList(\"glide_list\", \"reference\", \"domain_id\"));\n\n        for (JsonNode field : fields) {\n            if (!field.has(ELEMENT)) {\n                LOGGER.warn(\"Field not supported, hence skipping {}\", field);\n                continue;\n            }\n\n            String originalDataType = (field.has(INTERNAL_TYPE) && field.get(INTERNAL_TYPE).has(INTERNAL_TYPE_VALUE)) ?\n                    field.get(INTERNAL_TYPE).get(INTERNAL_TYPE_VALUE).asText() : null;\n            if (normalizableInternalTypes.contains(originalDataType)) {\n                field.get(INTERNAL_TYPE).fieldNames().forEachRemaining(\n                        item -> {\n                            Map<String, Object> fieldDefinition = populateFieldDefinition(field, STRING, dataTypeMappings, complexTypeMappings,\n                                    field.get(ELEMENT).asText() + UCConstants.PERIOD + item,\n                                    fiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b301d195-4f0d-49d2-b350-3a90a73aa54a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/MSTeamsCaasMetaDataServiceImpl.java","startLine":72,"endLine":96,"content":"nce<List<GSFieldDefinition>>() {});\n        gsFields.stream().forEach(field -> {\n            GSFieldMeta metaMap = field.getMeta();\n            Map<String, Object> metaProperties = metaMap.getProperties();\n            if(null != metaMap.getOriginalDataType()) {\n                DataTypeMappings dataTypeMappingsForField = connectorConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                        .equalsIgnoreCase(metaMap.getOriginalDataType())).findFirst().get();\n                if (null == metaMap.getDecimalPlaces() && Objects.nonNull(dataTypeMappingsForField.getDecimalPlaces())) {\n                    metaMap.setDecimalPlaces(dataTypeMappingsForField.getDecimalPlaces());\n                }\n                if (StringUtils.isNotEmpty(dataTypeMappingsForField.getFormat())) {\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n                }\n                if (ObjectUtils.isNotEmpty(metaProperties)) {\n                    metaMap.setProperties(metaProperties);\n                }\n            }\n            field.setMeta(metaMap);\n        });\n        metadata.put(FIELDS, gsFields);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n    }\n\n    private Map constructMSTeamsObjectDefinition(List<GainsightMSTeamsFieldDescription> gainsightMSTeamsFieldDescription, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) {\n        M","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1de7aff-949e-4d90-8e34-3accd1040aab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":490,"endLine":506,"content":"Code.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getExtractTask(@ApiParam(value = \"Request Structure to extract task\", required = true) @RequestBody final DuctRequestDTO ductRequestDTO,\n                                      @ApiParam(value = \"Include Jar Details\", required = false) @RequestParam(value = \"includeJarDetails\", required = false) boolean includeJarDetails,\n                                      @ApiParam(value = \"Parent Id\", required = false) @RequestParam(value = \"parentId\", required = false) String parentId) {\n        try {\n            if (includeJarDetails)\n                return new ResponseObj(true, ductJobMappingService.createExtractTaskWithJarDetails(ductRequestDTO, parentId));\n            return new ResponseObj(true, ductJobMappingService.createExtractTask(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f62b4f45-260b-4628-8254-5c95ad622a80","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.DATA_TYPE;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.LABEL;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.O","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6d8eff5-c415-491b-8e15-210fc47f8a9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":65,"endLine":87,"content":"ction(PNPConnectionInput pnpConnectionInput) {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n\n    IntercomV2Region region = DuctUtils.getRegion(pnpConnectionsInfo);\n    Map<String, Object> IPAAS_PROPERTIES = (Map<String, Object>) GainsightCollectionUtils.nullSafeMap(pnpConnectionsInfo.getProperties())\n            .getOrDefault(IPaasConstants.IPAAS_PROPERTIES, new HashMap<>());\n    IPAAS_PROPERTIES.put(\"region\", region.name());\n    IPAAS_PROPERTIES.put(\"APP_URL\", region.getAppURL());\n    IPAAS_PROPERTIES.put(\"API_URL\", region.getApiURL());\n    GainsightCollectionUtils.nullSafeMap(pnpConnectionsInfo.getProperties()).put(IPaasConstants.IPAAS_PROPERTIES, IPAAS_PROPERTIES);\n\n    pnpConnectionsInfo.setIpaasConnection(false);\n    pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n    return pnpConnectionsInfo;\n  }\n\n  @Override\n  public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n    Map<String, Object> IPAAS_PROPERTIES_NEW = (Map<String, Object>) GainsightCollectionUtils.nullSafeMap(pnpConnectionInput.getProperties())\n            .getOrDefault(IPaasConstants.IPAAS_PROPERTIES, new HashMap<>());\n    IntercomV2Region oldRegion = DuctUtils.getRegion(pnpConnectionsInfo);\n    IntercomV2Region newRegion = IntercomV2Region.valueOf(IPAAS_PROPERTIES_NEW.getOrDefault(\"region\", IntercomV2Region.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0bf44405-6631-4b19-bfc8-d0131c4f06ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctFetchRequestDTO.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.beans.dto;\n\nimport java.util.HashMap;\nimport java.util.Map;\npublic class DuctFetchRequestDTO {\n\n    private String primaryJobId;\n    private String workFlowStringifiedRep;\n    private Map<String, String> jobIdToTaskIdMap;\n\n    public String getPrimaryJobId() {\n        return primaryJobId;\n    }\n\n    public void setPrimaryJobId(String primaryJobId) {\n        this.primaryJobId = primaryJobId;\n    }\n\n\n    public String getWorkFlowStringifiedRep() {\n        return workFlowStringifiedRep;\n    }\n\n    public void setWorkFlowStringifiedRep(String workFlowStringifiedRep) {\n        this.workFlowStringifiedRep = workFlowStringifiedRep;\n    }\n\n    public Map<String, String> getJobIdToTaskIdMap() {\n        if(this.jobIdToTaskIdMap == null){\n            this.jobIdToTaskIdMap = new HashMap<>();\n        }\n        return this.jobIdToTaskIdMap;\n    }\n\n    public void addDetailsToMap(String jobId, String taskId){\n        getJobIdToTaskIdMap().put(jobId, taskId);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0931827a-1bdd-431f-ba80-5bd38324ad7b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackDynamicsMessageProcessor.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.MDCContext;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.DuctService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class WriteBackDynamicsMessageProcessor extends AbstractDbQueueMessageProcessor {\n    private final MessageInfoFactory ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9363f6f-1d7e-4f74-b8dc-3dc4e26b801b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":510,"endLine":526,"content":"e = caasConnectorConfig.getAdditionalProperties().containsKey(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE) ?\n                    Integer.parseInt(caasConnectorConfig.getAdditionalProperties().get(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE).toString())\n                    : 100;\n            ConnectorDataSourceService connectorDataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n            return connectorDataSourceService.fetchSynchronziedData(ductJobMapping, pageSize);\n        } catch (Exception e) {\n            log.error(\"Error wile fetching data {} \", e.getMessage());\n            InstrumentationUtil.recordException(ductJobMapping, DuctConstants.CAAS_WEB, e.getMessage());\n            throw e;\n        }\n    }\n\n    private QueryAPIResponseBean getSynchronizedQueryApiResponse(DuctJobMapping ductJobMapping, PNPConnectionsInfo\n            pnpConnectionsInfo, ObjectDefinition objectDefinition, boolean isConfigDriven) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        int pageSize = caasConnectorConfig.getAdditionalProperties().containsKey(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE) ?\n                Integer.parseInt(caasConnectorConfig.getAdditionalProperties().get(DuctConstants.ConnectorConfigConstants.SYNC_REQUES","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"429c17da-43de-405a-a26a-2e8ecc33ef3f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":139,"endLine":160,"content":"utesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n            MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n            /*\n            Tenant level overrides\n             */\n            List<CaasObjectAttributesTenantConfig> tenantConfigAttributes = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId());\n            MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(tenantConfigAttributes, metadata);\n            /*\n            Connection Id level overrides\n             */\n            List<CaasObjectAttributesTenantConfig> connectionIdConfigAttributes = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n            MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(connectionIdConfigAttributes, metadata);\n\n            return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n        } catch (CaasException ex) {\n            throw ex;\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private List<JsonNode> getIpaasMetadata(String objectName, PNPConnecti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"255a2862-b7b7-44b4-be33-6b87cf9802d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":114,"endLine":139,"content":"caas.external.task.zohov2.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        //TODO : Need to check on filters supported at source\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.ZOHOV2);\n        Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n        Criteria modifiedCriteria = modifyCriteria(clonedCriteria, fieldNameMetaMap);\n        if (modifiedCriteria == null)\n            return null;\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, fieldNameDataTypeMap, fieldNameMetaMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            ObjectDefinition objectDefinition = getObjectAttributes(pnpConnectionsInfo, ductJobMapping);\n            Optional<ResourceConfig> fir","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d3715e2-c6d8-4298-9214-0a93e06c17fd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":74,"endLine":93,"content":"                //For some fields CE does not give display name, setting field name as display name for those fields\n                fieldDefinition.put(LABEL, field.get(NAME).asText());\n\n                //set datatype\n                if (field.get(FIELD_TYPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(FIELD_TYPE).asText()))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(FIELD_TYPE).asText())).findFirst().get();\n                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(ORIGINAL_DATA_TYPE, field.get(FIELD_TYPE).asText());\n                    if (complexTypeMappings.containsKey(field.get(FIELD_TYPE).asText()))\n                        metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.get(FIELD_TYPE).asText()).getValue());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                } else {\n                    LOGGER.warn(\"Type not supported, hence skipping {}\", field.get(FIELD_TYPE).asText());\n                    continue;\n                }\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d8eaedf-e8b0-4988-82af-f48b6a63cb93","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":825,"endLine":847,"content":"Some of the fields does not exist in the source system \" + String.join(\",\", fieldsNotPresent));\n        }\n\n        if (!isIdentifierPresent && (DuctDataOperation.UPDATE.equals(ductDataOperation) || DuctDataOperation.UPSERT.equals(ductDataOperation))) {\n            DuctUtils.throwError(CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getGsEventCode(), CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText(),\n                    CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText());\n        }\n\n        if (!readOnlyFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getGsEventCode(), CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText(),\n                    \"Some of the fields not supported for writeback in the source system: \" + String.join(\",\", readOnlyFields));\n        }\n    }\n\n    private void validateS3Info(DuctJobMapping ductJobMapping) throws CaasException {\n        if (ductJobMapping.getCaasS3FileDetails() == null || ductJobMapping.getCaasS3FileDetails().getBucketName() == null ||\n                (ductJobMapping.getCaasS3FileDetails().getFilesDir() == null || ductJobMapping.getCaasFileInfo().getFileName() == null)) {\n            log.error(DuctErrorConstants.INVALID_S3_FILE_DETAILS);\n            DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_S3_FILE_DETAILS, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateIfFilePresent(DuctJobMapping ductJobMapping) throws CaasException {","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9cacd630-76f0-42f4-8dbc-bc13537043ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":247,"endLine":268,"content":"Constants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n        });\n        responseList.addAll(data);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    private ObjectDefinition getObjectAttributes(PNPConnectionsInfo pnpConnectionsInfo, DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bcc31b7-939b-4c97-9f36-c006afb4ebc7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":868,"endLine":886,"content":"            .properties(createPropertiesForRuleRequest(bulkDataLoadRequest))\n                .build();\n    }\n\n    private Map createPropertiesForRuleRequest(BulkDataLoadRequest bulkDataLoadRequest) throws CaasException {\n        Map<String, Object> properties = new HashMap<>();\n        Map<String, DuctDataOperation> objectLevelWritebackOperation = new HashMap<>();\n        Object targetObjectName = bulkDataLoadRequest.getParams().get(\"objName\");\n        if (bulkDataLoadRequest.getParams() != null && bulkDataLoadRequest.getParams().containsKey(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION)) {\n            Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) bulkDataLoadRequest.getParams().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n            for (Map.Entry<String, Object> entry : requestObjectLevelWritebackOperation.entrySet()) {\n                validateOperation(entry);\n                objectLevelWritebackOperation.put(entry.getKey(), DuctDataOperation.valueOf(entry.getValue().toString()));\n            }\n            properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelWritebackOperation);\n            return properties;\n        } else if (targetObjectName != null && bulkDataLoadRequest.getOperation() != null) {\n            objectLevelWritebackOperation.put(targetObjectName.toString(), setOperation(bulkDataLoadRequest.getOperation()));\n            properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLeve","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b2e153a3-ac94-4597-b446-a8ea086aa16b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/EncryptConnectionDetailsManager.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.utils.connectiondetailEncrytor;\n\nimport com.gainsight.duct.utils.connectiondetailEncrytor.Impl.MySQLConnectionDetailsEncryptor;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.Impl.PostgresConnectionDetailsEncryptor;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.Impl.SnowFlakeConnectionDetailsEncryptor;\n\npublic class EncryptConnectionDetailsManager {\n\n    public static EncryptConnectionDetails encryptConnectionDetails(String type) {\n        switch (type) {\n            case \"SNOWFLAKE\":\n                return new SnowFlakeConnectionDetailsEncryptor();\n            case \"POSTGRES\":\n                return new PostgresConnectionDetailsEncryptor();\n            case \"MYSQL\":\n                return new MySQLConnectionDetailsEncryptor();\n            default:\n                return null;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2d19448-64cc-4860-8182-34ace8f61c81","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":70,"endLine":89,"content":")).get(EXPRESSION_FOR_REQUIRED_FIELDS));\n        objectDefinition.put(EXPRESSION_FOR_UPSERT_KEYS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_UPSERT_KEYS));\n        if (sourceFields.isArray()) {\n            List<Object> pipelineValues = gainsightHubspotFetchProcessor.getPipeLineValues(pnpConnectionsInfo, objectLabel);\n            for (JsonNode field : sourceFields) {\n                GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = OBJECT_MAPPER.convertValue(field, GainsightHubspotFieldDescriptionV3.class);\n                fieldDefinition = new HashMap();\n                Map<String, Object> meta = new HashMap<>();\n                Map<String, Object> metaProperties = new HashMap<>();\n                fieldDefinition.put(FIELD_NAME, gainsightHubspotFieldDescription.getName());\n                fieldDefinition.put(DB_NAME, \"properties.\" + gainsightHubspotFieldDescription.getName());\n                fieldDefinition.put(LABEL, gainsightHubspotFieldDescription.getLabel());\n\n                if (PIPELINE_ALLOWED_OBJECT_LIST.contains(objectLabel) &&\n                        SPECIAL_HANDLING_PICKLIST_ATRRIBUTES.contains(gainsightHubspotFieldDescription.getName()) && CollectionUtils.isNotEmpty(pipelineValues)) {\n                    handleSpecialHandlingForPickList(fieldDefinition, pipelineValues);\n                }\n\n                //set datatype\n                if (data","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"031dbe3a-6d83-4297-855b-880819fa516f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":578,"endLine":609,"content":"esponse(directoryPath, entityName, responseContent);\n        return MAPPER.convertValue(responseContent.get(\"data\"), Map.class);\n    }\n\n    private void logResponse(String directoryPath, String entityName, Object responseContent) {\n        String absolutePath = directoryPath + \"/\" + entityName + \".txt\";\n        Path filePath = Paths.get(absolutePath);\n        try {\n            if (Files.notExists(filePath)) {\n                Files.createFile(filePath);\n                LOGGER.info(\"File created: {}\", absolutePath);\n            } else {\n                LOGGER.info(\"File already exists: {}\", absolutePath);\n            }\n            String jsonString = MAPPER.writeValueAsString(responseContent);\n            try (FileWriter fileWriter = new FileWriter(absolutePath)) {\n                fileWriter.write(jsonString);\n                LOGGER.info(\"JSON data written to file: {} successfully \", absolutePath);\n            } catch (IOException e) {\n                LOGGER.error(\"Error writing JSON to file: {}\", e.getMessage(), e);\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Error creating file: {}\", filePath, e);\n        }\n    }\n\n    private void writeOutHeaders(ICSVWriter writer) {\n        writer.writeNext(new String[]{\"TenantId\", \"Tenant Name\", \"Tenant Type\", \"ObjectName\", \"connectionId\", \"Status\", \"Message\"});\n    }\n\n    private void writeOutData(ICSVWriter writer, String tenantId, String tenantName, TenantType tenantType, String jobName,\n                    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b3f1e5e-4f83-46da-83ff-356c558ab798","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":180,"endLine":203,"content":"\n            Below is valid for only Hive_Metastore, as it doesn't have access to INFORMATION_SCHEMA.*/\n            meta.put(CREATEABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(CREATEABLE, true));\n            meta.put(UPDATEABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(UPDATEABLE, true));\n            meta.put(NILLABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(NILLABLE, true));\n            meta.put(READ_ONLY, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(READ_ONLY, false));\n\n            if (!meta.containsKey(DECIMAL_PLACES) && Objects.nonNull(dataTypeMappingsForField.getDecimalPlaces())) {\n                meta.put(DuctConstants.DescribeMetaConstants.DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n            }\n\n            if (StringUtils.isNotEmpty(dataTypeMappingsForField.getFormat())) {\n                metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n            }\n            metaProperties.put(CAN_BE_IDENTIFIER, dataTypeMappingsForField.canBeIdentifier());\n        }\n\n        if (ObjectUtils.isNotEmpty(metaProperties)) {\n            meta.put(PROPERTIES, metaProperties);\n        }\n        meta.put(FILTERABLE_IN_INTERNAL_SYSTEM, true);\n        meta.put(FILTERABLE_IN_EXTERNAL_SYSTEM, true);\n        meta.put(PATH, String.valueOf(fieldDetails.get(\"col_name\")));\n        meta.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56b1e99b-437c-45f0-b39b-22b6fae890ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":151,"endLine":181,"content":", true);\n      metaProperties.put(LENGTH, Integer.valueOf(fieldDetails.get(LENGTH).toString()));\n    }\n\n    if (null != fieldDetails.get(SCALE) && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())\n            && dataTypeMappingsForField.getMeta().containsKey(SUPPORT_SCALE)\n            && Boolean.TRUE.equals(Boolean.valueOf(dataTypeMappingsForField.getMeta().get(SUPPORT_SCALE).toString()))) {\n      metaProperties.put(SUPPORT_SCALE, true);\n      metaProperties.put(SCALE, Integer.valueOf(fieldDetails.get(SCALE).toString()));\n    }\n\n    if(null != fieldDetails.get(IS_NULLABLE) && Boolean.FALSE.equals(Boolean.valueOf(fieldDetails.get(IS_NULLABLE).toString()))){\n      meta.put(REQUIRED, true);\n    } else {\n      meta.put(REQUIRED, false);\n    }\n\n    meta.put(FILTERABLE, true);\n    meta.put(EXTERNALLY_FILTERABLE, true);\n    meta.put(ACCESSIBLE, true);\n    meta.put(READ_ONLY, true);\n    meta.put(ORIGINAL_DATA_TYPE, fieldDataType);\n    meta.put(IS_PRIMARY_KEY, false);\n    meta.put(SORTABLE, true);\n    meta.put(GROUPABLE, true);\n\n\n    meta.put(CREATEABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(CREATEABLE, true));\n    meta.put(UPDATEABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(UPDATEABLE, true));\n    meta.put(NILLABLE, BooleanUtils.toBooleanDefaultIfNull(BooleanUtils.toBoolean(DuctUtils.valueOf(fieldDetails.get(IS_NULLABLE))), true));\n    meta.put(READ_ONLY, GainsightCollectionUtils.nu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69b24873-469e-40db-949d-1880139ea686","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":168,"endLine":186,"content":"   log.error(\"Could not add extra field for the look up type field due to : {}\", e);\n        }\n        return newField;\n    }\n\n    private static Map<String, Object> getB2BHeaders() {\n        Map<String, Object> headers = new HashMap<>();\n        String secret = CryptUtil.getSimpleCryptor()\n                .encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\")).getValue();\n        headers.put(\"secret\", secret);\n        String requestInfo = RequestContextProvider.getEncryptedRequestInfo(true);\n        headers.put(\"requestInfo\", requestInfo);\n        headers.put(\"x-gs-environment\", DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\"));\n        headers.put(\"x-request-id\", RequestContextProvider.getRequestId());\n        headers.put(\"Content-Type\", APPLICATION_JSON);\n        headers.put(\"gs-ft-meta-client-id\", \"UNIFIED_CONNECTORS\");\n        return headers;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56da378e-4d0d-4722-96ad-26b21735cc83","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":176,"endLine":205,"content":"l);\n      response = AdvancedHttpHelper.delete(url, headers, ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        ResponseObj responseObj = response.getResponseBody();\n        if (responseObj.isResult()) {\n          return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), clazz);\n        } else if (responseObj.getErrorDesc() != null) {\n          throw new SystemException(responseObj.getErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n        }\n      }\n      return null;\n    } catch (Exception e) {\n      if (response != null && response.getReasonPhrase() != null) {\n        throw new SystemException(response.getReasonPhrase(), e, CoreErrorCode.SYSTEM_ERROR, 500);\n      } else {\n        throw new SystemException(\"Error occured while invoking : \" + url, e, CoreErrorCode.SYSTEM_ERROR, 500);\n      }\n    }\n  }\n\n  private static Map<String, String> headers(Map<String, String> additionalHeader) {\n    Map<String, String> headers = new HashMap<>();\n    String encryptedRequestInfo = RequestContextProvider.getEncryptedRequestInfo(true);\n    String secret = getSimpleCryptor().encrypt(DuctConstants.GSNAP_SECRET).getValue();\n    headers.put(\"requestInfo\", encryptedRequestInfo);\n    headers.put(\"secret\", secret);\n    headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n    headers.put(\"tenantId\", RequestContextProvider.getTenantId());\n    headers.put(Constants.X_REQUEST_ID, RequestContextProvider.getRequestId());\n    String gsEnv = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11bf855b-94f8-4487-bbc4-3b6f4c2adefe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/Client.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct;\n\nimport com.gainsight.duct.clients.DuctClient;\nimport com.gainsight.duct.clients.RelaxedParser;\nimport com.gainsight.duct.enums.DuctAppType;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.boot.Banner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.WebApplicationType;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSou","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18e2859c-18c1-4c92-bfed-dd61e9e3fe84","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":144,"endLine":180,"content":"\")) {\n        List<Map<String, Object>> nestedFields = (List<Map<String, Object>>) fieldInfo.get(\"nested_ticket_fields\");\n        if (CollectionUtils.isEmpty(nestedFields)) {\n          return;\n        }\n        for (Map<String, Object> nestedField : nestedFields) {\n          if (!nestedField.containsKey(TYPE)) {\n            nestedField.put(TYPE, \"string\");\n          }\n          Map<String, Object> nestedFieldDefinition = generateFieldDefinitionFromFieldInfo(nestedField, connectorConfig, objectDefinition, additionalFields);\n          additionalFields.add(nestedFieldDefinition);\n        }\n      }\n    } catch (Exception ex) {\n      // only impact here is we would miss out on adding inner nested fields to describe response\n      log.error(\"Error while processing nested fields for fieldInfo: {}\", GainsightUtils.convertObjectToJson(fieldInfo), ex);\n    }\n  }\n\n\n  public List<Map<String, Object>> processPicklistOptions(Map<String, Object> fieldInfo, Map<String, Object> fieldDefinition) {\n    Object choices = fieldInfo.get(\"choices\");\n    if (Objects.isNull(choices)) {\n      return null;\n    }\n\n    List<Map<String, Object>> picklistOptions = new ArrayList<>();\n\n    if (choices instanceof List) {\n      //\"choices\": [\n      //            \"First Choice\",\n      //            \"third Choice\"\n      //        ]\n      List<String> choicesList = (List<String>) choices;\n      for (String choice : choicesList) {\n        Map<String, Object> picklistOption = Maps.newHashMap();\n        picklistOptio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8578cc34-9cf2-43d2-a7a8-1c0e5c743cdb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectField.java","startLine":45,"endLine":103,"content":"rivate Boolean deprecatedAndHidden;\n    private Boolean htmlFormatted;\n    private String defaultValueFormula;\n    private String calculatedFormula;\n    private List<PickListValue> picklistValues;\n    private Boolean dependentPicklist;\n    private List<String> referenceTo;\n    private String relationshipName;\n    private String relationshipOrder;\n    private Boolean cascadeDelete;\n    private Boolean restrictedDelete;\n    private String digits;\n    private Boolean groupable;\n    private Boolean permissionable;\n    private Boolean displayLocationInDecimal;\n    private String extraTypeInfo;\n    private Boolean highScaleNumber;\n    private String mask;\n    private String maskType;\n    private Boolean queryByDistance;\n    private String referenceTargetField;\n    private Boolean encrypted;\n    private String compoundFieldName;\n    private Boolean aggregatable;\n    \n    public Boolean getAggregatable() {\n        return aggregatable;\n    }\n\n    public void setAggregatable(Boolean aggregatable) {\n        this.aggregatable = aggregatable;\n    }\n\n    public Integer getLength() {\n        return length;\n    }\n\n    public void setLength(Integer length) {\n        this.length = length;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getDefaultValue() {\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"885869e6-bea2-4215-b824-75d018a0b47b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/redis/GainsightRedisTemplate.java","startLine":1,"endLine":16,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.redis;\n\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * User: santa\n * Date: 8/4/14\n * Time: 8:41 PM\n */\npublic interface GainsightRedisTemplate {\n  <T> RedisTemplate<String, T> getRedisTemplate();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"36ea2ad4-6d27-4f25-8346-2208f43ed948","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":405,"endLine":423,"content":"pleteJob(ductJobMapping, DuctConstants.CAAS_WEB);\n        return caaSExtractDetails;\n    }\n\n    @Override\n    public Map<String, Object> createExtractTaskWithJarDetails(DuctRequestDTO ductRequestDTO, String parentId) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = service.getObjectAttributes(ductJobMapping, pnpConnectionsInfo);\n        ObjectDefinition objectDefinition = attributesMap.get(ductJobMapping.getResourceName());\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields();\n        Map<String, GSFieldDefinition> fieldNameMetaMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria())) {\n            validateIsExternalFilterable(ductJobMapping, fieldNameMetaMap);\n        }\n        ConnectorDataSourceService dataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n        Map<String, Objec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aaf3abb7-0c83-42c2-b6a0-aba03aa8be2c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":152,"endLine":165,"content":"   gsExternalSystemErrorMapping.setMessage(r.getString(MESSAGE_COLUMN));\n\n            String responsePayload = r.getString(RESPONSE_PAYLOAD_COLUMN);\n            if (responsePayload != null) {\n                gsExternalSystemErrorMapping.setResponsePayload(JsonUtil.readObject(responsePayload, Map.class));\n            }\n            String requestPayload = r.getString(REQUEST_PAYLOAD_COLUMN);\n            if (requestPayload != null) {\n                gsExternalSystemErrorMapping.setResponsePayload(JsonUtil.readObject(requestPayload, Map.class));\n            }\n            return gsExternalSystemErrorMapping;\n        }\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"64030629-9bb5-45c0-94c2-f4fc371066b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":128,"endLine":143,"content":"egrationResponse response = new GSIntegrationResponse();\n        try {\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing ConnectionInfo\", HttpStatus.SC_BAD_REQUEST);\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo.getConnectionId(), UCValidationCode.PNP_INVALID_INPUT, \"Invalid input\", HttpStatus.SC_BAD_REQUEST);\n            List<GainsightHubspotSchema> gainsightHubspotSchemaBean = null;\n            GainsightHubspotChannelFactory connectionFactory = new GainsightHubspotChannelFactory();\n            HttpResponse httpResponse = connectionFactory.getChannelServiceWithOAuth20(\n                            pnpConnectionsInfo.getTokenDetail().getClientId().getString(),\n                            pnpConnectionsInfo.getTokenDetail().getClientSecret().getString(),\n                            CryptHandler.getInstance()\n                                    .decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()))\n                    .getCustomObjects(api);\n            if (httpResponse.getStatusLine().getStatusCode() == 401 || httpResponse.getStatusLine().getStatusCode() == 403) {\n                JsonNode hubspotResponse = MAPPER.readTree(httpResponse.getEntity().getContent());\n                if (hubspotResponse.get(CATEGORY) != null && hubspotResponse.get(CATEGORY).asText().equals(MISSING_SCOPES)) {\n                    LOGGER.info(\"Custom Objects fetch failed with below message : {}\", hubspot","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f362acd-8e6a-4f2d-8dbb-66ab83c1ff79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":84,"endLine":104,"content":"\n        GainsightSnowflakeChannelFactory snowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n        GainsightSnowflakeChannelService gainsightSnowflakeChannelService = snowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);;\n        List<Map<String, Object>> fields = nullSafeList(gainsightSnowflakeChannelService.listAllFields(objectName));\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SNOWFLAKE);\n        Set<String> unSupportedDataType = Sets.newTreeSet(String.CASE_INSENSITIVE_ORDER);\n        caasConnectorConfig.getDataTypeMappings().stream().forEach(dataTypeMappings -> {\n            if(!dataTypeMappings.isSupported())\n                unSupportedDataType.add(dataTypeMappings.getExternalDatatype());\n        });\n        return fields.stream()\n                .map(fieldDetails -> constructFieldMap (fieldDetails,objectName, caasConnectorConfig))\n                .filter(gsFieldDefinition -> !unSupportedDataType.contains((String) ((Map)gsFieldDefinition.get(IPaasConstants.META)).get(ORIGINAL_DATA_TYPE)))\n                .collect(Collectors.toList());\n    }\n\n    private Map<String, Object> constructObjectMap(Map<String, Object> objectDetails) {\n        Map<String, Object> retMap = new HashMap<>();\n        retMap.put(OBJECT_ID, String.valueOf(objectDetails.get(\"name\")));\n        retMap.put(OBJECT_NAME, String.valueOf(objectDetails.get(\"name\")));\n        retMap.put(IPaasConstants.LABEL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adbf00dd-47ab-44cb-8656-0313a3b989dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":126,"endLine":156,"content":"ieldDefinition -> fieldDefinition));\n\n\n      boolean filteringPossibleOnUpdatedAt = filteringPossibleOnUpdatedAt(resourceConfig);\n      Criteria modifiedCriteria = null;\n      if (filteringPossibleOnUpdatedAt) {\n        // get the modified criteria - it is a single criteria which will be used for external system search\n        modifiedCriteria = modifyCriteria(ductJobMapping.getCriteria(), ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n      }\n\n      // set the query parameter for the external system search\n      if (Objects.nonNull(modifiedCriteria)) {\n        Object dateTimeStr = ((List<Object>) modifiedCriteria.getValues()).get(0);\n        queryParam.put(UPDATED_SINCE, DuctUtils.valueOf(dateTimeStr));\n      }\n\n\n      HttpRequestBase httpClient;\n      if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n        paginationInfo = new HashMap<>();\n        if (paginationDetails.isUrl()) {\n          paginationInfo.put(URL, ductJobMapping.getNextPageToken());\n        } else if (paginationDetails.isQueryParam()) {\n          queryParam.put(apiConfigAttributes.getPaginationDetails().getRequestKey(), ductJobMapping.getNextPageToken());\n        }\n      }\n      httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n          apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, modifiedCriteria, flattenedConnectionInfo, paginationInfo, queryParam);\n\n\n      JsonNode jsonNode = metadataEngineService.executeApi(httpClien","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa8aeb19-0937-4339-9326-93b19a317e8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":605,"endLine":635,"content":"ectName\", \"connectionId\", \"Status\", \"Message\"});\n    }\n\n    private void writeOutData(ICSVWriter writer, String tenantId, String tenantName, TenantType tenantType, String jobName,\n                              String jobId, String status, String message) {\n        writer.writeNext(new String[]{tenantId, tenantName, GainsightUtils.valueOf(tenantType), jobName, jobId, status, message});\n    }\n\n    private void createDirectory(String absolutePath) {\n        Path folderPath = Paths.get(absolutePath);\n        try {\n            if (Files.notExists(folderPath)) {\n                Files.createDirectory(folderPath);\n                LOGGER.info(\"Directory created: {}\", folderPath);\n            } else {\n                LOGGER.info(\"Directory already exists: {}\", folderPath);\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Error creating directory: {}\" + e.getMessage(), e);\n        }\n    }\n\n    private Map<String, List<String>> populateSuperClassInfo() {\n        Map<String, List<String>> superClassInfo = new HashMap<>();\n        superClassInfo.put(\"asmt_metric_result\", new ArrayList<>());\n        superClassInfo.put(\"asmt_metric\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"contract_sla\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"customer_account\", Arrays.asList(\"core_company\"));\n        superClassInfo.put(\"customer_contact\", Arrays.asList(\"sys_user\"));\n        superClassInfo.put(\"incident\", Arrays.asList(\"task\"));\n        superCl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3431bc5c-4fd0-4fda-8f55-1a9d33d577ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":99,"endLine":129,"content":"Query().connectionType(connectorType);\n    return find(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findAllAuthorizedConnections(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).in(ConnectionStatus.AUTHORIZED, ConnectionStatus.AUTHORIZED_AND_LINKED));\n    return find(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findAllLinkedConnections(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).is(ConnectionStatus.AUTHORIZED_AND_LINKED));\n    return find(query);\n  }\n\n  @Override\n  public PNPConnectionsInfo findAuthorizedAndLinkedPrimaryConnectionByCRMId(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).in(ConnectionStatus.AUTHORIZED, ConnectionStatus.AUTHORIZED_AND_LINKED));\n    query.addCriteria(Criteria.where(\"properties.\"+ UCConstants.GSIntegration.IS_PRIMARY_CONNECTION).is(true));\n    return findOne(query);\n  }\n\n\n  @Override\n  public PNPConnectionsInfo findConnectionByCRMIdForLinking(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    query.addCriteria(Criteria.where","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"757866b7-651b-40dd-bd2d-024b13060b57","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":213,"endLine":226,"content":"ap<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap = new HashMap<>();\n                objectToFieldDBNameToGSDataTypeMap.put(request.getResourceName(), metaInfoDefinitionMap.get(request.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                objectToFieldDBNameToFieldDefinitionMap.put(request.getResourceName(), metaInfoDefinitionMap.get(request.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n\n                List<String> ignoreMetadataFields = GainsightCollectionUtils.nullSafeList(request.getFields().stream().filter(field -> field.contains(\".\")).collect(Collectors.toList()));\n                Set<String> filterFields = new HashSet<>();\n                DuctUtils.getFieldsFromFilter(request.getCriteria(), filterFields);\n                boolean fieldsFlattened = false;\n                for (String field : filterFields) {\n                    String[] fieldSplitted = field.split(\"\\\\.\");\n                    if ((Boolean) GainsightCollectionUtils.nullSafeMap(request.getProperties()).getOrDefault(LOOKUP_FIELDS_FLATTENED, true)\n                            && FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId())) {\n                        fieldsFlattened = true;\n                        if (fieldSplitted.length == 3","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37a8f6e6-381b-497b-aaf3-5cd6b1987dec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":495,"endLine":519,"content":"npConnectionsInfo.setCreatedByName(accessKeyInfo.getCreatedByName());\n        pnpConnectionsInfo.setCreatedDate(accessKeyInfo.getCreatedDate());\n        pnpConnectionsInfo.setModifiedBy(accessKeyInfo.getModifiedBy());\n        pnpConnectionsInfo.setModifiedByName(accessKeyInfo.getModifiedByName());\n        pnpConnectionsInfo.setTenantId(accessKeyInfo.getTenantId());\n        pnpConnectionsInfo.setConnectionId(accessKeyInfo.getId());\n        pnpConnectionsInfo.setConnectionType(ConnectorType.GAINSIGHT_API);\n        BaseTokenDetail baseTokenDetail = new BaseTokenDetail();\n        baseTokenDetail.setAccessKey(accessKeyInfo.getAccessKeyEncrypted());\n        pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n        pnpConnectionInput.setProperties(ACCESS_KEY_ID, accessKeyInfo.getAccessKeyEncrypted().getString());\n        pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfo);\n        return Arrays.asList(pnpConnectionInput);\n    }\n\n    @Override\n    public PNPConnectionInput createNewConnection(PNPConnectionInput pnpConnectionInput) throws CaasException {\n        String lockId = null;\n        try {\n            lockId = aquireLock(RequestContextProvider.getTenantId());\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n            preProcessRequest(pnpConnectionsInfo);\n            boolean nativeEnabled = DuctUtils.checkIfIpaasAndFTEnabled(pnpConnectionsInfo);\n            if (!nativeEnabled) {\n                return DuctConnectorCal","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bcb9d15c-faeb-4b0c-bdda-0e90c039e95a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":403,"endLine":407,"content":"))\n                valueToCriteriaMap.put(criteria.getValues().toString(), criteria);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"535a193b-9a1f-4fba-a60f-c014b069f5e1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":1,"endLine":32,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.feature.config.sdk.http.ClientConfig;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDServiceImpl;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationServiceImpl;\nimport com.gainsight.feature.toggle.bean.Credentials;\nimport com.gainsight.feature.toggle.bean.FeatureConfigDTO;\nimport com.gainsight.feature.toggle.bean.FeatureVariationDetailDTO;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\n\npublic class UCFeatureConfigUtility {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(UCFeatureConfigUtility.class);\n\n    private static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    private static final String GS_ENV_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n\n    public static boolean evaluate(String featureName) {\n        ClientConfig clientConfig = new Cl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ae0f617-1ea3-44a7-9f8c-0868f5c0a6fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":1,"endLine":31,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport com.gainsight.duct.beans.config.*;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.IpaasAccountUserDetailsDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectTenantConfigDAO;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.utils.IpaasHelperService;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsSchemaService;\nimport com.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78f7bb60-016d-4c50-b473-4aa2a784d624","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":300,"endLine":321,"content":"nfo().getDelimiter()) ? ','\n                : ductJobMapping.getCaasFileInfo().getDelimiter();\n\n        if (fileSizeInMBs(file) > DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.databricks.dbfs.max.file.size.supported.in.mb\", 1900l)) {\n            //Split the file into multiple files\n            log.info(\"Splitting the file into multiple files, as the file size is: {} MB\", fileSizeInMBs(file));\n            try {\n                Long maxSplitFileSizeInMB = DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.databricks.split.files.in.mb\", 1500l);\n\n                //Create a target directory for partitioned files.\n                File targetDir = new File(file.getParent() + File.separator + \"databricks-partitioned\");\n                if (!targetDir.exists()) {\n                    targetDir.mkdirs();\n                }\n\n                CsvDataParserBuilder csvDataParserBuilder = new CsvDataParserBuilder(CSVParserType.RFC4180Parser, seperatorChar,\n                        quoteChar, escapeChar);\n\n                RecordSeparatorPolicy recordSeparatorPolicy = new CustomRecordSeparatorPolicy(csvDataParserBuilder.getIcsvParser());\n                int maxRecordsPerBatch = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.caas.databricks.max.records.per.batch\", 500);\n                FileSplitter splitter = new FileSplitter(file, recordSeparatorPolicy, StandardCharsets.UTF_8.displayName(), maxRecordsPerBatch, maxSplitFileSizeInMB,\n               ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71036d6a-52fe-423a-9143-ca2dec851eda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/HealthStatusController.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct;\n\n\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.HealthService;\nimport com.gainsight.utils.GainsightPrecondition;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpStatus;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport utils.ResponseObj;\n\nimport static com.gainsight.duct.enums.UCValidationCode.PNP_INVALID_TENANT_ID;\n\n@RestController\npublic class HealthStatusController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(HealthStatusController.class);\n\n    @Autowired\n    private HealthService healthService;\n\n\n    /**\n     * API to check the health of gs-integrations app.\n     *\n     * @param tenantId\n     * @return : returns the status\n     */\n    @GetMapping(value = \"/status\")\n    public ResponseObj checkStatus(@RequestParam(required = false, name = \"tenantId\") String tenantId,\n                                   @RequestParam(defaultValue = \"false\") boolean isHealthyCheck) {\n        if(!isHealthyCheck) {\n            return new ResponseObj(true);\n        }\n\n        LOGGER.info(\"Checking the health of gs-duct CAAS microservice...\");\n        if (StringUtils.isEmpty(tenantId)) {\n            tenantId =  DeploymentProperties","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2657662-6c33-42cf-8add-a426bd42429d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/PipedriveV2CaasMetadataServiceImpl.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Order(1300)\n@Service\n@Slf4j\npublic class PipedriveV2CaasMetadataServiceImpl extends CaasNativeMetadataServiceImpl implements CaasMetadataService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.PIPEDRIVEV2.equals(connectorType) && !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        return super.getObjects(pnpConnectionsInfo, map);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return super.getObjectAttributes(objectName, pnpConnectionsInfo);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf59ae4a-7ff5-4189-9e7e-3f4d3a557da0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":369,"endLine":389,"content":"NotEmpty(ductJobMapping.getCaasS3FileDetails().getFilesDir()))\n                    , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), HttpStatus.SC_BAD_REQUEST);\n        }\n\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> objectAttributes = service.getObjectAttributes(targetObject, pnpConnectionsInfo, false);\n        GainsightPrecondition.assertTrue(MapUtils.isNotEmpty(objectAttributes) && !StringUtils.EMPTY.equals(objectAttributes.get(targetObject).getLabelPlural()),\n                CaasValidationCode.INTERNAL_ERROR, CaasValidationCode.INTERNAL_ERROR.getUserText());\n        File inputFile = validateDynamicsWriteBackPayload(ductJobMapping, objectAttributes, dataOperation);\n\n        DuctResponse ductResponse = new DuctResponse();\n        File successFile = null, failureFile = null;\n        Long totalRecords = 0L, successRecords = 0L, failedRecords = 0L;\n        try (CSVReader csvReader = new CSVReader(new FileReader(inputFile))) {\n            File targetDirectory = new File(System.getProperty(\"user.dir\") + FORWARD_SLASH +\n                    ConnectorType.DYNAMICS.getValue() + FORWARD_SLASH + ductJobMapping.getTenantId()\n            );\n            if (!targetDirectory.exists()) {\n                targetDirectory.mkdirs();\n            }\n            successFile = Fil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5f528ef-f9f0-4d3f-b6c9-3ab1424db021","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":43,"endLine":82,"content":"get(fieldName).getMeta();\n\n        switch (gsDataType) {\n\n            case \"textarea\":\n            case \"text\":\n            case \"radio\":\n            case \"checkbox\":\n            case \"dropdownlist\":\n            case \"string\":\n            case \"email\":\n                dataType = DataType.STRING;\n                break;\n\n            case \"number\":\n                dataType = DataType.NUMBER;\n                if (ObjectUtils.isNotEmpty(gsFieldMeta.getDecimalPlaces()))\n                    fieldInfo.setDecimalPlaces(gsFieldMeta.getDecimalPlaces());\n                break;\n\n            case \"booleancheckbox\":\n            case \"boolean\":\n                dataType = DataType.BOOLEAN;\n                break;\n\n            case \"date\":\n                dataType = DataType.DATE;\n                if (gsFieldMeta.getProperties() != null && gsFieldMeta.getProperties().containsKey(FORMAT))\n                    fieldInfo.setDateTimeProperties(\n                            new DateTimeProperties(gsFieldMeta.getProperties().get(FORMAT).toString(), \"UTC\"));\n                else {\n                    String dateFormat = dateFormate != null ? dateFormate : \"yyyy-MM-dd\";\n                    fieldInfo.setDateTimeProperties(\n                            new DateTimeProperties(dateFormat, \"UTC\"));\n                }\n                break;\n            case \"datetime\":\n            case \"dateTime\":\n                dataType = DataType.DATETIME;\n                if (gsFieldMeta.getProperties() != null && gsFieldMeta.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e11bc40-52ca-4147-b894-364c946e43ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":213,"endLine":231,"content":"          String fieldName = String.format(FIELD_NAME_FORMAT, caasObjectApiConfig.getAdditionalProperties().get(PLURAL_NAME_KEY));\n                    fieldDescriptionWithReference = createFieldDescriptionWithReference(fieldName, String.format(FIELD_LABEL_FORMAT, WordUtils.capitalize(caasObjectApiConfig.getLabel().toLowerCase())), fieldName, \"string\", \"text\", caasObjectApiConfig.getLabel());\n                    fieldDescriptionWithReference.setMultiValued(true);\n                    fieldDescriptionWithReference.setModificationMetadata(modificationMetadata);\n                    hubspotFieldDescriptionV3s.add(fieldDescriptionWithReference);\n                    typeIdByConfig.remove(targetObjectTypeId);\n                }\n            }\n        }\n        hubspotFieldDescriptionV3s.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\", new ModificationMetadata(false, true, true)));\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescriptionWithReference(String name, String label, String canonicalname, String type, String fieldType, String referenceObjectType) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = new GainsightHubspotFieldDescriptionV3(name, label, canonicalname, type, fieldType, referenceObjectType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescript","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"193969e2-0a7a-4ca6-aa47-6166a5772b2f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":414,"endLine":441,"content":"listOption.setPicklistLabel(picklistOption.getLabel());\n          mpicklistOption.setPicklistValue(DuctUtils.valueOf(picklistOption.getValue()));\n          return mpicklistOption;\n        }).collect(Collectors.toList());\n  }\n\n\n  private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n    Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n    if (metadataConfigfromCache != null)\n      return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n    MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n    redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n    return connectorConfigByObjectName;\n  }\n\n\n  private Optional<ResourceConfig> getResourceConfig(DuctJobMapping ductJobMapping) {\n    MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n    Optional<ResourceConfig> optionalResourceConfig = connectorConfigByObjectName.getResources()\n        .stream()\n        .filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName()))\n        .findFirst();\n    return optionalResourceConfig;\n  }\n\n/*  private String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n    Object paginationValueFromRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67e9c88c-7fe9-402a-805c-4fc9b1850558","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/redis/GainsightRedisTemplateImpl.java","startLine":1,"endLine":35,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.redis;\n\nimport com.gainsight.database.LoggingInterceptor;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport redis.clients.jedis.JedisShardInfo;\n\n/**\n * User: santa\n * Date: 8/4/14\n * Time: 8:42 PM\n */\npublic class GainsightRedisTemplateImpl implements GainsightRedisTemplate {\n  private static final Logger LOGGER = LoggerFactory.getLogger(GainsightRedisTemplateImpl.class);\n  private static final String REDIS_ERROR = \"Unable to close Redis connection\";\n  private static final int REDIS_TIMEOUT = 15000;\n  private static volatile JedisConnectionFactory jedisConnectionFactory;\n  private static final Object LOCK = new Object();\n  private static final String HOST = DeploymentProperties.getDeploymentProperties().getValue(\"redis.host\");\n  private static final Integer PORT =\n      Integer.valueOf(DeploymentProperties.getDeploymentProperties().getValue(\"redis.port\"));\n  private static final String PASSWORD = DeploymentProperties.getDeploymentProperties().getValue(\"redis.password\");\n\n  @Override\n  public <T> RedisTemplate<String, T> getRedisTemplate() {\n    RedisTemplate<String, T> redisTemplate = new RedisTemplate<>();\n    redisTemplate = LoggingInterceptor.intercept(\"RedisCache\", redisTemplate);\n    redisTe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1855e9a1-4bb4-4bf5-8c0b-e4b4449a7168","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":220,"endLine":244,"content":"rvice(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            ductResponse = dataSourceService.updateData(ductJobMapping);\n            updateDuctJobMappingStatus(ductJobMapping.getJobId(), ductResponse);\n        }catch (CaasException ex){\n            catchExceptionAndUpdateStatus(ex,ductJobMapping.getJobId());\n            throw ex;\n        } catch (Exception e) {\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            catchExceptionAndUpdateStatus(caasException,ductJobMapping.getJobId());\n            throw caasException;\n        }\n        return ductResponse;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        DuctResponse ductResponse = null;\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductJobMapping.getConnectionId());\n            DuctJobMapping dbDuctJobMapping = ductJobMappingDao.findByJobId(ductJobMapping.getJobId());\n            dbDuctJobMapping.setDuctStatus(DuctStatus.IN_PROGRESS);\n            ductJobMappingDao.update(dbDuctJobMapping);\n            ConnectorDataSourceService dataSourceService =\n                    connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n            ductResponse = dataSourceService.upl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fdcd577a-b7d3-4d0d-a2b8-624e2eaa314e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.platform.metadata.DataType;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Order(300)\n@Service\npublic class EcosystemsValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.ECOSYSTEM;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> attributes, CaasConnectorConfig caasConnectorConfig) throws CaasE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43939499-57ba-4c32-bfe0-d4a4b2528e34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":234,"endLine":256,"content":" GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            Integer rowsAffected = gainsightDatabricksChannelService.executeInsert(absoluteObjectPath, ductJobMapping.getData());\n            externalSystemResponse.put(\"rowsAffected\", rowsAffected);\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(1).jobId(ductJobMapping.getJobId()).build();\n        } catch (SQLException e) {\n            log.error(\"SQLException while writing data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        } catch (Exception e) {\n            log.error(\"Exception while writing data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        }\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping, List<String> identifiers, PNPConnectionsInfo pnpConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"065eb88e-9c2d-48ff-8d22-938c0e2930f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":160,"endLine":183,"content":"    Response Type.\n     * @param <R>         Request Body Type.\n     * @return Response will be parsed to given response type.\n     */\n    public static <T, R> T makeRestCall(String url, HttpMethod httpMethod, R requestBody, Class<T> clazz, AuthenticationType authType, Map<String, String> customHeaders) {\n        return makeRestCall(url, httpMethod, requestBody, clazz, authType, customHeaders, false);\n    }\n\n    public static <T, R> T makeRestCall(String url, HttpMethod httpMethod, R requestBody, Class<T> clazz, AuthenticationType authType, Map<String, String> customHeaders, Boolean useCodeHaus) {\n        long startEpoch = System.nanoTime();\n        LOGGER.info(\"Executing Rest Call to {} [method: {}]\", url, httpMethod);\n        try {\n            ResponseEntity<ResponseObj> responseEntity = restTemplate\n                    .exchange(URI.create(url), httpMethod, new HttpEntity<>(requestBody, createHeaders(authType, customHeaders)), ResponseObj.class);\n            LOGGER.info(\"Response Code: {}\", responseEntity.getStatusCode());\n            if (responseEntity.getStatusCode() == HttpStatus.OK && responseEntity.getBody().isResult()) {\n                // Sucess Scenario\n                if (useCodeHaus) {\n                    return CODEHAUS_OBJECT_MAPPER.convertValue(responseEntity.getBody().getData(), clazz);\n                } else {\n                    return OBJECT_MAPPER.convertValue(responseEntity.getBody().getData(), clazz);\n                }\n            } else {\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ccf0586-dd53-403b-9595-2321220e79db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":76,"endLine":102,"content":"FiltersSupportedFields(filterCriteria, fieldNameToFieldDefinitionMap, isSync);\n                }\n            }\n            if (StringUtils.isNotEmpty(criteria.getFieldName())) {\n                GSFieldDefinition gsFieldDefinition = fieldNameToFieldDefinitionMap.get(criteria.getFieldName());\n                if (!isFilterSupported(gsFieldDefinition, isSync))\n                    DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                            String.format(\"Filter is not supported on field: %s\", gsFieldDefinition.getFieldName()));\n            }\n        }\n    }\n\n    private static boolean isFilterSupported(GSFieldDefinition fieldDefinition, boolean isSync) {\n        if (isSync) {\n            return fieldDefinition.getMeta().isExternallyFilterable();\n        }\n        return true;\n    }\n\n\n    private void validateFilterOperators(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> attributes, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = attributes.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n        checkForFieldOperatorsSupported(ductRequestDTO.getCriteria(), fieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n    }\n\n    private","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"daf0212c-b6cd-4d62-ba4f-6685f62e34d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":424,"endLine":447,"content":"getPluralName));\n\n                List<Relationship> targetObjectRelationships = msDynamicsSchemaService.listRelationships(targetObject, RelationshipType.MANY_TO_ONE);\n                log.info(\"tId: {}. Fetched all Many-to-One relationships with: {}\", RequestContextProvider.getTenantId(), logicalNameToPluralMap.get(targetObject));\n                lookupProjectionToNavigationProperty = constructLookupProjectionToNavigationProperty(projectionsWithLookups, logicalNameToPluralMap.get(targetObject), targetObjectRelationships);\n\n                projectionsWithLookups.stream().forEach(\n                        projectionsWithLookup -> {\n                            String lookedUpEntityLogicalName = projectionsWithLookup.split(\"\\\\.\")[1];\n                            if (logicalNameToPluralMap.containsKey(lookedUpEntityLogicalName)) {\n                                entityLogicalNameToPluralName.put(lookedUpEntityLogicalName, logicalNameToPluralMap.get(lookedUpEntityLogicalName));\n                            }\n                        }\n                );\n            }\n\n            String[] nextRecord;\n            Map<String, Object> result;\n            String accessToken = getAccessToken(pnpConnectionsInfo, false);\n            int maxRetryCount = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.dynamics.max.access.token.generation\", 4);\n            int currentRetryCount = 1;\n\n            ductResponse.setTenantId(ductJobMapping.getTenantId());\n            ductResponse.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ad5e353-27a3-41a3-babd-0013c3c00709","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/test/java/com/gainsight/integration/service/IpaasBulkFileDownloadServiceImplTest.java","startLine":1,"endLine":52,"content":"package com.gainsight.integration.service;\n\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.IpaasAccountUserDetailsDao;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.service.IpaasBulkFileDownloadServiceImpl;\nimport com.gainsight.duct.dh.ConnectorsDataHighwayInteractionService;\nimport com.gainsight.service.BaseTenantMasterService;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n//@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass IpaasBulkFileDownloadServiceImplTest {\n\n    @InjectMocks\n    IpaasBulkFileDownloadServiceImpl ipaasBulkFileDownloadService;\n\n    @Mock\n    IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n\n    @Mock\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Mock\n    DuctJobMappingDao ductJobMappingDao;\n\n    @Mock\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Mock\n    private ConnectorsDataHighwayInteractionService connectorsDataHighwayInteractionService;\n\n    @Mock\n    private BaseTenantMasterService service;\n\n    @BeforeAll\n    public void setup() {\n\n        MockitoAnnotations.initMocks(this);\n    }\n\n    //    @Test\n    public void tes","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"927a3aed-ce91-4e17-ad9d-ade21e19b516","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":25,"endLine":57,"content":"properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.CUSTOM_FIELD_PREFIX;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeMap;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Order(13000)\npublic class PipedriveV2DataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c01e938-c65f-4aa0-aef8-f25adfe5e122","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":140,"endLine":156,"content":"Mapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryparam);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            List dataList = new ArrayList();\n            Map<String, Object> jsonMap = new ObjectMapper().convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n            });\n            dataList.add(jsonMap);\n            externalSystemResponse.put(DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, Duc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78f92b9f-5ace-4921-ae54-76c5ae856195","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":47,"endLine":87,"content":"che.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.HttpClients;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.utils.GainsightPrecondition.assertTrue;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Slf4j\n@Order(1400)\npublic class ServicenowCaasMetadataServiceImpl implements CaasMetadataService {\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private CaasObjectConfigDAO caasObjectConfigDAO;\n    @Autowired\n    private CaasObjectTenantConfigDAO caasObjectTenantConfigDAO;\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n    @Autowired\n    private MetadataDriver metadataDriver;\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Aut","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"476190e4-f5ca-4cbe-a6bc-4a50d5b7a0d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":401,"endLine":409,"content":"String formattedDate = parsedDate.toLocalDate().toString();\n                criteria.setValues(Lists.newArrayList(formattedDate));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error while parsing date time field value\", e);\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3ce3317-6801-4133-a395-652b6c1db9ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionService.java","startLine":1,"endLine":27,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dh;\n\nimport utils.ResponseObj;\n\nimport java.util.Map;\n\n/**\n * user : Vipin Sharma\n * date : 16/10/19\n **/\n\npublic interface ConnectorsDataHighwayInteractionService {\n\n    ConnectorsDataHighwayResponseHandler<ResponseObj> submitJob(String payload, Map<String, Object> params, String envName,String ucId);\n\n    ConnectorsDataHighwayResponseHandler<ResponseObj> listOutputs(String jobId);\n\n    ConnectorsDataHighwayResponseHandler<ResponseObj> getExecutionLogs(String jobId);\n\n    ConnectorsDataHighwayResponseHandler<ResponseObj> abortJob(String jsonPayload);\n\n    ConnectorsDataHighwayResponseHandler<ResponseObj> validateFlow(String payload);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"413cd0d4-7fc0-4992-ac0e-f10d3e3467e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":305,"endLine":332,"content":"        if(!StringUtils.isEmpty(resourceName) && resourceName.equalsIgnoreCase(\"Users\"))\n            fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD_FOR_USERS);\n        else\n            fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD);\n        fieldCriteria.setOperatorType(FilterOperator.GT);\n        fieldCriteria.setValues(Lists.newArrayList(\"0\"));\n\n        criteria.setFilters(Lists.newArrayList(fieldCriteria));\n        return criteria;\n    }\n\n    private Map<String, GSFieldDefinition> getDateTimeFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> dateTimeFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(com.gainsight.platform.metadata.DataType.DATETIME.getValue()))\n                .forEach(kv -> dateTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return dateTimeFieldsMap;\n    }\n\n    private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n                .forEach(kv -> externalFilterableFieldsMap.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"721d80d6-a4de-48a2-a198-c22354f2ddfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectConfig.java","startLine":40,"endLine":87,"content":"n objectName;\n  }\n\n  public void setObjectName(String objectName) {\n    this.objectName = objectName;\n  }\n\n  public ConnectorType getConnectorType() {\n    return connectorType;\n  }\n\n  public void setConnectorType(ConnectorType connectorType) {\n    this.connectorType = connectorType;\n  }\n\n  public List<Map<String, Object>> getAddedObjects() {\n    return addedObjects;\n  }\n\n  public void setAddedObjects(List<Map<String, Object>> addedObjects) {\n    this.addedObjects = addedObjects;\n  }\n\n  public Set<String> getNotSupportedObjects() {\n    return notSupportedObjects;\n  }\n\n  public void setNotSupportedObjects(Set<String> notSupportedObjects) {\n    this.notSupportedObjects = notSupportedObjects;\n  }\n\n  @Override\n  public String toString() {\n    return \"CaasObjectConfig{\" +\n        \"connectorType=\" + connectorType +\n        \", supportedObjects=\" + addedObjects +\n        \", notSupportedObjects=\" + notSupportedObjects +\n        '}';\n  }\n\n  public Set<String> getShowOnlyIncludedObjects() {\n    return showOnlyIncludedObjects;\n  }\n\n  public void setShowOnlyIncludedObjects(Set<String> showOnlyIncludedObjects) {\n    this.showOnlyIncludedObjects = showOnlyIncludedObjects;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cafd3a8d-d471-430c-ad06-19c56535f9fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctOperandType.java","startLine":1,"endLine":9,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic enum DuctOperandType {\n    UNARY,\n    BINARY\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ffacc5f-77ad-4d99-ad9f-59c419d29fa9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":332,"endLine":358,"content":"pt = getFieldValueAsObject(obj, dataExtractionRequest.getLastModifiedFieldName());\n            if (opt instanceof Number) {\n                long optValue = Long.parseLong(dataExtractionRequest.getLastModifiedFieldValue().toString());\n                Number num = (Number) opt;\n                long val = num.longValue();\n                return val >= optValue;\n            } else {\n                String optValue = String.valueOf(dataExtractionRequest.getLastModifiedFieldValue());\n                return new DateTime(getFieldValue(obj, dataExtractionRequest.getLastModifiedFieldName()), DateTimeZone.UTC).compareTo(new DateTime(optValue, DateTimeZone.UTC)) >= 0;\n            }\n        }\n        return true;\n    }\n\n    private void resolveCurrencyField(DataExtractionRequest dataExtractionRequest, JSONObject obj) throws\n            Exception {\n        for (FieldInfo field : dataExtractionRequest.getFields()) {\n            if (field.isIsCurrencyField()) {\n                String currencyValue = getFieldValue(obj, field.getJsonPath());\n                Matcher matcher = Pattern.compile(\"[\\\\d\\\\.]+\").matcher(currencyValue);\n                if (matcher.find()) {\n                    double i = Double.valueOf(matcher.group());\n                    try {\n                        updateFieldValue(obj, field.getJsonPath() + CURRENCY_FIELD, i);\n                    } catch (Exception e) {\n                        LOGGER.error(\"Error occurred while trying to write currency data\", e);\n                  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"175aa4b4-3d9f-406a-b874-03ccb5201a7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":44,"endLine":79,"content":"id migrate(CommandLine cmd) {\n        String tenantIdFile = cmd.getOptionValue(\"file\");\n        File file = new File(tenantIdFile);\n        if(file.exists()){\n            File report = new File(\"./Report.csv\");\n            File backup = new File(\"./Backup.csv\");\n            try(Writer writer = new FileWriter(report);\n                ICSVWriter csvWriter = new CSVWriter(writer);\n                Writer backupWriter = new FileWriter(backup);\n                ICSVWriter backupCsvWriter = new CSVWriter(backupWriter);){\n                writeOutHeaders(csvWriter);\n                writeBackupHeader(backupCsvWriter);\n                List<String> tenantIds = FileUtils.readLines(file,\"UTF-8\");\n                for(String tenantId : tenantIds){\n                    try {\n                        updateAttributes(tenantId,csvWriter,backupCsvWriter);\n                    } catch (Exception e) {\n                        log.error(\"Error while processing tenantId: {}\", tenantId, e);\n                        writeOutData(csvWriter, tenantId, \"Failed\", e.getMessage());\n                    }\n                }\n\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n\n\n        }\n\n    }\n\n    private void updateAttributes(String tenantId, ICSVWriter csvWriter, ICSVWriter backupCsvWriter) {\n        log.info(\"Started for tenant: {}\", tenantId);\n        boolean continueIt = UCCommonUtility.initRequestContextSuccessfully(tenantId);\n        if (!continueIt) {\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab38ac9b-1116-452f-a8d1-4cca3280409b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/IpaasAccountUserDetails.java","startLine":1,"endLine":61,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.SecretData;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\n\n// TODO : To be removed after native movement @aditya\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"ipaas_account_user_details\")\npublic class IpaasAccountUserDetails extends MongoBaseBean implements Serializable {\n    @Indexed\n    private String tenantId;\n    private String accountId;\n    private SecretData userToken;\n    private String userId;\n\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public void setAccountId(String accountId) {\n        this.accountId = accountId;\n    }\n\n    public SecretData getUserToken() {\n        return userToken;\n    }\n\n    public void setUserToken(SecretData userToken) {\n        this.userToken = userToken;\n    }\n\n    public String getUserId() {\n        return userId;\n    }\n\n    public void setUserId(String userId) {\n        this.userId = userId;\n    }\n\n    @Override\n    pub","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cbfdfcdb-a6d5-4157-a87f-52737a124716","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SnowflakeCaasMetadataServiceImpl.java","startLine":59,"endLine":69,"content":"Type().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String objectLabel = (String) attributes.get(0).get(\"objectLabel\");\n        objectDefinition.put(LABEL, objectLabel);\n        objectDefinition.put(OBJECT_NAME,objectLabel);\n        objectDefinition.put(DuctConstants.DescribeMetaConstants.FIELDS, fields);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, objectDefinition);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4268ac74-28e8-4ce0-838b-c60b68765538","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":87,"endLine":109,"content":"date Attribute config\", response = DuctResponseDTO.class)\n    @PutMapping(value = \"/enhance/fields/{connectionId}/{object}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj updateEnhanceMetadata(@NotNull @NotEmpty @PathVariable(name = \"connectionId\") final String connectionId,\n                                             @NotNull @NotEmpty @PathVariable(name = \"object\") final String object,\n                                             @NotNull @NotEmpty @QueryParam(\"fieldSaveType\") final FieldSaveType fieldSaveType,\n                                             @RequestBody(required = true) List<Map<String, Object>> fieldInfo) {\n        try {\n            enhanceMetadataService.editTheEnhancedMetaData(connectionId, object, fieldInfo, fieldSaveType);\n            return new ResponseObj(true);\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, e.getErrorMessage());\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Poll Refresh Metadata status\", response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/generated/attributes/{jobId}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseOb","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"26773088-5056-4d24-8e24-e8a7acfe5531","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/JobDetails.java","startLine":1,"endLine":23,"content":"package com.gainsight.duct.beans.dh;\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport javax.validation.constraints.NotNull;\n\n@Getter\n@Setter\n@EqualsAndHashCode()\n@ToString\npublic class JobDetails {\n    @NotNull\n    private String jobId;\n    @NotNull\n    private String jobStatus;\n    @NotNull\n    private String tenantId;\n    @NotNull\n    private String mdaRequestId;\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"baf73983-7fc5-4a04-a097-fffe60a9be1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":343,"endLine":366,"content":"     assertEquals(ductRequestDTO.getResourceName(), ductResponseDTO.getResourceName(), \"Incorrect Resource Name\");\n            assertNotNull(ductResponseDTO.getFields(), \"Fields should not be null\");\n            assertEquals(OUTPUT_FILE_LOCATION, ductResponseDTO.getOutputFileLocation(), \"Incorrect output file location\");\n            assertEquals(ductRequestDTO.getNextPageToken(), ductResponseDTO.getNextPageToken(), \"Incorrect Next page token\");\n            assertNotNull(ductResponseDTO.getExternalSystemResponse(), \"External System response should not be null \");\n            assertEquals(totalNumberOfRecords, ductResponseDTO.getTotalNumberOfRecords(), \"Incorrect total number of records\");\n\n        }\n    }\n\n\n    private PNPConnectionsInfo generatePNPConnectionsInfo(ConnectorType connectorType, String connectionName, ConnectionStatus connectionStatus) {\n        PNPConnectionsInfo pnpConnectionsInfo = new PNPConnectionsInfo();\n        pnpConnectionsInfo.setConnectionType(connectorType);\n        pnpConnectionsInfo.setConnectionName(connectionName);\n        pnpConnectionsInfo.setConnectionStatus(connectionStatus);\n        pnpConnectionsInfo.setIpaasConnection(false);\n        return pnpConnectionsInfo;\n    }\n\n    private DuctRequestDTO createDuctRequestDTO(boolean isSync, DateTime dateTime, int limit, boolean isWriteback) {\n        DuctRequestDTO ductRequestDTO = new DuctRequestDTO();\n        ductRequestDTO.setFields(new ArrayList<>(Arrays.asList(\"field\")));\n        ductRequestDTO.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"595c6681-cd1b-4bb9-9af7-fa646c163f1e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightOAuth20AccountServiceImpl.java","startLine":107,"endLine":114,"content":"etClientSecret()),\n                callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null);\n\n        OAuthService service = new GainsightOAuth20Service(new SFDC20ApiV2(customDomain, SalesforceOrgType.forValue(orgType)), config);\n\n        return service.getAccessToken(null, new Verifier(code));\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c1d390a-285d-4ebf-a555-5228b8656039","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":98,"endLine":110,"content":"<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"46da3bcc-915a-4d8e-a18b-6d67176052a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":93,"endLine":128,"content":"\n                if (responseObj.isResult()) {\n                    return OBJECT_MAPPER.convertValue(responseObj.getData(), DuctResponseDTO.class);\n                }\n            } catch (Exception e) {\n                log.error(\"Error occurred  \", e);\n            }\n\n            return null;\n        }\n    }\n\n    @Override\n    public List<ObjectDefinition> getObjects(String connectionId) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + SLASH + connectionId + SLASH + OBJECTS;\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<List<ObjectDefinition>>() {\n            });\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getAttributes(String objectName, String connectionId) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + SLASH + connectionId + SLASH + objectName + SLASH + ATTRIBUTES;\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = respons","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35d54c5d-2adf-41b3-af37-25abff567f45","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":269,"endLine":289,"content":";\n            if (complexTypeMappings.containsKey(field.getType()))\n                metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.getType()).getValue());\n            metaProperties.put(DATA_PREVIEW_AVAILABLE, true);\n            metaProperties.put(PERMISSIONABLE, field.getPermissionable());\n            metaProperties.put(CASE_SENSITIVE, field.getCaseSensitive());\n            metaProperties.put(UNIQUE, field.getUnique());\n            metaProperties.put(BYTE_LENGTH, field.getByteLength());\n            metaProperties.put(WRITE_REQUIRES_MASTER_READ, field.getWriteRequiresMasterRead());\n            metaProperties.put(ID_LOOKUP, field.getIdLookup());\n            metaProperties.put(AUTO_NUMBER, field.getAutoNumber());\n            metaProperties.put(RESTRICTED_PICKLIST, field.getRestrictedPicklist());\n            metaProperties.put(NAME_POINTING, field.getNamePointing());\n            metaProperties.put(DEFAULTED_ON_CREATE, field.getDefaultedOnCreate());\n            metaProperties.put(HTML_FORMATTED, field.getHtmlFormatted());\n            metaProperties.put(DEPENDENT_PICKLIST, field.getDependentPicklist());\n            metaProperties.put(CASCADE_DELETE, field.getCascadeDelete());\n            metaProperties.put(RESTRICTED_DELETE, field.getRestrictedDelete());\n            metaProperties.put(DIGITS, field.getDigits());\n            metaProperties.put(DISPLAY_LOCATION_IN_DECIMAL, field.getDisplayLocationInDecimal());\n            metaProperties.put(HIGH_SCALE_NUMBER, field.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ce3a260-6588-478e-bcd9-c14767a719d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctCallBackController.java","startLine":33,"endLine":51,"content":"RequestParam(\"tenantId\")  String tenantId, @RequestParam(\"connectionId\")  String connectionId,\n                                  @RequestParam(\"jobId\") String jobId) {\n        String secretToken = DeploymentProperties.getDeploymentProperties().getValue(\"gs.duct.ipaas.callback.secret.token\",\"abcd\");\n        if(StringUtils.isNotEmpty(token) && StringUtils.equalsIgnoreCase(token, secretToken))\n            log.info(\"Correct request , hence processing\");\n        Map<String, Object> messageMap = (Map<String, Object>)request.get(\"message\");\n        IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload = new IpaasBulkDownloadCallbackPayload(tenantId, connectionId, jobId, messageMap, RequestContextProvider.getRequestId());\n        ipaasBulkFileDownloadProducerService.pushMessageForFileDownload(ipaasBulkDownloadCallbackPayload);\n        return new ResponseObj(true, true);\n    }\n\n    @PutMapping(value = \"/dh/{jobId}\")\n    public ResponseObj getDatahighwayCallback(@RequestBody @NotNull @Valid String body,\n                                              @PathVariable(\"jobId\") String jobId) {\n        log.info(\"{unified-connector} Notification for CAAS received from Data Processing is {}\", body);\n        DHResponseDTO dhResponseDTO = JsonUtil.readObject(body, DHResponseDTO.class);\n        JobDetails jobDetails = dhResponseDTO.getJobDetails();\n        log.info(\"External job ack {}\", jobDetails);\n        IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload = new IpaasBu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05f16626-8795-4c09-b71b-220517e368c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":205,"endLine":231,"content":"ONNECTIONS_NOT_FOUND, HttpStatus.SC_BAD_REQUEST);\n            ductConnectionService.revokeRequest(pnpConnectionsInfo);\n            return new ResponseObj(true, CaasValidationCode.CONNECTION_REVOKED_SUCCESSFULLY.getUserText());\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, e.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Authorize Connection\", response = Map.class)\n    @PostMapping(value = \"/{connectionId}/authorize\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj authorizeConnection(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                           @RequestParam(value = \"code\", required = false) String code) {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            return new ResponseObj(true, ductConnectionService.authorizeConnection(pnpConnectionsInfo, code));\n        } catch (CaasException e) {\n            log.error(\"Error occurred while trying to authorize connection : {0}\",e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    private Object p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03b095ee-1019-4bf9-a458-08123832c542","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":303,"endLine":335,"content":"              String id = node.get(fieldName).get(\"id\").asText();\n                    if (StringUtils.isNotEmpty(id)) {\n                        ((ObjectNode) node).put(fieldName, id);\n                    }\n                }\n            }\n        }\n    }\n\n    private String buildFilterCriteria(List<Criteria> filters) {\n        String expr = \"\";\n        if (filters.isEmpty())\n            return filters.toString();\n        else {\n            for (Criteria filter : filters) {\n                if (ObjectUtils.isNotEmpty(filter.getFilters()))\n                    expr += buildFilterCriteria(filter.getFilters());\n            }\n        }\n        return expr;\n    }\n\n    private Criteria modifyCriteria(Criteria criteria, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Criteria defaultCriteria = getDefaultFallbackCriteria();\n        try {\n            LOGGER.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUtils.convertObjectToJson(criteria));\n            if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters()) || (Objects.isNull(criteria.getFieldName()) && CollectionUtils.isEmpty(criteria.getFilters()))) {\n                return defaultCriteria;\n            }\n\n            Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n            Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n            Criteria modifiedCriteria = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d30f3ed7-54fc-4f16-8c8c-eb1b94c71783","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":188,"endLine":218,"content":"tDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            List<Map<String, Object>> data = gainsightDatabricksChannelService.executeQuery(query, fieldInfos);\n            String nextPageToken = limit > data.size() ? null : String.valueOf(offset + limit - 1);\n            if (limit == data.size())\n                data.remove(data.size() - 1);\n            Map res = new HashMap();\n            res.put(RESULTS, data);\n            return DuctResponse.builder()\n                    .tenantId(RequestContextProvider.getTenantId())\n                    .jobId(ductJobMapping.getJobId())\n                    .externalSystemResponse(res)\n                    .nextPageToken(nextPageToken)\n                    .totalNumberOfRecords(data.size())\n                    .build();\n        } catch (SQLException e) {\n            log.error(\"SQLException while fetching data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        } catch (Exception e) {\n            log.error(\"Exception while fetch data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n\n    @Override\n    public DuctRespo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"032ae85e-d99a-4121-a6b9-a60e42a900ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":194,"endLine":216,"content":"stemResponse).nextPageToken(nextPageToken).\n          tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n          .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n          .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n          .jobId(ductJobMapping.getJobId()).build();\n\n\n    } catch (Exception e) {\n      log.error(\"Error while fetching data from external system INTERCOMV2, Exception: \", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    }\n  }\n\n  private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n    Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n    if (metadataConfigfromCache != null)\n      return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n    MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n    redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n    return connectorConfigByObjectName;\n  }\n\n  private String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> pagin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e465b320-79f5-4205-8f5d-9dd749b50c0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":329,"endLine":353,"content":"ileName(fileName).fileEncoding(ENCODING).delimiter(DELIMITER).build();\n            ductJobMapping.setCaasS3FileDetails(caasS3FileDetails);\n            ductJobMapping.setCaasFileInfo(caasFileInfo);\n        }\n        ductJobMapping.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        ductJobMapping.setSyncDirection(SyncDirection.MDA_TO_EXTERNAL_SYSTEM);\n        ductJobMapping.setBulk(true);\n        ductJobMapping.setDuctStatus(DuctStatus.INIT);\n        ductJobMapping.setTenantId(RequestContextProvider.getTenantId());\n        ductJobMappingDao.insert(ductJobMapping);\n        wbQueueMessage(ductJobMapping);\n        return DuctResponseDTO.builder().jobId(ductJobMapping.getJobId()).status(DuctStatus.INIT).build();\n    }\n\n    @Override\n    public DuctResponseDTO getDuctJobMappingByJobId(String jobId) throws CaasException {\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(jobId);\n        GainsightPrecondition.assertNotNull(ductJobMapping, CoreErrorCode.INVALID_PARAMETER,\n                \"Job Id Not Found\", \"Job Id Not Found\", 400);\n        String finalOutputFile = null;\n        if (ductJobMapping.getOutputS3Path() != null)\n            finalOutputFile = DuctS3Utility.getSignedURL(ductJobMapping.getOutputS3Path()).toString();\n        if (ductJobMapping.isBulk())\n            finalOutputFile = duc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b74777c-ee83-45ea-9228-47bd81e0f874","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":194,"endLine":224,"content":"at(\"Received successful response code from Audit Service with response code %d\", responseCode));\n        } else {\n            result = false;\n            LOGGER.error(String.format(\"Received failure response code from Audit Service with error message %s and response code %d\", jsonNode.get(\"errorDesc\").toString(), responseCode));\n        }\n        return result;\n    }\n\n    private boolean getResponseStatus(Response response) {\n        boolean result = false;\n        int responseCode = response.getStatusInfo().getStatusCode();\n        switch (responseCode) {\n            case 200:\n            case 202:\n                result = true;\n                break;\n        }\n        return result;\n    }\n\n    private JsonNode getJsonNodeFromResponse(Response response) {\n        String responseJson = response.readEntity(String.class);\n        JsonNode jsonNode = null;\n        try {\n            jsonNode = objectMapper.readTree(responseJson);\n        } catch (IOException e) { //NOSONAR\n            LOGGER.error(\"Unable to read Response Json from Audit Service\");\n        }\n        return jsonNode;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfc00709-589f-40d6-b497-7c059b114f9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CTALoadServiceImpl.java","startLine":38,"endLine":62,"content":"lsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating Payload for cta object\");\n            ExternalDataRequestDto externalDataRequestDto = new ExternalDataRequestDto();\n            externalDataRequestDto.setLookups(ductRequestDTO.getLookups());\n            externalDataRequestDto.setRequests(Collections.singletonList(Collections.singletonMap(\"record\", ductRequestDTO.getRecords().get(0))));\n            GSDTOTransformer.transformExternalDataRequestDto(externalDataRequestDto);\n            log.info(\"Payload for job {} is {}\", ductJobMapping.getJobId(), externalDataRequestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n           // headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String ctaEndPoint = DeploymentProperties.getDeploymentProperties().getValue(\"cockpit.api.base.url\");\n            String url = ctaEndPoint + \"/v2/cockpit/cta\";\n            //check response\n            HttpResponseWrapper<R","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"440a7690-4976-4fff-8f67-2045afea7206","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":149,"endLine":186,"content":"onRequest);\n            return DuctResponse.builder().externalSystemResponse(ductResponseDTO.getExternalSystemResponse()).nextPageToken(ductResponseDTO.getNextPageToken()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    public PNPConnectionsInfo getConnectionId(String connectionId) {\n        retur","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c725ea0-257f-4583-9d9a-0c37d6d45029","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":55,"endLine":77,"content":"e> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, Object> fieldDefinition;\n        if (fields.isArray()) {\n            for (JsonNode field : fields) {\n                if (ObjectUtils.isNotEmpty(field.get(CREATEABLE_FLAG)) && field.get(CREATEABLE_FLAG).asBoolean() && field.get(FIELD_TYPE) != null\n                        && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(FIELD_TYPE).asText())\n                        && !dataTypeMapping.isSupported())) {\n                    continue;\n                }\n                fieldDefinition = new HashMap();\n                Map<String, Object> meta = new HashMap<>();\n                Map<String, Object> metaProperties = new HashMap<>();\n                fieldDefinition.put(FIELD_NAME, field.get(KEY).asText());\n                fieldDefinition.put(DB_NAME, field.get(KEY).asText());\n                //For some fields CE does not give display name, setting field name as display name for those fields\n                fieldDefinition.put(LABEL, field.get(NAME).asText());\n\n            ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4513724c-f37e-4c77-8894-2f1a03dea877","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCEnvSpecificConfigDetailUtil.java","startLine":1,"endLine":51,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.commons.enums.GSService;\nimport com.gainsight.commons.utils.GSServiceURLFactory;\nimport com.gainsight.properties.DeploymentProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Objects;\n\n/**\n * @author puneetsaluja\n * @created 22/05/23\n */\n@Slf4j\npublic class UCEnvSpecificConfigDetailUtil {\n\n    public static String getCasesApiUrl() {\n        return getUrlWithFallback(GSService.GS_CASES_ENDPOINT, \"gs.cases.ms.url\");\n    }\n\n    public static String getCAASApiUrl() {\n        return getUrlWithFallback(GSService.GS_CAAS_ENDPOINT, \"gs.caas.api.url\");\n    }\n\n    public static String getScribbleApiUrl() {\n        return getUrlWithFallback(GSService.GS_SCRIBBLE_ENDPOINT, \"gs.scribble.base.url\");\n    }\n\n    public static String getRoadMapToolingApiUrl() {\n        return getUrlWithFallback(null, \"RMT.BASE.URL\");\n    }\n\n    public static String getUserApiUrl() {\n        return getUrlWithFallback(GSService.GS_USERS_ENDPOINT, \"gs.users.url\");\n    }\n\n    public static String getGSObjectApiUrl() {\n        return getUrlWithFallback(GSService.GS_OBJECT_ENDPOINT, \"gs.object.base.url\");\n    }\n\n    public static String getProductDataloadApiUrl() {\n        return getUrlWithFallback(null, \"product.dataload.url\");\n    }\n\n    public static String getPersonApiUrl() {\n        return getUrlWithFallback(null, \"gs.people.ms.base.url\");\n    }\n\n    publ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"127a835d-ef3b-446d-870f-0c229f28ac48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":207,"endLine":234,"content":"Config(ConnectorType type) throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_CONNECTOR_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasConnectorConfig> caasConnectorConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasConnectorConfig>>() {\n            });\n            return caasConnectorConfigs.stream().filter(caasConnectorConfig -> type.equals(caasConnectorConfig.getConnectorType())).findFirst().get();\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to read connector config for junit\");\n        }\n        return null;\n    }\n\n    private Map<String, ObjectDefinition> mockAttributesHubspotContact() throws IOException {\n        ClassPathResource r = new ClassPathResource(CONTACT_METADTA_FILE_NAME);\n        try (InputStream in = r.getInputStream()) {\n            ObjectDefinition objectDefinition = new ObjectMapper().readValue(in, new TypeReference<ObjectDefinition>() {\n            });\n            return Collections.singletonMap(\"CONTACT\", objectDefinition);\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to read connector config for junit\");\n        }\n        return null;\n    }\n\n    private Map<String, ObjectDefinition> mockAttributes() throws IOException {\n        Map<String, ObjectDefinition> attributes = new HashMap<>();\n        ObjectDefinition objectDefinition = new ObjectDefinition();\n        CaasConnectorConfig connectorConfig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"367b7b24-cd10-469d-a68e-10c202c8c768","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":157,"endLine":175,"content":"icBoolean ignoreError = new AtomicBoolean(false);\n                String respMsg = httpResponse.getRespMsg();\n                JsonNode jsonNode = OBJECT_MAPPER.readTree(respMsg);\n                if (jsonNode.isArray()) {\n                    LOGGER.error(\"Error occurred while trying to extract data as response is in the format of array[size:{}] , retrying for {}\",\n                            jsonNode.size(), retryCounter, e);\n                    respMsg = String.format(\"A list of object is present which we are not expecting in case of exception with size %s\", jsonNode.size());\n                } else {\n                    LOGGER.error(\"Error occurred while trying to extract data : {} , retrying for {}\", respMsg, retryCounter, e);\n                    try {\n                        JsonNode providerMessage = jsonNode.get(\"providerMessage\");\n                        if (providerMessage != null && StringUtils.isNotEmpty(providerMessage.asText())\n                                && providerMessage.asText().equalsIgnoreCase(\"Number of allowed incremental export API requests per minute exceeded\")) {\n                            secondsToWaitForRetry = 125;\n                        }\n                        OBJECT_MAPPER.readTree(providerMessage.asText()).get(\"errors\").iterator().forEachRemaining(error -> {\n                            if (dataExtractionRequest.getIgnorableErrorMessages().contains(error.get(\"message\").asText())) {\n                                ignoreError.set(true);\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61fed0c3-2425-4f8d-bf57-8138c2e96973","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":252,"endLine":275,"content":"ry: {} with snowFlake copyManager\", getFileInLocalMachineQuery);\n            preparedStatement = jdbcConnection.prepareStatement(getFileInLocalMachineQuery);\n            resultSet = preparedStatement.executeQuery();\n\n            //Get the copied data into local machine\n            String listAllFilesInLocalMachineQuery = \"list @\" + tempStageName + \"/\" + cleanTaskFileName;\n            log.info(\"Started executing query: {} with snowFlake copyManager\", listAllFilesInLocalMachineQuery);\n\n            preparedStatement = jdbcConnection.prepareStatement(listAllFilesInLocalMachineQuery);\n            resultSet = preparedStatement.executeQuery();\n            List<String> allFilePaths = Lists.newArrayList();\n            while (resultSet.next()) {\n                allFilePaths.add(resultSet.getString(\"name\").replace(tempStageName, System.getProperty(\"user.dir\") + \"/stagingFile\"));\n            }\n            log.info(\"Total of {} files got created with provided extraction query with multipart execution\", allFilePaths.size());\n            if (CollectionUtils.isNotEmpty(allFilePaths)) {\n                for (String eachFilePath : allFilePaths) {\n                    log.info(\"Extracted file paths {}\", eachFilePath);\n                    extractedFiles.add(new File(eachFilePath));\n                }\n            } else {\n                log.info(\"copyManager did not yield any result with multipart execution. Will proceed with dummy file creation later on!\");\n            }\n        } catch (SQLExcept","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03f43d4b-f509-4c65-acc4-2e2a7c441a18","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/GeneratedMetadataCacheDaoImpl.java","startLine":27,"endLine":53,"content":"eneratedMetadataCache.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(GeneratedMetadataCache metadataCache, String s) {\n        metadataCache.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(GeneratedMetadataCache generatedMetadataCache, String s) {\n        generatedMetadataCache.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public GeneratedMetadataCache getMetadataByConnectionIdAndObjectName(String connectionId, String objectName) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Connection not found\", SC_BAD_REQUEST);\n        Query query = Query.query(Criteria.where(MetadataCache.CONNECTION_ID_PROP).is(connectionId))\n                .addCriteria(Criteria.where(MetadataCache.OBJECT_NAME_PROP).is(objectName));\n        return findOne(query);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f382a620-a97b-42fb-a994-9847baa7f5e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":446,"endLine":455,"content":"IDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n        return filteredAndEnhancedObjectList;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1b0e4a21-73ed-4cee-8139-e9acc191d46b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/MySQLConnectionDetailsEncryptor.java","startLine":20,"endLine":26,"content":"crypt(inputProperties.get(\"password\").toString()).getValue());\n            mysqlConnectionDetail.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").toString()).getValue());\n            mysqlConnectionDetail.setSslEnabled(true);\n            mysqlConnectionDetail.setType(type);\n            return mysqlConnectionDetail;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8ac1457-c3ae-44cc-aed7-678c75ee8e06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":207,"endLine":229,"content":"HashMap<>();\n            Map<String, Object> metaProperties = new HashMap<>();\n            fieldDefinition.put(FIELD_NAME, field.getName());\n            fieldDefinition.put(DB_NAME, field.getName());\n            fieldDefinition.put(LABEL, field.getLabel());\n\n            //set datatype\n            if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.getType()))) {\n                dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.getType())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            } else {\n                fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                meta.put(EXTERNALLY_FILTERABLE, false);\n            }\n\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n            meta.put(ORIGINAL_DATA_TYPE, field.getType());\n            meta.put(GDM_FORMULA_CO","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2518a5c1-7eaa-4a2f-a01d-0eaf88938603","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightOAuth20AccountServiceImpl.java","startLine":1,"endLine":44,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.account.authentication.api.GainsightDynamicsOAuth20Service;\nimport com.gainsight.account.authentication.api.GainsightOAuth20Service;\nimport com.gainsight.account.authentication.api.SFDC20ApiV2;\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.enums.OAuthType;\nimport com.gainsight.enums.SalesforceOrgType;\nimport com.gainsight.utils.CryptHandler;\nimport org.scribe.builder.api.Api;\nimport org.scribe.builder.api.DefaultApi20;\nimport org.scribe.model.OAuthConfig;\nimport org.scribe.model.SignatureType;\nimport org.scribe.model.Token;\nimport org.scribe.model.Verifier;\nimport org.scribe.oauth.OAuth20ServiceImpl;\nimport org.scribe.oauth.OAuthService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\nimport static com.gainsight.constants.HttpStatus.SC_BAD_REQUEST;\nimport static com.gainsight.utils.GainsightPrecondition.assertNotNull;\n\n\n/**\n * User: santa\n * Date: 14/4/14\n * Time: 1:47 PM\n */\n@Service\npublic class GainsightOAuth20AccountServiceImpl extends AbstractOAuthAccountService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightOAuth20AccountServiceImpl.class);\n\n    public static final CryptHandler CRYPT_HANDLER = CryptHandler.getInstance();\n\n    @Override\n    protected String getCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac9fc251-2b36-44fa-9d23-bfdab1745c24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":269,"endLine":289,"content":"  GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            Integer rowsAffected = gainsightDatabricksChannelService.executeUpdate(absoluteObjectPath, ductJobMapping.getData(), identifiers);\n            externalSystemResponse.put(\"rowsAffected\", rowsAffected);\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(rowsAffected).jobId(ductJobMapping.getJobId()).build();\n        } catch (SQLException e) {\n            log.error(\"SQLException while updating data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        } catch (Exception e) {\n            log.error(\"Exception while updating data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        }\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        File file = validateDatabricksWriteBackPayload(ductJobMapping, pnpConnectionsInfo);\n\n        List<File> splitFiles = new A","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e38d339-e63b-4a6f-b8d1-d5815a9afda9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1071,"endLine":1091,"content":"   case FRESHDESK:\n                case SAP_DATASPHERE:\n                    CaasConnectionService connectionService = caasConnectionFactory.getService(pnpConnectionsInfoFromDB.getConnectionType());\n                    pnpConnectionsInfoFromDB = connectionService.updateConnection(pnpConnectionsInfoFromDB, pnpconnectionInputFromUI);\n                    break;\n                case INTERCOMV2:\n                    CaasConnectionService intercomV2ConService = caasConnectionFactory.getService(pnpConnectionsInfoFromDB.getConnectionType());\n                    pnpConnectionsInfoFromDB = intercomV2ConService.updateConnection(pnpConnectionsInfoFromDB, pnpconnectionInputFromUI);\n                    break;\n            }\n        }\n        updatedPropertyList.addAll(pnpConnectionInfoFromUI.getModifiedPropertiesList(pnpConnectionsInfoFromDB));\n        PNPConnectionsInfo updatedConnectionsInfo = updateRequiredProperties(updatedPropertyList, pnpConnectionsInfoFromDB);\n        PNPConnectionsInfo pnpConnectionsInfoUpdated = pnpConnectionInfoDao.update(updatedConnectionsInfo);\n\n        if (isConnectionNameChanged) {\n            try {\n                AvatarProject avatarProject = UserManagementUtil.newGsUsersApi(ApiConsumer.CONNECTORS_20).avatarProjects().getProjectByExternalId(pnpConnectionInfoFromUI.getConnectionId());\n                if (avatarProject != null) {\n                    AvatarProjectDTO avatarProjectDTO = new AvatarProjectDTO();\n                    avatarProjectDTO.setProjectId(avat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb668b5a-0873-42a3-9542-57d56fc01ed4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/CaasValidationCode.java","startLine":115,"endLine":160,"content":"   INVALID_SFDC_ORG_ID(4046),\n    UNABLE_FETCH_SALESFORCE_PROFILE(4047),\n    OAUTH_DYNAMICS_RESOURCE_INVALID(4049),\n    INVALID_OLD_CONNECTION_STATUS(4048),\n    OAUTH_ACCOUNT_AND_CURRENT_ACCOUNT_MISMATCH(4050),\n    INVALID_REQUEST(4051),\n    CONNECTION_ID_IS_NULL(4052),\n    FAILED_FETCHING_DEPENDENCY(4053),\n    CONNECTION_HAS_PROJECT_DEPENDANCY(4054),\n    CONNECTION_HAS_DEPENDENCY(4056),\n    FAILED_TO_COMMUNICATE_SERVICE(4057),\n    CONNECTIONS_NOT_FOUND(4058),\n    CONNECTION_REVOKED_SUCCESSFULLY(4059),\n    INTERNAL_ERROR(4050),\n    SUBSCRIPTION_ID_ALREADY_EXISTS(4051),\n    TOO_MANY_CONNECTIONS(4052),\n    AUTHENTICATION_ERROR(4053),\n    ACCOUNT_MISSING_APPLICATION_DETAILS(4057);\n    private static final Map<String, CaasValidationCode> MAP = new HashMap<>();\n\n    static {\n        for (CaasValidationCode caasValidationCode : values()) {\n            MAP.put(caasValidationCode.name().toLowerCase(), caasValidationCode);\n        }\n    }\n\n    private final int code;\n    /**\n     * Is this code used by outside or not\n     */\n    private final boolean codeConstant;\n    private final ExceptionType exceptionType;\n    private String className = getClass().getSimpleName();\n\n    CaasValidationCode(int code) {\n        this(code, false, ExceptionType.DEFAULT);\n    }\n\n    CaasValidationCode(int code, boolean codeConstant, ExceptionType exceptionType) {\n        this.code = code;\n        this.codeConstant = codeConstant;\n        this.exceptionType = exceptionType;\n    }\n\n    /**\n     * From valu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"88a61236-944b-468f-b88a-85a4fdd6701f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountDetail.java","startLine":1,"endLine":39,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport com.gainsight.bean.account.BaseAccountDetail;\nimport com.gainsight.enums.productusage.ApplicationSubArea;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Sets;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonIgnore;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.util.Set;\n\n/**\n * User: santa\n * Date: 17/4/14\n * Time: 10:39 AM\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Document(collection = \"accountDetail\")\npublic class AccountDetail extends BaseAccountDetail {\n    private static final long serialVersionUID = -1L;\n    public static final String S3_BUCKET_NAME = \"s3BucketName\";\n    public static final String KEY_ID = \"KEYID\";\n    public static final String GENERATE_ERROR_FILE = \"GENERATE_ERROR_FILE\";\n\n    //This hold the reference of the syncInfo from third party vendor to mongodb\n    private String masterSyncInfoId;\n    //This hold the reference of syncInfo from mongodb To postgres Staging db\n    private String stagingSyncInfoId;\n    //This hold the reference of syncInfo for flipped measures from postgres to mongo\n    private String flippedMeasuresSyncInfoId;\n    //This should hold the db name of the field which we","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cde0f79-d51f-4e39-a19f-502c7991676c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/CaasValidationCode.java","startLine":1,"endLine":45,"content":"package com.gainsight.duct.enums;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.CaasMessageProperties;\nimport com.gainsight.exception.ExceptionType;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport exception.ErrorCode;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum CaasValidationCode implements ErrorCode {\n\n    EXTERNAL_SYSTEM_METADATA_NOT_FOUND(1000),\n    EXTERNAL_SYSTEM_ERROR_DURING_FREE_FORM(1001),\n\n\n    EXTERNAL_SYSTEM_ERROR_DURING_WRITEBACK(1002),\n    EXTERNAL_SYSTEM_ERROR_DURING_FETCH(1003),\n\n\n    //internal error\n    INVALID_RESOURCE_NAME(2000),\n    GIVEN_INPUT_FIELDS_DOES_NOT_EXIST(2001),\n    GIVEN_FILTER_IS_NOT_VALID(2002),\n    ONLY_ONE_FILTER_IS_ALLOWED(2003),\n    NO_CONNECTION_FOUND(2004),\n    CONNECTION_NOT_AUTHORIZED(2005),\n    INVALID_CONNECTOR_TYPE(2006),\n    OPERATOR_NOT_SUPPORTED(2007),\n    FINAL_OUTPUT_FILE_CREATION_FAILED(2008),\n    EXCEEDED_MAX_FILE_UPLOAD_SIZE(2009),\n    FIELDS_NOT_SUPPORTED_FOR_WRITEBACK(2010),\n    UPSERT_KEYS_NOT_PRESENT(2011),\n    INVALID_VALUE_FOR_REQUIRED_KEYS(2022),\n    NO_DATA_PROVIDED(2023),\n    S3_FILE_NOT_PRESENT(2024),\n    FAILED_TO_DOWNLOAD_FILE_FROM_S3_SIGNED_URL(2025),\n    REQUIRED_MAPPINGS_NOT_PRESENT(2026),\n    API_CONFIG_NOT_FOUND(2027),\n    MAX_NUMBER_OF_RETRIES_EXHAUSTED(2028),\n    WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED(2029),\n    INVALID_WRITEBACK_OPERATION(2030),\n    EXTERNAL_FILTER_NOT_ALLOWED","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21d7bbf3-a7dc-41f8-a2b0-37e8805a0b28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctJobMapping.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans;\n\n\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.collect.Maps;\nimport lombok.*;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.joda.time.DateTime;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Document(collection = \"duct_job_mapping\")\n@CompoundIndexes({@CompoundIndex(\n        name = \"tid_jid_index\",\n        def = \"{'tenantId' : 1, 'jobId' : 1}\",\n        unique = true\n)})\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\n@Builder\n@AllArgsConstructor\npublic class DuctJobMapping extends MongoBaseBean implements Serializable {\n\n    private static final long serialVersionUID = -1L;\n\n    public DuctJobMapping() {\n    }\n\n    private List<FieldInfo> fieldInfos;\n    private String jobId;\n\n    p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5e9fe939-51ee-4d57-b83c-857229a297e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":271,"endLine":317,"content":"s.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n    Chainr chainr = Chainr.fromSpec(spec);\n    List<Map<String, Object>> finalData = new ArrayList<>();\n    for (Map<String, Object> datum : data) {\n      finalData.add(OBJECT_MAPPER.convertValue(chainr.transform(datum), new TypeReference<Map<String, Object>>() {\n      }));\n    }\n    return finalData;\n  }\n\n  @Override\n  protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n    internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n  }\n\n  @Override\n  protected String getTaskName() {\n    return CAAS_INTERCOMV2_EXTRACT;\n  }\n\n  @Override\n\n  protected String getTeamName() {\n    return DuctConstants.CONNECTORS;\n  }\n\n  @Override\n  protected String getUseLatest() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.intercomv2.external.task.extract.use.latest\", \"true\");\n  }\n\n  @Override\n  protected String getVersion() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.intercomv2.external.task.extract.version\", \"v1\");\n  }\n\n  @Override\n  protected String getTaskTimeoutMins() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.intercomv2.external.task.default.timeout\", \"240\");\n  }\n\n\n  /**\n   * Generates query payload for object search\n   *\n   * @param criteria {@link Criteria}\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ab6cdfd-a733-4252-9a8f-b244141dc089","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":127,"endLine":159,"content":"                  stringBuilder.append(\"(\");\n                    handleQuotes(stringBuilder, false, values);\n                    stringBuilder.append(\")\");\n                } else {\n                    stringBuilder.append(\"(\");\n                    handleQuotes(stringBuilder, true, values);\n                    stringBuilder.append(\")\");\n                }\n                break;\n            default:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(rule.getOp()));\n                handleQuotes(stringBuilder, !NON_QUOTE_DATA_TYPES.contains(rule.getFieldInfo().getDataType()), values);\n        }\n        log.info(\"where condition formed for this criteria is {}\", stringBuilder.toString());\n    }\n\n    private static List<String> getValues(FilterRule rule) {\n        return rule.getValues().stream().map(val -> val.getValue().toString()).collect(Collectors.toList());\n    }\n\n    private static void appendOperator(StringBuilder stringBuilder, String operator) {\n        stringBuilder.append(SPACE).append(operator).append(SPACE);\n    }\n\n    private static void handleQuotes(StringBuilder stringBuilder, boolean withQuotes, List<String> values) {\n        if (withQuotes) {\n            stringBuilder.append(values\n                    .stream()\n                    .map(name -> (SINGLE_QUOTE + escapeSpecialChar(name) + SINGLE_QUOTE))\n                    .collect(Collectors.joining(\",\")));\n        } else\n            stringBuilder","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbe2fd0a-c25c-4d16-a500-4be684603cc6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct;\n\nimport com.gainsight.actions.bean.actionowner.BulkActionResponse;\nimport com.gainsight.actions.bean.actionowner.BulkDataLoadRequest;\nimport com.gainsight.annotation.APIScope;\nimport com.gainsight.commons.utils.JsonUtil;\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.dto.GsExternalSystemErrorMappingDTO;\nimport com.gainsight.duct.beans.dto.MeetingDetailsRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.AuthorizationLevel;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gains","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e9afcc69-2001-491d-9acf-7fb918150b6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":352,"endLine":380,"content":"\n\n                        TenantMasterUpdate update = new TenantMasterUpdate(tenant);\n                        tenantMasterDAO.update(tenantMasterQuery, update);\n                        pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED_AND_LINKED);\n                        log.info(\"Zendesk Subdomain to Tenant Mapping Successful\");\n                    }catch (Exception e) {\n                        log.error(\"Exception occurred while linking zendesk widget\", e);\n                        pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                    }\n                } catch (Exception e) {\n                    log.error(\"Exception occurred while unlinking zendesk widget\",e);\n                    pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED_AND_LINKED);\n                }\n            }\n        }else{\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n        }\n    }\n\n    private void deleteAccountAndData(String subdomain) {\n            //Step 1 : Find and Remove Account Detail entry\n            final AccountQuery accountQuery = getAccountQuery(subdomain);\n            AccountDetail accountDetail = accountDAO.findOne(accountQuery);\n            //If this account is not present then no point of executing below lines\n            GainsightPrecondition\n                    .assertNotNull(accountDetail, CaasValidationCode.INVALID_INPUT, org.apache.http.HttpStatus.SC_BAD_REQUEST);\n\n            accoun","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91d9f4e9-dde3-4154-b98e-37149e54c1fc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":520,"endLine":543,"content":"array, deserialize as List<Map<String, Object>>\n        return OBJECT_MAPPER.readValue(jsonNode.traverse(), new TypeReference<List<Map<String, Object>>>() {\n        });\n      } else if (jsonNode.isObject()) {\n        // If it's a single object, deserialize as Map<String, Object>\n        return OBJECT_MAPPER.convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n        });\n      } else {\n        // Handle failure\n        throw new IllegalArgumentException(\"Unsupported JSON structure\");\n      }\n    } catch (Exception e) {\n      log.error(\"Exception occurred while trying to fetch preview data : {}\", e.getMessage(), e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n    }\n  }\n\n  private List<GSFieldDefinition> generateMetadataForMissingFields(MetadataGenerationDetails metadataGenerationDetails,\n                                                                   MetadataEngineConfig metadataEngineConfig,\n                                                                   PNPConnectionsInfo pnpConnectionsInfo,\n                                                                   Map<String, Object> objectDefinition,\n                                                                   String objectName, DataEnum dataEnum, String recordId) throws CaasException {\n    try {\n      Optional<ResourceConfig> optionalResourceConfig = metadataEngine","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fcc8c8f5-aad8-4250-a102-dc9fcbb769e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":27,"endLine":60,"content":"WITH, FilterOperator.CONTAINS, FilterOperator.DOES_NOT_CONTAINS);\n    private static final String UNIX_MILLIS = \"UNIX_MILLIS\";\n    private static final String OPEN_BRACKET = \"(\";\n    private static final String CLOSE_BRACKET = \")\";\n\n    public static String createQuery(FilterRule filterRule, ConnectorType connectorType, Map<String, String> ntzFields) {\n        String criteria = getFilterString(filterRule, connectorType, ntzFields);\n        log.debug(\"Query created for {}\", criteria);\n        return criteria;\n    }\n\n    public static String createQuery(FilterRule filterRule, ConnectorType connectorType) {\n        return createQuery(filterRule, connectorType, null);\n    }\n\n    private static String getFilterString(FilterRule filterRule, ConnectorType connectorType, Map<String, String> ntzFields) {\n\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\" where \");\n        stringBuilder.append(createFilterQueryFromEachRule(filterRule, connectorType, ntzFields));\n\n        if (stringBuilder.toString().equalsIgnoreCase(\" where \")) {\n            return \"\";\n        } else {\n            return stringBuilder.toString();\n        }\n\n    }\n\n    private static String createFilterQueryFromEachRule(FilterRule filterRule, ConnectorType connectorType, Map<String, String> ntzFields) {\n        List<String> whereClauses = Lists.newArrayList();\n        String joiner = StringUtils.SPACE;\n        if (filterRule != null) {\n            ListUtils.emptyIfNull(filterRule.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59f7b11d-012a-445e-942e-600a28558ef4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":116,"endLine":145,"content":"ly Fetched data from external system for resource: {}\", ductJobMapping.getResourceName());\n\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            externalSystemResponse.put(DATA, jsonNode);\n\n            if (jsonNode.size() > 0) {\n                nextPageToken = String.valueOf(ductJobMapping.getLimit() + 1 + Integer.valueOf(nextPageToken));\n            } else {\n                nextPageToken = null;\n            }\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse)\n                    .nextPageToken(nextPageToken).totalNumberOfRecords(jsonNode.size())\n                    .tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            log.error(\"Error while fetching data from external system\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping duct","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8746797-145a-4f19-a711-61434396e30a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":205,"endLine":230,"content":"rtKeys \", e);\n                    throw e;\n                } catch (Exception e) {\n                    log.error(\"Error in validating the upsert keys expression {}, {}\", getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForUpsertKeys(), resourceDefinition), e);\n                    DuctUtils.populateAndInsertError(\"Error in validating the upsert keys expression\"\n                            + String.join(\",\", getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForUpsertKeys(), resourceDefinition)), ductJobMapping.getJobId());\n                }\n            }\n        }\n        if (isInvalid)\n            DuctUtils.populateAndInsertError(errorMessage.toString(), ductJobMapping.getJobId());\n    }\n\n    private String getDisplayNamesForFieldNameKeys(String expressionForUpsertKeys, ObjectDefinition resourceDefinition) {\n        Map<String, String> fieldToDisplayNameMap = resourceDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getLabel));\n        List<String> fields = new ArrayList<>(Arrays.asList(expressionForUpsertKeys.split(\"\\\\s+\")));\n        List<String> displayFieldList = new ArrayList<>();\n        for (String field : fields) {\n            displayFieldList.add(fieldToDisplayNameMap.getOrDefault(field, field));\n        }\n\n        return String.join(\" \", displayFieldList);\n\n    }\n\n    private void validateAllowedFieldsForWriteBack(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> metaInf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"778fd0a1-d90e-4fb0-a3fb-892471f8a2e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZendeskConnectionService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.a","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c473a37b-a393-4be8-8eae-9ddc4ef60f33","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightPxCaasMetadataServiceImpl.java","startLine":34,"endLine":60,"content":"pe);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<String> allObjects = gainsightPXFetchService.getAllObjects();\n        List<Map<String, Object>> returnObj = new ArrayList<>(allObjects.size());\n        for (String obj : allObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GSIntegrationResponse gsIntegrationResponsePx = gainsightPXFetchService.getObjectDescription(pnpConnectionsInfo.getConnectionId(), objectName);\n        return convertPxOrHubspotObjectForUI(pnpConnectionsInfo.getConnectionType(), objectName, gsIntegrationResponsePx, pnpConnectionsInfo);\n    }\n\n    private Map convertPxOrHubspotObjectForUI(ConnectorType connectorType, String objectName, GSIntegrationResponse gsIntegrationResponse, PNPConnectionsInfo pnpConnectionsInfo) {\n        if (connectorType == ConnectorType.GAINSIGHT_PX) {\n            List<GainsightPXFieldDescription> gainsightPXFieldDescriptionList = (List<GainsightPXFieldDescription>) gsIntegrationResponse.getResult();\n            Map<String, Object> retMap =","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"102cdf47-ad65-4fd7-b624-6cfe3f9fa7d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":279,"endLine":298,"content":"x) {\n            LOGGER.error(\"Exception occurred: {}\", ex.getMessage(), ex);\n        }\n    }\n\n    private void initializeComparison(String tenantId, ICSVWriter icsvOutWriter, String baseUrl, ConnectorType connectorType, List<String> objectNames,\n                                      Map<String, List<String>> superClassInfo) throws Exception {\n        try {\n            PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n            query.addCriteria(Criteria.where(UCConstants.MONGO_TENANTID_FIELD_MAPPER).is(RequestContextProvider.getTenantId()));\n            List<PNPConnectionsInfo> allConnectionForConnectionType = pnpConnectionInfoDao.getAllConnectionForTenant(query);\n            for (PNPConnectionsInfo pnpConnectionsInfo : allConnectionForConnectionType) {\n                for (String objectName : objectNames) {\n                    try {\n                        LOGGER.info(\"Obtaining Metadata from connectors for tenant: {}\", tenantId);\n                        Map<String, Object> metadataFromConnectors = getMetadataFromConnectors(baseUrl, pnpConnectionsInfo.getConnectionId(), objectName);\n                        LOGGER.info(\"Metadata from connectors for tenant: {} obtained successfully\", tenantId);\n\n                        LOGGER.info(\"Obtaining Metadata from native way for tenant: {}\", tenantId);\n                        Map<String, ObjectDefinition> nativeAttributes = getNativeAttributes(objectName, pnpConnectionsInfo, superClassInfo)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e9efd81-c832-4e6d-bf62-2e15cb881118","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.processor.GainsightEcosystemFetchProcessor;\nimport com.gainsight.duct.utils.ecosystem.EcosystemHelper;\nimport com.gainsight.duct.utils.ecosystem.EcosystemResponse;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc5adc73-1d4c-404a-b9e9-a4aec4087961","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":148,"endLine":164,"content":"ct> additionalState, String customDomainUrl, SalesforceOrgType sfdcOrgType) {\n        GainsightAccountService gainsightAccountService = GAINSIGHT_ACCOUNT_SERVICE_MAP.get(accountType.getOauthType());\n        assertNotNull(gainsightAccountService, CaasValidationCode.ACCOUNT_INVALID_ACCOUNT_TYPE, SC_BAD_REQUEST);\n        return gainsightAccountService.authorizationURL(accountType, hostUrl, customDomainUrl, sfdcOrgType.name()) + AUTHORIZATION_URL + STATE + getState(accountId, additionalState);\n    }\n\n    @Override\n    public String authorizationUrl(AccountType accountType, String hostUrl, PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> additionalState) throws CaasException {\n        GainsightAccountService gainsightAccountService = GAINSIGHT_ACCOUNT_SERVICE_MAP.get(accountType.getOauthType());\n        assertNotNull(gainsightAccountService, CaasValidationCode.ACCOUNT_INVALID_ACCOUNT_TYPE, CaasValidationCode.ACCOUNT_INVALID_ACCOUNT_TYPE.getUserText(), SC_BAD_REQUEST);\n        String dynamicsConsentStr = dynamicsConsentStr(pnpConnectionsInfo, accountType);\n        String consentStr = accountType == AccountType.DYNAMICS ? dynamicsConsentStr : AUTHORIZATION_URL;\n        boolean nativeEnabled = DuctUtils.checkIfIpaasAndFTEnabled(pnpConnectionsInfo);\n        if (!nativeEnabled) {\n            return DuctConnectorCalloutUtil.authorizationUrl(pnpConnectionsInfo);//to do\n        } else if (AccountType.GONG_IO == accountType) {\n            CaasConnectorConfig connectionConfig = co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ede42dbb-ada9-489a-b65f-012375b4bb0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":618,"endLine":642,"content":"       .connectorType(ductRequestDTO.getConnectorType())\n                .filterRule(ductRequestDTO.getFilterRule())\n                .startTime(ductRequestDTO.getStartTime())\n                .filteredDateField(ductRequestDTO.getFilteredDateField())\n                .endTime(ductRequestDTO.getEndTime())\n                .jobId(UUID.randomUUID().toString())\n                .tenantId(RequestContextProvider.getTenantId())\n                .isPaginated(ductRequestDTO.getIsSynchronized())\n                .ductStatus(DuctStatus.INIT)\n                .syncDirection(getDirection(ductRequestDTO))\n                .ductDataOperation(ductRequestDTO.getDuctDataOperation())\n                .data(ductRequestDTO.getData())\n                .columnMappings(ductRequestDTO.getColumnMappings())\n                .targetSystemDataURL(ductRequestDTO.getTargetSystemDataURL())\n                .isBulk(StringUtils.isNotEmpty(ductRequestDTO.getTargetSystemDataURL()))\n                .fileName(ductRequestDTO.getFileName())\n                .criteria(ductRequestDTO.getCriteria())\n                .jobName(UUID.randomUUID().toString() + \"_duct\") //todo to be changed\n                .limit(ductRequestDTO.getLimit())\n                .connectorType(ductRequestDTO.getConnectorType())\n                .nextPageToken(ductRequestDTO.getNextPageToken())\n                .properties(ductRequestDTO.getProperties())\n                .query(ductRequestDTO.getQuery())\n                .build();\n        if (ductRequestDTO.isResolve","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a078e724-a1a8-43dd-a66a-7a967e477518","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessor.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.List;\n\n/**\n * @author : vipinsharma\n * @createdOn : 28 Jun 2019 :: 12:56\n **/\n\n@SuppressWarnings(\"all\")\npublic interface GainsightHubspotFetchProcessor {\n    /**\n     *\n     * @param connectionId\n     * @param objectName\n     * @return\n     */\n    GSIntegrationResponse getEntityDescription(String connectionId, String objectName, String api, boolean isStandardObject) throws CaasException;\n\n    /**\n     *\n     * @param connection\n     * @return\n     */\n    GSIntegrationResponse getListOfAvailableEntities(String connection);\n\n     List<Object> getPipeLineValues(PNPConnectionsInfo pnpConnectionsInfo, String entityName) throws CaasException;\n\n    GSIntegrationResponse getCustomObjects(PNPConnectionsInfo pnpConnectionsInfo, String api) throws CaasException;\n\n\n    }\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5981f7d4-2876-47ce-a39d-42fabbbc0934","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":135,"endLine":154,"content":".getDeploymentProperties().getLongValue(\"s3.max.file.upload.size\", MAX_CONTENT_LENGTH) &&\n                    !Boolean.valueOf(DebugFeatureConfigUtil.getFeatureCacheEvaluateService(RequestContextProvider.getRequestInfo())\n                            .evaluate(S3_MULTI_PART_UPLOAD_FEATURE_ENABLED, RequestContextProvider.getTenantId()).getValue()\n                            .toString())) {\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.EXCEEDED_MAX_FILE_UPLOAD_SIZE.getGsEventCode(), CaasValidationCode.EXCEEDED_MAX_FILE_UPLOAD_SIZE.getUserText(), null, jobId, \"File size exceeded the max upload size allowed\"));\n            }\n            ObjectMetadata objectMetadata = new ObjectMetadata();\n            objectMetadata.setContentLength(length);\n            gainsightS3.write(CAAS_BUCKET_NAME, fileName, key, inputStream, objectMetadata);\n            stopWatch.stop();\n            LOGGER.info(\"Uploading file on S3 @ path {} completed in {} secs \", key, stopWatch.getTotalTimeSeconds());\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred when trying to upload file to s3 : {0}\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n    }\n\n    public static void uploadFileStreamOnS3(String key, String fileName, InputStream inp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8718d34e-f381-41a0-9e59-0e97090a6579","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/OperatorType.java","startLine":30,"endLine":81,"content":"ILIKE $right\", OperandType.BINARY),\n    //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n    INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", OperandType.BINARY),\n    EXCLUDES(\"Excludes\", \"excludes\", \"excludes\", \"$left NOT IN ($right)\", OperandType.BINARY),\n    IS_NULL(\"Is Null\", \"isNull\", \"isNull\", \"isNull\", OperandType.UNARY),\n    IS_NOT_NULL(\"Is Not Null\", \"isNotNull\", \"isNotNull\", \"isNotNull\", OperandType.UNARY);\n\n    private static final Map<String, OperatorType> MAP = new HashMap<>();\n\n    static {\n        for (OperatorType type : values()) {\n            MAP.put(type.alias.toLowerCase(), type);\n        }\n    }\n\n    private String display;\n    private String symbol;\n    private String alias;\n    private String sql;\n    private OperandType operandType;\n\n    OperatorType(String display, String symbol, String alias, String sql, OperandType operandType) {\n        this.display = display;\n        this.symbol = symbol;\n        this.alias = alias;\n        this.sql = sql;\n        this.operandType = operandType;\n    }\n\n    public String getDisplay() {\n        return display;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    public String getPostgresSql() {\n        return sql;\n    }\n\n    public String getAlias() {\n        return alias;\n    }\n\n    public OperandType getOperandType() {\n        return operandType;\n    }\n\n    public String replace(String sql, String with, boolean left) {\n        if (left) {\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d908f91e-4502-414b-9698-f2230dcbf538","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":27,"endLine":53,"content":"les.helper.BionicRuleHttpResponseWrapper;\nimport com.gainsight.duct.connection.CaasConnectionFactory;\nimport com.gainsight.duct.connection.CaasConnectionService;\nimport com.gainsight.duct.constants.DuctCommonConstants;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.ConnectionAccountDAO;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.AuthType;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.event.DuctEventService;\nimport com.gainsight.duct.processor.UCAptrinsicChannelService;\nimport com.gainsight.duct.processor.UCAptrinsicChannelServiceImpl;\nimport com.gainsight.duct.utils.*;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.EncryptConnectionDetails;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.EncryptConnectionDetailsManager;\nimport com.gainsight.enums.*;\nimport com.gainsight.gsusers.core.bean.ApiConsumer;\nimport com.gainsight.gsusers.core.bean.avatar.AvatarProjectDTO;\nimport com.gainsight.gsusers.core.bean.sso.InstanceMasterDetail;\nimport com.gainsight.gsusers.sdk.dtos.AvatarProject;\nimport com.gainsight.gsusers.sdk.exception.GsUsersException;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9777a62-949f-4639-a227-7bf28a35bcd5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1033,"endLine":1053,"content":"onConstants.SUBDOMAIN));\n                    }\n                    break;\n                case HUBSPOT:\n                    Map<String, Object> propertiesFromUI = pnpConnectionInfoFromUI.getProperties();\n                    if (propertiesFromUI != null && propertiesFromUI.containsKey(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY)) {\n                        Object authScopes = propertiesFromUI.get(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY);\n                        if (authScopes instanceof List) {\n                            Set<String> hubspotScopes = new HashSet<>((List<String>) authScopes);\n                            pnpConnectionsInfoFromDB.getProperties().put(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY, hubspotScopes);\n                        }\n                    }\n                    break;\n                case ECOSYSTEM:\n                    assertTrue(testEcosystemsConnection(pnpConnectionInfoFromUI), CaasValidationCode.INVALID_INPUT, \"Unable to authenticate to \" + pnpConnectionInfoFromUI.getConnectionType(), HttpStatus.SC_BAD_REQUEST);\n                    Map<String, Object> ecosystemProperties = pnpConnectionInfoFromUI.getProperties();\n                    pnpConnectionsInfoFromDB\n                            .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(ecosystemProperties.get(ACCESS_TOKEN)\n                            ).trim(), pnpConnectionsInfoFromDB.getConnectionType()));\n                    if (ecosystemProperties.containsKey(URL)) {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fc277da-1b59-4f99-a815-ba91276f5a1b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/SchedulerDetails.java","startLine":129,"endLine":177,"content":"  }\n\n    SchedulerDetails that = (SchedulerDetails) o;\n\n    if (isRecursive != that.isRecursive) {\n      return false;\n    }\n    if (cronExpression != null ? !cronExpression.equals(that.cronExpression) : that.cronExpression != null) {\n      return false;\n    }\n    if (dayOfMonth != null ? !dayOfMonth.equals(that.dayOfMonth) : that.dayOfMonth != null) {\n      return false;\n    }\n    if (dayOfWeek != null ? !dayOfWeek.equals(that.dayOfWeek) : that.dayOfWeek != null) {\n      return false;\n    }\n    if (endDate != null ? !endDate.equals(that.endDate) : that.endDate != null) {\n      return false;\n    }\n    if (month != null ? !month.equals(that.month) : that.month != null) {\n      return false;\n    }\n    if (period != that.period) {\n      return false;\n    }\n    if (periodValue != null ? !periodValue.equals(that.periodValue) : that.periodValue != null) {\n      return false;\n    }\n    if (startDate != null ? !startDate.equals(that.startDate) : that.startDate != null) {\n      return false;\n    }\n    if (type != that.type) {\n      return false;\n    }\n    if(timeZoneName != null ? !timeZoneName.equals(that.timeZoneName) : timeZoneName != null) {\n      return false;\n    }\n\n    return true;\n  }\n\n\n\n  @Override\n  public int hashCode() {\n    int result = type != null ? type.hashCode() : 0;\n    result = 31 * result + (startDate != null ? startDate.hashCode() : 0);\n    result = 31 * result + (endDate != null ? endDate.hashCode() : 0);\n    result = 31 * result + (period != null ? period.hashC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b4f389b-90b4-4b6f-baae-8ff5178ccb78","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":142,"endLine":172,"content":"(), generatedFieldDefinitions, fieldNames);\n            else\n                createGSFieldDefinition(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n        });\n    }\n\n    private String resloveDataType(String type, Object value, GSFieldDefinition gsFieldDefinition) {\n        String dataType = \"STRING\";\n        GSFieldDefinition tempGSFieldDefinition = gsFieldDefinition;\n        try {\n            if (isDateValue(value, gsFieldDefinition)) {\n                dataType = \"DATE\";\n            } else if (isDateTimeValue(value, gsFieldDefinition)) {\n                dataType = \"DATETIME\";\n            } else if (value instanceof Number) {\n                if (value instanceof Integer || value instanceof Long || value instanceof Short || value instanceof BigInteger) {\n                    dataType = \"NUMBER\";\n                } else {\n                    dataType = \"NUMBER\";\n                    try {\n                        String numberStr = value.toString();\n                        int index = numberStr.indexOf(\".\");\n                        index = index < 0 ? 0 : numberStr.length() - index - 1;\n                        gsFieldDefinition.getMeta().getProperties().put(DECIMAL_PLACES, index);\n                    } catch (Exception e) {\n                        log.error(\"Exception in estimating the decimal places\", e);\n                    }\n                }\n            } else if (value instanceof Boolean) {\n                dataType = \"BOOLEAN\";\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0e7dfc2-3a06-4138-b196-36824777aae2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":143,"endLine":167,"content":"et(URL)))) {\n            pnpConnectionInput.setProperties(URL, GainsightUtils.valueOf(properties.get(URL)));\n        }\n\n    }\n\n    private static void setDecryptedBaseTokenDetail(PNPConnectionInput pnpConnectionInput) {\n        ConnectorType connectionType = pnpConnectionInput.getPnpConnectionsInfo().getConnectionType();\n        BaseTokenDetail baseTokenDetail = pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail();\n        if (baseTokenDetail != null) {\n            switch (connectionType) {\n                case MIXPANEL:\n                case SEGMENT_IO:\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.ACCESS_SECRET, baseTokenDetail.getAccessSecret().getString());\n                    break;\n                case GS_BULK_API:\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.DATALOAD_ACCESSKEY, baseTokenDetail.getAccessKey().getString());\n                    break;\n                case S3:\n                case CUSTOMER_COMMUNITY:\n                case CUSTOMER_EDUCATION:\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.ACCESS_SECRET, baseTokenDetail.getAccessSecret().getString());\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.ACCESS_KEY_ID, baseTokenDetail.getAccessKey().getString());\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.BUCKETNAME, baseTokenDetail.getBucketName());\n                    pnpConnectionInput.setProp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6495fd97-b580-4c2e-a6d2-283d2d907b7c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":299,"endLine":319,"content":");\n            connectorConfig.getAuthInfo(pnpConnectionsInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFieldsInfo ->\n                    requiredFieldsInfo.getProperties().containsKey(\"storeInDb\") && requiredFieldsInfo.getProperties().containsKey(\"isSecretKey\")).forEach(requiredFieldsInfo -> {\n                if ((Boolean) requiredFieldsInfo.getProperties().get(\"storeInDb\") && (Boolean) requiredFieldsInfo.getProperties().get(\"isSecretKey\")\n                        && (null != pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES))) {\n                    ((Map) pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES)).put(requiredFieldsInfo.getFieldName(),\n                            SecretData.fromValue((String) ((Map) pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES)).get(requiredFieldsInfo.getFieldName())));\n                }\n            });\n            pnpConnectionsInfo.getProperties().put(IPAAS_PROPERTIES, DuctUtils.removeCEPropertiesFromIpaasPropertiesIfPresent(pnpConnectionsInfo));\n            pnpConnectionInfoDao.save(pnpConnectionsInfo);\n            log.info(\"Access token refreshed successfully for connection Type: {}\", pnpConnectionsInfo.getConnectionType());\n            postAuthorization(authDetailsOp.get(), pnpConnectionsInfo, metadataEngineConfig);\n            return true;\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n\n    private void updateWidgetSetup(PNPConnectionsInfo pnpConnectionsInfo) {\n        if(p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d369ec07-800e-48eb-b3ff-a2e3e1c04f48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":122,"endLine":143,"content":"tFields();\n        Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap = fields.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n        Set<String> readOnlyFields = new HashSet<>();\n        Set<String> fieldsToWrite = ductRequestDTO.getData().keySet();\n        Set<String> fieldNotAvailable = new HashSet<>();\n        for (String field : fieldsToWrite) {\n            if (fieldNameToFieldDefinitionMap.containsKey(field)) {\n                if (fieldNameToFieldDefinitionMap.get(field).getMeta().isReadOnly())\n                    readOnlyFields.add(field);\n            } else\n                fieldNotAvailable.add(field);\n        }\n        readOnlyFields.removeAll(fieldsRequired);\n        if (!fieldNotAvailable.isEmpty()) {\n            log.error(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText() + \":\" + String.join(\",\", fieldNotAvailable));\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(),\n                    CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText() + \":\" + String.join(\",\", fieldNotAvailable),\n                    CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText() + \":\" + String.join(\",\", fieldNotAvailable));\n        }\n        if (!readOnlyFields.isEmpty()) {\n            log.error(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText() + \":\" + String.join(\",\", readOnlyFields));\n            DuctUtils.throwError(CaasValidationCod","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e18d645-a232-4a8b-83c8-18f97e92be99","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":79,"endLine":105,"content":"otFetchProcessor gainsightHubspotFetchProcessor;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectApiConfigDao caasObjectApiConfigDao;\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n    @Autowired\n    private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.HUBSPOT.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        Object cacheValue = redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()));\n        Collection<String> hubspotObjects = null;\n        if (cacheValue == null) {\n            LOGGER.info(\"Objects not found in Cache, fetching again from source\");\n            List<CaasObjectApiConfig> caasObjectApiConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n            hubspotObjects = caasObjectApiConfigs.stream().filter(i -> !DuctConstants.CUSTOM_OBJECTS_KEYWORD.equalsIgnoreCase(i.getObjectName())).map(CaasObjectApiConfig::getObjectName).collect(Collectors.toList());\n            CaasObjectApiConfig caasObjectApiConfig = caasObjectApiConfigs.str","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"959ab38f-9aaf-496c-8281-dbe84fe6caa5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":307,"endLine":333,"content":"String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            responseMap = (Map) MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n            try {\n                if (response.getEntity().getContent() != null) {\n                    response.getEntity().getContent().close();\n                }\n            } catch (Exception e) {\n                log.error(\"Error in input stream \", e);\n            }\n        }\n        return responseMap;\n    }\n\n    private Map<String, Object> extractParticipantsData(Map<String, Object> externalSystemResponse) {\n        Map<String, Object> participantsData = new HashMap<>();\n        Map<String,Object> organizer = new HashMap<>();\n        List<Map<String, Object>> attendees = new ArrayList<>();\n        List<Object> participants = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(externalSystemResponse.get(PARTICIPANTS_KEYWORD))) {\n            participantsData = MAPPER.convertValue(externalSystemResponse.get(PARTICIPANTS_KEYWORD), new TypeReference<Map<String, Object>>() {});\n            if (ObjectUtils.isNotEmpty(participantsData.get(ORGANIZER_KEYWORD))) {\n                organizer = MAPPER.c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"472e4945-6675-43dc-9dcb-8a5e2dc13a7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":244,"endLine":263,"content":"d.contains(\".\")) {\n                relationshipName = field.split(\"\\\\.\")[0];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = relationshipNameToObjectNameMap.get(relationshipName);\n                    relationshipObjectAttributes = getObjectAttributes(relationBaseObject, pnpConnectionsInfo, false);\n                    List<GSFieldDefinition> fields = baseAttributes.get(ductJobMapping.getResourceName()).getFields();\n                    String finalRelationshipName = relationshipName;\n                    fields.addAll(relationshipObjectAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                if (ductJobMapping.getFields().contains(finalRelationshipName + \".\" + i.getFieldName())) {\n                                    GSFieldDefinition gsFieldDefinition = DuctUtils.cloneGSFieldDefinition(i);\n                                    gsFieldDefinition.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n                                    gsFieldDefinition.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                    return gsFieldDefinition;\n                                }\n                                return null;\n                            }).filter(Objects::nonNull).collect(Collectors.toList())\n                    );\n                }\n                relationshipFieldsAlreadyAdded.add(relationship","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"72369359-214b-41d8-8cc1-718293f353cc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BigQueryValidationDataSourceService.java","startLine":51,"endLine":74,"content":"nchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fieldType = (String) gsFieldDefinition.getMeta().getOriginalDataType().toLowerCase();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38b581be-5bad-44f7-a8da-1805823c4234","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":160,"endLine":182,"content":"R.error(\"Error occurred while fetching Custom Objects data from Hubspot-\" + e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_CODE_NULL, DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL));\n        }\n    }\n\n    private List<GainsightHubspotFieldDescriptionV3> handleOwnerProeprties(PNPConnectionsInfo pnpConnectionsInfo, boolean isHubspotLatestApiEnabled) throws Exception {\n        List<GainsightHubspotFieldDescriptionV3> hubspotEntityProperties = null;\n        try {\n            // Uncomment the below code when we are able to support the latest api's in hubspot for owner object\n            if (isHubspotLatestApiEnabled) {\n                InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"hubOwnerSchemaV3.json\");\n                hubspotEntityProperties = MAPPER.readValue(IOUtils.toString(inputStream), new TypeReference<List<GainsightHubspotFieldDescriptionV3>>() {\n                });\n            } else {\n                InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"hubOwnerSchema.json\");\n                hubspotEntityProperties = MAPPER.readValue(IOUtils.toString(inputStream), new TypeReference<List<GainsightHubspotFieldDescription>>() {\n                });\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while fetching OWNER metadata for Hubspot-\" + e.getMessage()\n                    , e);\n            thro","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a94e43b-0448-455f-8d74-82a5a26f1d79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthService.java","startLine":1,"endLine":9,"content":"package com.gainsight.service;\n\nimport com.gainsight.bean.health.HealthStatusResponse;\n\npublic interface HealthService {\n\n    HealthStatusResponse getAllServiceStatus(String tenantId);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"083d72b2-c223-4067-89e7-bf08200493fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":396,"endLine":411,"content":"EngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n      Map<String, ObjectDefinition> metadata = getMetadataUsingEngine(connectionId, objectName, false);\n      List<GSFieldDefinition> generatedFields;\n      if (metadataGenerationDetails.getRecordId() != null)\n        generatedFields = generateMetadataForMissingFields(metadataGenerationDetails, metadataEngineConfig, pnpConnectionsInfo, OBJECT_MAPPER.convertValue(metadata.get(objectName), new TypeReference<Map<String, Object>>() {\n        }), objectName, DataEnum.DATA_FETCH_BY_ID, metadataGenerationDetails.getRecordId());\n      else\n        generatedFields = generateMetadataForMissingFields(metadataGenerationDetails, metadataEngineConfig, pnpConnectionsInfo, OBJECT_MAPPER.convertValue(metadata.get(objectName), new TypeReference<Map<String, Object>>() {\n        }), objectName, DataEnum.DATA_FETCH_SYNC, null);\n      GeneratedMetadataCache metadataByConnectionIdAndObjectName = generatedMetadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n      if (metadataByConnectionIdAndObjectName == null) {\n        GeneratedMetadataCache generatedMetadataCache = new GeneratedMetadataCache(RequestContextProvider.getTenantId(), connectionId, objectName, generatedFields);\n        generatedMetadataCacheDao.insert(generatedMetadataCache);\n      } else {\n        metadataByConnectionIdAndObjectName.setGeneratedFields(generatedFields);\n        generatedMetadataCacheDao.update(m","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd6ddf2f-9df5-4c24-92f8-3b121933f24f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":112,"endLine":137,"content":"map.entrySet()) {\n                        if (entry.getValue() instanceof String) {\n                            String value = (String) entry.getValue();\n                            if (value.equalsIgnoreCase(\"true\")) {\n                                map.put(entry.getKey(), true);\n                                writeOutData(csvWriter, tenantId, \"Success\", \"Updated\" + entry.getKey() + \" to true\");\n                            } else if (value.equalsIgnoreCase(\"false\")) {\n                                map.put(entry.getKey(), false);\n                                writeOutData(csvWriter, tenantId, \"Success\", \"Updated\" + entry.getKey() + \" to false\");\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(\"Error while processing tenantId: {}\", tenantId, e);\n                    writeOutData(csvWriter, tenantId, \"Failed\", e.getMessage());\n                }\n            }\n            caasObjectAttributesTenantConfigDAO.update(caasObjectAttributesTenantConfig);\n        }\n    }\n\n    private void writeOutBackup(ICSVWriter backupCsvWriter, String tenantId, CaasObjectAttributesTenantConfig caasObjectAttributesTenantConfig) {\n            backupCsvWriter.writeNext(new String[]{tenantId, caasObjectAttributesTenantConfig.getConnectionId(), caasObjectAttributesTenantConfig.toString()});\n    }\n\n    private void writeOutData(ICSVWriter csvWriter, String tenantId, String failed, String error_initializ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"175d290e-e379-4ab6-a722-94385a527a71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":164,"endLine":179,"content":"ode.INVALID_VALUE_FOR_REQUIRED_KEYS.getUserText(), DuctConstants.HS_OBJECT_ID, ductRequestDTO.getData().get(DuctConstants.HS_OBJECT_ID)));\n        }\n    }\n\n    private String getDisplayNamesForFieldNameKeys(String expressionForUpsertKeys, ObjectDefinition resourceDefinition) {\n        Map<String, String> fieldToDisplayNameMap = resourceDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getLabel));\n        List<String> fields = new ArrayList<>(Arrays.asList(expressionForUpsertKeys.split(\"\\\\s+\")));\n        List<String> displayFieldList = new ArrayList<>();\n        for (String field : fields) {\n            displayFieldList.add(fieldToDisplayNameMap.getOrDefault(field, field));\n        }\n\n        return String.join(\" \", displayFieldList);\n\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf4463e4-2d9d-4f5f-abbf-c2256312625f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":177,"endLine":210,"content":"asedOnStage(int i, DuctJobMapping ductJobMapping) {\n        switch (i) {\n            case 1:\n                ductJobMapping.setCaasS3FileDetails(new CaasS3FileDetails());\n                break;\n            case 2:\n                ductJobMapping.getCaasS3FileDetails().setBucketName(\"BucketName\");\n                break;\n            case 3:\n                ductJobMapping.getCaasS3FileDetails().setEncryptedAccessSecret(\"Secret\");\n                break;\n            case 4:\n                ductJobMapping.getCaasS3FileDetails().setEncryptedAccessKey(\"Key\");\n                break;\n        }\n    }\n\n    private String getDisplayNamesForFieldNameKeys(String expressionForUpsertKeys, ObjectDefinition resourceDefinition) {\n        Map<String, String> fieldToDisplayNameMap = resourceDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getLabel));\n        List<String> fields = new ArrayList<>(Arrays.asList(expressionForUpsertKeys.split(\"\\\\s+\")));\n        List<String> displayFieldList = new ArrayList<>();\n        for (String field : fields) {\n            displayFieldList.add(fieldToDisplayNameMap.getOrDefault(field, field));\n        }\n\n        return String.join(\" \", displayFieldList);\n\n    }\n\n\n    private CaasConnectorConfig createConnectorConfig(ConnectorType type) throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_CONNECTOR_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d18ce191-02fb-40ac-88fd-9349b224797a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":493,"endLine":517,"content":"sToken(), jobImportId);\n                pollResponse = extractResponse(httpResponse);\n                if (httpResponse.getStatusLine().getStatusCode() != 200 && httpResponse.getStatusLine().getStatusCode() != 201) {\n                    log.error(\"Error in polling, trying again\");\n                    TimeUnit.SECONDS.sleep(1);\n                    pollWithJobId(accessDetailsFromDB, response, ductJobMapping);\n                }\n                String pollStatus = pollResponse.get(\"state\").toString();\n                switch (pollStatus) {\n                    case \"DONE\":\n                        DuctResponse ductResponse = new DuctResponse();\n                        log.info(\"External system poll response : {} \", pollResponse);\n                        populateExternalWBResponse(ductResponse, pollResponse, ductJobMapping, jobImportId);\n                        ductResponse.setExternalSystemResponse(pollResponse);\n                        ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n                        ductResponse.setTenantId(ductJobMapping.getTenantId());\n                        ductResponse.setConnectionId(ductJobMapping.getConnectionId());\n                        ductResponse.setJobId(ductJobMapping.getJobId());\n                        return ductResponse;\n                    case \"IN_PROGRESS\":\n                    case \"NOT_STARTED\":\n                    default:\n                        TimeUnit.SECONDS.sleep(pollInterval);\n                        break;\n                }\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae3b2737-c057-46ac-952b-c834b933f54a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":107,"endLine":116,"content":"ate List<String> fetchTenantDetails(String accountId) {\n        List<PNPConnectionsInfo> pnpConnectionsInfos = GainsightCollectionUtils.nullSafeList(pnpConnectionInfoDao.findAllConnectionForConnectionType(ConnectorType.ZOOM));\n\n        List<String> tenantIds = pnpConnectionsInfos.stream().filter(pnpConnectionsInfo ->\n                        null != pnpConnectionsInfo.getProperties().get(ZOOM_ACCOUNT_ID) ?\n                                pnpConnectionsInfo.getProperties().get(ZOOM_ACCOUNT_ID).toString().equals(accountId) : false)\n                .map(PNPConnectionsInfo::getTenantId).collect(Collectors.toList());\n        return tenantIds;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8fee7e4-d672-480f-a4c6-95c44a648ef8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/DuctMessageProcessor.java","startLine":66,"endLine":86,"content":" MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                DuctJobMapping payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                log.info(\"Received payload for DuctMessageProcessor  : {}\", payload);\n                DuctCommonUtils.setContext(JsonUtil.readObject(CryptUtil.getSimpleCryptor().decrypt(payload.getEncryptedRequestInfo()), RequestInfo.class));\n                MDCContext.put(\"jobId\", payload.getJobId());\n                MDCContext.put(\"connectorType\", payload.getConnectorType().getValue());\n                InstrumentationUtil.pushJobToInstrumentation(payload, DuctConstants.CAAS_WORKER);\n                InstrumentationUtil.processJob(payload, DuctConstants.CAAS_WORKER);\n                DuctResponse ductResponse = ductService.fetchDataViaDH(payload);\n                log.info(\"DuctMessageProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n                InstrumentationUtil.completeJob(payload, DuctConstants.CAAS_WORKER);\n            } catch (Exception exception) {\n                log.error(\"Error while processing DuctMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9353250c-f0b9-4e6b-8dc9-e6aedaf8eab1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":151,"endLine":180,"content":", GainsightUtils.convertObjectToJson(payload), ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        LOGGER.info(\"Response of mda to {}, is {}\", uri, JsonUtil.toJsonString(response.getResponseBody()));\n        ResponseObj responseObj = response.getResponseBody();\n        if (responseObj.isResult()) {\n          return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), clazz);\n        } else if (responseObj.getErrorDesc() != null) {\n          throw new SystemException(responseObj.getErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n        }\n      }\n      return null;\n    } catch (Exception e) {\n      if (response != null && response.getReasonPhrase() != null) {\n        throw new SystemException(response.getReasonPhrase(), e, CoreErrorCode.SYSTEM_ERROR, 500);\n      } else {\n        throw new SystemException(\"Error occured while invoking : \" + url, e, CoreErrorCode.SYSTEM_ERROR, 500);\n      }\n    }\n  }\n\n  public static <T> T deleteGsAppV1(String uri, Map<String, String> queryParam, Class<T> clazz) {\n    String url = constructGsAppV1Url(uri, queryParam);\n    Map<String, String> headers = headers(Collections.emptyMap());\n    HttpResponseWrapper<ResponseObj> response = null;\n    try {\n      LOGGER.info(\"Invoking mda DELETE : {}\", url);\n      response = AdvancedHttpHelper.delete(url, headers, ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        ResponseObj responseObj = response.getResponseBody();\n        i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"92be7026-98c4-40bb-b5a2-5b4d8db63485","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":812,"endLine":830,"content":" DuctJobMapping ductJobMapping) {\n        bulkActionResponse.setSuccessCount(ductJobMapping.getSuccessRecords());\n        bulkActionResponse.setFailureCount(ductJobMapping.getFailedRecords());\n    }\n\n    private void populateExecutionStatus(BulkActionResponse bulkActionResponse, DuctJobMapping ductJobMapping) {\n        if (ductJobMapping.getDuctStatus() == null || ductJobMapping.getDuctStatus() == DuctStatus.INIT) {\n            bulkActionResponse.setStatus(ExecutionStatus.RECEIVED);\n        }\n        if (ductJobMapping.getDuctStatus() == DuctStatus.IN_PROGRESS || ductJobMapping.getDuctStatus() == DuctStatus.SUBMITTED_TO_CE ||\n                ductJobMapping.getDuctStatus() == DuctStatus.SUBMITTED_TO_DH) {\n            bulkActionResponse.setStatus(ExecutionStatus.PROCESSING);\n        } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() > 0 && ductJobMapping.getFailedRecords() == 0) {\n            bulkActionResponse.setStatus(ExecutionStatus.SUCCESS);\n        } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() > 0 && ductJobMapping.getFailedRecords() > 0) {\n            bulkActionResponse.setStatus(ExecutionStatus.PARTIAL_SUCCESS);\n        } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords() == 0) {\n            bulkActionResponse.setStatus(ExecutionStatus.SUCCESS);\n        } else if (ductJ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9ae7f29-8e7d-4dff-87fc-370b32553e2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":594,"endLine":624,"content":"          headers = csvReader.read();\n            successFileCSVListWriter.write(headers);\n            headers.add(\"Error Reason - * Error records might have partial record level data inserted/updated\");\n            errorFileCSVListWriter.write(headers);\n            List<String> rowAsTokens;\n            int lineNumber;\n            while ((rowAsTokens = csvReader.read()) != null) {\n                lineNumber = csvReader.getRowNumber();\n                if (outputMap.containsKey(String.valueOf(lineNumber))) {\n                    rowAsTokens.add(String.join(\"||\", outputMap.get(String.valueOf(lineNumber))));\n                    errorFileCSVListWriter.write(rowAsTokens);\n                } else {\n                    successFileCSVListWriter.write(rowAsTokens);\n                }\n            }\n            files.add(outputErrorFile);\n            files.add(outputSuccessFile);\n\n        } catch (Exception e) {\n            log.error(\"Error in populating error file from hubspot\", e);\n        }\n        return files;\n    }\n\n    private Map<String, List<String>> populatLineNumberAndErrorResponse(Map<String, Object> errorData) {\n        Map<String, List<String>> outputMap = new HashMap<>();\n        Map<String, Object> sourceDataMap;\n        List<String> existingValueList;\n        List<Map<String, Object>> outputErrorListMap = (List<Map<String, Object>>) errorData.get(\"results\");\n        for (Map<String, Object> errorMap : outputErrorListMap) {\n            sourceDataMap = (Map<String, Object>) e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16eff7bb-1b45-45d0-a71d-93f9f39cf624","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":72,"endLine":105,"content":"ludingDeleted(String connectionId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionId(connectionId);\n    query.addCriteria(Criteria.where(UCConstants.MONGO_TENANTID_FIELD_MAPPER).is(RequestContextProvider.getTenantId()));\n    return getMongoTemplate().findOne(query,PNPConnectionsInfo.class);\n  }\n  @Override\n  public PNPConnectionsInfo findByNameAndConnectionType(String connectionName, ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionName(connectionName);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_TYPE).is(connectorType));\n    return findOne(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> getAllConnectionForTenant(Query query) {\n    return find(query);\n  }\n\n  @Override\n  public PNPConnectionsInfo findConnectionByAccessKey(String accessKey){\n    Query query = new Query();\n    query.addCriteria(Criteria.where(\"hashedaccesskey\").is(GainsightUtils.encryptToCSV(accessKey)));\n    query.addCriteria(Criteria.where(\"deleted\").is(false));\n    return getMongoTemplate().findOne(query,this.clazz);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> getAllConnectionByConnectorType(ConnectorType connectorType){\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    return find(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findAllAuthorizedConnections(ConnectorType connectorType) {\n    PNPConnectionsInfoQuer","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d0819e1d-a99a-490f-ac33-c04fb3c2c5ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":870,"endLine":889,"content":"pe.GONG_IO, request, pnpConnectionsInfo, additionalState);\n        } else if (BIGQUERY.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.TENANT_ID, RequestContextProvider.getTenantId());\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.BIGQUERY, request, pnpConnectionsInfo, additionalState);\n        } else if (JIRA.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.TENANT_ID, RequestContextProvider.getTenantId());\n            additionalState.put(\"nativeEnabled\", true);\n            additionalState.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.JIRA, request, pnpConnectionsInfo, additionalState);\n        } else {\n            CaasConnectionService service = caasConnectionFactory.getService(pnpConnectionsInfo.getConnectionType());\n            authorizationUrl = service.getAuthorizationUrl(pnpConnectionsInfo);\n        }\n        ductEventService.publishConnectionEvent(pnpConnectionsInfo, \"AUTHORIZE\");\n        return authorizationUrl;\n    }\n\n\n    private PNPConnectionsInfo updateConnection(PNPConnectionInput pnpconnectionInputFromUI, List<BeanPropertyTracker> updatedPropertyList) throws Exception {\n        PNPConnectionsInfo pnpConnectionInfoFromUI = pnpconnectionInputFromUI.getPnpConnectionsInfo();","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66e987c8-f88d-4003-a337-a7586a34c826","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/transformer/ExternalToGsObjectDefinitionTransformer.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.utils.transformer;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n\n@Slf4j\npublic class ExternalToGsObjectDefinitionTransformer {\n\n    public static List<ObjectDefinition> transformExternalToObjectDefinition(List<Map<String, Object>> objectList, PNPConnectionsInfo pnpConnectionsInfo, CaasConnectorConfig connectorConfig) {\n        List<ObjectDefinition> objectDefinitions = new ArrayList<>();\n        List<String> unsupportedFetchObjects = connectorConfig.getUnsupportedObjects();\n        for (Map<String, Object> objectMap : objectList) {\n            ObjectDefinition objectDefinition = new ObjectDefinition();\n            String objectName = objectMap.get(DuctConstants.DescribeMetaConstants.OBJECT_NAME).toString();\n            if (unsupportedFetchObjects.contains(objectName))\n                continue;\n            objectDefinition.setObjectId(objectMap.get(DuctConstants.DescribeMetaConstants.OBJECT_ID).toString());\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6efc660d-d775-4129-af0c-00396faa7fbc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/config/dbqueue/QueueConfigBean.java","startLine":1,"endLine":17,"content":"package com.gainsight.duct.config.dbqueue;\n\n\n\nimport com.gainsight.queue.db.settings.DefaultDbQueueConfiguration;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Map;\n\n@Getter\n@Setter\npublic class QueueConfigBean {\n    private Map<String, DefaultDbQueueConfiguration> consumer;\n    private Map<String, DefaultDbQueueConfiguration> broker;\n    private Map<String, DefaultDbQueueConfiguration> tenantLimit;\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5dd57a62-7f93-48b5-bc4c-d32aee6aacbf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/SwaggerConfiguration.java","startLine":38,"endLine":81,"content":"_2)\n        .select()\n        .apis(RequestHandlerSelectors.any())\n        .paths(PathSelectors.any())\n        .build()\n        .securityContexts(Collections.singletonList(securityContext()))\n        .securitySchemes(securitySchemes())\n        .apiInfo(apiInfo());\n  }\n\n  private List<SecurityScheme> securitySchemes() {\n    ApiKey secret = new ApiKey(\"B2B\", \"secret\", \"header\");\n    ApiKey authToken = new ApiKey(\"AuthToken\", \"authToken\", \"header\");\n    return Arrays.asList(secret, authToken);\n  }\n\n  private SecurityContext securityContext() {\n    return SecurityContext.builder()\n        .forPaths(PathSelectors.any())\n        .securityReferences(defaultAuth())\n        .build();\n  }\n\n  private List<SecurityReference> defaultAuth() {\n    AuthorizationScope authorizationScope = new AuthorizationScope(\"global\", \"accessEverything\");\n    AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];\n    authorizationScopes[0] = authorizationScope;\n    return Arrays.asList(new SecurityReference(\"B2B\", authorizationScopes),\n        new SecurityReference(\"AuthToken\", authorizationScopes));\n  }\n\n  private ApiInfo apiInfo() {\n    log.info(\"Creating api info for swagger\");\n    return new ApiInfoBuilder()\n        .title(\"CAAS\")\n        .description(\"UI Api documentation\")\n        .version(\"v1.0\")\n        .license(\"GainSight\")\n        .build();\n  }\n\n  public static class SwaggerCondition implements Condition {\n    @Override\n    public boolean matches(ConditionContext conditionContext, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"46a7c1a6-82c2-49a5-bf37-f448908a4bfa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/Operators.java","startLine":38,"endLine":64,"content":"pSQLOperator;\n    }\n\n    private String gainsightOpertor;\n    private FilterOperator filterOperator;\n    private String sqlOperator;\n    private String bqSQLOperator;\n    private String sapSQLOperator;\n\n    public static FilterOperator getDatahighwayOperator(OperatorType operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatus.SC_BAD_REQUEST)).filterOperator;\n    }\n\n    public static String getExternaSystemOperator(OperatorType operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatus.SC_BAD_REQUEST)).gainsightOpertor;\n    }\n\n    public static String getExternaSystemOperator(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatus.SC_BAD_REQUEST)).gainsightOpertor;\n    }\n\n    public static String getSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22eee39c-1cdd-4e08-ab2e-b201f39cbc87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":99,"endLine":120,"content":"n mapping order {}\", actualColumnMappings.stream().map(ColumnMapping::getHeaderName).collect(Collectors.joining(\",\")));\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<ColumnMapping> transformedColumnMappings = new ArrayList<>();\n        Map<String, ColumnMapping> actualColumnMappingsMap = ductJobMapping.getColumnMappings().stream().collect(Collectors.toMap(ColumnMapping::getHeaderName, columnMapping -> columnMapping));\n        for (String header : headers) {\n            if (actualColumnMappingsMap.containsKey(header)) {\n                transformedColumnMappings.add(actualColumnMappingsMap.get(header));\n            }\n        }\n        log.info(\"Transformed Column mapping order {}\", transformedColumnMappings.stream().map(ColumnMapping::getHeaderName).collect(Collectors.joining(\",\")));\n        ductJobMapping.setColumnMappings(transformedColumnMappings);\n\n    }\n\n    private static List<String> getHeaders(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> headers;\n        try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);) {\n            headers = csvReader.read();\n            return headers;\n        } catch (Exception e) {\n            log.error(\"Error in getHeaders\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15d4f2e5-459a-4460-a5e9-1ceab88ffba9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":532,"endLine":546,"content":"      Map<String, String> masterLookupConfigMap = DynamicsGainsightUtils.fetchMapFromConfigServer();\n        for (String projection : projectionsWithLookups) {\n            String sourceLookupField = StringUtils.substringBefore(projection, PERIOD);\n            String lookupObject = StringUtils.substringAfter(projection, PERIOD);\n            String propertyValue = masterLookupConfigMap.get(targetObjectPluralName + \"@@\" + sourceLookupField);\n            if (Objects.nonNull(propertyValue)) {\n                lookupProjectionToNavigationProperty.put(projection, propertyValue);\n            } else if (OWNER_ID.equalsIgnoreCase(sourceLookupField) &&\n                    (SYSTEM_USER.equalsIgnoreCase(lookupObject) || TEAM.equalsIgnoreCase(lookupObject))) {\n                lookupProjectionToNavigationProperty.put(projection, OWNER_ID);\n            } else {\n                Optional<Relationship> relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(StringUtils.substringAfter(projection, PERIOD)) && relationship.getReferencingAttribute().equals(StringUtils.substringBefore(projection, PERIOD))).findFirst();\n                if (relationshipOptional.isPresent()) {\n                    log.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                    lookupProjectionToNavigationProperty.put(projection","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a54fab48-aadb-44ca-8686-73a0d79c07a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.platform.metadata.ComplexType;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.OPTIONS;\n\n@Service\npublic class PipedriveV2ToOMDConverterServiceImpl implements OMDConverterBaseService{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PipedriveV2ToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String KEY = \"key\";\n    private static final String ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"574c46d6-c601-4ffe-a886-6594f5546a67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":138,"endLine":159,"content":"on.get(PICKLIST_COLOR_CODE)))\n                    picklistOption.put(COLOR, option.get(PICKLIST_COLOR_CODE).asText());\n                picklistOptions.add(picklistOption);\n            }\n            fieldDefinition.put(OPTIONS, picklistOptions);\n        }\n    }\n\n    private static void populateValueIfPresent(JsonNode sourceMap, String sourceKey,\n                                               Map<String, Object> targetMap, String targetKey, Class<?> type) {\n        if (sourceMap.get(sourceKey) != null) {\n            if (type == Boolean.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asBoolean());\n            else if (type == Integer.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asInt());\n            else if (type == Double.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asDouble());\n            else\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asText());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7417251e-9941-44f4-ba2b-cbb5913a2736","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctOperatorType.java","startLine":68,"endLine":97,"content":"ublic String getAlias() {\n        return alias;\n    }\n\n    public DuctOperandType getOperandType() {\n        return ductOperandType;\n    }\n\n    public String replace(String sql, String with, boolean left) {\n        if (left) {\n            return sql.replace(\"$left\", with);\n        }\n        return sql.replace(\"$right\", with);\n    }\n\n    public String replace(String sql, String... withs) {\n        for (int x = 0; x < withs.length; x++) {\n            sql = sql.replace(\"$\" + x, withs[x]);\n        }\n        return sql;\n    }\n\n    public static DuctOperatorType forValue(String alias) {\n        if (alias == null) {\n            return null;\n        }\n        return MAP.get(alias.toLowerCase());\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8c242928-e1e3-4a15-841a-211ca56ae9ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctGSServiceUrlUtil.java","startLine":85,"endLine":101,"content":"String serviceUrl = StringUtils.EMPTY;\n        if (Objects.nonNull(gsService)) {\n            try {\n                serviceUrl = GSServiceURLFactory.getServiceURL(gsService);\n            } catch (Throwable ex) { //NOSONAR\n                // purposefully catching all errors here since we have our own fallback key value in config server\n                log.trace(\"Could not retrieve service url via dynamic mechanism. Falling back to env specific key. emsg: {}\", ex.getMessage());\n            }\n        }\n\n        if (ObjectUtils.isEmpty(serviceUrl)) {\n            return DeploymentProperties.getDeploymentProperties().getValue(fallbackKey);\n        } else {\n            return serviceUrl;\n        }\n    }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"894368f5-81e8-48a9-96a1-ce09f83ce9c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":287,"endLine":317,"content":"taProperties.put(DIGITS, field.getDigits());\n            metaProperties.put(DISPLAY_LOCATION_IN_DECIMAL, field.getDisplayLocationInDecimal());\n            metaProperties.put(HIGH_SCALE_NUMBER, field.getHighScaleNumber());\n            metaProperties.put(ENCRYPTED, field.getEncrypted());\n            metaProperties.put(REFERENCE_TO, field.getReferenceTo());\n            metaProperties.put(RELATIONSHIP_NAME, field.getRelationshipName());\n            metaProperties.put(EXTRA_TYPE_INFO, field.getExtraTypeInfo());\n            metaProperties.put(COMPOUND_FIELD_NAME, field.getCompoundFieldName());\n            meta.put(PROPERTIES, metaProperties);\n\n\n            fieldDefinition.put(META, meta);\n            fields.add(fieldDefinition);\n        }\n        objectDefinition.put(FIELDS, fields);\n        return objectDefinition;\n    }\n\n    private LookupDetails createLookupDetail(SObjectField field) {\n        LookupDetails lookupDetails = new LookupDetails(field.getRelationshipName(), ID, field.getRelationshipName());\n        lookupDetails.setFieldLabel(getLookupFieldLabel(field.getReferenceTo()));\n        List<LookupObjectDetails> lookupObjects = new ArrayList<>();\n        for (String reference : field.getReferenceTo()) {\n            lookupObjects.add(new LookupObjectDetails(reference, reference));\n        }\n        lookupDetails.setLookupObjects(lookupObjects);\n        return lookupDetails;\n    }\n\n    private static String getLookupFieldLabel(List<String> references) {\n        String fieldLab","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e2033cc-b959-4e24-b65c-5fe27b335657","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ZoomValidationDataSourceService.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ZoomValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.ZOOM;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionM","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b1bf2438-36b5-4bbb-8580-faa06a88e991","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/PeopleLoadServiceImpl.java","startLine":62,"endLine":77,"content":"  //check response\n            HttpResponseWrapper<ResponseObj> response = AdvancedHttpHelper.put(url, headers, JsonUtil.toJsonString(inputPayload), ResponseObj.class);\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to people service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce){\n            throw ce;\n        } catch (Exception e){\n            log.error(\"Exception occurred while writing data to People model : {}\", e.getMessage(), e);\n            throw new CaasException(\"Failed to loading into People model\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96e31aa9-137d-4068-bc21-36828b4714c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":268,"endLine":294,"content":", StringUtils.EMPTY);\n                }\n            }\n            updateFieldValue(obj, field.getJsonPath(), fieldValue);\n        }\n    }\n\n    private void convertDateTime(DataExtractionRequest dataExtractionRequest, JSONObject obj) throws Exception {\n        if (dataExtractionRequest.isDateTimeConversionRequired()) {\n            for (FieldInfo field : dataExtractionRequest.getFields()) {\n                if (field.getDataType().getDataType().equals(DataType.DATETIME.getDataType()) && field.getDateTimeProperties() != null && field.getDateTimeProperties().getFormat() != null\n                        && StringUtils.isNotEmpty(getFieldValue(obj, field.getJsonPath()))) {\n                    String dateTimeValue = getFieldValue(obj, field.getJsonPath());\n                    try {\n                        updateFieldValue(obj, field.getJsonPath(), new DateTime(dateTimeValue).withZone(DateTimeZone.UTC).toString(field.getDateTimeProperties().getFormat()));\n                    } catch (Exception e) {\n                        throw new Exception(\"Error occurred while trying to convert date value\", e);\n                    }\n                }\n            }\n        }\n        if(!dataExtractionRequest.isDuct()) {\n            for (FieldInfo field : dataExtractionRequest.getFields()) {\n                if (field.getDataType().getDataType().equals(DataType.TIMESTAMP.getDataType())) {\n                    try {\n                        String timestamp = getFieldValue(obj, field.getJsonPath());\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"719b2673-10ae-4562-9d3b-f7d88bcac712","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1586,"endLine":1612,"content":"mDB.getProperties()).put(requiredFieldsInfo.getFieldName(),\n                                SecretData.fromValue((String) ((Map) pnpConnectionInfo.getProperties()).get(requiredFieldsInfo.getFieldName())));\n                    }\n                } else if (!requiredFieldsInfo.getProperties().containsKey(\"isSecretKey\") || !(Boolean) requiredFieldsInfo.getProperties().get(\"isSecretKey\")) {\n                    ((Map) pnpConnectionsInfoFromDB.getProperties()).put(requiredFieldsInfo.getFieldName(),\n                            ((Map) pnpConnectionInfo.getProperties()).get(requiredFieldsInfo.getFieldName()));\n                }\n            });\n        } else {\n            pnpConnectionsInfoFromDB.setAuthorizationType(pnpConnectionInfo.getAuthorizationType());\n            pnpConnectionsInfoFromDB.getProperties().putAll(pnpConnectionInfo.getProperties());\n        }\n    }\n\n    private void updateAccessKeyInfoForRequest(String newAccessKey, PNPConnectionsInfo pnpConnectionsInfoFromDb) {\n\n        if (null == pnpConnectionsInfoFromDb.getAccessKeyHashed()) {\n            return;\n        }\n        String oldAccessKey = GainsightUtils.decryptFromCSV(pnpConnectionsInfoFromDb.getAccessKeyHashed());\n        if (newAccessKey.equals(oldAccessKey)) {\n            return;\n        }\n        AccessKeyQuery accessKeyQuery = new AccessKeyQuery();\n        accessKeyQuery.accessKey(GainsightUtils.encryptToCSV(oldAccessKey));\n        accessKeyQuery.tenantId(pnpConnectionsInfoFromDb.getTenantId());\n        acces","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf73bdc4-211b-49b3-b5ec-6be33d799c2a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":118,"endLine":145,"content":"aType).getValue());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            if (isNormalizableInternalType) {\n                meta.put(EXTERNALLY_FILTERABLE, false);\n            } else {\n                meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            }\n        } else {\n            LOGGER.warn(\"Type not supported, hence skipping {}\", originalDataType);\n            return null;\n        }\n\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n            metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n            metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n        if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n            meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n\n        populateValueIfPresent(field, MANDATORY, meta, REQUIRED, Boolean.class);\n        populateValueIfPresent(field, READ_ONLY_IN_SRC, meta, READ_ONLY, Boolean.class);\n\n        meta.put(PROPERTIES, metaProperties);\n        fieldDefinition.put(META, meta);\n\n        if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n            DuctCollectionUtil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57115ed1-a0dd-4513-b2f1-e2c0ea8039c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":78,"endLine":100,"content":"       checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fieldType = (String) gsFieldDefinition.getMeta().getOriginalDataType().toUpperCase();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        Li","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e80ca0e-683c-48e8-a13d-41389b88ca82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctJobMappingDaoImpl.java","startLine":1,"endLine":42,"content":"package com.gainsight.duct.dao;\n\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class DuctJobMappingDaoImpl  extends AbstractEntityDaoImpl<DuctJobMapping> implements DuctJobMappingDao {\n\n    protected DuctJobMappingDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, DuctJobMapping.class, UCConstants.MONGO_TENANTID_FIELD_MAPPER);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(DuctJobMapping ductJobMapping, String s) {\n        ductJobMapping.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(DuctJobMapping ductJobMapping, String s) {\n        ductJobMapping.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public DuctJobMapping findByJobId(String jobId) {\n        DuctJobMappingQuery query = new DuctJobMappingQuery().jobId(jobId);\n        return findOne(query);\n    }\n\n    public class DuctJo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c6f01b8-8ba6-4e83-adb3-823d48bd9860","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":202,"endLine":221,"content":"ng object's super class recursively\n        while (MapUtils.isNotEmpty(objectMap)) {\n            if (objectMap.containsKey(SUPER_CLASS) && Objects.nonNull(objectMap.get(SUPER_CLASS))\n                    && StringUtils.isNotEmpty(objectMap.get(SUPER_CLASS).toString())) {\n                Map<String, String> superClassMap = (Map<String, String>) objectMap.get(SUPER_CLASS);\n                if (MapUtils.isNotEmpty(superClassMap) && StringUtils.isNotEmpty(superClassMap.getOrDefault(LINK, StringUtils.EMPTY))) {\n                    String superClassObject = fetchSuperClaas(currentObject, pnpConnectionsInfo, superClassMap);\n                    assertTrue(StringUtils.isNotEmpty(superClassObject), CaasValidationCode.INTERNAL_ERROR);\n                    if (superClassObjects.contains(superClassObject)) {\n                        log.info(\"found recursive superclass information for object: {} hence skipping here\", currentObject);\n                        break;\n                    }\n                    superClassObjects.add(superClassObject);\n                    currentObject = superClassObject;\n                    objectMap = objectsMap.stream().filter(object -> object.get(OBJECT_NAME).equals(superClassObject))\n                            .findFirst().orElseThrow(() -> new CaasException(new GsExternalSystemErrorMapping(AdapterErrorMessages.FAILED_WHILE_FETCHING_OBJECT.getTranslatedMessage())));\n                } else {\n                    objectMap = null;\n                }\n            } e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"485ee2ce-f601-479a-b66d-8fd2227ef532","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/DuctWebConfiguration.java","startLine":121,"endLine":142,"content":"ionService);\n    }\n\n    @Bean\n    public DuctDatabaseTemplateService ductDatabaseTemplateService(){\n        return new DuctDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public CaasRedisTemplate gsIntegrationsRedisTemplate(){\n        return new CaasRedisTemplateImpl();\n    }\n\n\n    @Bean\n    public DuctClientConfig ductClientConfig(){\n        String baseUrl = DeploymentProperties.getDeploymentProperties().getValue(\"gs.caas.api.url\");\n        return new DuctClientConfig(baseUrl, DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\"));\n    }\n\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"997baff9-cef2-4af0-9b1c-8afd59f55d41","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":92,"endLine":108,"content":" -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if (isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        } else if (fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type))) {\n            if (isSync) {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPER","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"493ef2b1-1ace-4e11-9294-fbc735cfb900","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":227,"endLine":261,"content":"Info(userAuthInfo);\n            requestInfo.setTenantAuthInfo(tenantInfo);\n            RequestContextProvider.setRequestInfo(requestInfo);\n            GainsightContext.setMDC();\n        }\n    }\n\n    protected JsonNode getTaskNodeForTaskId(ResponseObj responseObj, String taskId) {\n        AtomicReference<JsonNode> result = new AtomicReference<>();\n        try {\n            Iterator<JsonNode> jsonNodeIterator = MAPPER.readTree(MAPPER.writeValueAsString(responseObj.getData())).get(\"taskOutputs\").iterator();\n            while (jsonNodeIterator.hasNext()) {\n                JsonNode interimNode = jsonNodeIterator.next();\n                if (interimNode.get(TASK_ID).asText().equalsIgnoreCase(taskId)) {\n                    result.set(interimNode);\n                }\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n        return result.get();\n    }\n\n\n    private void updateDuctJobMapping(String jobId, String url, DuctStatus ductStatus) {\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(jobId);\n        ductJobMapping.setDuctStatus(ductStatus);\n        ductJobMapping.setOutputS3Path(url);\n        ductJobMappingDao.update(ductJobMapping);\n    }\n\n    private void updateDuctJobMapping(String jobId, String s3FilePath, DuctStatus ductStatus, long recordCount) {\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(jobId);\n        ductJo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ad5c91f-f421-4162-8f4e-fa8e20a70ca7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":622,"endLine":646,"content":"bject>> outputErrorListMap = (List<Map<String, Object>>) errorData.get(\"results\");\n        for (Map<String, Object> errorMap : outputErrorListMap) {\n            sourceDataMap = (Map<String, Object>) errorMap.get(\"sourceData\");\n\n            String value = \" knownColumnNumber :\" + errorMap.get(\"knownColumnNumber\")\n                    + \" Error :\" + errorMap.get(\"errorType\")\n                    + \" Additional Info : \" + errorMap.get(\"extraContext\")\n                    + \" value :\" + errorMap.get(\"invalidValue\");\n            if (!outputMap.containsKey(sourceDataMap.get(\"lineNumber\").toString())) {\n                outputMap.put(sourceDataMap.get(\"lineNumber\").toString(), Lists.newArrayList(value));\n            } else {\n                existingValueList = outputMap.get(sourceDataMap.get(\"lineNumber\").toString());\n                existingValueList.add(value);\n                outputMap.put(sourceDataMap.get(\"lineNumber\").toString(), existingValueList);\n            }\n        }\n        return outputMap;\n    }\n\n    private void uploadAndErrorFile(DuctJobMapping ductJobMapping, DuctResponse ductResponse, File errorFile, File successFile) {\n        try {\n            //for error file\n            log.info(\"Trying to upload error file {}\", errorFile.getName());\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + errorFile.getName(), errorFile);\n            log.info(\"Upload completed for e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2dc77f6-909f-493a-96ae-4a42cdadf94d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":144,"endLine":178,"content":"                return \"Subscription\";\n            case \"invoices\":\n                return \"Invoice\";\n            case \"payments\":\n                return \"Payment\";\n            case \"products\":\n                return \"Product\";\n\n            default:\n                return resourceName;\n        }\n    }\n\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        if(paginationDetails == null)\n            return null;\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n    }\n\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"size\") != null) {\n            return Integer.parseInt(externalSystemResponse.get(\"size\").toString());\n        }\n        return 0;\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e4a2cb5a-6e4f-464e-94e0-4587cee312a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/GsDuctWebApp.java","startLine":1,"endLine":25,"content":"package com.gainsight.duct;\n\nimport com.gainsight.config.DuctWebConfiguration;\nimport com.gainsight.config.SwaggerConfiguration;\nimport com.gainsight.config.UCCommonAppConfiguration;\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.enums.DuctAppType;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.instrumentation.gsintegration.config.GSInstrumentationConfigProvider;\nimport com.gainsight.instrumentation.job.tracer.JobTracer;\nimport com.gainsight.queue.db.spring.configuration.producer.DbQueueProducerSpringConfiguration;\nimport com.gainsight.queue.db.spring.configuration.worker.DbQueueSpringConfiguration;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\nimport org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;\nimport org.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"382a8456-31d8-4c21-b04f-0e7b9e2bfdf3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/IpaasValidationDataSourceService.java","startLine":30,"endLine":45,"content":"ype.ZOOM &&\n                connectorType != ConnectorType.MSTEAMS ;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8eb7ea48-16db-454d-9688-9d1046d3be5d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/CaasMessageProperties.java","startLine":45,"endLine":72,"content":"getValue(String key) {\n    return properties.getProperty(key);\n  }\n\n  private static void loadMessageProperties() {\n    InputStream inputStream = null;\n    try {\n      String filePath = ConfigFileUtil.existingFilePath(MESSAGES_EN_PROPERTIES);\n      File file = new File(filePath);\n      inputStream = new FileInputStream(file);\n      messageProperties = new Properties();\n      messageProperties.load(inputStream);\n    } catch (IOException e) {\n      LOGGER.error(e.getMessage(), e);\n      //Eating up the exception, as we want to process with others when properties is not loaded, will try again to load.\n    } finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n  private static class PropertiesHolder {\n    private static final CaasMessageProperties INSTANCE =\n        new CaasMessageProperties(CaasMessageProperties.getProperties());\n\n    private PropertiesHolder() {\n    }\n  }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8618331a-f569-4ab5-a76f-fdc8e20dc331","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Order(700)\n@Service\npublic class SnowFlakeDataValidationSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.SNOWFLAKE;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c05aa6fd-82ba-4999-9ead-5b5b341a449a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/AbstractDuctClient.java","startLine":1,"endLine":24,"content":"package com.gainsight.duct.clients;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.utils.TenantUtility;\nimport com.gainsight.service.CachedTenantService;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\n\npublic abstract class AbstractDuctClient {\n\n  protected void setTenantContext(String tenantId) {\n    Tenant tenant = SpringServiceLocatorFactory.getService(CachedTenantService.class).findById(tenantId);\n    if(tenant == null) {\n      throw new SystemException(String.format(\"Invalid tenant id %s\", tenantId), CoreErrorCode.INVALID_TENANT, 400);\n    }\n\n    RequestInfo requestInfo = TenantUtility.getRequestInfoForTenant(tenantId);\n    RequestContextProvider.setRequestInfo(requestInfo);\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2db90c72-d631-446c-8f2e-e3919b5fa6c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/ExternalDataBaseWBMessageInfo.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ExternalDataBaseWBMessageInfo implements MessageInfo<DuctJobMapping> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.EXTERNAL_DB_SYS_WB_TASK;\n    private static final MessagePayloadTransformer<DuctJobMapping> transformer = new DefaultMessagePayloadTransformer<>(DuctJobMapping.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<DuctJobMapping> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6459874f-3c4b-4753-ba27-7c2f98788fb1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.enhance.metadata;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.metadata.engine.service.MetadataCacheDao;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.duct.DuctService;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.duct.beans.EnhancedGSFieldDefinition;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.api.client.util.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.reflect.TypeToken;\nimport com.google.gson.Gson;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@Se","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f435b515-093b-4bc2-b155-649471e8acc9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/AhaDataSourceService.java","startLine":79,"endLine":106,"content":"Name() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.aha.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.aha.extract.version\", \"v2\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.aha.default.timeout\",\"240\");\n    }\n   @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping){\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16de48fc-4280-40f9-9d0d-2bfd883c558c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":75,"endLine":100,"content":"onal.get();\n                        if ((null != gsFieldDefinition.getMeta())\n                                && MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(gsFieldDefinition.getMeta().getOriginalDataType().toUpperCase())) {\n                            lookupFields.add(field);\n                        }\n                    } else {\n                        notAvailableFields.add(field);\n                    }\n                } else {\n                    notAvailableFields.add(field);\n                }\n            }\n        }\n\n        if (ObjectUtils.allNotNull(ductRequestDTO.getCriteria())) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                fieldDefinitionOptional = objectDefinition.getFields().stream()\n                        .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(filterField)).findFirst();\n                if (!fieldDefinitionOptional.isPresent()) {\n                    String[] sourceFieldNameList = filterField.split(\"\\\\.\");\n                    if (sourceFieldNameList.length == 2) {\n                        fieldDefinitionOptional = objectDefinition.getFields().stream()\n                                .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(sourceFieldNameList[0])).findFirst();\n                        if (!fieldDefinitionOptional.isPrese","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da55add4-9ce0-4848-965e-8119827a4464","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":25,"endLine":62,"content":"s.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.joda.time.DateTime;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.stubbing.Answer;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n//@TestInstance(TestInstance.Lifecycle.PER_CLASS)\nclass DuctJobMappingServiceImplTest {\n\n    private static final String FILTERED_DATA_FIELD = \"FilteredDataField\";\n    public static final String JOB_ID = \"jobId\";\n    public static final String TENANT_ID = \"TenantId\";\n    public static final String TARGET_SYSTEM_URL = \"TargetSystemURL\";\n    public static final String JOB_NAME = \"JobName\";\n    public static final String FILE_NAME = \"FileName\";\n    public static final String NEXT_PAGE_TOKEN = \"NextPageToken\";\n    public static final String SUCCESS_FILE_PATH = \"SuccessFilePath\";\n    public static final String OUTPUT_FILE_LOCATION = \"OutputFileLocation\";\n    private static String RESOURCE_NAME = \"ResourceName\";\n    private static final String CONNECTION_ID = \"ConnectionId\";\n    @Mock\n    DuctJobMap","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ee27000-8c8f-4bef-a30e-a94265a9c0e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/AhaCaasMetadataServiceImpl.java","startLine":62,"endLine":79,"content":"tchProcessor.getEntityDescription(pnpConnectionsInfo.getConnectionId(), objectName);\n        GainsightAhaEntityDescription gainsightAhaEntityDescription = (GainsightAhaEntityDescription) gsIntegrationResponse.getResult();\n        Map metadata = constructAhaObjectDefinition(gainsightAhaEntityDescription.getGainsightAhaFieldDescriptions(), objectName, pnpConnectionsInfo);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n    }\n\n    private Map constructAhaObjectDefinition(List<GainsightAhaFieldDescription> gainsightAhaFieldDescriptions, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectLabel);\n        objectDefinition.put(FIELDS, gainsightAhaFieldDescriptions);\n        return objectDefinition;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"246ac27b-ad20-4d2d-bf2c-be3d065961a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1307,"endLine":1331,"content":"ion.GENERATE_OOB_JOBS, true);\n        if (pnpConnectionsInfo.getConnectionType().equals(ConnectorType.HUBSPOT)\n                && null != pnpConnectionsInfo.getProperties()\n                && pnpConnectionsInfo.getProperties().containsKey(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY)) {\n            Set<String> hubspotScopes = new HashSet<>();\n            Object scopes = pnpConnectionsInfo.getProperties().get(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY);\n            if (scopes instanceof List)\n                hubspotScopes.addAll((List<String>) scopes);\n            else\n                log.error(\"Incorrect format passed for Authorization scopes\");\n            pnpConnectionsInfo.getProperties().put(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY, hubspotScopes);\n        }\n        return pnpConnectionsInfo;\n    }\n\n    private void isCrmConnected(ConnectorType connectorType) throws CaasException {\n        List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.getAllConnectionByConnectorType(connectorType);\n        if (!GainsightCollectionUtils.nullSafeList(pnpConnectionsInfoList).isEmpty()) {\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.MULTIPLE_CONNECTION_NOT_ALLOWED.getUserText()));\n        }\n    }\n\n    private PNPConnectionsInfo processCustomConnectionDetails(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n        String authTypeStr =","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dce1cd7-f83d-4c5a-bae7-b465c58e3ef3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":88,"endLine":123,"content":"   @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    @Autowired\n    CaasMetadataFactory caasMetadataFactory;\n    @Autowired\n    DuctJobMappingService ductJobMappingService;\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    OAuthClientService oAuthClientService;\n\n\n\n\n    private static final String PNP_ACCESS_KEY = DeploymentProperties.getDeploymentProperties().getValue(\"s3.access.key\");\n    private static final String PNP_SECRET_KEY = DeploymentProperties.getDeploymentProperties().getValue(\"s3.access.secret\");\n    public static final String PNP_BUCKET_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"s3.pnp.bucket.name\");\n    private static final String MEETINGS_OBJECT_NAME = \"meetings\";\n    private static final String PARTICIPANTS_OBJECT_NAME = \"participants\";\n    private static final String RECORDINGS_OBJECT_NAME = \"recordings\";\n    private static final String RECORDING_FILES_KEYWORD = \"recording_files\";\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n    private static AmazonS3 amazonS3;\n\n    private static final String AWS_REGION_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"aws.region.name\", \"us-east-1\");\n\n    static {\n        amazonS3 = AmazonS3ClientBuilder.standard()\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad8e63cf-7772-41b5-b177-e89cb142ece3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/EcosystemsMetadataServiceImpl.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class EcosystemsMetadataServiceImpl implements EcosystemsMetadataService {\n\n  @Autowired\n  private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n  @Override\n  public List<Map<String, Object>> listAllObjects(PNPConnectionsInfo pnpConnectionsInfo) {\n    List<CaasObjectAttributesConfig> objectAttributesConfigs = caasObjectAttributesConfigDAO.listObjectConfigAttributes(pnpConnectionsInfo.getConnectionType());\n    List<Map<String, Object>> objectList = new ArrayList<>();\n    objectAttributesConfigs.forEach(config -> {\n      Map<String, Object> object = new HashMap<>();\n      object.put(\"objectName\", config.getObjectName());\n      object.put(\"label\", config.getObjectName());\n      object.put(\"objectId\", config.getObjectName());\n      objectList.add(object);\n    });\n    return objectList;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ffda8ae6-1d7e-4677-a8a1-3ba545804fd3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GsObjectsLoadServiceImpl.java","startLine":78,"endLine":87,"content":"tch (CaasException ce){\n            throw ce;\n        } catch (Exception e){\n            log.error(\"Exception occurred while writing data to Gsobjects : {}\", e);\n            throw new CaasException(\"Failed to loading into Gsobjects model\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87d7754d-fc90-45f8-a3b6-871a1068bad9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":169,"endLine":199,"content":"ogicalNameToTargetObject.containsKey(mappedSourceColumns[0])) {\n          missingColumns.add(entry.getValue());\n        }\n      } else { //lookup, length=2\n        if (!sourceColumnLogicalNameToTargetObject.containsKey(mappedSourceColumns[0])) {\n          missingColumns.add(StringUtils.split(entry.getValue(), \"\\\\[.*\\\\]\")[0].trim());\n        } else {\n          MSDynamicsObject lookupObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().logicalName(sourceColumnLogicalNameToTargetObject.get(mappedSourceColumns[0])), true, false);\n          boolean present = lookupObject.getColumns().stream().map(Column::getLogicalName).anyMatch(col -> col.equals(mappedSourceColumns[1]));\n          if (!present) {\n            missingColumns.add(entry.getValue());\n          }\n        }\n      }\n    }\n    return missingColumns;\n  }*/\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.DYNAMICS;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping request, int maxPageSize) throws CaasException {\n        log.info(\"Creating job in dynamics jobId {}\", request.getJobId());\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(request.getConnectionId());\n        String jobId = request.getJobId();\n\n        CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.DYNAMICS, pnpConnectionsInfo.isIpaasConnection());\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"948fda30-1280-42e9-9e68-4da2f36e180f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":189,"endLine":210,"content":"etConnectorConfig(ConnectorType.SFDC);\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectLabel);\n        objectDefinition.put(EXPRESSION_FOR_REQUIRED_FIELDS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_REQUIRED_FIELDS));\n        objectDefinition.put(EXPRESSION_FOR_UPSERT_KEYS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_UPSERT_KEYS));\n\n        List fields = new ArrayList();\n        Map fieldDefinition;\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        for (SObjectField field : sfdcObjectDetails.getFields()) {\n            fieldDefinition = new HashMap();\n            Map<String, Object> meta = new HashMap<>();\n            Map<String, Object> metaProperties = new HashMap<>();\n            fieldDefinition.put(FIELD_NAME, field.getName());\n            fieldDefinition.put(DB_NAME, field.getName());\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a4a27499-7455-472b-893f-69ae72482d1f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":62,"endLine":86,"content":"        OBJECT_MAPPER = new ObjectMapper() // needed for LocalDateTime serialization\n                    .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS, true)\n                    .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n                    .configure(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS, false)\n                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n                    .setSerializationInclusion(JsonInclude.Include.NON_NULL);\n\n    }\n\n\n    @Override\n    public List<Map<String, Object>> listAllObjects(PNPConnectionsInfo pnpConnectionsInfo) {\n        GainsightSnowflakeChannelFactory snowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n        GainsightSnowflakeChannelService gainsightSnowflakeChannelService = snowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n        List<Map<String, Object>> objectList = nullSafeList(gainsightSnowflakeChannelService.listAllObjects());\n        return objectList\n                .parallelStream()\n                .map(this::constructObjectMap)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public List<Map> getObjectAttributes(PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws CaasException {\n        GainsightSnowflakeChannelFactory snowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n        GainsightSnowflakeChannelService gainsightSnowflakeChannelService = snowflakeChannel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02bee02c-4409-46a7-9fca-299c38fa5d07","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDaoUtils.java","startLine":67,"endLine":101,"content":"e records.\n   * @return Update query.\n   */\n  public static String updateQuery(String tableName, Map<String, Object> valueMap, Map<String, Object> criteria) {\n    StringJoiner set = new StringJoiner(\",\");\n    for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n      set.add(entry.getKey() + \" = :\" + entry.getKey());\n    }\n    String query = String.format(UPDATE_QUERY, tableName, set.toString(), andCriteria(criteria));\n    log.debug(\"Update query generated table : {}, query : {}\", tableName, query);\n    return query;\n  }\n\n  /**\n   * @param criteria column name value map\n   * @return named criteria.\n   */\n  public static String andCriteria(Map<String, Object> criteria) {\n    StringJoiner c = new StringJoiner(\" AND \");\n    for (Map.Entry<String, Object> entry : criteria.entrySet()) {\n      c.add(entry.getKey() + \" = :\" + entry.getKey());\n    }\n    return c.toString();\n  }\n\n  /**\n   * @param pageable             pageObject with sort, offset and limit\n   * @param tableName            Table name.\n   * @param allowedSortinColumns set of columns that are allowed for sorting\n   * @param query                select query without order by, offset , limit clause\n   * @return Select query with ORDER BY , OFFSET AND LIMIT concated at the end of the query.\n   */\n  public static String getSelectQueryWithPageable(String query, String tableName, Pageable pageable, Set<String> allowedSortinColumns) {\n    StringJoiner orderByClause = new StringJoiner(\",\");\n    String orderByClauseResul","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84407086-48cf-4789-8ffc-08a0cc7a5a3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":32,"endLine":67,"content":"4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport utils.Constants;\nimport utils.HttpClient;\nimport utils.ResponseObj;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\nimport static org.apache.http.HttpStatus.SC_INTERNAL_SERVER_ERROR;\n\n/**\n * user : Vipin Sharma\n * date : 16/10/19\n **/\n\n@Service\npublic class ConnectorsDataHighwayInteractionServiceImpl implements ConnectorsDataHighwayInteractionService {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(ConnectorsDataHighwayInteractionServiceImpl.class);\n  private static final String SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"uc.dp.system.shared.secret\");\n  private static final String API_GATEWAY_URL_BASE = DeploymentProperties.getDeploymentProperties().getValue(\"bionic.rules.dp.system.api.gateway.url.base\");\n  private static final String CALL_BACK_URL = \"%s/%s/api\";\n//    private static final String DATAHIGHWAY_JOBS_LISTING_URL = \"/listJobs?limit=1&mdaRequestId=%s&externalId=%s&orderDirection=asc\";\n\n  private static final int TIMEOUT = 60000;\n  private static final int RETRY_COUNT_WITH_BACKOFF = 3;\n\n\n  @Override\n  public ConnectorsDataHighwayResponseHandler<ResponseObj> submitJob(String payload, Map<String, Object> params, String envName, String ucId) {\n\n    String submitJobURL = String.format(\"%s%s\", API_GATEWAY_URL_BASE, \"/\");\n\n    String configSourceUrl = String.format(CALL_BACK_URL, UCCommonUtility.getApiGWUrl(), ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a795f39-5c46-4c32-b5c0-c021459f959e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":186,"endLine":212,"content":" new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n    public static void deleteCEInstance(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) +\n                String.format(\"/v1.0/connector/ipaas/connection/ce/%s\", pnpConnectionsInfo.getConnectionId());\n        Map<String, String> headers = getHeaders();\n        HttpResponse response = null;\n        try {\n            LOGGER.info(\"Invoking update connection : {}\", url);\n            // Intentionally set the timeout to 500ms so that we don't wait for the ce instance to get deleted.\n            // Anyways we are removing the properties from ipaasProperties of connection\n            RequestConfig config = RequestConfig.custom()\n                    .setConnectTimeout(500)\n                    .setConnectionRequestTimeout(500)\n                    .setSocketTimeout(500).build();\n            CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n            HttpDelete httpDelete = new HttpDelete();\n            httpDelete.setURI(new URIBuilder(url).build());\n            httpDelete.setConfig(config);\n            for (Map.Entry<String, String> header : headers.entrySet()) {\n                httpDelete.setHeader(header.getKey(), header.getValue());\n            }\n            httpClient.execute(httpDelete);\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5035aa2-33d3-469f-8421-6eec76c2308e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":359,"endLine":389,"content":"ect>> flattenedMap = new ArrayList<>();\n      for (Map<String, Object> dataMap : dataToBeProcessed) {\n        flattenedMap.add(JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(dataMap)));\n      }\n\n      Set<String> picklistFields = picklistMap.keySet();\n      nullSafeList(flattenedMap)\n          .stream()\n          .filter(Objects::nonNull)\n          .forEach(datum -> {\n            for (String picklistField : picklistFields) {\n              if (datum.containsKey(picklistField)) {\n                String picklistValue = DuctUtils.valueOf(datum.get(picklistField));\n                List<PicklistOption> picklistOptions = picklistMap.get(picklistField);\n                Optional<PicklistOption> picklistOption = picklistOptions.stream().filter(option -> option.getPicklistValue().equals(picklistValue)).findFirst();\n                if (picklistOption.isPresent()) {\n                  datum.put(picklistField, picklistOption.get().getPicklistLabel());\n                }\n              }\n            }\n\n          });\n\n\n      String unflatten = JsonUnflattener.unflatten(flattenedMap.toString());\n      JsonNode unflattenNode = OBJECT_MAPPER.readValue(unflatten, JsonNode.class);\n      return OBJECT_MAPPER.convertValue(unflattenNode, new TypeReference<List<Map<String, Object>>>() {\n      });\n    } catch (Exception e) {\n      log.error(\"Error while post processing the data\", e);\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<M","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d0cdc311-6eb1-49d7-8b6e-404cc71446ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":77,"endLine":100,"content":", Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).put(PASSWORD, encryptedPassword);\n      pnpConnectionsInfo.setIpaasConnection(false);\n      gainsightSAPDatasphereChannelService.authenticate();\n      pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n      return pnpConnectionsInfo;\n    } catch (Exception ex) {\n      log.error(\"[SAP HANA] Connection creation failed: \", ex);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n\n  }\n\n  private void populateSAPConnectionDetails(PNPConnectionsInfo pnpConnectionsInfo) {\n    Map<String, Object> ipaasPropertiesFromDB = getIpaasPropertiesFromDB(pnpConnectionsInfo);\n    SAPDatasphereConnectionDetail sapDatasphereConnectionDetail = new SAPDatasphereConnectionDetail();\n    sapDatasphereConnectionDetail.setType(\"SAPDATASPHERE\");\n    sapDatasphereConnectionDetail.setHost(getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionsInfo, HOST));\n    sapDatasphereConnectionDetail.setSchema(getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionsInfo, SCHEMA));\n    sapDatasphereConnectionDetail.setUser(getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionsInfo, USER));\n    sapDatasphereConnectionDetail.setPwd(ipaasPropertiesFromDB.get(PASSWORD));\n    pnpConnectionsInfo.setConnectionDetail(sapDatasphereConnectionDetail);\n  }\n\n  private vo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59dded86-85e7-4c28-9b69-6017349cd07d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":63,"endLine":83,"content":"onnection\", response = PNPConnectionsInfo.class)\n    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.CREATE)\n    public ResponseObj createConnection(\n            @ApiParam(value = \"Request Structure to retrieve \", required = true) @RequestBody final PNPConnectionInput pnpConnectionInput) {\n        try {\n            return new ResponseObj(true, ductConnectionService.createNewConnection(pnpConnectionInput));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Update an existing Connection\", response = PNPConnectionsInfo.class)\n    @PutMapping(value = \"/{connectionId}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.CREATE)\n    public ResponseObj updateConnection(@ApiParam(value = \"Job Id to retrieve status\", required = true) @PathVariable(\"connectionId\") final String connectionId,\n                                        @ApiParam(value = \"Request Structure to retrieve \", required = true) @RequestBody final PNPConnectionInpu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bb60f2a9-6db6-4999-89ab-1f0eeb7fe8df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/TimelineLoadServiceImpl.java","startLine":36,"endLine":63,"content":"odule.TIMELINE;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return \"Activity_Timeline\".equalsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException{\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating Payload for timeline object\");\n            ExternalActivityRequestDto externalActivityRequestDto = new ExternalActivityRequestDto();\n            externalActivityRequestDto.setRecords(ductRequestDTO.getRecords());\n            Map<String, ImportLookupLite> lookups = new HashMap<>();\n            if (Objects.nonNull(ductRequestDTO.getLookups())) {\n                for (Map.Entry<String, ImportLookupLite> entry : ductRequestDTO.getLookups().entrySet()) {\n                    ImportLookupLite importLookupLite = new ObjectMapper().readValue(JsonUtil.toJsonString(entry.getValue()), ImportLookupLite.class);\n                    lookups.put(entry.getKey(), importLookupLite);\n                }\n            }\n            externalActivityRequestDto.setLookups(lookups);\n            GSDTOTransformer.transformExternalActivityRequestDto(externalActivityRequestDto);\n            log.info(\"Payload for job {} is {}\", ductJobMapping.getJobId(), externalActivityRequestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeployme","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20e0fd87-2b11-4bb6-ad8a-2595de6d5a60","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":641,"endLine":677,"content":"ia.getDuctFilterCondition().getFilterCondition());\n    } else {\n      // set a hardcoded filter condition since this is a required parameter\n      defaultQueryMap.put(OPERATOR, DuctFilterCondition.OR.getFilterCondition());\n    }\n    defaultQueryMap.put(VALUE, Lists.newArrayList());\n    Map<String, Object> defaultResponseMap = Maps.newHashMap();\n    defaultResponseMap.put(QUERY, defaultQueryMap);\n    return defaultResponseMap;\n  }\n\n\n  private List<Criteria> flattenCriteria(Criteria criteria) {\n    List<Criteria> flattenedCriteria = new ArrayList<>();\n    // Recursively flatten the criteria\n    flatten(criteria, flattenedCriteria);\n    return flattenedCriteria;\n  }\n\n  private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n    if (criteria.getFilters() == null || criteria.getFilters().isEmpty()) {\n      // Base case: No nested filters, add current criteria to flattened list\n      flattenedCriteria.add(criteria);\n    } else {\n      // Recursively flatten nested filters\n      for (Criteria nestedCriteria : criteria.getFilters()) {\n        flatten(nestedCriteria, flattenedCriteria);\n      }\n    }\n  }\n\n  private Map<String, String> createFieldNodeMap(Criteria filter) {\n    Map<String, String> fieldInfoMap = Maps.newHashMap();\n    fieldInfoMap.put(FIELD, filter.getFieldName());\n    fieldInfoMap.put(OPERATOR, filter.getOperatorType().getNeo4jSymbol());\n    Object value = ((List<Object>) filter.getValues()).get(0);\n    fieldInfoMap.put(VALUE, DuctUtils.valueOf(valu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f617c637-b645-494c-b2a1-57b7529ffc9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectTenantConfigDAOImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.duct.beans.config.CaasObjectTenantConfig;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.UUID;\n\n\n@Repository\npublic class CaasObjectTenantConfigDAOImpl extends AbstractEntityDaoImpl<CaasObjectTenantConfig> implements CaasObjectTenantConfigDAO {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CaasObjectTenantConfigDAOImpl.class);\n\n    @Autowired\n    public CaasObjectTenantConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasObjectTenantConfig.class);\n    }\n    @Override\n    public CaasObjectTenantConfig getTenantSpecificObjectConfigs(ConnectorType connectorType, String tenantId) th","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bc358c25-7e74-4031-b097-5be379c8ae79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":134,"endLine":158,"content":"toMap(GSFieldDefinition::getFieldName, Function.identity()));\n        List<FieldInfo> fieldInfos = new ArrayList<>();\n        for (String field : ductJobMapping.getFields()) {\n            GSFieldDefinition fieldDefinition = gsFieldsByNamesMap.get(field);\n            FieldInfo fieldInfo = new FieldInfo();\n            fieldInfo.setJsonPath(fieldDefinition.getFieldName());\n            fieldInfo.setName(fieldDefinition.getFieldName());\n            fieldInfo.setDisplayName(fieldDefinition.getLabel());\n            fieldInfo.setDataType(DataType.getDataType(fieldDefinition.getDataType()));\n            if (fieldDefinition.getDataType().equals(\"DATETIME\")\n                    || fieldDefinition.getDataType().equals(\"DATE\")) {\n                Map<String, Object> fieldProps = fieldDefinition.getMeta().getProperties();\n                DateTimeProperties dateTimeProperties = new DateTimeProperties(\n                        (String) fieldProps.get(FORMAT),\n                        \"UTC\");\n                fieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            fieldInfos.add(fieldInfo);\n        }\n        String filter;\n        String query;\n        List<String> fieldJsonPathList = new ArrayList<>();\n        for (FieldInfo fieldInfo : fieldInfos) {\n            if (gsFieldsByNamesMap.containsKey(fieldInfo.getName()) && (null != gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta())\n                    && StringUtils.isNotEmpty(gsFieldsByNamesMap.get(fieldInfo.getName()).ge","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1b6b532-91e6-425a-8c7c-13ceffffa6db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":97,"endLine":118,"content":"ut(VALUE, option.asText());\n                        picklistOption.put(LABEL, option.asText());\n                       options.add(picklistOption);\n                    }\n                    retMap.put(OPTIONS,options);\n                }\n                Boolean filterable = field.get(\"filterable\") != null ? field.get(\"filterable\").asBoolean() : false;\n                Boolean filterableInInternalSystem = dataTypeMappingsForField !=null ? !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty() : true;\n                meta.put(FILTERABLE, filterableInInternalSystem);\n                meta.put(EXTERNALLY_FILTERABLE, filterable);\n                Boolean creatable = field.get(\"createable\") != null ? field.get(\"createable\").asBoolean() : false;\n                meta.put(CREATEABLE,creatable);\n                meta.put(ACCESSIBLE, true);\n                meta.put(ORIGINAL_DATA_TYPE, fieldDataType);\n                retMap.put(META, meta);\n                fieldFromObjectDefinition.add(retMap);\n            }\n        }\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4bd421c-5542-44f9-86e4-a13ceac6a409","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":63,"endLine":89,"content":", String envName, String ucId) {\n\n    String submitJobURL = String.format(\"%s%s\", API_GATEWAY_URL_BASE, \"/\");\n\n    String configSourceUrl = String.format(CALL_BACK_URL, UCCommonUtility.getApiGWUrl(), \"v1.0\");\n    Map<String, String> headers = Maps.newHashMap();\n    headers.put(\"systemToken\", String.valueOf(params.get(\"systemToken\")));\n    headers.put(\"tenantId\", RequestContextProvider.getTenantId());\n    headers.put(\"sharedSecret\", SHARED_SECRET);\n    headers.put(\"env\", String.valueOf(params.get(\"env\")));\n\n    if(params.containsKey(Constants.X_REQUEST_ID)) {\n      // uc-worker passes  request id to use for dh.\n      headers.put(Constants.X_REQUEST_ID, params.get(Constants.X_REQUEST_ID).toString());\n    }\n\n    headers.put(\"jobName\", String.valueOf(params.getOrDefault(\"jobName\", RandomStringUtils.randomAlphabetic(20))).replace(\"-\", \"_\"));\n    headers.put(\"externalId\", headers.get(\"jobName\"));\n    headers.put(\"externalExecutionId\", ucId);\n    headers.put(\"sourceType\", RequestContextProvider.getRequestInfo().getSourceType().name());\n    headers.put(\"systemName\", \"connectors\");\n    headers.put(\"keepIntermediate\", \"false\");\n    String userId = RequestContextProvider.isPureNativeTenant() ? RequestContextProvider.getGSUserId() : RequestContextProvider.getUserId();\n    headers.put(\"submittedBy\", userId);\n    headers.put(\"mdaRequestId\", ucId);\n    headers.put(\"configSourceUrl\", configSourceUrl);\n    LOGGER.info(\"Submitting the job to perform tasks ucid:{} , jobId:{}. Submitted to: {} a","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2096a408-3b7c-4118-b026-1f941d9f8cf1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":926,"endLine":933,"content":"onsInfo.getConnectionId()), tokenResponseMap,\n                    (Long) tokenResponseMap.get(EXPIRY));\n            return String.valueOf(tokenResponseMap.get(ACCESS_TOKEN));\n        } else {\n            return String.valueOf(accessKeyCached);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79eded53-fc0a-4238-b0d8-a4598d8ee27f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":80,"endLine":94,"content":"oken())) {\n                page = Integer.parseInt(ductJobMapping.getNextPageToken());\n            }\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.BIGQUERY);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            GainsightBigQueryChannelFactory gainsightBigQueryChannelFactory = new GainsightBigQueryChannelFactory();\n            GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.getChannelService(pnpConnectionsInfo);\n\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(),\n                    pnpConnectionsInfo);\n            ObjectDefinition objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n            Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n            Map<String, Object> fieldNameToDataTypeMap =  objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName,GSFieldDefinition::getDataType));\n            String whereClau","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b06568b3-a3b4-42ba-8934-9288a4f60a8f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1350,"endLine":1373,"content":"l = new BaseTokenDetail();\n                if (properties.get(HEADERS) instanceof Map) {\n                    tokenDetail.setHeaders((Map) properties.get(HEADERS));\n                }\n                break;\n            case OAUTH_v2:\n                if (StringUtils.isEmpty(GainsightUtils.valueOf(properties.get(REDIRECT_URI)))) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_REDIRECT_URL.getUserText()));\n                }\n                OAuthV2TokenDetail oAuthV2TokenDetail = getOAuthV2TokenDetail(pnpConnectionsInfo);\n                oAuthV2TokenDetail.setRedirectURI(GainsightUtils.valueOf(properties.get(REDIRECT_URI)));\n                oAuthV2TokenDetail.setScope(GainsightUtils.valueOf(properties.get(SCOPE)));\n                oAuthV2TokenDetail.setServiceProviderAuthorizationURI(GainsightUtils.valueOf(properties.get(SERVICE_PROVIDER_AUTHORIZATION_URI)));\n                tokenDetail = oAuthV2TokenDetail;\n                break;\n            case TWO_LEGGED_OAUTH_v2:\n                tokenDetail = getOAuthV2TokenDetail(pnpConnectionsInfo);\n                break;\n            default:\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_CLIENT_INPUT.getUserText(), HttpStatus.SC_BAD_REQUEST));\n        }\n        pnpConnectionsInfo.setTokenDetail(tokenDetail);\n        pnpConnectionsInfo.getProperties().put(AUTH_TYPE, authType);\n        pnpConnectionsInfo.getProperties().put(DESCRIPTI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5c82e72-d5b5-4923-8996-c75d33979441","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BigQueryValidationDataSourceService.java","startLine":35,"endLine":55,"content":"oolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9feb47f0-4d5d-417e-8816-1c651928db61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":25,"endLine":58,"content":"actory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_UPSERT_KEYS;\n\n@Service\npublic class HubspotToOMDConverterServiceImpl implements OMDConverterBaseService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotToOMDConverterServiceImpl.class);\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private static final String FIELDS = \"fields\";\n    private static final String STAGES = \"stages\";\n    private static final String ID = \"id\";\n    private static final List<String> SPECIAL_HANDLING_PICKLIST_ATRRIBUTES = Lists.newArrayList(\"dealstage\", \"hs_pipeline_stage\");\n    private static final List<String> PIPELINE_ALLOWED_OBJECT_LIST = Lists.newArrayList(\"TICKET\", \"DEAL\");\n    private static final HashSet<String> PICKLIST_DATA_TYPE = new HashSet<>(Arrays.asList(DataType.PICKLIST.name(), DataType.MULTISELECTDROPDOWNLIST.name()));\n\n    @Autowired\n    CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Autowired\n    GainsightHubspotFetchProcessor gainsightHubspotFetchProcessor;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.HUBSPOT.equals(connectorType);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"206ffcea-64f5-4b56-8404-7417daa9b054","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.utils;\n\nimport com.amazonaws.util.EC2MetadataUtils;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.constants.DuctCommonConstants;\nimport com.gainsight.duct.utils.context.EnvironmentContext;\nimport com.gainsight.duct.enums.DuctAppType;\nimport com.gainsight.feature.config.sdk.http.ClientConfig;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationServiceImpl;\nimport com.gainsight.feature.toggle.bean.Credentials;\nimport com.gainsight.feature.toggle.bean.FeatureVariationDetailDTO;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.ApplicationInitializer;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CoreUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.utils.TokenGenerator;\nimport com.gainsight.utils.configserver.ApplicationConfigProperties;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.map.DeserializationConfig;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.map.SerializationConfig;\nimport ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8ea013b-2799-4fd9-9d29-7f3ac27f7d4c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":30,"endLine":71,"content":"MetaConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n/**\n * createdBy: snargana\n * date: 16/05/24\n */\n\n@Service\n@Slf4j\npublic class IntercomV2ToOMDConverterServiceImpl implements OMDConverterBaseService {\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final String CUSTOM = \"custom\";\n  private static final String FULL_NAME = \"full_name\";\n  private static final String DATA_TYPE = \"data_type\";\n  private static final String OBJECT_DBNAME = \"objectDBName\";\n\n  @Autowired\n  CaasConnectorConfigService caasConnectorConfigService;\n\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType) {\n    return ConnectorType.INTERCOMV2.equals(connectorType);\n  }\n\n  public static List<Map<String, Object>> convertObjectToListOfMap(Object obj) {\n    return OBJECT_MAPPER.convertValue(obj, new TypeReference<List<Map<String, Object>>>() {\n    });\n  }\n\n  @Override\n  public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException {\n\n    CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n    ArrayList<Map<String, Object>> fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n    if (fields.isNull() || (!fields.isArray()) || fields.size() == 0) {\n      return;\n    }\n\n    Li","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"629afd9e-40c4-4ecf-8767-04388eab778d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":79,"endLine":102,"content":"st(DataType.STRING, DataType.DATE, DataType.DATETIME);\n    public static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n    public static final String DATE_FORMAT = \"YYY-MM-DD\";\n    public static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD = \"updated\";\n\n\n    private static final String DATA = \"data\";\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.JIRA && !isIpaas ;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int pageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48ea507f-b780-4987-a4e3-0d1ce8813ec1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":430,"endLine":456,"content":"t ID from Microsoft Dynamics 365 Tenant, \" + tenantDomain);\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                companyPersonUpdateRequired = true;\n            }\n            if (Objects.isNull(companyPersonObject.getColumn(externalAccountIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalAccountIdFieldName);\n                column.setDisplayName(\"External Account ID_\" + tenantDomain);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Account ID of the Contact from Microsoft Dynamics 365 Tenant, \" + tenantDomain);\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                companyPersonUpdateRequired = true;\n            }\n            if (companyPersonUpdateRequired) {\n                collectionMasterService.updateStandardCollection(companyPersonObject);\n            }\n            properties.put(UCConstants.GSIntegration.COMPANY_PERSON_IDENTIFIER, externalContactIdFieldName);\n            setupDefaultCompanyResolutionKeys(pnpConnectionsInfo);\n        }\n    }\n\n    private void setupDefaultCompanyResolutionKeys(PNPConn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2197fcf3-9513-4a14-b40f-9eb6daca8049","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":25,"endLine":61,"content":".UCValidationCode;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.duct.validation.DuctValidationService;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport io.swagger.annotations.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils.ResponseObj;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\n\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/\")\n@EnableSwagger2\n@Api(value = \"CAAS Api's\", description = \"CAAS related api's\")\n@ApiResponses(value = {\n        @ApiRespons","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61ad4bf7-2806-4a96-99e1-c2f17730884a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":446,"endLine":476,"content":"                 clientSecret, refreshToken, file, options, folderId);\n                break;\n            default:\n                log.error(\"Unsupported connector type\");\n        }\n        return uploadResponse;\n    }\n\n    private GsExternalSystemErrorMapping getGsExternalSystemErrorMapping(PNPConnectionsInfo pnpConnectionsInfo, boolean isDbUpdate,\n                                                                         GsExternalSystemErrorMapping gsExternalSystemErrorMapping)  {\n        gsExternalSystemErrorMapping.setRequestId(RequestContextProvider.getRequestId());\n        gsExternalSystemErrorMapping.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        gsExternalSystemErrorMapping.setGsErrorCode(CaasValidationCode.EXTERNAL_SYSTEM_METADATA_NOT_FOUND.getGsEventCode());\n        gsExternalSystemErrorMapping.setGsErrorMessage(CaasValidationCode.EXTERNAL_SYSTEM_METADATA_NOT_FOUND.getUserText());\n        if(isDbUpdate){\n            gsExternalSystemErrorMappingDao.insert(gsExternalSystemErrorMapping);\n        }\n        return gsExternalSystemErrorMapping;\n    }\n\n    private PNPConnectionsInfo getConnectionId(String connectionId) {\n        return pnpConnectionInfoDao.findByConnectionId(connectionId);\n    }\n\n    public static File downloadFileFromS3(String key) {\n        StopWatch stopWatch = new StopWatch();\n        log.info(\"Downloading file from S3 @ path {} started\", key);\n        File result = null;\n        stopWatch.start();\n        S3Object s3Object;\n        i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47d93578-b292-4a5f-99ba-39c4a59a78b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/IpaasAccountUserDetailsDaoImpl.java","startLine":41,"endLine":58,"content":"   protected void setTenantId(IpaasAccountUserDetails ipaasAccountUserDetails, String s) {\n        ipaasAccountUserDetails.setTenantId(s);\n    }\n\n    @Override\n    public IpaasAccountUserDetails softDelete(String tenantId) {\n        Query query = new Query().addCriteria(Criteria.where(\"tenantId\").is(tenantId));\n        updateFirst(query, new Update().set(DELETED, true));\n        return null;\n    }\n\n    @Override\n    public IpaasAccountUserDetails findByTenantId(String tenantId) {\n        Query query = new Query().addCriteria(Criteria.where(\"tenantId\").is(tenantId));\n        return getMongoTemplate().findOne(addDeletedCriterion(query), IpaasAccountUserDetails.class);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c468a09f-d624-45ce-9706-2279b16956e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":283,"endLine":304,"content":"E, true);\n                meta.put(EXTERNALLY_FILTERABLE, false);\n            }\n\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n            meta.put(ORIGINAL_DATA_TYPE, gainsightHubspotFieldDescription.getType());\n            meta.put(GDM_FORMULA_COLUMN, gainsightHubspotFieldDescription.isCalculated());\n            meta.put(HIDDEN, gainsightHubspotFieldDescription.isHidden());\n            meta.put(HAS_LOOKUP, ObjectUtils.allNotNull(gainsightHubspotFieldDescription.getReferencedObjectType()));\n\n            if (ObjectUtils.isNotEmpty(gainsightHubspotFieldDescription.getOptions()) && !gainsightHubspotFieldDescription.getOptions().isEmpty()) {\n                List<Map> picklistOptions = new ArrayList<>();\n                for (Options option : gainsightHubspotFieldDescription.getOptions()) {\n                    Map<String, Object> picklistOption = new HashMap<>();\n                    picklistOption.put(LABEL, option.getLabel());\n                    picklistOption.put(DISPLAY_ORDER, option.getDisplayOrder());\n                    picklistOption.put(VALUE, option.getValue());\n                    picklistOption.put(ACTIVE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59e4746e-e144-44c3-8779-4bcb8442ad67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":252,"endLine":269,"content":"         throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(populateNextPageToken(externalSystemResponse)).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse))\n                .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()).build();\n    }\n\n    private DuctResponse fetchSynchronizedDataWithoutPagination(DuctJobMapping ductJobMapping, String dataApi, TokenDetails tokenDetails) throws CaasException {\n        GainsightMSTeamsFetchService fetchService = new GainsightMSTeamsFetchServiceImpl();\n        List<Map<String, Object>> externalSystemResponse = new ArrayList<>();\n        Map<String, Object> externalSystemResponseMap = new HashMap<>();\n\n        try {\n            HttpResponse httpResponse = fetchService.searchData(\n                    tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken(),\n                    tokenDetails.getAccessToken(), dataApi);\n            externalSystemResponse = MAPPER.convertValue(extractResponse(httpResponse).get(VALUE), new TypeReference<List<Map<String, Object>>>() {});\n            externalSystemResponseMap ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c777104e-2b6b-432c-9223-a68e9abce94f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":212,"endLine":235,"content":"  fieldNameMetaMap, ignoreMetadataFieldNames, caasConnectorConfig, objectName, targetFieldName);\n            filterRules.add(internalFilterRule);\n        }\n        filterRule.setRules(filterRules);\n        return filterRule;\n    }\n\n    private static FilterRule buildRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, List<String> ignoreMetadataFieldNames,CaasConnectorConfig caasConnectorConfig, String objectName) {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            return createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                childRulesList.add(buildRule(childCriteria, fieldNameDataTypeMap, fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName));\n            }\n            FilterRule current = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private static FilterRule buildRule(Criteria criteria, Map<String, Map<String, Object>> objectToFieldDBNameToGSDataTypeMap,\n                                                                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e72e1400-e87c-4c36-9b62-c632751b39c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/TenantRegion.java","startLine":1,"endLine":44,"content":"package com.gainsight.duct.enums;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic enum TenantRegion {\n\n    EU(\"EU\"),\n    US(\"US\"),\n    DEV(\"DEV\"),\n    DEFAULT(\"DEV\");\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TenantRegion.class);\n    private final String value;\n\n    TenantRegion(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public static TenantRegion getTenantRegion(String regionName) {\n        TenantRegion tenantRegion;\n        switch (regionName) {\n            case \"EU\":\n                tenantRegion = EU;\n                break;\n            case \"US\":\n                tenantRegion = US;\n                break;\n            case \"DEV\":\n            case \"DEFAULT\":\n                tenantRegion = DEV;\n                break;\n            default:\n                tenantRegion = DEFAULT;\n                LOGGER.error(\"Invalid regionName: {} hence defaulting to: {}\", regionName, DEFAULT.getValue());\n                break;\n        }\n        return tenantRegion;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"feff9abc-2b39-4e7c-b003-cdfda4bb8040","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":612,"endLine":644,"content":"     List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      return dataToBeProcessed;\n    }\n  }\n\n  private Object convertToDateTimeFromEpoch(String epochStr, String dateTimeFormat, DuctJobMapping ductJobMapping) {\n    if (Objects.isNull(epochStr)) {\n      return null;\n    }\n    SimpleDateFormat dateFormat = new SimpleDateFormat(dateTimeFormat);\n    try {\n      Date date = new Date(Long.parseLong(epochStr) * 1000);\n      if (MapUtils.isNotEmpty(ductJobMapping.getProperties()) && ductJobMapping.getProperties().containsKey(\"targetTimezone\")) {\n        dateFormat.setTimeZone(TimeZone.getTimeZone(ductJobMapping.getProperties().get(\"targetTimezone\").toString()));\n      } else {\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n      }\n      return dateFormat.format(date);\n    } catch (Exception e) {\n      log.error(\"Error while converting epoch value {} to datetime. Exception: \", epochStr, e);\n      return null;\n    }\n  }\n\n\n  private Map<String, Object> getDefaultQueryBodyMap(Criteria criteria) {\n    Map<String, Object> defaultQueryMap = Maps.newHashMap();\n    if (Objects.nonNull(criteria) && Objects.nonNull(criteria.getDuctFilterCondition())) {\n      defaultQueryMap.put(OPERATOR, criteria.getDuctFilterCondition().getFilterCondition());\n    } else {\n      // set a hardcoded filter condition since this is a required parameter\n      defaultQueryMap.put(OPERATOR, DuctFilterCondition.OR.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b65a447b-5f84-44e8-a2a8-d216c67e84ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":56,"endLine":85,"content":"  validateLookupField(notAvailableFields, availableRelationships, field);\n            }\n        }\n        if (ObjectUtils.allNotNull(ductRequestDTO.getCriteria())) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                if (!fieldSet.contains(filterField)) {\n                    validateLookupField(notAvailableFields, availableRelationships, filterField);\n                }\n            }\n        }\n\n        if (!notAvailableFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system: \" + String.join(\",\", notAvailableFields));\n        }\n    }\n\n    private void validateLookupField(Set<String> notAvailableFields, Set<String> availableRelationships, String field) {\n        String[] sourceFieldName = field.split(\"\\\\.\");\n        if (sourceFieldName.length == 2) {\n            if (!availableRelationships.contains(sourceFieldName[0]))\n                notAvailableFields.add(field);\n        } else {\n            notAvailableFields.add(field);\n        }\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws Ca","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d84320f7-1f9d-4360-92e4-8c8ec800f46b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":300,"endLine":323,"content":"n externalSystemResponse;\n    }\n\n    private void constructZoomDownloadUrl(Map<String, Object> externalSystemResponse) throws CaasException {\n        if (null != externalSystemResponse.get(DOWNLOAD_ACCESS_TOKEN)) {\n            String downloadAccessToken = externalSystemResponse.get(DOWNLOAD_ACCESS_TOKEN).toString();\n            List<Map<String, Object>> recordingList = GainsightCollectionUtils.nullSafeList((List<Map<String, Object>>) externalSystemResponse.get(RECORDINGS_FILES_KEYWORD));\n            recordingList.forEach(recording -> {\n                if (null != recording.get(DOWNLOAD_URL)) {\n                    String downloadUrl = recording.get(DOWNLOAD_URL).toString();\n                    recording.put(DOWNLOAD_URL, downloadUrl + ACCESS_TOKEN_KEYWORD + downloadAccessToken);\n                }\n            });\n            externalSystemResponse.put(RECORDINGS_FILES_KEYWORD, recordingList);\n        }\n    }\n\n    private TokenDetails extractAccessDetails(String connectionId) {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n        TokenDetails accessDetails = new TokenDetails();\n        accessDetails.setClientId(pnpConnectionsInfo.getTokenDetail().getClientId().getString());\n        accessDetails.setClientSecret(pnpConnectionsInfo.getTokenDetail().getClientSecret().getString());\n        accessDetails.setAccessToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken()));\n        accessDetails.setRefreshToken(Cryp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"340f048c-6c30-4486-b9ef-07e88f14aba3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":470,"endLine":497,"content":"nectionId);\n        if (pnpConnectionsInfo == null) {\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT.getUserText()));\n        }\n        pnpConnectionsInfo.setTokenDetail(null);\n        PNPConnectionInput pnpConnectionInput = new PNPConnectionInput();\n        pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfo);\n        return pnpConnectionInput;\n    }\n\n    @Override\n    public List<PNPConnectionInput> getAccessKeyConnectionInfo() {\n        AccessKeyQuery accessKeyQuery = new AccessKeyQuery();\n        accessKeyQuery.accessType(AccessKeyType.EXTERNAL_INTEGRATION.toString());\n        accessKeyQuery.tenantId(RequestContextProvider.getTenantId());\n        accessKeyQuery.deleted(Boolean.FALSE);\n        AccessKeyInfo accessKeyInfo = accessKeyDao.findOne(accessKeyQuery);\n        if (Objects.isNull(accessKeyInfo)) {\n            return Collections.emptyList();\n        }\n        PNPConnectionInput pnpConnectionInput = new PNPConnectionInput();\n        PNPConnectionsInfo pnpConnectionsInfo = new PNPConnectionsInfo();\n        pnpConnectionsInfo.setConnectionId(accessKeyInfo.getTenantId());\n        pnpConnectionsInfo.setConnectionName(\"Gainsight API\");\n        pnpConnectionsInfo.setCreatedBy(accessKeyInfo.getCreatedBy());\n        pnpConnectionsInfo.setCreatedByName(accessKeyInfo.getCreatedByName());\n        pnpConnectionsInfo.setCreatedDate(accessKeyInfo.getCreatedDate());\n        pnpConnectionsInfo.setModifiedBy(accessKeyInfo.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8b87b86-0663-4dc7-bd10-0f5e6ad6aeb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":262,"endLine":286,"content":"Null()) {\n            return OBJECT_MAPPER.convertValue(externalSystemResponse.get(DATA), List.class).size();\n        }\n        return 0;\n    }\n\n    private Criteria modifyCriteria(Criteria criteria, DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap, CaasConnectorConfig caasConnectorConfig) {\n        Criteria defaultCriteria = getDefaultFallbackCriteria(ductJobMapping.getResourceName());\n        try {\n            LOGGER.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUtils.convertObjectToJson(criteria));\n            if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters()) || (Objects.isNull(criteria.getFieldName()) && CollectionUtils.isEmpty(criteria.getFilters()))) {\n                return defaultCriteria;\n            }\n\n            Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n            Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n            Criteria modifiedCriteria = null;\n\n            // flatten the criteria to get all the nested filters\n            List<Criteria> flattenedCriteria = flattenCriteria(criteria);\n\n            // filter only those criteria which are externally filterable\n            List<Criteria> flattenedRequiredCriteria = nullSafeList(flattenedCriteria)\n                    .stream()\n                    .filter(flatCriteria -> externalFilterableFieldsMap.cont","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f396c099-4824-493d-a0d2-8ef724c05a1b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":648,"endLine":659,"content":".containsKey(fieldSplitted[1])) {\n                                Map<String, ObjectDefinition> expandedObjectMetaInfoDefinitionMap = service.getObjectAttributes(fieldSplitted[1], pnpConnectionsInfo, false);\n                                objectToFieldDBNameToFieldDefinitionMap.put(fieldSplitted[1], expandedObjectMetaInfoDefinitionMap.get(fieldSplitted[1]).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n                                objectToFieldDBNameToGSDataTypeMap.put(fieldSplitted[1], expandedObjectMetaInfoDefinitionMap.get(fieldSplitted[1]).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                            }\n                        }\n                    } else {\n                        if (objectToFieldDBNameToFieldDefinitionMap.get(ductJobMapping.getResourceName()).containsKey(fieldSplitted[0]) &&\n                                MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(objectToFieldDBNameToFieldDefinitionMap.get(ductJobMapping.getResourceName()).get(fieldSplitted[0]).getMeta().getOriginalDataType().toUpperCase())) {\n                            String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(ductJobMapping.getResourceName()).get(fieldSplitted[0]).getMeta()\n                                    .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                            if (!objectToFie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1de86a6-f448-49b8-84ee-c6c0233a8f91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":174,"endLine":205,"content":"tList;\n                }\n            } catch (Exception e) {\n                log.error(\"Exception occured at the time of servicenow objects {}\", e);\n                return null;\n            } finally {\n                HttpClientUtils.closeQuietly(response);\n            }\n        } else {\n            log.info(\"Objects found in cache\");\n            objectList = (List<Map<String, Object>>) cacheValue;\n        }\n        return objectList;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        List<Map<String, Object>> objectsMap = getObjects(pnpConnectionsInfo, DEFAULT_MAP);\n        if (CollectionUtils.isEmpty(objectsMap)) {\n            log.error(\"Objects not found for connectionId: {}\", pnpConnectionsInfo.getConnectionId());\n            return null;\n        }\n\n        Map<String, Object> objectMap = objectsMap.stream().filter(object -> object.get(OBJECT_NAME).equals(objectName))\n                .findFirst().orElseThrow(() -> new CaasException(new GsExternalSystemErrorMapping(AdapterErrorMessages.FAILED_WHILE_FETCHING_OBJECT.getTranslatedMessage())));\n        List<String> superClassObjects = new ArrayList<>();\n        String currentObject = objectName;\n\n        // Getting object's super class recursively\n        while (MapUtils.isNotEmpty(objectMap)) {\n            if (objectMap.containsKey(SUPER_CLASS) && Objects.nonNull(objectMap.get(SUPER_CLASS))\n                 ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e29926d7-c0d4-46ba-b6f9-c3b071d31021","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":248,"endLine":279,"content":"Message(), \"Incorrect Message in Exception\");\n                assertEquals(400, sysEx.getHttpStatus(), \"Incorrect Http Status Code\");\n                assertEquals(CoreErrorCode.INVALID_PARAMETER, sysEx.getErrorCode(), \"Incorrect Error Code\");\n            }\n        }\n    }\n\n    @Test\n    public void saveMapping_test_validate_mapping_null_fields() {\n        DuctRequestDTO ductRequestDTO = new DuctRequestDTO();\n        Exception e = null;\n        boolean passed = false;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED));\n            ductRequestDTO.setResourceName(\"Resource Name\");\n            ductRequestDTO.setConnectionId(\"\");\n            ductRequestDTO.setFields(null);\n            ductRequestDTO.setData(null);\n            ductRequestDTO.setTargetSystemDataURL(null);\n            ductJobMappingService.synchronousInsert(ductRequestDTO);\n        } catch (SystemException ex) {\n            e = ex;\n            passed = true;\n        } catch (Exception exc) {\n            e = exc;\n        } finally {\n            assertNotNull(e, \"Exception should not be null\");\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n            if (e instanceof SystemException) {\n                SystemException sysEx = (SystemException) e;\n                assertNotNull(sysEx, \"","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a919d2d4-8019-46f1-b807-c327a3961c0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/config/dbqueue/DynamicQueuePropertiesConfigProvider.java","startLine":32,"endLine":57,"content":"onfigBean.getConsumer().get(queueNameUpper);\n                    if (dbQueueConfiguration == null) {\n                        dbQueueConfiguration = queueConfigBean.getConsumer().get(queueNameLower);\n                    }\n                }\n                break;\n            case BROKER:\n                if (queueConfigBean.getBroker() != null) {\n                    dbQueueConfiguration = queueConfigBean.getBroker().get(queueNameUpper);\n                    if (dbQueueConfiguration == null) {\n                        dbQueueConfiguration = queueConfigBean.getBroker().get(queueNameLower);\n                    }\n                }\n                break;\n            case TENANT_LIMIT:\n                if (queueConfigBean.getTenantLimit() != null) {\n                    dbQueueConfiguration = queueConfigBean.getTenantLimit().get(queueNameUpper);\n                    if (dbQueueConfiguration == null) {\n                        dbQueueConfiguration = queueConfigBean.getTenantLimit().get(queueNameLower);\n                    }\n                }\n                break;\n        }\n        return new DynamicDbQueueConfiguration(queueInfo, dbQueueConfigType, dbQueueConfiguration);\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"837a7694-8ee5-4345-b6dd-cea5d5b0aef3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.processor;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.DuctJobMappingServiceImpl;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.EventUtils;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport net.snowflake.client.jdbc.internal.apache.commons.codec.digest.HmacUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Service\npublic class ZoomEventProcessorServiceImpl implements ZoomEventProcessorService {\n    private static final String WEBHOOK_EVENT_TOPIC_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.topic.name\");\n    private static final String WEBHOOK_EVENT_NAME = DeploymentProperties.getDeploymentPropertie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5765ea1a-fd34-4995-b57d-24c785840de5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":285,"endLine":319,"content":"String getGainsightDataTypeFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String\n      externalSourceDataType) {\n\n    if (StringUtils.isBlank(externalSourceDataType)) {\n      return null;\n    }\n    DataTypeMappings requiredDataTypeMapping = getDataTypeMappingFromExternalSourceDataType(connectorConfig, externalSourceDataType);\n    if (Objects.isNull(requiredDataTypeMapping)) {\n      return null;\n    }\n    return requiredDataTypeMapping.getGainsightDatatype().name();\n\n  }\n\n  @Nullable\n  private static DataTypeMappings getDataTypeMappingFromExternalSourceDataType(CaasConnectorConfig\n                                                                                   connectorConfig, String externalSourceDataType) {\n\n    if (StringUtils.isBlank(externalSourceDataType)) {\n      return null;\n    }\n\n    if (externalSourceDataType.startsWith(CUSTOM_PREFIX)) {\n      externalSourceDataType = externalSourceDataType.replace(CUSTOM_PREFIX, \"\");\n    }\n\n    if (externalSourceDataType.startsWith(DEFAULT_PREFIX)) {\n      externalSourceDataType = externalSourceDataType.replace(DEFAULT_PREFIX, \"\");\n    }\n\n    List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n    String finalExternalSourceDataType = externalSourceDataType;\n    DataTypeMappings requiredDataTypeMapping = dataTypeMappings\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(finalExternalSourceDataType) && dataTypeMapping.isSupported","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f541edbf-14a6-49da-967c-5b50abede933","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":668,"endLine":693,"content":"\"asmt_assessment_instance_question\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci_service_discovered\", Arrays.asList(\"cmdb_ci_service_auto\", \"cmdb_ci_service\", \"cmdb_ci\", \"cmdb\"));\n        superClassInfo.put(\"asmt_metric_category\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"sys_documentation\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"sn_install_base_sold_product\", new ArrayList<>());\n        superClassInfo.put(\"x_77594_quality_fo_deviation\", new ArrayList<>());\n        superClassInfo.put(\"u_cmdb_ci_project\", new ArrayList<>());\n        superClassInfo.put(\"x_nuvo_license_aud_user_role_summary\", new ArrayList<>());\n        superClassInfo.put(\"x_nuvo_matrix_instance\", new ArrayList<>());\n        superClassInfo.put(\"u_gainsight_us\", new ArrayList<>());\n        superClassInfo.put(\"u_changepoint_engagement\", new ArrayList<>());\n        superClassInfo.put(\"pm_project\", new ArrayList<>());\n        superClassInfo.put(\"u_ast_customer_msa\", new ArrayList<>());\n        superClassInfo.put(\"customer_project\", new ArrayList<>());\n        superClassInfo.put(\"wm_task\", new ArrayList<>());\n        superClassInfo.put(\"u_survey\", new ArrayList<>());\n        return superClassInfo;\n    }\n\n    private void resetContext() {\n        try {\n            LOGGER.info(\"Resetting the context !!!\");\n            GainsightContext.unsetMDC();\n            RequestContextProvider.removeRequestContext();\n        } catch (Exception ex) {\n            LOGGER.error(\"Except","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7abdb26-5add-48a9-bcc8-7b114c583aa3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":126,"endLine":154,"content":"ibeMetaConstants.DATA_TYPE, gainsightDataType);\n    populateMetaForFieldInfo(fieldDefinition, fieldInfo, meta, connectorConfig);\n    return fieldDefinition;\n  }\n\n\n  public void populateMetaForFieldInfo(Map<String, Object> fieldDefinition, Map<String, Object> fieldInfo, Map<String, Object> meta, CaasConnectorConfig connectorConfig) {\n\n    meta.put(FILTERABLE, true);\n    meta.put(EXTERNALLY_FILTERABLE, false);\n    meta.put(ACCESSIBLE, true);\n    meta.put(READ_ONLY, true);\n    meta.put(REQUIRED, false);\n\n    meta.put(ORIGINAL_DATA_TYPE, DuctUtils.valueOf(fieldInfo.get(DATA_TYPE)));\n    meta.put(ACCESSIBLE, true);\n    DataTypeMappings dataTypeMappingsForField = getDataTypeMappingFromExternalSourceDataType(connectorConfig, DuctUtils.valueOf(fieldInfo.get(DATA_TYPE)));\n\n    // since the properties we are receiving are less in number, we are copying the properties as it is and adding the required properties\n    Map<String, Object> metaProperties = DuctUtils.deepCopy(fieldInfo, Map.class);\n\n    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n    if (Objects.nonNull(dataTypeMappingsForField) && StringUtils.isNotBlank(dataTypeMappingsForField.getFormat())) {\n      metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n    }\n\n    if (Objects.nonNull(dataTypeMappingsForField) && StringUtils.isNotBlank(dataTypeMappingsForField.getWritebackFormat())) {\n      metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ec37378-8deb-4cb9-b4b2-f8c56de8498e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/GSModule.java","startLine":1,"endLine":11,"content":"package com.gainsight.duct.enums;\n\npublic enum GSModule {\n    GS_OBJECTS,\n    PEOPLE,\n    CASES_MODEL,\n    TIMELINE,\n    COCKPIT,\n    CUSTOMER_GOALS,\n    SUCCESS_PLAN\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5db254ff-a74f-427d-8a3f-5548328dfddd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightPxCaasMetadataServiceImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.GainsightPXFieldDescription;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.processor.GainsightPXFetchService;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Order(600)\n@Service\npublic class GainsightPxCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private GainsightPXFetchService gainsightPXFetchService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.GAINSIGHT_PX.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<String> allObjects = gains","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5b02358-5fca-4697-81d6-221e77ad04b5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":138,"endLine":156,"content":"sCacheUtility.putValue(DuctUtils.getObjectsCallCacheKey(connectionId), objectNameToTypeIdMap, 600);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n            GainsightHubspotSchema gainsightHubspotSchemaBean = null;\n            String metadataApi = null;\n            boolean isStandardObject = false;\n            Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(objectName)).findFirst();\n            if (caasObjectApiConfig.isPresent()) {\n                metadataApi = caasObjectApiConfig.get().getMetadataApi();\n                isStandardObject = true;\n            } else\n                metadataApi = getMetadataApiPath(connectorConfigs, objectName, pnpConnectionsInfo);\n            GSIntegrationResponse gsIntegrationResponseHubspot = gainsightHubspotFetchProcessor.getEntityDescription(pnpConnectionsInfo.getConnectionId(), objectName, metadataApi, isStandardObject);\n            gainsightHubspotSchemaBean = (GainsightHubspotSchema) gsIntegrationResponseHubspot.getResult();\n            GainsightHubspotEntityDescriptionV3 gainsightHubspotEntityDescription = new GainsightHubspotEntityDescriptionV3(objectName, gainsightHubspotSchemaBean","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f644e5b7-38c3-477c-9cbd-d9197914aa49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":36,"endLine":65,"content":"gClientService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctAuditLogClientServiceImpl.class);\n    private static final String AUDIT_SERVICE_AUDIT_TOKEN = \"authToken\";\n    private static final String AUDIT_SERVICE_AUDIT_TOKEN_VALUE = DeploymentProperties.getDeploymentProperties().getValue(\"audit.service.uc.token\");\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n\n    private static final String AUDIT_SERVICE_END_POINT = DeploymentProperties.getDeploymentProperties().getValue(\"audit.service.end.point\");\n\n    @Autowired\n    private HttpClientService httpClientService;\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionsInfoDao;\n\n    static {\n        objectMapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);// This is needed as Audit Service is not accepting null json key:value pair\n    }\n\n    @Override\n    public boolean postAuditRecord(AuditRecord auditRecord) {\n        Map<String, Object> params = Maps.newHashMap();\n        params.put(AUDIT_SERVICE_AUDIT_TOKEN, AUDIT_SERVICE_AUDIT_TOKEN_VALUE);\n        String requestBodyJson;\n        try {\n            requestBodyJson = objectMapper.writeValueAsString(auditRecord);\n        } catch (IOException e) {\n            LOGGER.error(\"Error Occurred while reading Json String from AuditRecord\", e);\n            return false;\n        }\n        Response response = httpClientService.post(AUDIT_SERVICE_END_POINT, params, requestBodyJson, MediaType.APPLICATION_JSON_TYPE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c18eacf8-5798-490f-a7bb-dcd235640f5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":78,"endLine":105,"content":"ow new RuntimeException(CaasValidationCode.INVALID_INPUT_DATA.getUserText());\n        }\n\n        //convert the oauth client id and secret to secret data\n        ((Map) pnpConnectionInput.getProperties().get(IPaasConstants.IPAAS_PROPERTIES))\n                .put(UCConstants.GSIntegration.OAUTH_CLIENT_ID, SecretData.fromValue(oauthClientId));\n        ((Map) pnpConnectionInput.getProperties().get(IPaasConstants.IPAAS_PROPERTIES))\n                .put(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET, SecretData.fromValue(oauthClientSecret));\n\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(pnpConnectionInput.getPnpConnectionsInfo().getAuthorizationType());\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n        Map<String, Object> connectionInfoAsMap = MAPPER.convertValue(pnpConnectionsInfo, new TypeReference<Map<String, Object>>() {\n        });\n        Map<String, Object> flattenConnectionInfo;\n        try {\n            flattenConnectionInfo = JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(connectionInfoAsMap));\n        } catch (JsonProcessingException ex) {\n            log.error(\"Exception occurred while flattening connection info\", ex);\n            return null;\n        }\n\n        Map<String, Object> ipaas","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"564c2d4b-4a4c-4545-8544-bea2029f4b0f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":51,"endLine":76,"content":"tErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n                }\n            }\n            return null;\n        } catch (Exception e) {\n            if (response != null && response.getReasonPhrase() != null) {\n                throw new CaasException(new GsExternalSystemErrorMapping(response.getReasonPhrase(), e));\n            } else {\n                throw new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n    public static PNPConnectionsInfo updateConnection(PNPConnectionInput pnpConnectionInput) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) + String.format(\"/v1.0/connector/ipaas/connection/%s\",\n                pnpConnectionInput.getPnpConnectionsInfo().getConnectionId());\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking update connection : {}\", url);\n            response = AdvancedHttpHelper.put(url, headers, GainsightUtils.convertObjectToJson(pnpConnectionInput), ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of update connection to {}, is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"58c6bf4c-a013-462c-9995-797ac28dd3ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":56,"endLine":76,"content":"estDTO.getCriteria().getFilters()) {\n                if (criteria.getFilters() != null && criteria.getFilters().size() > 1) {\n                    DuctUtils.throwError(CaasValidationCode.ONLY_ONE_FILTER_IS_ALLOWED.getGsEventCode(), CaasValidationCode.ONLY_ONE_FILTER_IS_ALLOWED.getUserText(), null);\n                }\n            }\n        }\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    che","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb2c7b29-0e82-4cb5-9a9c-4874f4fb3cc2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesConfigDAO.java","startLine":1,"endLine":17,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\n\nimport java.util.List;\n\npublic interface CaasObjectAttributesConfigDAO extends AbstractEntityDao<CaasObjectAttributesConfig> {\n    List<CaasObjectAttributesConfig> getConfigAttributes(ConnectorType connectorType, String objectName);\n\n    CaasObjectAttributesConfig upsertConfigs(CaasObjectAttributesConfig objectAttributeListConfig);\n\n    void dropCollection();\n\n    List<CaasObjectAttributesConfig> listObjectConfigAttributes(ConnectorType connectorType);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"571637a1-ef0c-4eaa-b922-7e687f1d4ec5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":351,"endLine":375,"content":"}\n\n    public static Map<String, Object> getFlattenedConnectionInfo(OAuthDetail oAuthDetailnpConnectionsInfo) throws com.gainsight.fasterxml.jackson.core.JsonProcessingException {\n        Map<String, Object> connectionInfoAsMap = MAPPER.convertValue(oAuthDetailnpConnectionsInfo, new TypeReference<Map<String, Object>>() {\n        });\n        for (Map.Entry<String, Object> stringObjectEntry : connectionInfoAsMap.entrySet()) {\n            if (stringObjectEntry.getValue() instanceof byte[]) {\n                connectionInfoAsMap.put(stringObjectEntry.getKey(), CryptHandler.getInstance().decrypt((byte[]) stringObjectEntry.getValue()));\n            }\n        }\n        Map<String, Object> flattenConnectionInfo = JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(connectionInfoAsMap));\n        return flattenConnectionInfo;\n    }\n\n\n    private static void processTokenDetailIfPresent(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> connectionInfoAsMap) {\n        BaseTokenDetail tokenDetail = pnpConnectionsInfo.getTokenDetail();\n        if (tokenDetail == null)\n            return;\n\n        Map<String, Object> tokenDetailMap = new HashMap<>();\n        checkAndAddValue(tokenDetail.getAccessKey(), tokenDetailMap, \"accessKey\");\n        checkAndAddValue(tokenDetail.getAccessSecret(), tokenDetailMap, \"accessSecret\");\n        checkAndAddValue(tokenDetail.getClientId(), tokenDetailMap, \"clientId\");\n        checkAndAddValue(tokenDetail.getClientSecret(), tokenDetailMap, \"client","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a521f92-d65c-4375-8b6d-84a86fe7df67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":664,"endLine":689,"content":"    } else {\n            return SyncDirection.EXTERNAL_SYSTEM_TO_MDA;\n        }\n    }\n\n    private void queueMessage(DuctJobMapping ductJobMapping) {\n        MessageRequestDTO<DuctJobMapping> messageRequestDTO = new MessageRequestDTO<>();\n        messageRequestDTO.setMessageType(MESSAGE_INFO.getSupportedType()); //todo check the type\n        messageRequestDTO.setPayload(ductJobMapping);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequestDTO.setTenantId(RequestContextProvider.getTenantId());\n        messageRequestDTO.setSource(\"CONNECTORS\");\n        messageRequestDTO.setExternalId(UUID.randomUUID().toString());\n        String messageId = queueProducer.enqueue(messageRequestDTO);\n        log.info(\"Extract task -> Packet pushed with message id :{} for tenant id {} \", messageId, ductJobMapping.getTenantId());\n        DuctJobMapping ductJobMappingDB = ductJobMappingDao.findByJobId(ductJobMapping.getJobId());\n        ductJobMappingDB.setDbqMessageId(messageId);\n        ductJobMappingDao.update(ductJobMappingDB);\n    }\n\n    private void wbQueueMessage(DuctJobMapping ductJobMapping, String messageType) {\n        MessageRequestDTO<DuctJobMapping> messageRequestDTO = new MessageRequestDTO<>();\n        messageRequestDTO.setMessageType(messageType);\n        messageRequestDTO.setPayload(ductJobMapping);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequestDTO.setTenantId(RequestContextProvide","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac001559-c5e2-4981-9aaa-dd0d3fb5169a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":928,"endLine":948,"content":"          caasColumnMapping.setObjectName(null == targetObjectName ? objectName.toString() : targetObjectName);\n            caasMappings.add(caasColumnMapping);\n        }\n        return caasMappings;\n    }\n\n    private void validateOperation(Map.Entry<String, Object> entry) throws CaasException {\n        if (ObjectUtils.isEmpty(entry.getValue()))\n            DuctUtils.throwError(CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getGsEventCode(), CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(), CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText());\n        if (!DuctDataOperation.getOperationNames().contains(entry.getValue()))\n            DuctUtils.throwError(CaasValidationCode.INVALID_WRITEBACK_OPERATION.getGsEventCode(), CaasValidationCode.INVALID_WRITEBACK_OPERATION.getUserText(), CaasValidationCode.INVALID_WRITEBACK_OPERATION.getUserText() + \":\" + entry.getValue());\n    }\n\n    private DuctResponseDTO loadToGainsight(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        GainsightLoadService gainsightLoadService = gainsightLoadFactory.getService(ductJobMapping.getResourceName());\n        return gainsightLoadService.load(ductJobMapping, ductRequestDTO);\n    }\n\n    public void validateIsExternalFilterable(DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap) throws CaasException {\n        List<String> isExternalFilterable = new ArrayList<>();\n        fiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d012f21e-aac6-47eb-8c74-0a3c9496df96","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GsExternalSystemErrorMapping.java","startLine":40,"endLine":74,"content":"is.externalSystemErrorCode = externalSystemErrorCode;\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n    }\n\n\n    public GsExternalSystemErrorMapping(String externalSystemErrorCode, String externalSystemErrorMessage){\n        this.externalSystemErrorCode = externalSystemErrorCode;\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n    }\n\n    public GsExternalSystemErrorMapping(String externalSystemErrorMessage){\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n    }\n\n    public GsExternalSystemErrorMapping( String externalSystemErrorMessage, Object exceptionStackTrace){\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n        this.exceptionStackTrace = exceptionStackTrace;\n    }\n\n\n    public GsExternalSystemErrorMapping(String gsErrorCode, String gsErrorMessage, Object exceptionStackTrace){\n        this.gsErrorCode = gsErrorCode;\n        this.gsErrorMessage = gsErrorMessage;\n        this.exceptionStackTrace = exceptionStackTrace;\n    }\n\n    public GsExternalSystemErrorMapping(String gsErrorCode, String gsErrorMessage, Object exceptionStackTrace, String jobId){\n        this.gsErrorCode = gsErrorCode;\n        this.gsErrorMessage = gsErrorMessage;\n        this.exceptionStackTrace = exceptionStackTrace;\n        this.jobId = jobId;\n    }\n\n    public GsExternalSystemErrorMapping(String gsErrorCode, String gsErrorMessage, Object exceptionStackTrace, String jobId, String message){\n        this.gsErrorC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4109941d-07f6-45ba-861e-e7e98e223ed6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.clients;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport com.gainsight.duct.beans.PNPConnectionsInfoQuery;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctCommonConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.IpaasAccountUserDetailsDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.engine.converter.OMDConverterBaseService;\nimport com.gainsight.duct.metadata.engine.converter.OMDConverterFactory;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.utils.IpaasHelperService;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.enums.TenantType;\nimport com.gainsight.integra","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc241ec2-d3af-449f-b110-79f17fd7546a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":200,"endLine":236,"content":"(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n            });\n            if (resourceConfig.getMetadataTransformationConfig() != null) {\n                data = sanitizeData(data, resourceConfig);\n            }\n            responseList.addAll(data);\n        }\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_NATIVE_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentPrope","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c10c79b2-2fcf-48d5-91e6-5cc26caea5b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":173,"endLine":193,"content":"atch (Exception e) {\n                    log.error(\"Error in validating the required fields expression {}, {}\", getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), resourceDefinition), e);\n                    DuctUtils.populateAndInsertError(\"Error in validating the required fields expression\"\n                            + String.join(\",\", getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), resourceDefinition)), ductJobMapping.getJobId());\n                }\n            }\n        }\n        if (validationFailed)\n            DuctUtils.populateAndInsertError(errorMessageBuilder.toString(), ductJobMapping.getJobId());\n    }\n\n    private void validateUpsertKeys(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> metaInfoDefinitionMap) throws CaasException {\n        Set<String> objects = new HashSet<>();\n        objects.addAll(ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getObjectName).collect(Collectors.toList()));\n        Map<String, String> objectLevelOperationMap = (Map<String, String>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n        DuctDataOperation operation = null;\n        StringBuilder errorMessage = new StringBuilder().append(\"Upsert keys not present : \");\n        boolean isInvalid = false;\n        for (String object : objects) {\n            operation = DuctDataOperation.valueOf(objectLevelOperationMap.get(object));\n            if (operat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e94b37e5-137c-47a5-9a4a-4f73fa3c6435","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":395,"endLine":416,"content":"oid populateMetadataInfoForDHTask(Map<String, Object> metaData) {\n        metaData.putIfAbsent(DuctConstants.TASK_NAME, getTaskName());\n        metaData.putIfAbsent(DuctConstants.TEAM_NAME, getTeamName());\n        metaData.putIfAbsent(DuctConstants.USE_LATEST, getUseLatest());\n        metaData.putIfAbsent(DuctConstants.VERSION, getVersion());\n        metaData.putIfAbsent(DuctConstants.TASK_TIMEOUT_MINS, getTaskTimeoutMins());\n    }\n\n    protected FilterRule getFilterRuleFromCAASRule(Criteria baseCriteria, Map<String, Object> fieldNameDataTypeMap,\n                                                   Map<String, GSFieldDefinition> fieldNameMetaMap,CaasConnectorConfig caasConnectionConfig, String objectName) {\n        FilterRule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            FilterRule internalFilterRule = new FilterRule();\n            if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                //handle if there is only one filter\n                internalFilterRule = createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap,caasConnectionConfig, objectName);\n                filterRules.add(internalFilterRule);\n                continue;\n            }\n            internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n            filterRules.add(buildRu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11d5ff8e-d973-4597-8b4d-d289f036fa2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":268,"endLine":296,"content":"e.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(StringUtils.SPACE);\n            String clause = Operators.getServicenowSqlClause(rule.getOp());\n            if (StringUtils.isEmpty(clause)) {\n                log.error(\"Invalid operator: {}\", rule.getOp());\n                throw new SystemException(String.format(\"Unknown operator type passed %s\", rule.getOp()));\n            } else {\n                if (clause.contains(\"$left\")) {\n                    clause = clause.replace(\"$left\", rule.getFieldInfo().getName());\n                }\n                if (clause.contains(\"$right\")) {\n                    clause = clause.replace(\"$right\", StringUtils.join(rule.getValues().stream().map(value -> {\n                        Object val = value.getValue();\n                        return val;\n                    }).collect(Collectors.toList()), UCConstants.COMMA));\n                }\n\n                //Escape the caret character\n                if (clause.contains(CARET)) {\n                    clause = clause.replaceAll(CARET, DOUBLE_CARET);\n                }\n\n                stringBuilder.append(clause);\n                whereClause.add(stringBuilder.toString());\n            }\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            rule.getRules().forEach(childRule -> childRules.addAll(buildRule(childRule)));\n            whereClause.add(Joiner.on(UCConstants.SPACE + getServicenowConditionalOperator(rule.getCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3aa4faba-463d-4325-8de0-8e6a775d45a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectApiConfig.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_object_api_config\")\n@Getter\n@Setter\npublic class CaasObjectApiConfig extends MongoBaseBean implements Serializable {\n    public static final String CONNECTOR_TYPE_PROP = \"connectorType\";\n    public static final String OBJECT_NAME_PROP = \"objectName\";\n\n    @Indexed(background = true)\n    private ConnectorType connectorType;\n    @Indexed(background = true)\n    private String objectName;\n\n    private String label;\n\n    private String dataApi;\n    private String metadataApi;\n    private String writeDataApi;\n    private String writeDataObjectName;\n    private Map<String, Object> additionalProperties;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7e99df2-ee49-4c6a-a8d8-2ee22dff12d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct;\n\nimport com.gainsight.annotation.APIScope;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.dto.GsExternalSystemErrorMappingDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.enhance.metadata.EnhanceMetadataService;\nimport com.gainsight.duct.enums.AuthorizationLevel;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.engine.service.*;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.metadata.engine.GeneratedMetadataCache;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\nimport io.swagger.annotations.*;\nimport lombok.extern.slf4j.Slf4j;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.type.TypeReference;\nimport org.hibernate.validator.constraints.NotEmpty;\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils.ResponseObj;\n\nimport javax.validation.constr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"885f2e1f-b18a-4b2c-9b73-1f155882d9af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/MySQLConnectionDetailsEncryptor.java","startLine":1,"endLine":22,"content":"package com.gainsight.duct.utils.connectiondetailEncrytor.Impl;\n\nimport com.gainsight.bean.base.connection.BaseConnectionDetail;\nimport com.gainsight.bean.base.connection.MYSQLConnectionDetail;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.SimpleCryptor;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.EncryptConnectionDetails;\n\nimport java.util.Map;\n\npublic class MySQLConnectionDetailsEncryptor implements EncryptConnectionDetails {\n        @Override\n        public BaseConnectionDetail getConnectionDetails(Map inputProperties, String type) {\n            MYSQLConnectionDetail mysqlConnectionDetail = new MYSQLConnectionDetail();\n            SimpleCryptor simpleCryptor = CryptUtil.getSimpleCryptor();\n            mysqlConnectionDetail.setUrl(simpleCryptor.encrypt(inputProperties.get(\"databaseHost\").toString()).getValue());\n            mysqlConnectionDetail.setHost(simpleCryptor.encrypt(inputProperties.get(\"databaseHost\").toString()).getValue());\n            mysqlConnectionDetail.setPort(simpleCryptor.encrypt(inputProperties.get(\"databasePort\").toString()).getValue());\n            mysqlConnectionDetail.setUser(simpleCryptor.encrypt(inputProperties.get(\"username\").toString()).getValue());\n            mysqlConnectionDetail.setPwd(simpleCryptor.encrypt(inputProperties.get(\"password\").toString()).getValue());\n            mysqlConnectionDetail.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").toString()).getValue());\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1077940b-7b27-4a61-96bd-fa844772d0e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":195,"endLine":230,"content":"bjInputStream = new ObjectInputStream(inputStream);\n            return (GSFieldDefinition) objInputStream.readObject();\n        }\n        catch (Exception e) {\n            log.error(\"Exception in deep copying the GSFieldDefinition\", e);\n            return tempGSFieldDefinition;\n        }\n    }\n\n    private boolean isDateValue(Object value, GSFieldDefinition gsFieldDefinition) throws JSONException {\n        boolean result = false;\n        if (null != value && value instanceof String && !((String) value).isEmpty()) {\n            for (String format : SUPPORTED_FORMAT) {\n                try {\n                    LocalDate.parse(((String) value), DateTimeFormatter.ofPattern(format));\n                    result = true;\n                } catch (Exception ex) {\n                    log.info(\"Not a valid format\", ex.getMessage());\n                    continue;\n                }\n                if (result) {\n                    gsFieldDefinition.getMeta().getProperties().put(FORMAT, format);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean isDateTimeValue(Object value, GSFieldDefinition gsFieldDefinition) throws JSONException {\n        boolean result = false;\n        if (null != value && value instanceof String && !((String) value).isEmpty()) {\n            for (String format : SUPPORTED_FORMAT) {\n                try {\n                    LocalDateTime.parse(((String) value), DateTimeFormatter.ofPattern(format));\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b770f74b-2961-40ab-aca4-a4afe9860422","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.commons.gsobjects.ImportLookupLite;\nimport com.gainsight.commons.gsobjects.importlookup.LookUpMatchOption;\nimport com.gainsight.commons.gsobjects.importlookup.LookupInsertOption;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.dto.ExternalActivityRequestDto;\nimport com.gainsight.duct.beans.dto.ExternalDataRequestDto;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GSDTOTransformer {\n\n    public static void transformExternalActivityRequestDto(ExternalActivityRequestDto externalActivityRequestDto){\n        Map<String, ImportLookupLite> lookups = new HashMap<>();\n        List<Map<String, Object>> transformedRecords = new ArrayList<>();\n        for(Map<String, Object> record: externalActivityRequestDto.getRecords()){\n            Map<String, Object> directFields = new HashMap<>();\n            Map<String, Object> lookupFields = new HashMap<>();\n            for(Map.Entry<String,Object> tuple : record.entrySet()){\n                if(tuple.getKey().startsWith(DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX) && tuple.getValue() != null\n                        && StringUtils.isNotEmpty(String.valueOf(tuple.getValue()))){\n                    lookupFields.put(tuple.getKey(), tuple.getValue());\n                }else{\n                    directField","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67b82d9d-c113-419d-9452-aed07427d4f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightPxCaasMetadataServiceImpl.java","startLine":58,"endLine":85,"content":"HT_PX) {\n            List<GainsightPXFieldDescription> gainsightPXFieldDescriptionList = (List<GainsightPXFieldDescription>) gsIntegrationResponse.getResult();\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(\"objectName\", objectName);\n            retMap.put(\"objectId\", objectName);\n            retMap.put(\"label\", objectName);\n            retMap.put(\"fields\", constructPXFields(gainsightPXFieldDescriptionList, objectName));\n            return retMap;\n        } else {\n            return null;\n        }\n    }\n\n    private List constructPXFields(List<GainsightPXFieldDescription> gainsightPXFieldDescriptionList, String objectName) {\n        List fieldsList = new ArrayList();\n        Map field;\n        for (GainsightPXFieldDescription gainsightPXFieldDescription : gainsightPXFieldDescriptionList) {\n            field = new HashMap();\n            field.put(\"fieldName\", StringUtils.isNotEmpty(gainsightPXFieldDescription.getCanonicalName()) ? gainsightPXFieldDescription.getCanonicalName() : gainsightPXFieldDescription.getApiName());\n            field.put(\"dataType\", gainsightPXFieldDescription.getType());\n            field.put(\"label\", gainsightPXFieldDescription.getName());\n            field.put(\"objectLabel\", objectName);\n\n            Map meta = OBJECT_MAPPER.convertValue(gainsightPXFieldDescription, Map.class);\n            meta.put(\"originalDataType\", gainsightPXFieldDescription.getType());\n            field.put(\"meta\", meta);\n\n            fieldsList.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1146100-dd6a-49cf-8ea8-ad9cb09cd73c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/PostgresConnectionDetailsEncryptor.java","startLine":1,"endLine":22,"content":"package com.gainsight.duct.utils.connectiondetailEncrytor.Impl;\n\nimport com.gainsight.bean.base.connection.BaseConnectionDetail;\nimport com.gainsight.bean.base.connection.PostgresConnectionDetail;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.SimpleCryptor;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.EncryptConnectionDetails;\n\nimport java.util.Map;\n\npublic class PostgresConnectionDetailsEncryptor implements EncryptConnectionDetails {\n        @Override\n        public BaseConnectionDetail getConnectionDetails(Map inputProperties, String type) {\n            PostgresConnectionDetail postgresConnectionDetail = new PostgresConnectionDetail();\n            SimpleCryptor simpleCryptor = CryptUtil.getSimpleCryptor();\n            postgresConnectionDetail.setHost(simpleCryptor.encrypt(inputProperties.get(\"databaseHost\").toString()).getValue());\n            postgresConnectionDetail.setPort(simpleCryptor.encrypt(inputProperties.get(\"databasePort\").toString()).getValue());\n            postgresConnectionDetail.setUser(simpleCryptor.encrypt(inputProperties.get(\"username\").toString()).getValue());\n            postgresConnectionDetail.setPwd(simpleCryptor.encrypt(inputProperties.get(\"password\").toString()).getValue());\n            postgresConnectionDetail.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").toString()).getValue());\n            postgresConnectionDetail.setSslEnabled(true);\n            postgresConnectionDetail.set","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3df64c3d-c449-4149-a520-483d85d7bbaf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/PNPConnectionsInfoQuery.java","startLine":1,"endLine":42,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\n\npublic class PNPConnectionsInfoQuery extends Query {\n\n    public PNPConnectionsInfoQuery() {\n    }\n\n    public static PNPConnectionsInfoQuery from(Criteria criteria) {\n        PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery();\n        query.addCriteria(criteria);\n        return query;\n    }\n\n    public PNPConnectionsInfoQuery connectionId(String connectionId) {\n        addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_ID).is(connectionId));\n        return this;\n    }\n\n    public PNPConnectionsInfoQuery connectionType(ConnectorType connectionType) {\n        addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_TYPE).is(connectionType));\n        return this;\n    }\n\n    public PNPConnectionsInfoQuery connectionName(String connectionName) {\n        addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_NAME).is(connectionName));\n        return this;\n    }\n\n    public PNPConnectionsInfoQuery  crmId(String crmId) {\n        addCriteria(Criteria.where(UCConstants.GSIntegration.CRM_ID).is(crmId));\n        return this;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27fec6de-5041-4571-8eb7-7c3f798e6271","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":28,"endLine":65,"content":"hquerybuilder.constructs.fields.FieldInfo;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.net.SocketTimeoutException;\nimport java.net.URLEncoder;\nimport java.time.Instant;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.gainsight.integration.bean.IPaasConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.FORWARD_SLASH;\nimport static com.gainsight.integration.utils.common.UCConstants.JSON;\n\npublic class PaginatedDataExtractionService implements DataExtractionService {\n    private HttpUrlConnectionUtils httpUrlConnectionUtils = new HttpUrlConnectionUtils();\n    private static final Logger LOGGER = LoggerFactory.getLogger(PaginatedDataExtractionService.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String RESULTS = \"results\";\n\n    public List<File> extractData(DataExtractionRequest","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11c6d541-d99e-43a5-9125-2a08b723e9a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":821,"endLine":848,"content":"              Boolean authorized = authorizeConnection(pnpConnectionInput.getPnpConnectionsInfo(),null);\n            } catch (Exception e) {\n                log.error(\"Error occured while authorizing connection\", e);\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT_DATA.getUserText()));\n            }\n        }\n        PNPConnectionsInfo pnpConnectionsInfoFromDb = pnpConnectionInfoDao.save(pnpConnectionsInfo);\n        updateRestApiOAuthConnectionInput(pnpConnectionsInfoFromDb);\n        return pnpConnectionsInfoFromDb;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateNewConnection(PNPConnectionInput pnpConnectionInput) throws Exception {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        List<BeanPropertyTracker> updatedPropertyList = new ArrayList<>();\n        boolean nativeEnabled = DuctUtils.checkIfIpaasAndFTEnabled(pnpConnectionsInfo);\n        if (!nativeEnabled) {\n            return DuctConnectorCalloutUtil.updateConnection(pnpConnectionInput);\n        } else {\n            pnpConnectionsInfo = updateConnection(pnpConnectionInput, updatedPropertyList);\n        }\n        pushAuditLogs(AuditOperationType.UPDATE, new UnifiedConnectorRequest(pnpConnectionsInfo), updatedPropertyList, EventStatusEnum.SUCCESS);\n        ductEventService.publishConnectionEvent(pnpConnectionsInfo, \"UPDATE\");\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuth","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"675c9322-d3f0-4028-941e-bbccd969565b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":81,"endLine":101,"content":"DataType))\n                    metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(fieldDataType).getValue());\n                if(field.get(\"custom\") != null)\n                    metaProperties.put(\"customField\",field.get(\"custom\").asBoolean());\n                metaProperties.put(SOURCE, FieldSaveType.METADATA_API);\n                if (ObjectUtils.isNotEmpty(metaProperties))\n                    meta.put(PROPERTIES, metaProperties);\n                if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n                    meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n                if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n                    meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n                if(field.get(\"type\").asText().equals(\"picklist\") && field.get(\"options\") != null && !field.get(\"options\").get(\"option\").isNull()){\n                    JsonNode optionList = field.get(\"options\").get(\"option\");\n                    List<Map> options = new ArrayList<>();\n                    for (JsonNode option : optionList) {\n                        Map<String, Object> picklistOption = new HashMap<>();\n                        picklistOption.put(VALUE, option.asText());\n                        picklistOption.put(LABEL, option.asText());\n                       options.add(picklistOption);\n                    }\n                    retMap.put","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c021740e-f31a-4fb0-b346-73f940b62ca7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":136,"endLine":154,"content":"\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Force refresh metadata\", response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/{connectionId}/{objectname}/generated/attributes/{recordId}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getGeneratedObjectAttributesUsingEngineForSingleRecrod(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                                              @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                                                              @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"recordId\") String recordId,\n                                                                              @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer) {\n        try {\n            return new ResponseObj(true, metadataDriver.initiateMetadataRefresh(connectionId, objectName, recordId));\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e80ad776-1df1-4b93-960a-4aac72153116","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/config/dbqueue/DynamicQueuePropertiesConfigProvider.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.config.dbqueue;\n\nimport com.gainsight.queue.db.enums.DbQueueConfigType;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.queue.db.settings.DbQueueConfigProvider;\nimport com.gainsight.queue.db.settings.DbQueueConfiguration;\nimport com.gainsight.queue.db.settings.DynamicDbQueueConfiguration;\nimport com.gainsight.utils.JsonUtil;\n\nimport java.io.InputStream;\n\n\npublic class DynamicQueuePropertiesConfigProvider implements DbQueueConfigProvider {\n\n    private final QueueConfigBean queueConfigBean;\n\n    public DynamicQueuePropertiesConfigProvider(){\n        InputStream projectFile =\n                getClass().getClassLoader().getResourceAsStream(\"dbConfig.json\");\n        queueConfigBean = JsonUtil.readObject(projectFile, QueueConfigBean.class);\n    }\n\n\n    @Override\n    public DbQueueConfiguration getConfiguration(QueueInfo queueInfo, DbQueueConfigType dbQueueConfigType) {\n        DbQueueConfiguration dbQueueConfiguration = null;\n        String queueNameLower = queueInfo.getQueueName().toLowerCase();\n        String queueNameUpper = queueInfo.getQueueName().toUpperCase();\n        switch (dbQueueConfigType) {\n            case CONSUMER:\n                if (queueConfigBean.getConsumer() != null) {\n                    dbQueueConfiguration = queueConfigBean.getConsumer().get(queueNameUpper);\n                    if (dbQueueConfiguration == null) {\n                        dbQueueConfiguration = queueConfigBean.getConsumer().get(queueNameLower);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18d12cd4-fc88-4f8e-8a09-cbf2e65e3d78","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":122,"endLine":144,"content":"    } catch (IOException e) {\n                log.error(\"Error in converting json to object: {}\", e.getMessage(), e);\n                throw new RuntimeException(e);\n            }\n        }\n\n        String dataType = String.valueOf(dataTypeMap.getOrDefault(\"type\", \"TEXT\"));\n        if (\"user_defined_type\".equalsIgnoreCase(dataType)) {\n            // this is done for geography data type\n            dataType = dataTypeMap.get(\"gludt\")!= null?String.valueOf(dataTypeMap.get(\"gludt\")) :dataType;\n        }\n        retMap.put(IPaasConstants.LABEL, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n        retMap.put(FIELD_NAME, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n        retMap.put(DB_NAME,String.valueOf(fieldDetails.get(COLUMN_NAME)));\n        retMap.put(OBJECT_LABEL, objectName);\n        meta.put(ORIGINAL_DATA_TYPE, dataType);\n        String finalDataType = dataType;\n        if (ARRAY_DATATYPE.equals(dataType)) meta.put(\"multiValued\", true);\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(finalDataType))) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(finalDataType)).findFirst().get();\n            retMap.put(IPaasConstants.DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FIL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d2cf0ac-bdb5-4eea-acfd-4ff14bbf19c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/MSTeamsValidationDataSourceService.java","startLine":83,"endLine":91,"content":"pported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8d58d5c-6229-4863-b251-724eada8e081","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/CaasConnectorConfigServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct;\n\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAOImpl;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Slf4j\n@Service\npublic class CaasConnectorConfigServiceImpl implements CaasConnectorConfigService {\n\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n    @Autowired\n    CaasConnectorConfigDAOImpl caasConnectorConfigDAO;\n\n    @Override\n    public CaasConnectorConfig getConnectorConfig(ConnectorType connectorType) {\n        CaasConnectorConfig caasConnectorConfig = null;\n        try {\n            caasConnectorConfig = (CaasConnectorConfig) redisCacheUtility.getValue(DuctConstants.CAAS_CONNECTION_CONFIG_CACHE_KEY + connectorType);\n        } catch (Exception e){\n            log.error(\"exception occured while fetching caasConnectionConfig\",e);\n        }\n        if(caasConnectorConfig == null){\n            caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(connectorType);\n            redisCacheUtility.putValue(DuctConstants.CAAS_CONNECTION_CONFIG_CACHE_KEY + connectorType , caasConnectorConfig);\n        }\n        return caasConnectorConfig;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"900379d2-492e-4c0b-a3f8-ec806451b1b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":186,"endLine":200,"content":"eMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n    DataTypeMappings requiredDataTypeMapping = dataTypeMappings\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(externalSourceDataType) && dataTypeMapping.isSupported())\n        .findFirst()\n        .orElse(null);\n\n    if (Objects.isNull(requiredDataTypeMapping)) {\n      return null;\n    }\n    return requiredDataTypeMapping;\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"287d410a-f060-4f62-b1bd-963fe0c31b62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":234,"endLine":249,"content":"          gsFieldDefinition.setDataType(String.valueOf(field.get(DATA_TYPE)));\n            gsFieldDefinition.setDbName(String.valueOf(field.get(DB_NAME)));\n            GSFieldMeta fieldMeta = gson.fromJson(gson.toJson(field.get(META)), new TypeToken<GSFieldMeta>(){}.getType());\n            fieldMeta.getProperties().put(\"fieldSaveType\",saveType);\n            if(FieldSaveType.ENHANCED == saveType) {\n                fieldMeta.getProperties().put(\"createdAt\", GainsightUtils.getCurrentUTCDate());\n            }\n            fieldMeta.getProperties().put(\"modifiedAt\",GainsightUtils.getCurrentUTCDate());\n            fieldMeta.getProperties().put(\"source\", FieldSaveType.ENHANCED);\n            gsFieldDefinition.setMeta(fieldMeta);\n            gsFieldDefinition.setLastModifiedAt(GainsightUtils.getCurrentUTCDate());\n            enhancedGSFieldDefinitions.add(gsFieldDefinition);\n        });\n        return enhancedGSFieldDefinitions;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67c239a3-0523-4ad0-8cf9-e7e5cbe23e8b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/TimelineLoadServiceImpl.java","startLine":60,"endLine":81,"content":"tJobMapping.getJobId(), externalActivityRequestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            //headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String url = DeploymentProperties.getDeploymentProperties().getValue(\"gs.scribble.base.url\");\n            url = url + \"/ant/es/activity\";\n            //check response\n            HttpResponseWrapper<ResponseObj> response = null;\n            if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                response = AdvancedHttpHelper.post(url, headers, JsonUtil.toJsonString(externalActivityRequestDto), ResponseObj.class);\n            } else if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                url = url + \"?identifier=\" + ductRequestDTO.getIdentifiers().get(0);\n                response = AdvancedHttpHelper.put(url, headers, JsonUtil.toJsonString(externalActivityRequestDto), ResponseObj.class);\n            }\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae112291-96da-4190-91d5-8fee7d7f59d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":117,"endLine":146,"content":"ACCOUNT + \"/\" + \"attributes\", GET);\n                break;\n\n            case GAINSIGHT_PX_USER:\n                httpURLConnection = getHttpURLConnection(pnpConnectionsInfo.getProperties().get(PX_URL) + \"admin/model/\" + GAINSIGHT_PX_USER + \"/\" + \"attributes\", GET);\n                break;\n\n            default:\n                throw new SystemException(\"Not a valid object to query!!\");\n        }\n        try {\n            InputStream inputStream = httpURLConnection.getInputStream();\n            return inputStream;\n        } catch (Exception ex) {\n            if(ex.getMessage().contains(\"response code: 401\"))\n                throw new SystemException(\"Incorrect Access Key\", ex, CaasValidationCode.INVALID_ACCESS_KEY, httpURLConnection.getResponseCode());\n            else {\n                throw new SystemException(\"Error in connecting and getting  Gainsight PX metadata\", ex, CaasValidationCode.GAINSIGHT_PX_METADATA_FETCH_ERROR, httpURLConnection.getResponseCode());\n            }\n        }\n    }\n    @Override\n    public InputStream getSubscriberResponse(PNPConnectionsInfo pnpConnectionsInfo) throws IOException{\n        HttpURLConnection httpURLConnection;\n        httpURLConnection = getHttpURLConnection( pnpConnectionsInfo.getProperties().get(PX_URL) + \"admin/\" + GAINSIGHT_PX_SUBSCRIPTION , GET);\n        try {\n            InputStream inputStream = httpURLConnection.getInputStream();\n            return inputStream;\n        } catch (Exception ex) {\n            throw new SystemExceptio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b766b46-1f73-47ca-9bfc-a73330fabf8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StopWatch;\nimport org.springframework.util.StringUtils;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.prefs.CsvPreference;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctErrorConstants.*;\n\n@Service\n@Slf4j\npublic class ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8b5f98e-5bdd-4e03-adb6-1198d89b1e3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasMetadataTransformationConfigDAOImpl.java","startLine":31,"endLine":50,"content":"   caasMetadataTransformationConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasMetadataTransformationConfig caasMetadataTransformationConfig, String s) {\n\n    }\n\n    @Override\n    public CaasMetadataTransformationConfig getConfigByConsumer(String consumer) {\n        if (StringUtils.isEmpty(consumer)) consumer = \"GLOBAL\";\n        Query query = Query.query(Criteria.where(\"consumer\").regex(consumer, \"i\"));\n        return getMongoTemplate().findOne(query, CaasMetadataTransformationConfig.class);\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(CaasMetadataTransformationConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7220c100-6f50-4256-8ed6-45b3de18c308","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":70,"endLine":97,"content":"eam pullData(String objectType, String filterQuery) throws IOException{\n        return pullData(objectType, filterQuery, UCEnvSpecificConfigDetailUtil.getUCConnectPxApiUrl());\n    }\n\n    @Override\n    public InputStream pullData(String objectType, String filterQuery ,String baseEndPointUrl) throws IOException {\n        if(baseEndPointUrl == null)\n            baseEndPointUrl=UCEnvSpecificConfigDetailUtil.getUCConnectPxApiUrl();\n        HttpURLConnection httpURLConnection;\n        switch (objectType) {\n            case GAINSIGHT_PX_ACCOUNT:\n                httpURLConnection= getHttpURLConnection(\n                        baseEndPointUrl + ACCOUNTS + UCConstants.GSIntegration.GAINSIGHT_PX_PAGE_SIZE +\n                                filterQuery, GET);\n                break;\n            case GAINSIGHT_PX_USER:\n                httpURLConnection= getHttpURLConnection(\n                        baseEndPointUrl + CS_INTEGRATION + USERS +\n                                UCConstants.GSIntegration.GAINSIGHT_PX_PAGE_SIZE + INCLUDE_ACCOUNT_DETAILS + filterQuery, GET);\n                break;\n            default:\n                throw new SystemException(\"Not a valid object to query!!\");\n        }\n        try {\n            return httpURLConnection.getInputStream();\n        } catch (Exception ex) {\n            if(ex.getMessage().contains(\"response code: 401\"))\n                throw new SystemException(\"Incorrect Access Key\", ex, CaasValidationCode.INVALID_ACCESS_KEY, httpURLConnection.getRespons","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f812b78-ba9d-4864-adbf-938f3b21c8f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":119,"endLine":141,"content":"shouldContinue = false;\n                    }\n                    currentNumberOfRecordsSync = currentNumberOfRecordsSync + arr.length();\n                    LOGGER.info(\"Records synced {}\", currentNumberOfRecordsSync);\n                    if (httpResponse.getRespMsg().isEmpty()) {\n                        shouldContinue = false;\n                    }\n                } else {\n                    LOGGER.info(\"Headers received are {}\", httpResponse.getResponseHeaders());\n                    String respMsg = httpResponse.getRespMsg();\n                    LOGGER.error(\"Extraction call not successful due to  {} , retrying for {}\", respMsg, retryCounter);\n                    if (retryCounter >= maxNoOfRetries) {\n                        throw new Exception(String.format(\"Error occured while trying to extract data , exhausted maximum number of retries %s\", retryCounter));\n                    }\n                    retryCounter++;\n                    shouldContinue = true;\n                    secondsToWaitForRetry = calculateRetryWaitTime(dataExtractionRequest, respMsg, secondsToWaitForRetry);\n                    long sleepOnFail = dataExtractionRequest.getDefaultSleepTimeOnFail() == 0 ?\n                            retryCounter * secondsToWaitForRetry : dataExtractionRequest.getDefaultSleepTimeOnFail() * secondsToWaitForRetry;\n                    Thread.sleep((sleepOnFail * 1000));\n                }\n\n                LOGGER.info(\"Total records synced {} are\", currentNumberOfRecordsSync);","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a50f7e2f-8317-4be9-8a0f-08f824e0afc4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":400,"endLine":418,"content":"n.COMPANY_PERSON_IDENTIFIER))) {\n            String externalAccountIdFieldName = \"ExternalAccountId_\" + StringUtils.capitalize(StringUtils.lowerCase(StringUtils.remove(pnpConnectionsInfo.getCrmId(), \"-\")));\n            CollectionMasterV2 companyObject = collectionMasterService.findOneV2(new CollectionMasterQuery().standardObjectType(StandardObjectType.COMPANY), false, true, MetadataVersion.getLatestVersion());\n            Map<ColumnAdditionalKey, Object> prop = new HashMap<>();\n            prop.put(ColumnAdditionalKey.CRM_ID, pnpConnectionsInfo.getCrmId());\n            if (Objects.isNull(companyObject.getColumn(externalAccountIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalAccountIdFieldName);\n                column.setDisplayName(\"External Account ID_\" + tenantDomain);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Account ID from Microsoft Dynamics 365 Tenant, \" + tenantDomain);\n                column.setProperties(prop);\n                companyObject.getAllColumns().add(column);\n                collectionMasterService.updateStandardCollection(companyObject);\n            }\n            properties.put(UCConstants.GSIntegration.COMPANY_IDENTIF","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2025d9e5-ef49-4d0d-870c-ddcceb9a6dd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":285,"endLine":310,"content":"META, meta);\n\n            //override meta on datatype level if required based on datatype config.\n            if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n                DuctCollectionUtils.deepMerge((Map<String, Object>) fieldDefinition.get(META), dataTypeMappingsForField.getMeta());\n            }\n\n            fieldsList.add(fieldDefinition);\n        }\n        objectDefinition.put(FIELDS, fieldsList);\n        return objectDefinition;\n    }\n\n    private List<JsonNode> getIpaasObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> queryParams) throws CaasException {\n        try {\n            IpaasAccountUserDetails ipaasAccountUserDetails = ipaasAccountUserDetailsDao.findByTenantId(pnpConnectionsInfo.getTenantId());\n            HttpUrlConnectionUtils httpUrlConnection = new HttpUrlConnectionUtils();\n            HttpResponse httpResponse = httpUrlConnection.get(IpaasFeatureToggleUtility.getCEBaseURL()\n                            + CLOUD_API_BASE_URL + OBJECTS,\n                    IpaasHelperService.getConnectionSpecificHeaders(ipaasAccountUserDetails, pnpConnectionsInfo),\n                    TIMEOUT, false, queryParams);\n            String respMsg = httpResponse.getRespMsg();\n            if (httpResponse.getResponseCode() != 200) {\n                LOGGER.error(\"{CAAS} Error in External System \");\n                Map<String, Object> responseMap = OBJECT_MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4d345f6e-cbdb-4f47-b972-0355acaa5007","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctCommonConstants.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.constants;\n\n\nimport com.gainsight.duct.enums.DuctAppType;\nimport com.gainsight.properties.DeploymentProperties;\n\npublic class DuctCommonConstants {\n\n    public static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    public static final String DEFAULT_ENV = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n    public static final String GSNAP_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    public static final String MULTI_PX_ENABLED = \"MULTI_PX_ENABLED\";\n    public static final String PX_URL = \"URL\";\n    public static final String AUTHORIZATION_SCOPE_KEY = \"authorizationScopes\";\n    public static final String SUBDOMAIN = \"subdomain\";\n    public static final String CC_SSO_ENABLED = \"CC_SSO_ENABLED\";\n    public static final String PX_SSO_ENABLED = \"PX_SSO_ENABLED\";\n    public static final String CE_SSO_ENABLED = \"CE_SSO_ENABLED\";\n\n    private static DuctAppType appType;\n\n    private DuctCommonConstants() {\n    }\n\n    public static DuctAppType getAppType() {\n        return appType;\n    }\n\n    public static void setAppType(DuctAppType appType) {\n        DuctCommonConstants.appType = appType;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8960bd47-e316-461d-8193-d2845f9a2282","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackHubspotMessageProcessor.java","startLine":64,"endLine":84,"content":".getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                DuctJobMapping payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                log.info(\"Received payload for WriteBackHubspotMessageProcessor  : {}\", payload);\n                DuctCommonUtils.setContext(JsonUtil.readObject(CryptUtil.getSimpleCryptor().decrypt(payload.getEncryptedRequestInfo()), RequestInfo.class));\n                MDCContext.put(\"jobId\", payload.getJobId());\n                MDCContext.put(\"connectorType\", payload.getConnectorType().getValue());\n                if(payload.isBulk()){\n                    ductService.uploadBulkData(payload);\n                }\n                if(!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.INSERT){\n                    ductService.createSingleData(payload);\n                } else if(!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.UPDATE){\n                    ductService.updateSingleData(payload);\n                }\n                log.info(\"DuctMessageProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n            } catch (Exception exception) {\n                log.error(\"Error while processing DuctMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c7ddbfb-48a0-42d1-b3b4-cce2c946aad9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/PipedriveV2ConnectionService.java","startLine":92,"endLine":108,"content":"atch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to get auth url for Pipedrive : {0}\",e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, null, \"Error occurred while trying to generate authorization url\"));\n        }\n        return authUrl;\n    }\n\n    @Override\n    public PNPConnectionsInfo revokeAuthorization() {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo deleteConnection() {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79a59bd3-68d9-4903-a2e7-e228ba1d4f3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connectordependency/ConnectorDependencyFrameworkServiceImpl.java","startLine":67,"endLine":87,"content":"), ex);\n        }\n        return connectionDependencyList;\n    }\n\n    private Map<String, String> populateIdNameMap(String id, String name) {\n        Map<String, String> dependentAssetMap = new HashMap<>();\n        dependentAssetMap.put(ID, id);\n        dependentAssetMap.put(NAME, name);\n        return dependentAssetMap;\n    }\n\n    private Map<String, String> getHeaders() {\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, \"application/json\");\n        headers.put(SECRET, CryptUtil.getSimpleCryptor().encrypt(GSNAP_SECRET).getValue());\n        headers.put(REQUEST_INFO, RequestContextProvider.getEncryptedRequestInfo(true));\n\n        return headers;\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ffb57c8-302b-4ec5-a9ac-530306a98962","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":545,"endLine":569,"content":");\n        }\n    }\n\n    private void validateS3Info(DuctJobMapping ductJobMapping) throws CaasException {\n        if (ductJobMapping.getCaasS3FileDetails() == null || ductJobMapping.getCaasS3FileDetails().getBucketName() == null ||\n                (ductJobMapping.getCaasS3FileDetails().getFilesDir() == null || ductJobMapping.getCaasFileInfo().getFileName() == null)) {\n            log.error(DuctErrorConstants.INVALID_S3_FILE_DETAILS);\n            DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_S3_FILE_DETAILS, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateIfFilePresent(DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            boolean isFilePresent = DuctS3Utility.keyExists(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            if (!isFilePresent) {\n                log.error(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET);\n                DuctUtils.populateAndInsertError(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET, ductJobMapping.getJobId());\n            }\n        } catch (Exception e) {\n            log.error(\"Failed while trying to validate s3 file presence\", e);\n            if (!org.springframework.util.StringUtils.isEmpty(e.getMessage()))\n                DuctUtils.populateAndInsertError(e.getMessage(), ductJobMapping.getJobId());\n            else\n                DuctUtils.populateAndInsertError(INTERNAL_SYSTEM_ERROR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e29765b-aa16-43ff-a7ca-e651382ddf30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":27,"endLine":51,"content":"            && StringUtils.isNotEmpty(String.valueOf(tuple.getValue()))){\n                    lookupFields.put(tuple.getKey(), tuple.getValue());\n                }else{\n                    directFields.put(tuple.getKey(), tuple.getValue());\n                }\n            }\n\n            for(Map.Entry<String,Object> tuple : lookupFields.entrySet()){\n                String key = tuple.getKey();\n                ImportLookupLite importLookupLite = new ImportLookupLite();\n                importLookupLite.setLookupField(\"Gsid\");\n                importLookupLite.setObjectName(key.substring(\n                        key.indexOf(DuctConstants.LOOKUP_OBJECT_PATTERN)+ DuctConstants.LOOKUP_OBJECT_PATTERN.length()));\n                importLookupLite.setMultiMatchOption(LookUpMatchOption.FIRSTMATCH);\n                importLookupLite.setOnNoMatch(LookupInsertOption.ERROR);\n\n                String gsidFieldName = key.substring(\n                        key.indexOf(DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX) + DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX.length(),\n                        key.lastIndexOf(DuctConstants.LOOKUP_OBJECT_PATTERN));\n                String updatedGsidFieldName = DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX+gsidFieldName;\n\n                /*\n                 * adding prefix to the gsid field name so that downstream does not ambiguity in differentiating gsid field and source header\n                 */\n                directFields.put(updatedGsidFieldName,directFields.get(gsidField","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef6ee3b4-f90a-4f61-870e-7e7a1d2a7b03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":157,"endLine":174,"content":"me().equals(object)).map(ColumnMapping::getFieldName).collect(Collectors.toSet());\n                if (mappedFields.size() == 0) {\n                    log.error(MANDATORY_REQUIRED_KEYS_NOT_PRESENT);\n                    DuctUtils.populateAndInsertError(MANDATORY_REQUIRED_KEYS_NOT_PRESENT + String.join(\",\", mappedFields), ductJobMapping.getJobId());\n                }\n                ObjectDefinition resourceDefinition = metaInfoDefinitionMap.get(object);\n                try {\n                    boolean result = DuctUtils.handleValidationForExpression(resourceDefinition.getExpressionForRequiredFields(), mappedFields);\n                    if (!result) {\n                        log.error(\"MANDATORY_REQUIRED_KEYS_NOT_PRESENT for object : {}, keys: {}\", object, getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), resourceDefinition));\n                        validationFailed = true;\n                        errorMessageBuilder.append(object + \":\").append(getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), resourceDefinition)).append(\".\");\n                    }\n                } catch (CaasException e) {\n                    log.error(\"Error in validateAllowedUpsertKeys \", e);\n                    throw e;\n                } catch (Exception e) {\n                    log.error(\"Error in validating the required fields expression {}, {}\", getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), res","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2ca9f6c-d96e-418c-84de-f2e60e283cbd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":353,"endLine":362,"content":"bjectList) {\n                if (connectionIDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n        return filteredAndEnhancedObjectList;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c769a754-01a7-4622-944d-1a3b513d63a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFileUtility.java","startLine":43,"endLine":92,"content":"itten %d\", no_of_lines_written_file), e);\n    }\n    return no_of_lines_written_file;\n  }\n\n\n  public static File writeDataToLocalFile(InputStream inputStream) throws IOException {\n    File localFile = File.createTempFile(UUID.randomUUID().toString(), \".segmentio.tmp\");\n    FileUtils.copyInputStreamToFile(inputStream, localFile);\n    return localFile;\n  }\n\n  public static File writeDataToLocalFileCAAS(InputStream inputStream) throws IOException {\n    File localFile = File.createTempFile(UUID.randomUUID().toString(), \".csv\");\n    FileUtils.copyInputStreamToFile(inputStream, localFile);\n    return localFile;\n  }\n\n\n  public static boolean writeLineToFile(File file, String data){\n    try{\n      FileUtils.write(file,data, CharEncoding.UTF_8,true);\n      FileUtils.write(file,\"\\r\\n\",CharEncoding.UTF_8,true);\n      return true;\n    }catch(IOException e){\n      LOGGER.error(\"Error occurred while writing to error file\", e);\n      return false;\n    }\n  }\n\n  public static void deleteFilesQuietly(Collection<Path> files) {\n    try {\n      for (Path file : files) {\n        Files.deleteIfExists(file);\n      }\n    } catch (IOException e) {\n      LOGGER.debug(\"Exception in deleting temp file\", e);\n      // Ignore the error\n    }\n  }\n\n\n  public static void deleteFilesQuietlyInList(List<File> files) {\n    LOGGER.debug(\"Request received to delete files quietly\");\n    for (File file : files) {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n  public static String getFullS3Path(String basePath, Strin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2301062-c1b4-4fab-9c32-129c78b4ab8d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":554,"endLine":575,"content":"nt : {} , total count : {} , failed count : {} \", ductResponse.getSuccessRecords(),\n                ductResponse.getTotalNumberOfRecords(), ductResponse.getFailedRecords());\n    }\n\n    private void populateAndSetSourceErrorFile(Map<String, Object> errorData, DuctResponse ductResponse, DuctJobMapping ductJobMapping) {\n        File errorFile = new File(UUID.randomUUID() + \".json\");\n        List<Map<String, Object>> values = (List<Map<String, Object>>) errorData.get(\"results\");\n        try {\n            try (BufferedWriter writer = Files.newBufferedWriter(errorFile.toPath())) {\n                for (Map<String, Object> data : values) {\n                    writer.write(data.toString() + CARRIAGE_RETURN);\n                }\n            }\n\n            log.info(\"Trying to upload error file {}\", errorFile.getName());\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + errorFile.getName(), errorFile);\n            log.info(\"Upload completed for error file {}\", errorFile.getName());\n            String url = DuctS3Utility.getSignedURL(ductJobMapping.getCaasS3FileDetails().getBucketName(), 60 * 24 * 7, ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + errorFile.getName(), HttpMethod.GET).toString();\n            log.info(\"Url created\");\n            ductResponse.setSourceResponseFile(url);\n        } catch (Exception e) {\n            log.error(\"Error in creating and uploading the ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc577e69-9167-4f48-8c52-fd14bb87b019","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.utils.snowflake;\n\nimport com.gainsight.duct.enums.Operators;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections4.ListUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.wrapRoundBrackets;\n\n@Slf4j\npublic class DBConnectorsQueryBuilder {\n    private static final List<DataType> ENCLOSE_IN_SINGLE_QUOTE = Arrays.asList(DataType.STRING, DataType.DATE, DataType.DATETIME);\n    private static final List<FilterOperator> DATABRICKS_ENCLOSE_SINGLE_QUOTE = Arrays.asList(FilterOperator.STARTS_WITH, FilterOperator.CONTAINS, FilterOperator.DOES_NOT_CONTAINS);\n    private static final String UNIX_MILLIS = \"UNIX_MILLIS\";\n    private static final String OPEN_BRACKET = \"(\";\n    private static fi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b06927a-f4c7-4523-98a8-632ab49bcd9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.connection;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.base.connection.SAPDatasphereConnectionDetail;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelFactory;\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelService;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.collect.Lists;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.*;\nimport java.util.*;\n\n/**\n * createdBy: snargana\n * date: 12/08/24\n */\n\n@Slf4j\n@Order(10000)\n@Service","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bf092f6-65b1-4722-b6f0-94f69ea8050f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":80,"endLine":105,"content":"Prefix + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n            } else if (field.getValue().isArray()) {\n                handleSchemaGenerationForArray(finalFieldNamePrefix + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n            } else {\n                createGSFieldDefinition(finalFieldNamePrefix + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n            }\n        });\n    }\n\n    private void createGSFieldDefinition(String fieldName, JsonNode value, Map<String, GSFieldDefinition> generatedFieldDefinitions, Set<String> fieldNames) {\n        if (!fieldNames.contains(fieldName) && !value.isNull()) {\n            GSFieldDefinition gsFieldDefinition = new GSFieldDefinition();\n            String dataType = resloveDataType(gsFieldDefinition.getDataType(), value, gsFieldDefinition);\n            GSFieldMeta gsFieldMeta = new GSFieldMeta();\n            gsFieldDefinition.setFieldName(fieldName);\n            gsFieldDefinition.setDbName(fieldName);\n            gsFieldDefinition.setLabel(fieldName);\n            gsFieldDefinition.setDataType(dataType);\n            Map<String, Object> properties = new HashMap<>();\n            properties.put(\"GENERATED\", \"true\");\n            gsFieldMeta.setProperties(properties);\n            gsFieldMeta.setOriginalDataType(dataType);\n            gsFieldMeta.setFilterable(true);\n            if (value.isArray())\n                gsFieldMeta.setMultiValued(true);\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8b2ce6f6-78a6-4ab0-9122-f4aaedad7237","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasNativeMetadataServiceImpl.java","startLine":54,"endLine":88,"content":" objectIdsSet = new HashSet<>();\n        for (Map<String, Object> object : objectList) {\n            objectIdsSet.add(String.valueOf(object.get(OBJECT_ID)));\n        }\n\n        filteredAndEnhancedObjectList.addAll(objectList);\n\n        /*\n        Adding global object\n         */\n        if (caasObjectConfig != null) {\n\n            if (CollectionUtils.isNotEmpty(caasObjectConfig.getShowOnlyIncludedObjects())) {\n                for (Map<String, Object> object : objectList) {\n                    if (!caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                        filteredAndEnhancedObjectList.remove(object);\n                        objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                    }\n                }\n            }\n\n            for (Map<String, Object> object : caasObjectConfig.getAddedObjects()) {\n                if ((!objectIdsSet.contains(object.get(OBJECT_ID).toString()))\n                        && caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing global object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (caasObjectConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8002f969-e894-40db-ad11-2d3c14f8389b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/AhaDataSourceService.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n/**\n * @author puneetsaluja\n * @created 27/03/23\n */\n@Service\n@Order(400)\n@Slf4j\npublic class AhaDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String AHA_EXTRACT_TASK = \"CaasAhaExtract\";\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.AHA;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        return nu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"deaee1d0-5656-4f3b-b615-e2af511a8b4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":207,"endLine":231,"content":"nantId);\n                    try {\n                        boolean continueIt = UCCommonUtility.initRequestContextSuccessfully(tenantId);\n                        if (!continueIt) {\n                            LOGGER.error(\"Error initializing context\");\n                            writeOutData(icsvOutWriter, tenantId, null, null, null, null, \"Failed\", \"Unable to initialize Request Context\");\n                            continue;\n                        }\n                        List<String> objects = entry.getValue();\n                        initializeComparison(tenantId, icsvOutWriter, baseUrl, connectorType, objects, superClassInfo);\n                        LOGGER.info(\"processing completed for tenant: {}\", tenantId);\n                        successTenants.put(tenantId, \"Completed\");\n                    } catch (Exception e) {\n                        LOGGER.info(\"processing failed for tenant: {}\", tenantId);\n                        LOGGER.error(\"Error in modifying jobs \", e);\n                        writeOutData(icsvOutWriter, tenantId, RequestContextProvider.getTenantName(),\n                                RequestContextProvider.getTenantType(), null, null, \"Failed\", e.getMessage());\n                        failedTenants.put(tenantId, e.getMessage());\n                    } finally {\n                        resetContext();\n                        LOGGER.info(\"Context reset successful for tenant: {}\", tenantId);\n                    }\n                }\n            } else {\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba40dbdd-fd9c-442f-8ee4-7f3b79e84b5f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":339,"endLine":362,"content":"      try {\n                CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n                validateObject(objectName,service.getObjects(pnpConnectionsInfo,null));\n                return service.getObjectAttributesUsingEngine(objectName, pnpConnectionsInfo);\n            } catch (CaasException excp) {\n                log.error(\"error in getObjectAttributes\", excp);\n                throw new CaasException(getGsExternalSystemErrorMapping(pnpConnectionsInfo, true, excp.getGsExternalSystemErrorMapping()));\n            } catch (Exception e){\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE,e));\n            }\n        } else{\n            CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.GAINSIGHT, false);\n            Map<String, ObjectDefinition> objectList = service.getObjectAttributes(objectName,null, consumer);\n            return objectList;\n        }\n    }\n\n    @Override\n    public List<Map<String, Object>> getFileDetails(String connectionId, Set<String> fileIds, boolean signedUrl) throws CaasException {\n        PNPConnectionsInfo connectionsInfo = getConnectionId(connectionId);\n        DuctUtils.validateConnection(connectionsInfo);\n        List<Map<String, Object>> fileDetailsList = new ArrayList<>();\n\n        switch (connectionsInfo.getConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be899276-7ca6-4745-9d09-f1f112b7caa3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":57,"endLine":90,"content":"() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.REQUEST_ID_COLUMN, entity.getRequestId());\n        }\n\n        if(entity.getJobId() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.JOB_ID_COLUMN, entity.getJobId());\n        }\n        if(entity.getResponsePayload() != null){\n            m.put(GsExternalSystemErrorMappingRowMapper.RESPONSE_PAYLOAD_COLUMN, JsonUtil.toJsonString(entity.getResponsePayload()));\n        }\n        if(entity.getRequestPayload() != null){\n            m.put(GsExternalSystemErrorMappingRowMapper.REQUEST_PAYLOAD_COLUMN, JsonUtil.toJsonString(entity.getRequestPayload()));\n        }\n        if(entity.getExceptionStackTrace() != null){\n            m.put(GsExternalSystemErrorMappingRowMapper.EXCEPTION_STACKTRACE_COLUMN, JsonUtil.toJsonString(entity.getExceptionStackTrace()));\n\n        }\n        if(entity.getMessage() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.MESSAGE_COLUMN, entity.getMessage());\n        }\n        return m;\n    }\n\n    @Override\n    public GsExternalSystemErrorMapping update(GsExternalSystemErrorMapping o) {\n        GsExternalSystemErrorMapping us = super.update(o);\n        o = us;\n        return us;\n    }\n\n\n    public void findAndSave(GsExternalSystemErrorMapping gsExternalSystemErrorMapping, String searchString) {\n        String value  = StringUtils.isEmpty(searchString) ? gsExternalSystemErrorMapping.getExternalSystemErrorMessage() : searchString;\n        String query = \"SELECT ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"346e4845-4723-43b7-b68d-0571471a7352","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":171,"endLine":210,"content":"nPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_SERVICENOW_EXTRACT;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.servicenow.external.task.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.servicenow.external.task.extract.version\", \"v1\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.servicenow.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SERVICENOW);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    private MetadataEngineConfig getMetadataCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a85d80d-0d15-4435-8c38-3780ab42f648","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":186,"endLine":209,"content":"ErrorMessage(errorMessage);\n                gsExternalSystemErrorMapping.setRequestPayload(MAPPER.convertValue(ductJobMapping, Map.class));\n                log.info(\"updating the error table\");\n                gsExternalSystemErrorMappingDao.insert(gsExternalSystemErrorMapping);\n                Map<String, Object> externalSystemResponseMap = Maps.newHashMap();\n                externalSystemResponseMap.put(\"error\", errorMessage);\n                ductJobMapping.setExternalSystemResponse(externalSystemResponseMap);\n                ductJobMapping.setDuctStatus(DuctStatus.FAILED);\n                log.info(\"updating the duct mapping collection \");\n                ductJobMappingDao.update(ductJobMapping);\n                break;\n            }\n        }\n    }\n\n    private void handleSuccessDHExtract(JsonNode taskResults, DuctJobMapping ductJobMapping, long recordCount, char quoteChar,\n                                        char escapeChar) throws CaasException {\n        String s3PathOfTaskOutput = null;\n        if(ObjectUtils.isNotEmpty(taskResults.findValue(\"taskOutputBatchs\").get(0).get(\"batchFile\"))) {\n            s3PathOfTaskOutput = taskResults.findValue(\"taskOutputBatchs\").get(0).get(\"batchFile\").asText();\n        } else {\n            Map<String, Object> batchFileDetails = new ObjectMapper().convertValue(taskResults.findValue(\"taskOutputBatchs\").get(0).get(\"batchFileDetails\"), new TypeReference<Map<String, Object>>() {\n            });\n            s3PathOfTaskOutput = DuctS3Util","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c672fd2-43e6-413f-8538-c653a063984a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":450,"endLine":473,"content":"eMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n\n        DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), internalFieldInfo, fieldNameMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not null, null the values can be empty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n                    value.setValue(val);\n                    fieldInfoValues.add(value);\n                }\n            } else {\n                FieldInfo value = new FieldInfo();\n                value.setFieldType(FieldType.VALUE);\n                DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef66ddce-a482-4e3c-944c-29b27f2d5608","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchServiceImpl.java","startLine":95,"endLine":117,"content":"scription(PNPConnectionsInfo pnpConnectionInfo) {\n        UCAptrinsicChannelService ucAptrinsicChannelService = getUCAptrinsicChannelService(pnpConnectionInfo);\n        InputStream inputStream = null;\n        try {\n            inputStream = ucAptrinsicChannelService.getSubscriberResponse(pnpConnectionInfo);\n            JsonNode jsonNode = mapper.readTree(inputStream);\n            JSONObject jsonObject = new JSONObject(jsonNode.toString());\n            pnpConnectionInfo.getProperties().put(UCConstants.GSIntegration.GAINSIGHT_PX_SUBSCRIPTION_ID, jsonObject.get(\"id\"));\n            pnpConnectionInfo.getProperties().put(UCConstants.GSIntegration.GAINSIGHT_PX_SUBSCRIPTION_TIME_ZONE, jsonObject.get(\"timeZone\"));\n        } catch (IOException | JSONException e) {\n            LOGGER.error(\"Error while getting Gainsight subscription\", e);\n            throw new SystemException(\"Error while getting Gainsight subscription\", e);\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n        return pnpConnectionInfo;\n    }\n\n    @Override\n    public List<String> getAllObjects() {\n        return GainsightPXObjectsEnum.getAllObjects();\n    }\n}\n\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0488dd7-4095-47c2-a4c9-1852579cda4c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":227,"endLine":242,"content":"isEmpty());\n                // TODO: Specific analysis for external filters to be performed for all connectors\n//                meta.put(\"externallyFilterable\", !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            } else if (field.get(TYPE) != null && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(TYPE).asText()))) {\n                dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(TYPE).asText())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                metaProperties.put(CE_TYPE.toUpperCase(), field.get(TYPE).asText());\n                if (complexTypeMappings.containsKey(field.get(TYPE).asText()))\n                    metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.get(TYPE).asText()).getValue());\n                meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                // TODO: Specific analysis for external filters to be performed for all connectors\n//                meta.put(\"externallyFilterable\", !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            } else {\n                /*fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                meta.put(FILTERABLE, true);\n                meta.put(EXTERNAL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7a6fae0d-751f-4f14-bae5-c504a7221983","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":1,"endLine":40,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.audit;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.integration.bean.audit.AuditRecord;\nimport com.gainsight.integration.bean.enums.audit.AuditEntityType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.web.client.HttpClientService;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.codehaus.jackson.JsonNode;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\nimport org.codehaus.jackson.node.ArrayNode;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\n@Service\npublic class DuctAuditLogClientServiceImpl implements DuctAuditLogClientService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctAuditLogClientServiceImpl.class);\n    private static final String AUDIT_SERVICE_AUDIT_TOKEN = \"authToken\";\n    pr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15e61e63-efbd-464a-98cc-ec1c3daf6fe8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":83,"endLine":106,"content":"ta(), Map.class);\n            return transformToObjectDefinition(map, objectName, consumer);\n        } catch (Exception e) {\n            log.error(\"Not able to fetch attributes of object\", e);\n            throw new CaasException(\"Not able to fetch the object list now\", CaasValidationCode.FAILED_TO_FETCH_GAINSIGHT_OBJECTS);\n        }\n    }\n\n    private Map<String, ObjectDefinition> transformToObjectDefinition(Map<String, Map<String, Object>> object, String objectName, String consumer) {\n        ObjectDefinition objectDefinition = new ObjectDefinition();\n        Map<String, Object> objectDef = object.get(objectName.toLowerCase());\n        objectDefinition.setObjectId(objectName);\n        objectDefinition.setObjectName(objectName);\n        objectDefinition.setLabel(objectName);\n        objectDefinition.setAccessible(true);\n        objectDefinition.setDbName(objectDef.get(\"dbName\").toString());\n        objectDefinition.setSource(objectDef.get(\"source\").toString());\n        objectDefinition.setObjectType(CollectionObjectGroupType.forValue(objectDef.get(\"objectType\").toString()));\n        objectDefinition.setDataEditability(objectDef.get(\"dataEditability\").toString());\n        objectDefinition.setSchemaEditability(objectDef.get(\"schemaEditability\").toString());\n        List<GSFieldDefinition> gsFieldDefinitions = new ObjectMapper().convertValue(objectDef.get(\"fields\"), new TypeReference<List<GSFieldDefinition>>() {\n        });\n        if (StringUtils.isNotEmpty(consumer)) {\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7bb0099-3b3b-4822-953c-91cb85001cbf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":25,"endLine":50,"content":".dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.metadata.engine.converter.OMDConverterBaseService;\nimport com.gainsight.duct.metadata.engine.converter.OMDConverterFactory;\nimport com.gainsight.duct.metadata.engine.generator.SchemaGeneratorService;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.MetadataJobStatus;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.queue.db.bean.MessageRequestDTO;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.producer.QueueProducer;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c060706-1107-41c2-93e9-6293dd14ea05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/PipedriveV2ConnectionService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.a","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90117eb6-c4a9-41c2-8540-e709d461a47c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":403,"endLine":431,"content":" {\n            accountQuery.snId(subdomain);\n        }\n        return accountQuery;\n    }\n    private AccountDetail populateAccountDetailForWidget(PNPConnectionsInfo pnpConnectionsInfo, String snId) {\n        AccountDetail accountDetail = new AccountDetail();\n        accountDetail.setAccountType(AccountType.ZENDESK);\n        accountDetail.setDisplayName(snId);\n        accountDetail.setSnId(snId);\n        accountDetail.setStatus(AccountStatus.AUTHORIZED);\n        accountDetail.setDefaultAccount(true);\n        accountDetail.setTenantId(pnpConnectionsInfo.getTenantId());\n        if(ObjectUtils.isNotEmpty(pnpConnectionsInfo.getTokenDetail()))\n            accountDetail.setTokenDetail(pnpConnectionsInfo.getTokenDetail());\n\n        Map<String, Object> prop = com.google.common.collect.Maps.newHashMap();\n        prop.put(IPAAS_CONNECTION, Boolean.FALSE);\n        prop.put(DuctConstants.VERSION, ZendeskVersionConstants.ZENDESK_V2.getVersion());\n        prop.put(\"connectionId\", pnpConnectionsInfo.getConnectionId());\n\n        accountDetail.setProperties(prop);\n        return accountDetail;\n    }\n\n    private void postAuthorization(AuthDetails authDetails, PNPConnectionsInfo pnpConnectionsInfo, MetadataEngineConfig metadataEngineConfig) throws Exception {\n        com.fasterxml.jackson.databind.JsonNode resultData = null;\n        AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n        Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"292a1a40-6924-48be-97ac-108c77c25d36","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesTenantConfigDAOImpl.java","startLine":49,"endLine":74,"content":"tName).and(\"tenantId\").is(tenantId).and(\"connectionId\").is(connectionId));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesConfigsConnectionIdLevel = getMongoTemplate().find(query, CaasObjectAttributesTenantConfig.class);\n        if (CollectionUtils.isEmpty(caasObjectAttributesConfigsConnectionIdLevel)) {\n            LOGGER.warn(\"CaasObjectAttributesConfigs at connectionId level found is null \");\n            return Lists.newArrayList();\n        }\n        return caasObjectAttributesConfigsConnectionIdLevel;\n    }\n\n    @Override\n    public List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String tenantId) {\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType).and(\"tenantId\").is(tenantId));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesConfigsTenantLevel = getMongoTemplate().find(query, CaasObjectAttributesTenantConfig.class);\n        if (CollectionUtils.isEmpty(caasObjectAttributesConfigsTenantLevel)) {\n            LOGGER.warn(\"CaasObjectAttributesConfigs at tenant level found is null \");\n            return Lists.newArrayList();\n        }\n        return caasObjectAttributesConfigsTenantLevel;\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"141a456d-2beb-49e7-9cb9-b84cce0d6f9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":137,"endLine":162,"content":"eMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(DuctConstants.DECIMAL)).findFirst().get();\n            if (!dataTypeMappingsForField.isSupported()) {\n                return null;\n            }\n            Integer scale = DuctUtils.extractScaleFromDecimal(fieldDataType);\n            if (null != scale) {\n                meta.put(DECIMAL_PLACES, scale);\n            }\n            meta.putIfAbsent(ORIGINAL_DATA_TYPE, DuctConstants.DECIMAL.toLowerCase());\n        } else if (DuctUtils.isStructType(fieldDataType)) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(DuctConstants.STRUCT)).findFirst().get();\n            if (!dataTypeMappingsForField.isSupported()) {\n                return null;\n            }\n            meta.putIfAbsent(ORIGINAL_DATA_TYPE, DuctConstants.STRUCT.toLowerCase());\n        } else if (DuctUtils.isArrayType(fieldDataType)) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(DuctConstants.ARRAY)).findFirst().get();\n            if (!dataTypeMappingsForField.isSupported()) {\n                return null;\n            }\n            meta.putIfAbsent(ORIGINAL_DATA_TYPE, DuctConstants.ARRAY.toLowerCase());\n        } else if (DuctUtils.isMapType(fieldDataType)) {\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8b3a2a4c-2af5-4852-8fb9-b54384645d10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":218,"endLine":240,"content":"ver snowflakeDriver = new SnowflakeDriver();\n            jdbcConnection = snowflakeDriver.connect(url, prop);\n\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            log.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = jdbcConnection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            log.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = jdbcConnection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_tz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            log.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = jdbcConnection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            tempStageName = \"gs_int_\" + jobId.replaceAll(\"-\", \"\") + \"_\" + objectName.toLowerCase() + \"_\" + (new Random()).nextInt(1000);\n            String cleanTaskFileName = jobId + objectName.toLowerCase() + UUID.randomUUID();\n            // Create temporary stage with desired file format\n            log.info(\"Started executing query to create temporary stage\");\n            preparedStatement = jdbcConnection.prepareStatement(\"create TEMPORA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d89fbe4a-3185-4324-8218-3b783af7ac91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":336,"endLine":366,"content":"ConnectionId());\n        }\n        return cacheValue.toString();\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        for (Map<String, Object> internalResultsMap : externalResultsList) {\n            Map<String, Object> propertiesMap = GainsightCollectionUtils.nullSafeMap((Map<String, Object>) internalResultsMap.get(PROPERTIES));\n            if (internalResultsMap.containsKey(ID) && !propertiesMap.isEmpty()) {\n                propertiesMap.put(ID, internalResultsMap.get(ID));\n                responseList.add(propertiesMap);\n            } else {\n                responseList.add(internalResultsMap);\n            }\n        }\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    private PNPConnectionsInfo getConnectionId(String connectionId) {\n        return pnpConnectionInfoDao.findByConnectionId(connectionId);\n    }\n\n    @Override\n    public void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        List<String> ignoreMet","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a291a00-61c2-43ec-84ee-6221e62215f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":165,"endLine":189,"content":"xtractedData, pnpConnectionsInfo,\n                true, FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()),\n                connectorConfig.getDataTypeMappings());\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n    }\n\n    private List<Map<String, Object>> convertForUI(Collection<MSDynamicsObject> msObjects) {\n        return msObjects.stream().map(oStr -> {\n            Map<String, Object> object = new HashMap<>();\n            object.put(\"objectId\", oStr.getObjectId());\n            object.put(\"objectName\", oStr.getLogicalName());\n            object.put(\"label\", StringUtils.isNotEmpty(oStr.getDisplayName()) ? oStr.getDisplayName() : oStr.getLogicalName());\n            return object;\n        }).collect(Collectors.toList());\n    }\n\n    private Map<String, Object> deepCopy(Map<String, Object> extractedData) {\n        Map<String, Object> copiedExtractedData = new HashMap<>();\n        for (Map.Entry entry : extractedData.entrySet()) {\n            if (entry.getKey().equals(\"Attributes\")) {\n                List<Map<String, Object>> attributes = (List) entry.getValue();\n                List<Map<String, Object>> copiedAttributesList = new ArrayList<>();\n                for (Map<String, Object> attribute : attributes) {\n                    Map<String, Object> copiedAttributeMap = new HashMap<>();\n                    for (Map.Entry attributeEntry : at","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"49a92a5b-ab5a-4512-baf3-f3e483f7d8fd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectApiConfigDaoImpl.java","startLine":37,"endLine":54,"content":"verride\n    public CaasObjectApiConfig getConnectorConfigByObjectName(ConnectorType connectorType, String objectName) {\n        Query query = Query.query(Criteria.where(CaasObjectApiConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        query.addCriteria(Criteria.where(CaasObjectApiConfig.OBJECT_NAME_PROP).is(objectName));\n        return getMongoTemplate().findOne(query, CaasObjectApiConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectApiConfig> getConnectorConfigs(ConnectorType connectorType) {\n        Query query = Query.query(Criteria.where(CaasObjectApiConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        return getMongoTemplate().find(query, CaasObjectApiConfig.class);\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(CaasObjectApiConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69dbe8db-88fc-47f4-bcc4-cfc755aebba2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/BionicRulesDPIntegrationServiceImpl.java","startLine":1,"endLine":34,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.enums.AuthTokenType;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\nimport static com.gainsight.utils.GainsightPrecondition.assertNotNull;\nimport static com.gainsight.utils.GainsightPrecondition.isNotBlank;\n\n@Service\npublic class BionicRulesDPIntegrationServiceImpl implements BionicRulesDPIntegrationService {\n\n    @Autowired\n    private AuthTokenGenService authTokenGenService;\n\n    @Override\n    public String generateMDASystemToken() {\n        if (RequestContextProvider.getUserAuthInfo() != null &&\n                StringUtils.isBlank(RequestContextProvider.getUserAuthInfo().getUserId())) {\n            RequestContextProvider.getUserAuthInfo().setUserId(RequestContextProvider.getUserName());\n        } else if (RequestContextProvider.getUserAuthInfo() == null && RequestContextProvider.getGSUserAuthInfo() != null) {\n            RequestContextProvider.getRequestInfo().setUserAuthInfo(RequestContextProvider.getGSUserAuthInfo());\n        }\n        RequestInfo requestInfo = authTokenGenService\n                .generateToken(AuthTokenType.BIONIC_RULES","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"40ead889-9a03-4d8e-b7e3-f04f7f762115","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":52,"endLine":78,"content":" String REMOVABLE = \"removable\";\n    private static final String KEY = \"key\";\n    private static final String AGENT_DESCRIPTION = \"agent_description\";\n    private static final String SYSTEM_FIELD_OPTIONS_KEY = \"system_field_options\";\n    private static final String CUSTOM_FIELD_OPTIONS_KEY = \"custom_field_options\";\n    private static final String NAME_KEY_PICKLIST = \"name\";\n    private static final String VALUE_KEY_PICKLIST = \"value\";\n    private static final String PROPERTIES_KEY_FOR_CUSTOM_FIELD_SUFFIX = \"customFieldSuffixFieldName\";\n\n    @Autowired\n    CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.ZENDESK.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        String customFieldSuffix = apiConfigAttributes.getProperties().get(PROPERTI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9b3045a1-a1bc-4729-81c3-8351c0e31bc0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":156,"endLine":177,"content":"roperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n            metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n        if (ObjectUtils.isNotEmpty(complexTypeMappings) && complexTypeMappings.containsKey(dataType))\n            metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(dataType).getValue());\n        if (StringUtils.equals(dataType, \"TIMESTAMP_NTZ\")) {\n            metaProperties.put(\"timeZoneId\", RequestContextProvider.getOrgTimezoneId());\n        }\n        if(ObjectUtils.isNotEmpty(metaProperties))\n            meta.put(PROPERTIES, metaProperties);\n        int decimalPlaces = dataTypeMap.containsKey(\"scale\") ? (int) dataTypeMap.get(\"scale\") : 2;\n        meta.put(DuctConstants.DescribeMetaConstants.DECIMAL_PLACES, decimalPlaces);\n\n        meta.put(PATH, String.valueOf(fieldDetails.get(\"column_name\")));\n        meta.put(IS_PRIMARY_KEY, false);\n        meta.put(DuctConstants.DescribeMetaConstants.ACCESSIBLE, true);\n        meta.put(DuctConstants.DescribeMetaConstants.HIDDEN, false);\n        meta.put(DuctConstants.DescribeMetaConstants.READ_ONLY, false);\n        meta.put(DuctConstants.DescribeMetaConstants.UPDATEABLE, true);\n        meta.put(DuctConstants.DescribeMetaConstants.CREATEABLE, true);\n        meta.put(DuctConstants.DescribeMetaConstants.SCHEMA_UPDATEABLE, true);\n        retMap.put(IPaasConstants.M","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd6b9fff-3df5-4a7e-a13a-cc732c18da3b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":674,"endLine":704,"content":"eldName());\n    fieldInfoMap.put(OPERATOR, filter.getOperatorType().getNeo4jSymbol());\n    Object value = ((List<Object>) filter.getValues()).get(0);\n    fieldInfoMap.put(VALUE, DuctUtils.valueOf(value));\n\n    return fieldInfoMap;\n  }\n\n  /**\n   * @param value          {@link Object} value to be converted to epoch, it can be in specified format for the datetime field that connector supports\n   *                       or a fallback format of yyyy-MM-dd which is common for filters that comes from UI\n   * @param dateTimeFormat {@link String}\n   * @return {@link Object}\n   */\n  private Object convertToEpoch(Object value, String dateTimeFormat) {\n    if (Objects.isNull(value)) {\n      return null;\n    }\n    SimpleDateFormat dateFormat = new SimpleDateFormat(dateTimeFormat);\n    try {\n      Date date = dateFormat.parse(DuctUtils.valueOf(value));\n      return date.getTime() / 1000; // converting milliseconds to seconds\n    } catch (Exception e) {\n      log.error(\"Error while converting datetime value {} with format {} to epoch\", value, dateFormat);\n      log.debug(\"Error while converting datetime value {} with format {} to epoch, Exception: \", value, dateFormat, e);\n      try {\n        log.info(\"Trying to convert date time value to epoch with default date format yyyy-MM-dd as a fallback\");\n        SimpleDateFormat defaultDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date date = defaultDateFormat.parse(DuctUtils.valueOf(value));\n        return date.getTime() / 1000;\n      }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4e4dce6-7181-479c-8f7b-4d8d74a8bde1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":125,"endLine":141,"content":"ion> getMetadataUsingEngine(String connectionId, String objectName, boolean forceRefresh) throws CaasException {\n    try {\n      Set<GSFieldDefinition> fieldsSet = new HashSet<>();\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n      GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Connection not found\", SC_BAD_REQUEST);\n      MetadataCache metadataByConnectionIdAndObjectName = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n      if (metadataByConnectionIdAndObjectName != null) {\n        log.info(\"Metadata found in cache for connectionId:{} and objectName:{} with metadata present: {}\", metadataByConnectionIdAndObjectName.getConnectionId(),\n            metadataByConnectionIdAndObjectName.getObjectName(), MapUtils.isNotEmpty(metadataByConnectionIdAndObjectName.getMetadata()));\n      }\n      if (!forceRefresh && metadataByConnectionIdAndObjectName != null) {\n        MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n        Map<String, ObjectDefinition> objectDefinitionMap = applyGlobalAndTenantOverrides(metadataByConnectionIdAndObjectName.getMetadata(), pnpConnectionsInfo, objectName);\n        processSystemFieldsIfRequired(metadataEngineConfig, pnpConnectionsInfo, objectName, objectDefinitionMap);\n        return objectDefinitionMap;\n      }\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f8de81f-49e5-4a0c-a77a-1580f4150d58","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":46,"endLine":72,"content":"signature\";\n    private static final String X_ZM_REQUEST_TIMESTAMP = \"x-zm-request-timestamp\";\n    private static final String ZOOM_ACCOUNT_ID = \"ZOOM_ACCOUNT_ID\";\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    public ZoomEventProcessorServiceImpl(PNPConnectionInfoDao pnpConnectionInfoDao) {\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n    }\n\n    @Override\n    public Object handleEventFromExternalSystemForZoom(Object body, Map<String, String> headers) throws Exception {\n        log.info(\"Received Event from {} with Request ID : {}\", ConnectorType.ZOOM.getValue(), headers.get(\"x-request-id\"));\n        Map<String, Object> zoomWebHookDetails = DuctUtils.OBJECT_MAPPER.convertValue(body, Map.class);\n        Map<String, Object> eventPayload = DuctUtils.OBJECT_MAPPER.convertValue(zoomWebHookDetails.get(PAYLOAD), Map.class);\n        switch(zoomWebHookDetails.get(EVENT).toString()) {\n            case ENDPOINT_URL_VALIDATION_NOTIFICATION:\n                String plainToken = eventPayload.get(PLAIN_TOKEN).toString();\n                if(null != plainToken) {\n                    String encryptedToken =  HmacUtils.hmacSha256Hex(ZOOM_EVENT_VALIDATION_SECRET, plainToken);\n                    Map<String, Object> response = new HashMap<>();\n                    response.put(PLAIN_TOKEN, plainToken);\n                    response.put(ENCRYPTED_TOKEN, encryptedToken);\n                    return response;\n                }\n                break;\n            c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22e6490b-663b-493e-9196-70233d25f22c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/PXValidationDataSourceService.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Order(500)\n@Service\n@Slf4j\npublic class PXValidationDataSourceService implements ValidationConnectorDataSourceService {\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.GAINSIGHT_PX;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map attributes, CaasConnectorConfig caasConnectorConfig) {\n        return false;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc57d13d-b553-49df-a603-ad544748d8ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":136,"endLine":175,"content":"y(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpPut);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static String post(String uri, Map<String, String> headers, String payload) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpPost httpPost = new HttpPost(uri);\n\n      addHeaders(httpPost, headers);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpPost.setEntity(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpPost);\n      final byte[] bytes64bytes =\n              Base64.getEncoder().encode((IOUtils.toByteArray(closeableHttpResponse.getEntity().getContent())));\n      return new String(bytes64bytes);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static <T> BionicRuleHttpResponseWrapper<T> delete(String uri, Map<String, String> headers, Class<T> clazz)\n          throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpDelete httpDelete = new HttpDelete(uri);\n\n      addHeaders(httpDelete, headers)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3739b11f-4f3d-4f43-8c50-572bbe9e8568","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":44,"endLine":77,"content":"ion.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVWriter;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.prefs.CsvPreference;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static com.gainsight.integration.utils.common.UCCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c088c4f-eb1a-4b7c-8dc9-1a37640db200","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/AbstractOAuthAccountService.java","startLine":1,"endLine":40,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthClientService;\nimport org.springframework.beans.factory.annotation.Autowired;\n\n/**\n * User: santa\n * Date: 14/4/14\n * Time: 2:09 PM\n */\npublic abstract class AbstractOAuthAccountService implements GainsightAccountService {\n\n    public static final String OAUTH2CALLBACK = \"/oauth2callback\";\n    public static final String CALLBACK_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"callback_base_url\");\n    @Autowired\n    protected OAuthClientService authClientService;\n\n    protected abstract String getContext();\n\n\n    public OAuthDetail findOAuthDetail(AccountType accountType) {\n        return authClientService.find(accountType);\n    }\n\n    protected String callbackUrl(AccountType accountType, String hostUrl) {\n        if (accountType.equals(AccountType.HUBSPOT)) {\n            return hostUrl + \"/connector\" + getContext() + \"/\" + accountType;\n        }if(accountType.equals(AccountType.BIGQUERY) || accountType.equals(AccountType.JIRA)){\n            return CALLBACK_BASE_URL+ \"/v1.0/api\" + \"/accounts\" + getContext() + \"?accountType=\" + accountType;\n        }\n        return hostUrl + \"/accounts\" + getContext() + \"?accountType=\" + accountType;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f073e9b8-3cc8-4c3c-8960-ae11c253f527","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorService.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.processor;\n\nimport java.util.Map;\n\npublic interface MSTeamsEventProcessorService {\n    Object handleEventFromExternalSystemForMSTeams(Object body, Map<String, String> headers) throws Exception;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e435d39a-6b69-4c12-964d-d879c12975a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":257,"endLine":272,"content":"\"total\").toString());\n        }\n        return 0;\n    }\n\n    private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n        List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n        Chainr chainr = Chainr.fromSpec(spec);\n        List<Map<String, Object>> finalData = new ArrayList<>();\n        for (Map<String, Object> datum : data) {\n            finalData.add(OBJECT_MAPPER.convertValue(chainr.transform(datum), new TypeReference<Map<String, Object>>() {\n            }));\n        }\n        return finalData;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"07b5e3ff-ba3e-4e1c-b673-362d39c19096","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":140,"endLine":160,"content":"(mappedFields);\n        if (!clonedHeaders.isEmpty()) {\n            DuctUtils.populateAndInsertError(CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n                    String.join(\",\", clonedHeaders), ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateMandatoryMappings(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> metaInfoDefinitionMap) throws CaasException {\n        Set<String> objects = new HashSet<>();\n        objects.addAll(ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getObjectName).collect(Collectors.toList()));\n        Map<String, String> objectLevelOperationMap = (Map<String, String>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n        DuctDataOperation operation = null;\n        StringBuilder errorMessageBuilder = new StringBuilder().append(MANDATORY_REQUIRED_KEYS_NOT_PRESENT).append(\" : \");\n        boolean validationFailed = false;\n        for (String object : objects) {\n            operation = DuctDataOperation.valueOf(objectLevelOperationMap.get(object));\n            if (operation == DuctDataOperation.UPSERT || operation == DuctDataOperation.INSERT) {\n                Set<String> mappedFields = ductJobMapping.getColumnMappings().stream().filter(mapping -> mapping.getObjectName().equals(object)).map(ColumnMapping::getFieldName).collect(Collectors.toSet());\n                if (mappedFields.size() == 0) {\n                    log.error(MANDATORY_REQUIRED_KEYS_NOT_PRESENT);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e382dcf-ac85-43db-a006-887fc23fea81","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/Client.java","startLine":53,"endLine":90,"content":"oConfiguration.class\n})\n@Import(DuctClientConfiguration.class)\npublic class Client {\n    public static void main(String[] args) throws ParseException {\n        ConfigurableApplicationContext context = null;\n        try {\n            DuctCommonUtils.init(DuctAppType.CLIENT);\n\n            Options options = new Options();\n            options.addRequiredOption(\"name\", \"name\", true, \"Name of client to run\");\n\n            CommandLineParser parser = new RelaxedParser();\n            CommandLine cmd = parser.parse(options, args);\n\n            SpringApplication app = new SpringApplication(Client.class);\n            app.setWebApplicationType(WebApplicationType.NONE);\n            app.setBannerMode(Banner.Mode.OFF);\n            app.setAdditionalProfiles(\"client\");\n            context = app.run(args);\n\n            Collection<DuctClient> clients = context.getBeansOfType(DuctClient.class).values();\n            String name = cmd.getOptionValue(\"name\");\n\n            Optional<DuctClient> oc = clients.stream().filter(c -> StringUtils.equals(c.name(), name)).findAny();\n            if (oc.isPresent()) {\n                DuctClient c = oc.get();\n\n                Options co = c.requiredOptions();\n                CommandLineParser cParser = new RelaxedParser();\n                CommandLine ccmd = cParser.parse(co, args);\n                c.migrate(ccmd);\n            } else {\n                log.error(\"No client with name {} found\", name);\n            }\n\n            // shutdown after migration.\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a1bfda4-6a87-4fdb-99af-323c16adb291","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":28,"endLine":51,"content":";\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            if (criteria.getFilters() != null && criteria.getFilters().size() > 1) {\n                HubspotFilterGroups hubspotFilterGroup = new HubspotFilterGroups();\n                for (Criteria firstCriteria : criteria.getFilters()) {\n                    List<HubspotFilters> hubspotFilters = new ArrayList<>();\n                    HubspotFilters filterRule = new HubspotFilters();\n                    Object epochValue = null;\n                    if (fieldNameDataTypeMap.get(firstCriteria.getFieldName()).equalsIgnoreCase(DATE) ||\n                            fieldNameDataTypeMap.get(firstCriteria.getFieldName()).equalsIgnoreCase(DATETIME)) {\n                        epochValue = convertTimeToEPOCH(firstCriteria.getValues());\n                        log.info(\"epoch value {}\", epochValue);\n                    } else {\n                        epochValue = firstCriteria.getValues();\n                    }\n                    if (firstCriteria.getValues() instanceof List) {\n                        filterRule.setValues((List) firstCriteria.getValues());\n                    } else {\n                        filterRule.setValue(epochValue);\n                    }\n                    filterRule.setOperator(getHubspotSyncOperator(firstCriteria.getOperatorType()));\n                    filterRule.setPropertyName(firstCriteria.getFieldName());\n                    hubspotFilters.add(filterRule);\n                    hubspotFilterG","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"289ca198-594c-4d03-a921-051c70cb45be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":100,"endLine":125,"content":"ties);\n            gsFieldMeta.setOriginalDataType(dataType);\n            gsFieldMeta.setFilterable(true);\n            if (value.isArray())\n                gsFieldMeta.setMultiValued(true);\n            gsFieldDefinition.setMeta(gsFieldMeta);\n            generatedFieldDefinitions.put(fieldName, gsFieldDefinition);\n            fieldNames.add(fieldName);\n        } else if (fieldNames.contains(fieldName) && !value.isNull() && generatedFieldDefinitions.containsKey(fieldName)) {\n            GSFieldDefinition gsFieldDefinition = generatedFieldDefinitions.get(fieldName);\n            gsFieldDefinition.setDataType(resloveDataType(gsFieldDefinition.getDataType(), value, gsFieldDefinition));\n            generatedFieldDefinitions.put(fieldName, gsFieldDefinition);\n        }\n    }\n\n\n    private void handleSchemaGenerationForArray(String baseKey, JsonNode data, Map<String, GSFieldDefinition> generatedFieldDefinitions,\n                                                Set<String> fieldNames) {\n        for (JsonNode datum : data) {\n            if (datum.isValueNode()) {\n                createGSFieldDefinition(baseKey, data, generatedFieldDefinitions, fieldNames);\n            } else {\n                Iterator<Map.Entry<String, JsonNode>> fields = datum.fields();\n                fields.forEachRemaining((field) -> {\n                    if (field.getValue().isObject())\n                        handleSchemaGenerationForObject(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"abb3e08e-9186-423f-98ae-99530265f162","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/WriteBackHubspotMessageInfo.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WriteBackHubspotMessageInfo implements MessageInfo<DuctJobMapping> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.WRITE_BACK_HUBSPOT_DATA;\n    private static final MessagePayloadTransformer<DuctJobMapping> transformer = new DefaultMessagePayloadTransformer<>(DuctJobMapping.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<DuctJobMapping> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7044f276-ef55-46d0-9b40-6c8580d94edd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":140,"endLine":169,"content":"(identifier));\n            return new ResponseObj(true, ductJobMappingService.synchronousUpdate(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @PostMapping(value = \"/data/bulk/fetch\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj bulkFetch(@RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.bulkFetch(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @PostMapping(value = \"data/bulk/write\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj bulkWriteCaas(@RequestParam(value = \"file\", required = false) MultipartFile inputCSVFile, @RequestParam String request) {\n        try {\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5c3c892-2932-41d1-8324-9b0ee83b213d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":25,"endLine":49,"content":").jobId(ductJobMapping.getJobId())\n                .jobName(DuctConstants.CAAS_JOB).tenantId(ductJobMapping.getTenantId()).source(appName).build();\n    }\n\n    private static Job createJob(RequestInfo requestInfo, MetadataGenerationDetails metadataGenerationDetails, String appName) {\n        return GSJob.fromRequestInfo(requestInfo).assetId(metadataGenerationDetails.getJobId()).assetName(metadataGenerationDetails.getConnectorType().getValue()).\n                assetType(DuctConstants.DUCT).jobId(metadataGenerationDetails.getJobId())\n                .jobName(DuctConstants.CAAS_JOB).tenantId(metadataGenerationDetails.getTenantId()).source(appName).build();\n    }\n\n\n    public static void processJob(DuctJobMapping ductJobMapping, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, ductJobMapping, appName);\n        JobTracer.processJob(job);\n    }\n\n    public static void processJob(MetadataGenerationDetails metadataGenerationDetails, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJob","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a68827e-7c57-4947-ba60-98dfd519e8d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":57,"endLine":89,"content":"  protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return \"CaasSnowflakeExtract\";\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.snowflake.external.task.snowflake.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.snowflake.external.task.snowflake.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.snowflake.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n  protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SNOWFLAKE);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, duct","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3781d062-681a-48bd-9ee7-9573133a4305","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":360,"endLine":386,"content":"Info) throws CaasException {\n\n        CaasObjectConfig caasObjectConfig = caasObjectConfigDAO.getCaasObjectConfig(pnpConnectionsInfo.getConnectionType());\n        CaasObjectTenantConfig caasObjectTenantConfig = caasObjectTenantConfigDAO.getTenantSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId());\n        CaasObjectTenantConfig connectionIDSpecificCaasObjectTenantConfig = caasObjectTenantConfigDAO.getConnectionIdSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n        List<Map<String, Object>> filteredAndEnhancedObjectList = Lists.newArrayList();\n        Set<String> objectIdsSet = new HashSet<>();\n        for (Map<String, Object> object : objectList) {\n            objectIdsSet.add(String.valueOf(object.get(OBJECT_ID)));\n        }\n\n        filteredAndEnhancedObjectList.addAll(objectList);\n\n        /*\n        Adding global object\n         */\n        if (caasObjectConfig != null) {\n\n            if (CollectionUtils.isNotEmpty(caasObjectConfig.getShowOnlyIncludedObjects())) {\n                for (Map<String, Object> object : objectList) {\n                    if (!caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                        filteredAndEnhancedObjectList.remove(object);\n                        objectIdsSet.remove(object.get(OBJECT_ID).toString());\n           ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1043becd-ae10-4448-a528-6f9fdacb02de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/SchedulerDetails.java","startLine":175,"endLine":205,"content":" result = 31 * result + (startDate != null ? startDate.hashCode() : 0);\n    result = 31 * result + (endDate != null ? endDate.hashCode() : 0);\n    result = 31 * result + (period != null ? period.hashCode() : 0);\n    result = 31 * result + (periodValue != null ? periodValue.hashCode() : 0);\n    result = 31 * result + (isRecursive ? 1 : 0);\n    result = 31 * result + (month != null ? month.hashCode() : 0);\n    result = 31 * result + (dayOfMonth != null ? dayOfMonth.hashCode() : 0);\n    result = 31 * result + (dayOfWeek != null ? dayOfWeek.hashCode() : 0);\n    result = 31 * result + (cronExpression != null ? cronExpression.hashCode() : 0);\n    result = 31 * result + (timeZoneName != null ? timeZoneName.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"SchedulerDetails{\" +\n        \"type=\" + type +\n        \", startDate=\" + startDate +\n        \", endDate=\" + endDate +\n        \", period=\" + period +\n        \", periodValue='\" + periodValue + '\\'' +\n        \", isRecursive=\" + isRecursive +\n        \", month='\" + month + '\\'' +\n        \", dayOfMonth='\" + dayOfMonth + '\\'' +\n        \", dayOfWeek='\" + dayOfWeek + '\\'' +\n        \", cronExpression='\" + cronExpression + '\\'' +\n        \", timeZoneName='\" + timeZoneName + '\\'' +\n        '}';\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2aeb5d0-a2ab-4511-8b6f-f5dbaf2b97c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":82,"endLine":108,"content":"athVariable(\"connectionId\") final String connectionId,\n                                        @ApiParam(value = \"Request Structure to retrieve \", required = true) @RequestBody final PNPConnectionInput pnpConnectionInput) {\n        try {\n            return new ResponseObj(true, ductConnectionService.updateNewConnection(pnpConnectionInput));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @GetMapping(value = \"/token/refresh/details/{connectionId}\")\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.UPDATE)\n    public ResponseObj refreshAccessTokenAndFetchConnectionDetails(@PathVariable(\"connectionId\") final String connectionId) {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            assertNotNull(pnpConnectionsInfo, CaasValidationCode.CONNECTIONS_NOT_FOUND, com.gainsight.constants.HttpStatus.SC_BAD_REQUEST);\n            return new ResponseObj(true, ductConnectionService.refreshAccessToken(pnpConnectionsInfo));\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false);\n        }\n    }\n\n    @PutMapping(value = \"{connecto","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"548528c7-3736-4ebe-a8f5-506f42ee3d5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":77,"endLine":90,"content":"           GainsightHubspotChannelFactory connectionFactory = new GainsightHubspotChannelFactory();\n                HttpResponse httpResponse = connectionFactory.getChannelServiceWithOAuth20(\n                                pnpConnectionsInfo.getTokenDetail().getClientId().getString(),\n                                pnpConnectionsInfo.getTokenDetail().getClientSecret().getString(),\n                                CryptHandler.getInstance()\n                                        .decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()))\n                        .getEntityPropertiesLatestCaas(entityName, api);\n                if (httpResponse.getStatusLine().getStatusCode() != 200) {\n                    LOGGER.error(\"Error while fetching entity properties for entity : {} , status code : {} , reason : {}\",\n                            entityName, httpResponse.getStatusLine().getStatusCode(), httpResponse.getStatusLine().getReasonPhrase());\n                    JsonNode hubspotResponse = MAPPER.readTree(httpResponse.getEntity().getContent());\n                    if (hubspotResponse.get(CATEGORY) != null && hubspotResponse.get(CATEGORY).asText().equals(MISSING_SCOPES))\n                        throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getStatusLine().getStatusCode()), httpResponse.getStatusLine().getReasonPhrase(), null, null ,DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE));\n                    throw new CaasException","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d04c59fe-d7c7-46e6-bc33-154dbbd9a29a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":414,"endLine":429,"content":"\"Fetch Config of an object for a connection\", response = Map.class)\n    @GetMapping(value = \"/{connectionId}/{objectname}/config\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjectConfig(@ApiParam(value = \"Connection Id for fetching config\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                       @ApiParam(value = \"Object to fetch config for\", required = true) @PathVariable(\"objectname\") String objectName) {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n            Optional<CaasObjectApiConfig> optionalCaasConfig = connectorConfigs.stream().filter(i -> objectName.equalsIgnoreCase(i.getObjectName())).findFirst();\n            if (optionalCaasConfig.isPresent())\n                return new ResponseObj(true, optionalCaasConfig.get());\n            Object cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, connectionId);\n            if (cacheValue == null)\n                ductService.getObject(connectionId);\n            cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, connectionId).toString();\n            optionalCaasConfig = connectorConfigs.stream().filter(i -> Duc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dd87d026-4c9e-48f0-b4f9-811875697f9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountGlobalMapping.java","startLine":1,"endLine":46,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * User: santa\n * Date: 17/6/14\n * Time: 9:21 PM\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AccountGlobalMapping implements Serializable {\n  private static final long serialVersionUID = -1L;\n  /**\n   * Represents System Defined Fields that are mandatory in the aggregation process - account name, user name, user email\n   */\n  private List<AccountFieldMapping> systemDefined;\n  /**\n   * Represents internal aggregation fields which are defined by the aggregation process itself and not end user\n   */\n  private List<AccountFieldMapping> gsDefined;\n  /**\n   * Represents custom columns configured from integration UI\n   */\n  private List<AccountFieldMapping> custom;\n  /**\n   * Represents measures configured from UI.\n   * These go in the aggregation table based on the aggregation function defined and are further used in the flipping process as source columns\n   */\n  private List<AccountFieldMapping> measures;\n  /**\n   * Represents account identifier  defined in the integration UI and it's lookup details\n   */\n  private PrimaryIdentifierDetail accountIdentifier;\n  /**\n   * Represents user identifier defined in the integration UI and it's lookup details\n   */\n  private PrimaryIdentifierDetail userIdentifier;\n  /**\n   * Represents event identifier defined i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99fd3897-5495-4007-880a-39465a1da30c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/IpaasBulkFileDownloadQueueInfo.java","startLine":1,"endLine":47,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n\n@Service\npublic class IpaasBulkFileDownloadQueueInfo implements QueueInfo {\n  private static final DuctProcessQueue queue = DuctProcessQueue.IPAAS_BULK_DOWNLOAD_QUEUE;\n\n  @Override\n  public String getQueueName() {\n    return queue.getQueueName();\n  }\n\n  @Override\n  public String getTableName() {\n    return queue.getTableName();\n  }\n\n  @Override\n  public Duration getDefaultLockTime() {\n    return Duration.ofHours(3);\n  }\n\n  @Override\n  public int getDefaultTenantLimit() {\n    return 5;\n  }\n\n  @Override\n  public QueueDbMessageSplitter getMessageSplitter() {\n    MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n    return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n  }\n\n  @Override\n  public boolean maintainMessageSequencing() {\n    return true;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7500c47-732d-4247-8487-8086d8982a18","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctJobMappingDaoImpl.java","startLine":36,"endLine":49,"content":"Override\n    public DuctJobMapping findByJobId(String jobId) {\n        DuctJobMappingQuery query = new DuctJobMappingQuery().jobId(jobId);\n        return findOne(query);\n    }\n\n    public class DuctJobMappingQuery extends Query {\n\n        public DuctJobMappingQuery jobId(String jobId) {\n            addCriteria(Criteria.where(\"jobId\").is(jobId));\n            return this;\n        }\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16a90a90-9d3c-43d6-be77-e91c39475241","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/exception/externaltask/ExternalTaskErrorParser.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.sdk.exception.externaltask;\n\nimport com.gainsight.duct.beans.ExternalTaskException;\nimport com.gainsight.duct.enums.ExternalTasksValidationCode;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExternalTaskErrorParser {\n\n\n    private static final String HTTP_CODE = \"httpCode\";\n    private static final String ERROR_MESSAGE = \"errorMessage\";\n    private static final String ERROR_CODE = \"errorCode\";\n    private static final String MESSAGE = \"message\";\n\n    public static ExternalTaskException parseAsExternalTaskException(String errorDump){\n\n        JsonObject jsonObject1 = new JsonParser().parse(errorDump).getAsJsonObject();\n        String em = jsonObject1.get(ERROR_MESSAGE).getAsString();\n        if(StringUtils.isNotEmpty(em)) {\n            String externalTaskErrorMessage = em.substring(em.indexOf(\"ExternalTaskException**@@{\") + \"ExternalTaskException**@@{\".length() - 1, em.indexOf(\"}@@**\") + 1);\n            JsonObject jsonObject = new JsonParser().parse(externalTaskErrorMessage).getAsJsonObject();\n            return new ExternalTaskException(500,jsonObject.get(ERROR_CODE).getAsInt(),\n                    jsonObject.get(ERROR_MESSAGE).getAsString(), jsonObject.get(MESSAGE).getAsString());\n\n        }else{\n            return new ExternalTaskException(500, ExternalTasksValidationCode.NO_ERROR_MESSAGE_FROM_DP,\"No error message fro","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9cf147fe-84b4-441e-99ef-472f061138e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":153,"endLine":176,"content":", ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam);\n      } else {\n        // this will be a post request without request body\n        caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.INTERCOMV2);\n        int pageSize = pageSize(apiConfigAttributes);\n        Criteria modifiedCriteria = modifyCriteria(ductJobMapping.getCriteria(), ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n        Map<String, Object> queryRequestBody = getQueryRequestBody(modifiedCriteria);\n        Map<String, Object> requestBody = null;\n        if (Objects.nonNull(queryRequestBody)) {\n          requestBody = new HashMap<>();\n          requestBody.put(QUERY, queryRequestBody.get(QUERY));\n          Map<String, Object> paginationInfoMap = new HashMap<>();\n          paginationInfoMap.put(PER_PAGE, pageSize);\n          if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n            paginationInfoMap.put(STARTING_AFTER, ductJobMapping.getNextPageToken());\n          }\n          requestBody.put(PAGINATION, paginationInfoMap);\n          log.info(\"Query request body in json: {}\", GainsightUtils.convertObjectToJson(requestBody));\n        }\n        httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n            apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam, requestBody);\n      }\n\n      JsonN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"129af1c2-4293-429a-94a9-597dac501433","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1369,"endLine":1392,"content":"QUEST));\n        }\n        pnpConnectionsInfo.setTokenDetail(tokenDetail);\n        pnpConnectionsInfo.getProperties().put(AUTH_TYPE, authType);\n        pnpConnectionsInfo.getProperties().put(DESCRIPTION, properties.get(DESCRIPTION));\n        pnpConnectionsInfo.getProperties().put(URL, properties.get(URL));\n        return pnpConnectionsInfo;\n    }\n\n    private OAuthV2TokenDetail getOAuthV2TokenDetail(PNPConnectionsInfo connectionsInfo) {\n        Map properties = connectionsInfo.getProperties();\n        String clientId = GainsightUtils.valueOf(properties.get(CLIENT_ID));\n        String clientSecret = GainsightUtils.valueOf(properties.get(CLIENT_SECRET));\n        String serviceProviderAccessTokenURI = GainsightUtils.valueOf(properties.get(SERVICE_PROVIDER_ACCESS_TOKEN_URI));\n        String payloadContentType = GainsightUtils.valueOf(properties.get(PAYLOAD_CONTENT_TYPE));\n        return new OAuthV2TokenDetail(serviceProviderAccessTokenURI, payloadContentType, clientId, clientSecret);\n    }\n\n    private RelationalDBConnectionDetail preProcessRelationalDBDetails(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        RelationalDBConnectionDetail relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        RelationalDBConnectionDetail processedDBConnectionDetail = new RelationalDBConnectionDetail();\n\n        if (relationalDBConnectionDetail.getHost() == null && relationalDBConnectionDetail.getUrl() == null) {\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"783fcb79-496e-4597-a463-57f145b122eb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":63,"endLine":98,"content":"g getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ecosystem.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ecosystem.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ecosystem.default.timeout\", \"120\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String apiKey = CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken());\n\n        CaasMetadataService caasMetadataService = caasMetadataFactory.getService(ductJobMapping.getConnectorType(), pnpConnectionsInfo.isIpaasConnection());\n        ObjectDefinition o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ffc8ea7f-c39f-4e23-a081-156c7f51a394","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ConnectorDataSourceService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.enums.DHTaskType;\n\nimport java.util.List;\nimport java.util.Map;\n\n\npublic interface ConnectorDataSourceService {\n\n    boolean canHandle(ConnectorType connectorType, boolean isIpaas);\n\n    DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException;\n\n    DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException;\n\n    default DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n        return fetchSynchronziedData(ductJobMapping, maxPageSize);\n    }\n\n    DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException;\n\n    default DuctResponse createData(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return createData(ductJobMapping);\n    }\n\n    DuctRes","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"edab3ea8-5527-4cc0-a7f4-a68807edd9a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":353,"endLine":385,"content":" accepted by the external system\", ex);\n            return getDefaultFallbackCriteria();\n        }\n    }\n\n    private Criteria getDefaultFallbackCriteria() {\n        Criteria criteria = new Criteria();\n        Criteria fieldCriteria = new Criteria();\n        // set a hardcoded filter condition since this is a required parameter\n        fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD);\n        fieldCriteria.setOperatorType(FilterOperator.GT);\n        fieldCriteria.setValues(Lists.newArrayList(\"0\"));\n\n        criteria.setFilters(Lists.newArrayList(fieldCriteria));\n        return criteria;\n    }\n\n    private Map<String, GSFieldDefinition> getDateTimeFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> dateTimeFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(com.gainsight.platform.metadata.DataType.DATETIME.getValue()))\n                .forEach(kv -> dateTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return dateTimeFieldsMap;\n    }\n\n    private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47e90a08-f9ea-4d1c-8c4e-69893e895780","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":84,"endLine":116,"content":"erride\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.msteams.extract.version\", \"v1\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.msteams.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.MSTEAMS;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String resourceName = ductJobMapping.getResourceName().toLowerCase();\n\n        List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n        String dataApi = null;\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCas","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"312ee508-0301-4570-815d-759766606935","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":153,"endLine":177,"content":"es, ductJobMapping.getResourceName(), pnpConnectionsInfo, modifiedCriteria, flattenedConnectionInfo, paginationInfo, queryParam);\n\n\n      JsonNode jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails());\n      Map<String, Object> externalSystemResponse = new HashMap<>();\n\n      // post process data according to the needed formats\n      List<Map<String, Object>> postProcessedData = postProcessData(jsonNode, ductJobMapping, objectDefinition, fieldNameMetaMap);\n      externalSystemResponse.put(DATA, postProcessedData);\n\n\n      String nextPageToken = Objects.nonNull(ductJobMapping.getNextPageToken()) ? DuctUtils.valueOf(Integer.parseInt(DuctUtils.valueOf(ductJobMapping.getNextPageToken())) + 1) : DuctUtils.valueOf(2);\n\n      if (Objects.isNull(nextPageToken) || \"null\".equalsIgnoreCase(nextPageToken) || CollectionUtils.isEmpty(postProcessedData)) {\n        nextPageToken = null;\n      }\n\n\n      return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n          tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n          .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n          .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n          .jobId(ductJobMapping.getJobId()).build();\n    } catch (Exception e) {\n      log.error(\"Err","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b276a825-9ae0-4d24-a0d5-260241c54ae6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":225,"endLine":245,"content":"  try {\n            attributesMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n        } catch (CaasException ex) {\n            throw new RuntimeException(ex);\n        }\n        ObjectDefinition objectDefinition = attributesMap.get(ductJobMapping.getResourceName());\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields();\n        Map<String, Object> fieldNameDataTypeMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n        Map<String, GSFieldDefinition> fieldNameMetaMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n        HashMap<String, Object> additionalDetails = new HashMap<>();\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria())) {\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SERVICENOW);\n            FilterRule query = DataHighwayUtils.getFilterRuleFromCAASCriteria(\n                    ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n\n            if (query != null) {\n                additionalDetails.put(UCConstants.SERVICENOW_EXTERNAL_QUERY, getServicenowQuery(query));\n            }\n        }\n        additionalDetails.putAll(connectorConfig.getExternalJarAdditionalProperties());\n        return ad","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6aa8d210-f240-4ae5-8be0-5c5e04379aed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":179,"endLine":210,"content":"               if (fieldDefinition.getFieldName().equalsIgnoreCase(\"updateHistory.createdAt\"))\n                    name = \"createDateEnd\";\n                else if (fieldDefinition.getFieldName().equalsIgnoreCase(\"updateHistory.lastUpdatedAt\"))\n                    name = \"modifyDateEnd\";\n            }\n        } else\n            name = (String) fieldDefinition.getMeta().getProperties().get(\"filterableName\");\n        return name;\n    }\n\n    private static Map<String, Object> fetchFieldValue(GSFieldDefinition fieldInfo, JsonObject jsonObject, String[] path) {\n        Map<String, Object> result = new HashMap<>();\n        int depth = 0;\n        String key = path[depth];\n        key = key.replaceFirst(\"\\\\[\\\\*\\\\]\", \"\");\n        JsonElement jsonElement = jsonObject.get(key);\n        if (jsonElement == null) {\n            return result;\n        }\n        if (path.length == 1 && !jsonElement.isJsonNull()) {\n            if (jsonElement.isJsonArray()) {\n                result.put(key, jsonElement.toString());\n            } else {\n                result.put(key, getWritableValue(fieldInfo, jsonElement));\n            }\n            return result;\n        }\n        if (jsonElement.isJsonObject()) {\n            Map<String, Object> tempResult = fetchFieldValue(fieldInfo, jsonElement.getAsJsonObject(),\n                    ArrayUtils.subarray(path, depth + 1, path.length));\n            if (!MapUtils.isEmpty(tempResult)) //if child map is empty no point populating parent\n                result.put","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6559c86-43d9-4680-8193-2402c22f18f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":54,"endLine":85,"content":"ghwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String CAAS_SERVICENOW_EXTRACT = \"CaasServicenowExtract\";\n    private static final String DATA = \"data\";\n    private static final String SNOW_AND = \"^\";\n    private static final String SNOW_OR = \"^OR\";\n    private static final String CARET = \"^\";\n    private static final String DOUBLE_CARET = \"^^\";\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n\n    private AuthService authService = new AuthServiceImpl();\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.SERVICENOW.equals(connectorType) && !isIpaas;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        log.info(\"Fetching data from external system for resource: {}\", ductJobMapping.getResourceName());\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> optionalResourceConfig = connectorConfigByOb","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b3859a94-5494-4d23-ba7b-779ae5b22ead","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/exception/externaltask/ExternalTaskErrorParser.java","startLine":28,"endLine":57,"content":"AGE).getAsString(), jsonObject.get(MESSAGE).getAsString());\n\n        }else{\n            return new ExternalTaskException(500, ExternalTasksValidationCode.NO_ERROR_MESSAGE_FROM_DP,\"No error message from Data Processing\");\n        }\n    }\n\n    public static Map<String, Object> parseAsString(String errorDump){\n\n        JsonObject jsonObject1 = new JsonParser().parse(errorDump).getAsJsonObject();\n        String em = jsonObject1.get(ERROR_MESSAGE).getAsString();\n        Map<String, Object> map = new HashMap<>();\n\n        if(StringUtils.isNotEmpty(em)) {\n            String externalTaskErrorMessage = em.substring(em.indexOf(\"ExternalTaskException**@@{\") + \"ExternalTaskException**@@{\".length() - 1, em.indexOf(\"}@@**\") + 1);\n            JsonObject jsonObject = new JsonParser().parse(externalTaskErrorMessage).getAsJsonObject();\n            map.put(HTTP_CODE,500);\n            map.put(ERROR_CODE,jsonObject.get(ERROR_CODE).getAsInt());\n            map.put(ERROR_MESSAGE,jsonObject.get(ERROR_MESSAGE).getAsString());\n            map.put(MESSAGE,jsonObject.get(MESSAGE).getAsString());\n        }else{\n            map.put(HTTP_CODE,500);\n            map.put(ERROR_CODE,ExternalTasksValidationCode.NO_ERROR_MESSAGE_FROM_DP.getCode());\n            map.put(ERROR_MESSAGE,ExternalTasksValidationCode.NO_ERROR_MESSAGE_FROM_DP.getMessage());\n            map.put(MESSAGE,\"No error message from Data Processing\");\n        }\n\n        return map;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6169a80-24f9-4742-ab6d-f4fa328c52f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":245,"endLine":260,"content":"nt httpClient = HttpClients.createDefault();\n            URIBuilder uriBuilder = new URIBuilder(String.format(SUPERCLASS_INFO_URL, superClassMap.get(LINK)));\n            MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            Optional< AuthDetails > authDetailsOp = metadataEngineConfig.getAuthInfo().stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n            if (!authDetailsOp.isPresent())\n                throw new Exception(\"Auth Type not present\");\n            Optional<AuthApiAttributes> authApiAttributes= authDetailsOp.get().getHeaderDetails().stream().filter(header -> header.getTokenGenerationDetails() != null).findFirst();\n            if(!authApiAttributes.isPresent())\n                throw new Exception(\"Auth Api Attributes not present\");\n            httpGet.addHeader(UCConstants.AUTHORIZATION, String.format(\"Bearer %s\", authService.constructValueFromConfig(metadataEngineConfig,authApiAttributes.get(), pnpConnectionsInfo,flattenedConnectionInfo)));\n            httpGet.setURI(uriBuilder.build());\n            response = httpClient.execute(httpGet);\n\n            if","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1cca9ab2-6303-4bbd-854a-b757867c39ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":25,"endLine":60,"content":"aEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.COMMA;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Order(12000)\n@Slf4j\npublic class Zuorav2DataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String DATA = \"data\";\n    private static final String ZUORA_EXTRACT_TASK = \"CaasZuoraV2Extract\";\n\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f23ac30-e840-45e9-85af-a7387cee991c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/DuctMessageProcessor.java","startLine":28,"endLine":68,"content":"otation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class DuctMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private DuctService ductService;\n\n    @Autowired\n    public DuctMessageProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                DuctJobMapping payload = messageInfo.getPayloa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03e0577f-7347-490d-a2b5-6b3b2bda76e1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":72,"endLine":97,"content":"ndByConnectionId(any())).thenReturn(createConnectionInfo());\n            when(caasMetadataFactory.getService(ConnectorType.HUBSPOT,false)).thenReturn(hubspotCaasMetadataService);\n            when(hubspotCaasMetadataService.getObjectAttributes(any(String.class), any(PNPConnectionsInfo.class))).thenReturn(mockAttributes());\n            when(caasConnectorConfigService.getConnectorConfig(any(ConnectorType.class))).thenAnswer((Answer<CaasConnectorConfig>) invocation -> createConnectorConfig(invocation.getArgument(0)));\n            hubspotBulkWriteBackValidationService.validateHubspotWriteBackPayload(createDuctJobMapping(false, null, Arrays.asList(\"RANDOM\"), false));\n        } catch (CaasException ex) {\n            passed = false;\n            caex = ex;\n        } catch (Exception c) {\n            passed = true;\n        } finally {\n            assertFalse(\"Caas Exception did not occur which is not expected\", passed);\n            assertEquals(DuctErrorConstants.HUBSPOT_BULK_WRITE_BACK_NOT_SUPPORTED, caex.getGsExternalSystemErrorMapping().getMessage());\n        }\n    }\n\n    @Test\n    public void test_validateMandatoryMapping_failed() {\n        boolean passed = true;\n        CaasException caex = null;\n        Map<String, ObjectDefinition> objectDefinition = null;\n        try {\n            objectDefinition = mockAttributesHubspotContact();\n            Map<String, String> objectLevelOperation = new HashMap<>();\n            objectLevelOperation.put(\"CONTACT\", \"UPSERT\");\n            when(p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9dfbdce4-8bbb-4f6b-b2dc-7ea76c2b6b8d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/auth/TenantUserRoleTypeServiceImpl.java","startLine":40,"endLine":85,"content":"leTypeServiceImpl.class);\n\n  private static final String REQUEST_INFO = \"ri\";\n\n  private final UserSessionService userSessionService;\n  private final Map<String, String> additionals = Maps.newHashMap();\n\n  {\n    additionals.put(\"ar\", \"TU\");\n  }\n\n  @Autowired\n  public TenantUserRoleTypeServiceImpl(UserSessionService userSessionService) {\n    this.userSessionService = userSessionService;\n  }\n\n  @Override\n  public Map<String, String> generateJWT(RequestInfo requestInfo, Boolean resolveUser, Integer jwtExpiryMinutes) {\n    throw new NotImplementedException(\"Generation of request info not implemented\");\n  }\n\n  @Override\n  public String generateJWT(RequestInfo requestInfo) {\n    throw new NotImplementedException(\"Generation of request info not implemented\");\n  }\n\n  @Override\n  public RequestInfo validateJWT(String authorizationToken) {\n    if (StringUtils.isBlank(authorizationToken)) {\n      return null;\n    }\n    if (authorizationToken.length() <= 36) {\n      LOGGER\n          .warn(\"Seems Old UUID token is present as part of authToken. Not sending it for jwt parsing. It will go and fetch the token from database\");\n    } else {\n      Pair<RequestInfo, Boolean> pair = getRequestInfo(authorizationToken);\n      if (!pair.getRight()) {\n        return pair.getLeft();\n      }\n    }\n    return userSessionService.findByAuthToken(authorizationToken, AuthTokenType.BIONIC_RULES_DP_SYSTEM_USER);\n  }\n\n  private Pair<RequestInfo, Boolean> getRequestInfo(String jwtToken) {\n    try {\n      JWTClai","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1e8030e-14a3-4a0c-a75c-6f1c5e410ef8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/MetadataGenerationQueueInfo.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n@Service\npublic class MetadataGenerationQueueInfo implements QueueInfo {\n    private static final DuctProcessQueue queue = DuctProcessQueue.METADATA_QUEUE;\n\n    @Override\n    public String getQueueName() {\n        return queue.getQueueName();\n    }\n\n    @Override\n    public String getTableName() {\n        return queue.getTableName();\n    }\n\n    @Override\n    public Duration getDefaultLockTime() {\n        return Duration.ofHours(3);\n    }\n\n    @Override\n    public int getDefaultTenantLimit() {\n        return 5;\n    }\n\n    @Override\n    public QueueDbMessageSplitter getMessageSplitter() {\n        MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n        return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n    }\n\n    @Override\n    public boolean maintainMessageSequencing() {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f94c23e8-df4c-45ce-bf5a-c04ff902f80c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClient.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.sdk.client;\n\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface DuctFrameworkClient {\n    DuctResponseDTO saveMapping(DuctRequestDTO ductRequestDTO);\n\n    DuctResponseDTO getJob(String jobId);\n\n    List<ObjectDefinition> getObjects(String connectionId);\n\n    Map<String, ObjectDefinition> getAttributes(String objectName, String connectionId);\n\n    Map<String, ObjectDefinition> getAttributes(String objectName, String connectionId, boolean includePicklistOptions);\n\n    Map<String, ObjectDefinition> getAttributes(DuctRequestDTO ductRequestDTO);\n\n    CaaSExtractDetails createExtractTask(String ductRequestDTO);\n\n    Map<String,Object> createExtractTaskWithJarDetails(String ductRequestDTO, String parentId);\n\n    CaasConnectorConfig getCaaSConnectorConfig(ConnectorType connectorType);\n\n    QueryAPIResponseBean syncDataExtract(DuctRequestDTO ductRequestDTO);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6cb36f82-68dd-4dab-8a03-c878e6d13e76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":65,"endLine":84,"content":"asterLookUpConfiguration, boolean fieldsFlattened) throws Exception {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        String originalDataType;\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            String canonicalName = rule.getFieldInfo().getJsonPath();\n            String[] fieldNameSplitted = canonicalName.split(\"\\\\.\");\n\n            String computedCanonicalName = canonicalName;\n            Map<String, GSFieldDefinition> fieldDBNameToFieldDefinitionMap = new HashMap<>();\n            if (fieldNameSplitted.length == 1) {\n                fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(objectName, new HashMap<>());\n            } else if (fieldNameSplitted.length == 2) {\n                if (fieldsFlattened) {\n                    fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(objectName, new HashMap<>());\n                } else {\n                    String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldNameSplitted[0]).getMeta()\n                            .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                    fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(lookedUpObjectName, new HashMap<>());\n                    computedCanonicalName = fiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50052ca1-3a8f-4ce3-9a10-731bbe093b5e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":200,"endLine":238,"content":"etaMap)\n        .entrySet()\n        .stream()\n        .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(DataType.DATETIME.getValue()))\n        .forEach(kv -> dateTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n    return dateTimeFieldsMap;\n  }\n\n\n  private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n    nullSafeMap(fieldNameMetaMap)\n        .entrySet()\n        .stream()\n        .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n        .forEach(kv -> externalFilterableFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n    return externalFilterableFieldsMap;\n  }\n\n  private String getDateTimeFormat(CaasConnectorConfig caasConnectorConfig) {\n    DataTypeMappings dateTimeMapping = caasConnectorConfig.getDataTypeMappings()\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(\"DATETIME\"))\n        .findFirst().orElse(null);\n\n    if (Objects.isNull(dateTimeMapping)) {\n      return DEFAULT_DATETIME_FORMAT;\n    }\n    return dateTimeMapping.getFormat();\n  }\n\n  private List<Criteria> flattenCriteria(Criteria criteria) {\n    List<Criteria> flattenedCriteria = new ArrayList<>();\n    // Recursively flatten the criteria\n    flatten(criteria, flattenedCriteria);\n    return flattenedCriteria;\n  }\n\n  private void flatten(Cri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"95867e93-71cb-4a6a-aab5-5215f0b7d395","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":513,"endLine":534,"content":"successFile.getName(), successFile);\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                    + FORWARD_SLASH + failureFile.getName(), failureFile);\n        } catch (Exception e) {\n            log.error(\"[Dynamics] Error occurred while writing data to Dynamics instance: {}...\", e.getMessage(), e);\n            ductResponse.setErrorMessage(e.getMessage());\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, e.getMessage(), e, ductJobMapping.getJobId()));\n        } finally {\n            FileUtils.deleteQuietly(inputFile);\n            FileUtils.deleteQuietly(successFile);\n            FileUtils.deleteQuietly(failureFile);\n            log.info(\"Loading bulk data to dynamics completed for the job: {}\", ductJobMapping.getJobId());\n        }\n        return ductResponse;\n    }\n\n    private Map<String, String> constructLookupProjectionToNavigationProperty(Set<String> projectionsWithLookups, String targetObjectPluralName,\n                                                                              List<Relationship> relationships) {\n        Map<String, String> lookupProjectionToNavigationProperty = new HashMap<>();\n        Map<String, String> masterLookupConfigMap = DynamicsGainsightUtils.fetchMapFromConfigServer();\n        for (String projection : projectionsWithLookups) {\n            String sourceLookupField = S","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"002592f1-6d8c-4144-a35c-db443f1d4970","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/GsDuctWebApp.java","startLine":22,"endLine":45,"content":"aAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.EventListener;\n\n\n@SpringBootApplication\n@ComponentScan(basePackages = {\"com.gainsight.queue\", \"com/gainsight/duct\"}, excludeFilters  = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE, classes = {DbQueueSpringConfiguration.class})}, basePackageClasses = DbQueueProducerSpringConfiguration.class)\n@EnableAutoConfiguration(exclude = {\n        SecurityAutoConfiguration.class,\n        DataSourceAutoConfiguration.class,\n        DataSourceTransactionManagerAutoConf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c1f40bf8-b7f1-432e-a572-bce85c0197fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":974,"endLine":990,"content":"WFLAKE:\n                    try {\n                        if (isPasswordChanged(pnpConnectionInfoFromUI.getProperties().getOrDefault(PASSWORD, StringUtils.EMPTY).toString(),\n                                pnpConnectionsInfoFromDB.getProperties().getOrDefault(PASSWORD, StringUtils.EMPTY))) {\n                            pnpConnectionInfoFromUI.getProperties().put(\"password\",\n                                    CryptHandler.getInstance().encrypt(pnpConnectionInfoFromUI.getProperties().get(\"password\").toString()));\n                        } else {\n                            pnpConnectionInfoFromUI.getProperties().put(\"password\", pnpConnectionsInfoFromDB.getProperties().get(\"password\"));\n\n                        }\n                        GainsightSnowflakeChannelFactory gainsightSnowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n                        GainsightSnowflakeChannelService gainsightSnowflakeChannelService = gainsightSnowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionInfoFromUI);\n                        gainsightSnowflakeChannelService.authenticate();\n                        pnpConnectionsInfoFromDB.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                        pnpConnectionsInfoFromDB.setConnectionName(pnpConnectionInfoFromUI.getConnectionName());\n                        pnpConnectionsInfoFromDB.setIpaasConnection(pnpConnectionInfoFromUI.isIpaasConnection());\n                        EncryptConnectionDetails connectionDetail","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b1bffad2-e5e4-443d-b245-222021a3fde1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/EventUtils.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhevents.api.EventService;\nimport com.gainsight.services.utilities.datahighway.dhevents.pojo.Event;\nimport com.gainsight.utils.JsonUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.MediaType;\n\n\n@Slf4j\npublic class EventUtils {\n    private static final String EVENT_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"dh.events.api.url.base\");\n    private static final String EVENT_PUBLISHER_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.publisher.shared.secret\");\n\n    public static void publishEvent(String host, String secret, String topicName, String eventName, String version, Object payload) {\n        try {\n            EventService eventService = EventService.getInstance(host, secret);\n            String data = JsonUtil.toJsonString(payload);\n            Event event = new Event()\n                    .setTenantId(RequestContextProvider.getTenantId())\n                    .setTopicName(topicName)\n                    .setEventName(eventName)\n                    .setEventVersion(version)\n                    .setEventDataContentType(MediaType.APPLICATION_JSON_VALUE)\n                    .setEventData(data);\n            eventService.postEvent(event);\n            log.info(\"Successfully published event : {}\", data);\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d9d45aa-4d96-48b1-853a-4aa51b5d9273","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":242,"endLine":258,"content":"nfigService.getConnectorConfig(ConnectorType.ZENDESK);\n        Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n        if (!first.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        ResourceConfig resourceConfig = first.get();\n        ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_ASYNC);\n        TreeMap<String,Criteria> valueToCriteriaMap = new TreeMap<>();\n        if(CollectionUtils.isNotEmpty(apiConfigAttributes.getQueryParamDetails())) {\n            for (AuthApiAttributes queryParamDetail : apiConfigAttributes.getQueryParamDetails()) {\n                if (!queryParamDetail.isStatic() && queryParamDetail.getValue() instanceof Map) {\n                    ExternalFilterValueConfig externalFilterValueConfig = OBJECT_MAPPER.convertValue(queryParamDetail.getValue(), ExternalFilterValueConfig.class);\n                    DataHighwayUtils.getCriteria(ductJobMapping.getCriteria(), valueToCriteriaMap, externalFilterValueConfig.getExternalFieldName(), externalFilterValueConfig.getOperator());\n                }\n            }\n        }\n        if(!valueToCriteriaMap.isEmpty())\n            return DataHighwayUtils.getFilterRuleFromCAASCriteria(valueToCriteriaMap.get(valueToCriteri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2eb97e1e-2bdc-46ce-9642-e3c993dc58bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":237,"endLine":251,"content":"yptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.port\")).getValue());\n    relationalDBConnectionDetail.setUser(CryptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.user\")).getValue());\n    relationalDBConnectionDetail.setPwd(CryptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.pwd\")).getValue());\n    relationalDBConnectionDetail.setSslEnabled(Boolean.valueOf(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.ssl.enabled\")));\n    pnpConnectionsInfo.setConnectionDetail(relationalDBConnectionDetail);\n\n    pnpConnectionsInfo.setConnectionType(ConnectorType.POSTGRES);\n    pnpConnectionsInfo.setConnectionId(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.connection.id\"));\n    pnpConnectionsInfo.setConnectionName(\"Ipaas Staging Postgres connection details\");\n    Map<String, Object> props = Maps.newHashMap();\n    props.put(\"minIdle\", DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.min.idle\"));\n    props.put(\"maxIdle\", DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.max.idle\"));\n    props.put(\"initialSize\", DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.initial.size\"));\n    pnpConnectionsInfo.setProperties(props);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"154753fd-56b9-4dcb-b92b-82d7cb6473a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":24,"endLine":57,"content":"entProperties;\nimport com.gainsight.service.tenant.OrganizationInfo;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Maps;\nimport lombok.SneakyThrows;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Component;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\nimport static com.gainsight.integration.bean.IPaasConstants.AUTHORIZATION;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\nimport static com.gainsight.integration.utils.common.UCConstants.GS_B2B_TOKEN;\n\n@Component\npublic class DuctConnectionHelperUtils {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctConnectionHelperUtils.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private static final Integer SSO_INSTANCES_EXTRACT_MAX_RETRY = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.extract.sso.instances.max.retry\", 1);\n    private static final String SSO","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f39faad8-bfd0-47c8-a782-f64e15fc5f23","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":949,"endLine":963,"content":"OM_DOMAIN_ENABLED)));\n                    String sfdcOrgType = GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(UCConstants.GSIntegration.ORG_TYPE));\n                    pnpConnectionsInfoFromDB.getProperties().put(UCConstants.GSIntegration.CUSTOM_DOMAIN_ENABLED, isCustomDomainLoginRequired);\n                    pnpConnectionsInfoFromDB.getProperties().put(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL, populateCustomDomain(pnpConnectionInfoFromUI, isCustomDomainLoginRequired));\n                    pnpConnectionsInfoFromDB.getProperties().put(UCConstants.GSIntegration.ORG_TYPE, SalesforceOrgType.forValue(sfdcOrgType));\n                    break;\n                case DYNAMICS:\n                    assertTrue(pnpConnectionInfoFromUI.getConnectionName().length() < 100, CaasValidationCode.INVALID_INPUT, CaasValidationCode.CONNECTION_NAME_MORE_THAN_100.getUserText(), HttpStatus.SC_BAD_REQUEST);\n                    String dynamicsResourceUri = GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(UCConstants.GSIntegration.DYNAMICS_ORG_URI));\n                    pnpConnectionsInfoFromDB.getProperties().put(UCConstants.GSIntegration.DYNAMICS_ORG_URI, dynamicsResourceUri);\n                    break;\n                case GAINSIGHT_PX:\n                    pnpConnectionsInfoFromDB.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties()\n                            .get(\"API_KEY\")), ConnectorType.GAINSIGHT_PX));\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"444870c9-66ea-46dc-9d70-4e2bb5f48564","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/DuctSingleCEQueryBuilder.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.utils.ipaas;\n\nimport com.gainsight.duct.enums.Operators;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\n\n@Slf4j\npublic class DuctSingleCEQueryBuilder {\n    public static String createQuery(FilterRule filterRule) throws UnsupportedEncodingException {\n        String criteria = getFilterString(filterRule);\n        log.debug(String.format(\"Query created for \", criteria));\n        return criteria;\n    }\n\n    private static String getFilterString(FilterRule filterRule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(createFilterQueryFromEachRule(filterRule, stringBuilder));\n        return stringBuilder.toString();\n    }\n\n    private static String createFilterQu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"10b45d6e-27cf-4af5-8701-1ceba72fed97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":125,"endLine":158,"content":"ng offset = ductJobMapping.getNextPageToken() == null ? \"0\" : ductJobMapping.getNextPageToken();\n        queryParams.put(\"limit\", limit);\n        queryParams.put(\"offset\", offset);\n\n        Map<String, GSFieldDefinition> fieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n        List<Criteria> filters = new ArrayList<>();\n        filters = extractFilters(criteria, filters);\n        filters.forEach(filter -> {\n            String filterName = getFilterableName(filter, fieldDefinitionMap);\n            String val = null;\n            List values;\n            if (filter.getValues() instanceof List) {\n                values = (List) filter.getValues();\n            } else {\n                values = Lists.newArrayList(filter.getValues());\n            }\n            if (CollectionUtils.isNotEmpty(values)) {\n                if (filter.getOperatorType() == FilterOperator.IN) {\n                    List<String> strValues = new ArrayList<>();\n                    for (Object v : values) {\n                        strValues.add(String.valueOf(v));\n                    }\n                    val = String.join(\",\", strValues);\n                } else {\n                    val = String.valueOf(values.get(0));\n                }\n            }\n            queryParams.put(filterName, val);\n        });\n        return queryParams;\n    }\n\n    private static List<Criteria> extractFilters(Criteria criteria, List<Criteria> filters) {\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50916342-2c91-4433-b3fc-c89e8af53f05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":117,"endLine":147,"content":"ties().getValue(Constants.CALL_BACK_BASE_URL) + \"/api\");\n            return new ResponseObj(true, authorizationUrl);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false);\n        }\n    }\n\n    @GetMapping(value = \"fetchAll\")\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.LIST)\n    public ResponseObj ipaasGetConnections() {\n        try {\n            return new ResponseObj(true, ductConnectionService.getConnections());\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, e.getMessage(), e.getErrorCode());\n        }\n    }\n\n    @GetMapping(value = \"/type/{connectionType}\")\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.LIST)\n    public ResponseObj getConnections(@PathVariable(\"connectionType\") final ConnectorType connectorType) {\n        try {\n            List<PNPConnectionInput> pnpConnectionInputs;\n            if (connectorType == ConnectorType.GAINSIGHT_API) {\n                pnpConnectionInputs = ductConnectionService.getAccessKeyConnectionInfo();\n            } else {\n                pnpConnectionInputs = ductConnectionService.findByConnectionType(connectorType);\n            }\n            if (GainsightCollectionUtils.nullSafeList(pnpConnectionInputs).isEmpty()) {\n                return new ResponseObj(true, CaasValidationCode.NO_CONNECTION_FOUND.getUserText(), CaasValidationCode.NO_CONN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2461397f-60e2-4ea0-8c85-dcf516921355","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":125,"endLine":151,"content":"e());\n            meta.put(FILTERABLE, true);\n            meta.put(EXTERNALLY_FILTERABLE, false);\n        }\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n            metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n            metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n        if (ObjectUtils.isNotEmpty(complexTypeMappings) && complexTypeMappings.containsKey(fieldDataType))\n            metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(fieldDataType).getValue());\n        if (ObjectUtils.isNotEmpty(metaProperties))\n            meta.put(PROPERTIES, metaProperties);\n        if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n            meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n        meta.put(FILTERABLE_IN_INTERNAL_SYSTEM, true);\n        meta.put(FILTERABLE_IN_EXTERNAL_SYSTEM, true);\n        meta.put(PATH, String.valueOf(fieldDetails.getName()));\n        meta.put(IS_PRIMARY_KEY, false);\n        meta.put(ACCESSIBLE, true);\n        meta.put(SORTABLE, true);\n        meta.put(GROUPABLE, true);\n        meta.put(ORIGINAL_DATA_TYPE, fieldDataType);\n        retMap.put(META, meta);\n        return retMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18591810-5b21-4b5f-af93-b06f8c331610","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/metadata/engine/MetadataEngineConfigDaoImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.dao.metadata.engine;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic class MetadataEngineConfigDaoImpl extends AbstractEntityDaoImpl<MetadataEngineConfig> implements MetadataEngineConfigDao {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n\n    @Autowired\n    public MetadataEngineConfigDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, MetadataEngineConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(MetadataEngineConfig caasObjectApiConfig, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"75662db8-b816-44e9-803a-ed3ad1fd85eb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":27,"endLine":51,"content":"Code;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.processor.GainsightHubspotFetchProcessor;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.duct.utils.transformer.ExternalToGsObjectDefinitionTransformer;\nimport com.gainsight.enums.CollectionObjectGroupType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.AuthType;\nimport com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7288a11e-912b-4305-a0c2-2bf6a7e4f411","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":27,"endLine":47,"content":"rizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.dynamics.bean.factory.GSODataClientFactory;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.MSDynamicsObject;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.Relationship;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.RelationshipType;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\nimport com.gainsight.integration.connector.dynamics.bean.query.OutputMode;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\nimport com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsDataService;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsDataServiceV2;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsSchemaService;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2252e8b9-287a-4341-aa29-c86a05cc1bdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":379,"endLine":405,"content":"getValues();\n                    return value1.toString().compareTo(value2.toString());\n                })\n                .orElse(null);\n\n        if (Objects.isNull(requiredSingleCriteria)) {\n            return getDefaultFallbackCriteria(resourceName);\n        } else {\n            Criteria criteria = getDefaultFallbackCriteria(resourceName);\n            criteria.setFilters(Lists.newArrayList(requiredSingleCriteria));\n            return criteria;\n        }\n    }\n\n    private void modifyCriteriaValueIfApplicable(Criteria criteria, Map<String, GSFieldDefinition> dateTimeFieldsMap) {\n        try {\n            if (dateTimeFieldsMap.containsKey(criteria.getFieldName())) {\n                String dateTimeStr = criteria.getValues() instanceof List ? ((List) criteria.getValues()).get(0).toString() : criteria.getValues().toString();\n                String format = dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\") == null ?\n                        DEFAULT_DATETIME_FORMAT : dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\").toString();\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);\n                LocalDateTime parsedDate = LocalDateTime.parse(dateTimeStr, formatter);\n                String formattedDate = parsedDate.toLocalDate().toString();\n                criteria.setValues(Lists.newArrayList(formattedDate));\n            }\n        } catch (Exception e) {\n            LOGGER.erro","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f1aea92e-a61c-4371-8dcf-536a7fc0aa75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctJobMapping.java","startLine":100,"endLine":145,"content":"bject> externalSystemResponse;\n    private String externalErrorMessage;\n\n    private String targetSystemDataURL;\n    private String fileName;\n\n    private List<ColumnMapping> columnMappings;\n\n    private boolean isBulk;\n    private String externalDHJobId;\n    private String extractTaskId;\n    private String freeFormTaskId;\n    private Criteria criteria;\n    private String encryptedRequestInfo;\n    private int limit = 10;\n    private int offset = 0;\n    private String nextPageToken;\n    private CaasS3FileDetails caasS3FileDetails;\n    private CaasFileInfo caasFileInfo;\n    private boolean isRules;\n\n    private String externalInputFileLocation;\n    private String externalErrorFileLocation;\n    private String externalSuccessFileLocation;\n    private String externalErrorFileLocationS3Link;\n    private String sourceResponseFile;\n    private String dbqMessageId;\n    private TargetSystem targetSystem;\n\n    public Map<String, Object> getProperties() {\n        if(properties == null){\n            properties = Maps.newHashMap();\n        }\n        return properties;\n    }\n\n    @Override\n    public String toString() {\n        return \"DuctJobMapping{\" +\n                \"jobId='\" + jobId + '\\'' +\n                \", isSynchronized=\" + isPaginated +\n                \", tenantId='\" + tenantId + '\\'' +\n                \", syncDirection=\" + syncDirection +\n                \", connectionId='\" + connectionId + '\\'' +\n                \", resourceName='\" + resourceName + '\\'' +\n                \", totalC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b235557e-0b87-449a-9d75-83432610ef4d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":107,"endLine":134,"content":"etAsJsonArray().get(0).getAsString();\n                } else {\n                    return null;\n                }\n            } else if (isMultiValued) {\n                return extractMultipleValues(jsonElement, pathArray[depth]);\n            } else if (jsonElement.isJsonObject()) {\n                return String.valueOf(jsonElement);\n            } else {\n                return jsonElement.getAsString();\n            }\n        } catch (Exception e) {\n            log.error(\"Some error occurred while resolving field value from json data for field {} due to : {}\", fieldInfo, e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, \"\", String.format(\"Error while resolving field value from json data for field %s-%s\", fieldInfo, e.getMessage())));\n        }\n    }\n\n    private static String extractMultipleValues(JsonElement jsonElement, String path) {\n        JsonArray jsonArray = new JsonArray();\n        if(jsonElement.isJsonArray()) {\n            for (JsonElement je : jsonElement.getAsJsonArray()) {\n                if (je.isJsonPrimitive()) {\n                    jsonArray.add(je);\n                } else if (!je.isJsonNull() && je.getAsJsonObject().get(path) != null && !je.getAsJsonObject().get(path).isJsonNull()) {\n                    jsonArray.add(je.getAsJsonObject().get(path));\n                }\n            }\n            return jsonArray.toString(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9eadb5d5-a838-456b-8b00-f8c21f963b5f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":115,"endLine":135,"content":"on {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String resourceName = ductJobMapping.getResourceName().toLowerCase();\n\n        List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n        String dataApi = null;\n        boolean isPaginationSupported = false;\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(resourceName)).findFirst();\n        if (caasObjectApiConfig.isPresent()) {\n            dataApi = caasObjectApiConfig.get().getDataApi();\n            isPaginationSupported = ObjectUtils.isNotEmpty(caasObjectApiConfig.get().getAdditionalProperties().get(PAGINATION_SUPPORTED)) ?\n                    (Boolean) caasObjectApiConfig.get().getAdditionalProperties().get(PAGINATION_SUPPORTED) : false;\n\n            GainsightZoomChannelFactory gainsightZoomChannelFactory = new GainsightZoomChannelFactory();\n\n            TokenDetails tokenDetails = extractAccessDetails(ductJobMapping.getConnectionId());\n\n            try {\n                Map<String, Object> tokenDetailMap = gainsightZoomChannelFactory.getAccessToken(tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken());\n                tokenDetails.setAccessToken(tokenDetailMap.get(ACCESS_TOKEN).toString());\n                tokenDetails.setRefreshT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b385bcc5-dec2-4891-99c3-607ec245901e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/IpaasBulkDownloadCallbackPayload.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.beans.dh;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.util.Map;\n\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@AllArgsConstructor\n@NoArgsConstructor\npublic class IpaasBulkDownloadCallbackPayload {\n    private String tenantId;\n    private String connectionId;\n    private String jobId;\n    private Map<String, Object> requestMap;\n    private String requestId;\n\n    public IpaasBulkDownloadCallbackPayload(String tenantId, String jobId, String requestId) {\n        this.tenantId = tenantId;\n        this.jobId = jobId;\n        this.requestId = requestId;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5240e564-040c-4a32-93ba-d728f90015a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/SnowFlakeConnectionDetailsEncryptor.java","startLine":1,"endLine":22,"content":"package com.gainsight.duct.utils.connectiondetailEncrytor.Impl;\n\nimport com.gainsight.bean.base.connection.BaseConnectionDetail;\nimport com.gainsight.bean.base.connection.SnowFlakeConnectionDetail;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.SimpleCryptor;\nimport com.gainsight.duct.utils.connectiondetailEncrytor.EncryptConnectionDetails;\nimport com.gainsight.utils.CryptHandler;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SnowFlakeConnectionDetailsEncryptor implements EncryptConnectionDetails {\n    @Override\n    public BaseConnectionDetail getConnectionDetails(Map inputProperties, String type) {\n            SnowFlakeConnectionDetail snowFlakeConnectionDetail = new SnowFlakeConnectionDetail();\n            SimpleCryptor simpleCryptor = CryptUtil.getSimpleCryptor();\n            snowFlakeConnectionDetail.setUrl(simpleCryptor.encrypt(inputProperties.get(\"databaseHost\").toString()).getValue());\n            snowFlakeConnectionDetail.setHost(simpleCryptor.encrypt(inputProperties.get(\"databaseHost\").toString()).getValue());\n            snowFlakeConnectionDetail.setUser(simpleCryptor.encrypt(inputProperties.get(\"username\").toString()).getValue());\n            snowFlakeConnectionDetail.setPwd(simpleCryptor.encrypt(CryptHandler.getInstance().decrypt((byte[])((byte[])inputProperties.get(\"password\"))).toString()).getValue());\n            snowFlakeConnectionDetail.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").t","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ecaf50d-133e-4c24-9f66-5055ac0f2745","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":98,"endLine":122,"content":"e = DuctResponseDTO.class)\n    @PostMapping(value = \"/data/fetch\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj fetchDataSynchronous(\n            @ApiParam(value = \"Request Structure to retrieve data\", required = true) @RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.synchronousFetch(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Insert/Upsert Data Sync\", response = DuctResponseDTO.class)\n    @PostMapping(value = \"/data\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj insertDataSynchronous(\n            @ApiParam(value = \"Request Structure to retrieve data\", required = true) @RequestBody final DuctRequestDTO ductRequestDTO,\n            @RequestParam(value = \"isUpsert\", required = false) boolean isUpsert) {\n        try {\n            if (isUpsert) {\n                retur","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35cae683-1349-432f-9571-5d42d627a6be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":133,"endLine":158,"content":"on : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(VALUE, option.get(ID).asText());\n                picklistOption.put(LABEL, option.get(LABEL).asText());\n                if(ObjectUtils.isNotEmpty(option.get(COLOR)))\n                    picklistOption.put(COLOR, option.get(COLOR).asText());\n                picklistOptions.add(picklistOption);\n            }\n            fieldDefinition.put(OPTIONS, picklistOptions);\n        }\n    }\n\n    private static void populateValueIfPresent(JsonNode sourceMap, String sourceKey,\n                                               Map<String, Object> targetMap, String targetKey, Class<?> type) {\n        if (sourceMap.get(sourceKey) != null) {\n            if (type == Boolean.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asBoolean());\n            else if (type == Integer.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asInt());\n            else if (type == Double.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asDouble());\n            else\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asText());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ce23a56-92ea-4cb3-8e35-9a6ea9af5352","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/transformer/ExternalToGsObjectDefinitionTransformer.java","startLine":42,"endLine":59,"content":"fig.getObjectLevelFieldsExpression().containsKey(objectName) && ((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectName)).containsKey(DuctConstants.EXPRESSION_FOR_UPSERT_KEYS)) {\n                    objectDefinition.setExpressionForUpsertKeys(((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectName)).get(DuctConstants.EXPRESSION_FOR_UPSERT_KEYS).toString());\n                }\n            }\n            if (ConnectorType.DYNAMICS.equals(connectorConfig.getConnectorType()) &&\n                    (CollectionUtils.isNotEmpty(connectorConfig.getSupportedWriteBackObjects()) && connectorConfig.getSupportedWriteBackObjects().contains(UCConstants.ALL_OBJECTS))) {\n                objectDefinition.setUpdateable(true);\n                objectDefinition.setCreateable(true);\n            } else {\n                if ((CollectionUtils.isNotEmpty(connectorConfig.getSupportedWriteBackObjects()) && connectorConfig.getSupportedWriteBackObjects().contains(objectName))\n                        || (boolean) objectMap.getOrDefault(DuctConstants.DescribeMetaConstants.UPDATEABLE, false)) {\n                    objectDefinition.setUpdateable(true);\n                }\n                if ((boolean) objectMap.getOrDefault(DuctConstants.DescribeMetaConstants.CREATEABLE, false)) {\n                    objectDefinition.setCreateable(true);\n                }\n            }\n            if (Objects.nonNull(objectMap.get(DuctConstants.DescribeMetaConstants.SOU","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"784c0ac2-16d6-42e4-bb70-45fffefebc6c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":205,"endLine":244,"content":"bject>>>() {\n        });\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return ZUORA_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zuorav2.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zuorav2.extract.version\",\"v1\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zuorav2.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9bf56fd-df11-43e6-a180-82815e6a663d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":58,"endLine":80,"content":"tring(1, queryParam);\n            List<Map<String, Object>> views = nullSafeList(executeWithMapListHandler(preparedStatementViews));\n            tables.addAll(views);\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", sqlException);\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\", sqlException);\n        }\n        return tables;\n    }\n\n    @Override\n    public List<Map<String, Object>> listAllFields(String objectName) throws CaasException {\n        Map ipaasProperties = (Map)pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\");\n        String db = ipaasProperties.get(\"databaseName\").toString();\n        String schema = ipaasProperties.get(\"datasetId\").toString();\n        String queryParam = QUOTES + db + QUOTES + DOT + QUOTES + schema + QUOTES + DOT + QUOTES + objectName + QUOTES;\n        List<Map<String, Object>> result = null;\n        try (PreparedStatement preparedStatement = connection.prepareStatement(\"show columns in identifier(?)\");) {\n            preparedStatement.setString(1, queryParam);\n            result = nullSafeList(executeWithMapListHandler(preparedStatement));\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", sqlException);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL, sqlExce","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"06d4710e-071b-4a1d-abcf-c29ecd6bd89b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":259,"endLine":289,"content":"turn null;\n                            }).filter(Objects::nonNull).collect(Collectors.toList())\n                    );\n                }\n                relationshipFieldsAlreadyAdded.add(relationshipName);\n            }\n        }\n        return baseAttributes;\n    }\n\n    private Map<String, String> createRelationshipNameToObjectNameMap(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> baseAttributes) {\n        Map<String, String> relationToObjectNameMap = new HashMap<>();\n        for (GSFieldDefinition field : baseAttributes.get(ductJobMapping.getResourceName()).getFields()) {\n            if (field.getMeta().getLookupDetail() != null) {\n                relationToObjectNameMap.put(field.getMeta().getLookupDetail().getLookupId(), field.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName());\n            }\n        }\n        return relationToObjectNameMap;\n    }\n\n    /*private Map convertDyanmicsObjectForUI(MSDynamicsObject msDynamicsObject) {\n        Map<String, Object> retMap = new HashMap<>();\n        retMap.put(\"objectName\", msDynamicsObject.getLogicalName());\n        retMap.put(\"objectId\", msDynamicsObject.getObjectId());\n        retMap.put(\"pluralName\", msDynamicsObject.getPluralName());\n        retMap.put(\"label\", msDynamicsObject.getDisplayName());\n        retMap.put(\"fields\", constructDynamicsFields(msDynamicsObject.getColumns(), msDynamicsObject.getDisplayName()));\n        return retMap;\n    }*/\n\n    /*private List constructDynamicsFields(List","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc08c3b4-796d-4001-8858-f6548748e5d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":101,"endLine":123,"content":"t fallBackToEpoch(Object values) throws CaasException {\n        try {\n            log.info(\"falling back  with EPOCH date\");\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTimeInMillis(Long.parseLong(values.toString()));\n            calendar.getTime();\n            log.info(\"Direct Epoch time from calendar {} , epoch {} \", calendar.getTime(), values);\n            return values;\n        } catch (Exception e) {\n            log.error(\"Error in parsing the direct epoch value\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, \"\", DuctErrorConstants.ERROR_IN_PARSING_DATES + values.toString()));\n        }\n    }\n\n    public static List<Map<String, List<HubspotFilters>>> getFilterFuleFromCAASRuleOld(Criteria baseCriteria) {\n        List<Map<String, List<HubspotFilters>>> finalList = new ArrayList<>();\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            HubspotFilterGroups hubspotFilterGroups = new HubspotFilterGroups();\n            List<List<HubspotFilters>> internalRulesList = new ArrayList<>();\n            HubspotFilters internalFilterRule = new HubspotFilters();\n            if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                //handle if there is only one filter\n               /* createFilterRule(criteria, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a44d4415-2e06-444f-af57-51b9e83cffa3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":933,"endLine":951,"content":"ionsInfoFromDB.setAccessKeyHashed(GainsightUtils\n                                .encryptToCSV(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(ACCESS_SECRET))).trim());\n\n                    }\n                    break;\n                case GS_BULK_API:\n                    validateForBulkAPIAccessKey(pnpConnectionInfoFromUI);\n                    pnpConnectionsInfoFromDB.setTokenDetail(getEncryptedBaseTokenDetail(ObjectUtils.firstNonNull(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties()\n                            .get(DATALOAD_ACCESSKEY)), StringUtils.EMPTY), ConnectorType.GS_BULK_API));\n                    break;\n                case S3:\n                    BaseTokenDetail baseTokenDetail = prepareS3TokenDetails(pnpConnectionInfoFromUI);\n                    pnpConnectionsInfoFromDB.setTokenDetail(baseTokenDetail);\n                    break;\n                case SFDC:\n                    assertTrue(pnpConnectionInfoFromUI.getConnectionName().length() < 100, CaasValidationCode.INVALID_INPUT, CaasValidationCode.CONNECTION_NAME_MORE_THAN_100.getUserText(), HttpStatus.SC_BAD_REQUEST);\n                    boolean isCustomDomainLoginRequired = Boolean.valueOf(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_ENABLED)));\n                    String sfdcOrgType = GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(UCConstants.GSIntegration.ORG_TYPE));\n                    pnpConnectio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7779b378-b7ed-418d-ab7c-ae88776df860","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":178,"endLine":197,"content":"ody().getData(), clazz);\n                } else {\n                    return OBJECT_MAPPER.convertValue(responseEntity.getBody().getData(), clazz);\n                }\n            } else {\n                LOGGER.info(\"Response has isResult flag as false. Throwing Error,\");\n                throw new SystemException(\"Failed to communicate with Service.\", CoreErrorCode.SYSTEM_ERROR);\n            }\n        } catch (HttpClientErrorException | HttpServerErrorException httpError) {\n            LOGGER.error(\"Failed to fetch data from Server.\", httpError);\n            throw new SystemException(httpError.getResponseBodyAsString(), new Throwable(httpError.getResponseBodyAsString()), CoreErrorCode.SYSTEM_ERROR);\n        } catch (IllegalArgumentException parserError) {\n            LOGGER.error(\"Failed to convert data to Requested Type: {}\", clazz.getSimpleName(), parserError);\n            throw new SystemException(parserError, CoreErrorCode.SYSTEM_ERROR);\n        } finally {\n            LOGGER.info(String.format(\"Process took %.5f ms\", ((System.nanoTime() - startEpoch) / 1e6)));\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96616a10-d9ca-4c63-8df5-d851ac59a16c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":471,"endLine":491,"content":")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getEngineConfig(@ApiParam(value = \"Connector Type for fetching config\", required = true) @PathVariable(\"connectorType\") String connectorType) {\n        try {\n            Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType);\n            if (metadataConfigfromCache == null) {\n                MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(ConnectorType.getConnectorType(connectorType));\n                redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType, connectorConfigByObjectName);\n                return new ResponseObj(true, connectorConfigByObjectName);\n            }\n            return new ResponseObj(true, metadataConfigfromCache);\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Extract task\", response = QueryAPIResponseBean.class)\n    @PostMapping(value = \"/util/extractTask\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getExtractTask(@ApiParam(value = \"Request Structure to extract task\", required = true) @RequestBody final DuctRequestDTO ductReque","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"237474e0-8796-4987-a87d-75519b07c970","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":118,"endLine":142,"content":"D, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    private void putObjectsInCache(List<CaasObjectApiConfig> caasObjectApiConfigs,\n                                   List<GainsightHubspotSchema> gainsightHubspotSchemas, String connectionId) {\n        Map objectNameToTypeIdMap = new HashMap();\n        for (CaasObjectApiConfig caasObjectApiConfig : caasObjectApiConfigs) {\n            if (caasObjectApiConfig.getAdditionalProperties().containsKey(DuctConstants.OBJECT_TYPE_ID))\n                objectNameToTypeIdMap.put(caasObjectApiConfig.getObjectName(), caasObjectApiConfig.getAdditionalProperties().get(DuctConstants.OBJECT_TYPE_ID));\n        }\n        for (GainsightHubspotSchema gainsightHubspotSchema : gainsightHubspotSchemas) {\n            objectNameToTypeIdMap.put(gainsightHubspotSchema.getLabels().get(SINGULAR), gainsightHubspotSchema.getObjectTypeId());\n            // TODO: We are getting the complete schema here, let's cache that as well\n//                redisCacheUtility.putValue(gainsightHubspotSchema.getLabels().get(SINGULAR) + \"_\" + RequestContextProvider.getTenantId(), MAPPER.writer().writeValueAsString(gainsightHubspotSchema), 600);\n        }\n        redisCacheUtility.putValue(DuctUtils.getObjectsCallCacheKey(connectionId), objectNameToTypeIdMap, 600);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName,","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a833a5ea-8f9c-492f-92a3-ea3badb5b689","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/AbstractAuthTokenGenStrategyImpl.java","startLine":1,"endLine":42,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.bean.AuthorizationDTO;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.TenantAuthInfo;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.dao.UserSessionDAO;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.utils.GainsightPrecondition;\nimport exception.SystemException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static org.apache.http.HttpStatus.SC_UNAUTHORIZED;\n\n/**\n * Created by: sdugar\n * Date: 9/12/16\n */\npublic abstract class AbstractAuthTokenGenStrategyImpl implements IAuthTokenGenerationStrategy {\n\n    protected final Logger LOGGER = LoggerFactory.getLogger(getClass());\n\n    @Autowired\n    protected UserSessionDAO userSessionDAO;\n\n    @Override\n    public RequestInfo createRequestInfo() {\n        TenantAuthInfo tenantAuthInfo = RequestContextProvider.getTenantAuthInfo();\n        GainsightPrecondition.assertNotNull(tenantAuthInfo, CaasValidationCode.AUTHENTICATION_ERROR, SC_UNAUTHORIZED);\n        RequestInfo requestInfo = new RequestInfo();\n        requestInfo.setTokenType(getAuthTokenType());\n        requestInfo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n        requestInfo.setUserAuthInfo(RequestContextProvider.getUserAuthInfo());\n\n        AuthorizationDTO authorizationDTO = new AuthorizationDTO();\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e3271c9-4adc-4420-99d5-6bedc3db4d15","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":83,"endLine":111,"content":"edisCacheUtility;\n  @Autowired\n  MetadataEngineConfigDao metadataEngineConfigDao;\n  @Autowired\n  PNPConnectionInfoDao pnpConnectionInfoDao;\n\n  @Autowired\n  CaasMetadataFactory caasMetadataFactory;\n\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return connectorType == ConnectorType.FRESHDESK && !isIpaas;\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n    Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo, false, ductJobMapping);\n    return fetchSynchronziedData(ductJobMapping, objectDefinitionMap.get(ductJobMapping.getResourceName()), maxPageSize);\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    try {\n      MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n      Optional<ResourceConfig> optionalResourceConfig = getRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38759aea-6ff8-4939-9b5c-641c8d1a74fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":527,"endLine":541,"content":"turn value;\n        }\n    }\n\n    private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n        List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n        Chainr chainr = Chainr.fromSpec(spec);\n        List<Map<String, Object>> finalData = new ArrayList<>();\n        for (Map<String, Object> datum : data) {\n            finalData.add(OBJECT_MAPPER.convertValue(chainr.transform(datum), new TypeReference<Map<String, Object>>() {\n            }));\n        }\n        return finalData;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ec240c6-9e8d-4b78-8704-d8c946c178d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/GsDuctWorkerApp.java","startLine":23,"endLine":51,"content":"org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\nimport org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration;\nimport org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.context.event.ApplicationReadyEvent;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport utils.Constants;\n\n/**\n *\n */\n@SpringBootApplication\n@EnableAutoConfiguration(exclude = {\n        SecurityAutoConfiguration.class,\n        DataSourceAutoConfiguration.class,\n        DataSourceTransactionManagerAutoConfiguration.class,\n        MongoAutoConfiguration.class,\n        MongoDataAutoConfiguration.class,\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04b9ccff-1ecc-45a4-a819-cb53bc2195f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/IpaasValidationDataSourceService.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Order(10000)\n@Service\n@Slf4j\npublic class IpaasValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType != ConnectorType.SFDC &&\n                connectorType != ConnectorType.HUBSPOT &&\n                connectorType != ConnectorType.SNOWFLAKE &&\n                connectorType != ConnectorType.DYNAMICS &&\n                connectorType != ConnectorType.GAINSIGHT_PX &&\n                connectorType != ConnectorType.GAINSIGHT_API &&\n                connectorType != ConnectorType.ECOSYSTEM &&\n                connectorType != ConnectorType.ZOOM &&\n                connectorType != ConnectorType.MSTEAMS ;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f70dc64-05c9-47cc-a008-a09a31498c2b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":320,"endLine":348,"content":"     column.setDescription(\"Stores Contact ID from Hubspot Contact\");\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                companyPersonUpdateRequired = true;\n            }\n            if (Objects.isNull(companyPersonObject.getColumn(externalAccountIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalAccountIdFieldName);\n                column.setDisplayName(\"Hubspot Account ID_\" + portalId);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Account ID of the Hubspot Company\");\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                companyPersonUpdateRequired = true;\n            }\n            if (companyPersonUpdateRequired) {\n                collectionMasterService.updateStandardCollection(companyPersonObject);\n            }\n            properties.put(UCConstants.GSIntegration.COMPANY_PERSON_IDENTIFIER, externalContactIdFieldName);\n        }\n    }\n\n    private Map<String, Object> getHubspotAccountDetails(BaseTokenDetail baseTokenDetail) {\n        Map<String, Object> accountMap;\n        try {\n            Gainsi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"821cdf61-f324-4e72-891d-b6ea659bd0c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":195,"endLine":206,"content":"npConnectionInfoDao);\n            MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n            List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n            Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.\n                    getAuthorizationType()).equals(com.gainsight.integration.bean.enums.metadata.engine.AuthType.getAuthType(i.getAuthType()))).findFirst();\n            OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, null);\n            Optional<AuthApiAttributes> tokenGenaerationConfig = authDetailsOp.get().getHeaderDetails().stream().filter(i -> ObjectUtils.isNotEmpty(i.getTokenGenerationDetails())).findFirst();\n            if (tokenGenaerationConfig.get() == null)\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n            Object res = authService.getAccessDeatils(tokenGenaerationConfig.get().getTokenGenerationDetails(), pn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab187fb8-8b29-498f-9b15-d13bedf0ae59","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\npublic class ServicenowToOMDConverterServiceImpl implements OMDConverterBaseService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ServicenowToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String ELEMENT = \"element\";\n    private static final String COLUMN_LABEL = \"column_label\"","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4075b8a1-3c39-4516-bc50-6c17113772bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":69,"endLine":90,"content":"ngine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.connector.ecosystem.service.GainsightEcosystemChannelFactory;\nimport com.gainsight.integration.connector.ecosystem.service.GainsightEcosystemChannelService;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelFactory;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelService;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelFactory;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelService;\nimport com.gainsight.integration.productboard.service.AhaChannelService;\nimport com.gainsight.integration.productboard.service.ProductBoardChannelService;\nimport com.gainsight.integration.productboard.service.ProductBoardChannelServiceImpl;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.integration.utils.FeatureToggleUtil;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.mongo.builder.account.AccountQuery;\nimport com.gainsight.mongo.builder.tenant.TenantMasterQuery;\nimport com.gainsight.mongo.builder.tenant.TenantMasterUpdate;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAut","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fb54285f-6088-4ba0-a74a-bd0885b99dcf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SfdcObjectDetails.java","startLine":57,"endLine":85,"content":"lic void setTransformedFields(List<FieldMapping> transformedFields) {\n        this.transformedFields = transformedFields;\n    }*/\n\n    public Set<String> getChildObjects() {\n        return childObjects;\n    }\n\n    public void setChildObjects(Set<String> childObjects) {\n        this.childObjects = childObjects;\n    }\n\n    public Set<String> getParentObjects() {\n        return parentObjects;\n    }\n\n    public void setParentObjects(Set<String> parentObjects) {\n        this.parentObjects = parentObjects;\n    }\n\n\n    public int getRecordTypeInfos() {\n        return recordTypeInfos;\n    }\n\n    public void setRecordTypeInfos(int recordTypeInfos) {\n        this.recordTypeInfos = recordTypeInfos;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1515d0fc-3ed2-4630-8220-75d9d6ebbbd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CaasConnectionFactory.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class CaasConnectionFactory {\n\n    private final List<CaasConnectionService> services;\n\n    public CaasConnectionService getService(ConnectorType connectorType) {\n        for (CaasConnectionService service : services) {\n            if (service.canHandle(connectorType)) {\n                return service;\n            }\n        }\n        log.error(\"Not able to find service for {}\", connectorType);\n        throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa8ea75a-7329-4b7f-a676-8f9c1211006f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":403,"endLine":426,"content":");\n        }\n    }\n\n    private List<Map<String, Object>> fetchSynchronisedDataFromZoom(PNPConnectionsInfo pnpConnectionsInfo, String objectName, MeetingDetailsRequestDTO meetingDetailsRequestDTO) throws Exception {\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n\n        Map<String, ObjectDefinition> metaInfoDefinitionMap = service.getObjectAttributes(objectName, pnpConnectionsInfo);\n        List<String> fields = metaInfoDefinitionMap.get(objectName).getFields().stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toList());\n\n        DuctRequestDTO ductRequestDTO = DuctRequestDTO.builder()\n                .connectionId(pnpConnectionsInfo.getConnectionId())\n                .fields(fields)\n                .resourceName(objectName)\n                .properties(meetingDetailsRequestDTO.getProperties())\n                .build();\n\n        QueryAPIResponseBean responseBean = ductJobMappingService.getSynchronizedDataFromExternalSystem(meetingDetailsRequestDTO.getMeetingId(), ductRequestDTO);\n\n        List<Map<String, Object>> records = responseBean.getRecords();\n        if (StringUtils.isNotEmpty(responseBean.getNextPageToken())) {\n            ductRequestDTO.setNextPageToken(responseBean.getNextPageToken());\n            responseBean = ductJobMappingService.getSynchronizedDataFromExternalSystem(meetingDetailsRequestDTO.getMeetingId(), ductRequestDTO);\n            records.a","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55fcb67b-801d-4996-bfb9-a154e055835b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":55,"endLine":98,"content":"\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport static com.gainsight.duct.constants.DuctConstants.CUSTOM_FIELD_PREFIX;\n\n@Service\n@Slf4j\npublic class IpaasBulkFileDownloadServiceImpl implements IpaasBulkFileDownloadService {\n\n\n    private static final String CLOUD_API_BASE_URL = \"/elements/api-v2\";\n    private static final String BULK = \"/bulk/\";\n    private static final String TASK_ID = \"taskId\";\n    public static final String PNP_BUCKET_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"s3.pnp.bucket.name\");\n\n    protected static final ObjectMapper MAPPER = new ObjectMapper();\n\n\n    @Autowired\n    IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    DuctJobMappingDao ductJobMappingDao;\n\n    @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Autowired\n    private ConnectorsDataHighwayInteractionService connectorsDataHighwayInteractionService;\n\n    @Autowired\n    @Qualifier(\"baseTenantMasterService\")\n    private BaseTenantMasterService service;\n\n\n    @Override\n    public boolean processCallBackFromIpaas(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload) {\n        String requestURL = IpaasFeatureToggleUtility.getCEBaseURL() + CLOUD_API_BASE_URL + UCConstants.FORWARD_SLASH + BULK + ipaasBulkDownloadCallbackPayload.getRequestMap().get(\"id\") + UCConstants.FORWARD_SLASH + ipaasBulkDow","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dba3583e-2424-4022-a10a-9823e601b1c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":341,"endLine":363,"content":"ntactIdFieldName);\n        }\n    }\n\n    private Map<String, Object> getHubspotAccountDetails(BaseTokenDetail baseTokenDetail) {\n        Map<String, Object> accountMap;\n        try {\n            GainsightHubspotFetchService gainsightHubspotFetchService = new GainsightHubspotFetchServiceImpl();\n            accountMap = gainsightHubspotFetchService.getHubspotAccountDetails(baseTokenDetail.getClientId().getString(), baseTokenDetail.getClientSecret().getString(), CryptHandler.getInstance().decrypt(baseTokenDetail.getRefreshToken()));\n        } catch (Exception exception) {\n            LOGGER.error(\"Error in fetching HUBSPOT Account Details \", exception);\n            throw new SystemException(CaasValidationCode.ERROR_FETCHING_HUBSPOT_ACCOUNT_DETAIL.getUserText(), SC_BAD_REQUEST);\n        }\n        return accountMap;\n    }\n\n    private void populateHubspotConnectionProperties(Map<String, Object> hubspotAccountMap, Map<String, Object> pnpConnectionProperties) {\n        try {\n            GainsightPrecondition.assertNotNull(hubspotAccountMap.get(\"portalId\"), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_HUBSPOT_HUB_ID.getUserText());\n            pnpConnectionProperties.put(\"HUB_ID\", hubspotAccountMap.get(\"portalId\"));\n            pnpConnectionProperties.put(\"TIME_ZONE\", hubspotAccountMap.get(\"timeZone\"));\n            pnpConnectionProperties.put(\"CURRENCY\", hubspotAccountMap.get(\"currency\"));\n            pnpConnectionProperties.put(\"UTC_OFFSET_IN_MILLIS\", hubspotAc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1a4f34d3-03ee-4f66-b498-2a32cb0122b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CaasConnectionService.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\npublic interface CaasConnectionService {\n\n    boolean canHandle(ConnectorType connectorType);\n\n    PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput);\n\n    PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput);\n\n    String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException;\n\n    PNPConnectionsInfo revokeAuthorization();\n\n    PNPConnectionsInfo deleteConnection();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2652b0e4-c78a-42e8-9999-cb9f217f36b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/DuctSingleCEQueryBuilder.java","startLine":54,"endLine":76,"content":"            stringBuilder.append(URLEncoder.encode(Operators.getExternaSystemOperator(rule.getOp()), \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            handleDataTypeAndOperator(rule, stringBuilder);\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            whereClause.add(stringBuilder.toString().replaceAll(\"\\\\+\", \"%20\"));\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            for (FilterRule childRule : rule.getRules()) {\n                childRules.addAll(buildRule(childRule));\n            }\n            whereClause.add(\n                    Joiner.on(null == rule.getCondition() ? FilterCondition.AND.getFilterCondition() : rule.getCondition() + URLEncoder.encode(SPACE, \"UTF-8\")).join(childRules));\n        }\n        return whereClause;\n    }\n\n    private static void handleDataTypeAndOperator(FilterRule rule, StringBuilder stringBuilder) throws UnsupportedEncodingException {\n        List<String> values = rule.getValues().stream().map(val -> val.getValue().toString()).collect(Collectors.toList());\n        if ((rule.getOp() == FilterOperator.IN || rule.getOp() == FilterOperator.NOT_IN) && rule.getFieldInfo().getDataType() == DataType.NUMBER) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(URLEncoder.encode(String.join(\",\", values), \"UTF-8\"));\n            stringBuilder.append(\")\");\n        } else if ((rule.getOp() == FilterOperator.IN || rule.getOp() == Filte","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b03cb347-c899-4d76-8b8a-8af875598d7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GainsightPXFieldDescription.java","startLine":68,"endLine":130,"content":"this.internalName = internalName;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n\n    public String getOrigin() {\n        return origin;\n    }\n\n    public void setOrigin(String origin) {\n        this.origin = origin;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public List<String> getReferenceTo() {\n        return referenceTo;\n    }\n\n    public void setReferenceTo(List<String> referenceTo) {\n        this.referenceTo = referenceTo;\n    }\n\n    @Override\n    public String toString() {\n        return \"GainsightPXFieldDescription{\" +\n                \"objectName='\" + objectName + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", apiName='\" + apiName + '\\'' +\n                \", internalName='\" + internalName + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", state='\" + state + '\\'' +\n                \", origin='\" + origin + '\\'' +\n                \", defaultVa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19e5b318-a3f1-46b1-9771-8be2c83fa8dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":176,"endLine":201,"content":"flowWebhookDetailsDTO dpWorkflowWebhookDetailsDTO = getDpWorkflowWebhookDetailsDTO(jobId,\n                systemToken);\n        dpNotificationDetails.setWebhookDetails(dpWorkflowWebhookDetailsDTO);\n        dpWorkflowPropertiesDTO.setNotificationDetails(dpNotificationDetails);\n        dpWorkflowDagDetailsDTO.setWorkflowProperties(dpWorkflowPropertiesDTO);\n    }\n\n    private DPWorkflowWebhookDetailsDTO getDpWorkflowWebhookDetailsDTO(String jobId, String systemToken) {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(\"gs.duct.web.url\");\n        LOGGER.info(\"Web hook duct url {}\", url);\n        DPWorkflowWebhookDetailsDTO dpWorkflowWebhookDetailsDTO = new DPWorkflowWebhookDetailsDTO();\n        dpWorkflowWebhookDetailsDTO.setHttpMethod(DHHttpMethod.PUT);\n        //dpWorkflowWebhookDetailsDTO.setWebhookUrl(\"http://c81b71d04cf3.ngrok.io/v1.0\" + \"/connector/ipaas/callback/\" + jobId);\n        dpWorkflowWebhookDetailsDTO.setWebhookUrl(url + \"/v1.0/duct/callback/dh\" + \"/\" + jobId);\n\n        Map<String, String> headersMap = Maps.newHashMap();\n\n        if (StringUtils.isNotEmpty(systemToken)) {\n            // bionic rules dp token. we dont need security code now.\n            headersMap.putIfAbsent(\"authToken\", systemToken);\n        } else {\n            headersMap.putIfAbsent(\"security_code\", String.valueOf(DeploymentProperties.getProperties()\n                    .getProperty(\"uc.gs.connect.secure.code\")));\n        }\n\n        dpWorkflowWebhookDetailsDTO.setHeade","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cf92912-b6a5-41bf-93ac-72099e1dfdc2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":372,"endLine":395,"content":"apping createDuctJobMappingForBulkWrite(DuctRequestDTO ductRequestDTO) throws CaasException {\n        return DuctJobMapping.builder()\n                .jobId(UUID.randomUUID().toString())\n                .columnMappings(ductRequestDTO.getColumnMappings().stream().map(mapping -> {\n                    if (null == mapping.getObjectName())\n                        mapping.setObjectName(ductRequestDTO.getResourceName());\n                    return mapping;\n                }).collect(Collectors.toList()))\n                .connectionId(ductRequestDTO.getConnectionId())\n                .caasS3FileDetails(ductRequestDTO.getCaasS3FileDetails())\n                .caasFileInfo(ductRequestDTO.getCaasFileInfo())\n                .properties(createPropertiesForBulkWrite(ductRequestDTO))\n                .build();\n    }\n\n\n    @Override\n    public CaaSExtractDetails createExtractTask(DuctRequestDTO ductRequestDTO) throws CaasException {\n        CaaSExtractDetails caaSExtractDetails = null;\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = service.getObjectAttributes(duc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c157915-3e20-490b-bf2d-5c3d00493652","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1265,"endLine":1290,"content":"rEnabled is %s for connector %s \", isConnectorEnabled, connectorType));\n        if (!isConnectorEnabled) {\n            throw new CaasException(new GsExternalSystemErrorMapping(String.format(CaasValidationCode.MULTIPLE_CONNECTION_NOT_ALLOWED.getUserText() + connectorType)));\n        }\n    }\n\n    public static Boolean getFeatureEnabled(String featureName, Boolean defaultValue) {\n        try {\n            Map<String, String> headers = Maps.newHashMap();\n            headers.put(\"secret\", CryptUtil.getSimpleCryptor().encrypt(SECRET_VAL).getValue());\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            headers.put(\"x-gs-environment\", GS_DOMAINS_ENV_VAL);\n            BionicRuleHttpResponseWrapper<ResponseObj> response = BionicRuleHttpHelper.get(\n                    FEATURE_CONFIG_URL + FEATURE_CONFIG_EVALUATION_CONTEXT + \"/\" + featureName + \"/\" +\n                            RequestContextProvider.getTenantId(), headers, ResponseObj.class);\n\n            if (response.getResponseBody().isResult()) {\n                Map responseBody = convertJsonToObject(convertObjectToJson(response.getResponseBody()\n                        .getData()), Map.class);\n                return (Boolean) (responseBody.get(\"value\"));\n            } else {\n                return defaultValue;\n            }\n        } catch (Exception ex) {\n            log.warn(\"Feature Config ::: Failed to feature name. {}, {}\", ex.getMessage(), ex);\n            return defaultVa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03fbba35-fb97-4f64-b241-d0730b191a7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SnowflakeCaasMetadataServiceImpl.java","startLine":29,"endLine":62,"content":";\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Autowired\n    private SnowflakeMetadataService snowflakeMetadataService;\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.SNOWFLAKE.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        return snowflakeMetadataService.listAllObjects(pnpConnectionsInfo);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        List<Map> attributes = snowflakeMetadataService.getObjectAttributes(pnpConnectionsInfo, objectName);\n        List<GSFieldDefinition> fields = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        attributes.forEach(attr -> {\n            fields.add(objectMapper.convertValue(attr, GSFieldDefinition.class));\n        });\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String objectLabel = (String) attributes.get(0).get(\"objectLabel\");\n        objectDefinit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"049b2b04-d5a9-411c-9199-25e025c63fda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":85,"endLine":114,"content":"ate IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private CaasObjectConfigDAO caasObjectConfigDAO;\n    @Autowired\n    private CaasObjectTenantConfigDAO caasObjectTenantConfigDAO;\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n\n    private static List<ConnectorType> IPAAS_CONNECTORS = Lists.newArrayList(ConnectorType.ZENDESK, ConnectorType.FRESHDESK,\n            ConnectorType.SERVICENOW, ConnectorType.JIRA, ConnectorType.INTERCOM, ConnectorType.ZOHO, ConnectorType.ZUORA, ConnectorType.PIPEDRIVE);\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return isIpaas && IPAAS_CONNECTORS.contains(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> queryParams) throws CaasException {\n        List<JsonNode> ipaasObjects = getIpaasObjects(pnpConnectionsInfo, queryParams);\n        List<JsonNode> ipaasVendorObjects = ipaasObjects.stream()\n                .filter(object -> null != object.get(TYPE) && object.get(TYPE).asText().equalsIgnoreCase(VENDOR)).collect(Collectors.toList());\n\n        List<Map<String, Object>> objectList = n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae32ffa0-8463-492f-a2c4-ec4a451b341a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectField.java","startLine":91,"endLine":166,"content":"  this.name = name;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public Boolean getUpdateable() {\n        return updateable;\n    }\n\n    public void setUpdateable(Boolean updateable) {\n        this.updateable = updateable;\n    }\n\n    public Boolean getCalculated() {\n        return calculated;\n    }\n\n    public void setCalculated(Boolean calculated) {\n        this.calculated = calculated;\n    }\n\n    public Boolean getCaseSensitive() {\n        return caseSensitive;\n    }\n\n    public void setCaseSensitive(Boolean caseSensitive) {\n        this.caseSensitive = caseSensitive;\n    }\n\n    public String getControllerName() {\n        return controllerName;\n    }\n\n    public void setControllerName(String controllerName) {\n        this.controllerName = controllerName;\n    }\n\n    public Boolean getUnique() {\n        return unique;\n    }\n\n    public void setUnique(Boolean unique) {\n        this.unique = unique;\n    }\n\n    public Boolean getNillable() {\n        return nillable;\n    }\n\n    public void setNillable(Boolean nillable) {\n        this.nillable = nillable;\n    }\n\n    public Intege","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc173efa-285c-4e7d-b654-bc3e5b50ba1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.EventUtils;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport net.snowflake.client.jdbc.internal.apache.commons.codec.digest.HmacUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.type.TypeReference;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Service\npublic class MSTeamsEventProcessorServiceImpl implements MSTeamsEventProcessorService{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MSTeamsEventProcessorServiceImpl.class);\n\n    private static String CLIENT_STATE = DeploymentProperties.getDeplo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"004ad089-d52f-42d5-be2e-6b0faffbf1cf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":207,"endLine":230,"content":"ationLevel.EXECUTE)\n    public ResponseObj getSyncronizedDataForSingleRecord(@PathVariable(\"recordId\") final String recordId,\n                                                         @ApiParam(value = \"Request Structure to retrieve data\", required = true) @RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.getSynchronizedDataFromExternalSystem(recordId, ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (StringUtils.isNotEmpty(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(e.getGsExternalSystemErrorMapping().getMessage());\n                responseObj.setErrorDesc(e.getGsExternalSystemErrorMapping().getMessage());\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Status of Async job submitted\", response = DuctResponseDTO.class)\n    @GetMapping(value = \"/data/{jobId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getJobInfo(@ApiParam(value","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1df813f5-5a3b-4d39-9631-484c7ea54757","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":288,"endLine":305,"content":"lFieldInfo.setFieldType(FieldType.FIELD);\n        if (ignoreMetadataFieldNames != null && ignoreMetadataFieldNames.contains(criteria.getFieldName()))\n            internalFieldInfo.setName(criteria.getFieldName());\n        else\n            internalFieldInfo.setName(createFieldNameForCriteria(criteria.getFieldName(), objectName));\n        internalFieldInfo.setJsonPath(criteria.getFieldName());\n\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || dataTypeMapping.getExternalDatatype().equals(\"DATE\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        String dateTimeFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"datetime\") || dataTypeMapping.getExternalDatatype().equals(\"DATETIME\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, criteria.getFieldName(), internalFieldInfo, fieldNameMetaMap, ignoreMetadataFieldNames,dateFormate,dateTimeFormate);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not nu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3759d74-1db3-4523-856b-b43de9bc6804","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctResponse.java","startLine":1,"endLine":60,"content":"package com.gainsight.duct.beans;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class DuctResponse {\n    private String connectionId;\n    private String outputFileLocation;\n    private String errorMessage;\n    private File file;\n    private String comments;\n    private Object data;\n    private File outputFile;\n    private String s3FileName;\n    private List<String> projections;\n    private String externalResourceName;\n    private ConnectorType connectorType;\n\n    /**\n     * file directory\n     */\n    private String s3FileDirectory;\n\n    /**\n     * s3FileDirectory + \"/\" + s3FileName\n     */\n    private String s3FilePath;\n\n    private String localFilePath;\n\n    private DuctStatus ductStatus;\n\n\n    private long totalNumberOfRecords;\n    private long successRecords;\n    private long failedRecords;\n\n    private String jobId;\n    private String tenantId;\n    private Map<String, Object> externalSystemResponse;\n    private String externalJobDHId;\n    private String extractTaskId;\n    private String freeFormTaskId;\n    private String nextPageToken;\n\n    private String externalInputFileLocation;\n    private String externalErrorFi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a63512d-02b1-4070-88bc-6efc033c4c3d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/MSTeamsCaasMetaDataServiceImpl.java","startLine":24,"endLine":57,"content":"rk.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\n@Order(1200)\npublic class MSTeamsCaasMetaDataServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectApiConfigDao caasObjectApiConfigDao;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.MSTEAMS.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<CaasObjectApiConfig> caasObjectApiConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n        Collection<String> msTeamsObjects = caasObjectApiConfigs.stream().map(CaasObjectApiConfig::getObjectName).collect(Collectors.toList());\n        List<Map<String, Object>> returnObj = new ArrayList<>(msTeamsObjects.size());\n        for (String obj : msTeamsObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5188f0ff-5ee9-4cf3-806e-ab7ea2ea5015","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":363,"endLine":395,"content":"\n    @Override\n    public void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        List<String> ignoreMetadataFieldNames = getIgnoreMetadataFieldNames();\n        boolean containsDatatype = ignoreMetadataFieldNames.stream().anyMatch(fieldName::equalsIgnoreCase);\n        if (containsDatatype) {\n            internalFieldInfo.setJsonPath(fieldName);\n        } else if (fieldName.contains(ASSOCIATIONS_PREFIX) || objectName.equalsIgnoreCase(OWNER)) {\n            internalFieldInfo.setJsonPath(fieldName);\n        } else {\n            internalFieldInfo.setJsonPath(HUBSPOT_PROPERTIES_KEYWORD_PREFIX + fieldName);\n        }\n    }\n\n    @Override\n    public List<String> getIgnoreMetadataFieldNames() {\n        List<String> fieldNames = new ArrayList<>();\n        fieldNames.add(\"id\");\n        return fieldNames;\n    }\n\n    @Override\n    protected Map<String, Object> getFieldNameDataTypeMap(List<GSFieldDefinition> fieldDefinitions){\n        return fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n    }\n\n    protected Map<String, GSFieldDefinition> getFieldNameMetaMap(List<GSFieldDefinition> fieldDefinitions) {\n        return fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n    }\n\n    @Override\n    protected String getTaskName() {\n        return HUBSPOT_EXTRACT_TA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4664772e-3dd9-4f4e-bd1c-78b109213a66","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CaseLoadServiceImpl.java","startLine":1,"endLine":26,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.GSModule;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CaseLoadServiceImpl implements GainsightLoadService{\n    @Override\n    public GSModule getType() {\n        return GSModule.CASES_MODEL;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return \"case\".contains(resource.toLowerCase());\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c859d8c-cf45-4dd6-9d35-c947cd8022ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":208,"endLine":236,"content":"rorCode(externalSystemErrorCode);\n        gsExternalSystemErrorMapping.setExternalSystemErrorMessage(externalSystemErrorMessage);\n        gsExternalSystemErrorMapping.setConnectorType(connectorType);\n        throw new CaasException(gsExternalSystemErrorMapping);\n    }\n\n    public static Set<String> getFieldsFromExpression(String expression) {\n        String expressionToSplit = expression.replace(\"(\", \"\").replace(\")\", \"\")\n                .replace(\" AND \", \" \").replace(\" OR \", \" \");\n\n        return new HashSet<>(Arrays.asList(expressionToSplit.split(\"\\\\s+\")));\n    }\n\n    public static String getErrorMessageToPopulateFromException(CaasException ex) {\n        if (!StringUtils.isEmpty(ex.getGsExternalSystemErrorMapping().getExternalSystemErrorMessage()))\n            return ex.getGsExternalSystemErrorMapping().getExternalSystemErrorMessage();\n        if (!StringUtils.isEmpty(ex.getGsExternalSystemErrorMapping().getMessage()))\n            return ex.getGsExternalSystemErrorMapping().getMessage();\n        return ex.getGsExternalSystemErrorMapping().getGsErrorMessage();\n    }\n\n    public static boolean handleValidationForExpression(String expression, Set<String> inputFields) throws CaasException {\n        Map<String, String> map = new HashMap<>();\n        map.put(\" AND \", \" && \");\n        map.put(\" OR \", \" || \");\n        Set<String> fieldsRequired = getFieldsFromExpression(expression);\n        for (String field : inputFields) {\n            map.put(field, \"true\");\n            fieldsRequ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2344d6bb-46a0-49f6-87d1-c2dd3ea13f87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":175,"endLine":205,"content":"tatus.AUTHORIZED));\n            ductJobMappingService.synchronousInsert(null);\n        } catch (SystemException ex) {\n            e = ex;\n            passed = true;\n        } catch (Exception exc) {\n            e = exc;\n        } finally {\n            assertNotNull(e, \"Exception should not be null\");\n            if (e instanceof SystemException) {\n                SystemException sysEx = (SystemException) e;\n                assertNotNull(sysEx, \"System Exception can't be null\");\n                assertEquals(\"Invalid Request\", sysEx.getMessage(), \"Incorrect Message in Exception\");\n                assertEquals(\"Invalid Request\", sysEx.getUiMessage(), \"Incorrect Message in Exception\");\n                assertEquals(400, sysEx.getHttpStatus(), \"Incorrect Http Status Code\");\n                assertEquals(CoreErrorCode.INVALID_PARAMETER, sysEx.getErrorCode(), \"Incorrect Error Code\");\n            }\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n        }\n    }\n\n    @Disabled\n    @Test\n    public void saveMapping_test_validate_mapping_null_resource() {\n        Exception e = null;\n        boolean passed = false;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED));\n            ductJobMappingService.synchronousInsert(new DuctRequestDTO());\n        } catch (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fb4284ec-7dfb-4120-965e-f3c242644d29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/FieldsInfo.java","startLine":1,"endLine":57,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.google.common.collect.Maps;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class FieldsInfo implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String fieldName;\n    private String fieldDisplayName;\n    private String externalFieldName;\n    private String dataType;\n    private String validatorClass;\n    private Object validator;\n    private int order;\n    private boolean requiredForAuthorization;\n    private Map<String,Object> properties= Maps.newHashMap();\n\n    public String getDataType() { return dataType; }\n\n    public void setDataType(String dataType) { this.dataType = dataType; }\n\n    public String getValidatorClass() {\n        return validatorClass;\n    }\n\n    public void setValidatorClass(String validatorClass) {\n        this.validatorClass = validatorClass;\n    }\n\n    public int getOrder() {\n        return order;\n    }\n\n    public void setOrder(int order) {\n        this.order = order;\n    }\n\n    public String getFieldDisplayName() {\n        return fieldDisplayName;\n    }\n\n    public void setFieldDisplayName(String fieldDisplayName) {\n        this.fieldDisplayName = fieldDisplayName;\n    }\n\n    public boolean isRequi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67b3ee12-0ce0-4da2-8d9b-6000663cc1be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/IpaasAccountUserDetailsDaoImpl.java","startLine":1,"endLine":46,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.stereotype.Repository;\n\nimport static com.gainsight.dao.mapper.MongoBaseFieldMapper.DELETED;\n\n\n@Repository\npublic class IpaasAccountUserDetailsDaoImpl extends AbstractEntityDaoImpl<IpaasAccountUserDetails> implements IpaasAccountUserDetailsDao {\n\n    @Autowired\n    public IpaasAccountUserDetailsDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, IpaasAccountUserDetails.class);\n    }\n\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return getAuthMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(IpaasAccountUserDetails ipaasAccountUserDetails, String s) {\n        ipaasAccountUserDetails.setId(s);\n\n    }\n\n    @Override\n    protected void setTenantId(IpaasAccountUserDetails ipaasAccountUserDetails, String s) {\n        ipaasAccountUserDetails.setTenantId(s);\n    }\n\n    @Override\n    public IpaasAccountUserDetails softD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"daf38baf-83e0-4d82-9839-8b2e04d90129","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchService.java","startLine":1,"endLine":20,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.processor;\n\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.List;\n\npublic interface GainsightPXFetchService {\n\n    GSIntegrationResponse getObjectDescription(String connectionId, String objectName) throws CaasException;\n\n    PNPConnectionsInfo getSubscription(PNPConnectionsInfo pnpConnectionInfo);\n\n    List<String> getAllObjects();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0e90c66-8eb4-4fff-832f-df4a57ecd027","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":54,"endLine":83,"content":"ic final String BACK_QUOTE = \"`\";\n    private static final String SELECT_QUERY_WITHOUT_WHERE_CLAUSE = \"SELECT %s FROM %s LIMIT %s OFFSET %s\";\n    private static final String FORMAT_TIMESTAMP = \"FORMAT_TIMESTAMP(\";\n    private static final String TIMESTAMP_FORMAT = \"timestampFormate\";\n    private static final String DATETIME_FORMAT = \"dateTimeFormate\";\n    private static final String SELECT_QUERY_WITH_WHERE_CLAUSE = \"SELECT %s FROM %s WHERE %s  LIMIT %s OFFSET %s\";\n\n    private static final String CLOSE_BRACKET = \")\";\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorConfigService;\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.BIGQUERY && !isIpaas;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        try {\n            log.error(\"Started fetching data for bigQuery\");\n            int limit = Math.min(ductJobMapping.getLimit(), maxPageSize) + 1;\n            int page = 0;\n            if (!ObjectUtils.isEmpty(ductJobMapping.getOffset()) && ductJobMapping.getOffset() > 0) {\n                page = ductJobMapping.getOffset();\n            } else if (!ObjectUtils.isEmpty(ductJobMapping.getNextPageToken())) {\n                page = Integer.parseInt(ductJobMapping.getNextPageToken());\n            }\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c78af82-f24c-4cbd-abb7-81f5623cffdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":116,"endLine":132,"content":"eldNameDataTypeMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            Map<String, GSFieldDefinition> fieldNameMetaMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n\n            String userTokenRequest = ipaasAccountUserDetails.getUserToken().getString();\n            String elementToken = CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES)).get(IPAAS_INSTANCE_TOKEN));\n            String orgTokenRequest = IpaasFeatureToggleUtility.getOrgToken();\n            PaginatedDataExtractionService paginatedDataExtractionService = new PaginatedDataExtractionService();\n\n\n            DataExtractionRequest dataExtractionRequest = new DataExtractionRequest();\n            dataExtractionRequest.setObjectName(ductJobMapping.getResourceName());\n            dataExtractionRequest.setOrgToken(orgTokenRequest);\n            dataExtractionRequest.setConnectorType(pnpConnectionsInfo.getConnectionType());\n            dataExtractionRequest.setInstanceToken(SecretData.fromValue(elementToken));\n            dataExtractionRequest.setUserToken(SecretData.fromValue(userTokenRequest));\n            if (ductJobMapping.getCriteria() != null)\n                dataExtractionRequest.setFilterRule(Dat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9d75763e-55f6-43e5-a330-6f8c08313b60","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":97,"endLine":124,"content":"Config\n   * @param objectDefinition {@link Map}\n   * @param additionalFields {@link List}\n   * @return {@link Map} fieldDefinition in a map format\n   * <p>\n   * Source Field -> OMD field\n   * full_name -> field_name\n   * full_name -> db_name\n   * label -> label\n   * object_id -> object_name\n   * object_id -> object_db_name\n   */\n\n  public Map<String, Object> generateFieldDefinitionFromFieldInfo(Map<String, Object> fieldInfo, CaasConnectorConfig connectorConfig, Map<String, Object> objectDefinition, List<Map<String, Object>> additionalFields) {\n    Map<String, Object> fieldDefinition = Maps.newHashMap();\n    Map<String, Object> meta = Maps.newHashMap();\n\n    fieldDefinition.put(FIELD_NAME, DuctUtils.valueOf(customFieldPrefix + fieldInfo.get(\"name\")));\n    fieldDefinition.put(DB_NAME, DuctUtils.valueOf(customFieldPrefix + fieldInfo.get(\"name\")));\n    fieldDefinition.put(LABEL, DuctUtils.valueOf(fieldInfo.get(LABEL)));\n    fieldDefinition.put(OBJECT_NAME, DuctUtils.valueOf(objectDefinition.get(OBJECT_ID)));\n    fieldDefinition.put(OBJECT_DBNAME, DuctUtils.valueOf(objectDefinition.get(OBJECT_ID)));\n    processPicklistOptions(fieldInfo, fieldDefinition);\n\n    String gainsightDataType = getGainsightDataTypeFromExternalSourceDataType(connectorConfig, DuctUtils.valueOf(fieldInfo.get(TYPE)));\n    if (StringUtils.isBlank(gainsightDataType)) {\n      log.info(\"[Freshdesk] External DataType {} is not supported, hence skipping it\", DuctUtils.valueOf(fieldInfo.get(TYPE)));\n      return null","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f9abccd-5e84-4267-bb97-a21b62ec07ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":84,"endLine":105,"content":"s) {\n        return connectorType == ConnectorType.HUBSPOT;\n    }\n\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        int limit = Math.min(ductJobMapping.getLimit(), maxPageSize);\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> metaInfoDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n\n        Map<String, String> fieldNameDataTypeMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n        HubspotSearchRequest hubspotSearchRequest = new HubspotSearchRequest(populateFilterGroups(ductJobMapping, fieldNameDataTypeMap),\n                ductJobMapping.getFields(),\n                limit, ductJobMapping.getNextPageToken());\n\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n\n        Object cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, ductJobMapping.getResourceName(), ductJobMapping.getConnectionId());\n        if (cacheValue == null) {\n            service.getObjects(pnpConnectionsInfo, null);\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7f21621f-9d3c-4c54-a0f1-37528c5d7efe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1389,"endLine":1410,"content":"ectionDetail processedDBConnectionDetail = new RelationalDBConnectionDetail();\n\n        if (relationalDBConnectionDetail.getHost() == null && relationalDBConnectionDetail.getUrl() == null) {\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.PROVIDE_VALID_HOST_DETAILS.getUserText(), HttpStatus.SC_BAD_REQUEST));\n        }\n        if (relationalDBConnectionDetail.getUrl() != null) {\n            processedDBConnectionDetail.setUrl(cryptUtil.encrypt(relationalDBConnectionDetail.getUrl()).getValue());\n        }\n        if (relationalDBConnectionDetail.getHost() != null) {\n            processedDBConnectionDetail.setHost(cryptUtil.encrypt(relationalDBConnectionDetail.getHost()).getValue());\n        }\n        if (relationalDBConnectionDetail.getPort() != null) {\n            processedDBConnectionDetail.setPort(cryptUtil.encrypt(relationalDBConnectionDetail.getPort()).getValue());\n        }\n        if (relationalDBConnectionDetail.getDataBaseName() != null) {\n            processedDBConnectionDetail.setDataBaseName(cryptUtil.encrypt(relationalDBConnectionDetail.getDataBaseName()).getValue());\n        }\n        if (relationalDBConnectionDetail.getUser() != null) {\n            processedDBConnectionDetail.setUser(cryptUtil.encrypt(relationalDBConnectionDetail.getUser()).getValue());\n        }\n        if (relationalDBConnectionDetail.getPwd() != null) {\n            processedDBConnectionDetail.setPwd(cryptUtil.encrypt(relationalDBConnectionDetail.getPwd())","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fc24299-630e-4398-89f4-dbd22d55de9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.sdk.client;\n\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.web.client.HttpClientService;\nimport com.google.common.collect.Maps;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.Response;\nimport java.util.List;\nimport java.util.Map;\n\nimport static javax.ws.rs.core.MediaType.APPLICATION_JSON_TYPE;\n\n@Slf4j\n@Service\npublic class DuctFrameworkClientImpl implements DuctFrameworkClient {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private HttpClientService httpClientService;\n    private final String DUCT_GENERIC_ENDPOINT = \"v1.0/duct\";\n    private final String DUCT_FETCH_DATA_ENDPOIN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b7197b2-74ef-4029-87ab-d92b4236a093","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectApiConfigDaoImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic class CaasObjectApiConfigDaoImpl extends AbstractEntityDaoImpl<CaasObjectApiConfig> implements CaasObjectApiConfigDao {\n\n    @Autowired\n    public CaasObjectApiConfigDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasObjectApiConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasObjectApiConfig caasObjectApiConfig, String s) {\n        caasObjectApiConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasObjectApiConfig caasObjectApiConfig, String s) {\n    }\n\n    @Override\n    public CaasObjectApiConfig getConnectorConfigByObjectName(ConnectorType connectorType, String objectName) {\n        Query query = Query.query(Criteria.where(CaasObjectApiConfig.CONNECTOR_T","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c9e5344-03f7-4784-9ad8-6f582debbf73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/IpaasBulkFileDownloadMessageProcessor.java","startLine":77,"endLine":80,"content":"    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.IPAAS_BULK_FILE_DOWNLOAD.getName());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab77711e-590a-402c-9394-7ab51fc344de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/DuctClientConfiguration.java","startLine":1,"endLine":22,"content":"package com.gainsight.duct;\n\nimport com.gainsight.database.HAPostgresDatabaseTemplate;\nimport com.gainsight.database.HAPostgresDatabaseTemplateServiceImpl;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateServiceImpl;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplate;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplateImpl;\nimport com.gainsight.executor.GainsightExecutorService;\nimport com.gainsight.executor.GainsightExecutorServiceImpl;\nimport com.gainsight.queue.db.spring.configuration.producer.DbQueueProducerSpringConfiguration;\nimport com.gainsight.queue.db.spring.configuration.worker.DbQueueSpringConfiguration;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\n\n@Configuration\n@ComponentScan(basePackages = {\"com.gainsight.utils.cache\",\"com.gainsight.spring\",\"com.gainsight.resiliency\",\"com.gainsight.message\",\"com.gainsight.file\",\"com.gainsight.account\",\"com.gainsight.integration\",\"com.gainsight.database\",\"com.gainsight.duct.utils.Redis\",\"com.gainsight.duct.utils\",\n        \"com.gainsight.web\",\"com.gainsight.queue\",\"com.gainsight.service\",\"com.gainsight.dao\",\"com.gainsight.duct\"},excludeFilters  = {@ComponentScan.Filter(\n        type = FilterType.ASSIGNABLE_TYPE, classe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c33b951c-a771-4494-b289-ad1796cb8cda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":530,"endLine":550,"content":"desk.external.task.default.timeout\", \"240\");\n  }\n\n  @Override\n  protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n    Optional<ResourceConfig> optionalResourceConfig = getResourceConfig(ductJobMapping);\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.FRESHDESK);\n    if (!optionalResourceConfig.isPresent()) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    }\n    ResourceConfig resourceConfig = optionalResourceConfig.get();\n    Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n    Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n    return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, fieldNameDataTypeMap, fieldNameMetaMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n  }\n\n  @Override\n  protected Boolean generateFreeFormTask() {\n    return true;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8443ebe-6014-4ff6-9528-621a2af9ef49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/config/GSDuctWorkerConfiguration.java","startLine":23,"endLine":66,"content":"ght.account\", \"com.gainsight.web\", \"com.gainsight.message.dispatch\", \"com.gainsight.message.service\", \"com.gainsight.utils.cache\"})\npublic class GSDuctWorkerConfiguration {\n\n\n\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    @Bean\n    public DuctDatabaseTemplateService ductDatabaseTemplateService(){\n        return new DuctDatabaseTemplateServiceImpl();\n    }\n\n\n    @Bean\n    public HttpClientService httpClientService(){\n        return new HttpClientServiceImpl();\n    }\n\n    @Bean\n    public GainsightExecutorService gainsightExecutorService(){\n        return new GainsightExecutorServiceImpl();\n    }\n\n    @Bean\n    public HAPostgresDatabaseTemplate ductHaPostgresDatabaseTemplate() {\n        return new HAPostgresDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public CaasRedisTemplate gsIntegrationsRedisTemplate(){\n        return new CaasRedisTemplateImpl();\n    }\n\n    @Bean\n    public DuctClientConfig ductClientConfig(){\n        String baseUrl = DeploymentProperties.getDeploymentProperties().getValue(\"gs.caas.api.url\");\n        return new DuctClientConfig(baseUrl, DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\"));\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eda0db78-9fde-49e3-9993-1019d09987db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":803,"endLine":828,"content":"  for (ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n            if (ductColumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n                log.error(DuctErrorConstants.INVALID_MAPPINGS);\n                DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_MAPPINGS, ductJobMapping.getJobId());\n            }\n\n            Optional<GSFieldDefinition> gsFieldDefinitionOptional = fieldDefinitions.stream().filter(fieldDefinition -> fieldDefinition.getFieldName().equals(ductColumnMapping.getFieldName())).findFirst();\n            if (gsFieldDefinitionOptional.isPresent()) {\n                if (gsFieldDefinitionOptional.get().getMeta().isReadOnly()) {\n                    readOnlyFields.add(ductColumnMapping.getFieldName());\n                }\n            } else {\n                fieldsNotPresent.add(ductColumnMapping.getFieldName());\n            }\n\n            if (!isIdentifierPresent && ductColumnMapping.getIsKeyField()) {\n                isIdentifierPresent = true;\n            }\n        }\n\n        if (!fieldsNotPresent.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", fieldsNotPresent));\n        }\n\n        if (!isIdentifierPresent && (DuctDataOperation.UPDATE.equals(ductDataOperation) || Du","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b1d205ea-27ce-4c21-9c15-c2c45bbe66a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":380,"endLine":412,"content":"\n        Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n                .forEach(kv -> externalFilterableFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return externalFilterableFieldsMap;\n    }\n\n    private List<Criteria> flattenCriteria(Criteria criteria) {\n        List<Criteria> flattenedCriteria = new ArrayList<>();\n        // Recursively flatten the criteria\n        flatten(criteria, flattenedCriteria);\n        return flattenedCriteria;\n    }\n\n    private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n        if (criteria.getFilters() == null || criteria.getFilters().isEmpty()) {\n            // Base case: No nested filters, add current criteria to flattened list\n            flattenedCriteria.add(criteria);\n        } else {\n            // Recursively flatten nested filters\n            for (Criteria nestedCriteria : criteria.getFilters()) {\n                flatten(nestedCriteria, flattenedCriteria);\n            }\n        }\n    }\n\n    private Criteria getSingleCriteriaForQueryBody(List<Criteria> flattenedCriteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap) {\n        Criteria requiredSingleCriteria;\n        nullSafeList(flattenedCriteria)\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48f40b0e-dbda-410e-95d6-58891e9f1cb5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":248,"endLine":255,"content":"ng.postgres.max.idle\"));\n    props.put(\"initialSize\", DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.initial.size\"));\n    pnpConnectionsInfo.setProperties(props);\n    return pnpConnectionsInfo;\n\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b98b4abc-f2e3-45bd-b602-3426f7b30c8f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":25,"endLine":64,"content":"framework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.*;\nimport java.util.*;\n\n/**\n * createdBy: snargana\n * date: 12/08/24\n */\n\n@Slf4j\n@Order(10000)\n@Service\npublic class SAPDatasphereConnectionServiceImpl implements CaasConnectionService {\n\n  private static final String USER = \"user\";\n  private static final String PASSWORD = \"pwd\";\n  private static final String SCHEMA = \"schema\";\n  public static final String HOST = \"host\";\n  private static final String SAP_HANA_BASE_URL = \"jdbc:sap://%s:443\";\n\n  private static final String CONNECTION_AUTHORIZATION_FAILURE = \"Error occured while authorizing connection\";\n  private static final String PROPERTIES_MISSING_ERROR = \"Error occured while performing action\";\n  private static final String UNSUPPORTED_AUTH_TYPE = \"Unsupported authorization type\";\n\n  private static String AUTHENTICATE_SCHEMA_QUERY = \"SELECT COUNT(*) AS count FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = ?\";\n  private static final List<AuthorizationType> SUPPORTED_AUTHORIZATION_TYPES = Lists.newArrayList(AuthorizationType.BASIC_AUTH);\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType) {\n    return ConnectorType.SAP_DATASPHERE.equals(connectorType);\n  }\n\n  @SneakyThrows\n  @Override\n  public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n    try {\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e260f296-5b9e-4fed-865e-f565b9372600","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":143,"endLine":167,"content":"\", url);\n            response = AdvancedHttpHelper.put(url, headers, \"{}\", ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of update connection to {}, is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), String.class);\n                } else if (responseObj.getErrorDesc() != null) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(responseObj.getErrorDesc(), response.getStatusCode()));\n                }\n            }\n            return null;\n        } catch (Exception e) {\n            if (response != null && response.getReasonPhrase() != null) {\n                throw new CaasException(new GsExternalSystemErrorMapping(response.getReasonPhrase(), e));\n            } else {\n                throw new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n    public static Boolean revoke(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) + String.format(\"/v1.0/connector/ipaas/%s/revoke/%s\",\n                pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.getConnectionId());\n        Map<String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f270dfb-d38e-40c2-9d30-900bc17dd9a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.service;\n\nimport com.amazonaws.HttpMethod;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.bean.TenantAuthInfo;\nimport com.gainsight.bean.UserAuthInfo;\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport com.gainsight.duct.dao.IpaasAccountUserDetailsDao;\nimport com.gainsight.duct.utils.IpaasHelperService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctStatus;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.dh.ConnectorsDataHighwayInteractionService;\nimport com.gainsight.duct.dh.ConnectorsDataHighwayResponseHandler;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.d","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e8477ca0-3176-47a0-b40e-212b48056713","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":200,"endLine":240,"content":"ntUtils.closeQuietly(httpClient);\n    }\n  }\n\n  private static <T> BionicRuleHttpResponseWrapper<T> generateResponse(CloseableHttpResponse closeableHttpResponse,\n                                                                       Class<T> clazz) throws IOException {\n    BionicRuleHttpResponseWrapper<T> response = null;\n    HttpEntity entity = null;\n    try {\n      StatusLine statusLine = closeableHttpResponse.getStatusLine();\n      entity = closeableHttpResponse.getEntity();\n\n      int statusCode = statusLine.getStatusCode();\n\n      // since we are expecting response body\n      if (entity == null) {\n        //TODO: check\n        throw new ClientProtocolException(\"Response contains no content\");\n      }\n\n      String responsePayload = EntityUtils.toString(entity);\n      if (statusCode != 200) {\n        LOGGER.info(\"Failed Reason: \" + StringEscapeUtils.escapeJson(responsePayload));\n      }\n      T responsePayloadObj = null;\n      if(!clazz.getName().equals(\"java.lang.String\")){\n        responsePayloadObj = GainsightUtils.convertJsonToObject(responsePayload, clazz);\n      } else {\n        responsePayloadObj = (T) responsePayload;\n      }\n      response = new BionicRuleHttpResponseWrapper<>(statusCode, statusLine.getReasonPhrase(), responsePayloadObj);\n\n    } finally {\n      EntityUtils.consumeQuietly(entity);\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n    }\n    return response;\n  }\n\n  private static CloseableHttpClient getHttpClient(String uri) {\n    HttpClient","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69a0ae9b-091f-4aeb-a145-f9b0465036ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":150,"endLine":168,"content":", null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to generate authorization url\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, null, \"Error occurred while trying to generate authorization url\"));\n        }\n        return authUrl;\n    }\n\n    @Override\n    public PNPConnectionsInfo revokeAuthorization() {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo deleteConnection() {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9d240552-c20b-408c-a179-478b71c69afd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":152,"endLine":168,"content":"Constants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEmpty(apiConfigAttributes.getReplaceByIdRegexInPath()))\n                apiConfigAttributes.setPath(apiConfigAttributes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            com.gainsight.integration.bean.metadata.engine.PaginationDetails paginationDetails = apiConfigAttributes.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21ce8917-5d49-423b-beed-24d07fa78f84","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":281,"endLine":305,"content":"T_PRESENT_IN_THE_BUCKET);\n                DuctUtils.populateAndInsertError(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET, ductJobMapping.getJobId());\n            }\n        } catch (Exception e) {\n            log.error(\"Failed while trying to validate s3 file presence\", e);\n            if (!StringUtils.isEmpty(e.getMessage()))\n                DuctUtils.populateAndInsertError(e.getMessage(), ductJobMapping.getJobId());\n            else\n                DuctUtils.populateAndInsertError(INTERNAL_SYSTEM_ERROR_MESSAGE, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateS3Info(DuctJobMapping ductJobMapping) throws CaasException {\n        if (ductJobMapping.getCaasS3FileDetails() == null || ductJobMapping.getCaasS3FileDetails().getBucketName() == null ||\n                (ductJobMapping.getCaasS3FileDetails().getFilesDir() == null || ductJobMapping.getCaasFileInfo().getFileName() == null)) {\n            log.error(DuctErrorConstants.INVALID_S3_FILE_DETAILS);\n            DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_S3_FILE_DETAILS, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateMappings(DuctJobMapping ductJobMapping) throws CaasException {\n        for (ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n            if (ductColumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n                log.error(DuctErrorConstants.INVALID_MAPPINGS);\n                DuctUtils.populateAndInsertError(Duc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8151ec9-9e4e-4668-b120-843469da4c0b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":558,"endLine":583,"content":"okenDetail.setAccessSecret(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientSecret())));\n            return tokenDetail;\n        } catch (IOException e) {\n            throw new SystemException(e.getMessage(), e);\n        }\n    }\n\n    private ConnectionStatus getNewConnectionStatus(ConnectionStatus oldConnectionStatus) {\n        if (oldConnectionStatus.equals(ConnectionStatus.AUTHORIZED) || oldConnectionStatus.equals(ConnectionStatus.REVOKED)) {\n            return ConnectionStatus.AUTHORIZED;\n        } else if (oldConnectionStatus.equals(ConnectionStatus.AUTHORIZED_AND_LINKED) || oldConnectionStatus.equals(ConnectionStatus.REVOKED_AND_LINKED)) {\n            return ConnectionStatus.AUTHORIZED_AND_LINKED;\n        } else {\n            throw new SystemException(CaasValidationCode.INVALID_OLD_CONNECTION_STATUS.getUserText() + oldConnectionStatus, CaasValidationCode.INVALID_INPUT, SC_BAD_REQUEST);\n        }\n    }\n\n\n    private String dynamicsConsentStr(PNPConnectionsInfo pnpConnectionsInfo, AccountType accountType) {\n        String dynamicsConsentStr = \"\";\n        if (accountType == AccountType.DYNAMICS) {\n            Object disablePromptConsentObj = pnpConnectionsInfo.getProperties().get(\"disablePromptConsent\");\n            if (disablePromptConsentObj != null) {\n                Boolean disablePromptConsent = (Boolean) pnpConnectionsInfo.getProperties().get(\"disablePromptConsent\");\n                if (!disablePromptConsent) {\n                    dynamicsC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5cbae833-dedb-4652-b723-0f616b64c246","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":843,"endLine":866,"content":"lateAndInsertError(DuctErrorConstants.INVALID_S3_FILE_DETAILS, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateIfFilePresent(DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            boolean isFilePresent = DuctS3Utility.keyExists(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            if (!isFilePresent) {\n                log.error(DuctErrorConstants.S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET);\n                DuctUtils.populateAndInsertError(DuctErrorConstants.S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET, ductJobMapping.getJobId());\n            }\n        } catch (Exception e) {\n            log.error(\"Failed while trying to validate s3 file presence\", e);\n            if (StringUtils.isNotEmpty(e.getMessage()))\n                DuctUtils.populateAndInsertError(e.getMessage(), ductJobMapping.getJobId());\n            else\n                DuctUtils.populateAndInsertError(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, ductJobMapping.getJobId());\n        }\n    }\n\n    private File getFileFromS3(DuctJobMapping ductJobMapping) {\n        try {\n            log.info(\"downloaded file from location: {}\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e589f36-3854-431b-8d48-550974403f73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":28,"endLine":74,"content":"ort org.springframework.core.io.ClassPathResource;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctErrorConstants.MANDATORY_REQUIRED_KEYS_NOT_PRESENT;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.mockito.Mockito.any;\nimport static org.mockito.Mockito.when;\n\n@Slf4j\nclass HubspotBulkWriteBackValidationServiceTest {\n\n    private static final String CONTACT_METADTA_FILE_NAME = \"contactsMetadata.json\";\n    private static final String CAAS_CONNECTOR_CONFIG = \"caas_connector_config_for_junit.json\";\n\n    @Mock\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Mock\n    CaasMetadataFactory caasMetadataFactory;\n\n    @Mock\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    @Mock\n    HubspotCaasMetadataServiceImpl hubspotCaasMetadataService;\n\n    @InjectMocks\n    HubspotBulkWriteBackValidationService hubspotBulkWriteBackValidationService;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void test_validateObject_failed() {\n        boolean passed = true;\n        CaasException caex = null;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(createConnectionInfo());\n            when(caasMetadataFactory.getService(ConnectorType.HUBSPOT,false)).thenReturn(hubspotCaasMetadataService);\n            when(hubs","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8ddfaef-a337-41df-a14f-6b226c49a44f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/CaasValidationCode.java","startLine":153,"endLine":203,"content":"de, boolean codeConstant, ExceptionType exceptionType) {\n        this.code = code;\n        this.codeConstant = codeConstant;\n        this.exceptionType = exceptionType;\n    }\n\n    /**\n     * From value copilot validation code.\n     *\n     * @param value the value\n     * @return the copilot validation code\n     */\n    public static CaasValidationCode fromValue(String value) {\n        if (StringUtils.isNotBlank(value)) {\n            return MAP.get(value.toLowerCase());\n        }\n        return null;\n    }\n\n    /**\n     * Gets Event Code for an exception\n     */\n    public int getEventCode() {\n        return code;\n    }\n\n    /**\n     * Gets Gainsight Event Code for an exception\n     */\n    @Override\n    public String getGsEventCode() {\n        return \"GS_CAAS_\" + code;\n    }\n\n    public boolean isCodeConstant() {\n        return codeConstant;\n    }\n\n    /**\n     * Refers to User Defined Text\n     */\n    public String getUserText() {\n        String key = className + \"__\" + this.name();\n        return ConnectorI18nService.getTranslation(key, CaasMessageProperties.getMessageProperties().getValue(key), RequestContextProvider.getTenantLanguage());\n    }\n\n    @Override\n    public ExceptionType getExceptionType() {\n        return exceptionType;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"39cbe063-b308-4d4e-a005-5d7c0f72c253","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":53,"endLine":77,"content":"class SalesforceCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SalesforceCaasMetadataServiceImpl.class);\n\n    private static final List<String> SKIP_COMPOUND_FIELDS = Arrays.asList(\"address\", \"location\");\n\n    private static final String REFERENCE_KEYWORD = \"reference\";\n    // SFDC Attributes which are not available in OMD format\n    private static final String PERMISSIONABLE = \"permissionable\";\n    private static final String CASE_SENSITIVE = \"caseSensitive\";\n    private static final String UNIQUE = \"unique\";\n    private static final String BYTE_LENGTH = \"byteLength\";\n    private static final String WRITE_REQUIRES_MASTER_READ = \"writeRequiresMasterRead\";\n    private static final String ID_LOOKUP = \"idLookup\";\n    private static final String AUTO_NUMBER = \"autonumber\";\n    private static final String RESTRICTED_PICKLIST = \"restrictedPicklist\";\n    private static final String NAME_POINTING = \"namePointing\";\n    private static final String DEFAULTED_ON_CREATE = \"defaultedOnCreate\";\n    private static final String HTML_FORMATTED = \"htmlFormatted\";\n    private static final String DEPENDENT_PICKLIST = \"dependentPicklist\";\n    private static final String CASCADE_DELETE = \"cascadeDelete\";\n    private static final String RESTRICTED_DELETE = \"restrictedDelete\";\n    private static final String DIGITS = \"digits\";\n    private static final String DISPLAY_LOCATION_IN_DECIMAL = \"displayLocationInDecimal\";\n    privat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f13ffba6-0c0c-427f-8868-fed9a9cb5ed2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":239,"endLine":255,"content":"esponse(), pnpConnectionsInfo);\n                populateConnectionProperties(pnpConnectionsInfo.getTokenDetail(), pnpConnectionsInfo.getProperties());\n                pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.IS_EXTERNAL_CRM_CHANGED,\n                        !pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.SFDC_ORG_ID).equals(existingOrgId));\n            } else {\n                BaseTokenDetail baseTokenDetail = getTokenDetail(oAuthDetail, token.getRawResponse());\n                pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                setSFDCConnectionProperties(token.getRawResponse(), pnpConnectionsInfo);\n                populateConnectionProperties(pnpConnectionsInfo.getTokenDetail(), pnpConnectionsInfo.getProperties());\n            }\n            pnpConnectionsInfo.setCrmId(ConnectorType.SFDC + \"_\" + pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.SFDC_ORG_ID));\n        } else if (pnpConnectionsInfo.getConnectionType() == ConnectorType.DYNAMICS) {\n            BaseTokenDetail baseTokenDetail = getTokenDetail(oAuthDetail, token.getRawResponse());\n            String resource = String.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DYNAMICS_ORG_URI));\n            String storedDynamicsOrgId = (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DYNAMICS_ORG_ID);\n            pnpConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa604c77-82d3-42cd-bce5-18007d94a198","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connectordependency/DuctDependencyFrameworkService.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.connectordependency;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\npublic interface DuctDependencyFrameworkService {\n    Object fetchConnectorDependencies(String connectionId, ConnectorType connectorType);\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1a0732be-66b7-48ae-b738-8e9644d522fd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":251,"endLine":280,"content":"(pnpConnectionsInfo);\n      populateSAPConnectionDetails(pnpConnectionsInfo);\n\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n      GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromProperties(pnpConnectionsInfo, true, pnpConnectionsInfo.getAuthorizationType());\n      gainsightSAPDatasphereChannelService.authenticate();\n\n      pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n      return pnpConnectionsInfo;\n    } catch (Exception ex) {\n      log.error(\"[SAP HANA] Connection creation failed: \", ex);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n  }\n\n  @Override\n  public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public PNPConnectionsInfo revokeAuthorization() {\n    return null;\n  }\n\n  @Override\n  public PNPConnectionsInfo deleteConnection() {\n    return null;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"410920ae-fa07-4d7d-9109-9f32386a0b9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":121,"endLine":145,"content":"lterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                //handle if there is only one filter\n               /* createFilterRule(criteria, internalFilterRule, internalRulesList);\n                hubspotFilterGroups.setFilters(internalRulesList);\n                filterGroups.add(hubspotFilterGroups);\n                return filterGroups;*/\n            }\n            //hubspotFilterGroups.setFilters((buildRule(criteria, internalFilterRule, internalRulesList)));\n            List<List<HubspotFilters>> filters = buildRule(criteria, internalFilterRule, internalRulesList);\n            Map<String, List<HubspotFilters>> filterMap = new HashMap<>();\n            for (List<HubspotFilters> hubspotFilters : filters) {\n                filterMap.put(\"filters\", hubspotFilters);\n            }\n            finalList.add(filterMap);\n        }\n        return finalList;\n    }\n\n    public static List<List<HubspotFilters>> buildRule(Criteria criteria, HubspotFilters mainFilterRule, List<List<HubspotFilters>> internalRulesList) {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            createFilterRule(criteria, mainFilterRule, internalRulesList);\n        } else {\n            List<List<HubspotFilters>> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                internalRulesList.addAll","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"155cbce8-3f9f-48ad-84a9-63469cb5736b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/IpaasBulkFileDownloadProducerServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.duct.beans.dbqueue.IpaasBulkFileDownloadMessageInfo;\nimport com.gainsight.queue.db.bean.MessageRequestDTO;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.producer.QueueProducer;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.UUID;\n\n@Slf4j\n@Service\npublic class IpaasBulkFileDownloadProducerServiceImpl implements IpaasBulkFileDownloadProducerService{\n\n    private final QueueProducer queueProducer;\n    private final MessageInfo<IpaasBulkDownloadCallbackPayload> MESSAGE_INFO;\n\n\n    @Autowired\n    public IpaasBulkFileDownloadProducerServiceImpl(QueueProducer queueProducer) {\n        this.queueProducer = queueProducer;\n        MESSAGE_INFO = new IpaasBulkFileDownloadMessageInfo();\n    }\n\n    public String pushMessageForFileDownload(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload) {\n        MessageRequestDTO<IpaasBulkDownloadCallbackPayload> messageRequestDTO = new MessageRequestDTO<>();\n        messageRequestDTO.setMessageType(MESSAGE_INFO.getSupportedType()); //todo check the type\n        messageRequestDTO.setPayload(ipaasBulkDownloadCallbackPayload);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4dcd983-b4c5-4090-8ecb-1ee99e39ac9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":535,"endLine":559,"content":"ect>> fieldNameToMetadataMap = new HashMap<>();\n        for (Map<String, Object> field : fields) {\n            fieldNameToMetadataMap.put(field.get(FIELD_NAME).toString(), field);\n        }\n        return fieldNameToMetadataMap;\n    }\n\n    private Map getMetadataFromConnectors(String baseURL, String connectionId, String entityName) throws Exception {\n        HttpResponse response = null;\n        JsonNode responseContent = null;\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        try (CloseableHttpClient httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();) {\n            HttpGet httpGet;\n            StringBuilder uri = new StringBuilder(baseURL).append(\"/v1.0/connector/ipaas/metadata/\")\n                    .append(connectionId).append(\"/\").append(entityName).append(\"/attributes\");\n            String finalUrl = uri.toString().replaceAll(\" \", \"%20\");\n            httpGet = new HttpGet(finalUrl);\n            httpGet.setHeader(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            httpGet.setHeader(\"secret\", CryptUtil.getSimpleCryptor().encrypt(DuctCommonConstants.GSNAP_SECRET).getValue());\n            httpGet.setHeader(\"Content-Type\", \"application/json\");\n\n            LOGGER.info(\"Retrieving metadata for {} from connectors. Hitting : {}\", entityName","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7f49ab3-663e-4b1b-9514-5e7edf37c709","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/MSTeamsCaasMetaDataServiceImpl.java","startLine":92,"endLine":104,"content":"\n    }\n\n    private Map constructMSTeamsObjectDefinition(List<GainsightMSTeamsFieldDescription> gainsightMSTeamsFieldDescription, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectLabel);\n        objectDefinition.put(FIELDS, gainsightMSTeamsFieldDescription);\n        return objectDefinition;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b43869a-2f44-41c5-8df3-c2ab9f084bfd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/BionicRulesDPIntegrationServiceImpl.java","startLine":31,"endLine":42,"content":".getRequestInfo().setUserAuthInfo(RequestContextProvider.getGSUserAuthInfo());\n        }\n        RequestInfo requestInfo = authTokenGenService\n                .generateToken(AuthTokenType.BIONIC_RULES_DP_SYSTEM_USER, RequestContextProvider.getRequestInfo()\n                        .getAdditionalInfo());\n        assertNotNull(requestInfo, CaasValidationCode.INVALID_INPUT, \"Failed to generate mda system token for Bionic Rules\");\n        isNotBlank(requestInfo.getAuthToken(), CaasValidationCode.INVALID_INPUT, \"Failed to generate mda system token for Bionic Rules\");\n        return getSimpleCryptor().encrypt(requestInfo.getAuthToken()).getValue();\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a45af93-a256-4f70-b10b-c9489bb392a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctErrorConstants.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.constants;\n\npublic class DuctErrorConstants {\n    public static final String EXTERNAL_SYSTEM_ERROR_CODE_NULL = \"0\";\n    public static final String EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL = \"External error Not Found or Empty\";\n\n    public static final String INTERNAL_SYSTEM_ERROR_MESSAGE = \"Internal error occurred\";\n    public static final String INVALID_INPUT = \"Not a valid input\";\n    public static final String ERROR_IN_PARSING_DATES=\"Error in Parsing the Date Filter \";\n    public static final String INVALID_VALUE=\"Invalid value \";\n\n\n    public static final String INTERNAL_SYSTEM_ERROR_CODE = \"1\";\n\n\n    public static final String MESSAGE = \"message\";\n\n    public static final String HUBSPOT_BULK_WRITE_BACK_NOT_SUPPORTED = \"Hubspot Write back not supported for this object - \";\n\n    public static final String S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET = \"S3 file is not present in the bucket\";\n\n    public static final String INVALID_S3_FILE_DETAILS = \"Bucket Name or file name or encryption details does not exist\";\n\n    public static final String INVALID_MAPPINGS = \"Invalid Mappings\";\n\n    public static final String MANDATORY_UPSERT_KEYS_NOT_PRESENT = \"Mandatory upsert keys are not present \";\n\n    public static final String MANDATORY_REQUIRED_KEYS_NOT_PRESENT = \"Mandatory required keys are not present \";\n\n    public static final String MAPPED_FIELDS_NOT_PRESENT_IN_CSV = \"Mapped fields : [%s] is not present in extract CSV. Reach out to Gainsight Support if the issu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81c97502-7e68-4b07-9db9-e9980fdb50bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":477,"endLine":487,"content":"nition = fieldNameToNativeMetadataMap.get(entry.getKey());\n            compareValues(ceMetadata.get(FIELD_NAME), gsFieldDefinition.getFieldName(), \"Field Name doesn't Match with native field name - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n            compareValues(meta.get(PATH), gsFieldDefinition.getDbName(), \"Path doesn't Match with native dbName - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n            compareValues(meta.get(FILTERABLE_IN_INTERNAL_SYSTEM), String.valueOf(gsFieldDefinition.getMeta().isFilterable()), \"Filterable doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n\n            if (!ConnectorType.SERVICENOW.equals(connectorType)) {\n                //As Servicenow started supporting filters on external system via Native, FILTERABLE_IN_EXTERNAL_SYSTEM doesn't valid for Servicenow\n                compareValues(meta.get(FILTERABLE_IN_EXTERNAL_SYSTEM).toString(), gsFieldDefinition.getMeta().isExternallyFilterable() != null ? gsFieldDefinition.getMeta().isExternallyFilterable() : false, \"ExternallyFilterable doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n                /*With CE: Datatype refers to vendor native type\n                With native movement, datatype refers to datatypeMappings in caas_connector_config*/\n                compareValues(ceMetadata.get(DATA_TYPE).toString(), gsFieldDefinition.getDataType().toLowerCase(), \"D","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d51b9615-c16c-46cb-9d6c-eeee89b6ee93","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":207,"endLine":225,"content":"PageToken();\n            String url = StringUtils.isEmpty(recordId) ? String.format(baseUrl, limit, nextPageToken) : String.format(baseUrl, recordId, limit, nextPageToken);\n            externalSystemResponse = fetchDataFromExternalSystem(url, tokenDetails);\n        } catch (CaasException cex) {\n            log.error(\"Error in fetching synchronized data\", cex);\n            throw cex;\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(populateNextPageToken(externalSystemResponse)).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse))\n                .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()).build();\n    }\n\n    private DuctResponse fetchSynchronizedDataWithoutPagination(DuctJobMapping ductJobMapping, String recordId, String dataApi, TokenDetails tokenDetails) throws CaasException {\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        Map<String, Object> externalSystemResponseForRecordings = new HashMap<>();\n        Map<String, Object> e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"36f95d2f-eb51-433d-a9ba-3e053a5edf82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":259,"endLine":280,"content":"ivate void updateDuctJobMapping(String jobId, String s3FilePath, DuctStatus ductStatus, long recordCount) {\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(jobId);\n        ductJobMapping.setDuctStatus(ductStatus);\n        ductJobMapping.setOutputS3Path(s3FilePath);\n        ductJobMapping.setTotalNumberOfRecords(recordCount);\n        ductJobMapping.setSuccessRecords(recordCount);\n        log.info(\"ductJobMapping to be updated {}\",ductJobMapping);\n        ductJobMappingDao.update(ductJobMapping);\n    }\n\n    private String uploadToS3(String jobId, File file, String format) { //todo generic format for s3\n        String s3FilePath = null;\n        try (FileInputStream fi = new FileInputStream(file)) {\n            String s3FileName = UUID.randomUUID().toString().replaceAll(UCConstants.FILLER, \"\") + format;\n            String s3FileDirectory = new DateTime().toString(UCConstants.PNP_DATE_FORMAT) + UCConstants.FORWARD_SLASH +\n                    UCConstants.S3_INPUT_FOLDER + UCConstants.FORWARD_SLASH + jobId;\n            s3FilePath = s3FileDirectory + UCConstants.FORWARD_SLASH + s3FileName;\n            log.info(\"Uploaded path from s3 : \" + s3FilePath);\n            ObjectMetadata objectMetadata = new ObjectMetadata();\n            objectMetadata.setContentLength(file.length());\n            DuctS3Utility.uploadFileStreamOnS3(PNP_BUCKET_NAME, s3FileName, s3FilePath, fi, objectMetadata, jobId);\n            log.info(\"s3 load of file complete s3FilePath:{} size:{}\", s3F","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca67d704-c917-4bf3-9bc8-bec07ebebd5f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":204,"endLine":221,"content":"figByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, null);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(), false);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            List dataList = new ArrayList();\n            Map<String, Object> jsonMap = new ObjectMapper().convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n            });\n            dataList.add(jsonMap);\n            externalSystemResponse.put(DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred: {}\", e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_ME","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d4c01670-5a1e-443b-8207-d1753727f62e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":153,"endLine":174,"content":"elds(fieldsSet.stream().collect(Collectors.toList()));\n        metadataByConnectionIdAndObjectName.setMetadata(metadata);\n        metadataCacheDao.update(metadataByConnectionIdAndObjectName);\n      } else {\n        MetadataCache metadataCache = new MetadataCache(RequestContextProvider.getTenantId(), connectionId, objectName, metadata);\n        metadataCacheDao.insert(metadataCache);\n      }\n      Map<String, ObjectDefinition> objectDefinitionMap = applyGlobalAndTenantOverrides(metadata, pnpConnectionsInfo, objectName);\n      processSystemFieldsIfRequired(metadataEngineConfig, pnpConnectionsInfo, objectName, objectDefinitionMap);\n      return objectDefinitionMap;\n\n    } catch (Exception e) {\n      log.error(\"Exception occurred while trying to initiate metadata refresh:{}\", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Exception occurred while trying to initiate metadata refresh : \" + e.getMessage()));\n    }\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> getMetadataUsingEngine(String connectionId, List<String> superClassObjects, String objectName, boolean forceRefresh) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n    GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Connection not found\", SC_BAD_REQUEST);\n    Metadata","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4824f798-07e3-4ac4-959e-24388bcd607b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1686,"endLine":1708,"content":"rocessedPropertyMap);\n        }\n    }\n\n    public void validateUniqueness(PNPConnectionsInfo connectionsInfo, boolean isUpdate) throws CaasException {\n        List<PNPConnectionsInfo> existingConnections = pnpConnectionInfoDao.find(new Query()\n                .addCriteria(Criteria.where(CONNECTION_TYPE)\n                        .is(connectionsInfo.getConnectionType())));\n        for (PNPConnectionsInfo pnpConnectionsInfo : GainsightCollectionUtils.nullSafeList(existingConnections)) {\n            if (!(pnpConnectionsInfo.getConnectionId().equals(connectionsInfo.getConnectionId()))\n                    && (!pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.REVOKED) || isUpdate)) {\n                if (pnpConnectionsInfo.getConnectionName().equals(connectionsInfo.getConnectionName())) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.CONNECTION_NAME_IN_USE.getUserText(), HttpStatus.SC_BAD_REQUEST));\n                }\n            }\n        }\n    }\n\n    public void preProcessRequest(PNPConnectionsInfo pnpConnectionsInfo) throws IOException, CaasException {\n        CaasConnectorConfig connectionConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        //validating allowed number of connections per Connector\n        if (connectionConfig.getProperties().containsKey(ALLOWED_CONNECTIONS)) {\n            int allowedConnections = Integer.valueOf(connectionConfig.getProperties().get(AL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"858c4ae9-579d-4a7b-b293-28b63976a173","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctValidationResponseDTO.java","startLine":1,"endLine":23,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.duct.beans.DuctStatus;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Map;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class DuctValidationResponseDTO {\n\n    private String connectionId;\n    private String resourceName;\n    private Criteria criteria;\n    private DuctStatus ductStatus;\n    private Map<String, Object> failureReason;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2bfc0c7e-d4ea-4b68-a13e-a6e661a93120","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":141,"endLine":160,"content":" \", e);\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            catchExceptionAndUpdateStatus(caasException,ductJobMapping.getJobId());\n            InstrumentationUtil.recordException(ductJobMapping,DuctConstants.CAAS_WEB,e.getMessage());\n            throw caasException;\n        }\n    }\n\n    private void updateDuctJobMappingStatusForBulk(String jobId, DuctResponse ductResponse) {\n        DuctJobMapping ductJobMappingDb = ductJobMappingDao.findByJobId(jobId);\n        ductJobMappingDb.setDuctStatus(ductResponse.getDuctStatus());\n        ductJobMappingDb.setOutputS3Path(ductResponse.getS3FilePath() != null ? ductResponse.getS3FilePath() : null);\n        ductJobMappingDb.setExternalSystemResponse(ductResponse.getExternalSystemResponse());\n        ductJobMappingDb.setTotalNumberOfRecords(ductResponse.getTotalNumberOfRecords());\n        ductJobMappingDb.setSuccessRecords(ductResponse.getSuccessRecords());\n        ductJobMappingDb.setFailedRecords(ductResponse.getFailedRecords());\n        ductJobMappingDb.setExternalErrorFileLocation(ductResponse.getExternalErrorFileLocation());\n        ductJobMappingDb.setExternalSuccessFileLocation(ductResponse.getExternalSuccessFileLocation());\n        ductJobMappingDb.setExternalErrorFileLocationS3Link(ductResponse.getExternalErrorFileLocationS3Link());\n        ductJobMappingDb.setSourceResponseFi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01f3a545-bffa-4dc4-bf04-423c7186350f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":116,"endLine":135,"content":"nfo, queryParm);\n            Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Objec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8d19ff9-51ab-4e06-962f-577bef58f3f1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":221,"endLine":235,"content":"(\"connectionId\") String connectionId,\n                                                        @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                                        @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                                        @RequestBody final Object promotedFieldDefinitions) {\n        try {\n            List<GSFieldDefinition> fieldDefinitions = OBJECT_MAPPER.convertValue(promotedFieldDefinitions, new TypeReference<List<GSFieldDefinition>>() {\n            });\n            Set<String> updatedFieldNames = fieldDefinitions.stream().map(GSFieldDefinition::getDbName).collect(Collectors.toSet());\n            MetadataCache metadataByConnectionIdAndObjectName = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n            Map<String, ObjectDefinition> metadata = metadataByConnectionIdAndObjectName.getMetadata();\n            List<GSFieldDefinition> fields = metadata.get(objectName).getFields();\n            Set<String> existingFields = fields.stream().map(GSFieldDefinition::getDbName).collect(Collectors.toSet());\n            Set<String> duplicateFieldNames = existingFields.stream().filter(field -> updatedFieldNames.contains(field)).collect(Collectors.toSet());\n            if (!duplicateFieldNames.isEmpty())\n                DuctUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6731eb61-c29a-417d-8e77-c21c34efb106","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/WriteBackHubspotQueueInfo.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n@Service\npublic class WriteBackHubspotQueueInfo implements QueueInfo {\n    private static final DuctProcessQueue queue = DuctProcessQueue.WRITE_BACK_HUBSPOT_QUEUE;\n\n    @Override\n    public String getQueueName() {\n        return queue.getQueueName();\n    }\n\n    @Override\n    public String getTableName() {\n        return queue.getTableName();\n    }\n\n    @Override\n    public Duration getDefaultLockTime() {\n        return Duration.ofHours(3);\n    }\n\n    @Override\n    public int getDefaultTenantLimit() {\n        return 5;\n    }\n\n    @Override\n    public QueueDbMessageSplitter getMessageSplitter() {\n        MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n        return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n    }\n\n    @Override\n    public boolean maintainMessageSequencing() {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4931a316-a8b4-4097-9a7b-349a9fa693e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":317,"endLine":362,"content":"taTypeMapping = dataTypeMappings\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(finalExternalSourceDataType) && dataTypeMapping.isSupported())\n        .findFirst()\n        .orElse(null);\n\n    if (Objects.isNull(requiredDataTypeMapping)) {\n      return null;\n    }\n    return requiredDataTypeMapping;\n  }\n\n\n  @Override\n  public boolean postProcessingFieldsRequired() {\n    return true;\n  }\n\n  @Override\n  public void postProcessFields(String objectName, Map<String, ObjectDefinition> objectDefinitionMap, JsonNode\n      fields) {\n\n    List<Map<String, Object>> fieldsList = OBJECT_MAPPER.convertValue(fields, new TypeReference<List<Map<String, Object>>>() {\n    });\n\n    ObjectDefinition objectDefinition = objectDefinitionMap.get(objectName);\n\n    if (Objects.isNull(objectDefinition)) {\n      return;\n    }\n\n    Map<String, Map<String, Object>> systemPicklistFieldsInfoMap = Maps.newHashMap();\n\n    nullSafeList(fieldsList)\n        .stream()\n        .filter(Objects::nonNull)\n        .filter(field -> Objects.nonNull(field.get(\"default\")) && BooleanUtils.isTrue((Boolean) field.get(\"default\")))\n        .filter(field -> Objects.nonNull(field.get(\"choices\")))\n        .forEach(field -> {\n          systemPicklistFieldsInfoMap.put(DuctUtils.valueOf(field.get(\"name\")), field);\n        });\n\n    Set<String> systemPicklistFields = systemPicklistFieldsInfoMap.keySet();\n\n    objectDefinition.getFields().forEach(fieldDefinition -> {\n      if (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a3c597a-a67a-472f-ba47-5ee3f1358839","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":42,"endLine":65,"content":"cApiVersion\";\n    public static final String LABEL_PLURAL = \"labelPlural\";\n    public static final String CAAS_CONNECTION_CONFIG_CACHE_KEY = \"caas\";\n    public static final String USER_OAUTH_ENABLEMENT = \"USER_OAUTH_ENABLEMENT\";\n    public static final String CUSTOM_FIELD_PREFIX = \"__duct__\";\n\n    public static final String LOOKUP_FIELD_PATTERN_PREFIX = \"look_up_field___\";\n    public static final String LOOKUP_OBJECT_PATTERN = \"___look_up_object___\";\n    public static final String LOOKUP_FIELD_NAME_PATTERN = \"look_up_field___%s___look_up_object___%s\";\n    public static final String LOOKUP_FIELD_LABEL_PATTERN = \"Field of %s object for matching the value coming against the above field %s\";\n    public static final String DECIMAL = \"DECIMAL\";\n    public static final String STRUCT = \"STRUCT\";\n    public static final String ARRAY = \"ARRAY\";\n    public static final String MAP = \"MAP\";\n    public static final String BINARY = \"BINARY\";\n    public static final String METADATA_CONFIG_CACHE_KEY = \"metadata_config_\";\n\n    public static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    public static final String DEFAULT_ENV = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n    public static final String GSNAP_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    public class DescribeMetaConstants {\n        public static final String OBJECT_ID = \"objectId\";\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b95f0b18-605b-47b8-b7c6-0dad0d989d0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/AbstractCaasDao.java","startLine":98,"endLine":130,"content":"DuctDaoUtils.SELECT_ALL_QRY, tableName, pageable, getAllowedSortingColumns());\n    return namedParameterJdbcTemplate().query(query, rowMapper);\n  }\n\n  @Override\n  public void remove(T entity) {\n    log.info(\"Deleting entity {}\", entity);\n    String query = String.format(\"DELETE FROM %s WHERE %s = :%s\", tableName, DuctDaoUtils.GSID_COLUMN, DuctDaoUtils.GSID_COLUMN);\n    namedParameterJdbcTemplate().execute(query, Collections.singletonMap(DuctDaoUtils.GSID_COLUMN, entity.getGSidAsString()),\n        PreparedStatement::execute);\n  }\n\n  @Override\n  public void removeAll() {\n    String query = String.format(\"DELETE FROM %s\", tableName);\n    jdbcTemplate().execute(query);\n  }\n\n  @Override\n  public void removeAll(List<String> gsids) {\n    String query = String.format(\"DELETE FROM %s WHERE %s IN ( :%s )\", tableName, DuctDaoUtils.GSID_COLUMN, DuctDaoUtils.GSID_COLUMN);\n    namedParameterJdbcTemplate().execute(query, Collections.singletonMap(DuctDaoUtils.GSID_COLUMN, gsids),\n        PreparedStatement::executeUpdate);\n  }\n\n  protected List<T> find(Map<String, Object> criteria) {\n    String query = String.format(SELECT_CRITERIA_QUERY, tableName, DuctDaoUtils.andCriteria(criteria));\n    return namedParameterJdbcTemplate().query(query, criteria, rowMapper);\n  }\n\n  protected Optional<T> findOne(Map<String, Object> criteria) {\n    String query = String.format(SELECT_CRITERIA_QUERY, tableName, DuctDaoUtils.andCriteria(criteria));\n    return Optional.ofNullable(DataAccessUtils.singleResult(name","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d63394a-c1fc-41bd-9c9b-7bfacb2815af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":119,"endLine":143,"content":"red while fetching global objects for tenant: {}\"));\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error occurred while fetching global objects for tenant: {}, errorMessage: {}\", RequestContextProvider.getTenantId(), e.getMessage());\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Error occurred while fetching global objects for tenant: {}\"));\n            }\n        } else {\n            sfdcObjects = (Map<String, SObject>) cacheValue;\n        }\n\n        List<Map<String, Object>> returnObj = new ArrayList<>(sfdcObjects.keySet().size());\n        for (String obj : sfdcObjects.keySet()) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing Connectioninfo\", HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.assertTrue((pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED) || pnpConnectionsInfo.getConnectionStatus().equa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"062a3014-6f0c-4179-90dd-7aaf1cd65ee8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasNativeMetadataServiceImpl.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.duct.beans.config.CaasObjectTenantConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.config.CaasObjectConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectTenantConfigDAO;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.OBJECT_ID;\n\n@Order(20000)\n@Service\npublic class CaasNativeMetadataServiceImpl implements CaasMetadataService {\n\n    @Autowired\n    private MetadataDriver metadataDriver;\n    @Autowired\n    private CaasObjectConfigDAO caasObjectConfigDAO;\n    @Autowired\n    private CaasObjectTenantConfigDAO caasObjectTenantConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7d8d203c-7dcd-459a-b764-81dee43b15cc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":124,"endLine":151,"content":"   = caasMetadataTransformationConfig.getResourceLevelMetadataConfig().get(objectName).getMetadataTransformAttributes();\n        }\n\n        for (GSFieldDefinition gsFieldDefinition : gsFieldDefinitions) {\n            if (fieldToMetadataTransformAttributes.containsKey(gsFieldDefinition.getFieldName())) {\n                gsFieldDefinition.getMeta().setCreateable(fieldToMetadataTransformAttributes.get(gsFieldDefinition.getFieldName()).isCreatable());\n\n                gsFieldDefinition.getMeta().setUpdateable(fieldToMetadataTransformAttributes.get(gsFieldDefinition.getFieldName()).isUpdatable());\n                gsFieldDefinition.getMeta().setReadOnly(!(gsFieldDefinition.getMeta().isCreateable() || gsFieldDefinition.getMeta().isUpdateable()));\n\n                gsFieldDefinition.getMeta().setRequired(true);\n\n                gsFieldDefinition.getMeta().setMultiValued(true);\n\n                newFieldDefinitionList.add(gsFieldDefinition);\n                //addNewFieldForLookUpFields\n                if (gsFieldDefinition.getDataType().equalsIgnoreCase(\"LOOKUP\") && caasMetadataTransformationConfig != null\n                        && caasMetadataTransformationConfig.isAddLookUpFieldsToMeta()) {\n                    newFieldDefinitionList.add(addNewFieldForLookUpFields(gsFieldDefinition));\n                }\n            }\n\n        }\n        return newFieldDefinitionList;\n    }\n\n    private GSFieldDefinition addNewFieldForLookUpFields(GSFieldDefinition gsFieldDefinition) {\n        GSFieldDef","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea5e5567-ed00-4037-a028-43993e06744e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":555,"endLine":576,"content":"tionsInfo();\n\n        switch (pnpConnectionsInfoFromDB.getConnectionType()) {\n            case SFDC:\n                if (!pnpConnectionsInfoFromDB.getConnectionStatus().equals(ConnectionStatus.INIT) && (RequestContextProvider.isPureNativeTenant() || RequestContextProvider.isHybridTenant())) {\n                    pnpConnectionsInfoFromDB = revokeConnectionAndUpdateStatusInJob(pnpConnectionsInfoFromDB, false);\n                   /* if (pnpConnectionsInfoFromDB.getConnectionStatus().equals(ConnectionStatus.REVOKED_AND_LINKED)) {\n                        submitUnLinkingCRMConnection(pnpConnectionsInfoFromDB);\n                    }*/\n                }\n                break;\n            case DYNAMICS:\n                //TODO: Below code needs to be removed and to be added to above common code when linking and unlinkling is applicable to Dynamics\n                TenantMasterQuery tenantMasterQuery = new TenantMasterQuery();\n                tenantMasterQuery.tenantId(RequestContextProvider.getTenantId());\n                Tenant tenantFromDB = tenantMasterDAO.findOne(tenantMasterQuery);\n                if (CollectionUtils.isNotEmpty(tenantFromDB.getLinkedCrmIdSet()) && tenantFromDB.getLinkedCrmIdSet().contains(pnpConnectionsInfoFromDB.getCrmId())) {\n                    tenantFromDB.getLinkedCrmIdSet().remove(pnpConnectionsInfoFromDB.getCrmId());\n                    tenantMasterDAO.update(tenantMasterQuery, new TenantMasterUpdate(tenantFromDB));\n                }\n                break;\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e03c0f86-e772-48b7-b5c6-0814d22072a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":61,"endLine":79,"content":"\n                                        AuthenticationType authType) {\n        long startEpoch = System.nanoTime();\n        LOGGER.info(\"Executing Rest Call to {} [method: {}]\", url, httpMethod);\n        try {\n            ResponseEntity<ResponseObj> response = restTemplate\n                    .exchange(URI.create(url), httpMethod, new HttpEntity<>(requestBody, createHeaders(authType, null)), ResponseObj.class);\n            LOGGER.info(\"Response Code: {}\", response.getStatusCode());\n            if (response.getStatusCode().is2xxSuccessful() && Objects.requireNonNull(response.getBody()).isResult()) {\n                return OBJECT_MAPPER.convertValue(response.getBody().getData(), toValueTypeRef);\n            } else {\n                LOGGER.error(\"Failed to communicate with external service '{}' with status code {}, Throwing Error\", url, response.getStatusCode());\n                throw new SystemException(\"Failed to communicate with external service.\", CoreErrorCode.SYSTEM_ERROR);\n            }\n        } catch (HttpClientErrorException | HttpServerErrorException httpError) {\n            LOGGER.error(\"Failed to fetch data from Server '{}'.\", url, httpError);\n            throw new SystemException(httpError.getResponseBodyAsString(), new Throwable(httpError.getResponseBodyAsString()), CoreErrorCode.SYSTEM_ERROR);\n        } catch (IllegalArgumentException parserError) {\n            LOGGER.error(\"Failed to convert data to Requested Type: {}\", toValueTypeRef.getClass().getSimpleName()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8035367f-d138-4cd8-aafd-9efbbc9dffcf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/RedisCacheUtility.java","startLine":35,"endLine":56,"content":");\n        template.opsForValue().set(key, value);\n        template.expire(key, CONNECTION_CONFIG_CACHE_TTL, TimeUnit.SECONDS);\n    }\n\n    public boolean putValue(String key, Object value, long expireTime) {\n        RedisTemplate template = getTemplate();\n        Boolean isValueSet = template.opsForValue().setIfAbsent(key, value);\n        if(isValueSet){\n            template.expire(key, expireTime, TimeUnit.SECONDS);\n        }\n        return isValueSet;\n    }\n\n    public void clearCache(String key) {\n        LOGGER.info(\"Clearing redis cache with keys starts with: {}\", key);\n        RedisTemplate template = getTemplate();\n        Collection<String> keys = template.keys(key + \"*\");\n        template.delete(keys);\n        LOGGER.info(\"Successfully cleared redis cache with keys starts with: {}\", key);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f0d8c74-2ddb-4eed-8397-8191f1304c13","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":898,"endLine":918,"content":"h (pnpConnectionInfoFromUI.getConnectionType()) {\n                case MIXPANEL:\n                    pnpConnectionsInfoFromDB.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties()\n                            .get(ACCESS_SECRET)), MIXPANEL));\n                    break;\n\n                case GOOGLE_ANALYTICS:\n                    break;\n                case BIGQUERY:\n                    if (pnpConnectionInfoFromUI.getAuthorizationType().equals(AuthorizationType.CUSTOM)) {\n                        authorizeServiceAccountDetail(pnpConnectionInfoFromUI);\n                        pnpConnectionsInfoFromDB.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                        log.info(\"The connection is updated via custom flow with connectionId {}\",\n                                pnpConnectionInfoFromUI.getConnectionId());\n                    }\n                    List<PNPConnectionsInfo> existingConnections = pnpConnectionInfoDao.findByConnectionType(ConnectorType.BIGQUERY);\n                    commonUpdateValidation(pnpConnectionsInfoFromDB, existingConnections, pnpConnectionInfoFromUI);\n                    pnpConnectionsInfoFromDB.setConnectionName(pnpConnectionInfoFromUI.getConnectionName());\n                    pnpConnectionsInfoFromDB.setIpaasConnection(pnpConnectionInfoFromUI.isIpaasConnection());\n                    updateConnectionProperties(pnpConnectionInfoFromUI, caasConnectorConfig, pnpConnectionsInfoFromDB);\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"29477314-fcc7-421c-a694-a0c0d6a43be7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":236,"endLine":264,"content":"       List<Criteria> flattenedCriteria = flattenCriteria(criteria);\n\n            // filter only those criteria which are externally filterable\n            List<Criteria> flattenedRequiredCriteria = nullSafeList(flattenedCriteria)\n                    .stream()\n                    .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n                    .collect(Collectors.toList());\n\n            // In this case we have at least one filter which is externally filterable\n            if (CollectionUtils.isNotEmpty(flattenedRequiredCriteria))\n                modifiedCriteria = getSingleCriteriaForQueryBody(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap);\n            log.info(\"Criteria being used for search request: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n            return modifiedCriteria;\n\n        } catch (Exception ex) {\n            log.error(\"Error while modifying criteria for object search, Falling back to default criteria accepted by the external system\", ex);\n            return getDefaultFallbackCriteria();\n        }\n    }\n\n    private List<Criteria> flattenCriteria(Criteria criteria) {\n        List<Criteria> flattenedCriteria = new ArrayList<>();\n        // Recursively flatten the criteria\n        flatten(criteria, flattenedCriteria);\n        return flattenedCriteria;\n    }\n\n    private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n        if (criteria.getFilters() == null","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd59c989-8bee-436d-bc71-a1cf9968ae97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":103,"endLine":131,"content":"      } finally {\n            FileUtils.deleteQuietly(zippedLocalFile);\n            IOUtils.closeQuietly(inputStream);\n            IOUtils.closeQuietly(outputStream);\n            if (httpConn != null) {\n                httpConn.disconnect();\n            }\n        }\n        return localFile;\n    }\n\n    public static File unzip(File compressedFile) throws CaasException {\n        try {\n            File unzipped = File.createTempFile(\"gs-object\", \".csv\");\n            log.info(\"Created temp file {}  to unzip {}\", unzipped.getAbsolutePath(), compressedFile.getName());\n            try (FileInputStream fileIn = new FileInputStream(compressedFile);\n                 GZIPInputStream gZIPInputStream = new GZIPInputStream(fileIn);\n                 FileOutputStream fileOutputStream = new FileOutputStream(unzipped)) {\n                IOUtils.copy(gZIPInputStream, fileOutputStream);\n            }\n            return unzipped;\n        } catch (IOException e) {\n            log.error(\"Exception occurred while trying to unzip file : {0}\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    public static String getS3UploadFilePath(DuctJobMapping ductJobMapping) {\n        return new StringBuilder().append(RequestContextProvider.getTenantId()).append(DuctConstants.FORWARD_SLASH).append(ductJobMapping.getConnectionId()).append(DuctConstants.FORWARD_SLASH).app","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a3cd58c6-0f9f-44ab-a1a2-f543b5cd300a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/SNSPayload.java","startLine":1,"endLine":40,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * Created by prasenjeet on 24/11/16.\n */\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class SNSPayload implements Serializable{\n\n  private static final long serialVersionUID = 1L;\n  private String consumerEndpoint;\n  private Map<String, String> headersMap;\n\n  public String getConsumerEndpoint() {\n    return consumerEndpoint;\n  }\n\n  public void setConsumerEndpoint(String consumerEndpoint) {\n    this.consumerEndpoint = consumerEndpoint;\n  }\n\n  public Map<String, String> getHeadersMap() {\n    return headersMap;\n  }\n\n  public void setHeadersMap(Map<String, String> headersMap) {\n    this.headersMap = headersMap;\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb24ffca-18c9-452a-9915-f3f9438c7b32","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":87,"endLine":107,"content":" inputStream = httpConn.getInputStream();\n                zippedLocalFile = File.createTempFile(String.format(\"UC_S3_to_Local_Zipped_%s_%d\", RandomStringUtils.randomAlphanumeric(5), System.currentTimeMillis()), \".gz\");\n                outputStream = new FileOutputStream(zippedLocalFile);\n                FileUtils.copyInputStreamToFile(inputStream, zippedLocalFile);\n                log.info(\"File Downloaded From S3 {}\", zippedLocalFile.getAbsolutePath());\n                localFile = unzip(zippedLocalFile);\n            } else {\n                log.error(\"Not able to download S3 File from preSigned URL\");\n                throwError(CaasValidationCode.FAILED_TO_DOWNLOAD_FILE_FROM_S3_SIGNED_URL.getGsEventCode(), CaasValidationCode.FAILED_TO_DOWNLOAD_FILE_FROM_S3_SIGNED_URL.getUserText(), CaasValidationCode.FAILED_TO_DOWNLOAD_FILE_FROM_S3_SIGNED_URL.getUserText());\n            }\n        } catch (IOException e) {\n            FileUtils.deleteQuietly(localFile);\n            log.error(\"Exception occurred while trying to download file from signed URL : {0}\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } catch (CaasException ex) {\n            throw ex;\n        } finally {\n            FileUtils.deleteQuietly(zippedLocalFile);\n            IOUtils.closeQuietly(inputStream);\n            IOUtils.closeQuietly(outputStream);\n            if (httpConn != null)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3202c77a-aedf-47d2-b43a-76ca283a7efa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":481,"endLine":500,"content":"RROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Exception occurred while trying to initiate metadata refresh\"));\n    }\n  }\n\n  @Override\n  public MetadataGenerationResponse getMetadataGenerationStatus(String jobId) {\n    MetadataGenerationDetails detailsById = metadataGenerationDetailsDao.getDetailsById(jobId);\n    GainsightPrecondition.assertNotNull(detailsById, CoreErrorCode.INVALID_PARAMETER,\n        \"Job Id Not Found\", \"Job Id Not Found\", 400);\n    MetadataGenerationResponse metadataGenerationResponse;\n    if (MetadataJobStatus.SUCCESS.equals(detailsById.getStatus())) {\n      GeneratedMetadataCache generatedMetadataCache = generatedMetadataCacheDao.getMetadataByConnectionIdAndObjectName(detailsById.getConnectionId(), detailsById.getObjectName());\n      metadataGenerationResponse = MetadataGenerationResponse.builder().connectionId(detailsById.getConnectionId())\n          .connectorType(detailsById.getConnectorType()).objectName(detailsById.getObjectName()).status(detailsById.getStatus())\n          .generatedFields(generatedMetadataCache.getGeneratedFields()).jobId(detailsById.getJobId())\n          .tenantId(detailsById.getTenantId()).build();\n    } else\n      metadataGenerationResponse = MetadataGenerationResponse.builder().connectionId(detailsById.getConnectionId())\n          .connectorType(detailsById.getConnectorType()).objectName(detailsById.getObjectName()).status(detailsById.getStatus())\n          .jobId(detailsById.getJobId()).tenantId(detailsB","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5be14657-8bd6-49ed-8cc5-a9248ea27d1a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":103,"endLine":127,"content":"nition> gsFieldDefinitions = new ObjectMapper().convertValue(objectDef.get(\"fields\"), new TypeReference<List<GSFieldDefinition>>() {\n        });\n        if (StringUtils.isNotEmpty(consumer)) {\n            objectDefinition.setFields(transformGSFieldDefinition(objectName, gsFieldDefinitions, consumer));\n        } else {\n            objectDefinition.setFields(gsFieldDefinitions);\n        }\n        Map<String, ObjectDefinition> objectDefinitionMap = new HashMap<>();\n        objectDefinitionMap.put(objectName, objectDefinition);\n        return objectDefinitionMap;\n    }\n\n    private List<GSFieldDefinition> transformGSFieldDefinition(String objectName, List<GSFieldDefinition> gsFieldDefinitions, String consumer) {\n        List<GSFieldDefinition> newFieldDefinitionList = new ArrayList<>();\n        CaasMetadataTransformationConfig caasMetadataTransformationConfig = metadataTransformationConfigDAO.getConfigByConsumer(consumer);\n\n        Map<String, MetadataTransformAttributes> fieldToMetadataTransformAttributes = new HashMap<>();\n\n        if (caasMetadataTransformationConfig.getResourceLevelMetadataConfig() != null\n                && caasMetadataTransformationConfig.getResourceLevelMetadataConfig().get(objectName) != null) {\n            fieldToMetadataTransformAttributes\n                    = caasMetadataTransformationConfig.getResourceLevelMetadataConfig().get(objectName).getMetadataTransformAttributes();\n        }\n\n        for (GSFieldDefinition gsFieldDefinition : gsFieldDefinition","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77fb2a86-7fb3-433d-99fe-b7f0ad846b63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":265,"endLine":284,"content":"viceImpl();\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken()));\n\n            //createMappings\n\n            List<InternalBulkFileBean> internalBulkFileBeans = new ArrayList<>();\n            List<ColumnMapping> columnMappings = new ArrayList<>();\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            String cacheValue;\n            for (com.gainsight.integration.bean.ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n                cacheValue = getObjectIdFromCache(pnpConnectionsInfo, service, ductColumnMapping.getObjectName(), ductJobMapping);\n                ColumnMapping hubspotColumnMapping = new ColumnMapping(cacheValue, ductColumnMapping.getHeaderName(),\n                        ductColumnMapping.getFieldName(), populateUpsertKeyForHubspot(ductColumnMapping));\n                columnMappings.add(hubspotColumnMapping);\n            }\n\n            FileImportPage fileImportPage = new FileImportPage(true, columnMappings);\n            if (ductJobMapping.isRules","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b984934-0ee0-476c-8e38-9937827ba605","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/CaasRedisTemplate.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.utils.Redis;\n\nimport org.springframework.data.redis.core.RedisTemplate;\n\npublic interface CaasRedisTemplate {\n    <T> RedisTemplate<String, T> getRedisTemplate();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85398c3b-b2b4-40f1-a9df-1c2ff5cf27d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":140,"endLine":166,"content":"LOGGER.error(\"Unable to Read Audit Record From Audit Service\", e);\n                        continue;\n                    }\n                    auditRecordList.add(auditRecordObject);\n                }\n            } else {\n                LOGGER.error(\"No Audit Record found\");\n            }\n\n        } else {\n            LOGGER.error(String\n                    .format(\"Received failure response code from Audit Service with error message %s and response code %d\", jsonNode\n                            .get(\"errorDesc\"), responseCode));\n            throw new SystemException(\"Received failure response code from Audit Service\");\n        }\n        return auditRecordList;\n    }\n\n    private String getQueryParams(Map<String, Object> queryMap) {\n        StringBuilder query = new StringBuilder();\n        query.append(UCConstants.MONGO_TENANTID_FIELD_MAPPER).append(UCConstants.EQUALS)\n                .append(RequestContextProvider.getTenantId()).append(UCConstants.AMP);\n        query.append(UCConstants.SHOW).append(UCConstants.EQUALS)\n                .append(getCommaSeparatedQueryParams(UCConstants.EVENT_TYPE, UCConstants.EVENT_STATUS, UCConstants.EVENT_NAME, UCConstants.USER_NAME, UCConstants.USER_ID, UCConstants.SYSTEM_ID, UCConstants.SYSTEM_TAGS, UCConstants.SYSTEM_TIMESTAMP, UCConstants.GENERATED_BY, UCConstants.REQUEST_SOURCE))\n                .append(UCConstants.AMP);\n        query.append(UCConstants.WITHDATA).append(UCConstants.EQUALS).append(true).append(UCConstants.AMP);\n        f","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c84ce13-5a0a-4881-9129-105b51352f08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactory.java","startLine":1,"endLine":30,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.duct.beans.account.OAuthStateDetail;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.enums.SalesforceOrgType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.Map;\n\n/**\n * User: santa\n * Date: 14/4/14\n * Time: 2:26 PM\n */\npublic interface GainsightAccountServiceFactory {\n    String getState(String accountId, Map<String, Object> properties);\n\n    String authorizationUrl(AccountType accountType, String hostUrl, String accountId, Map<String, Object> additionalState, String customDomainUrl, SalesforceOrgType sfdcOrgType);\n\n    String authorizationUrl(AccountType accountType, String hostUrl, PNPConnectionsInfo pnpConnectionsInfo,\n                            Map<String, Object> additionalState) throws CaasException;\n\n    void accessTokenAuthorization(AccountType accountType, String code, String hostUrl,\n                                  OAuthStateDetail oAuthStateDetail);\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f0948b1-ca41-4f64-bbd3-a1bf417dfc90","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDaoUtils.java","startLine":37,"endLine":71,"content":"tRowId(Class<?> clazz) {\n    String schemaId = ObjectIDGenerator.buildInternalObjectSchemaID(clazz);\n    return RowIDGenerator.getGenerator(schemaId).next();\n  }\n\n  /**\n   * Generic insert query builder which builds named parameter insert query should be used\n   * with {@link org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate}\n   *\n   * @param tableName Table name\n   * @param valueMap  Column name and value map.\n   * @return insert query with named parameter and not actual values.\n   */\n  public static String insertQuery(String tableName, Map<String, Object> valueMap) {\n    StringJoiner columns = new StringJoiner(\", \", \"(\", \")\");\n    StringJoiner values = new StringJoiner(\", \", \"(\", \")\");\n    for (Map.Entry<String, Object> entry : valueMap.entrySet()) {\n      columns.add(entry.getKey());\n      values.add(\":\" + entry.getKey());\n    }\n    String query = String.format(INSERT_QUERY, tableName, columns.toString(), values.toString());\n    log.debug(\"Insert query generated table : {}, query : {}\", tableName, query);\n    return query;\n  }\n\n  /**\n   * Generic update query builder. sets values given in valueMap, and with AND criteria of given map.\n   *\n   * @param tableName Table name.\n   * @param valueMap  Column name and value map.\n   * @param criteria  Criteria to update records.\n   * @return Update query.\n   */\n  public static String updateQuery(String tableName, Map<String, Object> valueMap, Map<String, Object> criteria) {\n    StringJoiner set = new StringJoiner(\"","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bea7ff0b-3e20-4aa7-89c6-308ff0f3fdce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":669,"endLine":689,"content":"ery(DataHighwayUtils.getFilterRule(ductJobMapping.getCriteria(),\n                                objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFieldDefinitionMap,\n                                ignoreMetadataFields, caasConnectorConfig, ductJobMapping.getResourceName(), fieldsFlattened), objectToFieldDBNameToFieldDefinitionMap,\n                        relationships, ductJobMapping.getProperties().get(BASE_OBJECT_PLURAL_NAME).toString(), ductJobMapping.getResourceName(), DynamicsGainsightUtils.fetchMapFromConfigServer(), fieldsFlattened);\n            } catch (Exception exception) {\n                log.error(\"Exception occurred while constructing ODATA filter query: {}\", exception.getMessage(), exception);\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, exception));\n            }\n            log.info(\"Generation of filter query for Dynamics connector with jobId: {} completed: {}\", ductJobMapping.getJobId(), filterQuery);\n            additionalDetails.put(DYNAMICS_EXTERNAL_QUERY, filterQuery);\n        }\n        return additionalDetails;\n    }\n\n    @Override\n    protected String getNameForDHFilterRule(String mapping, String resourceName) {\n        return mapping;\n    }\n\n    @Override\n    protected Map getAttributesWithLookupFieldsIfPresent(CaasMetadataService service, DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws Caas","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0823b954-47a6-4db7-82b3-131210368db5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/GsDuctWorkerApp.java","startLine":46,"endLine":79,"content":"ation.class,\n        DataSourceAutoConfiguration.class,\n        DataSourceTransactionManagerAutoConfiguration.class,\n        MongoAutoConfiguration.class,\n        MongoDataAutoConfiguration.class,\n        BatchAutoConfiguration.class,\n        JpaRepositoriesAutoConfiguration.class,\n        RedisAutoConfiguration.class,\n        SpringDataWebAutoConfiguration.class,\n        GsonAutoConfiguration.class,\n        RabbitAutoConfiguration.class,\n        QuartzAutoConfiguration.class})\n@EnableScheduling\n@Import({GSDuctWorkerConfiguration.class, DbQueueSpringConfiguration.class})\npublic class GsDuctWorkerApp {\n\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public static void main(String[] args) {\n        ApplicationInitializer.getLogger(GsDuctWorkerApp.class);\n        //Following generates the instance name for the server. This will be available in logs.\n        InstanceNameGenerator.setInstanceName();\n        PID.capturePID();\n        //Instantiate and load config server\n        ApplicationConfigProperties.getInstance();\n        //Setting the server as async process for appropriate properties to be considered for db\n        Constants.asynchronousProcess();\n\n        ConfigurableApplicationContext springApplicationBuilder =\n                new SpringApplicationBuilder(GsDuctWorkerApp.class).web(WebApplicationType.NONE).run(args);\n        DynamicQueuePropertiesConfigProvider configProvider = new DynamicQueuePropertiesConfigProvider();\n        SpringDbQueueIniti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b666636c-d4b4-4e0b-bc8b-703b3fe4b461","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/MSTeamsCaasMetaDataServiceImpl.java","startLine":54,"endLine":75,"content":"ing, Object>> returnObj = new ArrayList<>(msTeamsObjects.size());\n        for (String obj : msTeamsObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GainsightMSTeamsEntityDescription gainsightMSTeamsEntityDescription = new GainsightMSTeamsEntityDescription(objectName, Lists.newArrayList());\n        Map metadata = constructMSTeamsObjectDefinition(gainsightMSTeamsEntityDescription.getGainsightMSTeamsFieldDescriptions(), objectName, pnpConnectionsInfo);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(ConnectorType.MSTEAMS);\n        List<GSFieldDefinition> gsFields = OBJECT_MAPPER.convertValue(metadata.get(FIELDS), new TypeReference<List<GSFieldDefinition>>() {});\n        gsFields.stream().forEach(field -> {\n            GSFieldMeta metaMap = field.getMeta();\n            Map<String, Object> metaProperties = metaMap.getProperti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b010a91c-b5b3-445c-bb3d-0e154832d9fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":95,"endLine":122,"content":"(pnpConnectionsInfo, USER));\n    sapDatasphereConnectionDetail.setPwd(ipaasPropertiesFromDB.get(PASSWORD));\n    pnpConnectionsInfo.setConnectionDetail(sapDatasphereConnectionDetail);\n  }\n\n  private void populateSAPConnectionProperties(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n    Map<String, Object> ipaasPropertiesFromUI = MAPPER.convertValue(pnpConnectionInput.getProperties().get(IPaasConstants.IPAAS_PROPERTIES), new TypeReference<Map<String, Object>>() {\n    });\n    Map<String, Object> ipaasPropertiesFromDB = getIpaasPropertiesFromDB(pnpConnectionsInfo);\n    String newPassword = ipaasPropertiesFromUI.get(PASSWORD).toString();\n\n    if (isValueChanged(newPassword, ipaasPropertiesFromDB.get(PASSWORD))) {\n      ipaasPropertiesFromUI.put(PASSWORD, CryptHandler.getInstance().encrypt(newPassword));\n    } else {\n      ipaasPropertiesFromUI.put(PASSWORD, ipaasPropertiesFromDB.get(PASSWORD));\n    }\n    pnpConnectionInput.getProperties().put(IPaasConstants.IPAAS_PROPERTIES, ipaasPropertiesFromUI);\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n  }\n\n  private boolean isValueChanged(String newValue, Object oldValue) {\n    //if old value is empty, then it is a change. A tenant copy/Sandbox refresh use case\n    if (oldValue == null || StringUtils.isBlank(oldValue.toString())) {\n      return true;\n    }\n    try {\n      byte[] decodedNewPassword = java.util.Base64.getDecoder().decode(newValue);\n      return !Arrays.equals(deco","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c5c37a3-5824-456e-aff7-c301c3451672","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/AbstractCaasDao.java","startLine":37,"endLine":75,"content":"ions jdbcTemplate() {\n    return ucDatabaseTemplateService.getApplicationJdbcTemplate();\n  }\n\n  protected abstract Map<String, Object> columnValueMap(T entity);\n\n  protected Set<String> getAllowedSortingColumns() {\n    return Collections.emptySet();\n  }\n\n  @Override\n  public T save(T o) {\n    if (o.getGsid() == null) {\n      return insert(o);\n    } else {\n      return update(o);\n    }\n  }\n\n  @Override\n  public T insert(T o) {\n    log.info(\"Insert entity {}, {}\", entityClass.getSimpleName(), o);\n    Map<String, Object> valueMap = columnValueMap(o);\n    String gsid = o.getGsid() != null ? o.getGSidAsString() : DuctDaoUtils.getNextRowId(entityClass);\n    valueMap.put(DuctDaoUtils.GSID_COLUMN, gsid);\n    valueMap.computeIfAbsent(DuctDaoUtils.CREATED_DATE_COLUMN, dummy -> new Timestamp(System.currentTimeMillis()));\n    valueMap.computeIfAbsent(DuctDaoUtils.MODIFIED_DATE_COLUMN, dummy -> new Timestamp(System.currentTimeMillis()));\n    valueMap.put(DuctDaoUtils.DELETED_COLUMN, o.getDeleted());\n    String insertQuery = DuctDaoUtils.insertQuery(tableName, valueMap);\n    namedParameterJdbcTemplate().execute(insertQuery, valueMap, PreparedStatement::executeUpdate);\n    o.setGsid(new GSID(gsid));\n    return o;\n  }\n\n  @Override\n  public T update(T o) {\n    GainsightPrecondition.assertNotNull(o.getGSidAsString(), CoreErrorCode.SYSTEM_ERROR, 500);\n    log.info(\"Update entity {} with gsid {}, {}\", entityClass.getSimpleName(), o.getGSidAsString(), o);\n    Map<String, Object> valueMap = column","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d7c25701-1c91-4884-beb9-df391ece0b9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":454,"endLine":462,"content":"      LocalDateTime parsedDate = LocalDateTime.parse(dateTimeStr, formatter);\n                String formattedDate = parsedDate.toLocalDate().toString();\n                criteria.setValues(Lists.newArrayList(formattedDate));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error while parsing date time field value\", e);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0ba711d-d798-4745-9dd0-266980e2e30f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":93,"endLine":140,"content":"   response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getTenantDataMongoStatus(String tenantId) {\n        String name = \"DataMongo\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkTenantDataMongoConnection(tenantId)) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n\n        return response;\n    }\n\n    public HealthStatus getTenantSchemaMongoStatus(String tenantId) {\n        String name = \"SchemaMongo\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkTenantSchemaMongoConnection(tenantId)) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n\n        return response;\n    }\n\n    public HealthStatus getAuthMongoStatus() {\n        String name = \"AuthMongo\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkAuthMongoConnection()) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getGlobalMongoStatus() {\n        String name = \"GlobalMongo\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkGlo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7d7afabe-0333-431b-aa56-5abca1a715fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1732,"endLine":1762,"content":"xception;\n        }\n\n    }\n\n    @SneakyThrows\n    private String aquireLock(String tenantId) {\n        return mutexService.acquire(String.format(\"DUCT-CONNECTION-%s\", tenantId), 1 * 60 * 1000);\n    }\n\n    private void releaseLock(String lockId) {\n        if (lockId != null) {\n            mutexService.release(lockId);\n        }\n    }\n\n    private void pushAuditLogs(AuditOperationType auditOperationType, UnifiedConnectorRequest unifiedConnectorRequest,\n                               List<BeanPropertyTracker> propertyTrackerList, EventStatusEnum eventStatusEnum) {\n        if (auditOperationType.equals(AuditOperationType.UPDATE) &&\n                (propertyTrackerList == null || propertyTrackerList.isEmpty())) {\n            return;\n        }\n        AuditRecord auditRecord = AuditLogUtility.createAuditLog(auditOperationType, AuditEntityType.CONNECTION, unifiedConnectorRequest, propertyTrackerList, eventStatusEnum);\n        ductAuditLogClientService.postAuditRecord(auditRecord);\n    }\n\n    private void softDeleteAccesskey(String connectionId) {\n        Query query = Query.query(Criteria.where(\"tenantId\").is(RequestContextProvider.getTenantId()).and(\"accessType\").is(\"SEGMENT_IO\").and(\"uc_connection_id\").is(connectionId).and(\"deleted\").is(false));\n        AccessKeyInfo accessKeyInfoFromDB = accessKeyDao.findOne(query);\n        GainsightPrecondition.assertNotNull(accessKeyInfoFromDB, CaasValidationCode.CONNECTIONS_NOT_FOUND);\n        AccountQuery accessKeyQuery = new AccountQuery();\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c4db86d-d9e5-4afb-9a45-947c43fb8e2b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":428,"endLine":450,"content":"  cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, connectionId).toString();\n            optionalCaasConfig = connectorConfigs.stream().filter(i -> DuctConstants.CUSTOM_OBJECTS_KEYWORD.equalsIgnoreCase(i.getObjectName())).findFirst();\n            if (optionalCaasConfig.isPresent()) {\n                CaasObjectApiConfig caasObjectApiConfig = optionalCaasConfig.get();\n                caasObjectApiConfig.getAdditionalProperties().put(DuctConstants.OBJECT_TYPE_ID, cacheValue);\n                return new ResponseObj(true, caasObjectApiConfig);\n            } else {\n                log.error(\"No API Config found for objectName : {}\", objectName);\n                return new ResponseObj(true, null);\n            }\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch write back config of a connector type\", response = Map.class)\n    @GetMapping(value = \"/{connectorType}/config\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getConnectorConfig(@ApiParam(value = \"Connector Type for fetching config\", required = true) @PathVariable(\"connectorType\") String connectorType) {\n        try {\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.getConnectorType(connectorType));\n            return new Respons","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c7277327-b240-4d89-b664-25d28d09fac5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":106,"endLine":126,"content":"atch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n\n    }\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0aa0f15-990e-4129-8be3-95f63a0048f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":378,"endLine":405,"content":"           log.info(\"Batch failed. Total records in batch: {}\", failedRecordCountInBatch);\n                if (failedRecordCountInBatch > 0) {\n                    totalRecords = totalRecords + failedRecordCountInBatch;\n                    failedRecords = failedRecords + failedRecordCountInBatch;\n                }\n                failedFiles.add(splitFile);\n                log.error(\"Exception while loading bulk data to Databricks\", e);\n                externalSystemResponse.put(UCConstants.ERROR_MESSAGE, e.getMessage());\n                ductStatusSet.add(DuctStatus.FAILED);\n            }\n        }\n\n        DuctStatus statusOfTheLoad;\n        if (ductStatusSet.size() == 1) {\n            statusOfTheLoad = ductStatusSet.iterator().next();\n            ductResponse.setDuctStatus(statusOfTheLoad);\n        } else {\n            ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n            statusOfTheLoad = DuctStatus.PARTIAL_SUCCESS;\n        }\n\n        populateFileLocations(statusOfTheLoad, ductResponse, ductJobMapping, splitFiles, successfulFiles, failedFiles);\n        ductResponse.setTotalNumberOfRecords(totalRecords);\n        ductResponse.setSuccessRecords(recordsAffected);\n        ductResponse.setExternalSystemResponse(externalSystemResponse);\n        ductResponse.setFailedRecords(failedRecords);\n        ductResponse.setErrorMessage((String) externalSystemResponse.getOrDefault(UCConstants.ERROR_MESSAGE, StringUtils.EMPTY));\n        ductResponse.setTenantId(ductJobMapping.getTenan","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"26e3375e-5894-47ed-8184-41c4cf92b253","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":251,"endLine":270,"content":"ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping, List<String> identifiers, PNPConnectionsInfo pnpConnectionsInfo,\n                                   ObjectDefinition objectDefinition) throws CaasException {\n        GainsightPrecondition.assertTrue((null == ductJobMapping.getCriteria())\n                , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        Map properties = pnpConnectionsInfo.getProperties();\n        try {\n            String absoluteObjectPath = UCConstants.BACKTICK + properties.get(UCConstants.GSIntegration.SCHEMA_NAME).toString() + UCConstants.BACKTICK + UCConstants.PERIOD +\n                    UCConstants.BACKTICK + properties.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + UCConstants.BACKTICK + UCConstants.PERIOD +\n                    UCConstants.BACKTICK + ductJobMapping.getResourceName().replaceAll(StringUtils.SPACE, UCConstants.UNDERSCORE) + UCConstants.BACKTICK;\n\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            Integer rowsAffected = gainsi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0273a43a-afe3-4e5d-8399-3c64611a263c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":304,"endLine":326,"content":"tails();\n\n        CaasConnectorConfig caasConnectionConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n\n        fetchTaskDetails.setConnectorId(ductJobMapping.getConnectionId());\n        String baseObject = String.valueOf(ductJobMapping.getResourceName());\n        fetchTaskDetails.setExternalEntityName(baseObject);\n\n\n        Set<String> fieldsToExtract = new HashSet<>();\n        fieldsToExtract.addAll(ductJobMapping.getFields());\n        DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), fieldsToExtract);\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || dataTypeMapping.getExternalDatatype().equals(\"DATE\"))\n                        && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        String dateTimeFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"datetime\") || dataTypeMapping.getExternalDatatype().equals(\"DATETIME\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n\n        List<FieldInfo> showFields = Lists.newArrayList();\n        fieldsToExtract.forEach(mapping -> {\n            FieldInfo fieldInfo = new FieldInfo();\n            fieldInfo.setN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"492ac764-dab0-49a7-bce2-9619593521e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/MetadataGenerationProcessor.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.context.MDCContext;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport j","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6befc992-86e5-4007-b3b1-5522e99f0d6c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":60,"endLine":98,"content":"@Override\n    protected String getTaskName() {\n        return CAAS_SALESFORECE_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.salesforce.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.salesforce.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.salesforce.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SFDC);\n        return getFilterRuleFromCAASRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        HashMap<String, String> additionalDetails ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5739ebbb-65a0-4346-a279-ac84377561a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":207,"endLine":234,"content":"ctMapper().convertValue(taskResults.findValue(\"taskOutputBatchs\").get(0).get(\"batchFileDetails\"), new TypeReference<Map<String, Object>>() {\n            });\n            s3PathOfTaskOutput = DuctS3Utility.getSignedURL(batchFileDetails.get(\"s3BucketName\").toString(),\n                    60 * 24 * 7, batchFileDetails.get(\"s3FilePrefix\").toString(), HttpMethod.GET).toString();\n        }\n        File downloadedFile = DuctUtils.downloadAndGetLocalFilePath(s3PathOfTaskOutput);\n        File file = updateFileHeaders(downloadedFile, ductJobMapping, quoteChar, escapeChar);\n        String s3UploadFilePath = DuctUtils.getS3UploadFilePath(ductJobMapping);\n        DuctS3Utility.uploadFileToS3(file, file.getName(), s3UploadFilePath, ductJobMapping.getJobId());\n        updateDuctJobMapping(ductJobMapping.getJobId(), s3UploadFilePath, DuctStatus.SUCCESS, recordCount);\n    }\n\n\n    private void setMDCContext(String tenantId) {\n        Tenant tenant = service.findOne(tenantId);\n        if (tenant != null) {\n            log.info(\"Setting request info for tenant id {}\", tenant);\n            RequestInfo requestInfo = new RequestInfo();\n            TenantAuthInfo tenantInfo = TenantAuthInfo.fromTenant(tenant);\n            UserAuthInfo userAuthInfo = new UserAuthInfo();\n            requestInfo.setUserAuthInfo(userAuthInfo);\n            requestInfo.setTenantAuthInfo(tenantInfo);\n            RequestContextProvider.setRequestInfo(requestInfo);\n            GainsightContext.setMDC();\n        }\n    }\n\n    p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1e7476c9-fd41-4597-86d1-658b87c5bdcc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":268,"endLine":284,"content":"e = new GainsightZoomFetchServiceImpl();\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        try {\n            HttpResponse httpResponse = fetchService.searchData(\n                    tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken(),\n                    tokenDetails.getAccessToken(), url);\n            if(httpResponse.getStatusLine().getStatusCode() != 200) {\n                log.error(\"Error in fetching synchronized data. Status code: {}\", httpResponse.getStatusLine().getStatusCode());\n                String errorMessage = EntityUtils.toString(httpResponse.getEntity());\n                log.error(\"Response received from external system : {}\", errorMessage);\n                try {\n                    Map<String, String> errorMessageMap = MAPPER.readValue(errorMessage, new TypeReference<Map<String, String>>() {\n                    });\n                    if (ObjectUtils.isNotEmpty(errorMessageMap.get(CODE)) && ObjectUtils.isNotEmpty(errorMessageMap.get(MESSAGE)))\n                        DuctUtils.prepareErrorResponseAndThrowException(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsEventCode(), CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(), \"Error in fetching data from source\", errorMessageMap.get(CODE), errorMessageMap.get(MESSAGE), ConnectorType.ZOOM);\n                    else\n                        DuctUtils.throwError(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f12796b-808e-4229-8c37-f4a27f0096fd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectConfigDAOImpl.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.UUID;\n\n\n@Repository\npublic class CaasObjectConfigDAOImpl extends AbstractEntityDaoImpl<CaasObjectConfig> implements CaasObjectConfigDAO {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CaasObjectConfigDAOImpl.class);\n\n    @Autowired\n    public CaasObjectConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasObjectConfig.class);\n    }\n\n    @Override\n    public Collection<CaasObjectConfig> getCaasObjectList() {\n        Query query = new Query();\n        List<CaasObjectConfig> caasObjectConfigs = getMongoTemplate().find(query, CaasObjectConfig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fbe82317-32b7-44a2-9117-be9eb39daf7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/HealthStatusController.java","startLine":38,"endLine":50,"content":" new ResponseObj(true);\n        }\n\n        LOGGER.info(\"Checking the health of gs-duct CAAS microservice...\");\n        if (StringUtils.isEmpty(tenantId)) {\n            tenantId =  DeploymentProperties.getDeploymentProperties().getValue(\"mda.health.status.tenantId\");\n        }\n        GainsightPrecondition.assertNotNull(tenantId, PNP_INVALID_TENANT_ID, \"Tenant Provided is null\",\n            \"Tenant Provided is null\", HttpStatus.SC_BAD_REQUEST);\n\n        return new ResponseObj(true, healthService.getAllServiceStatus(tenantId));\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"532ef124-25b0-4777-b587-19d49bda26d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDao.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.dao;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface DuctDao<T extends BaseGSEntity> {\n\n  T save(T entity);\n\n  T insert(T entity);\n\n  T update(T entity);\n\n  T findOneOrThrow(String gsid);\n\n  Optional<T> findOne(String gsid);\n\n  List<T> find(Pageable pageable);\n\n  void remove(T entity);\n\n  void removeAll();\n\n  void removeAll(List<String> gsids);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2995b944-bb54-4649-8a62-373f51cfa410","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":307,"endLine":327,"content":" processing for connectionId:{%s}, object:{%s}. Error : {%s}. Workflow will continue.\", pnpConnectionsInfo.getConnectionId(), objectName, ex));\n                        writeOutData(icsvOutWriter, tenantId, RequestContextProvider.getTenantName(),\n                                RequestContextProvider.getTenantType(), objectName, pnpConnectionsInfo.getConnectionId(), \"Failed\", ex.getMessage());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred : \", e);\n            throw e;\n        }\n    }\n\n    private Map<String, ObjectDefinition> getNativeAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, Map<String, List<String>> superClassInfo) throws CaasException {\n        try {\n            MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = metadataEngineConfigByConnectorType.getResources().stream().filter(i -> i.getResourceName().equalsIgnoreCase(objectName)).findFirst();\n            ResourceConfig resourceConfig;\n            if (!first.isPresent()) {\n                Optional<ResourceConfig> optionalDefaultResourceConfig = metadataEngineConfigByConnectorType.getResources()\n                        .stream().filter(resource -> resource.isDefaultResource()).findFirst();\n                if (!optionalDefaultResourceConfig.isPresent() || !optional","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbd84053-25a2-42fc-983d-f10dde338e0d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":706,"endLine":732,"content":"{}\", bulkDataLoadRequest);\n        }\n        DuctJobMapping ductJobMapping = createDuctJobMapping(bulkDataLoadRequest);\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(bulkDataLoadRequest.getParams().get(\"connectionId\").toString());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n        ductJobMapping.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        ductJobMapping.setSyncDirection(SyncDirection.MDA_TO_EXTERNAL_SYSTEM);\n        ductJobMapping.setRules(true);\n        ductJobMapping.setBulk(true);\n        ductJobMapping.setDuctStatus(DuctStatus.INIT);\n        ductJobMapping.setTenantId(RequestContextProvider.getTenantId());\n        ductJobMappingDao.insert(ductJobMapping);\n        wbQueueMessage(ductJobMapping);\n        BulkActionResponse bulkActionResponse = new BulkActionResponse();\n        bulkActionResponse.setJobId(ductJobMapping.getJobId());\n        bulkActionResponse.setStatus(ExecutionStatus.RECEIVED);\n        return bulkActionResponse;\n    }\n\n    private DuctDataOperation setOperation(OperationType operation) {\n        if (operation == OperationType.UPSERT) {\n            return DuctDataOperation.UPSERT;\n        } else if (operation == OperationType.INSERT) {\n            return DuctDataOperation.INSERT;\n        } else {\n            return DuctData","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21aea272-a023-413d-9c68-7dabc0d5885a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":317,"endLine":343,"content":"new CaasException(getDuctResponse(ductJobMapping, response, finalResponse));\n            }\n        } catch (CaasException e) {\n            log.error(\"Exception in uploadBulkData \", e);\n            throw e;\n        } catch (Exception e) {\n            log.error(\"Error in importing bulk data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        } finally {\n            FileUtils.deleteQuietly(file);\n        }\n        log.info(\"job has been submitted with job id {}\", finalResponse.get(\"id\").toString());\n        return pollWithJobId(accessDetailsFromDB, finalResponse, ductJobMapping);\n    }\n\n    private String getObjectIdFromCache(PNPConnectionsInfo pnpConnectionsInfo, CaasMetadataService service, String objectName, DuctJobMapping ductJobMapping) throws CaasException {\n        Object cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, ductJobMapping.getConnectionId());\n        if (cacheValue == null) {\n            service.getObjects(pnpConnectionsInfo, null);\n            cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, ductJobMapping.getConnectionId());\n        }\n        return cacheValue.toString();\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean q","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0550096b-8ce7-429e-aac4-6be50ca7a6be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCEnvSpecificConfigDetailUtil.java","startLine":43,"endLine":88,"content":"{\n        return getUrlWithFallback(null, \"product.dataload.url\");\n    }\n\n    public static String getPersonApiUrl() {\n        return getUrlWithFallback(null, \"gs.people.ms.base.url\");\n    }\n\n    public static String getOpportunityApiUrl() {\n        return getUrlWithFallback(null, \"opportunity.dataload.url\");\n    }\n\n    public static String getRateLimitingApiUrl () {\n        return getUrlWithFallback(null, \"gs.rate.limiter.service.host\");\n    }\n\n    public static String getObjectMetadataApiUrl() {\n        return getUrlWithFallback(GSService.GS_OBJECT_METADATA, \"omd.ms.base.url\");\n    }\n\n    public static String getCDPApiUrl() {\n        return getUrlWithFallback(null, \"cdp.host\");\n    }\n\n    public static String getGalaxyApiUrl() {\n        return getUrlWithFallback(GSService.GS_GALAXY_ENDPOINT, \"galaxy.base.url\");\n    }\n\n    public static String getGSApiUrl() {\n        return getUrlWithFallback(GSService.GS_API_ENDPOINT, \"gs.api.url\");\n    }\n\n    public static String getGSAwsApiUrl() {\n        return getUrlWithFallback(GSService.GS_AWS_API_ENDPOINT, \"gs.api.aws.url\");\n    }\n\n    public static String getUCConnectPxApiUrl() {\n        return getUrlWithFallback(null, \"uc.gs.connect.px.url\");\n    }\n\n    private static String getUrlWithFallback(GSService gsService, String fallbackKey) {\n        String serviceUrl = StringUtils.EMPTY;\n        if(Objects.nonNull(gsService)) {\n            try {\n                serviceUrl = GSServiceURLFactory.getServiceURL(gsService);\n            } catc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"434546b6-abd4-4306-a652-a7743f4cc511","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":233,"endLine":250,"content":"g> duplicateFieldNames = existingFields.stream().filter(field -> updatedFieldNames.contains(field)).collect(Collectors.toSet());\n            if (!duplicateFieldNames.isEmpty())\n                DuctUtils.throwError(CaasValidationCode.FIELD_ALREADY_PRESENT.getGsEventCode(), CaasValidationCode.FIELD_ALREADY_PRESENT.getUserText(),\n                        \"Field Names already exist : \" + String.join(\",\", duplicateFieldNames));\n            fieldDefinitions.forEach(field -> {\n                Map<String, Object> properties = field.getMeta().getProperties();\n                properties.put(\"promoted_at\", new DateTime());\n                properties.put(\"source\", FieldSaveType.PROMOTED);\n                field.getMeta().setProperties(properties);\n            });\n            fields.addAll(fieldDefinitions);\n            GeneratedMetadataCache generatedMetadata = generatedMetadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n            List<GSFieldDefinition> generatedFields = generatedMetadata.getGeneratedFields();\n            List<GSFieldDefinition> nonUpdatedFields = generatedFields.stream().filter(field -> !updatedFieldNames.contains(field.getDbName())).collect(Collectors.toList());\n            generatedMetadata.setGeneratedFields(nonUpdatedFields);\n            metadataCacheDao.update(metadataByConnectionIdAndObjectName);\n            generatedMetadataCacheDao.update(generatedMetadata);\n            return new ResponseObj(true, metadataByConnectionIdAndObjectN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c2df41c-24b0-40db-9142-fbdbba8796d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.metadata.engine.generator;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.duct.metadata.engine.service.MetadataGenerationDetailsDao;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport com.gainsight.properties.DeploymentProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.math.BigInteger;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\n@Slf4j\npublic class SchemaGeneratorServiceImpl implements SchemaGeneratorService {\n    @Autowired\n    private MetadataGenerationDetailsDao metadataGenerationDetailsDao;\n\n    private static final String FORMAT = DeploymentProperties.getDeploymentProperties().getValue(\"supported.dateTime.format\",\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"983b791f-aa3b-4d55-8300-2361cb858824","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":51,"endLine":83,"content":"m.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Order(13000)\npublic class PipedriveV2DataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final Logger LOGGER = LoggerFactory.getLogger(PipedriveV2DataSourceService.class);\n    private AuthService authService = new AuthServiceImpl();\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n    private static final String DATA = \"data\";\n    private static final String CAAS_PIPEDRIVE_V2_EXTRACT = \"CaasPipedriveV2Extract\";\n    private static final String LIMIT = \"limit\";\n    private static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD = \"update_time\";\n    private static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD_FOR_USERS = \"modified\";\n    private static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_PIPEDRIVE_V2_EXTRACT;\n    }\n\n    @Override\n    protected String getT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9a647d00-b943-4d7a-a01b-d78a23da6b0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelFactory;\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelService;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"838f937c-e8c5-4bc4-aca1-7f2f496381af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":163,"endLine":184,"content":"ils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n/*\n    private ConnectorsDataHighwayResponseHandler<ResponseObj> submitJobWithRetryStrategy(String payload, String submitJobURL, Map<String, String> headers) throws IOException {\n        ConnectorsDataHighwayResponseHandler<ResponseObj> postResponse = null;\n        for (int n = 0; n <= RETRY_COUNT_WITH_BACKOFF; n++) {\n            try {\n                postResponse = post(submitJobURL, headers, payload, ResponseObj.class);\n                return postResponse;\n            } catch (IOException e) {\n                LOGGER.error(\"Exception occurred while submitting to datahighway\", e);\n                String queryParams = String.format(DATAHIGHWAY_JOBS_LISTING_URL, RequestContextProvider.getRequestId(), headers.get(\"externalId\"));\n                String jobListUrl = String.format(\"%s%s\", API_GATEWAY_URL_BASE, queryParams);\n                ConnectorsDataHighwayResponseHandler<ResponseObj> jobListResponse = get(jobListUrl, headers, ResponseObj.class);\n                if (jobListResponse.getStatusCode() == 200 && jobListResponse.getResponseBody() != null) {\n                    List<Object> data = GainsightCollectionUtils.nullSafeList((List) jobListResponse.getResponseBody().getData());\n                    if (CollectionUtils.isNotEmpty(data)) {\n                        Map jobData = GainsightCollectionUtils.nullSafeMap((Map) data.get(0));\n                        if (jobData.get(\"jobId\")","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab6dcd3f-3ea8-4f90-8597-02c94c325423","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":137,"endLine":169,"content":"seObj> validateFlow(String payload) {\n    try {\n      String validateJobUrl = String.format(\"%s%s\", API_GATEWAY_URL_BASE, \"/validateFlow\").intern();\n      //validateJobUrl = \"http://localhost:8080/api/v1.0/flow_manager/validateFlow\";\n      Map<String, String> headers = Maps.newHashMap();\n      headers.put(\"sharedSecret\", SHARED_SECRET);\n      LOGGER.debug(\"Submitting request for validating Job to: {}, with headers:{}, with payload: {}\", validateJobUrl, headers, payload);\n      return post(validateJobUrl, headers, payload, ResponseObj.class);\n    } catch (Exception ex) {\n      LOGGER.error(ex.getMessage(), ex);\n      throw new SystemException(ex.getMessage(), SC_INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  private static <T> ConnectorsDataHighwayResponseHandler<T> get(String uri, Map<String, String> headers, Class<T> clazz) {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClientWitRetry();\n      HttpGet httpGet = new HttpGet(uri);\n      addHeaders(httpGet, headers);\n      closeableHttpResponse = httpClient.execute(httpGet);\n      return getResult(closeableHttpResponse, clazz);\n    } catch (IOException e) {\n      throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR);\n    }finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n/*\n    private ConnectorsDataHighwayResponseHandler<ResponseObj> submitJobWithRetryStrategy(String p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dae651cf-d025-4280-93e5-3e39a510a4fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":82,"endLine":103,"content":"ame();\n                    fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(lookedUpObjectName, new HashMap<>());\n                    computedCanonicalName = fieldNameSplitted[1];\n                }\n            } else if (fieldNameSplitted.length == 3) {\n                fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(fieldNameSplitted[1], new HashMap<>());\n                computedCanonicalName = fieldNameSplitted[2];\n            } else if (fieldNameSplitted.length == 4) {\n                fieldDBNameToFieldDefinitionMap = objectToFieldDBNameToFieldDefinitionMap.getOrDefault(fieldNameSplitted[1], new HashMap<>());\n                computedCanonicalName = fieldNameSplitted[2] + PERIOD + fieldNameSplitted[3];\n            }\n\n            if (fieldDBNameToFieldDefinitionMap.containsKey(computedCanonicalName)) {\n                originalDataType = fieldDBNameToFieldDefinitionMap.get(computedCanonicalName).getMeta().getOriginalDataType();\n                if (MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(originalDataType.toUpperCase())) {\n                    if (fieldNameSplitted.length == 1) {\n                        canonicalName = String.format(VALUE_FIELD, fieldNameSplitted[0]);\n                    } else if (fieldsFlattened && fieldNameSplitted.length == 2) {\n                        /*Case for lookup field.\n                        Example: createdby.systemuser\n                        */\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56f5821a-ddac-4ee6-8096-9aa42272e5ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctFilterCondition.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonValue;\nimport com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.Precondition;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Map;\n\n@JsonIgnoreProperties(\n        ignoreUnknown = true\n)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic enum DuctFilterCondition {\n        AND(\"AND\"),\n        OR(\"OR\");\n\n\n    private final String ductFilterCondition;\n    private static final Map<String, DuctFilterCondition> FILTER_CONDITION_MAP = Maps.newHashMap();\n\n    private DuctFilterCondition(String filterCondition) {\n        this.ductFilterCondition = filterCondition;\n    }\n\n    @JsonCreator\n    public static DuctFilterCondition getFilterCondition(String filterCondition) {\n        if (StringUtils.isBlank(filterCondition)) {\n            return null;\n        } else {\n            DuctFilterCondition resolvedFilterCondition = (DuctFilterCondition)FILTER_CONDITION_MAP.get(filterCondition.toLowerCase());\n            Precondition.isNotNull(resolvedFilterCondition, ValidationCode.GENERIC_SYSTEM_ERROR, DHUtils.msg(\"Invalid filter c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d283b2dc-5cac-4a1f-a485-202715793389","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/ExternalTasksValidationCode.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.enums;\n\npublic enum ExternalTasksValidationCode {\n    FIELD_NOT_PRESENT_IN_SYSTEM(1001,\"FIELD_NOT_PRESENT_IN_SYSTEM\"),\n    IPAAS_CONNECTION_INFO_NOT_FOUND(1002, \"IPAAS_CONNECTION_INFO_NOT_FOUND\"),\n    STAGING_CONNECTION_INFO_NOT_FOUND(1003,\"STAGING_CONNECTION_INFO_NOT_FOUND\"),\n    DATE_PARSE_EXCEPTION(1004,\"DATE_PARSE_EXCEPTION\"),\n    ACCESS_TOKEN_EXPIRED(1005,\"Access Token Expired\"),\n\n    DP_SYSTEM_EXCPETION(2001,\"DP_SYSTEM_EXCPETION\"),\n    GENERIC_ERROR(2002,\"GENERIC_ERROR\"),\n    NO_ERROR_MESSAGE_FROM_DP(2003,\"NO_ERROR_MESSAGE_FROM_DP\")\n    ;\n\n    private final int code;\n    private String message;\n\n    ExternalTasksValidationCode(int code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMessage() {\n        return this.message;\n    }\n\n    @Override\n    public String toString() {\n        return \"ExternalTasksValidationCode{\" +\n                \"code=\" + code +\n                \", message='\" + message + '\\'' +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7188fe61-df77-4dec-a6bb-11a57884eaff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":53,"endLine":100,"content":"et;\n\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/\")\n@EnableSwagger2\n@Api(value = \"CAAS Api's\", description = \"CAAS related api's\")\n@ApiResponses(value = {\n        @ApiResponse(code = 200, message = \"Successfully retrieved list\"),\n        @ApiResponse(code = 401, message = \"You are not authorized to view the resource\"),\n        @ApiResponse(code = 404, message = \"The resource you were trying to reach is not found\")\n})\n//todo all the scope is commented, find out the right scope and add it and also do the same in api gateway registration\npublic class DuctController {\n    @Autowired\n    private DuctJobMappingService ductJobMappingService;\n\n    @Autowired\n    DuctService ductService;\n\n    @Autowired\n    DuctValidationService ductValidationService;\n\n    @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    CaasObjectApiConfigDao caasObjectApiConfigDao;\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    @Autowired\n    MetadataDriver metadataDriver;\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n\n\n    @ApiOperation(value = \"Fetch Data Sync\", response = DuctResponseDTO.class)\n    @PostMapping(value = \"/data/fetch\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f5057c12-e7ce-4b03-acb3-90184c5fd15a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctFilter.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.beans;\n\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Getter\n@Setter\npublic class DuctFilter {\n    private String fieldName;\n    private DuctOperatorType ductOperatorType;\n    private Object values;\n    private String externalFieldDataType;\n    private DuctFilterCondition ductFilterCondition;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ee3a5f2-8e3e-4ab5-8b65-46d5a66e590a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":35,"endLine":71,"content":"ER = new ObjectMapper();\n\n    @Autowired\n    private HttpClientService httpClientService;\n    private final String DUCT_GENERIC_ENDPOINT = \"v1.0/duct\";\n    private final String DUCT_FETCH_DATA_ENDPOINT = \"/data\";\n    private final String SLASH = \"/\";\n\n    private final String OBJECTS = \"objects\";\n    private final String ATTRIBUTES = \"attributes\";\n    private final String OPTIONS_SET = \"optionset\";\n    private final String EXTRACT = \"/util/extractTask\";\n    private final String EXTRACT_WITH_JAR_DETAILS = \"/util/extractTask?includeJarDetails=true&parentId=%s\";\n    private final String CONNECTOR_CONFIG = \"/config/\";\n    private final String SYNC_DATA_FETCH_PATH = \"/query/sync\";\n\n    private final DuctClientConfig ductClientConfig;\n\n    public DuctFrameworkClientImpl() {\n        ductClientConfig = null;\n    }\n\n    public DuctFrameworkClientImpl(DuctClientConfig ductClientConfig) {\n        Assert.notNull(ductClientConfig, \"ductClientConfig cannot be null\");\n        this.ductClientConfig = ductClientConfig;\n    }\n\n    public DuctFrameworkClientImpl(DuctClientConfig ductClientConfig, HttpClientService httpClientService) {\n        Assert.notNull(ductClientConfig, \"ductClientConfig cannot be null\");\n        this.ductClientConfig = ductClientConfig;\n        this.httpClientService = httpClientService;\n    }\n\n    @Override\n    public DuctResponseDTO saveMapping(DuctRequestDTO ductRequestDTO) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.b","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"70ec6b64-6e8a-4f4d-9b98-ce85b4d4daff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":30,"endLine":58,"content":"om.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.mongo.builder.collection.CollectionMasterQuery;\nimport com.gainsight.mongo.builder.tenant.TenantMasterQuery;\nimport com.gainsight.mongo.builder.tenant.TenantMasterUpdate;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.platform.metadata.MetadataVersion;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.CollectionMasterService;\nimport com.gainsight.service.standard.objects.enums.StandardObjectType;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.web.client.HttpClientService;\nimport com.google.common.collect.Maps;\nimport com.google.gson.Gson;\nimport exception.SystemException;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.Cont","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac4bab86-ee81-4432-9b58-904a5d7789de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":455,"endLine":481,"content":"dFieldsAndCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n    List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n    List<String> headers = getHeaders(ductJobMapping, file);\n    List<String> clonedHeaders = new ArrayList<>(headers);\n\n    mappedFields.removeAll(clonedHeaders);\n    if (!mappedFields.isEmpty()) {\n      DuctUtils.populateAndInsertError(String.format(MAPPED_FIELDS_NOT_PRESENT_IN_CSV,\n              String.join(\", \", mappedFields)), ductJobMapping.getJobId());\n    }\n  }\n\n  private void validateHeadersFieldsAndMappings(DuctJobMapping ductJobMapping, File file) throws CaasException {\n    List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n    List<String> headers = getHeaders(ductJobMapping, file);\n    List<String> clonedHeaders = new ArrayList<>(headers);\n    clonedHeaders.removeAll(mappedFields);\n    if (!clonedHeaders.isEmpty()) {\n      DuctUtils.populateAndInsertError(CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n              String.join(\",\", clonedHeaders), ductJobMapping.getJobId());\n    }\n  }\n\n  private static List<String> getHeaders(DuctJobMapping ductJobMapping, File file) throws CaasException {\n    List<String> headers;\n    try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);) {\n      headers = csvReader.read()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3742b624-a6e2-46ca-8035-11fb516b9591","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/DuctMessageProcessor.java","startLine":81,"endLine":94,"content":"ssageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.DUCT_PROCESS_EXTRACT_TASK.getName());\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21aad38e-4658-43ae-99c3-aa0b4a04684b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":225,"endLine":252,"content":")))\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n            meta.put(ORIGINAL_DATA_TYPE, field.getType());\n            meta.put(GDM_FORMULA_COLUMN, field.getCalculated());\n            // No property which gives this value\n            meta.put(HIDDEN, false);\n            meta.put(HAS_LOOKUP, REFERENCE_KEYWORD.equalsIgnoreCase(field.getType()));\n\n            if (CollectionUtils.isNotEmpty(field.getPicklistValues())) {\n                List<Map> picklistOptions = new ArrayList<>();\n                Map<String, Object> picklistOption;\n                for (PickListValue picklistValue : field.getPicklistValues()) {\n                    picklistOption = new HashMap<>();\n                    picklistOption.put(LABEL, picklistValue.getLabel());\n                    picklistOption.put(VALUE, picklistValue.getValue());\n                    picklistOption.put(ACTIVE, picklistValue.getActive());\n                    picklistOption.put(DEFAULT_VALUE, picklistValue.getDefaultValue());\n                    picklistOptions.add(picklistOption);\n                }\n                fieldDefinition.put(OPTIONS, picklistOptions);\n            }\n            meta.put(UPDATEABLE, field.getUpdateable());\n            meta.put(READ_ONLY, !field.getUpdateable());\n            meta.put(CREATEABLE, field.getCreateable());\n            meta.put(GDM_FORMULA_COLUMN, field.getCalculated());\n            meta.put(NILLABLE, field.getNillable());\n            meta.put(DE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87009157-0e4a-41c1-9e97-a6b507c8ccd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectTenantConfigDAOImpl.java","startLine":69,"endLine":89,"content":"ia.where(\"objectName\").is(objectName));\n        query.addCriteria(Criteria.where(\"tenantId\").is(tenantId));\n        getMongoTemplate().remove(query, CaasObjectTenantConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasObjectTenantConfig caasObjectTenantConfig, String s) {\n        caasObjectTenantConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasObjectTenantConfig caasObjectTenantConfig, String s) {\n        caasObjectTenantConfig.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05d6b1cf-3914-4edc-817e-aff7ea2426a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":181,"endLine":219,"content":"PRIMARY_CONNECTION).is(true));\n    return GainsightCollectionUtils.nullSafeList(find(query)).isEmpty();\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findPrimaryConnectionsByConnectorType(ConnectorType connectorType){\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(\"properties.\" + UCConstants.GSIntegration.IS_PRIMARY_CONNECTION).is(true));\n    return GainsightCollectionUtils.nullSafeList(find(query));\n  }\n\n  @Override\n  public void hardDeleteConnectionByConnectionId(String connectionId){\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionId(connectionId);\n    remove(query);\n  }\n\n  @Override\n  public PNPConnectionsInfo findByName(String connectionName) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionName(connectionName);\n    return findOne(query);\n  }\n\n  @Override\n  public int hardDeleteByTenantId(String  tenantId) {\n    return remove(null);\n  }\n\n\n  @Override\n  public Set<String> findAllDistinctTenantsWithEnabledConnection(){\n    Set resultantSet = Sets.newHashSet();\n    resultantSet.addAll(getMongoTemplate().getCollection(\"connectionrepo\").distinct(\"tenantId\"));\n    return resultantSet;\n  }\n  @Override\n  public List<PNPConnectionsInfo> findAllConnectionForConnectionType(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66824a6f-3b80-4204-8131-81508a6165f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":194,"endLine":216,"content":"argetFieldName = baseCriteria.getFieldName();\n                    fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                    fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                } else {\n                    if (fieldSplitted.length == 2) {\n                        targetFieldName = fieldSplitted[1];\n                        String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldSplitted[0]).getMeta()\n                                .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(lookedUpObjectName);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(lookedUpObjectName);\n                    } else {\n                        targetFieldName = baseCriteria.getFieldName();\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                    }\n                }\n            }\n            FilterRule internalFilterRule = createFilterRule(baseCriteria, fieldNameGSDataTypeMap,\n                    fieldNameMetaMap, ignoreMetadataFieldNames, caasConnectorConfig, objectName, targetFieldName);\n            filterRules.add(internalFilterRule);\n        }\n        filterRule.setRules(filterRules);\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"53d426ea-a7e7-4233-bb98-57fb1da750e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/ObjectsCacheDaoImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\nimport com.gainsight.integration.bean.metadata.engine.ObjectsCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class ObjectsCacheDaoImpl extends AbstractEntityDaoImpl<ObjectsCache> implements ObjectsCacheDao {\n    @Autowired\n    public ObjectsCacheDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, ObjectsCache.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(ObjectsCache objectsCache, String s) {\n        objectsCache.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(ObjectsCache objectsCache, String s) {\n        objectsCache.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public ObjectsCache getObjectsByConnectionId(String connectionId) {\n        Query query = Query.query(Criteria.where(MetadataCac","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"573fc194-e801-4856-9adf-c95d1eb0cd32","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.processor;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.MapperFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelFactory;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelService;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springfra","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8b48134-c543-47a5-afc5-0ae77c67cb74","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightAhaFetchProcessorImpl.java","startLine":32,"endLine":42,"content":"m(GainsightAhaEntityEnum.values())\n                .map(gainsightAhaEntityEnum -> {\n                    ObjectDefinition objectDefinition = new ObjectDefinition();\n                    objectDefinition.setLabel(gainsightAhaEntityEnum.getLabel());\n                    objectDefinition.setObjectId(gainsightAhaEntityEnum.getId());\n                    objectDefinition.setObjectName(gainsightAhaEntityEnum.getName());\n                    return objectDefinition;\n                }).collect(Collectors.toList());\n        return objectDefinitions;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"222bc255-167c-4e18-8578-593647298f74","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":361,"endLine":380,"content":"successfulFiles = new ArrayList<>();\n        List<File> failedFiles = new ArrayList<>();\n\n        for (File splitFile : splitFiles) {\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            try {\n                result = gainsightDatabricksChannelService.loadBulkData(DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()),\n                        pnpConnectionsInfo, splitFile, objectLevelOperation.getKey(), ductJobMapping.getColumnMappings(),\n                        quoteChar, escapeChar, seperatorChar, colNameToDataType);\n                externalSystemResponse.putAll(result);\n                ductStatusSet.add(DuctStatus.COMPLETED);\n                totalRecords = totalRecords + (Long) result.getOrDefault(UCConstants.TOTAL_RECORDS, 0l);\n                recordsAffected = recordsAffected + (Long) result.getOrDefault(UCConstants.RECORDS_AFFECTED, 0l);\n                successfulFiles.add(splitFile);\n            } catch (Exception e) {\n                Long failedRecordCountInBatch = UCFileUtility.getRecordCount(splitFile);\n                log.info(\"Batch failed. Total records in batch: {}\", failedRecordCountInBatch);\n                if (failedRecordCountInBatch > 0) {\n                    totalRecords = totalRecords + failedR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8cd357c5-fcbf-418e-83a1-63acdd608e4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":186,"endLine":212,"content":"\n                for (Map<String, Object> attribute : attributes) {\n                    Map<String, Object> copiedAttributeMap = new HashMap<>();\n                    for (Map.Entry attributeEntry : attribute.entrySet()) {\n                        copiedAttributeMap.put((String) attributeEntry.getKey(), attributeEntry.getValue());\n                    }\n                    copiedAttributesList.add(copiedAttributeMap);\n                }\n                copiedExtractedData.put(\"Attributes\", copiedAttributesList);\n            } else {\n                copiedExtractedData.put((String) entry.getKey(), entry.getValue());\n            }\n        }\n        return copiedExtractedData;\n    }\n\n    @Override\n    public Map getObjectAttributes(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Map<String, ObjectDefinition> baseAttributes = new HashMap<>();\n        baseAttributes.put(ductJobMapping.getResourceName(), getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo, false)\n                .get(ductJobMapping.getResourceName())\n        );\n        ductJobMapping.getProperties().putIfAbsent(UCConstants.GSIntegration.BASE_OBJECT_PLURAL_NAME, baseAttributes.get(ductJobMapping.getResourceName()).getLabelPlural());\n\n        Map<String, String> relationshipNameToObjectNameMap = createRelationshipNameToObjectNameMap(ductJobMapping, baseAttributes);\n        Set<String> relationshipFieldsAlreadyAdded = new HashSet<>();\n        String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8aee73dd-ba34-444f-9bfc-4aa11d1b9c2b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":133,"endLine":160,"content":"rConfigService.getConnectorConfig(any(ConnectorType.class))).thenAnswer((Answer<CaasConnectorConfig>) invocation -> createConnectorConfig(invocation.getArgument(0)));\n\n            hubspotBulkWriteBackValidationService.validateHubspotWriteBackPayload(createDuctJobMapping(true, objectLevelOperation, new ArrayList<>(Arrays.asList(\"CONTACT\")), false));\n        } catch (CaasException ex) {\n            passed = false;\n            caex = ex;\n        } catch (Exception c) {\n            passed = true;\n        } finally {\n            assertFalse(\"Caas Exception did not occur which is not expected\", passed);\n            assertEquals(DuctErrorConstants.INVALID_MAPPINGS, caex.getGsExternalSystemErrorMapping().getMessage());\n        }\n    }\n\n    @Test\n    public void test_validateS3Info_failed() {\n        boolean passed;\n        CaasException caex = null;\n        Map<String, ObjectDefinition> objectDefinition = null;\n        Map<String, String> objectLevelOperation = new HashMap<>();\n        objectLevelOperation.put(\"CONTACT\", \"UPDATE\");\n        DuctJobMapping ductJobMapping = createDuctJobMapping(true, objectLevelOperation, new ArrayList<>(Arrays.asList(\"CONTACT\")), true);\n        for (int i = 0; i < 5; i++) {\n            passed = true;\n            try {\n                objectDefinition = mockAttributesHubspotContact();\n                when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(createConnectionInfo());\n                when(caasMetadataFactory.getService(ConnectorType.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"419ca4d7-b5b3-4e34-9d11-b322a4b6dd70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":129,"endLine":150,"content":"dValue(String.valueOf(beanPropertyTracker.getOldValue()));\n                        auditDetails.setNewValue(String.valueOf(beanPropertyTracker.getNewValue()));\n                    }\n                    return auditDetails;\n                }).collect(Collectors.toList());\n        DuctJobMapping ductJobMapping = (DuctJobMapping) unifiedConnectorRequest.getRequestObject();\n        auditData.setAuditDetailsList(auditDetailsList);\n        auditRecord.setEventName(UCConstants.UPDATE_JOB + ductJobMapping.getJobName());\n    }\n\n    private static void generateConnectionAuditLogs(UnifiedConnectorRequest unifiedConnectorRequest,\n                                                    List<BeanPropertyTracker> propertyTrackerLists, AuditRecord auditRecord, AuditData auditData) {\n        List<AuditDetails> auditDetailsList;\n        auditDetailsList =\n                propertyTrackerLists.stream().filter(beanPropertyTracker -> Objects.nonNull(beanPropertyTracker)).map(beanPropertyTracker -> {\n                    AuditDetails auditDetails = new AuditDetails();\n\n                    if (connectionAttributeTypeMap.keySet().contains(beanPropertyTracker.getPropertyName())) {\n                        auditDetails.setAttributeType(connectionAttributeTypeMap.get(beanPropertyTracker.getPropertyName()));\n                        auditDetails.setOperationType(AuditOperationType.UPDATE);\n                        if (AttributeAuditType.KEYS\n                                .equals(connectionAttributeTypeMap.get(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab75c99f-dbe2-44de-adbb-2a8dec7a3f17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/PostgresConnectionDetailsEncryptor.java","startLine":20,"endLine":25,"content":"il.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").toString()).getValue());\n            postgresConnectionDetail.setSslEnabled(true);\n            postgresConnectionDetail.setType(type);\n            return postgresConnectionDetail;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2f5d423a-e6fe-4fd6-bb49-32145ef166e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":137,"endLine":155,"content":"etadataConfig(pnpConnectionsInfo.getConnectionType());\n            ObjectDefinition objectDefinition = getObjectAttributes(pnpConnectionsInfo, ductJobMapping);\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            Map<String, String> queryparam = new HashMap<>();\n            JsonNode jsonNode;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails.isQueryParam())\n                    query","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b3940fa4-76fe-4a85-b5da-d3b4a18e96c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":93,"endLine":115,"content":"\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n    }\n\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isF","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c6846163-310e-4fba-9cc6-edfb6d0656e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":842,"endLine":860,"content":"PropertyList, EventStatusEnum.SUCCESS);\n        ductEventService.publishConnectionEvent(pnpConnectionsInfo, \"UPDATE\");\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo, String request) throws CaasException {\n        Map<String, Object> additionalState = com.google.common.collect.Maps.newHashMap();\n        additionalState.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String authorizationUrl = null;\n        boolean nativeEnabled = DuctUtils.checkIfIpaasAndFTEnabled(pnpConnectionsInfo);\n        if (!nativeEnabled) {\n            additionalState.put(UCConstants.GSIntegration.IS_IPAAS_CONNECTION, true);\n            additionalState.put(UCConstants.GSIntegration.MDA_AREA, AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()), request, pnpConnectionsInfo, additionalState);\n        } else if (SFDC.equals(pnpConnectionsInfo.getConnectionType())) {\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.SFDC, request, null, additionalState,\n                    (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL),\n                    SalesforceOrgType.forValue((String) pnpConnectionsInfo.getProperties().get(UCConstants","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a254f716-5010-4c5d-89be-dc09e379adfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":114,"endLine":134,"content":"CaasException {\n        return ConnectorDataSourceService.super.fetchSynchronziedData(ductJobMapping, objectDefinition, maxPageSize);\n    }\n\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEm","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d93d24b4-ef1a-4587-a39f-7fb4e315b030","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":326,"endLine":354,"content":"e = null;\n        try {\n            file = File.createTempFile(\n                    RequestContextProvider.getTenantId() + \"_\" + UUID.randomUUID(), UCConstants.CSV);\n            inputCSVFile.transferTo(file);\n        } catch (IOException ex) {\n            log.error(\"Exception while converting to MultipartFile. {}\", ex);\n        }\n        return file;\n    }\n\n    public static Object getMetadataConfigfromCache(RedisCacheUtility redisCacheUtility, String connectorType) {\n        Object value = redisCacheUtility.getValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType);\n        if (value != null)\n            return value;\n        return null;\n    }\n\n    public static Map<String, Object> getFlattenedConnectionInfo(PNPConnectionsInfo pnpConnectionsInfo) throws com.gainsight.fasterxml.jackson.core.JsonProcessingException {\n        Map<String, Object> connectionInfoAsMap = MAPPER.convertValue(pnpConnectionsInfo, new TypeReference<Map<String, Object>>() {\n        });\n        processTokenDetailIfPresent(pnpConnectionsInfo, connectionInfoAsMap);\n        processOAuthSecretDetailIfPresent(connectionInfoAsMap);\n        Map<String, Object> flattenConnectionInfo = JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(connectionInfoAsMap));\n        return flattenConnectionInfo;\n    }\n\n    public static Map<String, Object> getFlattenedConnectionInfo(OAuthDetail oAuthDetailnpConnectionsInfo) throws com.gainsight.fasterxml.jackson.core.JsonProcessingException {\n        Map<String, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47813cf9-71c3-4e02-877c-7aa01a201ee9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":172,"endLine":195,"content":"ng(error -> {\n                            if (dataExtractionRequest.getIgnorableErrorMessages().contains(error.get(\"message\").asText())) {\n                                ignoreError.set(true);\n                            }\n                        });\n                    } catch (Exception ex) {\n                        try {\n                            Document doc = UCXMLUtility.convertStringToXMLDocument(respMsg);\n                            String providerMessage = UCXMLUtility.getElementValueById(doc, \"providerMessage\");\n                            if (StringUtils.isNotEmpty(providerMessage)\n                                    && providerMessage.equalsIgnoreCase(\"Number of allowed incremental export API requests per minute exceeded\")) {\n                                secondsToWaitForRetry = 125;\n                            }\n                            OBJECT_MAPPER.readTree(providerMessage).get(\"errors\").iterator().forEachRemaining(error -> {\n                                if (dataExtractionRequest.getIgnorableErrorMessages().contains(error.get(\"message\").asText())) {\n                                    ignoreError.set(true);\n                                }\n                            });\n                        } catch (Exception e1) {\n                            LOGGER.error(\"Could not find provider message on failure \", e1);\n                        }\n                        LOGGER.error(\"Could not find provider message on failure \", ex);\n                    }\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f90f63c6-6ef2-48be-816b-3a627b4905bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":130,"endLine":149,"content":" oAuthV2TokenDetail.getClientId() != null ? oAuthV2TokenDetail.getClientId().getString() : null;\n                    String clientSecret = oAuthV2TokenDetail.getClientSecret() != null ? oAuthV2TokenDetail.getClientSecret().getString() : null;\n                    pnpConnectionInput.setProperties(CLIENT_ID, clientId);\n                    pnpConnectionInput.setProperties(CLIENT_SECRET, clientSecret);\n                    pnpConnectionInput.setProperties(SERVICE_PROVIDER_AUTHORIZATION_URI, oAuthV2TokenDetail.getServiceProviderAuthorizationURI());\n                    pnpConnectionInput.setProperties(SERVICE_PROVIDER_ACCESS_TOKEN_URI, oAuthV2TokenDetail.getServiceProviderAccessTokenURI());\n                    pnpConnectionInput.setProperties(PAYLOAD_CONTENT_TYPE, oAuthV2TokenDetail.getPayloadContentType());\n                    pnpConnectionInput.setProperties(SCOPE, oAuthV2TokenDetail.getScope());\n                    pnpConnectionInput.setProperties(ACCESS_TOKEN, CryptHandler.getInstance().decrypt(baseTokenDetail.getAccessToken()));\n                    pnpConnectionInput.setProperties(\"tokenType\", oAuthV2TokenDetail.getTokenType());\n                    break;\n            }\n        }\n        if (MapUtils.isNotEmpty(properties) && StringUtils.isNotBlank(GainsightUtils.valueOf(properties.get(URL)))) {\n            pnpConnectionInput.setProperties(URL, GainsightUtils.valueOf(properties.get(URL)));\n        }\n\n    }\n\n    private static void setDecryptedBaseTokenDetail(PNPConnectionInput pn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f07687bf-898d-41db-a78c-8e3ccd683ea1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountFieldMapping.java","startLine":1,"endLine":46,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n/**\n * User: santa\n * Date: 17/6/14\n * Time: 9:14 PM\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AccountFieldMapping implements Serializable {\n  private static final long serialVersionUID = -1L;\n\n  private Field source;\n  private Field target;\n\n  public Field getSource() {\n    return source;\n  }\n\n  public void setSource(Field source) {\n    this.source = source;\n  }\n\n  public Field getTarget() {\n    return target;\n  }\n\n  public void setTarget(Field target) {\n    this.target = target;\n  }\n\n  @Override\n  public String toString() {\n    return \"AccountFieldMapping{\" +\n        \"source=\" + source +\n        \", target=\" + target +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d4ac3cea-b0f0-47b8-b9cb-39bb322ab7f1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":61,"endLine":92,"content":"oolean isIpaas) {\n        return connectorType.equals(ConnectorType.ZUORAV2) && !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        Map<String, Object> objects = new HashMap<>();\n        if(DeploymentProperties.getDeploymentProperties().getBooleanValue(CUSTOM_OBJECT_ENABLE,false)) {\n            Zuorav2ChannelServiceImpl zuorav2ChannelService = new Zuorav2ChannelServiceImpl();\n            objects = zuorav2ChannelService.getZuoraCustomObjects(pnpConnectionsInfo);\n        }\n        List<Map<String, Object>> objectList = new ArrayList<>();\n        if(ObjectUtils.isNotEmpty(objects.get(\"types\"))) {\n            for (String object : (List<String>) objects.get(\"types\")) {\n                Map<String, Object> retMap = new HashMap<>();\n                retMap.put(OBJECT_ID, object);\n                retMap.put(OBJECT_NAME, object);\n                retMap.put(LABEL, object);\n                objectList.add(retMap);\n            }\n        }\n        return transformObjectList(objectList, pnpConnectionsInfo);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return  metadataDriver.getMetadataUsingEngine(pnpConnectionsInfo.getConnectionId(), objectName, true);\n    }\n\n\n\n    private List<Map<String, Object>> transformObjectList(List<Map<String, Object>> objec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e426e59-fbbc-4b4f-9dac-470e57ca6748","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":459,"endLine":475,"content":"yCount);\n                            accessToken = getAccessToken(pnpConnectionsInfo, true);\n                            result = msDynamicsDataService.loadSingleRecord(DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()), targetObject, ductJobMapping.getColumnMappings(),\n                                    headers, nextRecord, objectAttributes, accessToken, lookupProjectionToNavigationProperty, entityLogicalNameToPluralName);\n                            ++currentRetryCount;\n                        } else {\n                            log.error(\"Regenerated accessToken for {} times. Hence failing the request\", currentRetryCount);\n                            ductResponse.setTotalNumberOfRecords(--totalRecords);\n                            ductResponse.setSuccessRecords(successRecords);\n                            ductResponse.setFailedRecords(failedRecords);\n                            ductResponse.setExternalSuccessFileLocation(successFile.getName());\n                            ductResponse.setExternalErrorFileLocation(failureFile.getName());\n                            ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n                            ductResponse.setErrorMessage(AdapterErrorMessages.DYNAMICS_ACCESS_TOKEN_EXPIRED.getTranslatedMessage());\n\n                            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                    + FORWARD_","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5d2335a1-1e83-40cd-bec4-66f5592afc51","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/common/aha/AhaCaasCriteriaBuilder.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.common.aha;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * @author puneetsaluja\n * @created 27/03/23\n */\n@Slf4j\npublic class AhaCaasCriteriaBuilder {\n\n    public static FilterRule getFilterFuleFromCAASRule(Criteria baseCriteria, Map<String, Object> fieldNameDataTypeMap,\n                                                       Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        FilterRule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            FilterRule internalFilterRule ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fee7eb8a-8c70-47cc-a460-a52cf0d32bcd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectTenantConfig.java","startLine":1,"endLine":42,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_object_tenant_config\")\npublic class CaasObjectTenantConfig extends MongoBaseBean implements Serializable {\n\n  public static String CONNECTOR_TYPE_PROP = \"connectorType\";\n  @Indexed(background = true)\n  private ConnectorType connectorType;\n  private List<Map<String, Object>> addedObjects = Lists.newArrayList();\n  private Set<String> notSupportedObjects = new HashSet<>();\n  private Set<String> showOnlyIncludedObjects = new HashSet<String>();\n  private int order;\n  private String objectName;\n  private String connectionId;\n  private String tenantId;\n\n  public Set<String> getShowOnlyIncludedObjects() {\n    return showOnlyIncludedObjects;\n  }\n\n  public void setShowOnlyIncludedObjects(Set<String> showOnlyIncludedObjects) {\n    this.showOnlyIncludedObjects = showOnlyIncludedObjects;\n  }\n\n  public int getOrder() {\n    return order","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d78b5b2-6ad6-4e9a-b94c-811c5f12f7e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":380,"endLine":401,"content":"    tokenDetail.setClientId(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientId())));\n            tokenDetail.setClientSecret(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientSecret())));\n            return tokenDetail;\n        } catch (IOException e) {\n            throw new SystemException(e.getMessage(), e);\n        }\n    }\n\n    void addToLinkedCRMs(String crmId) {\n        TenantMasterQuery tenantMasterQuery = new TenantMasterQuery();\n        tenantMasterQuery.tenantId(RequestContextProvider.getTenantId());\n        Tenant tenantFromDB = tenantMasterDAO.findOne(tenantMasterQuery);\n        if (CollectionUtils.isEmpty(tenantFromDB.getLinkedCrmIdSet()) || !tenantFromDB.getLinkedCrmIdSet().contains(crmId)) {\n            tenantFromDB.addToLinkedCRMIdSet(crmId);\n            tenantMasterDAO.update(tenantMasterQuery, new TenantMasterUpdate(tenantFromDB));\n        }\n    }\n\n    private void setupCompanyAndCompanyPersonMapping(PNPConnectionsInfo pnpConnectionsInfo, String tenantDomain) {\n        Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n        if (StringUtils.isBlank((String) properties.get(UCConstants.GSIntegration.COMPANY_IDENTIFIER)) || StringUtils.isBlank((String) properties.get(UCConstants.GSIntegration.COMPANY_PERSON_IDENTIFIER))) {\n            String externalAccountIdFieldName = \"ExternalAccountId_\" + StringUtils.capitalize(StringUtils.lowerCase(StringUtils.remove(pnpConnectionsInfo.getCrmId(), \"","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d48d4f11-6459-4a25-ae39-072617638e0f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":181,"endLine":199,"content":"entCode(), CaasValidationCode.API_CONFIG_NOT_FOUND.getUserText(), objectName + \" API Config not found\");\n        Object objectTypeIdFromCache = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, pnpConnectionsInfo.getConnectionId());\n        if (objectTypeIdFromCache == null) {\n            getObjects(pnpConnectionsInfo, null);\n            objectTypeIdFromCache = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, objectName, pnpConnectionsInfo.getConnectionId());\n        }\n        if (objectTypeIdFromCache != null)\n            return String.format(connectorApiConfig.getMetadataApi(), objectTypeIdFromCache.toString());\n        else\n            DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n        return null;\n    }\n\n    private void addAssociationAndIdFields(GainsightHubspotSchema gainsightHubspotSchemaBean, List<CaasObjectApiConfig> connectorConfigs) {\n        List<GainsightHubspotFieldDescriptionV3> hubspotFieldDescriptionV3s = gainsightHubspotSchemaBean.getProperties();\n        if (gainsightHubspotSchemaBean.getAssociations() != null) {\n            List<Map<String, Object>> associations = gainsightHubspotSchemaBean.getAssociations().stream()\n                    .filter(association -> association.containsKey(FROM_OBJECT_TYPE_ID) && association.get(FROM_OBJECT_TYPE_ID)\n               ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89574b5b-68fb-4fd0-be4a-1b3974c1f146","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/CheckerMessageInfo.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class CheckerMessageInfo implements MessageInfo<DuctJobMapping> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.DUCT_PROCESS_EXTRACT_TASK;\n    private static final MessagePayloadTransformer<DuctJobMapping> transformer = new DefaultMessagePayloadTransformer<>(DuctJobMapping.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<DuctJobMapping> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"018e547e-bc55-4bc6-ac99-f279d0fa45a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":153,"endLine":179,"content":"e());\n      fieldInfo.setDisplayName(fieldDefinition.getLabel());\n      fieldInfo.setDataType(DataType.getDataType(fieldDefinition.getDataType()));\n      if (fieldDefinition.getDataType().equals(\"DATETIME\") || fieldDefinition.getDataType().equals(\"TIMESTAMP\")\n          || fieldDefinition.getDataType().equals(\"DATE\")) {\n        Map<String, Object> fieldProps = fieldDefinition.getMeta().getProperties();\n        DateTimeProperties dateTimeProperties = new DateTimeProperties(\n            (String) fieldProps.get(FORMAT),\n            timeZone);\n        fieldInfo.setDateTimeProperties(dateTimeProperties);\n      }\n      fieldInfos.add(fieldInfo);\n    }\n    String filter;\n    String query;\n    List<String> fieldJsonPathList = new ArrayList<>();\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (gsFieldsByNamesMap.containsKey(fieldInfo.getName()) && (null != gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta())\n          && StringUtils.isNotEmpty(gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta().getOriginalDataType())\n          && DuctConstants.BINARY.equalsIgnoreCase(gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta().getOriginalDataType())) {\n        fieldJsonPathList.add(\"TO_NVARCHAR(\" + OPEN_QUOTE + fieldInfo.getName() + CLOSE_QUOTE + \")\" + \" AS \" + fieldInfo.getName());\n      } else {\n        fieldJsonPathList.add(OPEN_QUOTE + fieldInfo.getJsonPath() + CLOSE_QUOTE + \" AS \" + fieldInfo.getJsonPath());\n      }\n    }\n\n    int limit = Math.min(ductJobMapping.getLimit(), max","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"038a4ef3-3f1b-4fdd-bf16-bda8ffc10db9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.TargetSystem;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Order(800)\n@Service\npublic class DatabricksDataValidationSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.DATABRICKS;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27aa0ba4-45e0-47eb-b952-864b47c2d874","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":283,"endLine":306,"content":"MORE_RECORDS_KEYWORD).asBoolean())\n            return ObjectUtils.isNotEmpty(paginationValueFromResponse) ? String.valueOf(Integer.parseInt(paginationValueFromResponse.toString()) + 1) : null;\n        return null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (((JsonNode) externalSystemResponse.get(DATA)).isNull()) {\n            return OBJECT_MAPPER.convertValue(externalSystemResponse.get(DATA), List.class).size();\n        }\n        return 0;\n    }\n\n    private void transformJsonObjectTypeFieldsFromResponse(ObjectDefinition objectDefinition, JsonNode data) {\n        Map<String, GSFieldMeta> fieldMetaMap = objectDefinition.getFields().stream().filter(field -> ObjectUtils.isNotEmpty(field.getMeta().getProperties())\n                        && ObjectUtils.isNotEmpty(field.getMeta().getProperties().get(\"isFetchAndTransformId\"))\n                        && Boolean.valueOf(field.getMeta().getProperties().get(\"isFetchAndTransformId\").toString()))\n                .collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getMeta));\n        for (String fieldName : fieldMetaMap.keySet()) {\n            for (JsonNode node : data) {\n                if (node.has(fieldName) && node.get(fieldName).has(\"id\")) {\n                    String id = node.get(fieldName).get(\"id\").asText();\n                    if (StringUtils.isNotEmpty(id)) {\n                        ((ObjectNode) node).put(fieldName, id);\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43cc80fc-7a8b-43ed-98fd-331fa3fddc26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1481,"endLine":1504,"content":"error(\"Error while getting Gainsight subscription\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"Error while getting Gainsight subscription\", e));\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n        return pnpConnectionInfo;\n    }\n\n    private void generateAccessKeyDetails(PNPConnectionsInfo connectionsInfoFromDB) {\n        GainsightPrecondition.assertFalse(isDuplicateSegmentAccessKey(GainsightUtils.encryptToCSV(connectionsInfoFromDB.getAccessKeyHashed())), CaasValidationCode.DUPLICATE_ACCESS_KEY);\n\n        AccessKeyInfo accessKeyInfo = new AccessKeyInfo();\n        accessKeyInfo.setTenantId(connectionsInfoFromDB.getTenantId());\n        accessKeyInfo.setAccessKeyEncrypted(connectionsInfoFromDB.getTokenDetail().getAccessSecret());\n        accessKeyInfo.setAccessKeyHashed(connectionsInfoFromDB.getAccessKeyHashed());\n        accessKeyInfo.setAccessType(AccessKeyType.SEGMENT_IO);\n        accessKeyInfo.setUniqueId(\"UC_\" + RequestContextProvider.getTenantId() + \"_\" + connectionsInfoFromDB.getConnectionId());\n        accessKeyInfo.setUcConnectionId(connectionsInfoFromDB.getConnectionId());\n        accessKeyDao.insert(accessKeyInfo);\n    }\n\n    private void updateRestApiOAuthConnectionInput(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        if (pnpConnectionsInfo.getConnectionType().equals(ConnectorType.REST_API)) {\n            if (Objects.equals(pnpConnectionsInfo.getProperties().get(AUTH_TYPE), AuthType","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad5a228d-3cf1-43d0-b356-6e575e66c06f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":161,"endLine":175,"content":"\n            return DuctConnectorCalloutUtil.authorizationUrl(pnpConnectionsInfo);//to do\n        } else if (AccountType.GONG_IO == accountType) {\n            CaasConnectorConfig connectionConfig = connectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            return gainsightAccountService.authorizationURL(accountType, hostUrl) + consentStr + \"&state=\" + getState(pnpConnectionsInfo.getConnectionId(), additionalState)\n                    + \"&scope=\" + connectionConfig.getProperties().get(AUTH_SCOPE);\n        } else if (AccountType.DYNAMICS == accountType) {\n            LOGGER.info(\"Revised scopes for the tenant: {} are {}\", pnpConnectionsInfo.getTenantId(),\n                    DeploymentProperties.getDeploymentProperties().getValue(MS_DYNAMICS_SCOPES, MS_DYNAMICS_DEFAULT_SCOPES));\n            return gainsightAccountService.authorizationURL(accountType, hostUrl) + consentStr\n                    + SCOPE + DeploymentProperties.getDeploymentProperties().getValue(MS_DYNAMICS_SCOPES, MS_DYNAMICS_DEFAULT_SCOPES)\n                    + STATE + getState(pnpConnectionsInfo.getConnectionId(), additionalState);\n        } else if (AccountType.BIGQUERY == accountType) {\n            LOGGER.info(\"Bigquery Autorization url fetch\");\n            return gainsightAccountService.getAuthorizationURL(accountType, hostUrl, CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties()).get(\"oauthClientId\")), CryptHandler.getInstance().decrypt((byte[])","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33fb92c3-9551-4f8a-811a-e902c9d14ed0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":764,"endLine":781,"content":"e.UNABLE_TO_AUTHORISE.getUserText(), HttpStatus.SC_BAD_REQUEST);\n                pnpConnectionsInfo\n                        .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(properties.get(ACCESS_TOKEN)\n                        ).trim(), pnpConnectionsInfo.getConnectionType()));\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                if (properties.containsKey(DuctCommonConstants.SUBDOMAIN)) {\n                    pnpConnectionsInfo.getProperties().put(DuctCommonConstants.SUBDOMAIN, properties.get(DuctCommonConstants.SUBDOMAIN));\n                }\n                break;\n            case AHA:\n                Map<String, Object> ahaConnectionProperties = pnpConnectionsInfo.getProperties();\n                AhaChannelService ahachannelservice = new AhaChannelService(ahaConnectionProperties.get(ACCESS_TOKEN).toString(), ahaConnectionProperties.get(\"subdomain\").toString());\n                assertTrue(ahachannelservice.authenticateAccessToken(), CaasValidationCode.INVALID_INPUT, CaasValidationCode.UNABLE_TO_AUTHORISE.getUserText(), HttpStatus.SC_BAD_REQUEST);\n                pnpConnectionsInfo\n                        .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(ahaConnectionProperties.get(ACCESS_TOKEN)\n                        ).trim(), pnpConnectionsInfo.getConnectionType()));\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                if (ahaConnectionPropertie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1981672e-9bd0-4083-92db-304442b667b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":253,"endLine":274,"content":"  validateMappings(ductRequestDTO);\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            objectDefinitionMap = service.getObjectAttributes(ductRequestDTO.getResourceName(),\n                    pnpConnectionsInfo);\n\n            ductValidationService.validateRequest(ductRequestDTO, pnpConnectionsInfo, objectDefinitionMap);\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        } else {\n            validateMappings(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.GAINSIGHT);\n        }\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.GAINSIGHT) {\n            return loadToGainsight(ductJobMapping, ductRequestDTO);\n        } else {\n            ConnectorDataSourceService connectorDataSourceService = connectorDataSourceFactory.getService(ductJobMapping.getConnectorType(), false);\n            DuctResponse ductResponse = connectorDataSourceService.updateData(ductJobMapping, ductRequestDTO.getIdentifiers(), pnpConnectionsInfo,\n               ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3e7a1c20-909b-4948-b7b0-e5a7cc3463ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":74,"endLine":110,"content":"pResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static HttpResponse get(String uri, Map<String, Object> headers, Map<String, Object> queryParams)\n          throws Exception {\n    return new HttpUrlConnectionUtils().get(uri, headers, queryParams);\n  }\n\n  public static <T> BionicRuleHttpResponseWrapper<T> post(String uri, Map<String, String> headers, String payload,\n                                                          Class<T> clazz) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpPost httpPost = new HttpPost(uri);\n\n      addHeaders(httpPost, headers);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpPost.setEntity(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpPost);\n      LOGGER.info(\"Post call to uri: {} is complete.\", uri);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static <T> BionicRuleHttpResponseWrapper<T> patch(String uri, Map<String, String> headers, String payload,\n                                                           Class<T> clazz) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpCl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c35742cd-83fe-4e23-99f5-87b669f7de64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":130,"endLine":139,"content":"th) != null && !je.getAsJsonObject().get(path).isJsonNull()) {\n                    jsonArray.add(je.getAsJsonObject().get(path));\n                }\n            }\n            return jsonArray.toString();\n        }\n        return jsonElement.getAsString();\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7198e385-e91f-467c-8f8c-0852c889f4b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":135,"endLine":171,"content":" }\n            } catch (Exception e) {\n                log.error(\"Error in input stream \", e);\n            }\n        }\n        return responseMap;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean responseBean = new QueryAPIResponseBean();\n        String connId = ductResponse.getConnectionId();\n        PNPConnectionsInfo connectionsInfo = pnpConnectionInfoDao.findByConnectionId(connId);\n        CaasMetadataService metadataService = caasMetadataFactory.getService(connectionsInfo.getConnectionType(), connectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> metaMap;\n        try {\n            metaMap = metadataService.getObjectAttributes(ductResponse.getExternalResourceName(), connectionsInfo);\n        } catch (CaasException ce) {\n            throw new SystemException(ce.getMessage(), ce);\n        }\n        ObjectDefinition resource = metaMap.get(ductResponse.getExternalResourceName());\n        EcosystemResponse ecosystemResponse = EcosystemHelper.transformExternalResponse(resource, ductRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bbf1b35-88ed-4a81-943a-ce2dd4addad3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":99,"endLine":123,"content":"                          .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(sourceFieldNameList[0])).findFirst();\n                        if (!fieldDefinitionOptional.isPresent()) {\n                            notAvailableFields.add(filterField);\n                        }\n                    } else {\n                        notAvailableFields.add(filterField);\n                    }\n                }\n            }\n        }\n\n        if (!notAvailableFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n\n        if (!ductRequestDTO.isIncludeLookups()) {\n            ductRequestDTO.getFields().removeAll(lookupFields);\n        }\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldDBNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getDbName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87378efd-3328-4347-b5b2-44cb20e7e77c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":887,"endLine":912,"content":"  private static List<String> getHeaders(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> headers;\n        try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);) {\n            headers = csvReader.read();\n            return headers;\n        } catch (Exception e) {\n            log.error(\"Error in getHeaders\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private void validateHeadersFieldsAndMappings(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n        clonedHeaders.removeAll(mappedFields);\n        if (!clonedHeaders.isEmpty()) {\n            DuctUtils.populateAndInsertError(DuctErrorConstants.CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n                    String.join(\",\", clonedHeaders), ductJobMapping.getJobId());\n        }\n    }\n\n    private void writeToFile(File file, String[] data) {\n        try (CSVWriter csvWriter = new CSVWriter(new FileWriter(file, true))) {\n            csvWriter.writeNext(data);\n        } catch (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2de348d-73db-4f2d-94f0-c041d18e763c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":626,"endLine":647,"content":"nue) {\n                    if (retryCounter >= maxNoOfRetries) {\n                        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping(\n                                CaasValidationCode.MAX_NUMBER_OF_RETRIES_EXHAUSTED.getGsEventCode(),\n                                CaasValidationCode.MAX_NUMBER_OF_RETRIES_EXHAUSTED.getUserText(), e);\n                        throw new CaasException(gsExternalSystemErrorMapping);\n                    }\n                    retryCounter++;\n                    shouldContinue = true;\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Headers received are {}\", httpResponse.getResponseHeaders());\n                AtomicBoolean ignoreError = new AtomicBoolean(false);\n                String respMsg = httpResponse.getRespMsg();\n                JsonNode jsonNode = OBJECT_MAPPER.readTree(respMsg);\n\n                LOGGER.error(\"Error occurred while trying to extract data : {} , retrying for {}\", respMsg, retryCounter, e);\n                try {\n                    JsonNode providerMessage = jsonNode.get(\"providerMessage\");\n                    GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsEventCode(),\n                            CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(), providerMessage.asText());\n                    throw new CaasException(gsExter","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"defef87c-61b3-4362-99aa-570dcc5dfe03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":157,"endLine":175,"content":"alid.getRight(), null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n  }\n\n  @Override\n  public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public PNPConnectionsInfo revokeAuthorization() {\n    return null;\n  }\n\n  @Override\n  public PNPConnectionsInfo deleteConnection() {\n    return null;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45c6f903-fb82-4d35-9bc4-3330946b22e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.duct.beans.config.CaasObjectTenantConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectTenantConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.engine.converter.OMDConverterFactory;\nimport com.gainsight.duct.metadata.engine.service.MetadataCacheDao;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.Authorization","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69066baa-b520-448e-b65d-bc938a445001","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":522,"endLine":548,"content":") {\n            mergedFile = new File(GainsightUtils.getRandomUUID() + \"_success.csv\");\n            FileMerger.mergeFiles(successfulFiles, mergedFile);\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                    + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n            ductResponse.setExternalSuccessFileLocation(mergedFile.getName());\n          }\n          if ((failedFiles.size() == 1)) {\n            ductResponse.setExternalErrorFileLocation(failedFiles.get(0).getName());\n          } else if (failedFiles.size() > 0) {\n            mergedFile = new File(GainsightUtils.getRandomUUID() + \"_failure.csv\");\n            FileMerger.mergeFiles(failedFiles, mergedFile);\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                    + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n            ductResponse.setExternalErrorFileLocation(mergedFile.getName());\n            failedRecords.set(failedRecords.get() + UCFileUtility.getRecordCount(mergedFile));\n            totalRecords += failedRecords.get();\n          }\n          break;\n        default:\n          break;\n      }\n    } catch (Exception e) {\n      log.error(\"[SAP DATASPHERE] Error while populating file locations\", e);\n    } finally {\n      for (File file : successfulFiles) {\n        FileUt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"336bfd12-d19d-49cb-bc98-0217f3b8284e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":255,"endLine":273,"content":"orField = null;\n        List<Object> pipelineValues = gainsightHubspotFetchProcessor.getPipeLineValues(pnpConnectionsInfo, objectLabel);\n        for (GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription : gainsightHubspotFieldDescriptions) {\n            fieldDefinition = new HashMap();\n            Map<String, Object> meta = new HashMap<>();\n            Map<String, Object> metaProperties = new HashMap<>();\n            fieldDefinition.put(FIELD_NAME, gainsightHubspotFieldDescription.getName());\n            fieldDefinition.put(DB_NAME, gainsightHubspotFieldDescription.getCanonicalName());\n            fieldDefinition.put(LABEL, gainsightHubspotFieldDescription.getLabel());\n\n            if (PIPELINE_ALLOWED_OBJECT_LIST.contains(objectLabel) &&\n                    SPECIAL_HANDLING_PICKLIST_ATRRIBUTES.contains(gainsightHubspotFieldDescription.getName()) && CollectionUtils.isNotEmpty(pipelineValues)) {\n                handleSpecialHandlingForPickList(fieldDefinition, pipelineValues);\n            }\n\n            //set datatype\n            if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getFieldType()))) {\n                dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getFieldType())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"68e10b58-22eb-42d9-82ce-acdcc474c63f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":82,"endLine":104,"content":"ectDefinition> objectDefinitionMap = ductService.getObjectAttributes(object, connectionId);\n        Set<String> fieldsFromMetadataResponse = objectDefinitionMap.get(object).getFields().stream()\n                .map(i-> i.getFieldName()).collect(Collectors.toSet());\n\n        List<EnhancedGSFieldDefinition> enhancedGSFieldDefinitions = transformMapToDefaultEnhancedGSFieldDefinition(fieldInfos, saveType);\n        for(EnhancedGSFieldDefinition enhancedGSFieldDefinition : enhancedGSFieldDefinitions) {\n            if (fieldsFromMetadataResponse.contains(enhancedGSFieldDefinition.getFieldName())){\n                throw new CaasException(\"This enhanced field is already present, hence can't be created.\", CaasValidationCode.FIELD_ALREADY_PRESENT);\n            }else{\n                enhancedGSFieldDefinition.setFieldSaveType(saveType);\n            }\n        }\n        caasObjectAttributesTenantConfig.getDefaultObjectAttributes().addAll(enhancedGSFieldDefinitions);\n        caasObjectAttributesTenantConfigDAO.save(caasObjectAttributesTenantConfig);\n    }\n\n    @Override\n    public void editTheEnhancedMetaData(String connectionId, String object, List<Map<String, Object>> fieldInfos,\n                                        FieldSaveType saveType) throws CaasException {\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesTenantConfigs =\n                caasObjectAttributesTena","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84b9099c-8602-490f-84b0-c4613db39580","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasFeatureToggleUtility.java","startLine":45,"endLine":68,"content":"TAILS__LIST.get(tenantRegion)).containsKey(\"userToken\"))) {\n        }\n        String propertyValue = DeploymentProperties.getDeploymentProperties().getValue(tenantRegion.concat(\".\").concat(CE_USER_TOKEN_CONFIG_KEY));\n        String userToken = (null != propertyValue) ? propertyValue : null;\n        Map<String, String> map = CE_DETAILS__LIST.get(tenantRegion) == null ? Maps.newHashMap() : CE_DETAILS__LIST.get(tenantRegion);\n        map.put(\"userToken\", UCCommonUtility.decryptKey(userToken));\n        CE_DETAILS__LIST.put(tenantRegion, map);\n        return (CE_DETAILS__LIST.get(tenantRegion)).get(\"userToken\").toString();\n    }\n\n    public static String getOrgToken() {\n        String tenantRegion = getTenantRegion().getValue();\n        if (((CE_DETAILS__LIST.get(tenantRegion)) != null && (CE_DETAILS__LIST.get(tenantRegion)).containsKey(\"orgToken\"))) {\n            return (CE_DETAILS__LIST.get(tenantRegion)).get(\"orgToken\").toString();\n        }\n        String propertyValue = DeploymentProperties.getDeploymentProperties().getValue(tenantRegion.concat(\".\").concat(CE_ORG_TOKEN_CONFIG_KEY));\n        String orgToken = (null != propertyValue) ? propertyValue : null;\n        Map<String, String> map = CE_DETAILS__LIST.get(tenantRegion) == null ? Maps.newHashMap() : CE_DETAILS__LIST.get(tenantRegion);\n        map.put(\"orgToken\", decryptKey(orgToken));\n        CE_DETAILS__LIST.put(tenantRegion, map);\n        return (CE_DETAILS__LIST.get(tenantRegion)).get(\"orgToken\").toString();\n    }\n\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9924a99-58b4-48d1-8307-cb66938dff15","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":222,"endLine":238,"content":"s CaasException {\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        Map<String, Object> externalSystemResponseForRecordings = new HashMap<>();\n        Map<String, Object> externalSystemResponseForMeetings = new HashMap<>();\n        String url = String.format(dataApi, recordId);\n\n        try {\n            externalSystemResponse = fetchDataFromExternalSystem(url, tokenDetails);\n            constructZoomDownloadUrl(externalSystemResponse);\n            if (RECORDINGS_KEYWORD.equalsIgnoreCase(ductJobMapping.getResourceName())) {\n                List<Map<String, Object>> recordingList = GainsightCollectionUtils.nullSafeList((List<Map<String, Object>>) externalSystemResponse.get(RECORDINGS_FILES_KEYWORD));\n                Map<String, Object> finalExternalSystemResponse = externalSystemResponse;\n                recordingList.stream().forEach(recording -> recording.put(RECORDING_PLAY_PASSCODE, finalExternalSystemResponse.get(RECORDING_PLAY_PASSCODE)));\n                externalSystemResponseForRecordings.put(RECORDINGS_KEYWORD, recordingList);\n                return DuctResponse.builder().externalSystemResponse(externalSystemResponseForRecordings).nextPageToken(null).\n                        tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(recordingList.size())\n                        .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9636937-68c1-47b7-9e2f-95e34a792617","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":224,"endLine":242,"content":"alSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    private Object prepareErrorResponseForException(GsExternalSystemErrorMapping gsExternalSystemErrorMapping) {\n        GsExternalSystemErrorMappingDTO response = new GsExternalSystemErrorMappingDTO();\n        response.setExternalSystemErrorMessage(gsExternalSystemErrorMapping.getExternalSystemErrorMessage());\n        response.setExternalSystemErrorCode(gsExternalSystemErrorMapping.getExternalSystemErrorCode());\n        response.setGsErrorCode(gsExternalSystemErrorMapping.getGsErrorCode());\n        response.setGsErrorMessage(gsExternalSystemErrorMapping.getGsErrorMessage());\n        response.setConnectorType(gsExternalSystemErrorMapping.getConnectorType());\n        response.setMessage(gsExternalSystemErrorMapping.getMessage());\n        return response;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50613886-b5a5-4138-aab2-71e7f5deaefb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":32,"endLine":61,"content":"c static final String UNDERSCORE = \"_\";\n    private static final List<DataType> NON_QUOTE_DATA_TYPES = new ArrayList<>(Arrays.asList(DataType.NUMBER, DataType.BOOLEAN, DataType.DATETIME, DataType.DATE));\n    private static final Pattern SFDC_SPECIAL_CHARACTER_PATTERN_LIKE_OPERATOR = Pattern.compile(\"([\\'\\\"_%])\");\n\n    public static String createQuery(FilterRule filterRule) throws UnsupportedEncodingException {\n        String criteriaString = getFilterString(filterRule);\n        log.info(\"Final where clause created : {}\", criteriaString);\n        return criteriaString;\n    }\n\n    private static String getFilterString(FilterRule filterRule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(createFilterQueryFromEachRule(filterRule));\n        return stringBuilder.toString();\n    }\n\n    private static String createFilterQueryFromEachRule(FilterRule filterRule) throws UnsupportedEncodingException {\n        List<String> whereClauses = Lists.newArrayList();\n        for (FilterRule rule : filterRule.getRules()) {\n            whereClauses.addAll(buildRule(rule));\n        }\n        String joiner =\n                filterRule.getCondition() != null\n                        ? filterRule.getCondition().getFilterCondition() + SPACE\n                        : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses);\n    }\n\n\n    private static List<String> buildRule(FilterRule rule) throws UnsupportedEncodi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1eec474-053f-4a70-a9eb-baacb86175d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":67,"endLine":87,"content":"   response.put(PLAIN_TOKEN, plainToken);\n                    response.put(ENCRYPTED_TOKEN, encryptedToken);\n                    return response;\n                }\n                break;\n            case RECORDING_TRANSCRIPT_COMPLETED:\n                if(isValidZoomEvent(body, headers)) {\n                    Map<String, Object> recordingPayload =  DuctUtils.OBJECT_MAPPER.convertValue(eventPayload.get(OBJECT), Map.class);\n                    recordingPayload = recordingPayload.entrySet().stream().filter(entry -> ZOOM_RECORDING_EVENT_FIELDS.contains(entry.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n                    List<String> tenantIds =  fetchTenantDetails(eventPayload.get(ACCOUNT_ID).toString());\n                    Map<String, Object> finalRecordingPayload = recordingPayload;\n                    tenantIds.stream().forEach(tenantId -> {\n                        if(UCCommonUtility.initRequestContextSuccessfully(tenantId)) {\n                            log.info(\"Tenant Context Set Successfully for tenant {}, hence publishing Zoom event with payload : {}\", tenantId, finalRecordingPayload);\n                            EventUtils.publishEvent(WEBHOOK_EVENT_TOPIC_NAME, WEBHOOK_EVENT_NAME, WEBHOOK_EVENT_VERSION, finalRecordingPayload);\n                        } else {\n                            log.error(\"Error initializing context : {}\", tenantId);\n                        }\n                    });\n                    return body;\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45db0697-9bf6-4675-a738-4d1fd39144d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":96,"endLine":121,"content":"                            boolean isNormalizableInternalType) {\n\n        DataTypeMappings dataTypeMappingsForField;\n        Map<String, Object> fieldDefinition = new HashMap();\n        Map<String, Object> meta = new HashMap<>();\n\n        fieldDefinition.put(FIELD_NAME, fieldName);\n        fieldDefinition.put(DB_NAME, fieldName);\n        fieldDefinition.put(LABEL, fieldDisplayName);\n\n        meta.put(ORIGINAL_DATA_TYPE, originalDataType);\n        //No property to identify hidden field, hence marking accessible as true by default for all fetched fields\n        meta.put(ACCESSIBLE, true);\n\n        Map<String, Object> metaProperties = new HashMap<>();\n        //set datatype\n        if (StringUtils.isNotBlank(originalDataType)\n                && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(originalDataType))) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(originalDataType)).findFirst().get();\n            fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n\n            if (complexTypeMappings.containsKey(originalDataType))\n                metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(originalDataType).getValue());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            if (isNormalizableInternalType) {\n                meta.put(EXTERNALLY","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0bf2e9b5-3c1d-4618-9f55-92efc8c5bed1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":68,"endLine":99,"content":"uestDTO.getResourceName());\n        Set<String> fieldSet = objectDefinition.getFields().stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toSet());\n        Set<String> notAvailableFields = new HashSet<>();\n        for (String field : ductRequestDTO.getFields()) {\n            if (!fieldSet.contains(field)) {\n                notAvailableFields.add(field);\n            }\n        }\n\n        for (Map.Entry fields : GainsightCollectionUtils.nullSafeMap(ductRequestDTO.getData()).entrySet()) {\n            if (!fieldSet.contains(fields.getKey().toString())) {\n                notAvailableFields.add(fields.getKey().toString());\n            }\n        }\n\n        if (ductRequestDTO.getCriteria() != null) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                if (!fieldSet.contains(filterField)) {\n                    notAvailableFields.add(filterField);\n                }\n            }\n        }\n        if (CollectionUtils.isNotEmpty(notAvailableFields)) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n    }\n\n\n    private void validateFilterOperations(DuctRequestDTO ductR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b034808-6e7e-4455-b32f-0ca344e32020","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":351,"endLine":378,"content":"dexOf(SKIP_TOKEN));\n        }\n        return null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (ObjectUtils.isNotEmpty(externalSystemResponse.get(VALUE))) {\n            List<Object> records = MAPPER.convertValue(externalSystemResponse.get(VALUE), new TypeReference<List<Object>>() {});\n            return records.size();\n        }\n        return 0;\n    }\n\n    private String fetchMeetingIdForRecordingsAndTranscripts(String fetchByIdApi, String teamsUserId, String recordId, TokenDetails tokenDetails) throws CaasException{\n        String meetingId = null;\n        String url = String.format(fetchByIdApi, teamsUserId, recordId);\n        GainsightMSTeamsFetchService fetchService = new GainsightMSTeamsFetchServiceImpl();\n        try {\n            HttpResponse httpResponse = fetchService.searchData(\n                    tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken(),\n                    tokenDetails.getAccessToken(), url);\n            Map<String, Object> externalSystemResponse = extractResponse(httpResponse);\n            if (ObjectUtils.isNotEmpty(externalSystemResponse.get(VALUE))) {\n                List<Map<String, Object>> records = MAPPER.convertValue(externalSystemResponse.get(VALUE), new TypeReference<List<Map<String, Object>>>() {});\n                if (ObjectUtils.isNotEmpty(records)) {\n                    meetingId = records.get(0).get(ID).toString();\n                }\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5a83854b-3578-4852-9b88-83467d8dbd3b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":408,"endLine":427,"content":"ed while writing headers to failure file\", headers, e.getMessage());\n                    throw e;\n                }\n            } else {\n                log.error(\"[Dynamics] No data found in the input file\");\n                throw new SystemException(\"No data found in the input file\");\n            }\n\n            DynamicsGainsightUtils.setDynamicsCtx(pnpConnectionsInfo);\n            Set<String> projectionsWithLookups = GainsightCollectionUtils.nullSafeSet(Arrays.stream(headers)\n                    .filter(header -> header.contains(PERIOD)).collect(Collectors.toSet()));\n            Map<String, String> lookupProjectionToNavigationProperty = new HashMap<>();\n            Map<String, String> entityLogicalNameToPluralName = new HashMap<>();\n            if (CollectionUtils.isNotEmpty(projectionsWithLookups)) {\n                log.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships with: {}..\", RequestContextProvider.getTenantId(), targetObject);\n                Map<String, String> logicalNameToPluralMap = GainsightCollectionUtils.nullSafeList(msDynamicsSchemaService.listAllObjects(new MSDynamicsObjectQuery().includeFields(\"logicalName\", \"pluralName\")))\n                        .stream().collect(Collectors.toMap(MSDynamicsObject::getLogicalName, MSDynamicsObject::getPluralName));\n\n                List<Relationship> targetObjectRelationships = msDynamicsSchemaService.listRelationships(targetObject, RelationshipType.MANY_TO_ONE);\n                log.info(\"tId: {","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5f1a8ad-0653-41a9-a23b-d253a01454de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":237,"endLine":251,"content":"orCode.SYSTEM_ERROR, 500);\n    } else {\n      if(StringUtils.isEmpty(requestInfo.getRequestId())) {\n        requestInfo.setRequestId(TokenGenerator.generate());\n      }\n      RequestContextProvider.setRequestInfo(requestInfo);\n      GainsightContext.setMDC();\n    }\n  }\n\n  public static void resetContext() {\n    GainsightContext.removeAll();\n    MDC.clear();\n  }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d72d1b98-79d6-4090-9f43-39b12976f550","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCCommonUtility.java","startLine":63,"endLine":98,"content":"Info = TenantAuthInfo.fromTenant(tenant);\n            if (tenantAuthInfo != null) {\n                requestInfo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n                requestInfo.setTenantAuthInfo(tenantAuthInfo);\n            }\n            UserAuthInfo userAuthInfo = new UserAuthInfo();\n            Map<String, Object> systemAdministrator = tenant.getSystemAdministrator();\n            userAuthInfo.setUserId((String) systemAdministrator.get(\"Name\"));\n            userAuthInfo.setDisplayName((String) systemAdministrator.get(\"Name\"));\n            requestInfo.setUserAuthInfo(userAuthInfo);\n            RequestContextProvider.setRequestInfo(requestInfo);\n            GainsightContext.setMDC();\n            return true;\n\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return false;\n        }\n    }\n\n    private static Tenant getTenantInfo(String tenantId) throws SystemException {\n        if (tenantId == null) {\n            LOGGER.info(UCValidationCode.PNP_INVALID_INPUT.getUserText());\n            throw new SystemException(UCValidationCode.PNP_INVALID_INPUT.getUserText());\n        }\n        Tenant tenant = tenantMasterService.findOne(tenantId);\n\n        if (tenant == null) {\n            LOGGER.info(UCValidationCode.PNP_INVALID_INPUT.getUserText());\n            throw new SystemException(UCValidationCode.PNP_INVALID_INPUT.getUserText());\n        }\n        return tenant;\n    }\n\n    public static String decryptKey(String key) {\n        StandardPBE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ed43f8b-5d9c-45c8-884a-91b70bccafd3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":545,"endLine":567,"content":"relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                    lookupProjectionToNavigationProperty.put(projection, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                } else {\n                    log.error(\"tId: {}. Relationship not found for projection: {}. Hence unable to find navigational-property\",\n                            RequestContextProvider.getTenantId(), projection);\n                    throw new SystemException(CaasValidationCode.INTERNAL_ERROR, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n                }\n            }\n        }\n        return lookupProjectionToNavigationProperty;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        Map<String, Object> externalSystemResponse = GainsightCollectionUtils.nullSafeMap(ductResponse.getExternalSystemResponse());\n        List<Map<String, Object>> externalResultsList = new ArrayList<>();\n        if (externalSystemResponse.containsKey(RECORDS_KEYWORD) && (null != externalSystemResponse.get(RECORDS_KEYWORD))) {\n            externalResultsList = (List<Map<String, Object>>) externalSystemResponse.get(RECORDS_KEYWORD);\n        }\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed25911b-c579-46d8-93bc-0e76b1075751","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":77,"endLine":106,"content":"CoreErrorCode.SYSTEM_ERROR);\n        } catch (IllegalArgumentException parserError) {\n            LOGGER.error(\"Failed to convert data to Requested Type: {}\", toValueTypeRef.getClass().getSimpleName(), parserError);\n            throw new SystemException(parserError, CoreErrorCode.SYSTEM_ERROR);\n        } finally {\n            LOGGER.info(String.format(\"Process took %.5f ms\", ((System.nanoTime() - startEpoch) / 1e6)));\n        }\n    }\n\n    /**\n     * Method to set request headers.\n     *\n     * @return\n     * @see RequestContextProvider\n     * @see RequestInfo\n     */\n    public static HttpHeaders createHeaders(AuthenticationType authType, Map<String, String> customHeaders) {\n        LOGGER.info(\"Initializing Headers for Rest Call.\");\n        try {\n            HttpHeaders httpHeaders = new HttpHeaders();\n            httpHeaders.put(HttpHeaders.CONTENT_TYPE, Lists.newArrayList(MediaType.APPLICATION_JSON_VALUE));\n            if (AuthenticationType.SECRET_KEY.equals(authType)) {\n                httpHeaders.put(\"secret\", Lists.newArrayList(CryptUtil.getSimpleCryptor().encrypt(SECRET_KEY).getValue()));\n                String encryptedRI = getEncryptedRequestInfo();\n                httpHeaders.put(\"requestInfo\", Lists.newArrayList(encryptedRI));\n            }\n            if (!Objects.isNull(RequestContextProvider.getRequestInfo().getJwtToken())) {\n                httpHeaders.put(\"authToken\", Lists.newArrayList(RequestContextProvider.getRequestInfo().getJwtToken()));\n            }\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ae79411-12fb-4f26-90f4-e9d6c537d441","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":241,"endLine":271,"content":"put(UCConstants.SERVICENOW_EXTERNAL_QUERY, getServicenowQuery(query));\n            }\n        }\n        additionalDetails.putAll(connectorConfig.getExternalJarAdditionalProperties());\n        return additionalDetails;\n    }\n\n    private String getServicenowQuery(FilterRule rules) {\n        try {\n            List<String> whereClauses = Lists.newArrayList();\n            rules.getRules().forEach(rule -> whereClauses.addAll(buildRule(rule)));\n            String joiner = rules.getCondition() != null\n                    ? StringUtils.SPACE + getServicenowConditionalOperator(rules.getCondition()) + UCConstants.SPACE\n                    : StringUtils.SPACE;\n            String snowQuery = Joiner.on(joiner).join(whereClauses);\n            log.info(\"Servicenow external query: {}\", snowQuery);\n            return snowQuery;\n        } catch (Exception e) {\n            log.error(\"exception occurred while creating servicenow query {}\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static List<String> buildRule(FilterRule rule) {\n        log.info(\"Building Servicenow query for rule: {}\", rule);\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(StringUtils.SPACE);\n            String clause = Operators.getServicenowSqlClause(rule.getOp());\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"864b6bac-c205-483a-8c86-1e2d5edbe7c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":235,"endLine":272,"content":"(responsePayload));\n      }\n      T responsePayloadObj = null;\n      if (!clazz.getName().equals(\"java.lang.String\")) {\n        responsePayloadObj = GainsightUtils.convertJsonToObject(responsePayload, clazz);\n      } else {\n        responsePayloadObj = (T) responsePayload;\n      }\n      response = new ConnectorsDataHighwayResponseHandler<>(statusCode, statusLine.getReasonPhrase(), responsePayloadObj);\n\n    } finally {\n      EntityUtils.consumeQuietly(entity);\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n    }\n    return response;\n  }\n\n  private static <T> ConnectorsDataHighwayResponseHandler<T> post(String uri, Map<String, String> httpHeadersMap, String payload, Class<T> clazz) {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient();\n      HttpPost httpPost = new HttpPost(uri);\n      addHeaders(httpPost, httpHeadersMap);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpPost.setEntity(stringEntity);\n      closeableHttpResponse = httpClient.execute(httpPost);\n      LOGGER.info(\"Post call to uri: {} is complete.\", uri);\n      return getResult(closeableHttpResponse, clazz);\n    } catch (IOException e) {\n      throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  private static CloseableHttpClien","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5e4f8cba-1c8e-41f1-9f80-fbcb1f9cde55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ValidationConnectorDataSourceFactory.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ValidationConnectorDataSourceFactory {\n\n    private final List<ValidationConnectorDataSourceService> services;\n\n    public ValidationConnectorDataSourceService getService(ConnectorType connectorType) {\n        for(ValidationConnectorDataSourceService service:services) {\n            if(service.canHandle(connectorType)) {\n                return service;\n            }\n        }\n        log.error(\"Not able to find service for {}\", connectorType);\n        throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb44a398-ea2a-44d0-8b33-fac1d0858b71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":192,"endLine":219,"content":"on {\n        DuctResponseDTO ductResponseDTO;\n        try {\n            ductResponseDTO = synchronousUpdate(ductRequestDTO);\n            if (ductResponseDTO.getTotalNumberOfRecords() >= 1) {\n                LOGGER.info(\"Updated: {} records successfully\", ductResponseDTO.getTotalNumberOfRecords());\n                return ductResponseDTO;\n            }\n        } catch (CaasException exception){\n            LOGGER.error(\"Exception while performing Upsert operation. {}\", exception.getMessage(), exception);\n            throw exception;\n        } catch (Exception exception) {\n            LOGGER.error(\"Exception while performing Upsert operation..\", exception.getMessage(), exception);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE,\n                    DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, exception, null, exception.getMessage()));\n        }\n\n        return synchronousInsert(ductRequestDTO);\n    }\n\n    @Override\n    public DuctResponseDTO synchronousInsert(DuctRequestDTO ductRequestDTO) throws CaasException {\n        validateMappings(ductRequestDTO);\n        PNPConnectionsInfo pnpConnectionsInfo = null;\n        ductRequestDTO.setDuctDataOperation(DuctDataOperation.INSERT);\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())) {\n            GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2e61770-d439-4c08-b924-c7f11d135d35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":81,"endLine":100,"content":"\n\n    public DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException {\n        LOGGER.info(\"Starting Extract for {} for job id {}\", ductJobMapping.getConnectorType(), ductJobMapping.getJobId());\n        String systemToken = bionicRulesDPIntegrationService.generateMDASystemToken();\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = getAttributesWithLookupFieldsIfPresent(service, ductJobMapping, pnpConnectionsInfo);\n        ObjectDefinition objectDefinition = attributesMap.get(ductJobMapping.getResourceName());\n        DuctFetchRequestDTO fetchRequestDTO = initiateRequest(ductJobMapping, systemToken, objectDefinition);\n        String workflowDetails = fetchRequestDTO.getWorkFlowStringifiedRep();\n        Map<String, Object> params = Maps.newHashMap();\n        params.putIfAbsent(\"systemToken\", systemToken);\n        params.putIfAbsent(\"env\", DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\"));\n\n        if (org.apache.commons.lang.StringUtils.isNotEmpty(RequestContextProvider.getRequestId())) {\n            params.put(Constants.X_REQUEST_ID, RequestContextProvider.getRequestId());\n        }\n        params.putIfAbsent(\"jobName\", ductJobMapping.getJobId());\n        Co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ac8a79f-6479-45bd-819b-455d9e2e7ac5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ValidationConnectorDataSourceService.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.Map;\n\npublic interface ValidationConnectorDataSourceService {\n    boolean canHandle(ConnectorType connectorType);\n\n    boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> attributes, CaasConnectorConfig caasConnectorConfig) throws CaasException;\n    boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db78ce69-cba2-4617-8391-707ab445cf5d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/repo/DuctDatabaseTemplateServiceImpl.java","startLine":30,"endLine":71,"content":"res.pool.\" + key);//todo change everything from uc. to duct.\n      if (value != null) {\n        properties.setProperty(key, value);\n      }\n    }\n\n    PoolConfiguration postgresPoolProperties = DataSourceFactory.parsePoolProperties(properties);\n    LOGGER.info(\"{}\", postgresPoolProperties);\n\n    String host = deploymentProperties.getValue(\"duct.postgres.db.hostport\");\n    String dbName = deploymentProperties.getValue(\"duct.postgres.db.name\");\n\n    String url = \"jdbc:postgresql://\" + host + \"/\" + dbName + \"?tcpKeepAlive=true&stringtype=unspecified\";\n    if (deploymentProperties.getBooleanValue(\"duct.postgres.db.ssl.enabled\", false)) {\n      url = url + \"&sslmode=require\";\n    }\n    postgresPoolProperties.setUrl(url);\n    postgresPoolProperties.setDriverClassName(\"org.postgresql.Driver\");\n    postgresPoolProperties.setUsername(deploymentProperties.getValue(\"duct.postgres.db.username\"));\n    postgresPoolProperties.setPassword(deploymentProperties.getValue(\"duct.postgres.db.password\"));\n\n    this.applicationDataSource = new org.apache.tomcat.jdbc.pool.DataSource(postgresPoolProperties);\n  }\n\n  @Override\n  public JdbcOperations getApplicationJdbcTemplate() {\n    return jdbcTemplate;\n  }\n\n  @Override\n  public NamedParameterJdbcOperations getApplicationNamedParameterJdbcTemplate() {\n    return appNamedParameterJdbcTemplate;\n  }\n\n  @Override\n  public DataSource getApplicationDataSource() {\n    return applicationDataSource;\n  }\n\n  @PostConstruct\n  private void init() {\n    HAJdbcTempl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48bfdffd-d163-4521-bcf0-5160370cfc29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":283,"endLine":308,"content":"tants.TASK_TIMEOUT_MINS, \"120\");\n        metaData.put(\"ductConnectorType\", ductJobMapping.getConnectorType());\n        return metaData;\n    }\n\n    private DPWorkflowTaskTypeDetailsDTO getDpWorkflowTaskTypeDetails(DPWorkflowTaskDetailsDTO dpWorkflowTaskDetailsDTO,\n                                                                      DHTaskType dpTaskType) {\n        DPWorkflowTaskTypeDetailsDTO taskTypeDetailsDTO = new DPWorkflowTaskTypeDetailsDTO();\n        taskTypeDetailsDTO.setIdempotent(true);\n        taskTypeDetailsDTO.setVersion(\"1\");\n        if (dpTaskType.equals(DHTaskType.EXTERNALTASK))\n            taskTypeDetailsDTO.setType(DHTaskType.EXTERNALTASK);\n        else\n            taskTypeDetailsDTO.setType(DHTaskType.GENERICTASK);\n        dpWorkflowTaskDetailsDTO.setTaskType(taskTypeDetailsDTO);\n        return taskTypeDetailsDTO;\n    }\n\n    public CaaSExtractDetails getExtractTask(DuctJobMapping ductJobMapping, Map<String, Object> fieldNameDataTypeMap,\n                                             Map<String, GSFieldDefinition> fieldNameMetaMap, Map<String, String> fieldNameToFieldAlias) throws CaasException {\n        LOGGER.info(\" {} extract task creation payload for DH started\", ductJobMapping.getConnectorType());\n        CaaSExtractDetails fetchTaskDetails = new CaaSExtractDetails();\n\n        CaasConnectorConfig caasConnectionConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n\n        fetchTaskDetails.setConnectorId(ductJobMapping.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5d17f75b-c185-4812-ab16-0635a73da38d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":493,"endLine":509,"content":"mpty(propertyValue)) {\n            canonicalName = propertyValue + UCConstants.FORWARD_SLASH + targetField;\n        } else {\n            String referencingAttribute = DynamicsGainsightUtils.getReferencingAttribute(lookupFieldName, lookedUpObjectName);\n            Optional<Relationship> relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(lookedUpObjectName)\n                    && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n            if (relationshipOptional.isPresent()) {\n                log.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified navigation property is: {} for lookUpField: {} targetObject: {}, baseObjectPluralName: {}\",\n                        RequestContextProvider.getTenantId(), relationshipOptional.get().getReferencingEntityNavigationPropertyName(), lookupFieldName, lookedUpObjectName, baseObjectPluralName);\n                canonicalName = relationshipOptional.get().getReferencingEntityNavigationPropertyName() + UCConstants.FORWARD_SLASH + targetField;\n            } else {\n                canonicalName = referencingAttribute + UCConstants.FORWARD_SLASH + targetField;\n            }\n        }\n        return canonicalName;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"00531b31-c843-4c92-8afe-faea11ae4976","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":735,"endLine":751,"content":"onType()).getFieldsInfoList().stream().filter(requiredFieldsInfo ->\n                        requiredFieldsInfo.getProperties().containsKey(\"storeInDb\") && requiredFieldsInfo.getProperties().containsKey(\"isSecretKey\")).forEach(requiredFieldsInfo -> {\n                    if ((Boolean) requiredFieldsInfo.getProperties().get(\"storeInDb\") && (Boolean) requiredFieldsInfo.getProperties().get(\"isSecretKey\")\n                            && (null != finalPnpConnectionsInfo.getProperties())) {\n                        ((Map) finalPnpConnectionsInfo.getProperties()).put(requiredFieldsInfo.getFieldName(),\n                                SecretData.fromValue((String) ((Map) finalPnpConnectionsInfo.getProperties()).get(requiredFieldsInfo.getFieldName())));\n                    }\n                });\n                pnpConnectionsInfo.setProperties(pnpConnectionsInfo.getProperties());\n                break;\n            case SNOWFLAKE:\n                try {\n                    pnpConnectionsInfo.getProperties().put(\"password\", CryptHandler.getInstance().encrypt((String) pnpConnectionsInfo.getProperties().get(\"password\")));\n                    GainsightSnowflakeChannelFactory gainsightSnowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n                    GainsightSnowflakeChannelService gainsightSnowflakeChannelService = gainsightSnowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n                    gainsightSnowflakeChannelService.authenticate();\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea4a66f9-1240-498a-8ad9-648f9565a06e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":74,"endLine":107,"content":"l String RESTRICTED_DELETE = \"restrictedDelete\";\n    private static final String DIGITS = \"digits\";\n    private static final String DISPLAY_LOCATION_IN_DECIMAL = \"displayLocationInDecimal\";\n    private static final String HIGH_SCALE_NUMBER = \"highScaleNumber\";\n    private static final String ENCRYPTED = \"encrypted\";\n    private static final String REFERENCE_TO = \"referenceTo\";\n    private static final String RELATIONSHIP_NAME = \"relationshipName\";\n    private static final String EXTRA_TYPE_INFO = \"extraTypeInfo\";\n    private static final String COMPOUND_FIELD_NAME = \"compoundFieldName\";\n    private static final String ID = \"Id\";\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n\n    @Autowired\n    private SalesforceMetadataService salesforceMetadataService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.SFDC.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> queryParams) throws CaasException {\n        Object cacheValue = redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()));\n        Map<String, SObject> ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82075eb8-66eb-41a8-8c5d-7679515f6395","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctClientConfig.java","startLine":46,"endLine":70,"content":"ringUtils.isNotBlank(this.targetVersion);\n  }\n\n  public void setTargetVersion(String targetVersion) {\n    this.targetVersion = targetVersion;\n  }\n\n  public String clientId() {\n    return clientId;\n  }\n\n  public void setClientId(String clientId) {\n    Assert.isTrue(isNotBlank(clientId), \"CAAS clientId can not be null\");\n    this.clientId = clientId;\n  }\n\n  public String secret() {\n    return secret;\n  }\n\n  public void setSecret(String secret) {\n    Assert.isTrue(isNotBlank(secret), \"CAAS shared secret can not be null\");\n    this.secret = secret;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8fe06439-529f-42fb-839a-1a4f4de5dadb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightEcosystemFetchProcessorImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.connector.ecosystem.bean.GainsightEcosystemEntityEnum;\nimport com.gainsight.integration.connector.ecosystem.service.GainsightEcosystemFetchService;\nimport com.gainsight.integration.connector.ecosystem.service.GainsightEcosystemFetchServiceImpl;\nimport org.apache.http.HttpResponse;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GainsightEcosystemFetchProcessorImpl implements GainsightEcosystemFetchProcessor {\n\n    @Override\n    public List<ObjectDefinition> getListOfAvailableEntities(String connection) {\n        List<ObjectDefinition> objectDefinitions = Arrays.stream(GainsightEcosystemEntityEnum.values())\n                .map(gainsightAhaEntityEnum -> {\n                    ObjectDefinition objectDefinition = new ObjectDefinition();\n                    objectDefinition.setLabel(gainsightAhaEntityEnum.getLabel());\n                    objectDefinition.setObjectId(gainsightAhaEntityEnum.getId());\n                    objectDefinition.setObjectName(gainsightAhaEntityEnum.getName());\n                    return objectDefinition;\n                }).collect(Collectors.toList());\n        return objectDefinitions;\n    }\n\n    @Override\n    public HttpResponse getSynchronizedData(String entityName, List<String> projections, String apiKey, Ma","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5b9b6c7-2978-4870-86e5-cd6072feb9c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":727,"endLine":767,"content":"eTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n    return dateTimeFieldsMap;\n  }\n\n\n  private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n    nullSafeMap(fieldNameMetaMap)\n        .entrySet()\n        .stream()\n        .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n        .forEach(kv -> externalFilterableFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n    return externalFilterableFieldsMap;\n  }\n\n  private int pageSize(ApiConfigAttributes apiConfigAttributes) {\n    try {\n      List<AuthApiAttributes> bodyParamDetails = apiConfigAttributes.getBodyParamDetails();\n      AuthApiAttributes pageSizeAttribute = bodyParamDetails\n          .stream()\n          .filter(bodyParameter -> bodyParameter.getRequestKey().equalsIgnoreCase(PER_PAGE))\n          .findFirst().orElse(null);\n\n      if (Objects.isNull(pageSizeAttribute)) {\n        return 100;\n      }\n      return Integer.parseInt(pageSizeAttribute.getValue().toString());\n    } catch (Exception ex) {\n      log.error(\"Unable to figure out maxPageSize for fetching data, Using default value as fallback\", ex);\n      return 100;\n    }\n  }\n\n\n}\n\n    }\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ab32498-b7de-46ea-9aff-fa807f112d97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":53,"endLine":69,"content":"ngs> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, Object> retMap;\n        if (fieldList.isArray()) {\n            for (JsonNode field : fieldList) {\n               retMap = new HashMap<>();\n                Map<String, Object> meta = Maps.newHashMap();\n                Map<String, Object> metaProperties = new HashMap<>();\n                String fieldDataType = field.get(\"type\").asText();\n                DataTypeMappings dataTypeMappingsForField = null;\n                retMap.put(FIELD_NAME, apiConfigAttributes.getPrefixForMetadataFetch() +  field.get(\"name\").asText());\n                retMap.put(DB_NAME,  apiConfigAttributes.getPrefixForMetadataFetch() + field.get(\"name\").asText());\n                retMap.put(LABEL, String.valueOf(field.get(\"label\").asText()));\n                if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType)).findFirst().get();\n                    retMap.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> data","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a84e9f7-fb5b-4e5a-9368-676b83e10f01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":24,"endLine":52,"content":"t.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.AuthType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.bean.metadata.engine.AuthApiAttributes;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.ExternalUrlDetails;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections.map.HashedMap;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"337aa3ae-2c44-4403-95c0-4579235e8974","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":796,"endLine":815,"content":"ductJobMapping = createDuctJobMapping(ductRequestDTO);\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductRequestDTO.getResourceName(), pnpConnectionsInfo,\n                    ductRequestDTO.isResolvePickListOptions(), ductJobMapping);\n            ductValidationService.validateRequest(ductRequestDTO, pnpConnectionsInfo, objectDefinitionMap);\n            ductJobMapping.setConnectorType(pnpConnectionsInfo.getConnectionType());\n            ductJobMapping.setFields(ductRequestDTO.getFields());\n            return getSynchronizedQueryApiResponse(ductJobMapping, pnpConnectionsInfo, objectDefinitionMap.get(ductRequestDTO.getResourceName()), recordId);\n        } catch (CaasException cx) {\n            throw cx;\n        } catch (Exception e) {\n            LOGGER.error(\"Error while fetching data from external system\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n        }\n    }\n\n    private void populateCount(BulkActionResponse bulkActionResponse, DuctJobMapping ductJobMapping) {\n        bulkActionResponse.setSuccessCount(ductJobMapping.getSuccessRecords());\n        bulkActionResponse.setFailureCount(ductJobMapping.getFailedRecords());\n    }\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"319e04de-9be6-4bac-8985-4ec6a6229ffb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":140,"endLine":172,"content":"lSystemResponse.get(\"paging\");\n            if (nextPageMap.get(\"next\") != null) {\n                Map<String, String> nextMap = (Map<String, String>) nextPageMap.get(\"next\");\n                return nextMap.get(\"after\");\n            }\n        }\n        return null;\n    }\n\n    private Map<String, Object> extractResponse(HttpResponse response) throws CaasException {\n        Map<String, Object> responseMap = new HashMap<>();\n        try {\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            responseMap = (Map) MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n            try {\n                if (response.getEntity().getContent() != null) {\n                    response.getEntity().getContent().close();\n                }\n            } catch (Exception e) {\n                log.error(\"Error in input stream \", e);\n            }\n        }\n        return responseMap;\n    }\n\n    private List<HubspotFilterGroups> populateFilterGroups(DuctJobMapping ductJobMapping, Map<String, String> fieldNameDataTypeMap) throws CaasException {\n        if (ductJobMapping.getCriteria() != null)\n            return HubspotCaasSearchRequ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"17e71e79-1896-4b7e-9433-e0871152b67c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":286,"endLine":309,"content":"accessDetails.setClientId(pnpConnectionsInfo.getTokenDetail().getClientId().getString());\n        accessDetails.setClientSecret(pnpConnectionsInfo.getTokenDetail().getClientSecret().getString());\n        accessDetails.setAccessToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken()));\n        accessDetails.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        return accessDetails;\n    }\n\n    private PNPConnectionsInfo getConnectionId(String connectionId) {\n        return pnpConnectionInfoDao.findByConnectionId(connectionId);\n    }\n\n    private void updateTokenDetails(String connectionId, TokenDetails tokenDetails) {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n        pnpConnectionsInfo.getTokenDetail().setAccessToken(CryptHandler.getInstance().encrypt(tokenDetails.getAccessToken()));\n        pnpConnectionsInfo.getTokenDetail().setRefreshToken(CryptHandler.getInstance().encrypt(tokenDetails.getRefreshToken()));\n        pnpConnectionInfoDao.save(pnpConnectionsInfo);\n    }\n\n    private Map<String, Object> extractResponse(HttpResponse response) throws CaasException {\n        Map<String, Object> responseMap = new HashMap<>();\n        try {\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            responseMap = (Map) MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a28abbe3-7c14-43dd-aaee-2be87737da83","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFileUtility.java","startLine":1,"endLine":50,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.gainsight.integration.utils.common.UCConstants;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.CharEncoding;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.UUID;\n\n/**\n * Created by vgautam on 13/04/16.\n */\npublic class UCFileUtility {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(UCFileUtility.class);\n\n  private UCFileUtility() {\n    throw new IllegalAccessError(\"This is Utility Class\");\n  }\n\n  public static int writeDataToLocalFile(List<String> dataList, File outputFile) {\n    int no_of_lines_written_file=0;\n    try(FileWriter fileWritter = new FileWriter(outputFile, true)){\n      try(BufferedWriter bufferWritter = new BufferedWriter(fileWritter)){\n        for (String record : dataList) {\n          no_of_lines_written_file++;\n          bufferWritter.write(record);\n          bufferWritter.newLine();\n        }\n      }\n    } catch (IOException e) {\n      LOGGER.error(String.format(\"Error occurred while writing records in file. Total records written %d\", no_of_lines_written_file), e);\n    }\n    return no_of_lines_written_file;\n  }\n\n\n  public static File writeDataToLocalFile(InputStream inputStream) throws IOException {\n    File localFile = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c6a5ec3-9391-49e5-9cb0-ae8c14d41ee4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.utils.ecosystem;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.google.common.collect.Lists;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\npublic class EcosystemHelper {\n\n    private static final String VDS = \"vds\";\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssXXX\";\n\n    public static EcosystemResponse transformExternalResponse(ObjectDefinition resource, List<String> showFields, Map<String, Object> extResponse) {\n        List<GSFieldDefinition> projections = resource.getFields().stream().filter(f -> showFields.contains(f.getDbName())).collect(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1008437-fe10-4b53-8ffd-6a938dc7535b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":80,"endLine":113,"content":"AO;\n    @Autowired\n    private MetadataDriver metadataDriver;\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n    @Autowired\n    private OMDConverterFactory omdConverterFactory;\n    @Autowired\n    private MetadataCacheDao metadataCacheDao;\n\n    private static final String NAME = \"name\";\n    private static final String LINK = \"link\";\n    private static final String SUPER_CLASS = \"super_class\";\n    private static final String OBJECTS_URL = \"%1$s/api/now/table/sys_db_object?sysparm_fields=sys_id,name,super_class\";\n    private static final String SUPERCLASS_INFO_URL = \"%1$s?sysparm_fields=name\";\n    private static final String TRANSFORM_OBJECT_LIST = \"transformObjectList\";\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final Map<String, Object> DEFAULT_MAP = new HashMap<String, Object>() {{\n        put(TRANSFORM_OBJECT_LIST, false);\n    }};\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType.equals(ConnectorType.SERVICENOW) && !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        boolean transformObjectList = true;\n        if (!map.isEmpty() && GainsightCollectionUtils.nullSafeMap(map).containsKey(TRANSFORM_OBJEC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9a03acc-fc4a-4bbe-b5ec-6ef44bcec7e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":101,"endLine":121,"content":"cessToken(pnpConnectionsInfo));\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false);\n        }\n    }\n\n    @PutMapping(value = \"{connectorType}/authorizationUrl/{connectionId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.CREATE)\n    public ResponseObj getIpaasAuthorizationV2(@Context HttpServletRequest request, @Context HttpServletResponse response,\n                                               @com.wordnik.swagger.annotations.ApiParam(value = \"connectorType\", required = true) @PathVariable(\"connectorType\") final String connectorType,\n                                               @com.wordnik.swagger.annotations.ApiParam(value = \"connectionId\", required = true) @PathVariable(\"connectionId\") final String connectionId) {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo, CaasValidationCode.CONNECTOR_PROJECT_INFO_NULL, HttpStatus.SC_BAD_REQUEST);\n            String authorizationUrl = ductConnectionService.getAuthorizationUrl(pnpConnectionsInfo,\n                    DeploymentProperties.getDeploymentProperties().getValue(Constants.CALL_BACK_BASE_URL) + \"/api\");\n            return new ResponseObj(true, authorizationUrl);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc943263-c004-464d-a915-c87f86d37601","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":451,"endLine":474,"content":"n.COMPANY_PERSON_IDENTIFIER, externalContactIdFieldName);\n            setupDefaultCompanyResolutionKeys(pnpConnectionsInfo);\n        }\n    }\n\n    private void setupDefaultCompanyResolutionKeys(PNPConnectionsInfo pnpConnectionsInfo) {\n        String url = UCEnvSpecificConfigDetailUtil.getGalaxyApiUrl() + \"/resolution\";\n        String requestInfo = RequestContextProvider.getEncryptedRequestInfo(true);\n        String gsnapSecret = CryptUtil.getSimpleCryptor().encrypt(GSNAP_SHARED_SECRET).getValue();\n        CloseableHttpClient client = utils.HttpClient.getDefaultApacheClient();\n        try {\n            client = interceptUrl(url, client);\n            URIBuilder uri = new URIBuilder(url);\n            HttpPost target = new HttpPost(uri.build());\n            String companyIdentifier = (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.COMPANY_IDENTIFIER);\n            Map<String, Object> requestBody = new HashMap<>();\n            requestBody.put(\"connectionId\", pnpConnectionsInfo.getCrmId());\n            Map<String, Object> companyMap = new HashMap<>();\n            companyMap.put(\"accountid\", companyIdentifier);\n            requestBody.put(\"companyMapping\", companyMap);\n            target.setEntity(new StringEntity(new Gson().toJson(requestBody), ContentType.APPLICATION_JSON));\n            target.setHeader(\"requestInfo\", requestInfo);\n            target.setHeader(\"secret\", gsnapSecret);\n            LOGGER.info(\"Calling Galaxy resolution API to add default comp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4dce5f77-3b42-41c0-ade6-d786192f7359","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/FieldSaveType.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum FieldSaveType {\n\n    ENHANCED(\"ENHANCED\"),\n    EDITED(\"EDITED\"),\n    MANUAL(\"MANUAL\"),\n    PROMOTED(\"PROMOTED\"),\n    CONFIG(\"CONFIG\"),\n    METADATA_API(\"METADATA_API\");\n\n    private String value;\n\n    FieldSaveType(String value)\n    {\n        this.value = value;\n    }\n\n\n    private static final Map<Object, FieldSaveType> FIELD_SAVE_TYPE_MAP = new HashMap<>();\n\n    static {\n        for (FieldSaveType type : values()) {\n            FIELD_SAVE_TYPE_MAP.put(type.value.toUpperCase(),type);\n        }\n    }\n\n    public static FieldSaveType forValue(String value) {\n        if (value == null) {\n            return null;\n        }\n        return FIELD_SAVE_TYPE_MAP.get(value.toUpperCase());\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public static String getValue(FieldSaveType fieldSaveType) {\n        return fieldSaveType.value;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c1b389e1-a4e6-486a-ac01-22dc9dddfa11","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":480,"endLine":507,"content":"equest.getInstanceToken().getString(), dataExtractionRequest.getOrgToken()),\n                    createQueryParams(dataExtractionRequest, dataExtractionRequest.getNextPage()));\n            if (httpResponse.getResponseCode() == 200) {\n                LOGGER.info(\"Total records {} received are\", httpResponse.getResponseHeaders().get(ELEMENTS_TOTAL_COUNT).get(0));\n                LOGGER.info(\"Elements received are {}\", httpResponse.getResponseHeaders().get(ELEMENTS_RETURNED_COUNT).get(0));\n                dataExtractionRequest.setNextPage(httpResponse.getResponseHeaders().get(ELEMENTS_NEXT_PAGE_TOKEN).get(0));\n                return new JSONArray(httpResponse.getRespMsg());\n            } else {\n                LOGGER.error(\"Error occured while trying to extract data {}\", httpResponse.getRespMsg());\n                throw new Exception(\"Error occured while trying to extract data\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occured while trying to extract data\", e);\n            throw new Exception(\"Error occured while trying to extract data {}\", e);\n        }\n    }\n\n\n    private static String getFieldValue(JSONObject obj, String jsonPath) {\n\n        String[] data = jsonPath.split(\"\\\\.\");\n        JSONObject jsonObject = obj;\n        for (int i = 0; i < data.length; i++) {\n            try {\n                if (i == data.length - 1) {\n                    return jsonObject.optString(data[i]);\n                } else {\n                    if (jsonObjec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5ced2a3-3c66-43a6-9cf2-373e6a33a227","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":150,"endLine":172,"content":"        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String teamsUserId = pnpConnectionsInfo.getProperties().get(MSTEAMS_USER_ID).toString();\n        String resourceName = ductJobMapping.getResourceName().toLowerCase();\n\n        List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n        String dataApi = null;\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(resourceName)).findFirst();\n        if (caasObjectApiConfig.isPresent()) {\n            if (ObjectUtils.isNotEmpty(caasObjectApiConfig.get().getAdditionalProperties().get(SINGLE_RECORD_FETCH_SUPPORTED)) &&\n                    (Boolean) caasObjectApiConfig.get().getAdditionalProperties().get(SINGLE_RECORD_FETCH_SUPPORTED)) {\n                dataApi = caasObjectApiConfig.get().getDataApi();\n\n                GainsightMSTeamsChannelFactory gainsightMSTeamsChannelFactory = new GainsightMSTeamsChannelFactory();\n\n                TokenDetails tokenDetails = extractAccessDetails(ductJobMapping.getConnectionId());\n\n                try {\n                    Map<String, Object> tokenDetailMap = gainsightMSTeamsChannelFactory.getAccessToken(token","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"327f64a5-184b-42c2-8811-b8d1031b8d9b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/BionicRulesDPSystemUserTokenGenImpl.java","startLine":1,"endLine":28,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.enums.AuthTokenType;\nimport org.springframework.stereotype.Service;\n\nimport static com.gainsight.enums.AuthTokenType.BIONIC_RULES_DP_SYSTEM_USER;\n\n/**\n * Created by: sdugar\n * Date: 9/12/16\n */\n@Service\npublic class BionicRulesDPSystemUserTokenGenImpl extends AbstractAuthTokenGenStrategyImpl {\n\n    @Override\n    public AuthTokenType getAuthTokenType() {\n        return BIONIC_RULES_DP_SYSTEM_USER;\n    }\n\n    @Override\n    protected String getTokenTypeErrorMessage() {\n        return String.format(\"Auth Token Type Mismatch. Expecting %s Token Type\", BIONIC_RULES_DP_SYSTEM_USER.name()).intern();\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"653bc42d-1091-4ac8-9554-3496580f1b4c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":268,"endLine":290,"content":"tail, token.getRawResponse());\n            pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n            Integer storedHubId = (Integer) pnpConnectionsInfo.getProperties().get(\"HUB_ID\");\n            Map<String, Object> hubspotAccount = getHubspotAccountDetails(baseTokenDetail);\n\n            if (storedHubId == null) {\n                storedHubId = (Integer) hubspotAccount.get(\"portalId\");\n            }\n\n            pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.IS_EXTERNAL_CRM_CHANGED,\n                    !storedHubId.equals(hubspotAccount.get(\"portalId\")));\n            pnpConnectionsInfo.setCrmId(ConnectorType.HUBSPOT + \"_\" + hubspotAccount.get(\"portalId\"));\n            populateHubspotConnectionProperties(hubspotAccount, pnpConnectionsInfo.getProperties());\n            setupCompanyAndCompanyPersonMappingForHubspot(pnpConnectionsInfo, String.valueOf(storedHubId));\n            addToLinkedCRMs(pnpConnectionsInfo.getCrmId());\n        }\n        LOGGER.info(\"Update GS Connect Connection with Id {}\", pnpConnectionsInfo.getConnectionId());\n    }\n\n    private void setupCompanyAndCompanyPersonMappingForHubspot(PNPConnectionsInfo pnpConnectionsInfo, String portalId) {\n        Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n        if (StringUtils.isBlank((String) properties.get(UCConstants.GSIntegration.COMPANY_IDENTIFIER)) || StringUtils.isBlank((String) properties.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19019343-c9b8-46a8-80bc-3c6e6aace1e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":30,"endLine":59,"content":"ervice implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.DYNAMICS;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        if (ductRequestDTO.isLookupFieldsFlattened() && FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId())) {\n            validateFieldsWithSeperateLineItem(ductRequestDTO, objectDefinitionMap);\n        } else {\n            validateFields(ductRequestDTO, objectDefinitionMap);\n        }\n\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        if (null == ductRequestDTO.getProperties()) {\n            ductRequestDTO.setProperties(new HashMap<>());\n        }\n        ductRequestDTO.getProperties().put(UCConstants.GSIntegration.BASE_OBJECT_PLURAL_NAME, objectDefinitionMap.get(ductRequestDTO.getResourceName()).getLabelPlural());\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7dcce19f-13a5-4cd1-92c8-998c4c2faeda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":97,"endLine":125,"content":" importLookupLite.setOnNoMatch(LookupInsertOption.ERROR);\n\n                String gsidFieldName = key.substring(\n                        key.indexOf(DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX) + DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX.length(),\n                        key.lastIndexOf(DuctConstants.LOOKUP_OBJECT_PATTERN));\n                String updatedGsidFieldName = DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX+gsidFieldName;\n\n                /*\n                 * adding prefix to the gsid field name so that downstream does not ambiguity in differentiating gsid field and source header\n                 */\n                directFields.put(updatedGsidFieldName,directFields.get(gsidFieldName));\n                /*\n                 * removing the gsid Field Name entry as we added the same entry in the above line with a prefix\n                 */\n                directFields.remove(gsidFieldName);\n\n                Map<String, String> matchByCriteria = new HashMap<>();\n                matchByCriteria.put(updatedGsidFieldName, String.valueOf(tuple.getValue()));\n                importLookupLite.setFields(matchByCriteria);\n\n                lookups.putIfAbsent(gsidFieldName,importLookupLite);\n            }\n            transformedRecords.add(directFields);\n        }\n        if(MapUtils.isNotEmpty(lookups)) {\n            if (MapUtils.isNotEmpty(externalDataRequestDto.getLookups())) {\n                externalDataRequestDto.getLookups().putAll(lookups);\n            } else {\n                ext","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2108ad21-ee19-46bf-b665-7449e29338c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":231,"endLine":255,"content":"throws IOException {\n        Map<String, ObjectDefinition> attributes = new HashMap<>();\n        ObjectDefinition objectDefinition = new ObjectDefinition();\n        CaasConnectorConfig connectorConfig = createConnectorConfig(ConnectorType.HUBSPOT);\n        Map<String, String> objectLevelFieldExpression = (Map<String, String>) connectorConfig.getObjectLevelFieldsExpression().get(\"CONTACT\");\n        objectDefinition.setExpressionForUpsertKeys(objectLevelFieldExpression.get(DuctConstants.EXPRESSION_FOR_UPSERT_KEYS));\n        objectDefinition.setExpressionForRequiredFields(objectLevelFieldExpression.get(DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS));\n        GSFieldDefinition gsFieldDefinition = new GSFieldDefinition();\n        attributes.put(\"CONTACT\", objectDefinition);\n\n        return attributes;\n    }\n\n    private PNPConnectionsInfo createConnectionInfo() {\n        PNPConnectionsInfo pnpConnectionsInfo = new PNPConnectionsInfo();\n        pnpConnectionsInfo.setConnectionType(ConnectorType.HUBSPOT);\n        pnpConnectionsInfo.setConnectionId(\"1\");\n        return pnpConnectionsInfo;\n    }\n\n    private DuctJobMapping createDuctJobMapping(boolean validObject, Map<String, String> objectLevelOperation, List<String> objectsForMandatoryMapping,\n                                                boolean validColumnMapping) {\n        DuctJobMapping ductJobMapping = new DuctJobMapping();\n        populateObject(ductJobMapping, validObject);\n        ductJobMapping.setConnectorType(ConnectorTy","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"056b3efa-99ab-4b70-bca4-5c83c21d8ba8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct;\n\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.MeetingDetailsRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic interface DuctService {\n\n    DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException;\n\n    DuctResponse createSingleData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    DuctResponse updateSingleData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException;\n\n    List<ObjectDefinition> getObject(String connectionId) throws CaasException;\n\n    Map<String, ObjectDefinition> getObjectAttributes(String objectName, String connectionId) throws CaasException;\n\n    Map<String, ObjectDefinition> getObjectAttributes(DuctRequestDTO ductRequestDTO) throws CaasException;\n\n    Map<String, ObjectDefinition> getObjectAttributes(String objectName, String connectionId, String consumer, boolean includePicklistOptions) throws CaasException;\n\n    Map<String, ObjectDefinition> getObjectAttributesUsingEngine(String objectName, String connectionId, String consumer) throws CaasException;\n\n    List<Map<String, Object>> getFileDetails(String connectionId, Set<S","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3279b378-5e19-44f4-a269-09c1c2b871a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":684,"endLine":696,"content":"nsInfo.getProperties().get(\"API_KEY\")));\n                assertNotNull(pnpConnectionsInfo.getProperties().get(DuctCommonConstants.PX_URL), CaasValidationCode.INVALID_INPUT);\n                assertTrue(UrlValidator.getInstance().isValid(pnpConnectionsInfo.getProperties().get(DuctCommonConstants.PX_URL).toString()), CaasValidationCode.INVALID_URL);\n                pnpConnectionsInfo.getProperties().put(DuctCommonConstants.PX_URL, pnpConnectionsInfo.getProperties().get(DuctCommonConstants.PX_URL));\n                assertTrue(ucAptrinsicChannelService.authenticateAPIKeys(pnpConnectionsInfo.getProperties().get(DuctCommonConstants.PX_URL).toString()), CaasValidationCode.INVALID_INPUT, \"Unable to authenticate to Gainsight PX\", HttpStatus.SC_BAD_REQUEST);\n                pnpConnectionsInfo.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(\"API_KEY\")), pnpConnectionsInfo.getConnectionType()));\n                List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.findByConnectionType(ConnectorType.GAINSIGHT_PX);\n                if (pnpConnectionsInfoList.size() > 0)\n                    pnpConnectionsInfo.getProperties().put(GENERATE_OOB_JOBS, false);\n                else\n                    pnpConnectionsInfo.getProperties().put(GENERATE_OOB_JOBS, true);\n                pnpConnectionsInfo = insertPxMultiInstance(pnpConnectionsInfo);\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"70e1ae99-e252-4fbc-a735-db2346fc406e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1145,"endLine":1163,"content":"il;\n    }\n\n    private void validateS3Details(PNPConnectionsInfo pnpConnectionsInfo) {\n        assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                .get(BUCKETNAME)), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_S3_BUCKET_NAME.getUserText(), 400);\n        assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                .get(ACCESS_KEY_ID)), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_API_KEY.getUserText(), 400);\n        assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                        .get(ACCESS_SECRET)), true), CaasValidationCode.INVALID_CLIENT_INPUT, \"Invalid/empty Secret Key\",\n                \"Invalid/empty Secret Key\", 400);\n    }\n\n    /*private void updateConnection(boolean createConnection, PNPConnectionsInfo pnpConnectionsInfo) {\n        UCTenantConnection ucTenantConnection;\n        if (!createConnection) {\n            ucTenantConnection = tenantConnectionService.findOneOrThrow(RequestContextProvider.getTenantId());\n            if ((null != ucTenantConnection.getCurrentPrimaryConnection() && pnpConnectionsInfo.getConnectionId().equals(ucTenantConnection.getCurrentPrimaryConnection()))\n                    || (null != ucTenantConnection.getPreviousPrimaryConnection() && pnpConnectionsInfo.getConnectionId().equals(ucTena","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c3fb80c-ad3d-4fc3-bcda-4ecc13ab1235","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/Field.java","startLine":1,"endLine":72,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport com.gainsight.duct.enums.UsageDataSourceType;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * User: santa\n * Date: 17/6/14\n * Time: 9:15 PM\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Field implements Serializable {\n  private static final long serialVersionUID = -1L;\n\n  private UsageDataSourceType type;\n  private String objectName;\n  private String dbName;\n  private String displayName;\n  private Map<String, Object> properties;\n\n  public UsageDataSourceType getType() {\n    return type;\n  }\n\n  public void setType(UsageDataSourceType type) {\n    this.type = type;\n  }\n\n  public String getObjectName() {\n    return objectName;\n  }\n\n  public void setObjectName(String objectName) {\n    this.objectName = objectName;\n  }\n\n  public String getDbName() {\n    return dbName;\n  }\n\n  public void setDbName(String dbName) {\n    this.dbName = dbName;\n  }\n\n  public String getDisplayName() {\n    return displayName;\n  }\n\n  public void setDisplayName(String displayName) {\n    this.displayName = displayName;\n  }\n\n  public Map<String, Object> getProperties() {\n    return properties;\n  }\n\n  public void setProperties(Map<String, Object> properties) {\n    this.properties = properties;\n  }\n\n  @Override\n  public String toString() {\n    return \"Field{\" +\n        \"type=\" + type +\n        \", objectName='\" + objectNam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ab1cc8a-5a12-4eca-8491-b5c2c7a4eb0b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":47,"endLine":74,"content":"esult.getValue()));\n    }\n\n\n    public static boolean toggleFeature(String featureName, List<String> tenantIds, String variationName){\n        ClientConfig clientConfig = new ClientConfig()\n                .withHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestInfo())\n                        .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n        LOGGER.info(String.format(\"Updating salesforce connector state from feature toggle service for tenants %s\",tenantIds));\n        FeatureConfigCRUDService featureConfigEvaluationService = new FeatureConfigCRUDServiceImpl().withClientConfig(clientConfig);\n        try {\n            featureConfigEvaluationService.upsertTenantMappings(featureName, tenantIds, variationName);\n        } catch (Exception e){\n            LOGGER.error(\"Exception updating salesforce connector state from feature toggle service\", e);\n            return false;\n        }\n        return true;\n    }\n\n    public static boolean updateFeatureVariation(String featureId, String variationId, FeatureVariationDetailDTO input){\n        ClientConfig clientConfig = new ClientConfig()\n                .withHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"924ef053-9a04-48ac-ab37-10bbc313dd55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":175,"endLine":181,"content":"operator.getFilterOperator();\n            default:\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(), null, null, \"Operator not supported\"));\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7f1e2c19-9169-412b-8beb-4ac0e4ea2e72","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":707,"endLine":736,"content":".put(\"SERVICE_URL\", pnpConnectionsInfo.getProperties().get(\"SERVICE_URL\"));\n                break;\n\n            case REST_API:\n                processCustomConnectionDetails(pnpConnectionsInfo);\n                break;\n\n            case HUBSPOT:\n                processConnectionForDynamicsAndHubspot(pnpConnectionsInfo);\n                break;\n\n            case POSTGRES:\n            case HAPOSTGRES:\n            case REDSHIFT:\n            case MYSQL:\n            case MARIADB:\n                pnpConnectionsInfo.setConnectionDetail(preProcessRelationalDBDetails(pnpConnectionsInfo));\n                break;\n            case PENDO:\n                pnpConnectionsInfo.setConnectionDetail(preProcessPendoConnectionDetail(pnpConnectionsInfo));\n                break;\n            case BIGQUERY:\n                if (pnpConnectionsInfo.getAuthorizationType().equals(AuthorizationType.CUSTOM)) {\n                    authorizeServiceAccountDetail(pnpConnectionsInfo);\n                    pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                    log.info(\"The connection is created via custom flow\");\n                }\n                PNPConnectionsInfo finalPnpConnectionsInfo = pnpConnectionsInfo;\n                connectorConfig.getAuthInfo(pnpConnectionsInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFieldsInfo ->\n                        requiredFieldsInfo.getProperties().containsKey(\"storeInDb\") && requiredFieldsInfo.getProperties().containsKe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93c1ca8d-27ad-412a-bcbe-c35b9273f92c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":134,"endLine":148,"content":"tributesTenantConfig.getConnectionId(), caasObjectAttributesTenantConfig.toString()});\n    }\n\n    private void writeOutData(ICSVWriter csvWriter, String tenantId, String failed, String error_initializing_context) {\n            csvWriter.writeNext(new String[]{tenantId, tenantId, failed, error_initializing_context});\n    }\n\n    private void writeBackupHeader(ICSVWriter backupCsvWriter) {\n        backupCsvWriter.writeNext(new String[]{\"TenantId\", \"ConnectionId\", \"caas_object_attributes_tenant_config\"});\n    }\n\n    private void writeOutHeaders(ICSVWriter csvWriter) {\n        csvWriter.writeNext(new String[]{\"TenantId\", \"ConnectionId\", \"Status\", \"Message\"});\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4db38d8-16cc-4a0d-aea1-15d130079a6f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":107,"endLine":136,"content":"ystemException.setUiMessage(errorMsg);\n                throw systemException;\n            }\n        }\n        this.connection = connection;\n    }\n\n    private Connection connection() {\n        String url = StringUtils.defaultIfBlank(connectionDetail.getUrl(), connectionDetail.getHost());\n        String connectionUrl = \"jdbc:snowflake://\" + url;\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionDetail.getUser());\n        properties.setProperty(\"password\", connectionDetail.getPwd());\n        properties.setProperty(\"warehouse\", connectionDetail.getWarehouse());\n        properties.setProperty(\"db\", connectionDetail.getDataBaseName());\n        properties.setProperty(\"schema\", connectionDetail.getSchema());\n        properties.setProperty(\"CLIENT_SESSION_KEEP_ALIVE\", Boolean.TRUE.toString());\n\n        return createConnection(connectionUrl, properties);\n    }\n\n    private Connection connection(PNPConnectionsInfo pnpConnectionsInfo) {\n        Map ipaasProperties = (Map)pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\");\n\n        String connectionUrl = \"jdbc:snowflake://\" + ipaasProperties.get(\"databaseHost\").toString();\n        Properties properties = new Properties();\n        properties.put(\"user\", ipaasProperties.get(\"username\").toString());\n        properties.put(\"db\", ipaasProperties.get(\"databaseName\").toString());\n        properties.put(\"schema\", ipaasProperties.get(\"datasetId\"));\n        properties.put(\"warehouse\", ipaasP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d578e278-bce4-438c-aeeb-3aa85087b6fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/MSTeamsValidationDataSourceService.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\npublic class MSTeamsValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType ==  ConnectorType.MSTEAMS;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91c1dc10-33d7-4aea-9383-87d918bce1d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.data;\n\nimport com.amazonaws.HttpMethod;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.duct.utils.hubspot.HubspotCaasSearchRequestCriteriaBuilder;\nimport com.gainsight.duct.validation.HubspotBulkWriteBackValidationService;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.hubspot.bean.ColumnMapping;\nimport com.gainsight.integration.connector.hubspot.bean.*;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.integr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa7b56b2-f9d7-451a-be19-352f6f0e40db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":512,"endLine":537,"content":"case \"IN_PROGRESS\":\n                    case \"NOT_STARTED\":\n                    default:\n                        TimeUnit.SECONDS.sleep(pollInterval);\n                        break;\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception in polling \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n        return DuctResponse.builder().externalSystemResponse(response).ductStatus(DuctStatus.FAILED).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                .jobId(ductJobMapping.getJobId()).build();\n    }\n\n    private void populateExternalWBResponse(DuctResponse ductResponse, Map<String, Object> externalSystemResponse, DuctJobMapping ductJobMapping, String fileId) {\n        Map<String, Object> metadataMap = (Map<String, Object>) externalSystemResponse.get(\"metadata\");\n        Map<String, Object> countersMap = (Map<String, Object>) metadataMap.get(\"counters\");\n\n        if (countersMap.get(\"TOTAL_ROWS\") != null) {\n            ductResponse.setTotalNumberOfRecords(Long.parseLong(String.valueOf(countersMap.get(\"TOTAL_ROWS\"))));\n        }\n        long createdCount = 0l, updatedCount = 0l;\n        if (countersMap.get(\"CREATED_OBJECTS\") != null) {\n            createdCount = Long.parseLong(String.valueOf(countersMap.get(\"CREAT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"faf3e4cc-20e9-49ec-a32d-c3e15fe2832b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":93,"endLine":115,"content":"                    for (Map.Entry<String, Object> entry : properties.entrySet()) {\n                        if (entry.getValue() instanceof String) {\n                            String value = (String) entry.getValue();\n                            if (value.equalsIgnoreCase(\"true\")) {\n                                properties.put(entry.getKey(), true);\n                                writeOutData(csvWriter, tenantId, \"Success\", \"Updated \" + enhancedGSFieldDefinition.getFieldName() + \" \" + entry.getKey() + \" to true\");\n                            } else if (value.equalsIgnoreCase(\"false\")) {\n                                properties.put(entry.getKey(), false);\n                                writeOutData(csvWriter, tenantId, \"Success\", \"Updated \" + enhancedGSFieldDefinition.getFieldName() + \" \"  + entry.getKey() + \" to false\");\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(\"Error while processing tenantId: {}\", tenantId, e);\n                    writeOutData(csvWriter, tenantId, \"Failed\", e.getMessage());\n                }\n            }\n            for (Map<String, Object> map : overrideAttribute) {\n                try {\n                    for (Map.Entry<String, Object> entry : map.entrySet()) {\n                        if (entry.getValue() instanceof String) {\n                            String value = (String) entry.getValue();\n                            if (value.equalsIg","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65ceb114-e898-4cbb-8509-e41c84359c46","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":586,"endLine":618,"content":"ng dateTimeFormat) {\n    try {\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      List<Map<String, Object>> flattenedMap = new ArrayList<>();\n      for (Map<String, Object> dataMap : dataToBeProcessed) {\n        flattenedMap.add(JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(dataMap)));\n      }\n      Set<String> dateTimeFields = dateTimeFieldsMap.keySet();\n      nullSafeList(flattenedMap)\n          .stream()\n          .filter(Objects::nonNull)\n          .forEach(datum -> {\n            for (String dateTimeField : dateTimeFields) {\n              if (datum.containsKey(dateTimeField)) {\n                String epochStr = DuctUtils.valueOf(datum.get(dateTimeField));\n                datum.put(dateTimeField, convertToDateTimeFromEpoch(epochStr, dateTimeFormat, ductJobMapping));\n              }\n            }\n          });\n      String unflatten = JsonUnflattener.unflatten(flattenedMap.toString());\n      JsonNode unflattenNode = OBJECT_MAPPER.readValue(unflatten, JsonNode.class);\n      return OBJECT_MAPPER.convertValue(unflattenNode, new TypeReference<List<Map<String, Object>>>() {\n      });\n    } catch (Exception e) {\n      log.error(\"Error while post processing the data\", e);\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      return dataToBeProcessed;\n    }\n  }\n\n  private Obje","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d00a01b3-634c-4fe1-8ed4-aec7c5e24618","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":232,"endLine":266,"content":"map.put(\" OR \", \" || \");\n        Set<String> fieldsRequired = getFieldsFromExpression(expression);\n        for (String field : inputFields) {\n            map.put(field, \"true\");\n            fieldsRequired.remove(field);\n        }\n\n        for (String field : fieldsRequired) {\n            map.put(field, \"false\");\n        }\n\n        String transformed = map.entrySet()\n                .stream()\n                .reduce(expression,\n                        (s, e) -> s.replaceAll(\"\\\\b\" + e.getKey() + \"\\\\b\", e.getValue()),\n                        (s1, s2) -> null);\n\n        ExpressionParser expressionParser = new SpelExpressionParser();\n        Expression exp = expressionParser.parseExpression(transformed);\n        return (boolean) exp.getValue();\n    }\n\n    public static String getSourceWithOverriddenObjectsCallCacheKey(String connectionId) {\n        return String.format(DuctConstants.SRC_OBJECTS_WITH_OVERRIDDEN_CALL_CACHE_KEY_FORMAT, RequestContextProvider.getTenantId(), connectionId);\n    }\n\n    public static String getObjectsCallCacheKey(String connectionId) {\n        return String.format(DuctConstants.OBJECTS_CALL_CACHE_KEY_FORMAT, RequestContextProvider.getTenantId(), connectionId);\n    }\n\n    public static String getMSDynamicsAccessCacheKey(String connectionId) {\n        return String.format(DuctConstants.MS_DYNAMICS_ACCESS_KEY_CACHE_FORMAT, RequestContextProvider.getTenantId(), connectionId);\n    }\n\n    public static String getObjectsSuperclassCacheKey(String connectionId) {\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"720d8280-cd9d-4aa7-8b30-8acc428c168b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":181,"endLine":202,"content":"nNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            List dataList = new ArrayList();\n            Map<String, Object> jsonMap = new ObjectMapper().convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n            });\n            dataList.add(jsonMap);\n            externalSystemResponse.put(DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        CaasConnector","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2319fe37-f286-424a-9bca-c4918afb2e23","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":123,"endLine":140,"content":"Mapping.getCriteria(), fieldNameToDataTypeMap, fieldNameToFieldDefinitionMap, ignoreMetadataFields,caasConnectorConfig, ductJobMapping.getResourceName())));\n            }\n            stringBuilder.append(\" limit \").append(limit).append(SPACE);\n            if (null != ductJobMapping.getNextPageToken())\n                stringBuilder.append(\" offset \").append(ductJobMapping.getNextPageToken()).append(SPACE);\n            Map<String, Object> queryParams = new HashMap<>();\n            queryParams.put(\"q\", stringBuilder.toString());\n            log.info(\"soql query generated: {}\", stringBuilder);\n            externalSystemResponse = salesforceFetchService.getSyncDataUsingSOQL(stringBuilder.toString(), getSfdcApiVersion(pnpConnectionsInfo), pnpConnectionsInfo);\n            List<Map<String, Object>> records = DuctUtils.OBJECT_MAPPER.convertValue(externalSystemResponse.get(RECORDS_KEYWORD), new TypeReference<List<Map<String, Object>>>() {\n            });\n            queryOutputSize = records.size();\n            externalSystemResponse.put(RECORDS_KEYWORD, records);\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(populateNextPageToken(ductJobMapping, queryOutputSize)).\n                tenantId(ductJobMappin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0c65f7a-2ebe-4e89-8a96-3b6eedce543f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDao.java","startLine":1,"endLine":47,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.data.mongodb.core.query.Query;\n\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * Created by :\n * author : Vipin Sharma\n * date : 22/04/16\n */\npublic interface PNPConnectionInfoDao extends AbstractEntityDao<PNPConnectionsInfo> {\n\n    void markDeleted(String connectionId);\n\n    PNPConnectionsInfo findByConnectionId(String connectionId);\n\n    PNPConnectionsInfo findByConnectionIdIncludingDeleted(String connectionId);\n\n    PNPConnectionsInfo findByName(String connectionName);\n\n    PNPConnectionsInfo findByNameAndConnectionType(String connectionName, ConnectorType connectorType);\n\n\n    List<PNPConnectionsInfo> getAllConnectionForTenant(Query query);\n\n    void hardDeleteConnectionByConnectionId(String connectionId);\n\n    int hardDeleteByTenantId(String tenantId);\n\n    PNPConnectionsInfo findConnectionByAccessKey(String accessKey);\n\n    List<PNPConnectionsInfo> getAllConnectionByConnectorType(ConnectorType connectorType);\n\n    List<PNPConnectionsInfo> findAllAuthorizedConnections(ConnectorType connectorType);\n\n    List<PNPConnectionsInfo> findAllLinkedConnections(ConnectorType connectorType);\n\n    PNPConnectionsInfo findAuthorizedAndLinkedPrimaryConnectionByCRMId(String externalSys","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8d3fe95-f04c-4ddc-b6ef-fda654819f9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":100,"endLine":117,"content":"ourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            Map<String, String> queryParm = new HashMap<>();\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails.isQueryParam()) {\n                    queryParm.put(apiConfigAttributes.getPaginationDetails().getRequestKey(), ductJobMapping.getNextPageToken());\n                }\n            }\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParm);\n            Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.X","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ffdac24-49ea-4ed6-85ab-84322f926e39","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":311,"endLine":335,"content":"taEngineConfig);\n            return true;\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n\n    private void updateWidgetSetup(PNPConnectionsInfo pnpConnectionsInfo) {\n        if(pnpConnectionsInfo.getConnectionType().equals(ZENDESK) && pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED_AND_LINKED)){\n            String snId = ((LinkedHashMap) pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\"))\n                    .get(\"siteAddress\").toString();\n            TenantMasterQuery tenantMasterQuery = new TenantMasterQuery();\n            tenantMasterQuery.setZendeskSubdomain(snId);\n            Tenant tenant = tenantMasterDAO.findOne(tenantMasterQuery);\n            final AccountQuery accountQuery = getAccountQuery(snId);\n            AccountDetail accountDetail = accountDAO.findOne(accountQuery);\n            if(tenant != null){\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED_AND_LINKED);\n                accountDetail.setTokenDetail(pnpConnectionsInfo.getTokenDetail());\n                accountDetail.getProperties().put(IPAAS_CONNECTION, pnpConnectionsInfo.isIpaasConnection());\n                accountDetail.getProperties().put(DuctConstants.VERSION, ZendeskVersionConstants.ZENDESK_V2.getVersion());\n                accountDAO.update(accountDetail);\n            }else{\n                try {\n                    String connectionIdFromAccount = accountDetail.getProperties().getOrDefault(\"connectionId\",Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80dd1576-b0c7-4991-90d1-c503695e5333","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/MockSFAuthorizer.java","startLine":71,"endLine":83,"content":"fo);\n      requestInfo.setAutheticatedBy(AuthenticationSource.SFDC.getAuthSource());\n\n      return requestInfo;\n    } catch (SystemException e) {\n      LOGGER.error(\"Could not fetch the tenant based on an external id\", e);\n      throw e;\n    } catch (Exception e) {\n      LOGGER.error(\"Could not fetch the tenant based on an external id\", e);\n      throw new SystemException(e, PNP_AUTHENTICATION_ERROR);\n    }\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"405f344e-bbe1-438d-8b8e-47ec0faedcdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":47,"endLine":95,"content":"viceImpl;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.google.common.collect.Maps;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StopWatch;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.bean.IPaasConstants.CALLBACK_AUTH_URL;\nimport static com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit.MILLIS;\n\n@Service\n@Slf4j\npublic class DuctServiceImpl implements DuctService {\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    private ConnectorDataSourceFactory connectorDataSourceFactory;\n\n    @Autowired\n    private DuctJobMappingDao ductJobMappingDao;\n\n    @Autowired\n    private GainsightHubspotFetchProcessor gainsightHubspotFetchProcessor;\n\n\n    @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    @Autowired\n    CaasMetadataFactory ca","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8cdeae57-9714-4698-9c97-611ddfbb15ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":197,"endLine":226,"content":"utIfAbsent(\"security_code\", String.valueOf(DeploymentProperties.getProperties()\n                    .getProperty(\"uc.gs.connect.secure.code\")));\n        }\n\n        dpWorkflowWebhookDetailsDTO.setHeaders(headersMap);\n        List<WorkflowWebhookJobKeys> jobKeysList = Lists.newArrayList(WorkflowWebhookJobKeys.JOB_ID,\n                WorkflowWebhookJobKeys.JOB_STATUS,\n                WorkflowWebhookJobKeys.MDA_REQUEST_ID,\n                WorkflowWebhookJobKeys.TENANT_ID);\n\n\n        List<WorkflowWebhookTaskKeys> webhookTaskKeys = Lists.newArrayList(WorkflowWebhookTaskKeys.MESSAGE,\n                WorkflowWebhookTaskKeys.S3_EXPORT_PATH,\n                WorkflowWebhookTaskKeys.TASK_ID,\n                WorkflowWebhookTaskKeys.RECORD_COUNT,\n                WorkflowWebhookTaskKeys.TASK_NAME,\n                WorkflowWebhookTaskKeys.TASK_STATUS);\n\n        dpWorkflowWebhookDetailsDTO.setJobKeys(jobKeysList);\n        dpWorkflowWebhookDetailsDTO.setTaskKeys(webhookTaskKeys);\n        return dpWorkflowWebhookDetailsDTO;\n    }\n\n    private DPWorkflowTaskDetailsDTO getTasks(DuctJobMapping ductJobMapping, List<DPWorkflowTaskDetailsDTO> taskDetailsDTOList,\n                                              String rootTaskId, List<String> listOfChildTaskId, ObjectDefinition objectDefinition) throws CaasException {\n        DPWorkflowTaskDetailsDTO fetchTask;\n        DPWorkflowTaskDetailsDTO filterTask;\n        // todo owner job - not honoured\n        fetchTask = generateWorkflowTask(ductJobMapping,\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"128e9ae0-348c-43db-b39a-bc32db38a975","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":129,"endLine":151,"content":");\n            dataExtractionRequest.setUserToken(SecretData.fromValue(userTokenRequest));\n            if (ductJobMapping.getCriteria() != null)\n                dataExtractionRequest.setFilterRule(DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, new ArrayList<>(),caasConnectorConfig, ductJobMapping.getResourceName()));\n            dataExtractionRequest.setNextPage(ductJobMapping.getNextPageToken());\n\n            dataExtractionRequest.setCloudElementsBaseUrl(IpaasFeatureToggleUtility.getCEBaseURL());\n            dataExtractionRequest.setFields(new ArrayList<>());\n            for (String field : ductJobMapping.getFields()) {\n                FieldInfo fieldInfo = new FieldInfo();\n                fieldInfo.setJsonPath(field);\n                dataExtractionRequest.getFields().add(fieldInfo);\n            }\n            Map properties = new HashMap();\n            properties.put(PAGE_SIZE, limit);\n            dataExtractionRequest.setProperties(properties);\n\n            dataExtractionRequest.setFilterQeueryParams(filters(ductJobMapping.getFilters()));\n            dataExtractionRequest.setDuct(true);//todo for testing\n\n            DuctResponseDTO ductResponseDTO = paginatedDataExtractionService.extractSyncData(dataExtractionRequest);\n            return DuctResponse.builder().externalSystemResponse(ductResponseDTO.getExternalSystemResponse()).nextPageToken(ductResponseDTO.getNextPageToken()).build();\n        } catch (Ex","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85ca9e71-70ad-48df-a2fc-d698295b2e2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":243,"endLine":265,"content":"teria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.ZUORAV2);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria,fieldNameDataTypeMap,fieldNameMetaMap,null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        try{\n        Map additionalProperties = new HashMap();\n        additionalProperties.putAll(connectorConfig.getExternalJarAdditionalProperties());\n        additionalProperties.put(\"connectorType\", ConnectorType.ZUORAV2.getValue());\n        additionalProperties.put(\"query\", getZuoraQuery(ductJobMapping));\n        return additionalProperties;\n        } catch (CaasException ex) {\n            log.error(\"Error while getting query for Zuora connector\", ex);\n        }\n        return connectorConfig.getExternalJarAdditionalProperties();\n    }\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0a397cd-2a7b-4648-ab5c-daf0cd98d2e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":131,"endLine":155,"content":"fetching access token\", e);\n                    DuctUtils.throwError(CaasValidationCode.MS_TEAMS_INVALID_CREDENTIALS.getGsEventCode(), CaasValidationCode.MS_TEAMS_INVALID_CREDENTIALS.getUserText(), \"Error in fetching access token\");\n                }\n                try {\n                    updateTokenDetails(ductJobMapping.getConnectionId(), tokenDetails);\n                    return fetchSynchronizedDataWithPagination(ductJobMapping, dataApi, tokenDetails);\n\n                } catch (Exception e) {\n                    log.error(\"Error in fetching synchronized data\", e);\n                    throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n                }\n\n            } else {\n                DuctUtils.throwError(CaasValidationCode.MULTI_RECORD_FETCH_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.MULTI_RECORD_FETCH_NOT_SUPPORTED.getUserText(), \"Multi record fetch not supported for \" + resourceName);\n                return null;\n            }\n        } else {\n            DuctUtils.throwError(CaasValidationCode.API_CONFIG_NOT_FOUND.getGsEventCode(), CaasValidationCode.API_CONFIG_NOT_FOUND.getUserText(), resourceName + \" API Config not found\");\n            return null;\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9b1b4c8b-2ea8-49ea-8c7a-3ab334088e0a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":454,"endLine":489,"content":"Map<String, Object> removeCEPropertiesFromIpaasPropertiesIfPresent(PNPConnectionsInfo pnpConnectionsInfo) {\n        try {\n            DuctConnectorCalloutUtil.deleteCEInstance(pnpConnectionsInfo);\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to delete CE Instance. Won't impact the flow\", e);\n        }\n        Map<String, Object> ipaasProperties = new HashMap<>();\n        if(pnpConnectionsInfo.getProperties().containsKey(IPAAS_PROPERTIES)){\n        ipaasProperties = MAPPER.convertValue(pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES), new com.fasterxml.jackson.core.type.TypeReference<Map<String, Object>>() {\n        });\n        if (ipaasProperties.containsKey(IPAAS_INSTANCE_ID))\n            ipaasProperties.remove(IPAAS_INSTANCE_ID);\n        if (ipaasProperties.containsKey(IPAAS_INSTANCE_TOKEN))\n            ipaasProperties.remove(IPAAS_INSTANCE_TOKEN);\n        }\n        return ipaasProperties;\n    }\n\n    public static String valueOf(Object object) {\n        if (object == null) {\n            return null;\n        }\n        return String.valueOf(object);\n    }\n\n    public static <T> T deepCopy(T obj, Class<T> clazz) {\n        return convertJsonToObject(convertObjectToJson(obj), clazz);\n    }\n\n    public static <T> T convertJsonToObject(String json, Class<T> clazz) {\n        return convertJsonToObject(json, clazz, false);\n    }\n\n    public static String convertObjectToJson(Object obj) {\n        return convertObjectToJson(obj, false);\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf14ceb9-118a-4820-9d23-169ce7ff21c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesConfigDAOImpl.java","startLine":54,"endLine":83,"content":" Query query = new Query().addCriteria(Criteria.where(\"connectorType\").is(connectorType));\n        query.addCriteria(Criteria.where(\"objectName\").is(objectName));\n        getMongoTemplate().remove(query, CaasObjectAttributesConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasObjectAttributesConfig caasObjectAttributesConfig, String s) {\n        caasObjectAttributesConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasObjectAttributesConfig caasObjectAttributesConfig, String s) {\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(CaasObjectAttributesConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectAttributesConfig> listObjectConfigAttributes(ConnectorType connectorType) {\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        return getMongoTemplate().find(query, CaasObjectAttributesConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2e910839-b39a-4f9b-bc51-052aa7943b80","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountGlobalMapping.java","startLine":135,"endLine":157,"content":";\n  }\n\n  public void setEventMeasureMappings(List<AccountEventMeasureMapping> eventMeasureMappings) {\n    this.eventMeasureMappings = eventMeasureMappings;\n  }\n\n  @Override\n  public String toString() {\n    return \"AccountGlobalMapping{\" +\n        \"systemDefined=\" + systemDefined +\n        \", gsDefined=\" + gsDefined +\n        \", custom=\" + custom +\n        \", measures=\" + measures +\n        \", accountIdentifier=\" + accountIdentifier +\n        \", userIdentifier=\" + userIdentifier +\n        \", eventIdentifier=\" + eventIdentifier +\n        \", instanceIdentifier=\" + instanceIdentifier +\n        \", timestampIdentifier=\" + timestampIdentifier +\n        \", eventMeasureMappings=\" + eventMeasureMappings +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"692c757f-3693-425a-8789-e910e1af2bd3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":120,"endLine":143,"content":"fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName);\n            filterRules.add(internalFilterRule);\n        }\n        filterRule.setRules(filterRules);\n        return filterRule;\n    }\n\n    public static FilterRule getFilterRule(Criteria baseCriteria, Map<String, Map<String, Object>> objectToFieldDBNameToGSDataTypeMap,\n                                                                    Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap,\n                                                                    List<String> ignoreMetadataFieldNames, CaasConnectorConfig caasConnectorConfig, String objectName, boolean fieldsFlattened) {\n        FilterRule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        Map<String, Object> fieldNameGSDataTypeMap;\n        Map<String, GSFieldDefinition> fieldNameMetaMap;\n\n        if (baseCriteria.getFilters() != null && !baseCriteria.getFilters().isEmpty()) {\n            for (Criteria criteria : baseCriteria.getFilters()) {\n                FilterRule internalFilterRule = new FilterRule();\n                if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                    //handle if there is only one filter\n\n                    String targetFieldName;\n                    String[] fieldSplitted = criteria.getFieldName().split(\"\\\\.\");\n                    if (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ecaa7364-276b-4a30-952d-38c7df505a88","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/metadata/engine/MetadataEngineConfigDao.java","startLine":1,"endLine":15,"content":"package com.gainsight.duct.dao.metadata.engine;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\n\nimport java.util.List;\n\npublic interface MetadataEngineConfigDao extends AbstractEntityDao<MetadataEngineConfig> {\n    MetadataEngineConfig getMetadataEngineConfigByConnectorType(ConnectorType connectorType);\n\n    List<MetadataEngineConfig> getConnectorConfigs(ConnectorType connectorType);\n\n    void dropCollection();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"083d5f91-8e02-45a1-b726-4c940c6949a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":169,"endLine":187,"content":"kenDetails = extractAccessDetails(ductJobMapping.getConnectionId());\n\n                try {\n                    Map<String, Object> tokenDetailMap = gainsightMSTeamsChannelFactory.getAccessToken(tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken());\n                    tokenDetails.setAccessToken(tokenDetailMap.get(ACCESS_TOKEN).toString());\n                    tokenDetails.setRefreshToken(tokenDetailMap.get(REFRESH_TOKEN).toString());\n                    updateTokenDetails(ductJobMapping.getConnectionId(), tokenDetails);\n\n                    if (ObjectUtils.isNotEmpty(teamsUserId)) {\n                        if(null != caasObjectApiConfig.get().getAdditionalProperties().get(FETCH_BY_ID) && (Boolean) caasObjectApiConfig.get().getAdditionalProperties().get(FETCH_BY_ID)\n                                && null != caasObjectApiConfig.get().getAdditionalProperties().get(FETCH_BY_ID_API)) {\n                            recordId = fetchMeetingIdForRecordingsAndTranscripts(caasObjectApiConfig.get().getAdditionalProperties().get(FETCH_BY_ID_API).toString(),\n                                    teamsUserId, recordId, tokenDetails);\n                        }\n                        String url = String.format(dataApi, teamsUserId, recordId);\n\n                        return fetchSynchronizedDataWithoutPagination(ductJobMapping, url, tokenDetails);\n                    } else {\n                        DuctUtils.throwError(CaasValidationCode.MSTEAMS_USER_ID","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef30730b-f434-44b1-a4ba-3c4ac0e00f51","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":525,"endLine":550,"content":"           fieldsNotPresent.add(ductColumnMapping.getFieldName());\n            }\n\n            if (!isIdentifierPresent && ductColumnMapping.getIsKeyField()) {\n                isIdentifierPresent = true;\n            }\n        }\n\n        if (!fieldsNotPresent.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", fieldsNotPresent));\n        }\n\n        if (!isIdentifierPresent && (DuctDataOperation.UPDATE.equals(ductDataOperation) || DuctDataOperation.UPSERT.equals(ductDataOperation))) {\n            DuctUtils.throwError(CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getGsEventCode(), CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText(),\n                    CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText());\n        }\n\n        if (!readOnlyFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getGsEventCode(), CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText(),\n                    \"Some of the fields not supported for writeback in the source system: \" + String.join(\",\", readOnlyFields));\n        }\n    }\n\n    private void validateS3Info(DuctJobMapping ductJobMapping) throws CaasException {\n        if (ductJobMapping.getCaasS3FileDetails() == null || ductJobMapping.getCaasS3FileDetai","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"872f8319-2199-4e70-83f7-42fe04016fd9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/event/DuctEventService.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.event;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\npublic interface DuctEventService {\n    public void publishConnectionEvent(PNPConnectionsInfo pnpConnectionsInfo,String operation);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c245faae-beab-4a0a-ad1f-ebb863524d07","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/MetadataGenerationProcessor.java","startLine":76,"endLine":91,"content":"n) {\n                log.error(\"Error while processing MetadataGenerationProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.METADATA_GENERATION_TASK.getName());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4de1b518-83f4-4d96-9924-c01bbebd63b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountDetail.java","startLine":163,"endLine":186,"content":"yptionEnabled() {\n        return StringUtils.isNotEmpty(getKeyId());\n    }\n\n    public boolean isGenerateErrorFile() {\n        return Boolean.parseBoolean(getPropertyValue(this, GENERATE_ERROR_FILE));\n    }\n\n    public SNSPayload getSnsDetails() {\n        return snsDetails;\n    }\n\n    public void setSnsDetails(SNSPayload snsDetails) {\n        this.snsDetails = snsDetails;\n    }\n\n    public String getKeyId() {\n        return getPropertyValue(this, KEY_ID);\n    }\n\n    private static String getPropertyValue(final AccountDetail accountDetail, String propertyKey) {\n        return GainsightUtils.valueOf(GainsightCollectionUtils.nullSafeMap(accountDetail.getProperties()).get(propertyKey));\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7b53e36-7de1-4124-99c1-aab018eb3413","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":705,"endLine":723,"content":"ToDynamicsEnabled && field.contains(PERIOD)) {\n                String[] sourceFieldNameList = field.split(\"\\\\.\");\n                relationshipName = sourceFieldNameList[0] + PERIOD + sourceFieldNameList[1];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = relationshipNameToObjectNameMap.get(relationshipName);\n                    if (!baseAttributes.containsKey(relationBaseObject)) {\n                        baseAttributes.put(relationBaseObject, service.getObjectAttributes(relationBaseObject, pnpConnectionsInfo, false).get(relationBaseObject));\n                    }\n\n                    List<GSFieldDefinition> fields = baseAttributes.get(ductJobMapping.getResourceName()).getFields();\n                    String finalRelationshipName = relationshipName;\n                    fields.addAll(baseAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                if (ductJobMapping.getFields().contains(finalRelationshipName + \".\" + i.getFieldName())) {\n                                    GSFieldDefinition gsFieldDefinition = DuctUtils.cloneGSFieldDefinition(i);\n                                    gsFieldDefinition.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n                                    gsFieldDefinition.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                    return gsFieldDefinition;\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1e1de6ea-8b09-4539-bd96-4e56f0360395","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/TokenDetails.java","startLine":1,"endLine":44,"content":"package com.gainsight.duct.beans;\n\nimport java.io.Serializable;\n\npublic class TokenDetails implements Serializable {\n    private static final  Long serialVersionUID = -1L;\n\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public String getAccessToken() {\n        return accessToken;\n    }\n\n    public void setAccessToken(String accessToken) {\n        this.accessToken = accessToken;\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51c8361d-83f2-42e1-93e7-6cef39819ccb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct;\n\nimport com.gainsight.bean.AccessKeyInfo;\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.bean.base.connection.PendoConnectionDetail;\nimport com.gainsight.bean.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.SimpleCryptor;\nimport com.gainsight.dao.AccessKeyDao;\nimport com.gainsight.dao.AccessKeyQuery;\nimport com.gainsight.dao.TenantMasterDAO;\nimport com.gainsight.dao.lock.MutexService;\nimport com.gainsight.duct.audit.DuctAuditLogClientService;\nimport com.gainsight.duct.authorization.CallOutOAuthService;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.OAuthV2TokenDetail;\nimport com.gainsight.duct.beans.account.AccountDetail;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.bionicrules.helper.BionicRuleHttpHelper;\nimport com.gainsight.duct.bionicrules.helper.BionicRuleHttpResponseWrapper;\nimport com.gainsight.duct.connection.CaasConnectionFactory;\nimport com.gainsight.duct.connection.CaasConnectionService;\nimport com.gainsight.duct.constants.Du","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2c2f0f61-556c-4e97-9305-55065ed8877c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":244,"endLine":267,"content":"Utils.randomAlphanumeric(10));\n//        dpWorkflowTaskDetailsDTO.setTaskName(DHUtils.generateCleanTaskName(jobInfo.getJobName()));\n        dpWorkflowTaskDetailsDTO.setChildrenTaskIds(Lists.newArrayList());\n\n        DPWorkflowTaskTypeDetailsDTO taskTypeDetailsDTO = getDpWorkflowTaskTypeDetails(dpWorkflowTaskDetailsDTO, dpTaskType);\n        dpWorkflowTaskDetailsDTO.setTaskType(taskTypeDetailsDTO);\n        if (dpTaskType.equals(DHTaskType.EXTERNALTASK)) {\n            dpWorkflowTaskDetailsDTO.setTaskName(DataHighwayUtils.generateCleanTaskName(ductJobMapping.getJobName() + \"_extract\"));\n        } else {\n            dpWorkflowTaskDetailsDTO.setTaskName(DataHighwayUtils.generateCleanTaskName(ductJobMapping.getJobName() + \"_freeform\"));\n        }\n\n        Map<String, Object> metaData = getMetadataForTask(ductJobMapping, objectDefinition, dpTaskType, parentId,null);\n        dpWorkflowTaskDetailsDTO.setMetaData(metaData);\n\n        dpWorkflowTaskDetailsDTO.setChildrenTaskIds(Lists.newArrayList());\n        return dpWorkflowTaskDetailsDTO;\n    }\n\n    public Map<String, Object> getMetadataForTask(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition,\n                                                  DHTaskType dpTaskType, String parentId,Map<String, String> fieldNameToFieldAlias) throws CaasException {\n        Set<String> fieldsToExtract = new HashSet<>();\n        fieldsToExtract.addAll(ductJobMapping.getFields());\n        DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"46cf8e81-0c4a-4230-8125-4a13102f7974","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":234,"endLine":256,"content":"getService(ductJobMapping.getConnectorType(), false);\n            DuctResponse ductResponse = connectorDataSourceService.createData(ductJobMapping, pnpConnectionsInfo);\n            return DuctResponseDTO.builder().externalSystemResponse(ductResponse.getExternalSystemResponse())\n                    .jobId(ductResponse.getJobId()).status(ductResponse.getDuctStatus()).connectionId(ductResponse.getConnectionId())\n                    .totalNumberOfRecords(ductResponse.getTotalNumberOfRecords()).build();\n        }\n    }\n\n    @Override\n    public DuctResponseDTO synchronousUpdate(DuctRequestDTO ductRequestDTO) throws Exception {\n        PNPConnectionsInfo pnpConnectionsInfo = null;\n        ductRequestDTO.setDuctDataOperation(DuctDataOperation.UPDATE);\n        Map<String, ObjectDefinition> objectDefinitionMap = null;\n\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())) {\n            GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreErrorCode.INVALID_PARAMETER,\n                    \"Connection Id should be present\", \"Connection Id should be present\", 400);\n            pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            validateMappings(ductRequestDTO);\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03ad1ce0-9f2a-4eac-a62f-74a995fd0336","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":342,"endLine":373,"content":"erence<Map<String, Object>>() {\n            });\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n            try {\n                if (response.getEntity().getContent() != null) {\n                    response.getEntity().getContent().close();\n                }\n            } catch (Exception e) {\n                log.error(\"Error in input stream \", e);\n            }\n        }\n        return responseMap;\n    }\n\n    private String populateNextPageToken(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(NEXT_PAGE_TOKEN) != null) {\n            return externalSystemResponse.get(NEXT_PAGE_TOKEN).toString();\n        }\n        return null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(TOTAL_RECORDS) != null) {\n            return Integer.parseInt(externalSystemResponse.get(TOTAL_RECORDS).toString());\n        }\n        return 0;\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e556d389-a6e1-4451-91b5-9985e4627314","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":916,"endLine":936,"content":"romDB.setIpaasConnection(pnpConnectionInfoFromUI.isIpaasConnection());\n                    updateConnectionProperties(pnpConnectionInfoFromUI, caasConnectorConfig, pnpConnectionsInfoFromDB);\n                    break;\n\n                case SEGMENT_IO:\n                    segmentPreProcessing(pnpConnectionInfoFromUI);\n\n                    updateAccessKeyInfoForRequest(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(ACCESS_SECRET)), pnpConnectionsInfoFromDB);\n                    pnpConnectionsInfoFromDB\n                            .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(ACCESS_SECRET))\n                                    .trim(), pnpConnectionsInfoFromDB\n                                    .getConnectionType()));//can be removed and be saved only at one place\n                    if (null == pnpConnectionsInfoFromDB.getAccessKeyHashed()) {\n                        pnpConnectionsInfoFromDB.setAccessKeyHashed(GainsightUtils\n                                .encryptToCSV(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(ACCESS_SECRET))).trim());\n                        generateAccessKeyDetails(pnpConnectionsInfoFromDB);\n                    } else {\n                        pnpConnectionsInfoFromDB.setAccessKeyHashed(GainsightUtils\n                                .encryptToCSV(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties().get(ACCESS_SECRET))).trim());\n\n           ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99e9f8bb-2f81-4f16-b6ad-5e2ba49a79a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/TargetSystem.java","startLine":1,"endLine":6,"content":"package com.gainsight.duct.beans;\n\npublic enum TargetSystem {\n    GAINSIGHT,\n    EXTERNAL\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"098dbb3c-8738-4368-a97c-157bd9904a08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":312,"endLine":338,"content":"                 if (fieldName.startsWith(\"fields.\")) {\n                        fieldName = fieldName.substring(\"fields.\".length());\n                    }\n                    flatCriteria.setFieldName(fieldName); // Update the fieldName in flatCriteria\n                    return flatCriteria;\n                })\n                .min((criteria1, criteria2) -> {\n                    Object value1 = criteria1.getValues() instanceof List ? ((List) criteria1.getValues()).get(0) : criteria1.getValues();\n                    Object value2 = criteria2.getValues() instanceof List ? ((List) criteria2.getValues()).get(0) : criteria2.getValues();\n                    return value1.toString().compareTo(value2.toString());\n                })\n                .orElse(null);\n\n        if (Objects.isNull(requiredSingleCriteria)) {\n            return getDefaultFallbackCriteria();\n        } else {\n            Criteria criteria = getDefaultFallbackCriteria();\n            criteria.setFilters(Lists.newArrayList(requiredSingleCriteria));\n            return criteria;\n        }\n\n    }\n    private void modifyCriteriaValueIfApplicable(Criteria criteria, Map<String, GSFieldDefinition> dateTimeFieldsMap)  {\n      try {\n          if (dateTimeFieldsMap.containsKey(criteria.getFieldName())) {\n              String dateTimeStr =criteria.getValues() instanceof List ? ((List) criteria.getValues()).get(0).toString() : criteria.getValues().toString();\n              String format = dateTimeFieldsMap.get(criteria.getFiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33ab6568-2aa3-48c6-8bb7-4d16332429a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZendeskConnectionService.java","startLine":94,"endLine":111,"content":"ype, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to get auth url for Zendesk : {0}\",e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, null, \"Error occurred while trying to generate authorization url\"));\n        }\n        return authUrl;\n    }\n\n    @Override\n    public PNPConnectionsInfo revokeAuthorization() {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo deleteConnection() {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79460d21-254a-40a5-8018-3af58b658f31","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":191,"endLine":211,"content":"ing.getResourceName(), pnpConnectionsInfo);\n        Map<String, String> relationshipNameToObjectNameMap = createRelationshipNameToObjectNameMap(ductJobMapping, service, baseAttributes);\n        Set<String> relationshipFieldsAlreadyAdded = new HashSet<>();\n        String relationBaseObject;\n        Map<String, ObjectDefinition> relationshipObjectAttributes;\n        String relationshipName;\n        Set<String> fieldList = new HashSet<>(ductJobMapping.getFields());\n        if(ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()))\n            fieldList.addAll(DuctUtils.getFieldListFromCriteria(ductJobMapping.getCriteria()));\n        for (String field : fieldList) {\n            if (field.contains(\".\")) {\n                relationshipName = field.split(\"\\\\.\")[0];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = relationshipNameToObjectNameMap.get(relationshipName);\n                    relationshipObjectAttributes = service.getObjectAttributes(relationBaseObject, pnpConnectionsInfo);\n                    List<GSFieldDefinition> fields = baseAttributes.get(ductJobMapping.getResourceName()).getFields();\n                    String finalRelationshipName = relationshipName;\n                    fields.addAll(relationshipObjectAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                i.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1bd93321-1527-4d28-89bb-aeaf5882ebf5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriver.java","startLine":25,"endLine":30,"content":"dataRefresh(String connectionId, String objectName, String recordId) throws CaasException;\n\n    MetadataGenerationResponse getMetadataGenerationStatus(String jobId);\n\n    Object getPreviewRawData(String connectionId, String objectName, String jobId) throws CaasException;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fb9d558-d688-42c9-adb7-96003ca93ce4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":191,"endLine":216,"content":" getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n        if (!first.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        ResourceConfig resourceConfig = first.get();\n        List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n        });\n        if (resourceConfig.getMetadataTransformationConfig() != null) {\n            data = sanitizeData(data, resourceConfig);\n        }\n        responseList.addAll(data);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c652a331-2159-402f-b2e8-0498d2ab3c49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ConnectorDataSourceFactory.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class ConnectorDataSourceFactory {\n\n    private final List<ConnectorDataSourceService> services;\n\n    public ConnectorDataSourceService getService(ConnectorType connectorType, boolean isIpaas) {\n        for(ConnectorDataSourceService service:services) {\n            if(service.canHandle(connectorType, isIpaas)) {\n                return service;\n            }\n        }\n        log.error(\"Not able to find service for {}\", connectorType);\n        throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8ca5265-2f96-402f-8723-335189d90ade","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctGSServiceUrlUtil.java","startLine":45,"endLine":89,"content":"  return getUrlWithFallback(null, \"product.dataload.url\");\n    }\n\n    public static String getPersonApiUrl() {\n        return getUrlWithFallback(null, \"gs.people.ms.base.url\");\n    }\n\n    public static String getOpportunityApiUrl() {\n        return getUrlWithFallback(null, \"opportunity.dataload.url\");\n    }\n\n    public static String getRateLimitingApiUrl() {\n        return getUrlWithFallback(null, \"gs.rate.limiter.service.host\");\n    }\n\n    public static String getObjectMetadataApiUrl() {\n        return getUrlWithFallback(GSService.GS_OBJECT_METADATA, \"omd.ms.base.url\");\n    }\n\n    public static String getCDPApiUrl() {\n        return getUrlWithFallback(null, \"cdp.host\");\n    }\n\n    public static String getGalaxyApiUrl() {\n        return getUrlWithFallback(GSService.GS_GALAXY_ENDPOINT, \"galaxy.base.url\");\n    }\n\n    public static String getGSApiUrl() {\n        return getUrlWithFallback(GSService.GS_API_ENDPOINT, \"gs.api.url\");\n    }\n\n    public static String getGSAwsApiUrl() {\n        return getUrlWithFallback(GSService.GS_AWS_API_ENDPOINT, \"gs.api.aws.url\");\n    }\n\n    public static String getUCConnectPxApiUrl() {\n        return getUrlWithFallback(null, \"uc.gs.connect.px.url\");\n    }\n\n    private static String getUrlWithFallback(GSService gsService, String fallbackKey) {\n        String serviceUrl = StringUtils.EMPTY;\n        if (Objects.nonNull(gsService)) {\n            try {\n                serviceUrl = GSServiceURLFactory.getServiceURL(gsService);\n            } catch (Throw","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"808b524d-903e-4089-abb1-8d9eed2b3ccd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/MetadataCommonUtil.java","startLine":48,"endLine":73,"content":").toString(), v ->v));\n\n            for(Map defaultAttribute : defaultAttributes) {\n                if(!fieldNameToFieldMap.containsKey(defaultAttribute.get(FIELD_NAME).toString())) {\n                    gsFields.add(defaultAttribute);\n                }\n            }\n        }\n        metadata.put(FIELDS, gsFields);\n    }\n\n    public static void overrideAttributesFromConfigAtTenantLevel(List<CaasObjectAttributesTenantConfig> configAttributes, Map metadata) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        List<Map> gsFields = objectMapper.convertValue(metadata.get(FIELDS), new TypeReference<List<Map>>() {\n        });\n        List<Map<String, Object>> overrideAttribute;\n        Map<String, Object> tempOverrideAttribute;\n        for (CaasObjectAttributesConfig configAttribute : configAttributes) {\n            overrideAttribute = GainsightCollectionUtils.nullSafeList(configAttribute.getOverrideAttribute());\n            for (Map<String, Object> stringObjectMap : overrideAttribute) {\n                tempOverrideAttribute = new HashMap<>(stringObjectMap);\n                String key = tempOverrideAttribute.get(OVERRIDE_KEY).toString();\n                String value = tempOverrideAttribute.get(OVERRIDE_KEY_VALUE).toString();\n                tempOverrideAttribute.remove(OVERRIDE_KEY);\n                tempOverrideAttribute.remove(OVERRIDE_KEY_VALUE);\n                List<Map> fieldsToBeUpdated = gsFields.stream().filter(meta -> meta.containsKey(key) && meta.get(key).toSt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6901b44-3a66-4777-a60e-11818d13a07d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GsObjectsLoadServiceImpl.java","startLine":34,"endLine":64,"content":"ip_type\");\n\n    @Override\n    public GSModule getType() {\n        return GSModule.GS_OBJECTS;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return GS_OBJECTS_ALLOWED_OBJECTS.contains(resource.toLowerCase());\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException{\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating Payload for Company object\");\n            ExternalActivityRequestDto externalActivityRequestDto = new ExternalActivityRequestDto();\n            externalActivityRequestDto.setRecords(ductRequestDTO.getRecords());\n            GSDTOTransformer.transformExternalActivityRequestDto(externalActivityRequestDto);\n            log.info(\"Payload for job {} is {}\",ductJobMapping.getJobId(),externalActivityRequestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n           // headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String gsObjectsUrl =  DeploymentProperties.getDeploymentProperties().getValue(\"gs.object.base.url\"); // key change\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27491094-a407-47cd-9c55-0b7aaf59aa1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":562,"endLine":586,"content":"rDataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n        DuctResponse ductResponse = StringUtils.isEmpty(recordId) ?\n                connectorDataSourceService.fetchSynchronziedData(ductJobMapping, objectDefinition,pageSize) : connectorDataSourceService.fetchSynchronziedData(recordId, ductJobMapping);\n        QueryAPIResponseBean queryAPIResponseBean = connectorDataSourceService.createQueryApiResponse(ductResponse);\n\n        if (caasConnectorConfig.isFlattenExternalResponse()) {\n            for (Map<String, Object> dataRow : queryAPIResponseBean.getRecords()) {\n                Gson gson = new GsonBuilder().create();\n                JsonParser jsonParser = new JsonParser();\n                JsonObject jsonObject = (JsonObject) jsonParser.parse(gson.toJson(dataRow));\n                dataRow.clear();\n                try {\n                    dataRow.putAll(DuctCollectionUtils.convertJSONToRecordValue(jsonObject, ductJobMapping.getFields(), objectDefinition));\n                } catch (CaasException e) {\n                    log.error(\"Some exception occurred while resolving field value due to : {}\", e.getMessage(), e);\n                }\n            }\n        }\n        InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n\n        return queryAPIResponseBean;\n    }\n\n    private void validateMappings(DuctRequestDTO ductRequestDTO) {\n        GainsightPrecondition.assertNotNull(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b882c4e-538a-4e42-82f5-aee9c8bd058a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/CaasRedisTemplateImpl.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.utils.Redis;\n\nimport com.gainsight.database.LoggingInterceptor;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport redis.clients.jedis.JedisShardInfo;\n\npublic class CaasRedisTemplateImpl implements CaasRedisTemplate {\n    private static final Logger LOGGER = LoggerFactory.getLogger(CaasRedisTemplateImpl.class);\n    private static final String REDIS_ERROR = \"Unable to close Redis connection\";\n    private static final int REDIS_TIMEOUT = 15000;\n    private static volatile JedisConnectionFactory jedisConnectionFactory;\n    private static final Object LOCK = new Object();\n    private static final String HOST = DeploymentProperties.getDeploymentProperties().getValue(\"redis.host\");\n    private static final Integer PORT =\n            Integer.valueOf(DeploymentProperties.getDeploymentProperties().getValue(\"redis.port\"));\n    private static final String PASSWORD = DeploymentProperties.getDeploymentProperties().getValue(\"redis.password\");\n\n    @Override\n    public <T> RedisTemplate<String, T> getRedisTemplate() {\n        RedisTemplate<String, T> redisTemplate = new RedisTemplate<>();\n        redisTemplate = LoggingInterceptor.intercept(\"RedisCache\", redisTemplate);\n        redisTemplate.setConnectionFactory(getJedisConnectionFactory());\n        redisTemplate.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5d84340-384e-4c0d-9c71-207066609fdb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":217,"endLine":241,"content":"jectDefinition, ObjectDefinition.class));\n    fieldsSet.addAll(metadata.get(objectName).getFields());\n    metadata.get(objectName).setFields(fieldsSet.stream().collect(Collectors.toList()));\n\n    if (metadataByConnectionIdAndObjectName != null) {\n      // adding the promoted fields to the existing metadata which we receive from source metadatapi(generated metadata from data api is not included)\n      metadataByConnectionIdAndObjectName.setMetadata(metadata);\n      metadataCacheDao.update(metadataByConnectionIdAndObjectName);\n    } else {\n      MetadataCache metadataCache = new MetadataCache(RequestContextProvider.getTenantId(), connectionId, objectName, metadata);\n      metadataCacheDao.insert(metadataCache);\n    }\n    return applyGlobalAndTenantOverrides(metadata, pnpConnectionsInfo, objectName);\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> applyGlobalAndTenantOverrides(Map<String, ObjectDefinition> objectDefinition,\n                                                                     PNPConnectionsInfo pnpConnectionsInfo, String objectName) {\n    List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n    // Overriding Default Attribute Config\n    ArrayList<EnhancedGSFieldDefinition> defaultObjectAttributes = new ArrayList<>();\n    if (!configAttributes.isEmpty())\n      configAttributes.forEach(i -> {\n        if (null != i.getDefaultObjectAttributes())\n          def","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ec02d63-9502-40fd-88e1-257a2e4650ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/CaasS3FileDetails.java","startLine":1,"endLine":24,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class CaasS3FileDetails {\n    private String filesDir;\n    private String encryptedAccessKey;\n    private String encryptedAccessSecret;\n    private String bucketName;\n    private String bucketRegion;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5e43b50b-efd1-4f8a-89a7-e1222f663615","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":185,"endLine":192,"content":"        Map<String, List<String>> superClassInfo;\n            LOGGER.info(\"populating super_class_info\");\n            superClassInfo = populateSuperClassInfo();\n            LOGGER.info(\"population of super_class_info succeeded\");\n            /**\n             * super class info is a map of object name and its super class info\n             -super_class_info\n             {\\\"asmt_metric_result\\\":[],\\\"asmt_metric\\\":[\\\"sys_metadata\\\"],\\\"contract_sla\\\":[\\\"sys_metadata\\\"],\\\"customer_account\\\":[\\\"core_company\\\"],\\\"customer_contact\\\":[\\\"sys_user\\\"],\\\"incident\\\":[\\\"task\\\"],\\\"sc_req_item\\\":[\\\"task\\\"],\\\"sc_request\\\":[\\\"task\\\"],\\\"service_entitlement\\\":[],\\\"sn_customerservice_case\\\":[\\\"task\\\"],\\\"sn_install_base_item\\\":[],\\\"sys_m2m\\\":[\\\"sys_metadata\\\"],\\\"sys_user\\\":[],\\\"task_sla\\\":[],\\\"cmdb_model\\\":[],\\\"sn_customerservice_escalation\\\":[\\\"task\\\"],\\\"u_customer_services\\\":[\\\"sys_import_set_row\\\"],\\\"sys_user_group\\\":[],\\\"problem\\\":[\\\"task\\\"],\\\"cmdb_ci_outage\\\":[],\\\"cmdb_ci_service\\\":[\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"cmdb_ci_appl\\\":[\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"cmdb_rel_ci\\\":[],\\\"cmdb_ci\\\":[\\\"cmdb\\\"],\\\"sn_install_base_m2m_affected_install_base\\\":[],\\\"asmt_assessment_instance\\\":[],\\\"cmdb_service_product_model\\\":[\\\"cmdb_model\\\"],\\\"cmdb_ci_service_business\\\":[\\\"cmdb_ci_service\\\"],\\\"cmdb\\\":[],\\\"service_offering\\\":[\\\"cmdb_ci_service\\\",\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"sc_cat_item\\\":[\\\"sys_metadata\\\"],\\\"cmn_department\\\":[],\\\"core_company\\\":[],\\\"cmdb_ci_environment\\\":[\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"ast_contract\\\":[],\\\"change_request\\","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2bd9519a-4fe5-4326-94f1-92b8cc42be0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/RedisCacheUtility.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.utils.Redis;\n\nimport com.gainsight.properties.DeploymentProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class RedisCacheUtility {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisCacheUtility.class);\n    private static final Integer CONNECTION_CONFIG_CACHE_TTL = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"ipaas.config.cache.expiry.in.seconds\", 3600);\n\n    @Autowired\n    private CaasRedisTemplate caasRedisTemplate;\n\n    private RedisTemplate getTemplate() {\n        RedisTemplate redisTemplate = caasRedisTemplate.getRedisTemplate();\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        return redisTemplate;\n    }\n\n    public Object getValue(String key) {\n        RedisTemplate template = getTemplate();\n        return template.opsForValue().get(key);\n    }\n\n    public void putValue(String key, Object value) {\n        RedisTemplate template = getTemplate();\n        template.opsForValue().set(key, value);\n        template.expire(key, CONNECTION_CONFIG_CACHE_TTL, TimeUnit.SECONDS);\n    }\n\n    public boolean putValue(String key, Object value, long expire","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f037f7d9-0dbb-4a81-84d1-1da42f5dc9bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":157,"endLine":190,"content":"Object getFilterValue(FilterRule rule) {\n        if (GainsightCollectionUtils.nullSafeList(rule.getValues()).isEmpty()) {\n            return null;\n        }\n        FieldInfo fieldInfo = rule.getValues().get(0);\n        return fieldInfo.getValue();\n    }\n\n    private static String escapeSql(String str) {\n        return str == null ? null : StringUtils.replace(str, \"'\", \"''\");\n    }\n\n    private static boolean isValidDate(String date, String pattern) {\n        try {\n            if (StringUtils.isEmpty(date) || StringUtils.isEmpty(pattern)) {\n                return false;\n            }\n            GainsightUtils.parseDate(date, pattern);\n        } catch (Exception e) {\n            log.error(\"Exception occurred: {}\", e.getMessage(), e);\n            return false;\n        }\n        return true;\n    }\n\n    private static void handleDataTypeAndOperator(String fieldName, FilterRule rule, StringBuilder evaluatedExpression,String originalDataType) throws Exception {\n        String externalDataType = originalDataType.toLowerCase();\n        String fromDateUTCStr = \"\", toDateUTCStr = \"\";\n        if ((isDate(externalDataType) || isDateTime(externalDataType)) && Objects.nonNull(getFilterValue(rule))) {\n            String userTZ = RequestContextProvider.getUserAuthInfo().getTimeZoneKey();\n\n            Date fromDateUTC;\n            if (isValidDate(String.valueOf(getFilterValue(rule)), rule.getFieldInfo().getDateTimeProperties().getFormat())) {\n                fromDateUTC = GainsightUtils.pars","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"95d1d235-2da5-4d62-adf1-65606f17c7be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":82,"endLine":108,"content":"           } else {\n                            log.error(\"Error initializing context : {}\", tenantId);\n                        }\n                    });\n                    return body;\n                }\n                throw new CaasException(String.format(\"Invalid Zoom Event : {}. Signature Validation Failed\", body), CaasValidationCode.ZOOM_EVENT_SIGNATURE_VERIFICATION_FAILED);\n            default:\n                throw new CaasException(String.format(\"%s zoom event not supported\", zoomWebHookDetails.get(EVENT)), CaasValidationCode.EVENT_TYPE_NOT_SUPPORTED);\n        }\n        return null;\n    }\n\n    private boolean isValidZoomEvent(Object body, Map<String, String> headers) throws Exception {\n        String expectedSignature = headers.get(X_ZM_SIGNATURE);\n        String message = V0 + DuctConstants.COLON + headers.get(X_ZM_REQUEST_TIMESTAMP) + DuctConstants.COLON + new ObjectMapper().writeValueAsString(body);\n        String encryptedMessage = HmacUtils.hmacSha256Hex(ZOOM_EVENT_VALIDATION_SECRET, message);\n        String signature = V0 + DuctConstants.EQUALS + encryptedMessage;\n        if (!expectedSignature.equals(signature)) {\n            log.info(\"Invalid signature. Hence ignoring the event : {}\", body);\n            return false;\n        }\n        return true;\n    }\n\n    private List<String> fetchTenantDetails(String accountId) {\n        List<PNPConnectionsInfo> pnpConnectionsInfos = GainsightCollectionUtils.nullSafeList(pnpConnectionInfoDao.findAllConnectionForConnection","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"68ec00a3-1fc6-4ce9-8650-d8e24beab643","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":237,"endLine":251,"content":"onnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(recordingList.size())\n                        .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()).build();\n            } else if (MEETINGS_KEYWORD.equalsIgnoreCase(ductJobMapping.getResourceName())\n                    && ductJobMapping.getProperties().containsKey(FETCH_MEETING_INVITEE_DETAILS)\n                    && Boolean.parseBoolean(ductJobMapping.getProperties().get(FETCH_MEETING_INVITEE_DETAILS).toString())) {\n                try {\n                    externalSystemResponseForMeetings = GainsightCollectionUtils.nullSafeMap(fetchDataFromExternalSystem(String.format(MEETINGS_END_POINT, recordId), tokenDetails));\n                    if (ObjectUtils.isNotEmpty(externalSystemResponseForMeetings) && externalSystemResponseForMeetings.containsKey(SETTINGS_KEYWORD) &&\n                            ObjectUtils.isNotEmpty(externalSystemResponseForMeetings.get(SETTINGS_KEYWORD))) {\n                        Map<String, Object> settingsMap = GainsightCollectionUtils.nullSafeMap((Map<String, Object>) externalSystemResponseForMeetings.get(SETTINGS_KEYWORD));\n                        if (settingsMap.containsKey(MEETING_INVITEES_KEYWORD) && ObjectUtils.isNotEmpty(settingsMap.get(MEETING_INVITEES_KEYWORD))) {\n                            externalSystemResponse.put(MEETING_INVITEES_KEYWORD, settingsMap.get(MEETING_INVITEES_KEYWORD));\n                        }\n                    }\n           ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"13f1aa36-2644-4996-a3bb-92a8933a208c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":756,"endLine":782,"content":"tLookupObjects().get(0).getObjectName());\n            }\n        }\n        return relationToObjectNameMap;\n    }\n\n    private File validateDynamicsWriteBackPayload(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> objectAttributes,\n                                                  DuctDataOperation ductDataOperation) throws CaasException {\n        File file;\n        try {\n            log.info(\"Starting validation for Dynamics write back Payload {}\", ductJobMapping.getJobId());\n            StopWatch stopWatch = new StopWatch();\n            stopWatch.start();\n\n            validateMappings(ductJobMapping, objectAttributes.values().iterator().next().getFields(), ductDataOperation);\n            validateS3Info(ductJobMapping);\n            validateIfFilePresent(ductJobMapping);\n            file = getFileFromS3(ductJobMapping);\n\n            long maxRecordsAllowed = DeploymentProperties.getDeploymentProperties().getLongValue(\"caas.dynamics.writeback.max.records.allowed.count\", 10000L);\n            if (UCFileUtility.getRecordCount(file) > maxRecordsAllowed) {\n                log.error(DuctErrorConstants.PNP_DYNAMICS_WB_MAX_RECORDS_LIMIT_REACHED + maxRecordsAllowed);\n                throw new CaasException(\n                        new GsExternalSystemErrorMapping(String.valueOf(HttpStatus.SC_BAD_REQUEST), DuctErrorConstants.PNP_DYNAMICS_WB_MAX_RECORDS_LIMIT_REACHED + maxRecordsAllowed,\n                                null, ductJobMapping.getJobId())\n                );\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e98bcef-c11c-41fa-b474-d24e5c07d37c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":322,"endLine":339,"content":"getMetadataConfig().getMetadataApi());\n      JsonNode resultData = null;\n      OMDConverterBaseService omdConverterFactoryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType());\n      Map<String, Object> objectDefinition = omdConverterFactoryService.addObjectDetailsToOMDFormat(objectName, pnpConnectionsInfo);\n      Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n\n      for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n        HttpRequestBase httpClientForApiCall = authService.getHttpClientForMetadataRequest(metadataEngineConfig,\n            apiConfigAttribute, objectName, pnpConnectionsInfo, flattenConnectionInfo, null);\n        Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(apiConfigAttribute.getResponseType()) && apiConfigAttribute.getResponseType().equals(ResponseType.XML);\n        resultData = metadataEngineService.executeApi(httpClientForApiCall, apiConfigAttribute.getResponseRootKey(),\n            metadataEngineConfig.getRateLimitDetails(), isXmlResponse);\n        omdConverterFactoryService.convertToOMDFormat(resultData, objectDefinition, pnpConnectionsInfo, apiConfigAttribute);\n      }\n      return objectDefinition;\n    } catch (com.gainsight.fasterxml.jackson.core.JsonProcessingException jex) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", jex.getMessage(), jex);\n      DuctUtils.populateAndInsertE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e00bff4-92c0-487c-b8ec-f94f59ecf109","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":29,"endLine":57,"content":"mpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String ELEMENT = \"element\";\n    private static final String COLUMN_LABEL = \"column_label\";\n    private static final String INTERNAL_TYPE = \"internal_type\";\n    private static final String INTERNAL_TYPE_VALUE = \"value\";\n    private static final String MANDATORY = \"mandatory\";\n    private static final String READ_ONLY_IN_SRC = \"read_only\";\n    private static final String NORMALIZABLE_INTERNAL_TYPES = \"normalizableInternalTypes\";\n    private static final String STRING = \"string\";\n\n    @Autowired\n    CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.SERVICENOW.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) {\n        if (fields.isNull() || (!fields.isArray()) || fields.size() == 0) {\n            LOGGER.info(\"Fields is supposed to be an array\");\n            return;\n        }\n\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4b6fc8d-1863-4d35-b9c2-0c42be436ac8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":1,"endLine":45,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.amazonaws.HttpMethod;\nimport com.amazonaws.services.s3.model.AmazonS3Exception;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.fcutil.DebugFeatureConfigUtil;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainSightS3;\nimport exception.SystemException;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.StopWatch;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.List;\n\n/**\n * Created by vgautam on 13/04/16.\n */\n\npublic class DuctS3Utility {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(DuctS3Utility.class);\n  public static final String CAAS_BUCKET_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"s3.caas.bucket.name\");\n\n  /**\n   * This is the max content-length supported by Unified Conn\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"643261bb-9b48-497b-aa23-d716aeb9d148","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":195,"endLine":214,"content":"nectionId());\n        String jobId = request.getJobId();\n\n        CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.DYNAMICS, pnpConnectionsInfo.isIpaasConnection());\n        boolean resolvePicklistOptions = (boolean) GainsightCollectionUtils.nullSafeMap(request.getProperties()).getOrDefault(DuctConstants.RESOLVE_PICKLIST_OPTIONS, false);\n        Map<String, ObjectDefinition> metaInfoDefinitionMap;\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n        if (GainsightCollectionUtils.nullSafeMap(request.getProperties()).containsKey(DuctConstants.DYNAMICS_OMD_META_DATA)) {\n            metaInfoDefinitionMap = (Map<String, ObjectDefinition>) request.getProperties().get(DuctConstants.DYNAMICS_OMD_META_DATA);\n        } else {\n            metaInfoDefinitionMap = service.getObjectAttributes(request.getResourceName(), pnpConnectionsInfo, resolvePicklistOptions, request);\n        }\n\n        String pluralName = metaInfoDefinitionMap.get(request.getResourceName()).getLabelPlural();\n        String filterQuery = null;\n        if (null != request.getCriteria()) {\n            try {\n                Map<String, Map<String, Object>> objectToFieldDBNameToGSDataTypeMap = new HashMap<>();\n                Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap = new HashMap<>();\n                objectToFieldDBNameToGSDataTypeMap.put(request.getResourceName(), metaInfoDefiniti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63d96a9f-64e1-4c64-a2c8-26c9323c874e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":303,"endLine":324,"content":"Source(MetadataEngineConfig metadataEngineConfig,\n                                                      PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws CaasException {\n    try {\n      Optional<ResourceConfig> optionalResourceConfig = metadataEngineConfig.getResources().stream().filter(i -> objectName.equals(i.getResourceName())).findFirst();\n\n      ResourceConfig resourceConfig;\n      if (!optionalResourceConfig.isPresent()) {\n        Optional<ResourceConfig> optionalDefaultResourceConfig = metadataEngineConfig.getResources()\n                .stream().filter(resource -> resource.isDefaultResource()).findFirst();\n        if (!optionalDefaultResourceConfig.isPresent() || !optionalDefaultResourceConfig.get().getResourceName().equals(\"{objectName}\")) {\n          DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(),\n                  CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n        }\n        resourceConfig = optionalDefaultResourceConfig.get();\n        resourceConfig.setResourceName(objectName);\n      } else {\n        resourceConfig = optionalResourceConfig.get();\n      }\n\n      List<ApiConfigAttributes> apiConfigAttributes = GainsightCollectionUtils.nullSafeList(resourceConfig.getMetadataConfig().getMetadataApi());\n      JsonNode resultData = null;\n      OMDConverterBaseService omdConverterFactoryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"700b4ec8-f32c-4926-8032-dc58e22e0e54","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ZoomCaasMetadataServiceImpl.java","startLine":24,"endLine":57,"content":"tory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\n@Order(1100)\npublic class ZoomCaasMetadataServiceImpl implements CaasMetadataService {\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectApiConfigDao caasObjectApiConfigDao;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.ZOOM.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<CaasObjectApiConfig> caasObjectApiConfigs = caasObjectApiConfigDao.getConnectorConfigs(pnpConnectionsInfo.getConnectionType());\n        Collection<String> zoomObjects = caasObjectApiConfigs.stream().map(CaasObjectApiConfig::getObjectName).collect(Collectors.toList());\n        List<Map<String, Object>> returnObj = new ArrayList<>(zoomObjects.size());\n        for (String obj : zoomObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57958dd9-2e2e-47d1-af1f-426b4e64a870","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectConfigDAO.java","startLine":1,"endLine":15,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\n\nimport java.util.Collection;\n\npublic interface CaasObjectConfigDAO extends AbstractEntityDao<CaasObjectConfig> {\n  Collection<CaasObjectConfig> getCaasObjectList();\n  CaasObjectConfig getCaasObjectConfig(ConnectorType connectorType) throws CaasException;\n  CaasObjectConfig upsertConfigs(CaasObjectConfig objectListConfig);\n  void dropCollection();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7567ebdf-5830-4801-a10e-fd8184bae499","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctResponseDTO.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.duct.beans.DuctStatus;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class DuctResponseDTO implements Serializable {\n    private static final long serialVersionUID = -6266857789445629060L;\n    private String jobId;\n    private String successFilePath;\n    private String errorFilePath;\n    private String errorFilePathS3Link;\n    private String resourceName;\n    private String sourceErrorResponseFile;\n    private String connectionId;\n    private List<String> fields;\n    private DuctStatus status;\n    private long totalNumberOfRecords;\n    private Object data;\n    private File outputFile;\n    private String outputFileLocation;\n    private Map<String, Object> externalSystemResponse;\n    private String nextPageToken;\n    private long successCount;\n    private long failedCount;\n    private String errorMessage;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86b3dfca-5972-4c34-be6d-cc7838e34b8d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":90,"endLine":106,"content":"Impl.class);\n    private static final Map<OAuthType, GainsightAccountService> GAINSIGHT_ACCOUNT_SERVICE_MAP = Maps.newHashMap();\n    private static final String GSNAP_SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    private static final String MS_DYNAMICS_SCOPES = \"ms.dynamics.scopes\";\n    private static final String MS_DYNAMICS_DEFAULT_SCOPES = \"https://admin.services.crm.dynamics.com/user_impersonation https://graph.microsoft.com/Directory.AccessAsUser.All https://graph.microsoft.com/User.Read https://graph.microsoft.com/User.ReadBasic.All\";\n    private static final String SERVICE_ENDPOINT_URL_FORMAT = \"%s/services/Soap/u/\";\n    public static final String AUTH_SCOPE = \"AUTH_SCOPE\";\n    public static final String INVALID_USER_MESSAGE =\n            \"Invalid user %s for this org. This might happen if you are logged into two salesforce org in same browser. \" +\n                    \"<br/><b>Resolution:</b> Gainsight App has been added as connected app in %s's account. \" +\n                    \"Please revoke it under 'Connected Apps OAuth Usage' in salesforce settings and re-authorize Oauth access.\";\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    static final String AUTHORIZATION = \"Authorization\";\n    static final String BEARER = \"Bearer \";\n    private static final String SCOPE = \"&scope=\";\n    private static final String STATE = \"&state=\";\n    private static final String AUTHORIZATION_URL = \"&prompt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0668abf-820f-4058-86f1-08f54d1283c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":179,"endLine":210,"content":"true));\n    meta.put(NILLABLE, BooleanUtils.toBooleanDefaultIfNull(BooleanUtils.toBoolean(DuctUtils.valueOf(fieldDetails.get(IS_NULLABLE))), true));\n    meta.put(READ_ONLY, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.getMeta()).getOrDefault(READ_ONLY, false));\n\n    if (Objects.nonNull(dataTypeMappingsForField) && dataTypeMappingsForField.getDecimalPlaces() != null) {\n      meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n    }\n\n    if (DataType.DATE.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name())\n        || DataType.DATETIME.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name()) ||\n        DataType.TIMESTAMP.name().equalsIgnoreCase(dataTypeMappingsForField.getGainsightDatatype().name())) {\n      metaProperties.put(\"format\", dataTypeMappingsForField.getFormat());\n    }\n\n\n    meta.put(FILTERABLE_IN_INTERNAL_SYSTEM, true);\n    meta.put(FILTERABLE_IN_EXTERNAL_SYSTEM, true);\n    meta.put(PATH, String.valueOf(fieldDetails.get(\"col_name\")));\n    meta.put(IS_PRIMARY_KEY, false);\n    meta.put(ACCESSIBLE, true);\n    meta.put(SORTABLE, true);\n    meta.put(GROUPABLE, true);\n    meta.putIfAbsent(ORIGINAL_DATA_TYPE, fieldDataType);\n    meta.put(PROPERTIES, metaProperties);\n    retMap.put(META, meta);\n    return retMap;\n  }\n\n  @Nullable\n  private static DataTypeMappings getDataTypeMappingFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String externalSourceDataType) {\n\n    if (org","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea8a4532-e4e3-40f7-92a3-d6d66062bae3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":258,"endLine":274,"content":"ion(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, exception));\n            }\n        }\n\n        String dynamicsClientId;\n        String dynamicsClientSecret;\n        MSDynamicsAuthInfo msDynamicsAuthInfo = new MSDynamicsAuthInfo();\n        if ((boolean) pnpConnectionsInfo.getProperties().getOrDefault(CUSTOM_OAUTH_ENABLED, false)) {\n            dynamicsClientId = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().getOrDefault(CUSTOM_OAUTH_CLIENT_ID, StringUtils.EMPTY));\n            dynamicsClientSecret = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().getOrDefault(CUSTOM_OAUTH_CLIENT_SECRET, StringUtils.EMPTY));\n            msDynamicsAuthInfo.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        } else if (AuthorizationType.M2M_OAUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n            dynamicsClientId = (String) pnpConnectionsInfo.getProperties().getOrDefault(OAUTH_CLIENT_ID, StringUtils.EMPTY);\n            dynamicsClientSecret = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().getOrDefault(OAUTH_CLIENT_SECRET, StringUtils.EMPTY));\n            msDynamicsAuthInfo.setTenantId((String) pnpConnectionsInfo.getProperties().getOrDefault(DYNAMICS_TENANT_ID, StringUtils.EMPTY));\n        } else {\n            OAuthDetail oAuthDetail = oAuthClie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4a596f28-7be7-432a-a466-b7becef7f614","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":33,"endLine":62,"content":") != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.GS_ERROR_CODE_COLUMN, entity.getGsErrorCode());\n        }\n        if(entity.getGsErrorMessage() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.GS_ERROR_MESSAGE_COLUMN, entity.getGsErrorMessage());\n        }\n        if(entity.getExternalSystemErrorCode() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.EXTERNAL_SYSTEM_ERRORCODE_COLUMN, entity.getExternalSystemErrorCode());\n        }\n        if(entity.getExternalSystemErrorMessage() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.EXTERNAL_SYSTEM_ERROR_MESSAGE_COLUMN, entity.getExternalSystemErrorMessage());\n        }\n        if(entity.getTenantId() == null) {\n            entity.setTenantId(RequestContextProvider.getTenantId());\n        }\n        m.put(GsExternalSystemErrorMappingRowMapper.TENANT_ID_COLUMN, entity.getTenantId());\n        if(entity.getProperties() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.PROPERTIES_COLUMN, JsonUtil.toJsonString(entity.getProperties()));\n        }\n\n        if(entity.getConnectorType() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.CONNECTOR_TYPE_COLUMN, entity.getConnectorType().getValue());\n        }\n\n        if(entity.getRequestId() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.REQUEST_ID_COLUMN, entity.getRequestId());\n        }\n\n        if(entity.getJobId() != null) {\n            m.put(GsExternalSystemEr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"012999ab-e8e2-4089-9f38-d228c45c748f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":310,"endLine":341,"content":"umnMappings(), colNameToDataType, batchSize);\n      externalSystemResponse.putAll(result);\n      totalRecords = totalRecords + (Long) result.getOrDefault(UCConstants.TOTAL_RECORDS, 0l);\n      recordsAffected = recordsAffected + (Long) result.getOrDefault(UCConstants.RECORDS_AFFECTED, 0l);\n      if (failedFiles != null && !(failedFiles).isEmpty()) {\n        ductStatusSet.add(DuctStatus.FAILED);\n        if(failedFiles.size() == 1) {\n          failedRecords.set(UCFileUtility.getRecordCount(failedFiles.get(0)));\n          totalRecords += failedRecords.get();\n        }\n      }\n      if (successfulFiles != null && !successfulFiles.isEmpty()) {\n        ductStatusSet.add(DuctStatus.COMPLETED);\n      }\n    } catch (Exception e) {\n      failedRecords.set(failedRecords.get() + UCFileUtility.getRecordCount(inputDataFile));\n      totalRecords += failedRecords.get();\n      failedFiles.add(inputDataFile);\n      log.error(\"[SAP DATASPHERE] Exception while loading bulk data to Datasphere. Record count : {}\", failedRecords, e);\n      externalSystemResponse.put(UCConstants.ERROR_MESSAGE, e.getMessage());\n      ductStatusSet.add(DuctStatus.FAILED);\n    } finally {\n      FileUtils.deleteQuietly(inputDataFile);\n    }\n\n    DuctStatus statusOfTheLoad;\n    if (ductStatusSet.size() == 1) {\n      statusOfTheLoad = ductStatusSet.iterator().next();\n      ductResponse.setDuctStatus(statusOfTheLoad);\n    } else {\n      ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n      statusOfTheLoad = DuctStatus.PAR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9dd24995-0ca0-4193-a824-b4ba9684dd16","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctExternalSystemInteractionController.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.base.Optional;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/external\")\npublic class DuctExternalSystemInteractionController {\n\n    @Autowired\n    private DuctJobMappingService ductJobMappingService;\n\n    @PostMapping(value = \"/notification/{connectorType}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    public Object getWebHookFromExternalSystem(@RequestBody(required = false) @Valid Object body, @PathVariable(\"connectorType\") ConnectorType connectorType,\n                                    @RequestHeader Map<String, String> headers){\n        try {\n            return ductJobMappingService.handleEventFromExternalSystem(body, connectorType, headers);\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return null;\n        }\n    }\n\n    @PostMapping(value = \"/notification/{connectorType}\", consumes = MediaType.TEXT_PLAIN_VALUE)\n    @ResponseBody\n    public ResponseEntity<String> handleUrlValidation(@RequestParam(value = \"valida","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9617d478-cc0e-444e-a6e8-8c2f11e2acf4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":1,"endLine":44,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\nimport org.springframework.http.*;\nimport org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\nimport org.springframework.web.client.HttpClientErrorException;\nimport org.springframework.web.client.HttpServerErrorException;\nimport org.springframework.web.client.RestTemplate;\nimport utils.HttpClient;\nimport utils.ResponseObj;\n\nimport java.net.URI;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * TODO @pavan  remove this and use AdvancedHttpHelper\n *\n * Created by gkallepu on 28-02-2018.\n */\npublic class WebClient {\n    private static final String X_REQUEST_ID = \"X-Request-ID\";\n    public static final RestTemplate restTemplate ;\n    private static fin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"daeb1332-c174-4d43-83b8-c7fe8ba3ee73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":145,"endLine":160,"content":"ilterRule, ConnectorType.SNOWFLAKE);\n            query = \"Select \" + fieldJsonPathList.stream().map(field -> \"\\\"\" + field + \"\\\" AS \" + \"\\\"\" + field + \"\\\"\").collect(Collectors.joining(\",\"))\n                    + \" from \" + \"\\\"\" + propertie.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + \"\\\".\" + \"\\\"\" + propertie.get(UCConstants.GSIntegration.DATASET_ID).toString() + \"\\\".\" + \"\\\"\" + objectName + \"\\\"\" + filter\n                    + \" limit \" + limit + \" offset \" + offset;\n        } else {\n            query = \"Select \" + fieldJsonPathList.stream().map(field -> \"\\\"\" + field + \"\\\" AS \" + \"\\\"\" + field + \"\\\"\").collect(Collectors.joining(\",\"))\n                    + \" from \" + \"\\\"\" + propertie.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + \"\\\".\" + \"\\\"\" + propertie.get(UCConstants.GSIntegration.DATASET_ID).toString() + \"\\\".\" + \"\\\"\" + objectName + \"\\\"\"\n                    + \" limit \" + limit + \" offset \" + offset;\n        }\n        try {\n            GainsightSnowflakeChannelFactory gainsightSnowflakeChannelFactory = new GainsightSnowflakeChannelFactory();\n            GainsightSnowflakeChannelService gainsightSnowflakeChannelService = gainsightSnowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            List<Map<String, Object>> data = gainsightSnowflakeChannelService.executeQuery(query, fieldInfos);\n            String nextPageToken = limit > data.size() ? null : String.valueOf(offset + limit - 1);\n            if (limit == data.size())\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd034686-4ec3-4090-95e7-8073356fc723","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":403,"endLine":425,"content":"iledRecords);\n        ductResponse.setErrorMessage((String) externalSystemResponse.getOrDefault(UCConstants.ERROR_MESSAGE, StringUtils.EMPTY));\n        ductResponse.setTenantId(ductJobMapping.getTenantId());\n        ductResponse.setConnectionId(ductJobMapping.getConnectionId());\n        ductResponse.setJobId(ductJobMapping.getJobId());\n        return ductResponse;\n    }\n\n    private void populateFileLocations(DuctStatus statusOfTheLoad, DuctResponse ductResponse, DuctJobMapping ductJobMapping,\n                                       List<File> splitFiles, List<File> successfulFiles, List<File> failedFiles) {\n        File mergedFile = null;\n        try {\n            switch (statusOfTheLoad) {\n                case COMPLETED:\n                    ductResponse.setExternalSuccessFileLocation(ductJobMapping.getCaasFileInfo().getFileName());\n                    break;\n                case FAILED:\n                    if ((splitFiles.size() == 1)) {\n                        ductResponse.setExternalErrorFileLocation(ductJobMapping.getCaasFileInfo().getFileName());\n                    } else if (failedFiles.size() > 0) {\n                        mergedFile = new File(failedFiles.get(0).getParent() + UCConstants.FORWARD_SLASH + GainsightUtils.getRandomUUID() + \"_failure.csv\");\n                        FileMerger.mergeFiles(failedFiles, mergedFile);\n                        DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fd23f7a-a462-4366-8c09-b742cd1e434a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":267,"endLine":288,"content":" dataApi);\n            externalSystemResponse = MAPPER.convertValue(extractResponse(httpResponse).get(VALUE), new TypeReference<List<Map<String, Object>>>() {});\n            externalSystemResponseMap = externalSystemResponse.get(0);\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        if(PARTICIPANTS_KEYWORD.equalsIgnoreCase(ductJobMapping.getResourceName())) {\n            externalSystemResponseMap = extractParticipantsData(externalSystemResponseMap);\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponseMap).nextPageToken(null).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(1)\n                .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()).build();\n    }\n\n\n    private TokenDetails extractAccessDetails(String connectionId) {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n        TokenDetails accessDetails = new TokenDetails();\n        accessDetails.setClientId(pnpConnectionsInfo.getTokenDetail().getClientId().getString());\n        accessDetails.setClientSecret(pnpConnectionsInfo.getTokenDetail().getClientSecret().getString());\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c514ffb-decd-43f7-9c77-99b6cde16823","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CustomerGoalsLoadServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.dto.ExternalDataRequestDto;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class CustomerGoalsLoadServiceImpl implements GainsightLoadService{\n    @Override\n    public GSModule getType() {\n        return GSModule.CUSTOMER_GOALS;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return \"cs_goal\".equalsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dce4ed81-6de3-4eda-92ef-e10485078568","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":123,"endLine":145,"content":"ng((field) -> {\n                    if (field.getValue().isObject())\n                        handleSchemaGenerationForObject(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n                    else if (field.getValue().isArray())\n                        handleSchemaGenerationForArray(baseKey + \".\" + field.getKey() + \"[*]\", field.getValue(), generatedFieldDefinitions, fieldNames);\n                    else\n                        createGSFieldDefinition(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n                });\n            }\n        }\n    }\n\n    private void handleSchemaGenerationForObject(String baseKey, JsonNode data, Map<String, GSFieldDefinition> generatedFieldDefinitions,\n                                                 Set<String> fieldNames) {\n        Iterator<Map.Entry<String, JsonNode>> fields = data.fields();\n        fields.forEachRemaining((field) -> {\n            if (field.getValue().isObject())\n                handleSchemaGenerationForObject(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n            else if (field.getValue().isArray())\n                handleSchemaGenerationForArray(baseKey + \".\" + field.getKey() + \"[*]\", field.getValue(), generatedFieldDefinitions, fieldNames);\n            else\n                createGSFieldDefinition(baseKey + \".\" + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n        }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7352050b-d4eb-4118-8df2-db29300d04a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/VersionConstants.java","startLine":1,"endLine":9,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct;\n\npublic class VersionConstants {\n  public static final String V1_0 = \"v1.0\";\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f6743e0-a0a9-4603-b546-994d2220a9ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":332,"endLine":356,"content":"          accountDAO.update(accountDetail);\n            }else{\n                try {\n                    String connectionIdFromAccount = accountDetail.getProperties().getOrDefault(\"connectionId\",StringUtils.EMPTY).toString();\n                    if (pnpConnectionsInfo.getConnectionId().equals(connectionIdFromAccount)) {\n                        deleteAccountAndData(snId);\n                    }\n                    log.info(\"successfully unlinked zendesk widget for subdomain: {}\", snId);\n                    try{\n                        AccountDetail accountsDetail = populateAccountDetailForWidget(pnpConnectionsInfo, snId);\n                        accountDAO.insert(accountsDetail);\n                        log.info(\"Zendesk Account Detail insert Successful\");\n\n                        tenantMasterQuery = new TenantMasterQuery();\n                        tenantMasterQuery.tenantId(pnpConnectionsInfo.getTenantId());\n                        tenant = tenantMasterDAO.findOne(tenantMasterQuery);\n\n                        Set<String> subdomains =\n                                tenant.getZendeskSubdomains() == null ? new HashSet<>() : tenant.getZendeskSubdomains();\n                        subdomains.add(accountsDetail.getSnId());\n                        tenant.setZendeskSubdomains(subdomains);\n\n                        TenantMasterUpdate update = new TenantMasterUpdate(tenant);\n                        tenantMasterDAO.update(tenantMasterQuery, update);\n                        pnpConnectionsI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a3bdfd77-85b0-49cf-8e1c-5f6bc12c4d8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/ExternalDatabaseWBMessageProcessor.java","startLine":78,"endLine":93,"content":"            } catch (Exception exception) {\n                log.error(\"Error while processing ExternalDatabaseWBMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.EXTERNAL_DB_SYS_WB_TASK.getName());\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11d2d2f8-2de0-4332-b05a-274e14967cd2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":155,"endLine":177,"content":"ing(EXTERNAL_SYSTEM_ERROR_CODE_NULL, EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL));\n                }\n            }\n            GainsightPrecondition.assertNotNull(sObjectDescription,\n                    UCValidationCode.PNP_SFDC_METADATA_FETCH_ERROR, \"Sfdc Object Description is null\", HttpStatus.SC_INTERNAL_SERVER_ERROR);\n            GainsightPrecondition.assertNotNull(sObjectDescription.getFields(),\n                    UCValidationCode.PNP_SFDC_METADATA_FETCH_ERROR, \"Sfdc Object Fields are null\", HttpStatus.SC_INTERNAL_SERVER_ERROR);\n            SfdcObjectDetails objectDetails = new SfdcObjectDetails();\n\n//            SObjectDescription sObjDescriptionCloned = OBJECT_MAPPER\n//                    .readValue(OBJECT_MAPPER.writeValueAsString(sObjectDescription), SObjectDescription.class);\n            objectDetails.setObjectName(sObjectDescription.getName());\n            objectDetails.setObjectLable(sObjectDescription.getLabel());\n            objectDetails.setRecordTypeInfos(sObjectDescription.getRecordTypeInfos().size());\n            objectDetails.setFields(sObjectDescription.getFields());\n            objectDetails.setFields(sObjectDescription.getFields().stream().filter(sObjectField -> {\n                        if (SKIP_COMPOUND_FIELDS.contains(sObjectField.getType())) {\n                            return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    .collect(Collectors.toList()));\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bcfc5aab-bd12-4553-8c52-c2d797521d3f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":103,"endLine":122,"content":"esponse.getRespMsg());\n                    LOGGER.info(\"Headers recieved are {}\", httpResponse.getResponseHeaders());\n                    String elementsNextPageToken;\n                    if (httpResponse.getResponseHeaders().entrySet().stream().filter(entry -> entry.getKey() != null).anyMatch(entry -> entry.getKey().equalsIgnoreCase(ELEMENTS_NEXT_PAGE_TOKEN))) {\n                        elementsNextPageToken = httpResponse.getResponseHeaders().entrySet().stream().filter(entry -> entry.getKey() != null).filter(entry -> entry.getKey().equalsIgnoreCase(ELEMENTS_NEXT_PAGE_TOKEN)).findFirst().get().getValue().get(0);\n                        if (!httpResponse.getRespMsg().isEmpty()) {\n                            nextPage = elementsNextPageToken;\n                            if (arr.length() <= 0) {\n                                shouldContinue = false;\n                            } else {\n                                shouldContinue = writeJsonArrayToFile(dataExtractionRequest, arr, fr);\n                            }\n                        }\n                    } else {\n                        LOGGER.info(\"No next page token so all records fetched in one go. Breaking out of loop\");\n                        writeJsonArrayToFile(dataExtractionRequest, arr, fr);\n                        shouldContinue = false;\n                    }\n                    currentNumberOfRecordsSync = currentNumberOfRecordsSync + arr.length();\n                    LOGGER.info(\"Records synced {}\", currentNu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b4f1a1c-f96e-4407-94f3-4bcd933bcb64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":444,"endLine":474,"content":"onsInfo.getProperties().get(\"IPAAS_PROPERTIES\")).put(\"accountId\", jsonObject.get(\"id\"));\n                        pnpConnectionInfoDao.update(pnpConnectionsInfo);\n                        isvalid = true;\n                        break;\n                    }\n                }\n                if(!isvalid)\n                    throw new CaasException(new GsExternalSystemErrorMapping(\"Invalid Jira Site URL\"));\n                break;\n        }\n    }\n\n    @Override\n    public List<PNPConnectionInput> findByConnectionType(ConnectorType connectorType) throws CaasException {\n        try {\n            log.info(\"Request received to get connection lists for connectorType {}\", connectorType);\n            List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.findByConnectionType(connectorType);\n            return createPnpConnectionInputsFromConnectionInfo(pnpConnectionsInfoList);\n        } catch (Exception e) {\n            log.error(\"Error occured while getting connection list\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(e.getMessage()));\n        }\n    }\n\n    @Override\n    public PNPConnectionInput findByConnectionId(String connectionId) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        if (pnpConnectionsInfo == null) {\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT.getUserText()));\n        }\n        pnpConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b7d0e86-54b5-4d23-a55b-61f05553f723","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":281,"endLine":313,"content":"uest(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap, dateTimeFormat);\n\n      log.info(\"Criteria being used for getting data: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n      return modifiedCriteria;\n\n    } catch (Exception ex) {\n      log.error(\"Error while modifying criteria for object search, Falling back to default criteria accepted by the external system\", ex);\n      return getDefaultFallbackCriteria();\n    }\n  }\n\n  private Criteria getDefaultFallbackCriteria() {\n\n    Criteria criteria = new Criteria();\n    Criteria fieldCriteria = new Criteria();\n    // set a hardcoded filter condition since this is a required parameter\n    fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD);\n    fieldCriteria.setOperatorType(FilterOperator.GT);\n    fieldCriteria.setValues(Lists.newArrayList(DEFAULT_DATETIME_VALUE));\n    criteria.setFilters(Lists.newArrayList(fieldCriteria));\n    return criteria;\n  }\n\n  private void modifyCriteriaValueIfApplicable(Criteria criteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, String dateTimeFormat) {\n    if (dateTimeFieldsMap.containsKey(criteria.getFieldName())) {\n      Object dateTimeStr = ((List<Object>) criteria.getValues()).get(0);\n      //Object processDateTimeValue = processDateTimeValue(dateTimeStr, dateTimeFormat);\n      criteria.setValues(Lists.newArrayList(dateTimeStr));\n    }\n  }\n\n/*  private Object processDateTimeValue(Object dateTimeStr, String dateTimeFormat) {\n    DateTimeFormatter forma","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e75f4e0-72c0-40ca-b8c4-fa7d970e60f1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":314,"endLine":331,"content":"ductJobMappingDao.update(any())).thenReturn(ductJobMappingAtomicReference.get());\n            ductResponseDTO = ductJobMappingService.synchronousFetch(ductRequestDTO);\n            passed = true;\n        } catch (Exception exc) {\n            passed = false;\n        } finally {\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n            verify(queueProducer, times(0)).enqueue(any(MessageRequestDTO.class));\n            verify(ductValidationService, times(1)).validateRequest(any(DuctRequestDTO.class));\n            verify(hubspotDataSourceService, times(1)).fetchSynchronziedData(any(DuctJobMapping.class), anyInt());\n            DuctJobMapping ductJobMapping = ductJobMappingAtomicReference.get();\n            assertNotNull(ductJobMapping.getJobId(), \"jobId cannot be null\");\n            assertNotNull(ductJobMapping.getJobName(), \"Job name cannot be null\");\n//            assertEquals(pnpConnectionsInfo.getConnectionType(), ductJobMapping.getConnectorType(), \"Incorrect Connector Type\");\n            assertEquals(SyncDirection.EXTERNAL_SYSTEM_TO_MDA, ductJobMapping.getSyncDirection(), \"Incorrect Sync Direction\");\n            assertEquals(ductRequestDTO.getConnectionId(), ductJobMapping.getConnectionId(), \"Incorrect Connection Id\");\n            assertEquals(ductRequestDTO.getResourceName(), ductJobMapping.getResourceName(), \"Incorrect Resource Name\");\n            assertNotNull(ductJobMapping.getFields(), \"Fie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78e496a7-4cbb-4953-a7f9-0e11dbcaa1e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1131,"endLine":1149,"content":"       assertNotNull(pnpConnectionsInfo.getProperties()\n                .get(ACCESS_SECRET), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.ACCESS_KEY_NOT_PROVIDED.getUserText());\n        assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                .get(ACCESS_SECRET)), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_SECRET_KEY.getUserText());\n        assertTrue(((String) pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)).length() ==\n                36, CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_LENGTH_ACCESS_KEY.getUserText());\n    }\n\n    private BaseTokenDetail prepareS3TokenDetails(PNPConnectionsInfo pnpConnectionsInfo) {\n        validateS3Details(pnpConnectionsInfo);\n        BaseTokenDetail baseTokenDetail = new BaseTokenDetail();\n        baseTokenDetail.setAccessKey(SecretData.fromValue(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_KEY_ID))));\n        baseTokenDetail.setAccessSecret(SecretData.fromValue(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET))));\n        baseTokenDetail.setBucketName(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(BUCKETNAME)));\n        return baseTokenDetail;\n    }\n\n    private void validateS3Details(PNPConnectionsInfo pnpConnectionsInfo) {\n        assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0713e44-a2e6-4d16-b778-d894b322b9ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":779,"endLine":805,"content":"tpStatus.SC_BAD_REQUEST), DuctErrorConstants.PNP_DYNAMICS_WB_MAX_RECORDS_LIMIT_REACHED + maxRecordsAllowed,\n                                null, ductJobMapping.getJobId())\n                );\n            }\n            validateMappedFieldsAndCsv(ductJobMapping, file);\n            validateHeadersFieldsAndMappings(ductJobMapping, file);\n\n            stopWatch.stop();\n            log.info(\"Completed validation for dynamics write back Payload {} in :{} seconds\", ductJobMapping.getJobId(), stopWatch.getTime(TimeUnit.SECONDS));\n            return file;\n        } catch (CaasException ex) {\n            log.error(\"Exception in validation 1 \", ex);\n            throw ex;\n        } catch (Exception e) {\n            log.error(\"Exception in validation 2 \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private void validateMappings(DuctJobMapping ductJobMapping, List<GSFieldDefinition> fieldDefinitions, DuctDataOperation ductDataOperation) throws CaasException {\n        Set<String> readOnlyFields = new HashSet<>();\n        Set<String> fieldsNotPresent = new HashSet<>();\n        boolean isIdentifierPresent = false;\n\n        for (ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n            if (ductColumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"52b1fa92-d0fb-458f-a770-85ac675b7be5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":108,"endLine":132,"content":"     switch (auditEntityType) {\n                case CONNECTION:\n                    generateConnectionAuditLogs(unifiedConnectorRequest, propertyTrackerLits, auditRecord, auditData);\n                    break;\n                case JOB:\n                    generateJobAuditLogs(unifiedConnectorRequest, propertyTrackerLits, auditRecord, auditData);\n                    break;\n            }\n        }\n        return auditRecord;\n    }\n\n    private static void generateJobAuditLogs(UnifiedConnectorRequest unifiedConnectorRequest,\n                                             List<BeanPropertyTracker> propertyTrackerLists, AuditRecord auditRecord, AuditData auditData) {\n        List<AuditDetails> auditDetailsList;\n        auditDetailsList =\n                propertyTrackerLists.stream().filter(beanPropertyTracker -> Objects.nonNull(beanPropertyTracker)).map(beanPropertyTracker -> {\n                    AuditDetails auditDetails = new AuditDetails();\n                    if (jobAttributeTypeMap.keySet().contains(beanPropertyTracker.getPropertyName())) {\n                        auditDetails.setAttributeType(jobAttributeTypeMap.get(beanPropertyTracker.getPropertyName()));\n                        auditDetails.setOperationType(AuditOperationType.UPDATE);\n                        auditDetails.setOldValue(String.valueOf(beanPropertyTracker.getOldValue()));\n                        auditDetails.setNewValue(String.valueOf(beanPropertyTracker.getNewValue()));\n                    }\n                  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11e6fa18-d2e3-4846-a900-095d97ee46f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":44,"endLine":80,"content":"8),\n    PNP_UNABLE_TO_GET_ENABLED_CONNECTORS(8059),\n    PNP_SCHEDULE_NOT_DEFINED(8060),\n    PNP_CONNECTOR_PROJECT_INFO_ALREADY_EXIST(8061),\n    PNP_CONNECTOR_PROJECT_INFO_DOES_NOT_EXIST(8062),\n    PNP_CONNECTOR_DUPLICATE_PROJECT_NAME(8063),\n    PNP_CONNECTOR_PROJECT_UPDATE_FAILED(8064),\n    PNP_TOKEN_DETAILS_NOT_FOUND(8065),\n    //PNP_END_DATE_CANNOT_BE_BEFORE_CURRENT_DATE(8065),\n    PNP_CONNECTION_HAS_PROJECT_DEPENDANCY(8066),\n    PNP_DATE_RANGE_IS_MORE_THAN_ONE_WEEKS(8068),\n    PNP_CONNECTION_ID_IS_NULL(8069),\n    PNP_PROJECT_NAME_IS_NULL(8070),\n    PNP_INVALID_INPUT_FROM_CLIENT(8071),\n    PNP_INVALID_CRON_EXPRESSION(8072),\n    PNP_CONNECTION_NAME_IS_NULL_OR_EMPTY(8073),\n    //PNP_NO_PEOPLE_DATA_FOUND(8074),\n    PNP_PROJECT_ID_IS_NULL(8075),\n    PNP_CONNECTOR_TYPE_NOT_FOUND(8076),\n    PNP_JOB_START_TIME_NOT_FOUND(8077),\n    PNP_JOB_STATUS_NOT_DEFINED(8078),\n    PNP_DATA_STORE_FETCH_FAILURE(8079),\n    PNP_SCHEDULER_DETAILS_NULL(8080),\n    PNP_END_DATE_IS_AFTER_CURRENT_DATE(8081),\n    PNP_PROJECT_MAPPING_NULL(8082),\n    PNP_CONNECTION_ALREADY_USED(8083),\n    PNP_RAW_DATA_STORE_NOT_EXIST(8084),\n    PNP_INVALID_CLIENT_INPUT(8085),\n    PNP_INVALID_INPUT_DATA(8086),\n    PNP_SAME_SOURCE_FIELD_MAPPED_AGAIN(8087),\n    PNP_SAME_TARGET_FIELD_MAPPED_AGAIN(8088),\n    PNP_NO_PEOPLE_DATA_FOR_EVENT(8089),\n    PNP_TASK_PAYLOAD_EMPTY(8090),\n    PNP_SEGMENT_PAYLOAD_EMPTY(8091),\n    PNP_SEGMENT_UNEXPECTED_BATCH_SIZE(8092),\n    PNP_SEGMENT_METADATA_GENERATION_FAILURE(8093),\n    PNP_MANDATORY_FI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3e91862d-6d34-4803-8f77-cc35d2358424","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":93,"endLine":117,"content":"      if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n                if (field.get(DECIMAL_PLACE_FLAG) != null) {\n                    meta.put(DECIMAL_PLACES, field.get(DECIMAL_PLACE_FLAG).asInt());\n                } else if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null) {\n                    meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n                }\n\n                populateValueIfPresent(field, CUSTOM_FIELD_FLAG, meta, CREATEABLE, Boolean.class);\n\n                populatePicklistOption(field, fieldDefinition);\n                //No property to identify hidden field marking accessible as true by default for all fetched fields\n                meta.put(ACCESSIBLE, true);\n                meta.put(READ_ONLY, field.get(READ_ONLY_FLAG).asBoolean());\n\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n                populateValueIfPresent(field, ID, metaProperties, ID, String.class);\n                populateValueIfPresent(field, CREATED_TIME, metaProperties, CREATED_TIME, String.class);\n                populateValueIfPresent(field, MODIFIED_TIME, metaProperties, MODIFIED_TIME, String.class);\n\n                meta.put(PROPERTIES, metaProperties);\n\n                fieldDefinition.put(META, meta);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4fee62c-7e72-484d-b7d8-cb51bfc323cd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":434,"endLine":459,"content":"createQuery(dataExtractionRequest.getFilterRule()));\n                    }else{\n                        queryParams.put(IPaasConstants.WHERE, CEQueryBuilder.createQuery(dataExtractionRequest.getFilterRule()));\n                    }\n                }\n            }\n\n            if(dataExtractionRequest.isDuct() && StringUtils.isNotEmpty(dataExtractionRequest.getFilterQeueryParams())){\n                queryParams.put(IPaasConstants.WHERE, dataExtractionRequest.getFilterQeueryParams());\n            }\n\n            if (!(dataExtractionRequest.getProperties().containsKey(\"skipFieldsAsQueryParam\") && (boolean) dataExtractionRequest.getProperties().get(\"skipFieldsAsQueryParam\"))) {\n                StringJoiner joiner = new StringJoiner(\",\");\n                for (FieldInfo fieldInfo : dataExtractionRequest.getFields()) {\n                    String encode = URLEncoder.encode(fieldInfo.getJsonPath(), \"UTF-8\");\n                    joiner.add(encode);\n                }\n                queryParams.put(FIELDS, joiner.toString());\n            }\n\n            if (dataExtractionRequest.getProperties().containsKey(INCLUDE_DELETED)) {\n                queryParams.put(INCLUDE_DELETED, dataExtractionRequest.getProperties().get(INCLUDE_DELETED));\n            }\n            LOGGER.info(\"data extraction request page size {}\", dataExtractionRequest.getProperties().get(PAGE_SIZE));\n            if (dataExtractionRequest.getProperties().containsKey(PAGE_SIZE)) {\n                queryParams.put(PAGE_SIZE, dat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e6bb6f76-e14d-401e-8a50-8c4d5eccc055","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":272,"endLine":296,"content":"       msDynamicsAuthInfo.setTenantId((String) pnpConnectionsInfo.getProperties().getOrDefault(DYNAMICS_TENANT_ID, StringUtils.EMPTY));\n        } else {\n            OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.DYNAMICS);\n            dynamicsClientId = CryptHandler.getInstance().decrypt(oAuthDetail.getClientId());\n            dynamicsClientSecret = CryptHandler.getInstance().decrypt(oAuthDetail.getClientSecret());\n            msDynamicsAuthInfo.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        }\n\n        msDynamicsAuthInfo.setClientId(dynamicsClientId);\n        msDynamicsAuthInfo.setClientSecret(dynamicsClientSecret);\n        msDynamicsAuthInfo.setResourceUri((String) pnpConnectionsInfo.getProperties().get(\"DynamicsOrgUri\"));//\"https://gainsight123.crm.dynamics.com\");\n        MSDynamicsContext.setCtx(msDynamicsAuthInfo);\n\n        Set<String> projections = new HashSet<>(request.getFields());\n        GetRecordsRequest getRecordsRequest = new GetRecordsRequest(pluralName)\n                .withOutputMode(OutputMode.IN_MEMORY)\n                .withProjections(projections)\n                .withPrimitiveDateTimeConversionRequired(false);\n\n        if (StringUtils.isNotBlank(filterQuery)) {\n            getRecordsRequest.withFilterExpression(filterQuery);\n        }\n        log.info(\"Filter generated for jobId: {} pluralName: {} projections: {} filter: {}\", jobId, pluralName, projections, filterQuery);\n\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56ea8a6a-88a2-43a4-b386-c37b7aae8d06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCCommonUtility.java","startLine":38,"endLine":66,"content":"a) {\n        return Response.status(Response.Status.OK).entity(new ResponseObj(true, data)).build();\n    }\n\n    public static Response httpResponse(Object data, String errorMessage) {\n        return Response.status(Response.Status.OK).entity(new ResponseObj(true, data, null, errorMessage)).build();\n    }\n\n    public static Response httpResponse(Object data, int httpStatusCode) {\n        return Response.status(Response.Status.fromStatusCode(httpStatusCode)).entity(new ResponseObj(true, data)).build();\n    }\n\n    public static Response httpResponse(String errorMessage, int httpStatusCode) {\n        return Response.status(Response.Status.fromStatusCode(httpStatusCode)).entity(new ResponseObj(false, errorMessage)).build();\n    }\n\n    public static Response httpResponse(SystemException ex) {\n        return Response.status(ex.getHttpStatus()).entity(new ResponseObj(false, ex.getMessage(), ex.getErrorCode())).build();\n    }\n\n    public static boolean initRequestContextSuccessfully(String tenantId) {\n        try {\n            GainsightPrecondition.assertNotNull(tenantId, UCValidationCode.PNP_INVALID_INPUT, \"Tenant Id Provided is empty/null\");\n            Tenant tenant = getTenantInfo(tenantId);\n            RequestInfo requestInfo = new RequestInfo();\n            TenantAuthInfo tenantAuthInfo = TenantAuthInfo.fromTenant(tenant);\n            if (tenantAuthInfo != null) {\n                requestInfo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n                requestInfo.setTenantAuthInf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d42a6599-64c5-484f-aefd-d74973349348","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":171,"endLine":197,"content":"())).encoded());\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.GAINSIGHT) {\n            throw new NotSupportedException(\"Synchronous Fetch from Gainsight is not supported yet\");\n        } else {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            DuctResponse ductResponse = getSynchronizedDuctResponse(ductJobMapping, pnpConnectionsInfo);\n            InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n            return DuctResponseDTO.builder()\n                    .successFilePath(ductResponse.getS3FilePath())\n                    .connectionId(ductRequestDTO.getConnectionId())\n                    .resourceName(ductRequestDTO.getResourceName())\n                    .fields(ductRequestDTO.getFields())\n                    .outputFileLocation(ductResponse.getOutputFileLocation())\n                    .nextPageToken(ductResponse.getNextPageToken())\n                    .externalSystemResponse(ductResponse.getExternalSystemResponse())\n                    .totalNumberOfRecords(ductResponse.getTotalNumberOfRecords())\n                    .build();\n        }\n    }\n\n    @Override\n    public DuctResponseDTO synchronousUpsert(DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO ductResponseDTO;\n        try {\n            ductResponseDTO = synchronousUpdate(ductRequestDTO);\n            if (ductResponseDTO.getTotalNumberOfRecords() >= 1) {\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32c523f0-7ed2-4b5c-9912-4e725ed86cdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":580,"endLine":601,"content":"ob(ductJobMapping, DuctConstants.CAAS_WEB);\n\n        return queryAPIResponseBean;\n    }\n\n    private void validateMappings(DuctRequestDTO ductRequestDTO) {\n        GainsightPrecondition.assertNotNull(ductRequestDTO, CoreErrorCode.INVALID_PARAMETER,\n                \"Invalid Request\", \"Invalid Request\", 400);\n        GainsightPrecondition.assertFalse(ductRequestDTO.getData() == null\n                        && CollectionUtils.isEmpty(ductRequestDTO.getFields())\n                        && ductRequestDTO.getTargetSystemDataURL() == null && ductRequestDTO.getQuery() == null, CoreErrorCode.INVALID_PARAMETER,\n                \"Data or fields should be present\", \"Data or fields should be present\", 400);\n    }\n\n    /* Only null checks of writeback request submitted is done here\n     * Checks for the details being valid is done by worker*/\n    private void basicRequestValidationForWriteback(DuctRequestDTO ductRequestDTO) {\n        GainsightPrecondition.assertNotNull(ductRequestDTO, CoreErrorCode.INVALID_PARAMETER,\n                \"Invalid Request\", \"Invalid Request\", 400);\n        GainsightPrecondition.assertTrue((ductRequestDTO.getResourceName() != null && ductRequestDTO.getDuctDataOperation() != null)\n                        || (ductRequestDTO.getProperties() != null && ductRequestDTO.getProperties().containsKey(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION))\n                , CoreErrorCode.INVALID_PARAMETER, CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(),\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1d08eec-42a8-4864-9a91-905ceb86287e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":1,"endLine":42,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.bean.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.PNPConnectionsInfoQuery;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.api.client.util.Maps;\nimport com.google.api.client.util.Sets;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static com.gainsight.dao.mapper.MongoBaseFieldMapper.DELETED;\n\n/**\n * Created by :\n * author : Vipin Sharma\n * date : 22/04/16\n */\n\n@Repository\npublic class PNP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b690126d-26ad-437b-af8b-dcf562b91421","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":359,"endLine":375,"content":"ctName);\n                }\n\n                //No superclass for the object\n                if (CollectionUtils.isNotEmpty(superClassObjects)) {\n                    Set<GSFieldDefinition> fieldsSet = new HashSet<>();\n                    for (String currentSuperClassObject : superClassObjects) {\n                        LOGGER.info(\"Obtaining Metadata from native way for tenant: {} object({}) superclassObject: {}\", RequestContextProvider.getTenantId(), objectName, currentSuperClassObject);\n                        JsonNode nativeMetadataFromCESuperClassObject = getNativeMetadataFromCE(currentSuperClassObject, pnpConnectionsInfo);\n                        LOGGER.info(\"Metadata from native way for tenant: {} objects({}) superclassObject: {} obtained successfully\", RequestContextProvider.getTenantId(), objectName, currentSuperClassObject);\n\n                        Map<String, Object> objectDefinitionCurrentSuperClassObject = omdConverterFactoryService.addObjectDetailsToOMDFormat(currentSuperClassObject, pnpConnectionsInfo);\n                        for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n                            if (StringUtils.isNotEmpty(apiConfigAttribute.getResponseRootKey())) {\n                                nativeMetadataFromCESuperClassObject = nativeMetadataFromCESuperClassObject.get(apiConfigAttribute.getResponseRootKey());\n                            }\n                            omdConverterFactoryService.convertToOMDFormat(nativeMetadataFrom","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e8fb73ef-e465-43cb-b609-ea2070addf4c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":175,"endLine":196,"content":"  }\n                internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n                filterRules.add(buildRule(criteria, objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFieldDefinitionMap, ignoreMetadataFieldNames, caasConnectorConfig, objectName, fieldsFlattened));\n            }\n            if (baseCriteria.getDuctFilterCondition() != null)\n                filterRule.setCondition(baseCriteria.getDuctFilterCondition());\n        } else {\n            String[] fieldSplitted = baseCriteria.getFieldName().split(\"\\\\.\");\n            String targetFieldName;\n            if (fieldSplitted.length == 3) {\n                targetFieldName = fieldSplitted[2];\n                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n            } else if (fieldSplitted.length == 4) {\n                targetFieldName = fieldSplitted[2] + UCConstants.PERIOD + fieldSplitted[3];\n                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n            } else {\n                if (fieldsFlattened) {\n                    targetFieldName = baseCriteria.getFieldName();\n                    fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                    fieldNameGSDataTypeMap = objectToField","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f7b3d6f-3f90-4012-be9a-dff33cab2d30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":185,"endLine":211,"content":"us(), timeTaken);\n    }\n\n    private void resetContext() {\n        GainsightContext.removeAll();\n        MDC.clear();\n    }\n\n    private boolean setErrorResponse(HttpServletRequest request, HttpServletResponse response, String message) throws IOException {\n        log.warn(\"Unauthenticated request : {} : {}\", request.getRequestURL(), request.getRemoteAddr());\n        CoreErrorCode errorCode = CoreErrorCode.AUTHENTICATION_ERROR;\n        ResponseObj responseObj = new ResponseObj(false, errorCode.getGsEventCode(), message);\n        response.setStatus(HttpStatus.FORBIDDEN.value());\n        GainsightUtils.OBJECT_MAPPER.writeValue(response.getWriter(), responseObj);\n        resetContext();\n        return false;\n    }\n\n    private String getIPAddress(HttpServletRequest httpServletRequest) {\n        String ipAddress = httpServletRequest.getHeader(\"X-FORWARDED-FOR\");\n        if (ipAddress == null) {\n            ipAddress = httpServletRequest.getRemoteAddr();\n        }\n        ipAddress = StringUtils.isNotBlank(ipAddress) ? ipAddress : StringUtils.EMPTY;\n        return ipAddress;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5aa1c5d6-aa09-4f5c-90a7-5ca42aed402e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/MockSFAuthorizer.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.config;\n\nimport auth.SFSessionService;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.bean.TenantAuthInfo;\nimport com.gainsight.bean.UserAuthInfo;\nimport com.gainsight.dao.TenantMasterDAO;\nimport com.gainsight.enums.AuthenticationSource;\nimport com.gainsight.mongo.builder.tenant.TenantMasterQuery;\nimport exception.SystemException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport static com.gainsight.duct.enums.UCValidationCode.PNP_AUTHENTICATION_ERROR;\nimport static com.gainsight.duct.enums.UCValidationCode.PNP_TENANT_NON_EXISTENT;\n\n/**\n * Created by Swatantra Agrawal\n * Date : 23/02/14\n * Time : 7:26 AM\n */\npublic class MockSFAuthorizer implements SFSessionService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(MockSFAuthorizer.class);\n\n  @Autowired\n  private TenantMasterDAO tenantMasterDAO;\n\n  @Override\n  public UserAuthInfo validateSession(String userId, String orgId, String sessionId, Tenant tenant) {\n    if (!sessionId.startsWith(\"valid\")) {\n      throw new SystemException(\"Error in Authenticating\", PNP_AUTHENTICATION_ERROR);\n    }\n    UserAuthInfo userAuthInfo = new UserAuthInfo();\n    userAuthInfo.setUserId(userId);\n    userAuthInfo.setDisplayName(\"Test User\");\n    userAuthInfo.setUserEmail(\"test@gainsight","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac8d0939-3c34-4f78-9d1c-16f57a279347","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorServiceImpl.java","startLine":94,"endLine":97,"content":"              .map(PNPConnectionsInfo::getTenantId).collect(Collectors.toList());\n        return tenantIds;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"64240052-1060-4c8e-94ee-e05ab2793cc2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":93,"endLine":108,"content":"ceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf6277af-b2b5-48e8-8290-9e91fea964a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":136,"endLine":183,"content":"atus getGlobalMongoStatus() {\n        String name = \"GlobalMongo\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkGlobalMongoConnection()) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getServerStatus() {\n        HealthStatus response = new HealthStatus();\n        response.setName(APP_NAME);\n        response.setStatus(\"OK\");\n        return response;\n    }\n\n    private static String getApplicationName() {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"Server\");\n\n        try {\n            InetAddress ip = InetAddress.getLocalHost();\n            String ipAddress = ip.getHostAddress();\n            if (StringUtils.isNotBlank(ipAddress)) {\n                builder.append(\"::\");\n                builder.append(ipAddress);\n            }\n\n            String hostname = ip.getHostName();\n            if (StringUtils.isNotBlank(hostname)) {\n                builder.append(\"::\");\n                builder.append(hostname);\n            }\n        } catch (Exception var4) {\n            LOGGER.warn(\"Unable to determine the MX bean name for the said server.\", var4);\n        }\n\n        if (builder.length() <= 0) {\n            builder.append(\"Unknown\");\n        }\n\n        return builder.toString();\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9cb6d55d-3a48-4f68-b95a-b45defee9fe8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connectordependency/ConnectorDependencyFrameworkServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.connectordependency;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.dependency.Dependency;\nimport com.gainsight.dependency.DependencyInfo;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.AuthenticationType;\nimport com.gainsight.duct.utils.WebClient;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.codehaus.jackson.type.TypeReference;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ConnectorDependencyFrameworkServiceImpl implements DuctDependencyFrameworkService {\n    private static final String CONNECTOR_CONSUMER_MODULE = \"/CONNECTORS/\";\n    private static final String DEPENDENCY_API_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"dependency.api.base.url\");\n    private static final String SECRET = \"secret\";\n    private static final String CONTENT_TYPE = \"content-type\";\n    private static final String REQUEST_INFO = \"requestInfo\";\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1e122190-70ed-4d23-bf65-6ef710a800ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":535,"endLine":573,"content":"                return;\n                    } else if (jsonObject.get(data[i]) instanceof JSONObject) {\n                        jsonObject = jsonObject.getJSONObject(data[i]);\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error occured while trying to update field value {} {}\", jsonPath, newValue, e);\n            }\n\n        }\n    }\n\n    private static Object getFieldValueAsObject(JSONObject obj, String jsonPath) {\n\n        String[] data = jsonPath.split(\"\\\\.\");\n        JSONObject jsonObject = obj;\n        for (int i = 0; i < data.length; i++) {\n            try {\n                if (i == data.length - 1) {\n                    return jsonObject.opt(data[i]);\n                } else {\n                    if (jsonObject.isNull(data[i])) {\n                        return null;\n                    } else if (jsonObject.get(data[i]) instanceof JSONObject) {\n                        jsonObject = jsonObject.getJSONObject(data[i]);\n                    } else {\n                        return StringUtils.isNotEmpty(jsonObject.optString(data[i])) ? jsonObject.opt(data[i]) : null;\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error occured while trying to get field value {}\", jsonPath, e);\n                return jsonObject.opt(jsonPath);\n            }\n\n        }\n        return StringUtils.EMPTY;\n    }\n\n    public DuctResponseDTO extractSyncData(DataExtractionRequest dataExtr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"58c55a30-9415-46e4-8665-5f766e749c5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":124,"endLine":153,"content":");\n        if (responseObj.isResult()) {\n          return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), clazz);\n        } else if (responseObj.getErrorDesc() != null) {\n          throw new SystemException(responseObj.getErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n        }\n      }\n      return null;\n    } catch (Exception e) {\n      if (response != null && response.getReasonPhrase() != null) {\n        throw new SystemException(response.getReasonPhrase(), e, CoreErrorCode.SYSTEM_ERROR, 500);\n      } else {\n        throw new SystemException(\"Error occured while invoking : \" + url, e, CoreErrorCode.SYSTEM_ERROR, 500);\n      }\n    }\n  }\n\n  public static <T> T putGsAppV1(String uri, Object payload, Class<T> clazz) {\n    return putGsAppV1(uri, payload, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T putGsAppV1(String uri, Object payload, Map<String, String> additionalHeaders, Class<T> clazz) {\n    String url = constructGsAppV1Url(uri, Collections.emptyMap());\n    Map<String, String> headers = headers(additionalHeaders);\n    HttpResponseWrapper<ResponseObj> response = null;\n    try {\n      LOGGER.info(\"Invoking mda PUT : {}, with payload : {}\", url, JsonUtil.toJsonString(payload));\n      response = AdvancedHttpHelper.put(url, headers, GainsightUtils.convertObjectToJson(payload), ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        LOGGER.info(\"Response of mda to {}, is {}\", uri, JsonUtil.toJsonString(respon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3225a5fa-ff63-4158-a0eb-09b602fee473","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.processor.GainsightHubspotFetchProcessor;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescriptionV3;\nimport com.gainsight.integration.connector.hubspot.bean.Options;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.Des","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e08dbcf1-8e1e-40a0-b3cc-e769ae03df52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctPXExtractService.java","startLine":37,"endLine":83,"content":"rride\n    public DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping request, int pageSize) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        return null;\n    }\n\n    @Override\n    public CaaSExtractDetails getExtractTask(DuctJobMapping ductJobMapping, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, Map<String, String> fieldNameToFielAlias) {\n        return null;\n    }\n\n    @Override\n    public Map<String, Object> getMetadataForTask(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, DHTaskType dpTaskType, String parentId,Map<String, String> fieldNameToFieldAlias) {\n        return null;\n    }\n\n    @Override\n    public boolean canHandle(Conn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"73662927-8487-4e03-8f51-8c6350281a41","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":600,"endLine":621,"content":"roperties().containsKey(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION))\n                , CoreErrorCode.INVALID_PARAMETER, CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(),\n                CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(), 400);\n        GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreErrorCode.INVALID_PARAMETER, \"Connection Id Should not be null\", \"Connection Id Should not be null\", 400);\n        GainsightPrecondition.assertNotNull(ductRequestDTO.getColumnMappings(), CoreErrorCode.INVALID_PARAMETER, \"At least 1 mapping should be present\", \"At least 1 mapping should be present\", 400);\n    }\n\n    private DuctJobMapping createDuctJobMapping(DuctRequestDTO ductRequestDTO) {\n        Set<String> fields = new HashSet<>();\n        fields.addAll(ductRequestDTO.getFields());\n        if (ObjectUtils.isNotEmpty(ductRequestDTO.getCriteria())) {\n            fields.addAll(DuctUtils.getFieldListFromCriteria(ductRequestDTO.getCriteria()));\n        }\n\n        DuctJobMapping ductJobMapping = DuctJobMapping.builder()\n                .fields(new ArrayList<String>(fields))\n                .resourceName(ductRequestDTO.getResourceName())\n                .connectionId(ductRequestDTO.getConnectionId())\n                .connectorType(ductRequestDTO.getConnectorType())\n                .filterRule(ductRequestDTO.getFilterRule())\n                .startTime(ductRequestDTO.getStartTime())\n                .filtered","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e23622b4-85b6-4f76-9608-d8070d34ed25","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightEcosystemFetchProcessorImpl.java","startLine":27,"endLine":37,"content":"      }).collect(Collectors.toList());\n        return objectDefinitions;\n    }\n\n    @Override\n    public HttpResponse getSynchronizedData(String entityName, List<String> projections, String apiKey, Map<String, String> queryParams) {\n        GainsightEcosystemFetchService gainsightEcosystemFetchService = new GainsightEcosystemFetchServiceImpl();\n        return gainsightEcosystemFetchService.getPaginatedEntityData(entityName, projections, apiKey, queryParams);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab250a13-366b-4110-917b-9ceda10e15e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.platform.metadata.ComplexType;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\npublic class ZendeskToOMDConverterServiceImpl implements OMDConverterBaseService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ZendeskToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String RAW_TITLE = \"raw_title\";\n    private static final String TITL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"718d5030-4944-4c94-b8ad-4e1ddb352066","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ZoomCaasMetadataServiceImpl.java","startLine":53,"endLine":75,"content":"j = new ArrayList<>(zoomObjects.size());\n        for (String obj : zoomObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GainsightZoomEntityDescription gainsightZoomEntityDescription = new GainsightZoomEntityDescription(objectName, Lists.newArrayList());\n        Map metadata = constructZoomObjectDefinition(gainsightZoomEntityDescription.getGainsightZoomFieldDescriptions(), objectName, pnpConnectionsInfo);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(ConnectorType.ZOOM);\n        List<GSFieldDefinition> gsFields = OBJECT_MAPPER.convertValue(metadata.get(FIELDS), new TypeReference<List<GSFieldDefinition>>() {});\n        gsFields.stream().forEach(field -> {\n            GSFieldMeta metaMap = field.getMeta();\n            Map<String, Object> metaProperties = metaMap.getProperties();\n            if(null != metaMap.getOriginalD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3643fb63-7441-498a-8606-c24bd3fd3820","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":386,"endLine":417,"content":");\n    } catch (Exception e) {\n      log.error(\"Error while post processing the data\", e);\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      return dataToBeProcessed;\n    }\n  }\n\n  private Map<String, List<PicklistOption>> generatePicklistMap(ObjectDefinition objectDefinition, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    Map<String, List<PicklistOption>> picklistMap = new HashMap<>();\n    nullSafeList(objectDefinition.getFields())\n        .stream()\n        .filter(fieldDefinition -> CollectionUtils.isNotEmpty(fieldDefinition.getOptions()))\n        .forEach(fieldDefinition -> {\n          List<com.gainsight.bean.PicklistOption> picklistOptions = fieldDefinition.getOptions();\n          List<PicklistOption> requiredPickListOptions = convertBetweenPicklistOptions(picklistOptions);\n          picklistMap.put(fieldDefinition.getFieldName(), requiredPickListOptions);\n        });\n    return picklistMap;\n  }\n\n\n  private List<PicklistOption> convertBetweenPicklistOptions(List<com.gainsight.bean.PicklistOption> picklistOptions) {\n    return picklistOptions\n        .stream()\n        .map(picklistOption -> {\n          PicklistOption mpicklistOption = new PicklistOption();\n          mpicklistOption.setPicklistLabel(picklistOption.getLabel());\n          mpicklistOption.setPicklistValue(DuctUtils.valueOf(picklistOption.getValue()));\n          return mpicklistOption;\n        }).collect(C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"75572900-4e26-49d3-b8f8-f94d25c9923a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":184,"endLine":207,"content":"().get(UCConstants.PROJECTS_COUNT) > 0) {\n                return new ResponseObj(false, HttpStatus.SC_BAD_REQUEST, CaasValidationCode.CONNECTION_HAS_PROJECT_DEPENDANCY);\n            }\n\n            PNPConnectionInput pnpConnectionInput = new PNPConnectionInput();\n            pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfoFromDB);\n            ductConnectionService.delete(pnpConnectionInput);\n            return new ResponseObj(true);\n        } catch (Exception se) {\n            log.error(se.getMessage(), se);\n            return new ResponseObj(false, se.getMessage());\n\n        }\n    }\n\n    @PutMapping(value = \"{connectorType}/revoke/{connectionId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.UPDATE)\n    public ResponseObj revoke(@Context HttpServletRequest request, @Context HttpServletResponse response, @PathVariable(\"connectorType\") String connectorType, @PathVariable(\"connectionId\") String connectionId) {\n        try {\n            assertNotNull(connectionId, CaasValidationCode.INVALID_INPUT, HttpStatus.SC_BAD_REQUEST);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            assertNotNull(pnpConnectionsInfo, CaasValidationCode.CONNECTIONS_NOT_FOUND, HttpStatus.SC_BAD_REQUEST);\n            ductConnectionService.revokeRequest(pnpConnectionsInfo);\n            return new ResponseObj(true, CaasValidationCode.CONNECTION_REVOKED_SU","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fdeadb91-79a6-45d3-82ae-7ee80ceae701","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/ExternalDatabaseWBMessageProcessor.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.MDCContext;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.DuctService;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class ExternalDatabaseWBMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n    private final MessageInfoFactory","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54c22d0a-d5f7-4b93-848b-02347d591173","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CommonEngineConnectionService.java","startLine":83,"endLine":98,"content":"metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails authDetails = authInfoOptional.get();\n        AuthorizationUrl authorizationUrl = authDetails.getAuthorizationUrl();\n        OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"nativeEnabled\", true);\n        properties.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n        Map<String, Object> flattenConnectionInfoWithOAuthAndCallbackUrl = null;\n        String authUrl = null;\n        try {\n            flattenConnectionInfoWithOAuthAndCallbackUrl = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoW","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81c089da-72aa-4b91-9605-0b69fe16fc6f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":74,"endLine":117,"content":"kName() {\n        return ZOOM_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zoom.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zoom.extract.version\", \"v1\");\n    }\n\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zoom.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.ZOOM;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String resourceName = ductJobMapping.getResourceName().toLowerCa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"721c0ea9-07b6-49cf-911c-f745e11ca9d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesConfigDAOImpl.java","startLine":30,"endLine":56,"content":"sObjectAttributesConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectAttributesConfig> getConfigAttributes(ConnectorType connectorType, String objectName) {\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType).and(\"objectName\").in(objectName, \"GS___DEFAULT\"));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectAttributesConfig> caasObjectAttributesConfigs = getMongoTemplate().find(query, CaasObjectAttributesConfig.class);\n        if (CollectionUtils.isEmpty(caasObjectAttributesConfigs)) {\n            LOGGER.warn(\"caasObjectAttributesConfigs found is null \");\n            return Lists.newArrayList();\n        }\n        return caasObjectAttributesConfigs;\n    }\n\n    @Override\n    public CaasObjectAttributesConfig upsertConfigs(CaasObjectAttributesConfig objectAttributeListConfig) {\n        removeObjectAttributeListConfig(objectAttributeListConfig.getConnectorType(), objectAttributeListConfig.getObjectName());\n        objectAttributeListConfig.setId(UUID.randomUUID().toString());\n        getMongoTemplate().insert(objectAttributeListConfig);\n        return objectAttributeListConfig;\n    }\n\n    private void removeObjectAttributeListConfig(ConnectorType connectorType, String objectName) {\n        Query query = new Query().addCriteria(Criteria.where(\"connectorType\").is(connectorType));\n        query.addCriteria(Criteria.where(\"objectName\").is(objectName));\n        getMongoTemplate().remove(que","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3db1c6fb-662d-4131-b812-10c1acd413d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/config/GSDuctWorkerConfiguration.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.config;\n\nimport com.gainsight.database.HAPostgresDatabaseTemplate;\nimport com.gainsight.database.HAPostgresDatabaseTemplateServiceImpl;\nimport com.gainsight.executor.GainsightExecutorService;\nimport com.gainsight.executor.GainsightExecutorServiceImpl;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplate;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplateImpl;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateServiceImpl;\nimport com.gainsight.duct.sdk.client.DuctClientConfig;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.queue.db.spring.configuration.worker.DbQueueSpringConfiguration;\nimport com.gainsight.web.client.HttpClientService;\nimport com.gainsight.web.client.HttpClientServiceImpl;\nimport org.springframework.context.annotation.*;\nimport org.springframework.web.client.RestTemplate;\n\n@Profile(\"!client\")\n@Configuration\n@ComponentScan(basePackageClasses = DbQueueSpringConfiguration.class, basePackages = { \"com.gainsight.duct\", \"com.gainsight.integration\",\"com.gainsight.database\", \"com.gainsight.dao\", \"com.gainsight.message\",\n        \"com.gainsight.resiliency\", \"com.gainsight.file\", \"com.gainsight.service\", \"com.gainsight.dao.picklist\",\n        \"com.gainsight.account\", \"com.gainsight.web\", \"com.gainsight.message.dispatch\", \"com.gainsight.message.service\", \"com.gainsight.utils.cache\"})\npublic class GSDuctWorkerConfiguration {\n\n\n\n    @Bean\n    public Res","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9254011c-31f3-4603-b5ee-c9ec62464dfe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/MetadataGenerationProcessor.java","startLine":27,"endLine":64,"content":"ns.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class MetadataGenerationProcessor extends AbstractDbQueueMessageProcessor {\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private MetadataDriver metadataDriver;\n\n    @Autowired\n    public MetadataGenerationProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                MessageInfo<MetadataGenerationDetails> messageInfo = messageInfoFactory.\n                        getMessageInfo(mess","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21083fda-ab9c-4f89-be48-c3b9dde36283","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":87,"endLine":115,"content":"eturn  metadataDriver.getMetadataUsingEngine(pnpConnectionsInfo.getConnectionId(), objectName, true);\n    }\n\n\n\n    private List<Map<String, Object>> transformObjectList(List<Map<String, Object>> objectList, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n\n        CaasObjectConfig caasObjectConfig = caasObjectConfigDAO.getCaasObjectConfig(pnpConnectionsInfo.getConnectionType());\n        CaasObjectTenantConfig caasObjectTenantConfig = caasObjectTenantConfigDAO.getTenantSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId());\n        CaasObjectTenantConfig connectionIDSpecificCaasObjectTenantConfig = caasObjectTenantConfigDAO.getConnectionIdSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n        List<Map<String, Object>> filteredAndEnhancedObjectList = Lists.newArrayList();\n        Set<String> objectIdsSet = new HashSet<>();\n        for (Map<String, Object> object : objectList) {\n            objectIdsSet.add(String.valueOf(object.get(OBJECT_ID)));\n        }\n\n        filteredAndEnhancedObjectList.addAll(objectList);\n\n        /*\n        Adding global object\n         */\n        if (caasObjectConfig != null) {\n\n            if (CollectionUtils.isNotEmpty(caasObjectConfig.getShowOnlyIncludedObjects())) {\n                for (Map<String, Object> object : objectList) {\n                    if (!caasObjectCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"afd22417-9f93-492d-a404-ab48fcd1d3a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":48,"endLine":75,"content":"(firstCriteria.getOperatorType()));\n                    filterRule.setPropertyName(firstCriteria.getFieldName());\n                    hubspotFilters.add(filterRule);\n                    hubspotFilterGroup.setFilters(hubspotFilters);\n                    break;\n                }\n                filterGroups.add(hubspotFilterGroup);\n                break;\n            } else if (criteria != null) {\n                HubspotFilterGroups hubspotFilterGroup = new HubspotFilterGroups();\n                List<HubspotFilters> hubspotFilters = new ArrayList<>();\n                HubspotFilters filterRule = new HubspotFilters();\n                Object epochValue = null;\n                if (fieldNameDataTypeMap.get(criteria.getFieldName()).equalsIgnoreCase(DATE) ||\n                        fieldNameDataTypeMap.get(criteria.getFieldName()).equalsIgnoreCase(DATETIME)) {\n                    epochValue = convertTimeToEPOCH(criteria.getValues());\n                    log.info(\"epoch value {}\", epochValue);\n                } else {\n                    epochValue = criteria.getValues();\n                }\n                if (criteria.getValues() instanceof List) {\n                    filterRule.setValues((List) criteria.getValues());\n                } else {\n                    filterRule.setValue(epochValue);\n                }\n                filterRule.setOperator(getHubspotSyncOperator(criteria.getOperatorType()));\n                filterRule.setPropertyName(criteria.getFieldName());\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9364b2a9-0fc2-491c-99f5-5dce6269df04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":541,"endLine":560,"content":"                                          String objectName, DataEnum dataEnum, String recordId) throws CaasException {\n    try {\n      Optional<ResourceConfig> optionalResourceConfig = metadataEngineConfig.getResources().stream().filter(i -> objectName.equals(i.getResourceName())).findFirst();\n      if (!optionalResourceConfig.isPresent())\n        DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n      ResourceConfig resourceConfig = optionalResourceConfig.get();\n      Map<DataEnum, List<ApiConfigAttributes>> dataApi = resourceConfig.getMetadataConfig().getDataApi();\n      JsonNode resultData = null;\n      List<GSFieldDefinition> generatedFieldDefinitions = new ArrayList<>();\n      Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n      if (objectDefinition == null) {\n        OMDConverterBaseService omdConverterFactoryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType());\n        objectDefinition = omdConverterFactoryService.addObjectDetailsToOMDFormat(objectName, pnpConnectionsInfo);\n      }\n\n      List<ApiConfigAttributes> apiConfigAttributes = getApiConfigAttributes(dataEnum, dataApi, recordId, objectName);\n\n      for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n        String fieldPrefix = apiConfigAttribute.getPrefixForMetadataFetch();\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f08687ba-7f96-4eb6-9529-69a44c968afe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/TimelineLoadServiceImpl.java","startLine":78,"endLine":92,"content":"           }\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to timeline service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce){\n            throw ce;\n        } catch (Exception e){\n            log.error(\"Exception occurred while writing data to timeline model : {}\", e.getMessage(), e);\n            throw new CaasException(\"Failed to loading into timleine model\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d0fcf254-b061-444d-a3d5-f262c95ce573","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":95,"endLine":124,"content":"kDependency=\" + checkDependency);\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking delete connection : {}\", url);\n            response = AdvancedHttpHelper.delete(url, headers, ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of delete connection to {}, is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    return true;\n                } else if (responseObj.getErrorDesc() != null) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(responseObj.getErrorDesc(), response.getStatusCode()));\n                }\n            }\n            return false;\n        } catch (Exception e) {\n            if (response != null && response.getReasonPhrase() != null) {\n                throw new CaasException(new GsExternalSystemErrorMapping(response.getReasonPhrase(), e));\n            } else {\n                throw new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n\n    private static Map<String, String> getHeaders() {\n        Map<String, String> headers = new HashMap<>();\n        String encryptedRequestInfo = RequestContextProvider.getEncryptedRequestInfo(true);\n        String secr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc9f2b41-b475-4870-9fad-3acd61c281d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":29,"endLine":61,"content":"import java.io.File;\nimport java.io.FileReader;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctErrorConstants.*;\n\n@Service\n@Slf4j\npublic class HubspotBulkWriteBackValidationService {\n\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    CaasMetadataFactory caasMetadataFactory;\n\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    public HubspotBulkWriteBackValidationService(PNPConnectionInfoDao pnpConnectionInfoDao, CaasMetadataFactory caasMetadataFactory, CaasConnectorConfigService caasConnectorConfigDAO) {\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n        this.caasMetadataFactory = caasMetadataFactory;\n        this.caasConnectorConfigService = caasConnectorConfigDAO;\n    }\n\n\n    public void validateHubspotWriteBackPayload(DuctJobMapping ductJobMapping) throws CaasException {\n        File file = null;\n        try {\n            log.info(\"Starting validation for hubspot write back Payload {}\", ductJobMapping.getJobId());\n            StopWatch stopWatch = new StopWatch();\n            stopWatch.start();\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> metaInfoDefinitionMap = getAttributesMapForObjects(ductJobMapping, service, pn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5793dc58-9a0e-4e6b-aeaf-a8423d8cc38f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":694,"endLine":712,"content":"ties().put(GENERATE_OOB_JOBS, true);\n                pnpConnectionsInfo = insertPxMultiInstance(pnpConnectionsInfo);\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                getPxSubscription(pnpConnectionsInfo);\n                Set<String> subscriptionIds = pnpConnectionsInfoList.stream().map(info -> info.getProperties().get(GAINSIGHT_PX_SUBSCRIPTION_ID).toString()).collect(Collectors.toSet());\n                if (subscriptionIds.contains(pnpConnectionsInfo.getProperties().get(GAINSIGHT_PX_SUBSCRIPTION_ID).toString()))\n                    throw new CaasException(CaasValidationCode.MORE_CONNECTION_NAME_SUBSCRIPTION.getUserText(),\n                            CaasValidationCode.SUBSCRIPTION_ID_ALREADY_EXISTS);\n                break;\n\n            case SAP_MKT:\n                assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(\"API_KEY\")), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_API_KEY.getUserText());\n                pnpConnectionsInfo.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)), pnpConnectionsInfo.getConnectionType()));\n                pnpConnectionsInfo.getProperties().put(\"SERVICE_URL\", pnpConnectionsInfo.getProperties().get(\"SERVICE_URL\"));\n                break;\n\n            case REST_API:\n                processCustomConnectionDetails(pnpConnectionsInfo);\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79340bfb-6ed4-4189-83c4-fbefd01be53d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":282,"endLine":301,"content":"rationDetail().getResponseAccessExpireKey())).longValue();\n                ExpireUnit expireUnit = ObjectUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit()) ? authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit() : MILLIS;\n                switch (expireUnit) {\n                    case SECONDS:\n                        expire = expire * 1000;\n                        break;\n                    default:\n                        break;\n                }\n                expire = expire + System.currentTimeMillis() - 10000;\n                baseTokenDetail.setExpiry(expire);\n            }\n            baseTokenDetail.setClientId(SecretData.fromValue(flattenConnectionInfo.get(authDetailsOp.get().getInitialTokenGenerationDetail().getClientIdKey()).toString()));\n            baseTokenDetail.setClientSecret(SecretData.fromValue(flattenConnectionInfo.get(authDetailsOp.get().getInitialTokenGenerationDetail().getClientSecretKey()).toString()));\n            pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n            updateWidgetSetup(pnpConnectionsInfo);\n            pnpConnectionsInfo.setIpaasConnection(false);\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            connectorConfig.getAuthInfo(pnpConnectionsInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFieldsInfo ->\n                    requiredFieldsInfo.getProperties().c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d17155a-0f92-48f7-808d-eb424c710100","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":188,"endLine":204,"content":"nnectionsInfo.getConnectionType());\n        MetadataCache metadataByConnectionIdAndCurrentObjectName = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, currentObject);\n        if (metadataByConnectionIdAndCurrentObjectName != null) {\n          log.info(\"Metadata found in cache for connectionId:{} and objectName:{} with metadata present: {}\", metadataByConnectionIdAndCurrentObjectName.getConnectionId(),\n              metadataByConnectionIdAndCurrentObjectName.getObjectName(), MapUtils.isNotEmpty(metadataByConnectionIdAndCurrentObjectName.getMetadata()));\n          fieldsSet.addAll(metadataByConnectionIdAndCurrentObjectName.getMetadata().get(currentObject).getFields());\n        }\n        if (!forceRefresh && metadataByConnectionIdAndCurrentObjectName != null) {\n          fieldsSet.addAll(metadataByConnectionIdAndCurrentObjectName.getMetadata().get(currentObject).getFields());\n          continue;\n        }\n\n        // Fetch and convert source metadata to OMD if available\n        Map<String, Object> objectDefinitionOfCurrentObject = fetchMetadataFromSource(metadataEngineConfig, pnpConnectionsInfo, currentObject);\n        log.info(\"Metadata fetched from source for connectionId:{} and objectName:{} with metadata present: {}\", connectionId, currentObject, MapUtils.isNotEmpty(objectDefinitionOfCurrentObject));\n\n        Map<String, ObjectDefinition> metadata = Collections.singletonMap(currentObject, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinitionOfCurrentObj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"417eb0e2-c90e-4536-baeb-23308f14589b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":49,"endLine":79,"content":"id field name so that downstream does not ambiguity in differentiating gsid field and source header\n                 */\n                directFields.put(updatedGsidFieldName,directFields.get(gsidFieldName));\n                /*\n                 * removing the gsidFieldName entry as we added the same entry in the above line with a prefix\n                 */\n                directFields.remove(gsidFieldName);\n\n                Map<String, String> matchByCriteria = new HashMap<>();\n                matchByCriteria.put(updatedGsidFieldName, String.valueOf(tuple.getValue()));\n                importLookupLite.setFields(matchByCriteria);\n\n                lookups.putIfAbsent(gsidFieldName,importLookupLite);\n            }\n            transformedRecords.add(directFields);\n        }\n        if(MapUtils.isNotEmpty(lookups)) {\n            if (MapUtils.isNotEmpty(externalActivityRequestDto.getLookups())) {\n                externalActivityRequestDto.getLookups().putAll(lookups);\n            } else {\n                externalActivityRequestDto.setLookups(lookups);\n            }\n        }\n        externalActivityRequestDto.setRecords(transformedRecords);\n    }\n\n    public static void transformExternalDataRequestDto(ExternalDataRequestDto externalDataRequestDto){\n        Map<String, ImportLookupLite> lookups = new HashMap<>();\n        List<Map<String, Object>> transformedRecords = new ArrayList<>();\n        for(Map<String, Object> record: externalDataRequestDto.getRequests()){\n            Map<Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"806a7105-1c61-41f6-b59e-5f26994f7ae2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":513,"endLine":539,"content":"                sb.append(String.format(\"Excess picklist option found in CE for fieldName : {%s} : \", entry.getKey())).append(String.join(\",\", picklistOptionsCE.keySet()));\n            }\n        }\n        if (!nativeFields.isEmpty()) {\n            sb.append(\"Excess fields found in Native Metadata: \").append(String.join(\",\", nativeFields));\n        }\n        return sb.toString();\n    }\n\n    private void compareValues(Object ceValue, String nativeValue, String errorMessage, String fieldName, StringBuilder sb) {\n        if (!ceValue.toString().equals(nativeValue))\n            sb.append(String.format(errorMessage, ceValue, nativeValue, fieldName)).append(NEW_LINE_CHAR);\n    }\n\n    private void compareValues(String ceValue, boolean nativeValue, String errorMessage, String fieldName, StringBuilder sb) {\n        if (!ceValue.equals(String.valueOf(nativeValue)))\n            sb.append(String.format(errorMessage, ceValue, nativeValue, fieldName)).append(NEW_LINE_CHAR);\n    }\n\n    private Map<String, Map<String, Object>> generateFieldNameToMetadataMap(Map<String, Object> metadataFromConnectors) {\n        List<Map<String, Object>> fields = MAPPER.convertValue(metadataFromConnectors.get(\"fields\"), new TypeReference<List<Map<String, Object>>>() {\n        });\n        Map<String, Map<String, Object>> fieldNameToMetadataMap = new HashMap<>();\n        for (Map<String, Object> field : fields) {\n            fieldNameToMetadataMap.put(field.get(FIELD_NAME).toString(), field);\n        }\n        re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2654b59-d948-4349-9f3e-b7dcc1f1d354","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectApiConfigDao.java","startLine":1,"endLine":15,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.List;\n\npublic interface CaasObjectApiConfigDao extends AbstractEntityDao<CaasObjectApiConfig> {\n    CaasObjectApiConfig getConnectorConfigByObjectName(ConnectorType connectorType, String objectName);\n\n    List<CaasObjectApiConfig> getConnectorConfigs(ConnectorType connectorType);\n\n    void dropCollection();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"172f441d-9d80-414d-b64b-2a50490ad1ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/AccountServiceImpl.java","startLine":1,"endLine":44,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.duct.beans.account.AccountDetail;\nimport com.gainsight.duct.dao.ConnectionAccountDAO;\nimport com.gainsight.mongo.builder.account.AccountQuery;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * User: santa\n * Date: 17/4/14\n * Time: 3:30 PM\n */\n@Service\npublic class AccountServiceImpl implements AccountService {\n    protected final Logger LOGGER = LoggerFactory.getLogger(getClass());\n    private final ConnectionAccountDAO accountDAO;\n\n    @Autowired\n    public AccountServiceImpl(ConnectionAccountDAO accountDAO) {\n        this.accountDAO = accountDAO;\n    }\n\n    @Override\n    public boolean exists(String accountId) {\n        AccountQuery query = new AccountQuery();\n        query.accountId(accountId);\n        return accountDAO.exists(query);\n    }\n\n    @Override\n    public AccountDetail findOne(String accountId) {\n        AccountQuery query = new AccountQuery();\n        query.accountId(accountId);\n        return accountDAO.findOne(query);\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"44ecfac6-d4f1-49db-84a5-2841999d7731","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CommonEngineConnectionService.java","startLine":61,"endLine":84,"content":"t) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(pnpConnectionInput.getPnpConnectionsInfo().getAuthorizationType());\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        if (pnpConnectionsInfo.isIpaasConnection()) {\n            // TODO : Delete CE Instance\n        }\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.getProperties().put(IPaasConstants.IPAAS_PROPERTIES, DuctUtils.removeCEPropertiesFromIpaasPropertiesIfPresent(pnpConnectionsInfo));\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n        Optional<AuthDetails> authInfoOptional = metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPre","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5dd419c-6305-46d2-85fb-dd194e6894b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":184,"endLine":189,"content":"targetMap.put(targetKey, sourceMap.get(sourceKey).asDouble());\n            else\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asText());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3100eb4f-38fd-4966-8062-7161dcc2627c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":287,"endLine":306,"content":"ExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch attributes of given fields including it's optionset\", response = Map.class)\n    @PostMapping(value = \"/{connectionId}/{objectname}/attributes/optionset\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjectAttributes(@ApiParam(value = \"Connection Id for fetching attributes and it's optionset\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                           @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                           @ApiParam(value = \"Request Structure to include optionset for picklist fields\", required = true) @RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            GainsightPrecondition.assertTrue(ductRequestDTO.getConnectionId().equals(connectionId), UCValidationCode.PNP_INVALID_INPUT_DATA, HttpStatus.SC_BAD_REQUEST);\n            GainsightPrecondition.assertTrue(ductReques","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48b1416d-f9ef-403f-96a3-2d0ec3c827d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":749,"endLine":766,"content":" gainsightSnowflakeChannelService = gainsightSnowflakeChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n                    gainsightSnowflakeChannelService.authenticate();\n                    pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                } catch (Exception e) {\n                    log.error(\"Error occurred while trying to create connection : {0}\",e);\n                    throw new CaasException(CaasValidationCode.ERROR_AUTHORIZING_CONNECTION.getUserText(), CaasValidationCode.INVALID_INPUT);\n                }\n                break;\n            case GONG_IO:\n                CaasConnectorConfig connectionConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n                pnpConnectionsInfo.getProperties().put(AUTH_SCOPE, connectionConfig.getProperties().get(AUTH_SCOPE));\n                break;\n            case PRODUCTBOARD:\n                Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n                ProductBoardChannelService productBoardChannelService = new ProductBoardChannelServiceImpl(properties.get(ACCESS_TOKEN).toString());\n                assertTrue(productBoardChannelService.authenticateAccessToken(), CaasValidationCode.INVALID_INPUT, CaasValidationCode.UNABLE_TO_AUTHORISE.getUserText(), HttpStatus.SC_BAD_REQUEST);\n                pnpConnectionsInfo\n                        .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(propertie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08597084-6caa-47bf-90f5-e56e28666883","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":516,"endLine":536,"content":"rocessRequest(pnpConnectionsInfo);\n            boolean nativeEnabled = DuctUtils.checkIfIpaasAndFTEnabled(pnpConnectionsInfo);\n            if (!nativeEnabled) {\n                return DuctConnectorCalloutUtil.createConnection(pnpConnectionInput);\n            } else {\n                pnpConnectionsInfo = createConnection(pnpConnectionInput);\n            }\n            pnpConnectionsInfo.getProperties().put(MIGRATION_STATUS, \"COMPLETED\");\n            pnpConnectionsInfo.getProperties().put(\"isDateTimeConversionRequired\",\n                    caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType()).getProperties().getOrDefault(\"isDateTimeConversionRequired\", false));\n            pnpConnectionsInfo.getProperties().putIfAbsent(UCConstants.GSIntegration.GENERATE_OOB_JOBS,\n                    caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType()).getProperties().getOrDefault(\"createOOB\", false));\n            pnpConnectionInfoDao.save(pnpConnectionsInfo);\n            pushAuditLogs(AuditOperationType.CREATE, new UnifiedConnectorRequest(pnpConnectionsInfo), null, EventStatusEnum.SUCCESS);\n            pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfo);\n            ductEventService.publishConnectionEvent(pnpConnectionsInfo, \"CREATE\");\n            return pnpConnectionInput;\n        } catch (CaasException caasException) {\n            String errorMessage = \"\";\n            errorMessage = caasException.getErrorMessage();\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34749a4c-0a91-42b3-9a49-c9d57351c3a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":96,"endLine":121,"content":"            if(ex.getMessage().contains(\"response code: 401\"))\n                throw new SystemException(\"Incorrect Access Key\", ex, CaasValidationCode.INVALID_ACCESS_KEY, httpURLConnection.getResponseCode());\n            else\n                throw new SystemException(\"Error in connecting and pulling data\", ex, CaasValidationCode.GAINSIGHT_PX_METADATA_FETCH_ERROR, httpURLConnection.getResponseCode());\n        }\n    }\n\n\n    private HttpURLConnection getHttpURLConnection(String endpointURL, String httpMethod) throws IOException {\n        URL url = new URL(endpointURL);\n        HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\n        httpURLConnection.setRequestMethod(httpMethod);\n        httpURLConnection.setRequestProperty(APTRINSIC_AUTH_HEADER, this.aptrinsicApiKey);\n        httpURLConnection.setRequestProperty(CONTENT_TYPE_HEADER, APPLICATION_JSON);\n        return httpURLConnection;\n    }\n\n    private InputStream getResponse(String objectType, PNPConnectionsInfo pnpConnectionsInfo) throws IOException{\n        HttpURLConnection httpURLConnection;\n        switch (objectType) {\n            case GAINSIGHT_PX_ACCOUNT:\n                httpURLConnection = getHttpURLConnection( pnpConnectionsInfo.getProperties().get(PX_URL) + \"admin/model/\" + GAINSIGHT_PX_ACCOUNT + \"/\" + \"attributes\", GET);\n                break;\n\n            case GAINSIGHT_PX_USER:\n                httpURLConnection = getHttpURLConnection(pnpConnectionsInfo.getProperties().get(PX_URL) ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a730dd69-6897-4734-9005-c8c50c658979","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1200,"endLine":1220,"content":"         }\n        }\n        pnpConnectionsInfo.getProperties().put(UCCommonConstants.MULTI_CONNECTION, multiConnection);\n    }*/\n    private PNPConnectionsInfo processConnectionForSFDC(PNPConnectionsInfo pnpConnectionsInfo) {\n\n        boolean isCustomDomainEnabled = Boolean.valueOf(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_ENABLED)));\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.CUSTOM_DOMAIN_ENABLED, isCustomDomainEnabled);\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL, populateCustomDomain(pnpConnectionsInfo, isCustomDomainEnabled));\n        SalesforceOrgType sfdcOrgType = SalesforceOrgType.forValue(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ORG_TYPE)));\n        if (sfdcOrgType == null) {\n            sfdcOrgType = RequestContextProvider.getTenantType().equals(TenantType.SANDBOX) ? SalesforceOrgType.SANDBOX : SalesforceOrgType.PRODUCTION;\n        }\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.ORG_TYPE, sfdcOrgType.name());\n        pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.INIT);\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.GENERATE_OOB_JOBS, true);\n        pnpConnectionsInfo.setSalesforceComponentName(RandomStringUtils.random(20, CHARSET));\n        return pnpConnectionsInfo;\n    }\n\n    private String populateCustomDomain(PNPConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db67690a-0249-4e3d-8dd5-b19618eef9f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":59,"endLine":83,"content":" pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        log.info(\"Fetching object for bq\");\n        GainsightBigQueryChannelFactory gainsightBigQueryChannelFactory = new GainsightBigQueryChannelFactory();\n        GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.getChannelService(pnpConnectionsInfo);\n        Map<String, Object> response = gainsightBigQueryChannelService.getObjects();\n        List<Map<String, Object>> tables = (List) response.get(\"tables\");\n        List<Map<String, Object>> returnObj = new ArrayList<>(tables.size());\n        for (Map<String, Object> table : tables) {\n            String objectName = ((Map) table.get(\"tableReference\")).get(\"tableId\").toString();\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, table.get(\"id\"));\n            retMap.put(OBJECT_NAME, objectName);\n            retMap.put(LABEL, objectName);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        log.info(\"Fetching fetch for bq\");\n        GainsightBigQueryChannelFactory gainsightBigQueryChannelFactory = new GainsightBigQueryChannelFactory();\n        GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.getChannelService(pnpConnectionsInfo);\n\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ff1ad70-9a3f-4f7e-93d9-8e737a928e63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":38,"endLine":81,"content":"\";\n  private static final String GS_APP_CONTEXT = \"api\";\n\n  private static String getGsAppV1BaseUrl() {\n    String callbackUrl = DuctCommonUtils.getEnvDeploymentProperty(\"gs.api.url\", null);\n    return String.format(\"%s/%s/%s\", callbackUrl, GS_APP_CONTEXT, API_VERSION);\n  }\n\n  private static String constructGsAppV1Url(String uri, Map<String, String> queryParams) {\n    String query = getQuery(queryParams);\n    if (query.isEmpty()) {\n      return String.format(\"%s/%s\", getGsAppV1BaseUrl(), uri);\n    } else {\n      return String.format(\"%s/%s?%s\", getGsAppV1BaseUrl(), uri, query);\n    }\n\n  }\n\n  private static String getQuery(Map<String, String> queryParam) {\n    if (queryParam == null) {\n      return StringUtils.EMPTY;\n    }\n    StringJoiner joiner = new StringJoiner(\"&\");\n    for (Map.Entry<String, String> e : queryParam.entrySet()) {\n      String value = e.getValue();\n      try {\n        value = URLEncoder.encode(e.getValue(), \"UTF-8\");\n      } catch (UnsupportedEncodingException ex) { // NOSONAR\n        // this will never happen\n      }\n      joiner.add(e.getKey() + \"=\" + value);\n    }\n    return joiner.toString();\n  }\n\n  public static <T> T getGsAppV1(String uri, Class<T> clazz) {\n    return getGsAppV1(uri, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T getGsAppV1(String uri, Map<String, String> queryParams, Class<T> clazz) {\n    return getGsAppV1(uri, queryParams, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T getGsAppV1(String uri, Map<String, Strin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bb18dcd1-f0e7-4658-b0ab-fa1703218b5e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":367,"endLine":395,"content":"   }\n        if (gsExternalSystemErrorMapping.getMessage() != null) {\n            response.setErrorMessage(gsExternalSystemErrorMapping.getMessage());\n            return response;\n        }\n        response.setErrorMessage(gsExternalSystemErrorMapping.getGsErrorMessage());\n        return response;\n    }\n\n    @PostMapping(value = \"{connectionId}/files\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getFileDetails(@PathVariable String connectionId, @RequestBody Set<String> fileIds,\n                                      @RequestParam(required = false, name = \"signed-url\", defaultValue = \"true\") boolean signedUrl) {\n        try {\n            return new ResponseObj(true, ductService.getFileDetails(connectionId, fileIds, signedUrl));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @PostMapping(value = \"meeting\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getMeetingDetails(@RequestBody MeetingDetailsRequestDTO meetingDetailsRequestDTO) {\n        try {\n            return new Respo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4066abb-c208-4bae-a984-e85d399d0675","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCJsonUtils.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.IOException;\n\n@Slf4j\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PUBLIC)\npublic class UCJsonUtils {\n\n  public static UCJsonUtils getInstance(ObjectMapper mapper) {\n    return new UCJsonUtils(mapper);\n  }\n\n  private final ObjectMapper mapper;\n\n  public String toJsonString(Object o) {\n    try {\n      return mapper.writeValueAsString(o);\n    } catch (JsonProcessingException e) {\n      throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR);\n    }\n  }\n\n  public <T> T readObject(String json, Class<T> clazz) {\n    try {\n      return mapper.readValue(json, clazz);\n    } catch (IOException e) {\n      throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR);\n    }\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71549a43-a5a1-4f4a-bfcd-7a2332d8a28b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":111,"endLine":140,"content":"      String executionLogsURL = String.format(\"%s%s?jobId=%s\", API_GATEWAY_URL_BASE, \"/execution/logs\", jobId).intern();\n      Map<String, String> headers = Maps.newHashMap();\n      headers.put(\"sharedSecret\", SHARED_SECRET);\n      LOGGER.debug(\"Submitting request for getExecutionLogs to: {}, with headers: {}\", executionLogsURL, headers);\n      return get(executionLogsURL, headers, ResponseObj.class);\n    } catch (Exception ex) {\n      LOGGER.error(ex.getMessage(), ex);\n      throw new SystemException(ex.getMessage(), SC_INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Override\n  public ConnectorsDataHighwayResponseHandler<ResponseObj> abortJob(String jsonPayload) {\n    try {\n      String abortJobURL = String.format(\"%s%s\", API_GATEWAY_URL_BASE, \"/abort\").intern();\n      Map<String, String> headers = Maps.newHashMap();\n      headers.put(\"sharedSecret\", SHARED_SECRET);\n      LOGGER.debug(\"Submitting request for aborting Job to: {}, with headers:{}, with payload: {}\", abortJobURL, headers, jsonPayload);\n      return post(abortJobURL, headers, jsonPayload, ResponseObj.class);\n    } catch (Exception ex) {\n      LOGGER.error(ex.getMessage(), ex);\n      throw new SystemException(ex.getMessage(), SC_INTERNAL_SERVER_ERROR);\n    }\n  }\n\n  @Override\n  public ConnectorsDataHighwayResponseHandler<ResponseObj> validateFlow(String payload) {\n    try {\n      String validateJobUrl = String.format(\"%s%s\", API_GATEWAY_URL_BASE, \"/validateFlow\").intern();\n      //validateJobUrl = \"http://localhost:8080/api","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5fcce0b8-c965-4308-af1d-248a09714165","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":144,"endLine":182,"content":"emaName = getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionInput.getPnpConnectionsInfo(), SCHEMA);\n\n      connection = createConnection(connectionUrl, properties);\n      preparedStatement = connection.prepareStatement(AUTHENTICATE_SCHEMA_QUERY);\n      // Set the parameter for the prepared statement\n      preparedStatement.setString(1, schemaName);\n      // Execute the query\n      resultSet = preparedStatement.executeQuery();\n\n      if (resultSet.next()) {\n        int count = resultSet.getInt(\"count\");\n        if (count > 0) {\n          return true;\n        } else {\n          throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, CONNECTION_AUTHORIZATION_FAILURE));\n        }\n      }\n    } catch (Exception ex) {\n      log.error(\"[SAP HANA] Connection authentication failed: \", ex);\n      return false;\n    } finally {\n      // Close the ResultSet, PreparedStatement, and Connection to release resources\n      closeConnectionQuietly(preparedStatement, resultSet, connection);\n    }\n    return false;\n  }\n\n  private static void closeConnectionQuietly(PreparedStatement preparedStatement, ResultSet resultSet, Connection connection) {\n    try {\n      if (resultSet != null) {\n        resultSet.close();\n      }\n      if (preparedStatement != null) {\n        preparedStatement.close();\n      }\n      if (connection != null) {\n        connection.close();\n      }\n    } catch (Exception e) {\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7b5ddc2-4ac9-4a43-912c-9f60a5b12246","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemResponse.java","startLine":1,"endLine":14,"content":"package com.gainsight.duct.utils.ecosystem;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\npublic class EcosystemResponse {\n  private List<Map<String, Object>> transformedRecords;\n  private String nextPageToken;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a56906cb-cdbc-4120-800a-f06530af27f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":474,"endLine":495,"content":"                 DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                    + FORWARD_SLASH + successFile.getName(), successFile);\n                            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                    + FORWARD_SLASH + failureFile.getName(), failureFile);\n                            return ductResponse;\n                        }\n                    }\n\n                    if (MapUtils.isNotEmpty(result) && SUCCESS.equals(result.getOrDefault(STATUS, StringUtils.EMPTY))) {\n                        ++successRecords;\n                        writeToFile(successFile, nextRecord);\n                    } else {\n                        ++failedRecords;\n                        String[] clonedRecord = Arrays.copyOf(nextRecord, nextRecord.length + 1);\n                        if (StringUtils.isEmpty(result.getOrDefault(ERROR_MESSAGE, EMPTY_STRING).toString())) {\n                            clonedRecord[nextRecord.length] = \"INTERNAL_SERVER_ERROR\";\n                        } else {\n                            clonedRecord[nextRecord.length] = String.valueOf(result.getOrDefault(ERROR_MESSAGE, EMPTY_STRING));\n                        }\n                        writeToFile(failureFile, clonedRecord);\n                    }\n                } catch (Exception e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd48d9cb-aad9-4cd1-90b8-5f540418e74b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":173,"endLine":188,"content":"ne(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                      @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                                      @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                                      @ApiParam(value = \"Force refresh metadata\", required = false) @RequestParam(value = \"refresh\", required = false) boolean refreshMetadata) {\n        try {\n            return new ResponseObj(true, metadataDriver.getMetadataUsingEngine(connectionId, objectName, refreshMetadata));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c7f41440-22d5-44d0-a003-6a2eb3846ddc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":138,"endLine":164,"content":"hrows\n  @Override\n  public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n    validateConnectionProperties(pnpConnectionsInfo);\n    if (pnpConnectionsInfo.isIpaasConnection()) {\n      // TODO : Delete CE Instance @Aditya - what is this??\n    }\n    pnpConnectionsInfo.setIpaasConnection(false);\n    pnpConnectionsInfo.setAuthorizationType(AuthorizationType.ACCESS_KEY);\n    BaseTokenDetail tokenDetail = new BaseTokenDetail();\n    String accessToken = DuctUtils.valueOf(((Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).get(USERNAME) + \":X\");\n    tokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(accessToken));\n    pnpConnectionsInfo.setTokenDetail(tokenDetail);\n    Pair<Boolean, String> isConnectionValid = isConnectionValid(accessToken, pnpConnectionsInfo);\n    if (BooleanUtils.isTrue(isConnectionValid.getLeft())) {\n      pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n      return pnpConnectionsInfo;\n    } else {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, isConnectionValid.getRight(), null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n  }\n\n  @Override\n  public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    return null;\n  }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d03eef2c-acc7-4208-8d0c-3c3432cbcc02","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebMvcConfiguration.java","startLine":58,"endLine":77,"content":"(excludeInterceptorURIs);\n    }\n\n    if (apiScopeEnabled) {\n      registry.addInterceptor(new ApiScopeInterceptor());\n    }\n    if (permissionCheckEnabled) {\n      registry.addInterceptor(new PermissionAuthorizationInterceptor());\n    }\n  }\n\n  @Override\n  public void addResourceHandlers(ResourceHandlerRegistry registry) {\n    registry.addResourceHandler(\"swagger-ui.html\")\n        .addResourceLocations(\"classpath:/META-INF/resources/\");\n\n    registry.addResourceHandler(\"/webjars/**\")\n        .addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7211b975-eec7-46d0-b7da-7652fd0120ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":610,"endLine":627,"content":"getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            log.info(\"downloaded file from location: {} succeeded\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            return file;\n        } catch (Exception e) {\n            log.error(\"Error in downloading the file\");\n            throw e;\n        }\n    }\n\n    private boolean isNullOrEmpty(Character character) {\n        return character == null || character == '\\u0000';\n    }\n\n    private double fileSizeInMBs(File file) {\n        return (file.length()) / (1024.0 * 1024.0);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1bc5d33b-3f8d-4f98-ae82-795b3b3fc70d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":355,"endLine":387,"content":" field.getJsonPath() + CURRENCY_FIELD, i);\n                    } catch (Exception e) {\n                        LOGGER.error(\"Error occurred while trying to write currency data\", e);\n                        throw new Exception(\"Error occurred while trying to write currency data\", e);\n                    }\n                }\n            }\n        }\n    }\n\n    private void resolvePicklist(DataExtractionRequest dataExtractionRequest, JSONObject obj) throws\n            JSONException {\n        for (Map.Entry<String, List<PicklistOption>> entry : dataExtractionRequest.getPicklistOptionMap().entrySet()) {\n            String fieldName = entry.getKey();\n            List<PicklistOption> picklistOptions = entry.getValue();\n            String[] data = fieldName.split(\"\\\\.\");\n            String picklistField = null;\n            String picklistFieldValue = null;\n            JSONObject picklistObj = obj;\n            for (int i = 0; i < data.length; i++) {\n                try {\n                    if (i == data.length - 1) {\n                        picklistField = data[i];\n                        picklistFieldValue = picklistObj.optString(data[i]);\n                    } else {\n                        picklistObj = picklistObj.getJSONObject(data[i]);\n                    }\n                } catch (Exception e) {\n                    LOGGER.error(\"Error occurred while trying to find picklist mapping, ignored\", e);\n                }\n            }\n            String pickListLabel = \"\";\n            i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b287ee4c-aa9b-42aa-8de8-ffaa6ee3db82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/EcosystemsCaasMetadataServiceImpl.java","startLine":1,"endLine":42,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.processor.EcosystemsMetadataService;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\n@Order(400)\n@Service\npublic class EcosystemsCaasMetadataServiceImpl implements CaasMetadataService {\n\n  @Autowired\n  private EcosystemsMetadataService ecosystemsMetadataService;\n\n  @Autowired\n  private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return connectorType == ConnectorType.ECOSYSTEM;\n  }\n\n  @Override\n  public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n    return ecosystemsMetadataService.listAllObjects(pnpConnectionsInfo);\n  }\n\n  @Override\n  public Map<String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa7a8011-6bde-4ed6-9712-032d9de3ee67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":135,"endLine":159,"content":"adata().get(object).getFields().stream()\n                    .map(i-> i.getFieldName()).collect(Collectors.toSet()));\n        }\n\n        boolean isMetadataCacheUpdate = false;\n        boolean isTenantConfigUpdate = false;\n\n\n        for(Map<String, Object> fieldInfo : fieldInfos) {\n            if (!fieldsFromMetadataResponse.contains(fieldInfo.get(FIELD_NAME))) {\n                throw new CaasException(\"This enhanced field is not present, hence can't be edited.\", CaasValidationCode.FIELD_ALREADY_PRESENT);\n            } else if (fieldsFromMetadataCacheResponse.contains(fieldInfo.get(FIELD_NAME))){\n\n                GSFieldDefinition fieldFromMetadataCache = metadataCache.getMetadata().get(object).getFields().stream()\n                        .filter(i-> i.getFieldName().equals(fieldInfo.get(FIELD_NAME))).findFirst().get();\n\n                if (fieldFromMetadataCache.getMeta().getProperties().get(\"source\").equals(FieldSaveType.PROMOTED.getValue())) {\n\n                    String json = gson.toJson(fieldFromMetadataCache);\n                    Map<String, Object> transformedMap = gson.fromJson(json, new TypeToken<Map<String, Object>>() {\n                    }.getType());\n                    DuctCollectionUtils.deepMerge(transformedMap, fieldInfo);\n                    GSFieldDefinition updatedFieldDefinition = gson.fromJson(gson.toJson(transformedMap), new TypeToken<EnhancedGSFieldDefinition>() {\n                    }.getType());\n                    updatedFieldDefinition.getMeta().ge","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1dc0b43-3f6a-49ea-9cb1-d476405ef921","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":139,"endLine":168,"content":"  objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        }\n\n        /*\n        Adding connection id level object\n         */\n        if (connectionIDSpecificCaasObjectTenantConfig != null) {\n            for (Map<String, Object> object : connectionIDSpecificCaasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing connection id object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (connectionIDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n        return filteredAndEnhancedObjectList;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea620b91-1b0d-4a7f-8107-20e62b94ab4c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":153,"endLine":189,"content":"nonNull(dataTypeMappingsForField) && StringUtils.isNotBlank(dataTypeMappingsForField.getWritebackFormat())) {\n      metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n    }\n\n    if (Objects.nonNull(dataTypeMappingsForField) && dataTypeMappingsForField.getDecimalPlaces() != null) {\n      meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n    }\n    metaProperties.put(SOURCE, FieldSaveType.METADATA_API);\n\n    meta.put(PROPERTIES, metaProperties);\n    fieldDefinition.put(META, meta);\n  }\n\n\n  private String getGainsightDataTypeFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String externalSourceDataType) {\n\n    if (StringUtils.isBlank(externalSourceDataType)) {\n      return null;\n    }\n    DataTypeMappings requiredDataTypeMapping = getDataTypeMappingFromExternalSourceDataType(connectorConfig, externalSourceDataType);\n    if (Objects.isNull(requiredDataTypeMapping)) {\n      return null;\n    }\n    return requiredDataTypeMapping.getGainsightDatatype().name();\n\n  }\n\n  @Nullable\n  private static DataTypeMappings getDataTypeMappingFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String externalSourceDataType) {\n\n    if (StringUtils.isBlank(externalSourceDataType)) {\n      return null;\n    }\n    List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n    DataTypeMappings requiredDataTypeMapping = dataTypeMappings\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMappin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c39db5b-8011-443c-8267-aa09749aa428","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":261,"endLine":281,"content":"fig(Arrays.asList(caasObjectOverrideAttributesConfig), ObjectDefinitionAsMap);\n\n    // Override attributes if defined at connector type level\n    List<CaasObjectAttributesTenantConfig> tenantConfigAttributesConnectorLevel = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId());\n    MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(tenantConfigAttributesConnectorLevel, ObjectDefinitionAsMap);\n    // Tenant Default and Override Attribute Config\n    List<CaasObjectAttributesTenantConfig> tenantConfigAttributes = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n    //exclude attributes from global exclude config\n    List<Map<String, Object>> globalObjectExcludeAttributes = new ArrayList<>();\n    if (!configAttributes.isEmpty())\n      configAttributes.forEach(i -> {\n        if (null != i.getExcludeAttribute())\n          globalObjectExcludeAttributes.addAll(i.getExcludeAttribute());\n      });\n\n    CaasObjectAttributesConfig caasObjectExcludeAttributesConfig = new CaasObjectAttributesConfig();\n    caasObjectExcludeAttributesConfig.setExcludeAttribute(globalObjectExcludeAttributes);\n    MetadataCommonUtil.excludeAttributesFromConfig(Arrays.asList(caasObjectExcludeAttributesConfig), ObjectDefinitionAsMap);\n\n    MetadataCommonUtil.overrideAttributesF","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c4c39a6-fcaa-46e1-92f2-23efd1144067","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.utils.hubspot;\n\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotFilterGroups;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotFilters;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.time.Instant;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\n\n@Slf4j\npublic class HubspotCaasSearchRequestCriteriaBuilder {\n\n    public static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n    private static final String DATE = \"date\";\n    private static final String DATETIME = \"dateTime\";\n\n    public static List<HubspotFilterGroups> getFilterFuleFromCAASRule(Criteria baseCriteria, Map<String, String> fieldNameDataTypeMap) throws CaasException {\n        List<HubspotFilterGroups> filterGroups = new ArrayList<>();\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            if (criteria.getFilters() != null && criteria.getFilters().size() > 1) {\n                HubspotFilterGroups hubspotFilterGr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b534793-cb82-4139-93a0-bffd80113274","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":1,"endLine":41,"content":"package com.gainsight.duct.dao;\n\nimport com.gainsight.bean.base.connection.SnowFlakeConnectionDetail;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.utils.CryptHandler;\nimport com.snowflake.client.jdbc.SnowflakeDriver;\nimport exception.SystemException;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n/**\n * @Author Manas Ranjan Sur\n * @Date 31st March 2022\n * @Description Dao layer for Snowflake\n */\npublic class SnowflakeDaoImpl implements SnowflakeDao {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SnowflakeDaoImpl.class);\n\n    private SnowFlakeConnectionDetail connectionDetail;\n    private Connection connection;\n    private PNPConnectionsInfo pnpConnectionsInfo;\n    private static final String CONNECTION_FAILED_MESSAGE = \"Failed to connect to Snowflake\";\n    private static final String QUOTES = \"\\\"\";\n    private static final String DOT = \".\";\n\n    public SnowflakeDaoImpl(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f3779a1-c480-4de8-89e5-47e20e8ebbc8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DHResponseDTO.java","startLine":1,"endLine":24,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.duct.beans.dh.JobDetails;\nimport com.gainsight.duct.beans.TaskDetails;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport javax.validation.constraints.NotNull;\nimport java.util.List;\n\n@Getter\n@Setter\n@EqualsAndHashCode()\n@ToString\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class DHResponseDTO {\n\n    @NotNull\n    private JobDetails jobDetails;\n    private List<TaskDetails> taskDetails;\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59c83b04-7ba8-4826-85f6-a5ea8b1af5ad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":25,"endLine":65,"content":"towired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.Response;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n\n@Order(500)\n@Slf4j\n@Service\npublic class GainsightCaasMetadataServiceImpl implements CaasMetadataService {\n\n    @Autowired\n    private HttpClientService httpClientService;\n\n    @Autowired\n    private CaasMetadataTransformationConfigDAO metadataTransformationConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.GAINSIGHT.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n\n        Map<String, Object> headers = getB2BHeaders();\n        String url = DuctGSServiceUrlUtil.getObjectMetadataApiUrl() + \"/v1/meta/describe/listObjects/MDA\";\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from OMD --> {}\", response.getStatus());\n            return DuctUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), List.class);\n        } catch (Exception e) {\n            log.error(\"Not able to fetch the object list n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a1aa9cb-134b-4f65-9c65-5f53c9747bdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchServiceImpl.java","startLine":70,"endLine":97,"content":"{\n                    gainsightPXFieldDescription.setCanonicalName(gainsightPXFieldDescription.getApiName());\n                }\n                if (gainsightPXFieldDescription.getApiName().equalsIgnoreCase(\"accountId\")) {\n                    gainsightPXFieldDescription.setType(\"reference\");\n                    List<String> referenceTo = new ArrayList<>();\n                    referenceTo.add(UCConstants.GSIntegration.GAINSIGHT_PX_ACCOUNT);\n                    gainsightPXFieldDescription.setReferenceTo(referenceTo);\n                }\n            });\n            gsIntegrationResponse.setSuccessful(true);\n            gsIntegrationResponse.setResult(feildDescriptionList);\n        } catch (Exception exception) {\n            LOGGER.error(\"{CAAS} Error in Internal System\", exception);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, exception));\n\n        }\n        return gsIntegrationResponse;\n    }\n\n    private UCAptrinsicChannelService getUCAptrinsicChannelService(PNPConnectionsInfo pnpConnectionInfo) {\n        return new UCAptrinsicChannelServiceImpl(pnpConnectionInfo.getTokenDetail().getAccessKey().getString());\n    }\n\n    @Override\n    public PNPConnectionsInfo getSubscription(PNPConnectionsInfo pnpConnectionInfo) {\n        UCAptrinsicChannelService ucAptrinsicChannelService = getUCAptrinsicChannelService(pnpConnectionInfo);\n        InputStream inputStream = null;","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5bc985e7-9c96-4451-ba0d-3eac29672d1f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":540,"endLine":548,"content":"inition;\n    }\n\n    public static IntercomV2Region getRegion(PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> IPAAS_PROPERTIES = (Map<String, Object>) GainsightCollectionUtils.nullSafeMap(pnpConnectionsInfo.getProperties())\n                .getOrDefault(IPaasConstants.IPAAS_PROPERTIES, new HashMap<>());\n        return IntercomV2Region.valueOf(IPAAS_PROPERTIES.getOrDefault(\"region\", IntercomV2Region.US.name()).toString());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a99dfdd-e402-408c-b002-87bb49ae6e74","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":31,"endLine":64,"content":"ublic static final Logger LOGGER = LoggerFactory.getLogger(ConfigLoader.class);\n    private static final String CAAS_OBJECT_ATTRIBUTES_CONFIG = \"caas_object_attributes_config.json\";\n    private static final String CAAS_OBJECT_CONFIG = \"caas_object_config.json\";\n    private static final String CAAS_CONNECTOR_CONFIG = \"caas_connector_config.json\";\n    private static final String CAAS_OBJECT_API_CONFIG = \"caas_object_api_config.json\";\n    private static final String METADATA_TRANSFORMATION_CONFIG = \"caas_metadata_transformation_config.json\";\n    private static final String METADATA_ENGINE_CONFIG = \"metadata_engine.json\";\n\n    @Autowired\n    CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Autowired\n    CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Autowired\n    CaasObjectApiConfigDao caasObjectApiConfigDao;\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n\n    @Autowired\n    private CaasMetadataTransformationConfigDAO caasMetadataTransformationConfigDAO;\n\n    @Autowired\n    private CaasObjectConfigDAO caasObjectConfigDAO;\n\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public void run(ApplicationArguments args) {\n        LOGGER.info(\"Args log : {}, {}, {}\", args.getNonOptionArgs().toString(), args.getSourceArgs().toString(), args.toString());\n        Boolean loadConfigs = DeploymentProperties.getDeploymentProperties().getBooleanValue(\"caas.config.refresh\",false);\n        if (args.getNonOptionArgs().","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf27378f-8c45-4598-840f-b49879dfa004","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1519,"endLine":1549,"content":"WithParams);\n    }\n\n    private Map updateOAuthAccessToken(PNPConnectionsInfo pnpConnectionsInfo, String code, String grantType) throws CaasException {\n        Map oauthResponse = null;\n        try {\n            oauthResponse = callOutOAuthService.getOAuthAccessToken(pnpConnectionsInfo, code, grantType);\n            callOutOAuthService.getUpdatedPnpConnectionsInfoWithAccessToken(pnpConnectionsInfo, oauthResponse);\n        } catch (AccessDeniedException e) {\n            log.error(\"access denied \", e);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.INIT);\n            String responseJson = GainsightUtils.convertObjectToJson(oauthResponse);\n            CaasException ex = new CaasException(new GsExternalSystemErrorMapping(\"Could not retrieve oauth access token. Response: \" + responseJson));\n            throw ex;\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(e.getMessage(), e));\n        } finally {\n            pnpConnectionInfoDao.update(pnpConnectionsInfo);\n            ;\n        }\n        return oauthResponse;\n    }\n\n    private boolean isDuplicateSegmentAccessKey(String encryptedAccessKey) {\n        AccessKeyQuery accessKeyQuery = new AccessKeyQuery();\n        accessKeyQuery.accessKey(encryptedAccessKey);\n        accessKeyQuery.accessType(\"SEGMENT_IO\");\n        accessKeyQuery.deleted(false);\n\n        AccessKeyInfo accessKeyInfo = accessKeyDao.findOne(accessKeyQuery);\n        return (null != accessKeyInfo)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe149c81-122c-415f-8cbb-307819edf3fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":25,"endLine":59,"content":"rt org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.integration.bean.IPaasConstants.META;\nimport static com.gainsight.integration.bean.IPaasConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.COMMA;\n\n@Order(1000)\n@Service\npublic class DatabricksCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.DATABRICKS.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n        GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7fa6bc49-2fe8-4f36-baa4-1fc0eeccc7da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DataExtractionService.java","startLine":1,"endLine":17,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.data;\n\nimport com.gainsight.duct.beans.dh.DataExtractionRequest;\nimport org.json.JSONArray;\n\nimport java.io.File;\nimport java.util.List;\n\npublic interface DataExtractionService {\n    List<File> extractData(DataExtractionRequest dataExtractionRequest) throws Exception;\n\n    JSONArray extractDataAsJsonArray(DataExtractionRequest dataExtractionRequest) throws Exception;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3f1c987-ab02-4018-bfaf-b5f9b726aa5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":108,"endLine":129,"content":"isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n                if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n                    meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n\n                // TODO : PICKLIST VALUES IS PENDIND AS THE KEY IS DIFFERING ACROSS FIELDS\n//            populatePicklistValuesForField(field, connectorConfig, fieldDefinition);\n\n                populateValueIfPresent(field, CREATEABLE, meta, CREATEABLE, Boolean.class);\n                populateValueIfPresent(field, EDITABLE_IN_PORTAL, meta, UPDATEABLE, Boolean.class);\n                populateValueIfPresent(field, REQUIRED_IN_PORTAL, meta, REQUIRED, Boolean.class);\n                populateValueIfPresent(field, EDITABLE_IN_PORTAL, meta, READ_ONLY, Boolean.class);\n\n                populatePicklistOption(field, fieldDefinition);\n                //No property to identify hidden field marking accessible as true by default for all fetched fields\n                meta.put(ACCESSIBLE, true);\n\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n                metaProperties.put(SOURC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99c6d843-34b2-4192-a002-5830c77714b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":373,"endLine":398,"content":"ret(), tokenDetailMap, \"accessSecret\");\n        checkAndAddValue(tokenDetail.getClientId(), tokenDetailMap, \"clientId\");\n        checkAndAddValue(tokenDetail.getClientSecret(), tokenDetailMap, \"clientSecret\");\n        checkAndAddValue(CryptHandler.getInstance().decrypt(tokenDetail.getRefreshToken()), tokenDetailMap, \"refreshToken\");\n        checkAndAddValue(CryptHandler.getInstance().decrypt(tokenDetail.getAccessToken()), tokenDetailMap, \"accessToken\");\n        checkAndAddValue(tokenDetail.getExpiry(), tokenDetailMap, \"expiry\");\n        checkAndAddValue(tokenDetail.getTokenType(), tokenDetailMap, \"tokenType\");\n        checkAndAddValue(tokenDetail.getBucketName(), tokenDetailMap, \"bucketName\");\n        checkAndAddValue(tokenDetail.getUserName(), tokenDetailMap, \"userName\");\n        checkAndAddValue(tokenDetail.getPassword(), tokenDetailMap, \"password\");\n        checkAndAddValue(tokenDetail.getHeaders(), tokenDetailMap, \"headers\");\n\n        connectionInfoAsMap.put(\"tokenDetail\", tokenDetailMap);\n    }\n\n    private static void processOAuthSecretDetailIfPresent(Map<String, Object> connectionInfoAsMap) {\n        if (!connectionInfoAsMap.containsKey(\"properties\") || Objects.isNull(connectionInfoAsMap.get(\"properties\"))) {\n            return;\n        }\n\n        Map<String, Object> properties = (Map<String, Object>) connectionInfoAsMap.get(\"properties\");\n        if (!properties.containsKey(IPAAS_PROPERTIES)) {\n            return;\n        }\n\n        properties = (Map<String, Object>) ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a62a2e9e-fb9e-4928-86aa-1b1d8b153404","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":26,"endLine":61,"content":"ort com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.github.wnameless.json.flattener.JsonFlattener;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.multipart.MultipartFile;\nimport utils.Constants;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.zip.GZIPInputStream;\n\nimport static com.gainsight.integration.bean.IPaasConstants.*;\nimport static com.gainsight.integration.bean.enums.common.ConnectorType.*;\nimport static com.gainsight.integration.utils.common.UCConstants.*;\n\n@Slf4j\npublic class DuctUtils {\n\n    public static ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static com.fasterxml.jackson.databind.ObjectMapper MAPPER = new com.fasterxml.jackson.databind.ObjectMapper();\n    public static final HashSet<ConnectorType> IPAAS_CONNECTORS = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfb346fe-a160-47ae-a16c-aa4a7a2ceced","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":167,"endLine":182,"content":"ibutes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n            MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(connectionIdConfigAttributes, metadata);\n            return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n        } catch (IOException ioex) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, ioex, null, \"Error occurred while trying to fetch metadata\"));\n        }\n    }\n\n    private String getMetadataApiPath(List<CaasObjectApiConfig> connectorConfigs, String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws IOException, CaasException {\n        CaasObjectApiConfig connectorApiConfig = null;\n        Optional<CaasObjectApiConfig> caasConnectorConfigOptional = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(DuctConstants.CUSTOM_OBJECTS_KEYWORD)).findFirst();\n        if (caasConnectorConfigOptional.isPresent())\n            connectorApiConfig = caasConnectorConfigOptional.get();\n        else\n            DuctUtils.throwError(CaasValidationCode.API_CONFIG_NOT_FOUND.getGsEventCode(), CaasValidationCode.API_CONFIG_NOT_FOUND.getUserText(), objectName + \" API Config not found\");\n        Object objectTypeIdFromCache = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e9acf09a-c7d7-4bff-837b-b408dc634d9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctCallBackController.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.dto.DHResponseDTO;\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.duct.beans.dh.JobDetails;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport utils.ResponseObj;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\nimport java.util.Map;\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/callback\")\npublic class DuctCallBackController {\n\n    @Autowired\n    IpaasBulkFileDownloadProducerService ipaasBulkFileDownloadProducerService;\n\n    @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @PostMapping(value = \"/bulk/ipaas\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseObj updateJobInfo(@RequestBody Map<String, Object> request, @RequestParam(\"token\")  String token,\n                                  @RequestParam(\"tenantId\")  String tenantId, @RequestParam(\"connectionId\")  String connectionId,\n                                  @RequestParam(\"jobId\") String jobId) {\n        String secretToken = Dep","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60b7803b-1e5d-41a5-96e3-fd0f2434bad9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":1,"endLine":48,"content":"package com.gainsight.duct.clients;\n\nimport com.gainsight.duct.beans.EnhancedGSFieldDefinition;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.opencsv.CSVWriter;\nimport com.opencsv.ICSVWriter;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.io.FileUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.List;\nimport java.util.Map;\n\n@Slf4j\n@Component\npublic class UpdateJiraAttributes implements DuctClient{\n\n    @Autowired\n    CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n\n    @Override\n    public String name() {\n        return \"UpdateJiraAttributes\";\n    }\n\n    @Override\n    public Options requiredOptions() {\n        Options options = new Options();\n        options.addOption(\"f\", \"file\", true, \"File path\");\n        return options;\n    }\n\n    @Override\n    public void migrate(CommandLine cmd) {\n        String tenantIdFile = cmd.getOptionValue(\"file\");\n        File file = new File(tenantIdFile);\n        if(file.exists()){\n            File report = new File(\"./Rep","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ea6c4fe-6cdb-4644-876a-af4de072cedd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":101,"endLine":128,"content":"shMap<>();\n        retMap.put(OBJECT_ID, String.valueOf(objectDetails.get(\"name\")));\n        retMap.put(OBJECT_NAME, String.valueOf(objectDetails.get(\"name\")));\n        retMap.put(IPaasConstants.LABEL, String.valueOf(objectDetails.get(\"name\")));\n        return retMap;\n    }\n\n    private Map<String, Object> constructFieldMap(Map<String, Object> fieldDetails, String objectName, CaasConnectorConfig caasConnectorConfig) {\n        Map<String, Object> meta = Maps.newHashMap();\n        Map<String, Object> retMap = new HashMap<>();\n        String dataTypeJson = String.valueOf(fieldDetails.get(\"data_type\"));\n        Map<String, Object> dataTypeMap = Maps.newHashMap();\n        Map<String, Object> metaProperties = new HashMap<>();\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        Map<String, ComplexType> complexTypeMappings = caasConnectorConfig.getComplexTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n        if (StringUtils.isNotBlank(dataTypeJson)) {\n            try {\n                dataTypeMap = OBJECT_MAPPER.readValue(dataTypeJson, new TypeReference<Map<String, Object>>() {\n                });\n            } catch (IOException e) {\n                log.error(\"Error in converting json to object: {}\", e.getMessage(), e);\n                throw new RuntimeException(e);\n            }\n        }\n\n        St","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84068798-e5ab-4741-80ff-29da93c83c98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCXMLUtility.java","startLine":1,"endLine":59,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class UCXMLUtility {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(UCXMLUtility.class);\n\n\tprivate static String CSV_DELIMITER = \"\\\",\\\"\";\n\tprivate static String DUMMY_NL = \"dummy_nl\";\n\n\tprivate UCXMLUtility(){}\n\n\tpublic static Document convertStringToXMLDocument(String xmlString)\n\t{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = null;\n\t\ttry\n\t\t{\n\t\t\tbuilder = factory.newDocumentBuilder();\n\t\t\tDocument doc = builder.parse(new InputSource(new StringReader(xmlString)));\n\t\t\treturn doc;\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tLOGGER.error(\"Parsing error\", e);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static String getElementValueById(Document doc, String id) {\n\t\tList<String> s = getElementValuesById(doc, id);\n\t\tif (!s.isEmpty()) {\n\t\t\treturn s.get(0);\n\t\t} else {\n\t\t\treturn StringUtils.EMPTY;\n\t\t}\n\t}\n\n\tpublic static List<String> getElementValuesById(Document doc, String id) {\n\t\tif (doc == null) {\n\t\t\tthrow new S","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"62a653b5-0665-4110-b5dd-2943124adb91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountService.java","startLine":1,"endLine":34,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.enums.OAuthType;\nimport org.scribe.model.Token;\n\n/**\n * User: santa\n * Date: 14/4/14\n * Time: 1:47 PM\n */\npublic interface GainsightAccountService {\n\n  OAuthType oauthType();\n\n  String authorizationURL(AccountType accountType, String hostUrl);\n\n  String authorizationURL(AccountType accountType, String hostUrl, String scope);\n\n  String authorizationURL(AccountType accountType, String hostUrl, String customDomain, String orgType);\n\n String getAuthorizationURL(AccountType accountType, String hostUrl,String clientId, String clientSecret);\n\n  Token accessToken(AccountType accountType, String code, String hostUrl, String resource, OAuthDetail oAuthDetail);\n\n  Token accessToken(AccountType accountType, String code, String hostUrl, OAuthDetail oAuthDetail, String customDomain, String orgType);\n\n  OAuthDetail findOAuthDetail(AccountType accountType);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eb046196-b6f3-4613-a64b-18c80534fcbc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":31,"endLine":59,"content":"ice, DuctDatabaseTemplateService ductDatabaseTemplateService) {\n        this.databaseTemplateService = databaseTemplateService;\n        this.gainsightExecutorService = new GainsightExecutorServiceImpl();\n        this.ductDatabaseTemplateService = ductDatabaseTemplateService;\n    }\n\n    @Override\n    public HealthStatusResponse getAllServiceStatus(String tenantId) {\n        List<Callable<HealthStatus>> responseCallables = Lists.newArrayList();\n        responseCallables.add(this::getServerStatus);\n        responseCallables.add(this::getGlobalMongoStatus);\n        responseCallables.add(this::getAuthMongoStatus);\n        responseCallables.add(() -> getTenantSchemaMongoStatus(tenantId));\n        responseCallables.add(() -> getTenantDataMongoStatus(tenantId));\n        responseCallables.add(() -> getTenantRedshiftStatus(tenantId));\n        responseCallables.add(() -> getTenantHAPostgresStatus(tenantId));\n\n        return new HealthStatusResponse(CoreUtils.getProperty(\"app.version\", \"Unknown\"),\n            gainsightExecutorService.submit(responseCallables, 30000), Collections.singletonList(getApplicationDBStatus()));\n    }\n\n    public HealthStatus getTenantHAPostgresStatus(String tenantId) {\n        String name = \"HAPostgres\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkTenantHAPostgresConnection(tenantId)) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"39f82a96-3442-45cd-afd1-1131d82dfcc3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/FeatureToggleUtil.java","startLine":27,"endLine":48,"content":"ploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    private static final Long CRM_MULTI_CONN_FEATURE_TOGGLE_CACHE_EXPIRY = DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.gs.crm.multi.connection.feature.toggle.cache.expiry\", 1 * 60 * 1000);\n    private static final PassiveExpiringMap<String, Boolean> tenantCRMMultiConnMap = new PassiveExpiringMap(CRM_MULTI_CONN_FEATURE_TOGGLE_CACHE_EXPIRY);\n\n    public static ClientConfig getFeatureToggleClientConfig() {\n        return (new ClientConfig()).withHost(FEATURE_CONFIG_URL).withEnvironment(GS_ENV_NAME).withCredentials((new Credentials()).withRequestInfo(RequestContextProvider.getRequestInfo()).withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n    }\n\n    public static FeatureConfigCRUDService getFeatureToggleCrudService() {\n        return (new FeatureConfigCRUDServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n    }\n\n    public static boolean evaluateBooleanFeature(String name, String tenantId) {\n        return Boolean.TRUE.equals(evaluateFeature(name, tenantId, false));\n    }\n\n    public static Collection<String> evaluateMultiVariateFeature(String featureName, String tenantId) {\n        FeatureVariationDetailDTO featureVariationDetailDTO = null;\n        try {\n            FeatureConfigEvaluationService service = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2c15b213-15df-4694-870c-cac2a615c307","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":110,"endLine":134,"content":"efinitionMap.get(ductJobMapping.getResourceName());\n        Map<String, GSFieldDefinition> gsFieldsByNamesMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, Function.identity()));\n\n        List<FieldInfo> fieldInfos = new ArrayList<>();\n        for (String field : ductJobMapping.getFields()) {\n            GSFieldDefinition fieldDefinition = gsFieldsByNamesMap.get(field);\n            FieldInfo fieldInfo = new FieldInfo();\n            fieldInfo.setJsonPath(fieldDefinition.getFieldName());\n            fieldInfo.setName(fieldDefinition.getFieldName());\n            fieldInfo.setDisplayName(fieldDefinition.getLabel());\n            fieldInfo.setDataType(DataType.getDataType(fieldDefinition.getDataType()));\n            if (fieldDefinition.getDataType().equals(\"DATETIME\")\n                    || fieldDefinition.getDataType().equals(\"DATE\")) {\n                Map<String, Object> fieldProps = fieldDefinition.getMeta().getProperties();\n                DateTimeProperties dateTimeProperties = new DateTimeProperties(\n                        (String) fieldProps.get(FORMAT),\n                        \"UTC\");\n                fieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            fieldInfos.add(fieldInfo);\n        }\n        String filter = null;\n        String query = null;\n        List<String> fieldJsonPathList = fieldInfos.stream().map(FieldInfo::getJsonPath).collect(Collectors.toList());\n        int limit = Math.min(duct","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"460984cf-011f-4f51-b714-83ba430728e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BigQueryValidationDataSourceService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Order(100)\n@Service\n@Slf4j\npublic class BigQueryValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.BIGQUERY;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductReque","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a899934e-ad09-4c09-9a88-3a3c5155a540","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":175,"endLine":211,"content":"n;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return BIGQUERY_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.big.query.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.big.query.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.big.query.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.BIGQUERY);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria,fieldNameDataTypeMap,fieldNameMetaMap,null,caasConnectorConfig, d","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c6a0129-bc94-47e5-b5f4-461206e8eef9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":141,"endLine":163,"content":" metaProperties);\n        fieldDefinition.put(META, meta);\n\n        if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n            DuctCollectionUtils.deepMerge((Map<String, Object>) fieldDefinition.get(META), dataTypeMappingsForField.getMeta());\n        }\n        return fieldDefinition;\n    }\n\n    private static void populateValueIfPresent(JsonNode sourceMap, String sourceKey,\n                                               Map<String, Object> targetMap, String targetKey, Class<?> type) {\n        if (sourceMap.get(sourceKey) != null) {\n            if (type == Boolean.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asBoolean());\n            else if (type == Integer.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asInt());\n            else if (type == Double.class)\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asDouble());\n            else\n                targetMap.put(targetKey, sourceMap.get(sourceKey).asText());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74fe1e1a-a24a-4274-b355-54ad1b16dc97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/Zuorav2ValidationDatasourceService.java","startLine":72,"endLine":90,"content":"ectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"908d4abd-1910-4f4b-9421-f556674101b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":87,"endLine":120,"content":".gainsight.mongo.builder.tenant.TenantMasterQuery;\nimport com.gainsight.mongo.builder.tenant.TenantMasterUpdate;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport com.google.api.client.util.Maps;\nimport com.google.gson.Gson;\nimport exception.CoreErrorCode;\nimport lombok.SneakyThrows;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.validator.routines.UrlValidator;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.codehaus.jackson.JsonNode;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Service;\nimport uti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50c1027e-ca2a-4684-996b-487d540f2964","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules.helper;\n\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.http.request.HttpDeleteWithBody;\nimport com.gainsight.utils.GainsightUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.*;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport utils.HttpClient;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.Map;\n\n/**\n * Created by: sdugar\n * Date: 9/13/16\n */\n//TODO: retries, socketTimeouts handling\npublic class BionicRuleHttpHelper {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(BionicRuleHttpHelper.class);\n  private static final int TIMEOUT = 60000;\n  private static fina","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8e17fcd1-89e5-4acd-90dc-eae4312a2210","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":49,"endLine":91,"content":"mework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.text.SimpleDateFormat;\nimport java.time.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeMap;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n/**\n * createdBy: snargana\n * date: 23/05/24\n */\n\n@Service\n@Order(200)\n@Slf4j\npublic class IntercomV2DataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final String CAAS_INTERCOMV2_EXTRACT = \"CaasIntercomV2Extract\";\n  public static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n  public static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD = \"updated_at\";\n  private final MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n  private static final String DATA = \"data\";\n\n  private static final String QUERY = \"query\";\n\n  private static final String VALUE = \"value\";\n\n  private static final String PER_PAGE = \"per_page\";\n\n  private static final String STARTING_AFTER = \"starting_after\";\n\n  private static final String PAGINATION = \"pagination\";\n\n  private static final String PROPERTIES = \"properties\";\n\n  private static final String FIELD = \"field\";\n  pr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e835e5e-aed8-46c6-a9c2-f0a4e4a8a30f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":540,"endLine":561,"content":"tionsInfo.getProperties().put(UCConstants.GSIntegration.SFDC_TOKEN_ID, GainsightUtils.valueOf(map.get(\"id\")));\n            pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.SFDC_INSTANCE_URL, GainsightUtils.valueOf(map.get(\"instance_url\")));\n        } catch (IOException e) {\n            throw new SystemException(e.getMessage(), e);\n        }\n    }\n\n    private BaseTokenDetail getTokenDetail(OAuthDetail oAuthDetail, String jsonString) {\n        try {\n            Map<String, Object> map = GainsightUtils.OBJECT_MAPPER.readValue(jsonString, new TypeReference<Map<String, Object>>() {\n            });\n            Object expiresInObject = map.get(\"expires_in\");\n            Long expiresIn = expiresInObject == null ? null : Long.valueOf(GainsightUtils.valueOf(expiresInObject));\n            BaseTokenDetail tokenDetail =\n                    new BaseTokenDetail(CryptHandler.getInstance().encrypt(GainsightUtils.valueOf(map.get(\"access_token\"))), CryptHandler.getInstance()\n                            .encrypt(GainsightUtils.valueOf(map.get(\"refresh_token\"))), expiresIn, GainsightUtils\n                            .valueOf(map.get(\"token_type\")));\n            tokenDetail.setAccessKey(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientId())));\n            tokenDetail.setAccessSecret(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientSecret())));\n            return tokenDetail;\n        } catch (IOException e) {\n            throw","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48629a3d-c940-4681-8b0b-902cf692cfeb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":229,"endLine":254,"content":"SS)) {\n                    auditData.setEntityID(connectionId);\n                }\n                break;\n            case JOB:\n                DuctJobMapping ductJobMapping = (DuctJobMapping) unifiedConnectorRequest.getRequestObject();\n                String jobId = ductJobMapping.getJobId();\n                jobId = jobId != null ? jobId : UCConstants.NULL_JOB_ID_PLACEHOLDER;\n                auditRecord.setSystemId(jobId);\n                systemTags.add(UCConstants.JOBINFO);\n                if (null != ductJobMapping.getConnectorType())\n                    systemTags.add(ductJobMapping.getConnectorType().toString());\n                auditData.setEntityName(ductJobMapping.getJobName());\n                auditData.setAuditEntityType(AuditEntityType.JOB);\n                if (null != ductJobMapping.getConnectorType())\n                    auditData.setConnectorType(ductJobMapping.getConnectorType());\n                if (eventStatusEnum.equals(EventStatusEnum.SUCCESS)) {\n                    auditData.setEntityID(jobId);\n                }\n                break;\n        }\n        return auditRecord;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d5c1210-1c3d-451b-871c-837489c7d746","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":115,"endLine":136,"content":"uctJobMapping.getResourceName()), maxPageSize);\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    try {\n      MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n      Optional<ResourceConfig> optionalResourceConfig = getResourceConfig(ductJobMapping);\n      if (!optionalResourceConfig.isPresent()) {\n        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n      }\n      ResourceConfig resourceConfig = optionalResourceConfig.get();\n      ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n      PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n      Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n      Map<String, Object> paginationInfo = null;\n      Map<String, String> queryParam = new HashMap<>();\n      AuthService authService = new AuthServiceImpl();\n      Map<String, GSFieldDefinition> fieldNameMetaMap = nullSafeList(objectDefinition.getFields())\n          .stream()\n          .collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9faf6bc3-d2e7-41c7-92a4-96b8da798381","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":188,"endLine":207,"content":"sentStr + \"&state=\" + getState(pnpConnectionsInfo.getConnectionId(), additionalState);\n        }\n    }\n\n    @Override\n    public void accessTokenAuthorization(AccountType accountType, String code, String hostUrl, OAuthStateDetail oAuthStateDetail) {\n        GainsightAccountService gainsightAccountService = GAINSIGHT_ACCOUNT_SERVICE_MAP.get(accountType.getOauthType());\n        Map<String, Object> additionalState = GainsightCollectionUtils.nullSafeMap(oAuthStateDetail.getProperties());\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(String.valueOf(additionalState.get(UCConstants.GSIntegration.PNP_CONNECTION_ID)));\n        OAuthDetail oAuthDetail = gainsightAccountService.findOAuthDetail(accountType);\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, CaasValidationCode.CONNECTOR_PROJECT_INFO_NULL, CaasValidationCode.CONNECTOR_PROJECT_INFO_NULL.getUserText(), SC_BAD_REQUEST);\n        if (pnpConnectionsInfo.isIpaasConnection()) {\n            return; //to do\n        } else {\n            ConnectionStatus oldConnectionStatus = pnpConnectionsInfo.getConnectionStatus();\n            Token token = null;\n            if (accountType == AccountType.SFDC) {\n                token = gainsightAccountService.accessToken(accountType, code, hostUrl, oAuthDetail, String\n                        .valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL)), String\n                        .valueOf(pnpConnectionsInfo.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"043263e5-e6bc-48aa-8140-0974b6f3c63a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":133,"endLine":188,"content":"chDeltaData) {\n        this.honourLastModfiedFieldValueToFetchDeltaData = honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    private FilterRule filterRule;\n    private String lastModifiedFieldName;\n    private Object lastModifiedFieldValue;\n\n    public Object getLastModifiedFieldValue() {\n        return lastModifiedFieldValue;\n    }\n\n    public void setLastModifiedFieldValue(Object lastModifiedFieldValue) {\n        this.lastModifiedFieldValue = lastModifiedFieldValue;\n    }\n\n    public String getLastModifiedFieldName() {\n        return lastModifiedFieldName;\n    }\n\n    public void setLastModifiedFieldName(String lastModifiedFieldName) {\n        this.lastModifiedFieldName = lastModifiedFieldName;\n    }\n\n    private Object lastUpdatedTime;\n    private Map<String, List<PicklistOption>> picklistOptionMap = Maps.newHashMap();\n\n    public Object getLastUpdatedTime() {\n        return lastUpdatedTime;\n    }\n\n    public void setLastUpdatedTime(Object lastUpdatedTime) {\n        this.lastUpdatedTime = lastUpdatedTime;\n    }\n\n    public String getObjectName() {\n        return objectName;\n    }\n\n    public void setObjectName(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public SecretData getInstanceToken() {\n        return instanceToken;\n    }\n\n    public void setInstanceToken(SecretData instanceToken) {\n        this.instanceToken = instanceToken;\n    }\n\n    public SecretData getUserToken() {\n        return userToken;\n    }\n\n    public void setUserToken(Secret","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d41809d-3b17-4894-b74e-bf84dd7f0664","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/IpaasBulkFileDownloadMessageProcessor.java","startLine":60,"endLine":84,"content":"     getMessageInfo(messageRequestVO.getMessageType());\n                IpaasBulkDownloadCallbackPayload payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                RequestContextProvider.setRequestInfo(TenantUtility.getRequestInfoForTenant(messageRequestVO.getTenantId()));\n                RequestContextProvider.getRequestInfo().setRequestId(payload.getRequestId());\n                DuctCommonUtils.setContext(RequestContextProvider.getRequestInfo());\n                log.info(\"Received payload for IpaasBulkFileDownloadMessageProcessor  : {}\", payload);\n                ipaasBulkFileDownloadService.processCallBackFromDH(payload);\n                log.info(\"IpaasBulkFileDownloadMessageProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n            } catch (Exception exception) {\n                log.error(\"Error while processing IpaasBulkFileDownloadMessageProcessor  {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.IPAAS_BULK_FILE_DOWNLOAD.getName());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a442191f-67e4-4806-9c15-fdf0ebcfe794","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":427,"endLine":456,"content":"earch request: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n      return modifiedCriteria;\n\n    } catch (Exception ex) {\n      log.error(\"Error while modifying criteria for object search, Falling back to default criteria accepted by the external system\", ex);\n      return getDefaultFallbackCriteria();\n    }\n  }\n\n  private Criteria getSingleCriteriaForQueryBody(List<Criteria> flattenedCriteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap, String dateTimeformat) {\n    Criteria requiredSingleCriteria;\n\n    nullSafeList(flattenedCriteria)\n        .stream()\n        .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap, dateTimeformat));\n\n    requiredSingleCriteria = nullSafeList(flattenedCriteria)\n        .stream()\n        .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n        .filter(flatCriteria -> FilterOperator.GT.equals(flatCriteria.getOperatorType()) || FilterOperator.GTE.equals(flatCriteria.getOperatorType()))\n        .min((c1, c2) -> {\n          Object epochObject1 = ((List<Object>) c1.getValues()).get(0);\n          Object epochObject2 = ((List<Object>) c2.getValues()).get(0);\n\n          Long epoch1 = Long.parseLong(DuctUtils.valueOf(epochObject1));\n          Long epoch2 = Long.parseLong(DuctUtils.valueOf(epochObject2));\n          return Double.compare(epoch1, epoch2);\n        }).orElse(null);\n\n    if (Objects.isNull(requ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e2871fa-4380-4c66-96ba-919153a67052","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/TenantUtility.java","startLine":38,"endLine":67,"content":"mGSUserAuthInfo(Tenant tenant) {\n        if(tenant == null) {\n            return new UserAuthInfo();\n        }\n        Map<String, Object> systemAdministrator = tenant.getSystemAdministrator();\n        if (MapUtils.isEmpty(systemAdministrator)) {\n            log.warn(\"System administration details missing from tenant {}\", tenant.getTenantId());\n            return new UserAuthInfo();\n        } else {\n            UserAuthInfo userAuthInfo = new UserAuthInfo();\n            userAuthInfo.setUserId(GainsightUtils.valueOf(systemAdministrator.get(\"Gsid\")));\n            userAuthInfo.setDisplayName(GainsightUtils.valueOf(systemAdministrator.get(\"Name\")));\n            userAuthInfo.setUserEmail(GainsightUtils.valueOf(systemAdministrator.get(\"Email\")));\n            return userAuthInfo;\n        }\n    }\n\n    public static UserAuthInfo getSystemGSUserAuthInfo(String tenantId) {\n        Tenant tenant = getBaseTenantService().findById(tenantId);\n        if(tenant == null) {\n            return new UserAuthInfo();\n        }\n        Map<String, Object> systemAdministrator = tenant.getSystemAdministrator();\n        if (MapUtils.isEmpty(systemAdministrator)) {\n            log.info(\"System administration details missing from tenant {}\", tenant.getTenantId());\n            return new UserAuthInfo();\n        } else {\n            UserAuthInfo userAuthInfo = new UserAuthInfo();\n            userAuthInfo.setUserId(GainsightUtils.valueOf(systemAdministrator.get(\"Gsid\")));\n            userAuthInfo.setDisplay","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4807f3f-de95-4f45-8399-4f18cb7e5d7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":232,"endLine":264,"content":"   List<Criteria> flattenedCriteria = new ArrayList<>();\n    // Recursively flatten the criteria\n    flatten(criteria, flattenedCriteria);\n    return flattenedCriteria;\n  }\n\n  private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n    if (criteria.getFilters() == null || criteria.getFilters().isEmpty()) {\n      // Base case: No nested filters, add current criteria to flattened list\n      flattenedCriteria.add(criteria);\n    } else {\n      // Recursively flatten nested filters\n      for (Criteria nestedCriteria : criteria.getFilters()) {\n        flatten(nestedCriteria, flattenedCriteria);\n      }\n    }\n  }\n\n\n  /**\n   * Will take the input criteria and generate new criteria out of it which will be used for external system search\n   * At max, we will have 2 filter conditions for external system search on the fields which are externally filterable\n   * In general \"updated_at\" field is the only field which is externally filterable\n   * If we have more than 2 filter conditions, we will take the min value filter condition where operator is {@link FilterOperator#GT}\n   * If we don't have above criteria, we will fall back to default criteria accepted by the external system\n   *\n   * @param criteria            {@link Criteria}\n   * @param ductJobMapping      {@link DuctJobMapping}\n   * @param fieldNameMetaMap    {@link Map<String, GSFieldDefinition>}\n   * @param caasConnectorConfig {@link CaasConnectorConfig\n   * @return {@link Criteria\n   */\n  private Criteria mod","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bebe7ea4-6783-4b23-9a29-b0935756a460","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":522,"endLine":533,"content":"l(objectName);\n            objectDefinition.setAccessible(true);\n            objectDefinition.setDbName(objectMap.get(\"dbName\").toString());\n            objectDefinition.setSource(objectMap.get(\"source\").toString());\n            objectDefinition.setObjectType(CollectionObjectGroupType.forValue(objectMap.get(\"objectType\").toString()));\n            objectDefinition.setDataEditability(objectMap.get(\"dataEditability\").toString());\n            objectDefinition.setSchemaEditability(objectMap.get(\"schemaEditability\").toString());\n            objectDefinitions.add(objectDefinition);\n        }\n        return objectDefinitions;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c48e2037-789d-45fa-8fd4-2eceb5b14456","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/Zuorav2ValidationDatasourceService.java","startLine":51,"endLine":74,"content":"hronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fieldType = (String) gsFieldDefinition.getMeta().getOriginalDataType().toLowerCase();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cbc8d4d-f036-41a6-831b-367c59091977","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":25,"endLine":66,"content":"t org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\n@Slf4j\n@Order(1200)\npublic class Zuorav2CaasMetadataServiceImpl implements CaasMetadataService{\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private CaasObjectConfigDAO caasObjectConfigDAO;\n    @Autowired\n    private CaasObjectTenantConfigDAO caasObjectTenantConfigDAO;\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n    @Autowired\n    private MetadataDriver metadataDriver;\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    private static final String NAME = \"name\";\n    private static final String BASE_URL = \"baseURL\";\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String CUSTOM_OBJECT_ENABLE = \"zuora.custom.object.enable\";\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType.equals(ConnectorType.ZUORAV2) && !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Ma","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48c00927-09ee-49e8-bf0a-33d5f5327481","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BaseValidationConnectorDataSourceService.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.validation;\n\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\npublic class BaseValidationConnectorDataSourceService {\n\n    public void validateResourceName(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        if (!objectDefinitionMap.containsKey(ductRequestDTO.getResourceName())) {\n            DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), ductRequestDTO.getResourceName() + \" does not exist in source system\");\n        }\n    }\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> fieldSet = objectDefinition.getFields().stream().map(gsFieldDefinition -> gsFieldDefinition.getFieldName()).collect(Collectors.toSet());\n        Set<String> notAvailableFields = new HashSet<>();\n        for (String field :","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96d37215-bbd6-40b1-8663-b5e144801774","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":302,"endLine":327,"content":" csvWriter.writeNext(newHeaders);\n                Iterator<String[]> iterator = csvReader.iterator();\n                while (iterator.hasNext()) {\n                    csvWriter.writeNext(iterator.next());\n                }\n            } catch (Exception e) {\n                log.error(\"Error occurred while updating file headers : {}\", e);\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.FINAL_OUTPUT_FILE_CREATION_FAILED.getGsEventCode(), CaasValidationCode.FINAL_OUTPUT_FILE_CREATION_FAILED.getUserText(), null, ductJobMapping.getJobId(), \"Final output file creation failed\"));\n            }\n            return outputFile;\n        } catch (Exception e) {\n            log.error(\"Error occurred while updating file headers : {}\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.FINAL_OUTPUT_FILE_CREATION_FAILED.getGsEventCode(), CaasValidationCode.FINAL_OUTPUT_FILE_CREATION_FAILED.getUserText(), null, ductJobMapping.getJobId(), \"Final output file creation failed\"));\n        } finally {\n            FileUtils.deleteQuietly(file);\n        }\n\n    }\n\n    private List<String> getFieldFromJobMapping(DuctJobMapping ductJobMapping) {\n        Set<String> fields = new HashSet<>(ductJobMapping.getFields());\n        DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), fields);\n        return new ArrayList<>(fields);\n    }\n\n    private String[] getHeaders(List<String> fields, List<String> currentHeaders, St","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bb65fa6a-e2bd-46fd-a78f-f1acd3c95dd2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctResponse.java","startLine":54,"endLine":67,"content":"xternalJobDHId;\n    private String extractTaskId;\n    private String freeFormTaskId;\n    private String nextPageToken;\n\n    private String externalInputFileLocation;\n    private String externalErrorFileLocation;\n    private String externalErrorFileLocationS3Link;\n    private String externalSuccessFileLocation;\n\n    private List<String> extractedFilePaths;\n\n    private String sourceResponseFile;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c440472-6ce9-4c91-901e-a2614fdd3b6e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":988,"endLine":1009,"content":"etConnectionName());\n                        pnpConnectionsInfoFromDB.setIpaasConnection(pnpConnectionInfoFromUI.isIpaasConnection());\n                        EncryptConnectionDetails connectionDetails = EncryptConnectionDetailsManager.encryptConnectionDetails(pnpConnectionsInfoFromDB.getConnectionType().getValue());\n                        pnpConnectionsInfoFromDB.setConnectionDetail(connectionDetails.getConnectionDetails((Map) pnpConnectionInfoFromUI.getProperties(), pnpConnectionsInfoFromDB.getConnectionType().getValue()));\n                        pnpConnectionsInfoFromDB.setProperties(pnpConnectionInfoFromUI.getProperties());\n                        break;\n                    } catch (Exception e) {\n                        log.error(\"Error while authorizing Connection {}\", e);\n                        throw new CaasException(CaasValidationCode.ERROR_AUTHORIZING_CONNECTION.getUserText(), CaasValidationCode.INVALID_INPUT);\n                    }\n                case POSTGRES:\n                case HAPOSTGRES:\n                case REDSHIFT:\n                case MYSQL:\n                case MARIADB:\n                    processRelationalDBDetails(pnpConnectionInfoFromUI, pnpConnectionsInfoFromDB);\n                    if (pnpConnectionInfoFromUI.getConnectionStatus() != null) {\n                        pnpConnectionsInfoFromDB.setConnectionStatus(pnpConnectionInfoFromUI.getConnectionStatus());\n                    }\n                    break;\n                case PENDO:\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"528ae499-f1a6-421f-8bb8-614360d765ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GsExternalSystemErrorMapping.java","startLine":1,"endLine":45,"content":"package com.gainsight.duct.beans;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Maps;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.Map;\n\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\npublic class GsExternalSystemErrorMapping extends BaseGSEntity {\n\n    private String gsErrorCode;\n    private String gsErrorMessage;\n    private String externalSystemErrorCode;\n    private String externalSystemErrorMessage;\n    private String httpErrorCode;\n    private Map<String, Object> properties = Maps.newHashMap();\n    private Object exceptionStackTrace;\n    private ConnectorType connectorType;\n    private String connectionId;\n    private String jobId;\n    private boolean isResolved; // validate this\n    private Object inputRequest; //\n    private String requestId;\n    private String tenantId;\n    private String message;\n    private Map<String, Object> responsePayload;\n    private Map<String, Object> requestPayload;\n\n    public GsExternalSystemErrorMapping(){\n    }\n\n    public GsExternalSystemErrorMapping(String httpErrorCode, String externalSystemErrorCode, String externalSystemErrorMessage){\n        this.httpErrorCode = httpErrorCode;\n        this.externalSystemErrorCode = externalSystemErrorCode;\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n    }\n\n\n    public GsExternalSystemErrorMapping(String externalSystemErrorCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3271747e-35ed-47f6-9a65-e8fd28dc1a37","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebMvcConfiguration.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.filter;\n\n\nimport com.gainsight.authorization.ApiScopeInterceptor;\nimport com.gainsight.authorization.PermissionAuthorizationInterceptor;\nimport com.gainsight.config.SwaggerConfiguration;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.web.PageableHandlerMethodArgumentResolver;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.method.support.HandlerMethodArgumentResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * Author: Santa Thounaojam\n * Date  : 06/10/16\n * Time  : 10:46 AM\n */\n@Component\npublic class DuctWebMvcConfiguration implements WebMvcConfigurer {\n\n  @Autowired\n  private DuctWebB2BInterceptor gainsightB2BInterceptor;\n\n  @Override\n  public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n    resolvers.add(new PageableHandlerMethodArgumentResolver());\n  }\n\n  @Override\n  public void addInterceptors(InterceptorRegistry registry) {\n    final boolean apiScopeEnabled = DeploymentProperties.getDeplo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37f04efd-cc35-4b4c-b226-ebcf5ccb9744","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/repo/DuctDatabaseTemplateServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.repo;\n\nimport com.gainsight.database.BaseDatabaseTemplateServiceImpl;\nimport com.gainsight.database.DataSourceUtils;\nimport com.gainsight.database.ha.HAJdbcTemplateCreator;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.properties.HierarchicalDeploymentProperties;\nimport org.apache.tomcat.jdbc.pool.DataSourceFactory;\nimport org.apache.tomcat.jdbc.pool.PoolConfiguration;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\nimport javax.annotation.PostConstruct;\nimport javax.sql.DataSource;\nimport java.util.Properties;\n\npublic class DuctDatabaseTemplateServiceImpl extends BaseDatabaseTemplateServiceImpl implements DuctDatabaseTemplateService {\n\n  private final DataSource applicationDataSource;\n\n  private JdbcOperations jdbcTemplate;\n  private NamedParameterJdbcOperations appNamedParameterJdbcTemplate;\n\n  public DuctDatabaseTemplateServiceImpl() {\n    DeploymentProperties deploymentProperties = DeploymentProperties.getDeploymentProperties();\n    String[] keys = DataSourceUtils.getAllProperties();\n    Properties properties = new Properties();\n\n    for(String key:keys) {\n      String value = HierarchicalDeploymentProperties.INSTANCE.getValue(\"duct.postgres.pool.\" + key);//todo change everything from uc. to duct.\n      if (value != null) {\n        properties.setProperty(key, value);\n      }\n    }\n\n    PoolConfiguration postgresPoolProperties = DataSo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b20c930d-88c3-4856-865f-992673e9190c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":140,"endLine":169,"content":" if (StringUtils.isBlank(requestInfo.getRequestId())) {\n                    log.warn(\"{} header is missing from {}. Request ID from requestInfo is '{}'.\",\n                            Constants.X_REQUEST_ID, getIPAddress(request), requestInfo.getRequestId());\n                }\n            }\n            requestInfo.setRequestId(requestId);\n            RequestContextProvider.setRequestInfo(requestInfo);\n            if (eligibleToSwitch && !RequestContextProvider.getTenantId().equalsIgnoreCase(\"dummy\")) {\n                //This is to switch context if the current tenant is under grace period. Switching happens in dao layer\n                service.findOne(RequestContextProvider.getTenantId());\n            }\n            GainsightContext.setMDC();\n        } catch (Exception e) {\n            log.error(\"Unable to read requestInfo from header. {}\", e.getMessage(), e);\n            return setErrorResponse(request, response, \"Invalid authentication credentials. Authentication failed.\");\n        }\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o,\n                           ModelAndView modelAndView) throws Exception {\n        // nothing to do.\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o,\n                                Exception e) throws Exception {\n        try {\n            if(httpSer","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d6bdade3-643b-4ff1-a130-76214fd5fdab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":462,"endLine":478,"content":"temErrorMapping getDuctResponse(DuctJobMapping ductJobMapping, HttpResponse response, Map<String, Object> finalResponse) throws CaasException {\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping(String.valueOf(response.getStatusLine().getStatusCode()),\n                response.getStatusLine().getReasonPhrase(), finalResponse);\n        gsExternalSystemErrorMapping.setRequestId(RequestContextProvider.getRequestId());\n        gsExternalSystemErrorMapping.setTenantId(RequestContextProvider.getTenantId());\n        gsExternalSystemErrorMapping.setConnectorType(ductJobMapping.getConnectorType());\n        gsExternalSystemErrorMapping.setJobId(ductJobMapping.getJobId());\n        gsExternalSystemErrorMapping.setGsErrorCode(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_WRITEBACK.getGsEventCode());\n        if (finalResponse != null && finalResponse.containsKey(MESSAGE) && !org.springframework.util.StringUtils.isEmpty(finalResponse.get(MESSAGE)))\n            gsExternalSystemErrorMapping.setExternalSystemErrorMessage(finalResponse.get(MESSAGE).toString());\n        gsExternalSystemErrorMapping.setGsErrorMessage(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_WRITEBACK.getUserText());\n        return gsExternalSystemErrorMapping;\n    }\n\n    private DuctResponse pollWithJobId(HubspotTokenDetails accessDetailsFromDB, Map<String, Object> response, DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            int retryCount = p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3dc2a15d-9fea-42d1-8638-12473bdb5c34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":346,"endLine":372,"content":"       log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    private Object prepareErrorResponseForException(GsExternalSystemErrorMapping gsExternalSystemErrorMapping) {\n        GsExternalSystemErrorMappingDTO response = new GsExternalSystemErrorMappingDTO();\n        response.setExternalSystemErrorMessage(gsExternalSystemErrorMapping.getExternalSystemErrorMessage());\n        response.setExternalSystemErrorCode(gsExternalSystemErrorMapping.getExternalSystemErrorCode());\n        response.setGsErrorCode(gsExternalSystemErrorMapping.getGsErrorCode());\n        response.setGsErrorMessage(gsExternalSystemErrorMapping.getGsErrorMessage());\n        response.setConnectorType(gsExternalSystemErrorMapping.getConnectorType());\n        response.setMessage(gsExternalSystemErrorMapping.getMessage());\n        return response;\n    }\n\n    private BulkActionResponse prepareErrorResponseForActionException(GsExternalSystemErrorMapping gsExternalSystemErrorMapping) {\n        BulkActionResponse response = new BulkActionResponse();\n        if (gsExternalSystemErrorMapping.getExternalSystemErrorMessage() != null) {\n            response.setErrorMessage(gsExternalSystemErrorMapping.getExternalSystemErrorMessage());\n            return response;\n        }\n        if (gsExternalSystemErrorMapping.getMessage() != null) {\n            response.setErrorMessage(gsExternalSystemErrorMapping.getMessage());\n            return response;\n        }\n        re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d403e67-9287-41b8-add9-9d4ee9efa999","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/ExternalDataRequestDto.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.commons.gsobjects.ImportLookupLite;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\n@ToString\npublic class ExternalDataRequestDto implements Serializable {\n\n  private static final long serialVersionUID = 9000038702363161328L;\n  private List<Map<String, Object>> requests;\n  private Map<String, ImportLookupLite> lookups;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f69d5f72-b825-4552-bb4f-2300075eeb1f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":174,"endLine":197,"content":"ct> responseMap = OBJECT_MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getResponseCode()),\n                        String.valueOf(httpResponse.getErrorCode()),\n                        responseMap.get(DuctErrorConstants.MESSAGE)));\n            } else {\n                JsonNode objectMetadata = OBJECT_MAPPER.readValue(respMsg, JsonNode.class);\n                fields = StreamSupport.stream(objectMetadata.get(FIELDS).spliterator(), false).collect(Collectors.toList());\n            }\n            LOGGER.info(\"returnMap:{}\", fields);\n            return fields;\n        } catch (CaasException e) {\n            throw e;\n        } catch (Exception e) {\n            LOGGER.error(\"{CAAS} Error in Internal System\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private Map convertIpaasMetaToDescribeMeta(List<JsonNode> fields, String objectName, PNPConnectionsInfo pnpConnectionsInfo) {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectName);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        obj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93cbcdcc-5a99-428c-8304-8b8e65f966ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":66,"endLine":110,"content":"eldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n    if (fields.isNull() || (!fields.isArray()) || fields.size() == 0) {\n      return;\n    }\n\n    List<Map<String, Object>> fieldsList = OBJECT_MAPPER.convertValue(fields, new TypeReference<List<Map<String, Object>>>() {\n    });\n\n\n    /**\n     * We have defined the system fields in our configuration, just need to process custom fields here\n     */\n    List<Map<String, Object>> customFieldsList = nullSafeList(fieldsList)\n        .stream()\n        .filter(Objects::nonNull)\n        .filter(field -> Objects.nonNull(field.get(CUSTOM)) && BooleanUtils.isTrue((Boolean) field.get(CUSTOM)))\n        .collect(Collectors.toList());\n\n    if (customFieldsList.isEmpty()) {\n      return;\n    }\n\n    nullSafeList(customFieldsList)\n        .stream()\n        .map(field -> generateFieldDefinitionFromFieldInfo(field, connectorConfig, objectDefinition))\n        .filter(Objects::nonNull)\n        .forEach(fieldFromObjectDefinition::add);\n\n  }\n\n  /**\n   * @param fieldInfo        {@link Map}\n   * @param connectorConfig  {@link CaasConnectorConfig\n   * @param objectDefinition {@link Map}\n   * @return {@link Map} fieldDefinition in a map format\n   * <p>\n   * Source Field -> OMD field\n   * full_name -> field_name\n   * full_name -> db_name\n   * label -> label\n   * object_id -> object_name\n   * object_id -> object_db_name\n   */\n\n  public Map<String, Object> generateFieldDefinitionFromFieldInfo(Map<String, Obj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67b11668-771a-4644-8088-e172079029eb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/OperandType.java","startLine":1,"endLine":9,"content":"package com.gainsight.duct.enums;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic enum OperandType {\n    UNARY,\n    BINARY\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b487723-8061-4fa0-9864-7f00facf4664","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":457,"endLine":482,"content":"est page size {}\", dataExtractionRequest.getProperties().get(PAGE_SIZE));\n            if (dataExtractionRequest.getProperties().containsKey(PAGE_SIZE)) {\n                queryParams.put(PAGE_SIZE, dataExtractionRequest.getProperties().get(PAGE_SIZE));\n            }\n            if (StringUtils.isNotEmpty(nextPage)) {\n                queryParams.put(NEXT_PAGE, nextPage);\n            }\n            if (null != dataExtractionRequest.getOrderByInfoField()) {\n                queryParams.put(ORDER_BY, dataExtractionRequest.getOrderByInfoField());\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to createQuery params\", e);\n            throw new Exception(\"Error occurred while trying to createQuery params\", e);\n        }\n\n        return queryParams;\n    }\n\n    @Override\n    public JSONArray extractDataAsJsonArray(DataExtractionRequest dataExtractionRequest) throws Exception {\n        String apiUrl = IpaasFeatureToggleUtility.getCEBaseURL() + CLOUD_API_BASE_URL + FORWARD_SLASH + dataExtractionRequest.getObjectName();\n        HttpResponse httpResponse;\n        try {\n            httpResponse = httpUrlConnectionUtils.get(apiUrl, IpaasDataExtractionHelperService.getElementHeaders(dataExtractionRequest.getUserToken().getString(), dataExtractionRequest.getInstanceToken().getString(), dataExtractionRequest.getOrgToken()),\n                    createQueryParams(dataExtractionRequest, dataExtractionRequest.getNextPage()));\n            if (httpRes","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05a45434-f5a4-4dd9-98b7-fe7d7daa285c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":686,"endLine":709,"content":"eType);\n        messageRequestDTO.setPayload(ductJobMapping);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequestDTO.setTenantId(RequestContextProvider.getTenantId());\n        messageRequestDTO.setSource(\"CONNECTORS\");\n        messageRequestDTO.setExternalId(UUID.randomUUID().toString());\n        String messageId = queueProducer.enqueue(messageRequestDTO);\n        DuctJobMapping ductJobMappingDB = ductJobMappingDao.findByJobId(ductJobMapping.getJobId());\n        ductJobMappingDB.setDbqMessageId(messageId);\n        ductJobMappingDao.update(ductJobMappingDB);\n        log.info(\"Write back -> Packet pushed with message id :{} for tenant id {} \", messageId, ductJobMapping.getTenantId());\n    }\n\n    @Override\n    public BulkActionResponse loadtoExternalSystemViaBulk(BulkDataLoadRequest bulkDataLoadRequest) throws\n            CaasException {\n        try {\n            log.info(\"Received Payload from Rules - Gs Action - {}\", new ObjectMapper().writer().writeValueAsString(bulkDataLoadRequest));\n        } catch (JsonProcessingException jpex) {\n            log.error(\"Error occurred while trying to log the received request in json format. Won't hamper the execution. : {}\", jpex);\n            log.info(\"Received Payload from Rules - Gs Action - {}\", bulkDataLoadRequest);\n        }\n        DuctJobMapping ductJobMapping = createDuctJobMapping(bulkDataLoadRequest);\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0b85eb8-e1f9-4d8a-a182-46d7f0c3a3d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":126,"endLine":151,"content":"verride\n  public PNPConnectionsInfo findConnectionByCRMIdForLinking(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).in(ConnectionStatus.AUTHORIZED, ConnectionStatus.AUTHORIZED_AND_LINKED));\n    query.addCriteria(Criteria.where(\"properties.\" + UCConstants.GSIntegration.IS_PRIMARY_CONNECTION).is(true));\n    return findOne(query);\n  }\n\n  @Override\n  public PNPConnectionsInfo findConnectionByCRMIdForLinkingUnLinking(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).in(ConnectionStatus.REVOKED, ConnectionStatus.REVOKED_AND_LINKED));\n    query.addCriteria(Criteria.where(\"properties.\" + UCConstants.GSIntegration.IS_PRIMARY_CONNECTION).is(true));\n    return findOne(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findAllAuthorizedAndLinkedCRMConnections(String crmId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().crmId(crmId);\n    query.addCriteria(Criteria.where(UCConstants.GSIntegration.CONNECTION_STATUS).in(ConnectionStatus.AUTHORIZED, ConnectionStatus.AUTHORIZED_AND_LINKED));\n    return find(query);\n  }\n\n  @Override\n  public List<PNPConnectionsInfo> findByConnectionType(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67287ce0-6e3b-4997-8a31-6eef4ef7288a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountDetail.java","startLine":36,"endLine":75,"content":"SyncInfoId;\n    //This hold the reference of syncInfo for flipped measures from postgres to mongo\n    private String flippedMeasuresSyncInfoId;\n    //This should hold the db name of the field which we are going to use as the last sync date field\n    private String syncDateField;\n    private RunNowDetails runNowDetails;\n    private SchedulerDetails schedulerDetails;\n\n    /*TODO this is ignored as it is dependent on AccountDetail, which in turn has dependents on classes/modules from rules package which are not allowed to move to gs-integrations*/\n    /*TODO This can be ignored only incase of internal get calls.\n     If AccountDetail is exposed as a get call or used in update or save, have to revisit. */\n    /*private AggregationConfiguration aggregationConfiguration;\n     private UsageConfiguration usageConfiguration;*/\n\n    private Boolean writeToSFDC;\n    private AccountGlobalMapping globalMapping;\n    private NotificationDetail notificationDetails;\n\n    private boolean reSync;\n\n    //s3 enhancements\n    private SNSPayload snsDetails;\n\n    public String getBucketName() {\n        String result = null;\n        if (MapUtils.isNotEmpty(getProperties())) {\n            result = GainsightUtils.valueOf(getProperties().get(S3_BUCKET_NAME));\n        }\n        return result;\n    }\n\n    public String getMasterSyncInfoId() {\n        return masterSyncInfoId;\n    }\n\n    public void setMasterSyncInfoId(String masterSyncInfoId) {\n        this.masterSyncInfoId = masterSyncInfoId;\n    }\n\n    pu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61c74206-9a66-4e05-ba6f-a9e62e14088d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UserManagementUtil.java","startLine":28,"endLine":57,"content":" final ExpiryCache<String, List<String>> GS_USERS_FT_CACHE_SPECIFIC_CONSUMER = new ExpiryCache<>(6L * 3600000); //6 hours\n\n    private UserManagementUtil() {\n    }\n\n    private static String encryptB2B() {\n        return getSimpleCryptor().encrypt(SECRET).getValue();\n    }\n\n    public static GsUsersApi newGsUsersApi(ApiConsumer apiConsumer) {\n        return new GsUsersApi().withHost(UCEnvSpecificConfigDetailUtil.getUserApiUrl())\n                .withSecret(encryptB2B())\n                .withRequestInfo(RequestContextProvider.getEncryptedRequestInfo(true))\n                .withEnv(ENV)\n                .withApiConsumer(apiConsumer);\n    }\n\n    public static boolean isGsUsersServiceEnabled(ApiConsumer apiConsumer) {\n        if (Objects.isNull(GS_USERS_FT_CACHE_SPECIFIC_CONSUMER.get(RequestContextProvider.getTenantId()))) {\n            GS_USERS_FT_CACHE_SPECIFIC_CONSUMER.put(RequestContextProvider.getTenantId(), evaluate());\n        }\n        return GS_USERS_FT_CACHE_SPECIFIC_CONSUMER.get(RequestContextProvider.getTenantId()).contains(apiConsumer.toString());\n    }\n\n    private static List<String> evaluate() {\n        FeatureConfigEvaluationService featureConfigEvaluationService = new FeatureConfigEvaluationServiceImpl().withClientConfig(getClientConfig());\n        FeatureVariationDetailDTO evaluationResult;\n        try {\n            evaluationResult = featureConfigEvaluationService.evaluate(\"GS_USERS_SERVICE_ENABLED\", RequestContextProvider.getTenantId());\n            if (evalua","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4621c80a-4885-4cf3-805b-d3462203f4b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/DuctWebConfiguration.java","startLine":27,"endLine":82,"content":"utils\"})\npublic class DuctWebConfiguration {\n\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    @Bean\n    public GainsightRedisTemplate gainsightRedisTemplateImpl() {\n        return new GainsightRedisTemplateImpl();\n    }\n\n    /**\n     * TODO cases services ships code which worker only need.\n     *\n     * @return\n     */\n\n    @Bean\n    public SFSessionService sfSessionService() {\n        return new MockSFAuthorizer();\n    }\n\n    //    @Bean\n//    public AuthenticationService getAuthenticationServiceImpl() {\n//        return new AuthenticationService();\n//    }\n//\n//    @Bean\n//    public SFSessionService getSFSessionService() {\n//        return new SFSessionService() {\n//            @Override\n//            public UserAuthInfo validateSession(String s, String s1, String s2, Tenant tenant) {\n//                return null;\n//            }\n//\n//            @Override\n//            public boolean isApplicationInstalled(String s, String s1, String s2) {\n//                return false;\n//            }\n//\n//            @Override\n//            public RequestInfo getSessionInfo(String s, String s1, String s2) {\n//                return null;\n//            }\n//\n//            @Override\n//            public RequestInfo getSessionInfo(String userId, String orgId, String sessionId, boolean embedMode) {\n//                return null;\n//            }\n//        };\n//    }\n//\n//    @Bean\n//    public TenantUserRoleTypeService getTenantUserRoleTypeSe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c26564a-619e-489e-a4dd-9342195c3dce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":409,"endLine":434,"content":"p<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap) {\n        Criteria requiredSingleCriteria;\n        nullSafeList(flattenedCriteria)\n                .stream()\n                .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap));\n\n\n        requiredSingleCriteria = nullSafeList(flattenedCriteria)\n                .stream()\n                .filter(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    return externalFilterableFieldsMap.containsKey(fieldName);\n                })\n                .map(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    // Assuming \"field.\" is a prefix to remove\n                    if (fieldName.startsWith(\"fields.\")) {\n                        fieldName = fieldName.substring(\"fields.\".length());\n                    }\n                    flatCriteria.setFieldName(fieldName); // Update the fieldName in flatCriteria\n                    return flatCriteria;\n                })\n                .min((criteria1, criteria2) -> {\n                    Object value1 = criteria1.getValues() instanceof List ? ((List) criteria1.getValues()).get(0) : criteria1.getValues();\n                    Object value2 = criteria2.getValues() instanceof List ? ((List) criteria2.getValues()).get(0) : criteria2.getValues();\n                    return value1.toString().compareTo(value2.toStrin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0fb90f93-3efa-47dd-9b62-2e602da41784","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":266,"endLine":297,"content":"              .append(\")\");\n                        }\n                    } else if (rule.getOp() == FilterOperator.GT) {\n                        evaluatedExpression.append(fieldName)\n                                .append(\" \")\n                                .append(\"ge\")\n                                .append(\" \")\n                                .append(toDateUTCStr);\n                    } else {\n                        evaluatedExpression.append(fieldName)\n                                .append(\" \")\n                                .append(\"lt\")\n                                .append(\" \")\n                                .append(fromDateUTCStr);\n                    }\n                } else {\n                    evaluatedExpression.append(fieldName)\n                            .append(\" \")\n                            .append(rule.getOp().getFilterOperator().toLowerCase())\n                            .append(\" \");\n                    if (isStringType(externalDataType) && Objects.nonNull(getFilterValue(rule))) {\n                        evaluatedExpression.append(\"'\")\n                                .append(escapeSql(String.valueOf(getFilterValue(rule))))\n                                .append(\"'\");\n                    } else {\n                        evaluatedExpression.append(getFilterValue(rule));\n                    }\n                }\n                break;\n            case GTE:\n            case LTE:\n                if (isDate(externalDataType) || isDateTime(externalDa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19d1ef13-52b8-4184-b795-4bf8caf1f47e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AhaCaasCriteriaBuilder.java","startLine":26,"endLine":51,"content":" filterRules = Lists.newArrayList();\n        for(Criteria criteria : baseCriteria.getFilters()){\n            FilterRule internalFilterRule = new FilterRule();\n            if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                //handle if there is only one filter\n                internalFilterRule = createFilterRule(criteria, fieldNameDataTypeMap,fieldNameMetaMap);\n                filterRules.add(internalFilterRule);\n                continue;\n            }\n            internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n            filterRules.add(buildRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap));\n        }\n        if (baseCriteria.getDuctFilterCondition() != null)\n            filterRule.setCondition(baseCriteria.getDuctFilterCondition());\n        filterRule.setRules(filterRules);\n        return filterRule;\n    }\n\n\n    public static FilterRule buildRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap)  {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            return createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b1ce9832-96b4-4216-94a7-2d9de8c60029","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":262,"endLine":285,"content":"UserText() + \":\" + String.join(\",\", fieldNotAvailable));\n                errorMessageForNotAvailableFields.append(object).append(\":\").append(String.join(\",\", fieldNotAvailable));\n            }\n            if (!readOnlyFields.isEmpty()) {\n                readOnlyFieldValidationFailed = true;\n                log.error(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText() + \":\" + String.join(\",\", readOnlyFields));\n                errorMessageForReadOnlyFields.append(object).append(\":\").append(String.join(\",\", readOnlyFields));\n            }\n        }\n        if (availableFieldValidationFailed)\n            DuctUtils.populateAndInsertError(errorMessageForNotAvailableFields.toString(), ductJobMapping.getJobId());\n        if (readOnlyFieldValidationFailed)\n            DuctUtils.populateAndInsertError(errorMessageForReadOnlyFields.toString(), ductJobMapping.getJobId());\n    }\n\n    private void validateIfFilePresent(DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            boolean isFilePresent = DuctS3Utility.keyExists(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            if (!isFilePresent) {\n                log.error(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET);\n                DuctUtils.populateAndInsertError(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET, ductJobMapping.getJobId());\n            }\n        } catch (Exception e) {\n            l","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"294ade54-52ee-4a58-aad0-8710995d48b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.SoqlQueryBuilder;\nimport com.gainsight.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.sfdc.service.SalesforceFetchService;\nimport com.gainsight.integration.utils.FeatureToggleUtil;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springfra","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8a8c9d3-c6af-4819-b117-be2b941503ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":157,"endLine":175,"content":"datedFieldDefinition = gson.fromJson(gson.toJson(transformedMap), new TypeToken<EnhancedGSFieldDefinition>() {\n                    }.getType());\n                    updatedFieldDefinition.getMeta().getProperties().put(\"modifiedAt\", GainsightUtils.getCurrentUTCDate());\n                    int index = metadataCache.getMetadata().get(object).getFields().indexOf(fieldFromMetadataCache);\n                    if (index != -1) {\n                        // 'newObject' is the updated object\n                        metadataCache.getMetadata().get(object).getFields().set(index, updatedFieldDefinition);\n                    }\n                    isMetadataCacheUpdate = true;\n                }else if(fieldFromMetadataCache.getMeta().getProperties().get(\"source\").equals(FieldSaveType.METADATA_API.getValue())){\n                    if(fieldsFromTenantOverrideAttribute.containsKey(fieldInfo.get(FIELD_NAME))){\n                        DuctCollectionUtils.deepMerge(fieldsFromTenantOverrideAttribute.get(fieldInfo.get(FIELD_NAME)), fieldInfo);\n                    }else{\n                        fieldsFromTenantOverrideAttribute.put(fieldInfo.get(FIELD_NAME).toString(), fieldInfo);\n                        caasObjectAttributesTenantConfig.getOverrideAttribute().add(createOverrideAttribute(fieldInfo, saveType));\n                    }\n                    isTenantConfigUpdate = true;\n                }else{\n                    log.info(\"Field is not editable as it is not promoted or metadata api field : {}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54497454-2b04-4a08-8dc5-820231c1b27e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":165,"endLine":190,"content":"getAccessKey().getString());\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.BUCKETNAME, baseTokenDetail.getBucketName());\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.BASE_FOLDER, baseTokenDetail.getBaseFolder());\n                    break;\n                case GAINSIGHT_PX:\n                    pnpConnectionInput.setProperties(\"API_KEY\", baseTokenDetail.getAccessKey().getString());\n                    break;\n                case ECOSYSTEM:\n                case PRODUCTBOARD:\n                case AHA:\n                    pnpConnectionInput.setProperties(UCConstants.GSIntegration.ACCESS_TOKEN, CryptHandler.getInstance().decrypt(baseTokenDetail.getAccessToken()));\n                    break;\n                case ZENDESK:\n                    pnpConnectionInput.getPnpConnectionsInfo().setTokenDetail(null);\n                    break;\n            }\n        }\n    }\n\n    public static List<InstanceMasterDetail> getSSOInstances() {\n        boolean isCCEnabled = FeatureToggleUtil.evaluateBooleanFeature(DuctCommonConstants.CC_SSO_ENABLED, RequestContextProvider.getTenantId());\n        boolean isCEEnabled = FeatureToggleUtil.evaluateBooleanFeature(DuctCommonConstants.CE_SSO_ENABLED, RequestContextProvider.getTenantId());\n        boolean isPXEnabled = FeatureToggleUtil.evaluateFeature(DuctCommonConstants.PX_SSO_ENABLED, RequestContextProvider.getTenantId(), true);\n\n        if (!isCCEnabled && !isCEEnabled && !isPXEnabled) {\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c808db21-afaa-4d59-a7c0-f805aae546b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":357,"endLine":370,"content":"tPrecondition.assertTrue((Objects.nonNull(requestObjectLevelWritebackOperation) && requestObjectLevelWritebackOperation.size() == 1)\n                , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), HttpStatus.SC_BAD_REQUEST);\n        Map.Entry<String, Object> objectLevelOperation = requestObjectLevelWritebackOperation.entrySet().iterator().next();\n        String targetObject = objectLevelOperation.getKey();\n        DuctDataOperation dataOperation = DuctDataOperation.valueOf(objectLevelOperation.getValue().toString());\n\n        if (DuctDataOperation.UPDATE.equals(dataOperation) || DuctDataOperation.UPSERT.equals(dataOperation)) {\n            int identifierFieldsCount = ductJobMapping.getColumnMappings().stream().filter(columnMapping -> columnMapping.getIsKeyField()).collect(Collectors.toList()).size();\n            GainsightPrecondition.assertTrue(identifierFieldsCount == 1,\n                    CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), HttpStatus.SC_BAD_REQUEST);\n        }\n        if (ductJobMapping.isRules()) {\n            GainsightPrecondition.assertTrue((null != ductJobMapping.getCaasS3FileDetails() && StringUtils.isNotEmpty(ductJobMapping.getCaasS3FileDetails().getFilesDir()))\n                    , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2229ccd0-8bc4-4ac7-9ad5-2da874be0338","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":96,"endLine":114,"content":"rovider.getRequestId())) {\n            params.put(Constants.X_REQUEST_ID, RequestContextProvider.getRequestId());\n        }\n        params.putIfAbsent(\"jobName\", ductJobMapping.getJobId());\n        ConnectorsDataHighwayResponseHandler<ResponseObj> response = connectorsDataHighwayInteractionService\n                .submitJob(workflowDetails, params, DuctConstants.DEFAULT_ENV, ductJobMapping.getJobId());\n        InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n        if (response.getStatusCode() == 200) {\n            ResponseObj responseObj = response.getResponseBody();\n            LOGGER.info(\"Request was processed by DH flow manager, Response code-{}, Response-message - {}\", response.getStatusCode(),\n                    responseObj);\n\n            DuctJobMapping newDuctJobMapping = ductJobMappingDao.findByJobId(ductJobMapping.getJobId());\n            newDuctJobMapping.setExternalDHJobId(String.valueOf(((Map) responseObj.getData()).get(\"primaryJobId\")));\n            newDuctJobMapping.setExtractTaskId(ductJobMapping.getExtractTaskId());\n            newDuctJobMapping.setFreeFormTaskId(ductJobMapping.getFreeFormTaskId());\n            ductJobMappingDao.update(newDuctJobMapping);\n            LOGGER.info(\"Completed Extract Request Submission for {} with status success for job id {}\", ductJobMapping.getConnectorType(), ductJobMapping.getJobId());\n            return DuctResponse.builder().tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01f87455-aa9b-4de9-a136-df645a589996","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":321,"endLine":344,"content":"t().orElse(null);\n\n        List<FieldInfo> showFields = Lists.newArrayList();\n        fieldsToExtract.forEach(mapping -> {\n            FieldInfo fieldInfo = new FieldInfo();\n            fieldInfo.setName(mapping);\n            if (ObjectUtils.isNotEmpty(fieldNameToFieldAlias) && ObjectUtils.isNotEmpty(fieldNameToFieldAlias.get(mapping)))\n                fieldInfo.setFieldAlias(fieldNameToFieldAlias.get(mapping));\n            else\n                fieldInfo.setFieldAlias(getNameForDHFilterRule(mapping, ductJobMapping.getResourceName()));\n            DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, mapping, fieldInfo, fieldNameMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n            fieldInfo.setFieldType(FieldType.FIELD);\n            setJsonPath(fieldInfo, mapping, ductJobMapping.getResourceName(), fieldNameMetaMap);\n            fieldInfo.setMultiValued(fieldNameMetaMap.get(mapping).getMeta().isMultiValued());\n            showFields.add(fieldInfo);\n        });\n        //todo check projections and validFieldToQuery\n        //todo check associations to be added\n        //todo - check criteria to be added\n        //TODO hubspot add import lookup source here\n\n        fetchTaskDetails.setProjectionClause(showFields);\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()) && ObjectUtils.isNotEmpty(getWhereClause(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, ductJobMapping)))\n            fetchTaskDetails","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4030425a-c3aa-4977-a6b2-1d167ca69eea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/AuthTokenGenService.java","startLine":1,"endLine":15,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.enums.AuthTokenType;\n\nimport java.util.Map;\n\npublic interface AuthTokenGenService {\n    RequestInfo generateToken(AuthTokenType authTokenType, Map<String, Object> parameters);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d36b8d20-7ce7-411e-a978-f92a36f02caf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctStatus.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.beans;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum DuctStatus {\n\n    INIT(\"Init\"),\n    IN_PROGRESS(\"In Progress\"),\n    SUBMITTED_TO_CE(\"Submitted to CE\"),\n    COMPLETED(\"Completed\"),\n\n    SUBMITTED_TO_DH(\"Submitted to DH\"),\n    SUCCESS(\"Success\"),\n    PARTIAL_SUCCESS(\"Partial Success\"),\n    FAILED(\"Failed\"),\n    ABORTED(\"Aborted\"),\n    NO_DATA_FOUND(\"No Data Found\");\n    private String value;\n\n    DuctStatus(String value) {this.value = value;}\n\n    private static final Map<Object, DuctStatus> DUCT_JOB_STATUS_MAP = new HashMap<>();\n\n    static {\n        for (DuctStatus type : values()) {\n            DUCT_JOB_STATUS_MAP.put(type.value.toUpperCase(), type);\n        }\n    }\n\n    /**\n     * This code is for case-insensitive enums.\n     *\n     * @param value The value\n     * @return The enum\n     */\n    public static DuctStatus forValue(String value) {\n        if (value == null) {\n            return null;\n        }\n        return DUCT_JOB_STATUS_MAP.get(value.toUpperCase());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aaccdd1b-c155-4c87-9073-7a9214a62fb2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":483,"endLine":521,"content":"ing json, Class<T> clazz) {\n        return convertJsonToObject(json, clazz, false);\n    }\n\n    public static String convertObjectToJson(Object obj) {\n        return convertObjectToJson(obj, false);\n    }\n\n    public static String convertObjectToJson(Object obj, boolean quietly) {\n        try {\n            return OBJECT_MAPPER.writeValueAsString(obj);\n        } catch (IOException e) {\n            if (!quietly) {\n                log.error(\"Error in converting object to json: {}\", e.getMessage(), e);\n                String errorMessage = e.getMessage();\n                if (e.getCause() != null && org.apache.commons.lang3.StringUtils.isNotBlank(e.getCause().getMessage())) {\n                    errorMessage = e.getCause().getMessage();\n                }\n                throw new RuntimeException(e.getMessage(), e);\n            }\n            return \"{}\";\n        }\n    }\n\n\n    public static <T> T convertJsonToObject(String json, Class<T> clazz, boolean quietly) {\n        try {\n            return OBJECT_MAPPER.readValue(json, clazz);\n        } catch (IOException e) {\n            log.error(\"Error in converting json to object: {}\", e);\n            if (!quietly) {\n                throw new RuntimeException(e.getMessage(), e);\n            }\n            return null;\n        }\n    }\n\n    public static Object getMSDynamicsAccessTokenFromCache(RedisCacheUtility redisCacheUtility, String connectionId) {\n        Object value = redisCacheUtility.getValue(DuctUtils.getMSDynamicsAccessCacheKey(co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45724a2e-5f6e-4c2d-8b98-e3d6cf0a6dfd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":25,"endLine":69,"content":"g.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\nimport static org.apache.calcite.avatica.remote.JsonService.MAPPER;\n\n@Service\n@Order(600)\n@Slf4j\npublic class EcosystemDatasourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    @Autowired\n    private GainsightEcosystemFetchProcessor gainsightEcosystemFetchProcessor;\n\n    private static final String ECOSYSTEM_EXTRACT_TASK = \"CaasEcosystemExtract\";\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.ECOSYSTEM;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return ECOSYSTEM_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.ex","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4242399d-ba3b-41b2-a5ef-0eb7a25b2fe7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/bean/health/HealthStatusResponse.java","startLine":1,"endLine":18,"content":"package com.gainsight.bean.health;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class HealthStatusResponse {\n  private String version;\n  private List<HealthStatus> basic;\n  private List<HealthStatus> applicationDB;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3b9d632-e45d-4945-9dd0-64fca693493a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/RunType.java","startLine":1,"endLine":15,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\n/**\n * Created by: santa\n * Created Date: 23/6/14 6:02 PM.\n */\npublic enum RunType {\n  RUN_NOW,\n  SCHEDULER,\n  EVENT\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ee0888b-bdd3-4c4d-8447-74e506e3141c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":333,"endLine":359,"content":"DateTimeFieldsMap(fieldNameMetaMap);\n            Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n            Criteria modifiedCriteria = null;\n\n            // flatten the criteria to get all the nested filters\n            List<Criteria> flattenedCriteria = flattenCriteria(criteria);\n\n            // filter only those criteria which are externally filterable\n            List<Criteria> flattenedRequiredCriteria = nullSafeList(flattenedCriteria)\n                    .stream()\n                    .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n                    .collect(Collectors.toList());\n\n            // In this case we have at least one filter which is externally filterable\n            if (CollectionUtils.isNotEmpty(flattenedRequiredCriteria))\n                modifiedCriteria = getSingleCriteriaForQueryBody(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap);\n            LOGGER.info(\"Criteria being used for search request: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n            return modifiedCriteria;\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while modifying criteria for object search, Falling back to default criteria accepted by the external system\", ex);\n            return getDefaultFallbackCriteria();\n        }\n    }\n\n    private Criteria getDefaultFallbackCriteria() {\n        Criteria criteria = new Criteria()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61cb3edd-e32d-4bcd-bb53-518ae88cdaab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":49,"endLine":68,"content":"lterRule filterRule, Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap,\n                                                        List<Relationship> relationships, String objectName, String baseObjectPluralName, Map<String, String> masterLookUpConfiguration,\n                                                        boolean fieldsFlattened) throws Exception {\n        List<String> whereClauses = Lists.newArrayList();\n        for (FilterRule rule : filterRule.getRules()) {\n            whereClauses.addAll(buildRule(rule, objectToFieldDBNameToFieldDefinitionMap, relationships, objectName,\n                    baseObjectPluralName, masterLookUpConfiguration, fieldsFlattened));\n        }\n        String joiner = filterRule.getCondition() != null\n                ? SPACE + filterRule.getCondition().getFilterCondition().toLowerCase() + SPACE\n                : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses);\n    }\n\n    private static List<String> buildRule(FilterRule rule, Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap,\n                                          List<Relationship> relationships, String objectName, String baseObjectPluralName,\n                                          Map<String, String> masterLookUpConfiguration, boolean fieldsFlattened) throws Exception {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"76b94652-f664-4d19-a775-745db2597d7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.Operators;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ed4ff36-42e1-4a8c-aa80-cdec7745ad00","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/FeatureToggleUtil.java","startLine":63,"endLine":98,"content":"          FeatureVariationDetailDTO featureVariationDetailDTO = service.evaluate(name, tenantId);\n            return (T) featureVariationDetailDTO.getValue();\n        } catch (Exception ex) {\n            LOGGER.error(\"{}\", ex.getMessage(), ex);\n            return defaultValue;\n        }\n    }\n\n    public static boolean isFeatureEnabledForTenant(String featureName) {\n        boolean result;\n        if (tenantCRMMultiConnMap.containsKey(RequestContextProvider.getTenantId())) {\n            result = tenantCRMMultiConnMap.get(RequestContextProvider.getTenantId());\n        } else {\n            result = UCFeatureConfigUtility.evaluate(featureName);\n            tenantCRMMultiConnMap.put(RequestContextProvider.getTenantId(), result);\n        }\n        return result;\n    }\n\n    public static boolean enableFeature(String featureName, List<String> tenantIds, String variationName) {\n        LOGGER.info(String.format(\"Updating state of %s to %s from feature toggle service for tenants %s\", featureName, variationName, tenantIds));\n        try {\n            getFeatureToggleCrudService().upsertTenantMappings(featureName, tenantIds, variationName);\n            return true;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception updating state from feature toggle service\", e);\n            return false;\n        }\n    }\n\n}\n  return false;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe5c1252-b698-46e2-a524-d25722451827","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":108,"endLine":129,"content":"etResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n         } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private String getZuoraQuery(DuctJobMapping ductJobMapping) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.ZUORAV2);\n        StringJoiner joiner = new StringJoiner(COMMA);\n        for (String field : ductJobMapping.getFields()) {\n            joiner.add(field);\n        }\n        if(ObjectUtils.isEmpty(ductJobMapping.getCriteria()))\n            return String.format(\"SELECT %s FROM %s\", joiner, getZuraObjectName(ductJobMapping.getResourceName()));\n        else {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(),\n                    pnpConnectionsInfo);\n            ObjectDefinition objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n            Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefini","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"95b22e99-f804-42db-bd72-ea949bfc0d9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectConfig.java","startLine":1,"endLine":51,"content":"package com.gainsight.duct.beans.config;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_object_config\")\npublic class CaasObjectConfig extends MongoBaseBean implements Serializable {\n\n  public static String CONNECTOR_TYPE_PROP = \"connectorType\";\n  @Indexed(background = true)\n  private ConnectorType connectorType;\n  private List<Map<String, Object>> addedObjects = Lists.newArrayList();\n  private Set<String> notSupportedObjects = new HashSet<>();\n  private Set<String> showOnlyIncludedObjects = new HashSet<>();\n  private int order;\n  private String objectName;\n  public int getOrder() {\n    return order;\n  }\n\n  public void setOrder(int order) {\n    this.order = order;\n  }\n\n  public String getObjectName() {\n    return objectName;\n  }\n\n  public void setObjectName(String objectName) {\n    this.objectName = objectName;\n  }\n\n  public ConnectorType getConnectorType() {\n    return connectorType;\n  }\n\n  public void setC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"924ec682-2962-4ab3-bfc4-d30f3a9af767","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ZoomValidationDataSourceService.java","startLine":30,"endLine":53,"content":"ion {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if(criteria!=null) {\n            if (criteria.getFilters() != null) {\n                for (Criteri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f70b67e-4a20-4bce-ad07-dd94e86d009e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/IpaasBulkFileDownloadMessageInfo.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.beans.dbqueue;\n\n\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class IpaasBulkFileDownloadMessageInfo implements MessageInfo<IpaasBulkDownloadCallbackPayload> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.IPAAS_BULK_FILE_DOWNLOAD;\n    private static final MessagePayloadTransformer<IpaasBulkDownloadCallbackPayload> transformer = new DefaultMessagePayloadTransformer<>(IpaasBulkDownloadCallbackPayload.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<IpaasBulkDownloadCallbackPayload> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5eceb88a-d58b-418a-84f3-22cb0e8a6138","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/FieldsInfo.java","startLine":49,"endLine":96,"content":"splayName() {\n        return fieldDisplayName;\n    }\n\n    public void setFieldDisplayName(String fieldDisplayName) {\n        this.fieldDisplayName = fieldDisplayName;\n    }\n\n    public boolean isRequiredForAuthorization() {\n        return requiredForAuthorization;\n    }\n\n    public void setRequiredForAuthorization(boolean requiredForAuthorization) {\n        this.requiredForAuthorization = requiredForAuthorization;\n    }\n\n    public Object getValidator() {\n        return validator;\n    }\n\n    public void setValidator(Object validator) {\n        this.validator = validator;\n    }\n\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    public void setFieldName(String fieldName) {\n        this.fieldName = fieldName;\n    }\n\n    public String getExternalFieldName() {\n        return externalFieldName;\n    }\n\n    public void setExternalFieldName(String externalFieldName) {\n        this.externalFieldName = externalFieldName;\n    }\n\n    public Map<String, Object> getProperties() {\n        return properties;\n    }\n\n    public void setProperties(Map<String, Object> properties) {\n        this.properties = properties;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2df13f82-0de4-4f0c-ba93-480e773b6139","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":48,"endLine":70,"content":" DuctUtils.throwError(CaasValidationCode.NO_DATA_PROVIDED.getGsEventCode(), CaasValidationCode.NO_DATA_PROVIDED.getUserText(),\n                            CaasValidationCode.NO_DATA_PROVIDED.getUserText());\n                } else if (ductRequestDTO.getIdentifiers().isEmpty()) {\n                    DuctUtils.throwError(CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getGsEventCode(), CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText(),\n                            CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText());\n                }\n\n                if (ductRequestDTO.getIdentifiers().stream()\n                        .filter(identifier -> !ductRequestDTO.getData().containsKey(identifier))\n                        .findAny().isPresent()) {\n                    DuctUtils.throwError(CaasValidationCode.REQUIRED_MAPPINGS_NOT_PRESENT.getGsEventCode(), CaasValidationCode.REQUIRED_MAPPINGS_NOT_PRESENT.getUserText(),\n                            CaasValidationCode.REQUIRED_MAPPINGS_NOT_PRESENT.getUserText());\n                }\n            }\n        }\n        return true;\n    }\n\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> fieldSet = objectDefinition.getFields().stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toSet());\n        Set<String> notAvailableField","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a1b1cd2-644b-419f-b5eb-dcbd70bdc95b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":291,"endLine":320,"content":"pecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n        List<Map<String, Object>> filteredAndEnhancedObjectList = Lists.newArrayList();\n        Set<String> objectIdsSet = new HashSet<>();\n        for (Map<String, Object> object : objectList) {\n            objectIdsSet.add(String.valueOf(object.get(OBJECT_ID)));\n        }\n\n        filteredAndEnhancedObjectList.addAll(objectList);\n\n        /*\n        Adding global object\n         */\n        if (caasObjectConfig != null) {\n\n            if (CollectionUtils.isNotEmpty(caasObjectConfig.getShowOnlyIncludedObjects()) && showOnlyIncludedObjects) {\n                for (Map<String, Object> object : objectList) {\n                    if (!caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                        filteredAndEnhancedObjectList.remove(object);\n                        objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                    }\n                }\n            }\n\n            for (Map<String, Object> object : caasObjectConfig.getAddedObjects()) {\n                if ((!objectIdsSet.contains(object.get(OBJECT_ID).toString()))\n                        && caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toStrin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f6495a88-bb30-4aaf-83e2-74529817d24b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":226,"endLine":254,"content":"(dbHost)) {\n        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n      }\n\n    }\n\n  }\n\n  private String getPropertiesFromPNPConnectionsInfoProperties(PNPConnectionsInfo pnpConnectionsInfo, String property) {\n    if (Objects.isNull(property) || Objects.isNull(pnpConnectionsInfo) || Objects.isNull(pnpConnectionsInfo.getProperties()) || !pnpConnectionsInfo.getProperties().containsKey(IPaasConstants.IPAAS_PROPERTIES) ||\n        MapUtils.isEmpty((Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES))) {\n      return null;\n    }\n    Map<String, Object> properties = (Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES);\n    return DuctUtils.valueOf(properties.get(property));\n  }\n\n\n  @SneakyThrows\n  @Override\n  public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n    try {\n      populateSAPConnectionProperties(pnpConnectionsInfo, pnpConnectionInput);\n      pnpConnectionsInfo.setIpaasConnection(false);\n      pnpConnectionsInfo.setAuthorizationType(AuthorizationType.BASIC_AUTH);\n      validateConnectionProperties(pnpConnectionsInfo);\n      populateSAPConnectionDetails(pnpConnectionsInfo);\n\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7ddc687-a64d-4875-bd90-7fd4c103d813","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":303,"endLine":323,"content":"scription(\"Stores Account ID from Hubspot Company\");\n                column.setProperties(prop);\n                companyObject.getAllColumns().add(column);\n                collectionMasterService.updateStandardCollection(companyObject);\n            }\n            properties.put(UCConstants.GSIntegration.COMPANY_IDENTIFIER, externalAccountIdFieldName);\n            String externalContactIdFieldName = \"HubspotContactId_\" + pnpConnectionsInfo.getCrmId();\n            CollectionMasterV2 companyPersonObject = collectionMasterService.findOneV2(new CollectionMasterQuery().standardObjectType(StandardObjectType.COMPANYPERSON), false, true, MetadataVersion.getLatestVersion());\n            boolean companyPersonUpdateRequired = false;\n            if (Objects.isNull(companyPersonObject.getColumn(externalContactIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalContactIdFieldName);\n                column.setDisplayName(\"Hubspot Contact ID_\" + portalId);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Contact ID from Hubspot Contact\");\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                compa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71ab3b62-2d08-431a-a4f8-450f9d039eed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":215,"endLine":245,"content":"\n            case NE:\n            case GT:\n            case LT:\n                if (isDate(externalDataType) || isDateTime(externalDataType)) {\n                    if (rule.getOp() == FilterOperator.EQ) {\n                        if (Objects.isNull(getFilterValue(rule))) {\n                            evaluatedExpression.append(fieldName)\n                                    .append(\" \")\n                                    .append(\"eq\")\n                                    .append(\" \")\n                                    .append(getFilterValue(rule));\n                        } else {\n                            evaluatedExpression.append(\"(\")\n                                    .append(fieldName)\n                                    .append(\" \")\n                                    .append(\"ge\")\n                                    .append(\" \")\n                                    .append(fromDateUTCStr)\n                                    .append(\" \")\n                                    .append(\"and\")\n                                    .append(\" \")\n                                    .append(fieldName)\n                                    .append(\" \")\n                                    .append(\"lt\")\n                                    .append(\" \")\n                                    .append(toDateUTCStr)\n                                    .append(\")\");\n                        }\n                    } else if (rule.getOp() == FilterOperator.NE) {\n                        if (Objects.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a57394c3-4819-4bf4-b59f-61da2dd39fd5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/DuctWebConfiguration.java","startLine":1,"endLine":36,"content":"package com.gainsight.config;\n\nimport auth.SFSessionService;\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.duct.auth.TenantUserRoleTypeServiceImpl;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplate;\nimport com.gainsight.duct.utils.Redis.CaasRedisTemplateImpl;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateServiceImpl;\nimport com.gainsight.duct.sdk.client.DuctClientConfig;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.redis.GainsightRedisTemplate;\nimport com.gainsight.redis.GainsightRedisTemplateImpl;\nimport com.gainsight.service.DynamicsUserLookUpService;\nimport com.gainsight.service.TenantUserRoleTypeService;\nimport com.gainsight.service.UserSessionService;\nimport com.gainsight.service.UserSessionServiceImpl;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.Map;\n\n@Configuration\n@ComponentScan(basePackages = {\"com.gainsight.duct\",\"com.gainsight.utils.cache\", \"com.gainsight.integration.connector\", \"com.gainsight.integration.utils\"})\npublic class DuctWebConfiguration {\n\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    @Bean\n    public GainsightRedisTemplate gainsightRedisTem","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09c786cb-ad7a-4f51-ab42-c2041c11e2a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":24,"endLine":61,"content":".apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.integration.bean.IPaasConstants.META;\nimport static com.gainsight.integration.bean.IPaasConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n@Order(200)\n@Service\n@Slf4j\npublic class BigqueryCaasMetadatServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    public static final String LABEL = \"label\";\n    public static final String DATA_TYPE = \"dataType\";\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.BIGQUERY.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        log.info(\"Fetching object for bq\");\n        GainsightBigQueryChannelFactory gainsightBigQueryChannelFactory = new Gainsight","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e1df60f-11a8-4d45-a72c-f9d3cd2d95bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1088,"endLine":1113,"content":".getConnectionId());\n                if (avatarProject != null) {\n                    AvatarProjectDTO avatarProjectDTO = new AvatarProjectDTO();\n                    avatarProjectDTO.setProjectId(avatarProject.getProjectId());\n                    avatarProjectDTO.setName(pnpConnectionInfoFromUI.getConnectionName());\n                    UserManagementUtil.newGsUsersApi(ApiConsumer.CONNECTORS_20).avatarProjects().updateV2(avatarProject.getProjectId(), avatarProjectDTO);\n                }\n            } catch (GsUsersException e) {\n                log.error(\"Error while getting avatar project {}\", e.getMessage(), e);\n            }\n        }\n\n        updateRestApiOAuthConnectionInput(pnpConnectionsInfoUpdated);\n        //updateJobInfos(pnpConnectionsInfoUpdated); //to do check with manas\n        return pnpConnectionsInfoUpdated;\n    }\n\n    private PNPConnectionsInfo updateRequiredProperties(List<BeanPropertyTracker> beanPropertyTrackerList,\n                                                        PNPConnectionsInfo pnpConnectionsInfo) {\n        beanPropertyTrackerList.stream().forEach(beanPropertyTracker -> {\n            try {\n                BeanUtils.setProperty(pnpConnectionsInfo, beanPropertyTracker.getPropertyName(), beanPropertyTracker.getNewValue());\n            } catch (IllegalAccessException e) {\n                log.error(\"Error updating the ConnectionInfo Object\", e);\n            } catch (InvocationTargetException e) {\n                log.error(\"Error updating the Connect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e4376618-b10c-4a6c-91b2-07626484340b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":114,"endLine":132,"content":"sInfo.getConnectionType());\n        String dataApi = null;\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(resourceName)).findFirst();\n        if (caasObjectApiConfig.isPresent()) {\n            if (ObjectUtils.isNotEmpty(caasObjectApiConfig.get().getAdditionalProperties().get(MULTI_RECORD_FETCH_SUPPORTED)) &&\n                    (Boolean) caasObjectApiConfig.get().getAdditionalProperties().get(MULTI_RECORD_FETCH_SUPPORTED)) {\n                dataApi = caasObjectApiConfig.get().getDataApi();\n\n                GainsightMSTeamsChannelFactory gainsightMSTeamsChannelFactory = new GainsightMSTeamsChannelFactory();\n\n                TokenDetails tokenDetails = extractAccessDetails(ductJobMapping.getConnectionId());\n\n                try {\n                    Map<String, Object> tokenDetailMap = gainsightMSTeamsChannelFactory.getAccessToken(tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken());\n                    tokenDetails.setAccessToken(tokenDetailMap.get(ACCESS_TOKEN).toString());\n                    tokenDetails.setRefreshToken(tokenDetailMap.get(REFRESH_TOKEN).toString());\n                } catch (Exception e) {\n                    log.error(\"Error in fetching access token\", e);\n                    DuctUtils.throwError(CaasValidationCode.MS_TEAMS_INVALID_CREDENTIALS.getGsEventCode(), CaasValidationCode.MS_TEAMS_INVALID_CREDENTIALS.getUserText(), \"E","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2be9da81-9975-486b-a699-bca3affbba25","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":392,"endLine":416,"content":"nentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getMeetingDetails(@RequestBody MeetingDetailsRequestDTO meetingDetailsRequestDTO) {\n        try {\n            return new ResponseObj(true, ductService.fetchMeetingDetails(meetingDetailsRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @PostMapping(value = \"{connectionId}/files/upload\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj uploadFiles(@PathVariable String connectionId, @RequestParam(name = \"file\") MultipartFile file,\n                                   @RequestParam(name = \"options\") String options,\n                                   @RequestParam(name = \"folderId\") String folderId) {\n        Map<String, Object> optionValues = JsonUtil.readObject(options, Map.class);\n        return new ResponseObj(true, ductService.uploadFile(connectionId, DuctCommonUtils.convertToFile(file), optionValues, folderId));\n    }\n\n    @ApiOperation(value = \"Fetch Config of an object for a connection\", response = Map.class)\n    @GetMapping(value = \"/{connectionId}/{objectname}/config\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adff4b55-8ff7-401d-a021-5e3378d63827","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/AhaCaasMetadataServiceImpl.java","startLine":32,"endLine":63,"content":"BJECT_MAPPER = new ObjectMapper();\n\n\n    @Autowired\n    private GainsightAhaFetchProcessor gainsightAhaFetchProcessor;\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.AHA.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<ObjectDefinition> ahaObjects = gainsightAhaFetchProcessor.getListOfAvailableEntities(pnpConnectionsInfo.getConnectionId());\n        List<Map<String, Object>> returnObj = new ArrayList<>(ahaObjects.size());\n        for (ObjectDefinition obj : ahaObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj.getObjectId());\n            retMap.put(OBJECT_NAME, obj.getObjectName());\n            retMap.put(LABEL, obj.getLabel());\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GSIntegrationResponse gsIntegrationResponse = gainsightAhaFetchProcessor.getEntityDescription(pnpConnectionsInfo.getConnectionId(), objectName);\n        GainsightAhaEntityDescription gainsightAhaEntityDescription = (GainsightAhaEntityDescription) gsIntegration","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a4d5c2f-6b25-4449-9915-d05ead07bce2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":88,"endLine":115,"content":"Mapping, String searchString) {\n        String value  = StringUtils.isEmpty(searchString) ? gsExternalSystemErrorMapping.getExternalSystemErrorMessage() : searchString;\n        String query = \"SELECT * FROM gs_external_error_mapping WHERE external_system_error_message like '%\"+value+\"%'\";\n        List<GsExternalSystemErrorMapping> response =  namedParameterJdbcTemplate().query(query, rowMapper);\n        if(CollectionUtils.isEmpty(response)){\n            super.insert(gsExternalSystemErrorMapping);\n        }\n    }\n\n    public void findExactValueAndSave(GsExternalSystemErrorMapping gsExternalSystemErrorMapping, String searchString) {\n        String query = \"SELECT * FROM gs_external_error_mapping WHERE external_system_error_message = '\"+searchString+\"'\";\n        List<GsExternalSystemErrorMapping> response =  namedParameterJdbcTemplate().query(query, rowMapper);\n        if(CollectionUtils.isEmpty(response)){\n            super.insert(gsExternalSystemErrorMapping);\n        }\n    }\n\n    public List<GsExternalSystemErrorMapping> findAll() {\n        String query = \"SELECT * FROM gs_external_error_mapping limit 100\";\n        return namedParameterJdbcTemplate().query(query, rowMapper);\n    }\n\n\n    private static class GsExternalSystemErrorMappingRowMapper implements RowMapper<GsExternalSystemErrorMapping> {\n\n        private static final String GS_ERROR_CODE_COLUMN = \"gs_error_code\";\n        private static final String GS_ERROR_MESSAGE_COLUMN = \"gs_error_message\";\n        private static ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4b3aa2a-6660-49ec-b521-7b5ae9ba81b5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":129,"endLine":165,"content":"           .withHost(DuctCommonConstants.FEATURE_CONFIG_URL)\n            .withEnvironment(getEnv())\n            .withCredentials(new Credentials()\n                    .withRequestInfo(RequestContextProvider.getRequestInfo())\n                    .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(DuctCommonConstants.GSNAP_SECRET).getValue()));\n  }\n\n  public static <T> T evaluateFeature(String name, String tenantId) {\n    FeatureConfigEvaluationService service = new FeatureConfigEvaluationServiceImpl().withClientConfig(getFeatureToggleClientConfig());\n    FeatureVariationDetailDTO featureVariationDetailDTO = service.evaluate(name, tenantId);\n    return (T) featureVariationDetailDTO.getValue();\n  }\n\n  public static boolean evaluateBooleanFeature(String name, String tenantId) {\n    return Boolean.TRUE.equals(evaluateFeature(name, tenantId, false));\n  }\n\n  public static <T> T evaluateFeature(String name, String tenantId, T defaultValue) {\n    try {\n      log.info(\"Evaluating feature {} for tenant {}, default value {}\", name, tenantId, defaultValue);\n      return evaluateFeature(name, tenantId);\n    } catch (Exception e) {\n      log.error(\"Error while evaluating feature : {}, returning default value {}\", e.getMessage(), defaultValue, e);\n      return defaultValue;\n    }\n  }\n\n  @SneakyThrows\n  public static void sleepSeconds(long seconds) {\n    Thread.sleep(TimeUnit.SECONDS.toMillis(seconds));\n  }\n\n\n  private DuctCommonUtils() {\n  }\n\n  public static File convertToFile(Multipar","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"310754f8-86b5-4bed-a378-4b2457d2b781","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1464,"endLine":1484,"content":").getChannelServiceWithApiKey((String) ecosystemProperties.get(ACCESS_TOKEN));\n        String url = StringUtils.defaultIfBlank((String) ecosystemProperties.get(URL),\n                DeploymentProperties.getDeploymentProperties().getValue(\"ecosystem.connector.base.url\"));\n        url = url + \"/api/v1/document/ibc/query?limit=1\";\n        return gainsightEcosystemChannelService.authenticate(url);\n    }\n\n    public PNPConnectionsInfo getPxSubscription(PNPConnectionsInfo pnpConnectionInfo) throws CaasException {\n        UCAptrinsicChannelService ucAptrinsicChannelService = new UCAptrinsicChannelServiceImpl(pnpConnectionInfo.getTokenDetail().getAccessKey().getString());\n        InputStream inputStream = null;\n        try {\n            inputStream = ucAptrinsicChannelService.getSubscriberResponse(pnpConnectionInfo);\n            JsonNode jsonNode = OBJECT_MAPPER.readTree(inputStream);\n            JSONObject jsonObject = new JSONObject(jsonNode.toString());\n            pnpConnectionInfo.getProperties().put(UCConstants.GSIntegration.GAINSIGHT_PX_SUBSCRIPTION_ID, jsonObject.get(\"id\"));\n            pnpConnectionInfo.getProperties().put(UCConstants.GSIntegration.GAINSIGHT_PX_SUBSCRIPTION_TIME_ZONE, jsonObject.get(\"timeZone\"));\n        } catch (IOException | JSONException e) {\n            log.error(\"Error while getting Gainsight subscription\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"Error while getting Gainsight subscription\", e));\n        } finally {\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c08e2fbd-7696-4dfd-831f-09dff63fb3df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":391,"endLine":418,"content":"             propertiesMap.put(ID, internalResultsMap.get(ID));\n                responseList.add(propertiesMap);\n            }\n        } else {\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n            });\n            if (resourceConfig.getMetadataTransformationConfig() != null) {\n                data = sanitizeData(data, resourceConfig);\n            }\n            responseList.addAll(data);\n        }\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f9ac879-cf27-42bf-b6b9-15ac8eb059ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":376,"endLine":408,"content":"cuting below lines\n            GainsightPrecondition\n                    .assertNotNull(accountDetail, CaasValidationCode.INVALID_INPUT, org.apache.http.HttpStatus.SC_BAD_REQUEST);\n\n            accountDAO.remove(accountQuery);\n\n            //Step 2 : Remove Subdomain to Tenant link\n            TenantMasterQuery tenantMasterQuery = new TenantMasterQuery();\n            tenantMasterQuery.tenantId(RequestContextProvider.getTenantId());\n            final Tenant tenant = tenantMasterDAO.findOne(tenantMasterQuery);\n\n            if (tenant.getZendeskSubdomains() != null) {\n                //unlink zendesk subdomain from tenant\n                for (String sd : tenant.getZendeskSubdomains()) {\n                    if (sd.equals(subdomain)) {\n                        tenant.getZendeskSubdomains().remove(sd);\n                        TenantMasterUpdate update = new TenantMasterUpdate(tenant);\n                        tenantMasterDAO.update(tenantMasterQuery, update);\n                        break;\n                    }\n                }\n            }\n    }\n\n    private AccountQuery getAccountQuery(String subdomain) {\n        AccountQuery accountQuery = new AccountQuery();\n        accountQuery.accountType(AccountType.ZENDESK);\n        if (org.apache.commons.lang.StringUtils.isNotBlank(subdomain)) {\n            accountQuery.snId(subdomain);\n        }\n        return accountQuery;\n    }\n    private AccountDetail populateAccountDetailForWidget(PNPConnectionsInfo pnpConnectionsInfo, String snId) {","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37a66f29-9c5f-4922-9333-ca96bf1458a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":74,"endLine":109,"content":"eldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_PIPEDRIVE_V2_EXTRACT;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.pipedrivev2.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.pipedrivev2.extract.version\", \"v1\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.pipedrivev2.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        //TODO : Need to check on filters supported at source\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.JIRA);\n        Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n        Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n        if(modifiedCriteria == null)\n            return null","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f41dac5a-87cb-43b1-b9d1-9813d8bbdcc3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":205,"endLine":215,"content":"ew GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n            Object res = authService.getAccessDeatils(tokenGenaerationConfig.get().getTokenGenerationDetails(), pnpConnectionsInfo, metadataEngineConfig, flattenConnectionInfo, null);\n            Gson gson = new Gson();\n            Map<String, Object> response = gson.fromJson(res.toString(), Map.class);\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRootKey()))\n                pnpConnectionsInfo.getTokenDetail().setAccessToken(CryptHandler.getInstance().encrypt(String.valueOf(response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRootKey()))));\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRefreshTokenKey()))\n                pnpConnectionsInfo.getTokenDetail().setRefreshToken(CryptHandler.getInstance().encrypt((response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRefreshTokenKey())).toString()));\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseAccessExpireKey())) {\n                Long expire = ((Double) response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseAccessExpireKey())).longValue();\n                ExpireUnit expireUnit = ObjectUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit()) ? authDetailsOp.get().getInitial","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67d13fdb-8766-4e44-9f52-f538a40ca934","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/OMDConverterBaseService.java","startLine":27,"endLine":43,"content":"    objectDefinition.put(FIELDS, new ArrayList());\n    return objectDefinition;\n  }\n\n  /**\n   * @param objectName          {@link String}\n   * @param objectDefinitionMap {@link Map}\n   * @param fields              {@link JsonNode}\n   *                            Any postprocessing required for the fields present in objectDefinitionMap can be done here\n   */\n  default void postProcessFields(String objectName, Map<String, ObjectDefinition> objectDefinitionMap, JsonNode fields) {\n  }\n\n  default boolean postProcessingFieldsRequired() {\n    return false;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c45e78e5-1f8b-4d77-b33f-f50ce8a7ba59","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":54,"endLine":92,"content":"port org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.util.EntityUtils;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.type.TypeReference;\nimport org.scribe.model.Token;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport utils.Constants;\n\nimport javax.ws.rs.core.Response;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static com.gainsight.database.LoggingInterceptor.interceptUrl;\nimport static com.gainsight.utils.GainsightPrecondition.assertNotNull;\nimport static org.apache.http.HttpStatus.SC_BAD_REQUEST;\n\n/**\n * User: santa\n * Date: 14/4/14\n * Time: 2:27 PM\n */\n@Service\npublic class GainsightAccountServiceFactoryImpl implements GainsightAccountServiceFactory {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightAccountServiceFactoryImpl.class);\n    private static final Map<OAuthType, GainsightAccountService> GAINSIGHT_ACCOUNT_SERVICE_MAP = Maps.newHashMap();\n    private static final String GSNAP_SHARED_SECRET = DeploymentPropert","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7ffc6eb-54f0-4346-ac0a-e34247d71502","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":99,"endLine":118,"content":"if (fieldsFlattened && fieldNameSplitted.length == 2) {\n                        /*Case for lookup field.\n                        Example: createdby.systemuser\n                        */\n                        canonicalName = String.format(VALUE_FIELD, fieldNameSplitted[0]);\n                    } else if (!fieldsFlattened && fieldNameSplitted.length == 2) {\n                        /*Case for lookup field.\n                        Example: createdby.<target_lookup_field>\n                        */\n                        String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldNameSplitted[0]).getMeta()\n                                .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                        canonicalName = computeCanonicalNameForFilter(masterLookUpConfiguration, fieldNameSplitted[0], lookedUpObjectName, fieldNameSplitted[1],\n                                baseObjectPluralName, relationships, true);\n                    } else if (fieldNameSplitted.length == 4) {\n                        //Case for lookup field inside another lookup field.\n                        canonicalName = computeCanonicalNameForFilter(masterLookUpConfiguration, fieldNameSplitted[0], fieldNameSplitted[1], fieldNameSplitted[2],\n                                baseObjectPluralName, relationships, true);\n                    } else {\n                        log.error(\"Invalid case for the field: {}\", canonicalName);\n                        throw n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"494d7d4e-4bf2-47bb-a82b-cc8fc9fcfa5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":59,"endLine":83,"content":"class HubspotCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotCaasMetadataServiceImpl.class);\n\n    private static final String FIELDS = \"fields\";\n    private static final String STAGES = \"stages\";\n    private static final String ID = \"id\";\n    private static List<String> SPECIAL_HANDLING_PICKLIST_ATRRIBUTES = Lists.newArrayList(\"dealstage\", \"hs_pipeline_stage\");\n    private static List<String> PIPELINE_ALLOWED_OBJECT_LIST = Lists.newArrayList(\"TICKET\", \"DEAL\");\n    private static final HashSet<String> PICKLIST_DATA_TYPE = new HashSet<>(Arrays.asList(DataType.PICKLIST.name(), DataType.MULTISELECTDROPDOWNLIST.name()));\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String FROM_OBJECT_TYPE_ID = \"fromObjectTypeId\";\n    private static final String TO_OBJECT_TYPE_ID = \"toObjectTypeId\";\n    private static final String PLURAL_NAME_KEY = \"pluralName\";\n    private static final String FIELD_NAME_FORMAT = \"associations.%s.results[*].id\";\n    private static final String FIELD_LABEL_FORMAT = \"Associations_%sId\";\n    private static final String LIST_CALL = \"listCall\";\n    private static final String SINGULAR = \"singular\";\n\n    @Autowired\n    private GainsightHubspotFetchProcessor gainsightHubspotFetchProcessor;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8846403b-9c49-4f3b-90ff-d32ff2f55ede","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectAttributesConfig.java","startLine":83,"endLine":114,"content":"deAttribute() {\n    return excludeAttribute;\n  }\n\n  public void setExcludeAttribute(List<Map<String, Object>> excludeAttribute) {\n    this.excludeAttribute = excludeAttribute;\n  }\n\n  public String getTransformationFunction() {\n    if(transformationFunction != null){\n      byte[] byteContent = Base64.getDecoder().decode(transformationFunction);\n      return new String(byteContent);\n    }\n    return transformationFunction;\n  }\n\n  public void setTransformationFunction(String transformationFunction) {\n    this.transformationFunction = transformationFunction;\n  }\n\n  @Override\n  public String toString() {\n    return \"CaasObjectAttributeListConfig{\" +\n        \"connectorType=\" + connectorType +\n        \", order=\" + order +\n        \", objectName='\" + objectName + '\\'' +\n        \", filterAttribute=\" + filterAttribute +\n        \", overrideAttribute=\" + overrideAttribute +\n        \", transformationFunction=\" + transformationFunction +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"26276616-c4a2-42d0-84bf-eacf89202565","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":468,"endLine":505,"content":"eMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        filterRule.setFieldInfo(internalFieldInfo);\n        filterRule.setValues(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if (FilterOperator.INCLUDES.equals(criteria.getOperatorType()) || FilterOperator.EXCLUDES.equals(criteria.getOperatorType()))\n            filterRule.setOperatorInputs(new ArrayList<>());\n        return filterRule;\n    }\n\n    protected Map<String, Object> getFieldNameDataTypeMap(List<GSFieldDefinition> fieldDefinitions){\n        return fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType));\n    }\n\n    protected Map<String, GSFieldDefinition> getFieldNameMetaMap(List<GSFieldDefinition> fieldDefinitions) {\n        return fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition));\n    }\n\n\n    protected abstract String getTaskName();\n\n    protected abstract String getTeamName();\n\n    protected abstract String getUseLatest();\n\n    protected abstract String getVersion();\n\n    protected abstract String getTaskTimeoutMins();\n\n    public List<String> getIgnoreMetadataFieldNames() {\n        return null;\n    }\n\n    protected abstract FilterRule getWhereClause","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9124363f-d602-4e22-b3dd-6511303a6892","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/MetadataCommonUtil.java","startLine":94,"endLine":106,"content":"ing, Object> stringObjectMap : excludeAttribute) {\n                tempOverrideAttribute = new HashMap<>(stringObjectMap);\n                String key = tempOverrideAttribute.get(EXCLUDE_KEY).toString();\n                String value = tempOverrideAttribute.get(EXCLUDE_KEY_VALUE).toString();\n                tempOverrideAttribute.remove(EXCLUDE_KEY);\n                tempOverrideAttribute.remove(EXCLUDE_KEY_VALUE);\n                List<Map> fieldsToBeExcluded = gsFields.stream().filter(field -> field.containsKey(key) && field.get(key).toString().equalsIgnoreCase(value)).collect(Collectors.toList());\n                gsFields.removeAll(fieldsToBeExcluded);\n            }\n        }\n        metadata.put(FIELDS, gsFields);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"045575de-5593-4a85-b84b-a81f12ab53f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/context/EnvironmentContext.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.utils.context;\n\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.ResettableContext;\n\npublic class EnvironmentContext implements ResettableContext {\n\n    private static final ThreadLocal<String> GS_ENVIRONMENT_CONTEXT = new ThreadLocal<>();\n\n    private EnvironmentContext() {\n    }\n\n    static {\n        GainsightContext.register(new EnvironmentContext());\n    }\n\n    public static void setEnvName(String envName) {\n        GS_ENVIRONMENT_CONTEXT.set(envName);\n    }\n\n    public static String getEnvName() {\n        return GS_ENVIRONMENT_CONTEXT.get();\n    }\n\n    public static void reset() {\n        GS_ENVIRONMENT_CONTEXT.remove();\n    }\n\n    @Override\n    public void resetContext() {\n\n        reset();\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d131c8f-2adb-47ec-ba0d-dea99b663391","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":277,"endLine":291,"content":"     List<String> dataTypesSupportingLengthAndScale = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n          .getValue(\"datasphere.supported.dt.length.scale\", \"DECIMAL\").split(COMMA));\n      for (Map<String, Object> row : gainsightSAPDatasphereChannelService.listAllFields(objectLevelOperation.getKey(), ignoreSystemFields)) {\n        if(null != row.get(\"DATA_TYPE_NAME\") && dataTypesSupportingLength.contains(String.valueOf(row.get(\"DATA_TYPE_NAME\"))) && null != row.get(\"LENGTH\")) {\n          colNameToDataType.put(String.valueOf(row.get(\"COLUMN_NAME\")), String.valueOf(row.get(\"DATA_TYPE_NAME\")) + \"(\" + row.get(\"LENGTH\") + \")\");\n        } else if(null != row.get(\"DATA_TYPE_NAME\") && dataTypesSupportingLengthAndScale.contains(String.valueOf(row.get(\"DATA_TYPE_NAME\")))\n                && null != row.get(\"LENGTH\") && null != row.get(\"SCALE\")) {\n          colNameToDataType.put(String.valueOf(row.get(\"COLUMN_NAME\")), String.valueOf(row.get(\"DATA_TYPE_NAME\")) + \"(\" + row.get(\"LENGTH\") + \",\" + row.get(\"SCALE\") + \")\");\n        } else {\n          colNameToDataType.put(String.valueOf(row.get(\"COLUMN_NAME\")), String.valueOf(row.get(\"DATA_TYPE_NAME\")));\n        }\n      }\n    } catch (Exception e) {\n      log.error(\"Exception occurred while describing table: {}. {}\", objectLevelOperation.getKey(), e.getMessage(), e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAG","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7df6048e-adc5-4b8a-ac55-c92cbf2ceda3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SfdcObjectDetails.java","startLine":1,"endLine":62,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * Created by vgautam on 17/05/18.\n */\n\n\nimport java.io.Serializable;\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SfdcObjectDetails implements Serializable {\n\n    private String objectName;\n    private String objectLable;\n    private List<SObjectField> fields;\n    private Set<String> childObjects;\n    private Set<String> parentObjects;\n    private int recordTypeInfos;\n\n    public String getObjectLable() {\n        return objectLable;\n    }\n\n    public void setObjectLable(String objectLable) {\n        this.objectLable = objectLable;\n    }\n\n    public String getObjectName() {\n        return objectName;\n    }\n\n    public void setObjectName(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public List<SObjectField> getFields() {\n        return fields;\n    }\n\n    public void setFields(List<SObjectField> fields) {\n        this.fields = fields;\n    }\n\n   /* public List<FieldMapping> getTransformedFields() {\n        return transformedFields;\n    }\n\n    public void setTransformedFields(List<FieldMapping> transformedFields) {\n        this.transformedFields = transformedFields;\n    }*/\n\n    public Set<String> getChildObjects() {\n        return childObject","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed837b49-05a0-47c2-8f12-5631f7835dfc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectConfigDAOImpl.java","startLine":34,"endLine":63,"content":"ride\n    public Collection<CaasObjectConfig> getCaasObjectList() {\n        Query query = new Query();\n        List<CaasObjectConfig> caasObjectConfigs = getMongoTemplate().find(query, CaasObjectConfig.class);\n        if (caasObjectConfigs == null) {\n            caasObjectConfigs = Lists.newArrayList();\n        }\n        return caasObjectConfigs;\n    }\n\n    @Override\n    public CaasObjectConfig getCaasObjectConfig(ConnectorType connectorType) throws CaasException{\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectConfig> caasObjectConfigs = getMongoTemplate().find(query, CaasObjectConfig.class);\n        if(caasObjectConfigs.size()>1){\n            throw new CaasException(String.format(\"Duplicate document found for same connector type : %s\", connectorType.getValue()), CaasValidationCode.DUPLICATE_DOCUMENTS_FOUND_CONFIG);\n        }\n        return caasObjectConfigs.size() == 1 ? caasObjectConfigs.get(0) : null;\n    }\n\n    @Override\n    public CaasObjectConfig upsertConfigs(CaasObjectConfig objectListConfig) {\n        removeObjectListConfig(objectListConfig.getConnectorType(), objectListConfig.getObjectName());\n        objectListConfig.setId(UUID.randomUUID().toString());\n        getMongoTemplate().insert(objectListConfig);\n        return objectListConfig;\n    }\n\n    private void removeObjectListConfig(ConnectorType connectorType, String objectN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80211e8b-f8d0-4209-aeca-0f75d7d64224","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CommonEngineConnectionService.java","startLine":97,"endLine":115,"content":"(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to generate authorization url\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, null, \"Error occurred while trying to generate authorization url\"));\n        }\n        return authUrl;\n    }\n\n    @Override\n    public PNPConnectionsInfo revokeAuthorization() {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo deleteConnection() {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e9e095e9-af6b-4afd-89ac-1cdfa3606fed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":56,"endLine":82,"content":"sConnectorConfigDAO;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    private AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n    public static com.gainsight.fasterxml.jackson.databind.ObjectMapper OBJECT_MAPPER = new com.gainsight.fasterxml.jackson.databind.ObjectMapper();\n    private static com.fasterxml.jackson.databind.ObjectMapper MAPPER = new com.fasterxml.jackson.databind.ObjectMapper();\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.SERVICENOW.equals(connectorType);\n    }\n\n    @Override\n    public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n\n        Map ipaasProperties = ((Map) pnpConnectionInput.getProperties().get(IPaasConstants.IPAAS_PROPERTIES));\n        String oauthClientId = (String) ipaasProperties.get(UCConstants.GSIntegration.OAUTH_CLIENT_ID);\n        String oauthClientSecret = (String) ipaasProperties.get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET);\n        if (StringUtils.isEmpty(oauthClientId) || StringUtils.isEmpty(oauthClientSecret)) {\n            throw new RuntimeException(CaasValidationCode.INVALID_INPUT_DATA.getUserText());\n        }\n\n        //convert the oauth client id and secret to secret data\n        ((Map) pnpConnectionInput.getProperties","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f46b2b61-f546-4dfe-8228-01d0328101c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.config.*;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.metadata.db.service.CaasMetadataTransformationConfigDAO;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\n@Component\npublic class ConfigLoader implements ApplicationRunner {\n\n    public static final Logger LOGGER = LoggerFactory.getLogger(ConfigLoader.class);\n    private static final String CAAS_OBJECT_ATTRIBUTES_CONFIG = \"caas_object_attributes_config.json\";\n    private static","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7dc897fe-46bf-496b-85b8-85d53277a1e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.Relationship;\nimport com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.time.DateUtils;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.PERIOD;\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.util","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fc24e3e-d311-4e55-b630-2fb0ecc77afa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":310,"endLine":334,"content":"TimeFormatter = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        String timestamp = getFieldValue(obj, field.getJsonPath());\n                        if (StringUtils.isNotEmpty(timestamp)) {\n                            Instant instantInputValue = ZonedDateTime.parse(timestamp,\n                                    dateTimeFormatter).toInstant();\n                            ZoneId zoneInputValue = ZonedDateTime.parse(timestamp,\n                                    dateTimeFormatter).getZone();\n                            ZonedDateTime utcInputValue = ZonedDateTime.ofInstant(instantInputValue, zoneInputValue).withZoneSameInstant(ZoneId.of(\"UTC\"));\n                            updateFieldValue(obj, field.getJsonPath(), utcInputValue.format(dateTimeFormatter));\n                        }\n                    } catch (Exception e) {\n                        throw new Exception(\"Error occurred while trying to convert Date Time value for jira\", e);\n                    }\n                }\n            }\n        }\n\n    }\n\n    private boolean verifyIfNextPaginationIsRequired(DataExtractionRequest dataExtractionRequest, JSONObject\n            obj) {\n        if (dataExtractionRequest.isHonourLastModfiedFieldValueToFetchDeltaData()) {\n            Object opt = getFieldValueAsObject(obj, dataExtractionRequest.getLastModifiedFieldName());\n            if (opt instanceof Number) {\n                long optValue = Long.parseLong(dataExtractionRequest.getLast","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50099fd8-f1a2-4db2-b00a-cd8ff7d2df25","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":119,"endLine":145,"content":"ectApiConfigs() throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_OBJECT_API_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasObjectApiConfig> caasObjectApiConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasObjectApiConfig>>() {\n            });\n            caasObjectApiConfigDao.dropCollection();\n            caasObjectApiConfigDao.insertAll(caasObjectApiConfigs);\n        }\n        return true;\n    }\n\n    private boolean loadMetadataTransformationConfig() throws IOException {\n        ClassPathResource r = new ClassPathResource(METADATA_TRANSFORMATION_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasMetadataTransformationConfig> caasMetadataTransformationConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasMetadataTransformationConfig>>() {\n            });\n            caasMetadataTransformationConfigDAO.dropCollection();\n            caasMetadataTransformationConfigDAO.insertAll(caasMetadataTransformationConfigs);\n        }\n        return true;\n    }\n\n    private boolean loadCaasMetadataEngineConfigs() throws IOException {\n        redisCacheUtility.clearCache(DuctConstants.METADATA_CONFIG_CACHE_KEY);\n        ClassPathResource r = new ClassPathResource(METADATA_ENGINE_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<MetadataEngineConfig> metadataEngineConfigs = new ObjectMapper().readValue(in, new TypeReference<List<Metadat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4d738aa2-7fda-4709-acc9-34ac6af9035f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":24,"endLine":61,"content":".CryptHandler;\nimport com.google.common.base.Joiner;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.net.URLEncoder;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.bean.IPaasConstants.*;\n\n@Slf4j\n@Order(10000)\n@Service\npublic class IpaasDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String CAAS_IPAAS_EXTRACT_TASK = \"CaasIpaasExtract\";\n    private static final String RESULTS = \"results\";\n\n    @Autowired\n    IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return isIpaas && connectorType != ConnectorType.SFDC &&\n                connectorType != ConnectorType.HUBSPOT &&\n                connectorType != ConnectorType.SNOWFLAKE &&\n                connectorType != ConnectorType.DYNAMICS &&\n                connectorType != ConnectorType.GAINSIGHT_PX &&\n                connectorType != ConnectorType.GAINSIGHT_API &&\n                connectorType != ConnectorType.AHA &&\n                connectorType != ConnectorType.BIGQUERY &&\n                connectorType != ConnectorType.ECOSYSTEM &&\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a37b2019-3da7-469f-828f-318e25b36e64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":238,"endLine":262,"content":"lterOperators().isEmpty());\n            } else {\n                /*fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                meta.put(FILTERABLE, true);\n                meta.put(EXTERNALLY_FILTERABLE, false);*/\n                LOGGER.warn(\"Type not supported, hence skipping {}\",\n                        field.get(VENDOR_NATIVE_TYPE) != null ? field.get(VENDOR_NATIVE_TYPE).asText() : field.get(TYPE).asText());\n                continue;\n            }\n\n            //To skip the field to be part of metadata if given datatype is not supported for fetching data.\n            if (dataTypeMappingsForField != null && !dataTypeMappingsForField.isSupported()) {\n                continue;\n            }\n\n            meta.put(ORIGINAL_DATA_TYPE, field.get(VENDOR_NATIVE_TYPE) != null ? field.get(VENDOR_NATIVE_TYPE).asText() : field.get(TYPE).asText());\n            //override format if we want to override/don't get from source field meta from CE\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n            if (field.get(MASK) != null && StringUtils.isNotEmpty(field.get(MASK).asText()))\n                metaProperties.put(FORMAT, field.get(MASK).asText());\n\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMapp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc3a7d75-b302-44ff-ab5a-a94694f8ee37","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":124,"endLine":150,"content":"nsightAccountService gainsightAccountService : gainsightAccountServices) {\n            GAINSIGHT_ACCOUNT_SERVICE_MAP.put(gainsightAccountService.oauthType(), gainsightAccountService);\n        }\n    }\n\n    @Override\n    public String getState(String accountId, Map<String, Object> properties) {\n        String authToken = RequestContextProvider.getRequestInfo().getAuthToken();\n        if (StringUtils.isBlank(authToken)) {\n            LOGGER.info(\"Token is not present in request info, creatinng one of type {}\",\n                    RequestContextProvider.getRequestInfo().getTokenType());\n            RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n            if (requestInfo.getCanonicalTenantAuthInfo() == null) {\n                requestInfo.setCanonicalTenantAuthInfo(requestInfo.getTenantAuthInfo());\n            }\n            authToken = userSessionDAO.create(requestInfo).getAuthToken();\n        } else {\n            LOGGER.info(\"Token is present in request info of type {}, skipping creation.\",\n                    RequestContextProvider.getRequestInfo().getTokenType());\n        }\n        return getState(accountId, authToken, properties);\n    }\n\n    @Override\n    public String authorizationUrl(AccountType accountType, String hostUrl, String accountId, Map<String, Object> additionalState, String customDomainUrl, SalesforceOrgType sfdcOrgType) {\n        GainsightAccountService gainsightAccountService = GAINSIGHT_ACCOUNT_SERVICE_MAP.get(accountType.getOauthType());\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4d0341ce-3466-4a52-bbe3-5f3d897d5406","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CommonEngineConnectionService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.Logge","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"acc755ad-923f-475d-bbbc-ed61d9083044","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/FeatureToggleUtil.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.CollectionType;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.feature.config.sdk.http.ClientConfig;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDServiceImpl;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationServiceImpl;\nimport com.gainsight.feature.toggle.bean.Credentials;\nimport com.gainsight.feature.toggle.bean.FeatureVariationDetailDTO;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.apache.commons.collections4.map.PassiveExpiringMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class FeatureToggleUtil {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(FeatureToggleUtil.class);\n    private static final String GS_ENV_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n    private static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secre","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d7112dbe-0df8-4bd3-b1e5-3026d9619098","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":429,"endLine":446,"content":".JsonNode resultData = null;\n        AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n        Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n        if (ObjectUtils.isNotEmpty(authDetails.getPostAuthorization())) {\n            HttpRequestBase httpClientForApiCall = authService.getHttpClientForPostAuthorization(metadataEngineConfig, pnpConnectionsInfo, flattenConnectionInfo, null);\n            Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(authDetails.getResponseType()) && authDetails.getResponseType().equals(ResponseType.XML);\n            resultData = metadataEngineService.executeApi(httpClientForApiCall, null, metadataEngineConfig.getRateLimitDetails(),isXmlResponse);\n        }\n        switch (pnpConnectionsInfo.getConnectionType()) {\n            case JIRA:\n                boolean isvalid = false;\n                JSONArray jsonArray = new JSONArray(resultData.toString());\n                for (int i = 0; i < jsonArray.length(); i++) {\n                    JSONObject jsonObject = jsonArray.getJSONObject(i);\n                    if (jsonObject.get(\"url\").equals(((Map) pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\")).get(\"siteUrl\"))) {\n                        ((Map) pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\")).put(\"accountId\", jsonObject.get(\"id\"));\n                        pnpConnectionInfoDao.update(pnpConnectionsInfo);\n                        isvalid = true","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5fb25569-365f-4293-998c-617e977c5b6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BaseValidationConnectorDataSourceService.java","startLine":28,"endLine":51,"content":"ition.getFields().stream().map(gsFieldDefinition -> gsFieldDefinition.getFieldName()).collect(Collectors.toSet());\n        Set<String> notAvailableFields = new HashSet<>();\n        for (String field : ductRequestDTO.getFields()) {\n            if (!fieldSet.contains(field)) {\n                notAvailableFields.add(field);\n            }\n        }\n        if (ObjectUtils.allNotNull(ductRequestDTO.getCriteria())) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                if (!fieldSet.contains(filterField)) {\n                    notAvailableFields.add(filterField);\n                }\n            }\n        }\n \n        if (!notAvailableFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"087a3e0a-4552-4b3b-a95e-7b72f80aad81","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/TaskDetails.java","startLine":1,"endLine":19,"content":"package com.gainsight.duct.beans;\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Getter\n@Setter\n@ToString\n@EqualsAndHashCode()\npublic class TaskDetails {\n    private int recordCount;\n    private String taskName;\n    private String message;\n    private String s3ExportPath;\n    private String taskId;\n    private String taskStatus;\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b309312-2666-4438-94e9-e2fd22e99944","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":46,"endLine":84,"content":"ght.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.producer.QueueProducer;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Maps;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static org.apache.http.HttpStatus.SC_BAD_REQUEST;\n\n@Slf4j\n@Service\npublic class MetadataDriverImpl implements MetadataDriver {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(MetadataDriverImpl.class);\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private final MessageInfo<MetadataGenerationDetails> MESSAGE_INFO;\n  private MetadataEngineService metadataEngineService;\n  private PNPConnectionInfoDao pnpConnectionInfoDao;\n  private MetadataEngineConfigDao metadataEngineConfigDao;\n  private SchemaGeneratorService schemaGeneratorService;\n  private OMD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02bbf5ea-9431-41f4-b309-03d9fa7bd7d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/ConnectionAccountDAOImpl.java","startLine":76,"endLine":101,"content":"(AccountDetail entity) {\n        Map<String, Object> properties = entity.getProperties();\n        if (properties == null) {\n            properties = Maps.newHashMap();\n            entity.setProperties(properties);\n        }\n        properties.put(ACCOUNT_DETAIL_NOTIFICATION_USER_NAME_KEY, getUserName());\n        properties.put(ACCOUNT_DETAIL_NOTIFICATION_USER_EMAIL_KEY, getUserEmail());\n    }\n\n    private String getUserEmail() {\n        UserAuthInfo userAuthInfo = RequestContextProvider.getUserAuthInfo();\n        if (StringUtils.isBlank(userAuthInfo.getUserEmail())) {\n            LOGGER.warn(\"User Email could not be retrieved for userId: {}\", userAuthInfo.getUserId());\n        }\n        return userAuthInfo.getUserEmail();\n    }\n\n    private String getUserName() {\n        UserAuthInfo userAuthInfo = RequestContextProvider.getUserAuthInfo();\n        if (StringUtils.isBlank(userAuthInfo.getDisplayName())) {\n            LOGGER.warn(\"User Display Name could not be retrieved for userId: {}\", userAuthInfo.getUserId());\n        }\n        return userAuthInfo.getDisplayName();\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d667279e-bf59-4f89-b20b-3e25e6e29958","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":159,"endLine":181,"content":"he current change is a breaking change or the JUnits aren't updated.\");\n            assertEquals(CaasValidationCode.INVALID_CONNECTOR_TYPE.getGsEventCode(), gsExternalSystemErrorMapping.getGsErrorCode(), \" Wrong Error code passed in exception when connector type is \" + connectorType);\n            assertEquals(CaasValidationCode.INVALID_CONNECTOR_TYPE.getUserText(), gsExternalSystemErrorMapping.getGsErrorMessage(), \"Wrong error message passed in exception when connector type is \" + connectorType);\n            assertNull(gsExternalSystemErrorMapping.getExceptionStackTrace(), \"Stack trace should be null when connector type is \" + connectorType);\n            assertNull(gsExternalSystemErrorMapping.getJobId(), \"jobId should be null when connector type is \" + connectorType);\n            assertEquals(\"Connector Type is not Valid\", gsExternalSystemErrorMapping.getMessage(), \"Wrong message passed in exception when connector type is \" + connectorType);\n        }\n\n    }\n\n    @Test\n    public void saveMapping_test_validate_mapping_null_request() {\n        Exception e = null;\n        boolean passed = false;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED));\n            ductJobMappingService.synchronousInsert(null);\n        } catch (SystemException ex) {\n            e = ex;\n            passed = true;\n        } catch (Exception exc) {\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b302e553-320e-45bc-ae8f-ac59f0a49383","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":403,"endLine":431,"content":"      if (flattenedCriteria.size() == flattenedRequiredCriteria.size()) {\n        int size = flattenedCriteria.size();\n        switch (size) {\n          case 1:\n            modifiedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n            if (Objects.nonNull(modifiedCriteria.getFieldName())) {\n              modifyCriteriaValueIfApplicable(modifiedCriteria, dateTimeFieldsMap, dateTimeFormat);\n            } else {\n              nullSafeList(modifiedCriteria.getFilters())\n                  .forEach(cri -> modifyCriteriaValueIfApplicable(cri, dateTimeFieldsMap, dateTimeFormat));\n            }\n            break;\n          case 2:\n            modifiedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n            nullSafeList(modifiedCriteria.getFilters())\n                .forEach(cri -> modifyCriteriaValueIfApplicable(cri, dateTimeFieldsMap, dateTimeFormat));\n            break;\n          default:\n            modifiedCriteria = getSingleCriteriaForQueryBody(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap, dateTimeFormat);\n            break;\n        }\n      } else {\n        modifiedCriteria = getSingleCriteriaForQueryBody(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap, dateTimeFormat);\n      }\n      log.info(\"Criteria being used for search request: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n      return modifiedCriteria;\n\n    } catch (Exception ex) {\n      log.error(\"Error while modifying criteria for object searc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9107b48c-3c9d-414e-a749-92ea6f95c95e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":140,"endLine":180,"content":"ctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n        });\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_SERVICENOW_EXTRACT;\n    }\n\n    @Override\n    protected Strin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c15668a-7c49-438f-8b1f-b8031782ae7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":386,"endLine":416,"content":"mErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n    }\n  }\n\n  private void validateMappings(DuctJobMapping ductJobMapping, List<GSFieldDefinition> fieldDefinitions, DuctDataOperation ductDataOperation) throws CaasException {\n    Set<String> readOnlyFields = new HashSet<>();\n    Set<String> fieldsNotPresent = new HashSet<>();\n    boolean isIdentifierPresent = false;\n\n    for (ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n      if (ductColumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n        log.error(DuctErrorConstants.INVALID_MAPPINGS);\n        DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_MAPPINGS, ductJobMapping.getJobId());\n      }\n\n      Optional<GSFieldDefinition> gsFieldDefinitionOptional = fieldDefinitions.stream().filter(fieldDefinition -> fieldDefinition.getFieldName().equals(ductColumnMapping.getFieldName())).findFirst();\n      if (gsFieldDefinitionOptional.isPresent()) {\n        if (gsFieldDefinitionOptional.get().getMeta().isReadOnly()) {\n          readOnlyFields.add(ductColumnMapping.getFieldName());\n        }\n      } else {\n        fieldsNotPresent.add(ductColumnMapping.getFieldName());\n      }\n\n      if (!isIdentifierPresent && ductColumnMapping.getIsKeyField()) {\n        isIdentifierPresent = true;\n      }\n    }\n\n    if (!fieldsNotPresent.isEmpty()) {\n      DuctUtils.throwError(CaasValidationC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89d65a00-0a83-4e10-8a2e-01303c05c8b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringJoiner;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n/**\n * A B2B helper, wrapper around {@link AdvancedHttpHelper} to reduce common tasks of adding headers and constructing urls.\n * dont pass full url, url constructed internally only uri is required. RCP should be set before invoking\n *\n * @author psharma\n * on 26-May-2019 21:36\n */\npublic abstract class DuctMdaCalloutUtils {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(DuctMdaCalloutUtils.class);\n\n  private static final String API_VERSION = \"v1.0\";\n  private static final String GS_APP_CONTEXT = \"api\";\n\n  private static String getGsAppV1BaseUrl() {\n    String callbackUrl = DuctCommonUtils.getEnvDeploymentProperty(\"gs.api.url\", null);\n    retur","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22199aec-6980-43cc-a9b5-f0baf7596711","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":63,"endLine":84,"content":"                                       FieldSaveType saveType) throws CaasException {\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesTenantConfigs =\n                caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), object,\n                RequestContextProvider.getTenantId(), connectionId);\n\n        CaasObjectAttributesTenantConfig caasObjectAttributesTenantConfig = null;\n        if(CollectionUtils.isNotEmpty(caasObjectAttributesTenantConfigs)){\n            //TODO can only be one. Need to handle this at caasObjectAttributesTenantConfigDAO layer gracefully\n            caasObjectAttributesTenantConfig = caasObjectAttributesTenantConfigs.get(0);\n        }else{\n            caasObjectAttributesTenantConfig = new CaasObjectAttributesTenantConfig();\n            caasObjectAttributesTenantConfig.setTenantId(RequestContextProvider.getTenantId());\n            caasObjectAttributesTenantConfig.setObjectName(object);\n            caasObjectAttributesTenantConfig.setConnectionId(connectionId);\n            caasObjectAttributesTenantConfig.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        }\n\n        Map<String, ObjectDefinition> objectDefinitionMap = ductService.getObjectAttributes(object, connectionId);\n        Set<String> fieldsFromMetadataResponse = objectDefinitionMap.get(object).getFields().stream()\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b80ce2a9-2d8a-41af-9272-3984e542b44f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connectordependency/ConnectorDependencyFrameworkServiceImpl.java","startLine":31,"endLine":53,"content":"endency.api.base.url\");\n    private static final String SECRET = \"secret\";\n    private static final String CONTENT_TYPE = \"content-type\";\n    private static final String REQUEST_INFO = \"requestInfo\";\n    private static final String ID = \"id\";\n    private static final String NAME = \"name\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectorDependencyFrameworkServiceImpl.class);\n    public static final String GSNAP_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n\n\n\n    public Object fetchConnectorDependencies(String connectionId, ConnectorType connectorType) {\n        Map<String, List<Map<String, String>>> connectionDependencyList = new HashMap<>();\n        String url = DEPENDENCY_API_BASE_URL + \"/consumers\" + CONNECTOR_CONSUMER_MODULE + connectionId;\n        try {\n            LOGGER.info(\"Fetching connection dependencies for : {} from dependencyMeta\", connectionId);\n            Object responseObj = WebClient.makeRestCall(url, HttpMethod.GET, null, Object.class, AuthenticationType.SECRET_KEY, getHeaders());\n            if (!ObjectUtils.isEmpty(responseObj)) {\n                List<DependencyInfo> dependencyMetas = GainsightUtils.OBJECT_MAPPER.convertValue(responseObj, new TypeReference<List<DependencyInfo>>() {\n                });\n                List<Dependency> consumers = dependencyMetas.stream().map(dependencyInfo -> dependencyInfo.getConsumer()).collect(Collectors.toList());\n                for (Dependency con","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba52b1ea-35c7-4d10-b3a3-903fc84ffab6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":180,"endLine":252,"content":"InstanceToken(SecretData instanceToken) {\n        this.instanceToken = instanceToken;\n    }\n\n    public SecretData getUserToken() {\n        return userToken;\n    }\n\n    public void setUserToken(SecretData userToken) {\n        this.userToken = userToken;\n    }\n\n    public List<FieldInfo> getFields() {\n        return fields;\n    }\n\n    public void setFields(List<FieldInfo> fields) {\n        this.fields = fields;\n    }\n\n    public Map<String, Object> getProperties() {\n        return properties;\n    }\n\n    public void setProperties(Map<String, Object> properties) {\n        this.properties = properties;\n    }\n\n    public ConnectorType getConnectorType() {\n        return connectorType;\n    }\n\n    public void setConnectorType(ConnectorType connectorType) {\n        this.connectorType = connectorType;\n    }\n\n    public String getJobId() {\n        return jobId;\n    }\n\n    public void setJobId(String jobId) {\n        this.jobId = jobId;\n    }\n\n    public String getOrgToken() {\n        return orgToken;\n    }\n\n    public void setOrgToken(String orgToken) {\n        this.orgToken = orgToken;\n    }\n\n    public String getUcId() {\n        return ucId;\n    }\n\n    public void setUcId(String ucId) {\n        this.ucId = ucId;\n    }\n\n    public String getNextPage() {\n        return nextPage;\n    }\n\n    public void setNextPage(String nextPage) {\n        this.nextPage = nextPage;\n    }\n\n    public FilterRule getFilterRule() {\n        return filterRule;\n    }\n\n    public void setFilterRule(FilterRule ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f97020b4-d477-4dd2-b816-7a964ff2cf30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":23,"endLine":60,"content":"namicsGainsightUtils;\nimport com.gainsight.integration.connector.dynamics.util.MSDynamicsObjectUtil;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport exception.SystemException;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.LOOKUP_FIELDS_FLATTENED;\n\n@Order(300)\n@Service\npublic class DynamicsCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicsCaasMetadataServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String LOOKUP_KEYWORD = \"LOOKUP\";\n    private static final String OPTION_SET = \"OptionSet\";\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"564d6bee-f824-428e-887c-1b985cddc408","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":27,"endLine":65,"content":"tory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.*;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.ws.rs.core.Context;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.utils.GainsightPrecondition.assertNotNull;\nimport static org.apache.http.HttpStatus.SC_BAD_REQUEST;\n\n@RestController\n@Slf4j\n@RequestMapping(VersionConstants.V1_0 + \"/duct/connection\")\n@EnableSwagger2\n@Api(value = \"CAAS connection Api's\", description = \"Connection related api's\")\n@ApiResponses(value = {\n        @ApiResponse(code = 200, message = \"Successfully retrieved list\"),\n        @ApiResponse(code = 401, message = \"You are not authorized to view the resource\"),\n        @ApiResponse(code = 404, message = \"The resource you were trying to reach is not found\")\n})\npublic class ConnectionController {\n\n    @Autowired\n    DuctConnectionService ductConnectionService;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    DuctDependencyFrameworkService connectorDependencyFrameworkService;\n\n\n    @ApiOperation(value = \"Create new Connection\", response = PNPConnectionsInfo.class)\n    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71ada68b-1938-415c-8223-cef3b05201c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":341,"endLine":358,"content":"FieldName());\n\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || dataTypeMapping.getExternalDatatype().equals(\"DATE\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        String dateTimeFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"datetime\") || dataTypeMapping.getExternalDatatype().equals(\"DATETIME\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, targetFieldName, internalFieldInfo, fieldNameMetaMap, ignoreMetadataFieldNames, dateFormate, dateTimeFormate);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not null, null the values can be empty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, targetFieldName, value,","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab442768-f559-408e-b722-a2ffa98ce178","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":1,"endLine":49,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.enums;\n\nimport com.gainsight.duct.beans.UCMessageProperties;\nimport com.gainsight.exception.ExceptionType;\nimport exception.ErrorCode;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by vgautam on 20/04/18.\n */\npublic enum UCValidationCode implements ErrorCode {\n\n\n    /**\n     * PNP Connector\n     */\n    PNP_MAPPING_DETAILS_NOT_FOUND(8033),\n    PNP_CONNECTION_NAME_ALREADY_EXISTS(8034),\n    PNP_MAPPING_ALREADY_EXISTS(8035),\n    //PNP_CM_NOT_FOUND(8036),\n    PNP_MIXPANEL_INVALID_API_KEY_SECRET(8040),\n    PNP_START_DATE_SHOULD_BEFORE_END_DATE(8041),\n    PNP_START_DATE_EMPTY(8042),\n    PNP_END_DATE_EMPTY(8043),\n    PNP_MIXPANEL_DATA_FETCH_FAILED(8044),\n    PNP_GA_METADATA_FETCH_FAILED(8046),\n    PNP_GA_ACCOUNTS_FETCH_FAILED(8047),\n    PNP_GA_WEB_PROPERTIES_FETCH_FAILED(8048),\n    PNP_GA_PROFILES_FETCH_FAILED(8049),\n    PNP_GA_PROFILE_VALIDATION_FAILED(8050),\n    PNP_GA_DATA_FETCH_FAILED(8051),\n    PNP_CONNECTOR_PROJECT_INFO_NULL(8052),\n    PNP_CONNECTOR_CONNECTION_INFO_NULL(8053),\n    PNP_CONNECTOR_PROJECT_SETUP_FAIL(8054),\n    PNP_MAPPING_METADAT_INFO_NOT_FOUND(8055),\n    PNP_CONNECTION_NOT_CREATED(8057),\n    PNP_CONNECTIONS_NOT_FOUND(8058),\n    PNP_UNABLE_TO_GET_ENABLED_CONNECTORS(8059),\n    PNP_SCHEDULE_NOT_DEFINED(8060),\n    PNP_CONNECTOR_PROJECT_INFO_ALREADY_EXIST(8061),\n    PNP_CONNECTOR_PROJECT_INFO_DOES_NOT_EXIST(8062),\n    PNP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"565a4b67-bb65-4eea-8c77-386a1f41b639","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/SuccessPlanLoadServiceImpl.java","startLine":58,"endLine":80,"content":"pEndPoint = spEndPoint + \"/v2/successPlan\";\n\n            HttpResponseWrapper<ResponseObj> response = null;\n            if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                response = AdvancedHttpHelper.post(spEndPoint, headers, JsonUtil.toJsonString(requestDto), ResponseObj.class);\n            } else if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                response = AdvancedHttpHelper.put(spEndPoint, headers, JsonUtil.toJsonString(requestDto), ResponseObj.class);\n            }\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to Success Plans service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce) {\n            throw ce;\n        } catch (Exception e) {\n            log.error(\"Exception occurred while writing data to success plan\", e);\n            throw new CaasException(\"Failed while writing to Success Plans\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be1e4582-bfc5-4bad-9c32-5c678cc44a62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountGlobalMapping.java","startLine":40,"endLine":95,"content":"er;\n  /**\n   * Represents user identifier defined in the integration UI and it's lookup details\n   */\n  private PrimaryIdentifierDetail userIdentifier;\n  /**\n   * Represents event identifier defined in the integration UI\n   */\n  private PrimaryIdentifierDetail eventIdentifier;\n  /**\n   * Not in use currently\n   */\n  private PrimaryIdentifierDetail instanceIdentifier;\n  /**\n   * Represents the dateTime identifiers in the source data defined in integration UI.\n   */\n  private PrimaryIdentifierDetail timestampIdentifier;\n  /**\n   * Represents information required for flipping.\n   */\n  private List<AccountEventMeasureMapping> eventMeasureMappings;\n\n  public List<AccountFieldMapping> getSystemDefined() {\n    return systemDefined;\n  }\n\n  public void setSystemDefined(List<AccountFieldMapping> systemDefined) {\n    this.systemDefined = systemDefined;\n  }\n\n  public List<AccountFieldMapping> getGsDefined() {\n    return gsDefined;\n  }\n\n  public void setGsDefined(List<AccountFieldMapping> gsDefined) {\n    this.gsDefined = gsDefined;\n  }\n\n  public List<AccountFieldMapping> getCustom() {\n    return custom;\n  }\n\n  public void setCustom(List<AccountFieldMapping> custom) {\n    this.custom = custom;\n  }\n\n  public PrimaryIdentifierDetail getAccountIdentifier() {\n    return accountIdentifier;\n  }\n\n  public void setAccountIdentifier(PrimaryIdentifierDetail accountIdentifier) {\n    this.accountIdentifier = accountIdentifier;\n  }\n\n  public PrimaryIdentifierDetail getUserIdentifier() {\n    return use","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37df4c28-663c-4503-83d8-383954b9bf2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":119,"endLine":140,"content":"TenantConfig.setTenantId(RequestContextProvider.getTenantId());\n            caasObjectAttributesTenantConfig.setObjectName(object);\n            caasObjectAttributesTenantConfig.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        }\n\n        Map<String, ObjectDefinition> objectDefinitionMap = ductService.getObjectAttributes(object, pnpConnectionsInfo.getConnectionId());\n        Set<String> fieldsFromMetadataResponse = objectDefinitionMap.get(object).getFields().stream()\n                .map(i-> i.getFieldName()).collect(Collectors.toSet());\n\n        Map<String, EnhancedGSFieldDefinition> fieldsFromTenantDefaultAttribute= caasObjectAttributesTenantConfig.getDefaultObjectAttributes().stream()\n                .collect(Collectors.toMap(EnhancedGSFieldDefinition::getFieldName, Function.identity(), (existing, replacement) -> existing));\n\n        MetadataCache metadataCache = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, object);\n        Set<String> fieldsFromMetadataCacheResponse = new HashSet<>();\n        if(metadataCache != null && metadataCache.getMetadata().get(object) != null\n                && CollectionUtils.isNotEmpty(metadataCache.getMetadata().get(object).getFields())){\n            fieldsFromMetadataCacheResponse.addAll(metadataCache.getMetadata().get(object).getFields().stream()\n                    .map(i-> i.getFieldName()).collect(Collectors.toSet()));\n        }\n\n        boolean isMetadataCacheUpdate = false;\n        boolean isTenant","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3c7b6b4-ed86-4fdb-9d5f-57a99707dd76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":23,"endLine":70,"content":"e;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static utils.Constants.SPACE;\n\n@Slf4j\n@Order(800)\n@Service\npublic class SalesforceDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    @Autowired\n    private SalesforceFetchService salesforceFetchService;\n\n    private static final String TOTAL_SIZE = \"totalSize\";\n    private static final String RECORDS_KEYWORD = \"records\";\n    private static final String CAAS_SALESFORECE_EXTRACT_TASK = \"CaasSalesforceExtract\";\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.SFDC;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_SALESFORECE_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2e2ac3e8-dd08-466e-9d53-f0ce3bad92c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":27,"endLine":56,"content":"gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.time.*;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d0080d2-0802-45a0-a4df-eb997dd9f654","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":700,"endLine":732,"content":");\n        SimpleDateFormat defaultDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date date = defaultDateFormat.parse(DuctUtils.valueOf(value));\n        return date.getTime() / 1000;\n      } catch (Exception ex) {\n        log.error(\"Error while converting datetime value {} to epoch with fallback date format\", value);\n        log.debug(\"Error while converting datetime value {} to epoch with fallback date format. Exception: \", value, ex);\n      }\n      try {\n        // if we are receiving the value in epoch itself, then return the same value\n        if (value instanceof Long || value instanceof Integer || value instanceof String) {\n          return Long.parseLong(DuctUtils.valueOf(value));\n        }\n      } catch (Exception ex) {\n        log.error(\"Error occurred \", ex);\n        return 0; // worst case fallback of epoch as 0;\n      }\n      return 0; // worst case fallback of epoch as 0;\n    }\n  }\n\n  private Map<String, GSFieldDefinition> getDateTimeFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    Map<String, GSFieldDefinition> dateTimeFieldsMap = new HashMap<>();\n    nullSafeMap(fieldNameMetaMap)\n        .entrySet()\n        .stream()\n        .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(DataType.DATETIME.getValue()))\n        .forEach(kv -> dateTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n    return dateTimeFieldsMap;\n  }\n\n\n  private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf8dd5de-3492-41b1-8517-3a8ae41da4aa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":58,"endLine":79,"content":"  }\n\n  @SneakyThrows\n  @Override\n  public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n    try {\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n      pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n      pnpConnectionsInfo.setIpaasConnection(false);\n      pnpConnectionsInfo.setAuthorizationType(AuthorizationType.BASIC_AUTH);\n      validateConnectionProperties(pnpConnectionsInfo);\n      populateSAPConnectionDetails(pnpConnectionsInfo);\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n      GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromProperties(pnpConnectionsInfo, false, pnpConnectionsInfo.getAuthorizationType());\n\n      Object password = getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionsInfo, PASSWORD);\n      byte[] encryptedPassword = CryptHandler.getInstance().encrypt(DuctUtils.valueOf(password));\n      SAPDatasphereConnectionDetail sapDatasphereConnectionDetail = (SAPDatasphereConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n      sapDatasphereConnectionDetail.setPwd(encryptedPassword);\n      ((Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).put(PASSWORD, encryptedPassword);\n      pnpConnectionsInfo.setIpaasConnection(false);\n      gainsightSAPDatasphereCh","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd2c2030-7356-4914-a646-01ec021aaa70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":189,"endLine":206,"content":"sourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEmpty(apiConfigAttributes.getReplaceByIdRegexInPath()))\n                apiConfigAttributes.setPath(apiConfigAttributes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, null);\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c1c028f3-73f3-4307-8dd8-162c224c13bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.enums.Operators;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\n\n@Slf4j\npublic class SoqlQueryBuilder {\n\n    private static final Pattern SFDC_SPECIAL_CHARACTER_PATTERN = Pattern.compile(\"([\\'\\\"])\");\n    private static final String BACKSLASH = \"\\\\\\\\\";\n    private static final String SINGLE_QUOTE = \"'\";\n    private static final String PERCENT_SYMBOL = \"%\";\n    public static final String UNDERSCORE = \"_\";\n    private static final List<DataType> NON_QUOTE_DATA_TYPES = new ArrayList<>(Arrays.asList(DataType.NUMBER, DataType.BOOLEAN, DataType.DATETIME, DataType.DATE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd73ca67-e1a5-4512-b2e8-35b5f48c828b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":170,"endLine":189,"content":" throw caasException;\n        }\n    }\n\n    private void handleError(DuctJobMapping ductJobMapping) {\n        ConnectorsDataHighwayResponseHandler<ResponseObj> responseErrorHandler = connectorsDataHighwayInteractionService.getExecutionLogs(ductJobMapping.getExternalDHJobId());\n        ResponseObj responseObjTask = responseErrorHandler.getResponseBody();\n        Map<String, Object> errorResponse = MAPPER.convertValue(responseObjTask.getData(), Map.class);\n        List<Map<String, Object>> taskDetails = (List<Map<String, Object>>) errorResponse.get(\"taskDetails\");\n        for (Map<String, Object> map : taskDetails) {\n            if (map.get(\"taskStatus\").toString().equalsIgnoreCase(\"FAILED\")) {\n                String errorMessage = map.get(\"message\").toString();\n                GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping();\n                gsExternalSystemErrorMapping.setJobId(ductJobMapping.getJobId());\n                gsExternalSystemErrorMapping.setGsErrorCode(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FREE_FORM.getGsEventCode());\n                gsExternalSystemErrorMapping.setGsErrorMessage(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FREE_FORM.getUserText());\n                gsExternalSystemErrorMapping.setExternalSystemErrorMessage(errorMessage);\n                gsExternalSystemErrorMapping.setRequestPayload(MAPPER.convertValue(ductJobMapping, Map.class));\n                log.info(\"updating the error table\");\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90e76b6e-2477-4684-ade8-90e79d9ac50d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":74,"endLine":118,"content":"tring MORE_RECORDS_KEYWORD = \"more_records\";\n\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.ZOHOV2.equals(connectorType) && !isIpaas;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_ZOHO_V2_EXTRACT;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zohov2.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zohov2.extract.version\", \"v1\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.zohov2.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a89490db-3594-4acf-a5d7-7e3f23215999","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/PeopleLoadServiceImpl.java","startLine":39,"endLine":64,"content":"ean canHandle(String resource) {\n        return PERSON_ALLOWED_OBJECTS.contains(resource.toLowerCase());\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException{\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating Payload for Person object\");\n\n            Map<String, Object> inputPayload = new HashMap<>(ductRequestDTO.getRecords().get(0));\n            inputPayload.put(\"lookups\", ductRequestDTO.getLookups());\n            log.info(\"Payload for job {} is {}\", ductJobMapping.getJobId(), inputPayload);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            //headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String personEndPoint = DeploymentProperties.getDeploymentProperties().getValue(\"people.base.url\");\n            String url = personEndPoint + \"/peoplemgmt/v1.0/people\";\n            //check response\n            HttpResponseWrapper<ResponseObj> response = AdvancedHttpHelper.put(url, headers, JsonUtil.toJsonString(inputPayload), ResponseObj.class);\n            log.info(\"Response ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"28ab8a89-e67d-4770-99a2-647e30b93ea1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDaoUtils.java","startLine":99,"endLine":129,"content":" getSelectQueryWithPageable(String query, String tableName, Pageable pageable, Set<String> allowedSortinColumns) {\n    StringJoiner orderByClause = new StringJoiner(\",\");\n    String orderByClauseResult = \"\";\n    Sort sort = pageable.getSort();\n    if (sort != null) {\n      for (Sort.Order order : sort) {\n        String sortingColumnName = order.getProperty();\n        String message = String.format(\"%s is not allowed for sorting\", sortingColumnName);\n        GainsightPrecondition.assertTrue(allowedSortinColumns.contains(sortingColumnName),\n            CoreErrorCode.INVALID_REQUEST, message, message,400);\n        String ascOrDesc = order.getDirection().name();\n        orderByClause.add(sortingColumnName + \" \" + ascOrDesc);\n      }\n      orderByClauseResult = ORDER_BY + orderByClause.toString();\n    }\n\n    String queryWithPageable = String.format(query, tableName) + orderByClauseResult + LIMIT + pageable.getPageSize() + OFFSET + pageable.getOffset();\n    log.debug(\"Select query with pageable criteria generated. table : {}, query : {}\", tableName, queryWithPageable);\n    return queryWithPageable;\n  }\n\n  protected static <T extends BaseGSEntity> T setBaseFields(ResultSet r, T entity) throws SQLException {\n    entity.setGSidAsString(r.getString(GSID_COLUMN));\n    entity.setCreatedAt(r.getTimestamp(CREATED_DATE_COLUMN));\n    entity.setModifiedAt(r.getTimestamp(MODIFIED_DATE_COLUMN));\n    entity.setDeleted(r.getBoolean(DELETED_COLUMN));\n    return entity;\n  }\n\n\n  private DuctDaoUtils","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dcbfd339-0597-4347-9be8-44338fa98f7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":451,"endLine":481,"content":".valueOf(epochObject1));\n          Long epoch2 = Long.parseLong(DuctUtils.valueOf(epochObject2));\n          return Double.compare(epoch1, epoch2);\n        }).orElse(null);\n\n    if (Objects.isNull(requiredSingleCriteria)) {\n      return getDefaultFallbackCriteria();\n    } else {\n      Criteria criteria = getDefaultFallbackCriteria();\n      criteria.setFilters(Lists.newArrayList(requiredSingleCriteria));\n      return criteria;\n    }\n\n  }\n\n  private void modifyCriteriaValueIfApplicable(Criteria criteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, String dateTimeFormat) {\n    if (dateTimeFieldsMap.containsKey(criteria.getFieldName())) {\n      Object dateTimeStr = ((List<Object>) criteria.getValues()).get(0);\n      Object epoch = convertToEpoch(dateTimeStr, dateTimeFormat);\n      criteria.setValues(Lists.newArrayList(epoch));\n      // since intercom supports only GT or LT operators and not GTE or LTE\n      if (FilterOperator.GTE.equals(criteria.getOperatorType())) {\n        criteria.setOperatorType(FilterOperator.GT);\n      }\n      if (FilterOperator.LTE.equals(criteria.getOperatorType())) {\n        criteria.setOperatorType(FilterOperator.LT);\n      }\n\n      // Reference: https://developers.intercom.com/docs/references/rest-api/api.intercom.io/Contacts/SearchContacts/#section/Searching-for-Timestamp-Fields\n      // Intercom by default will convert LT from anypoint of day to LT start of the day\n      // so set it to start of next day, so all current day records are returned\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ddef1cf3-640e-4717-a108-2800bd68f3ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":59,"endLine":82,"content":"         Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                if (!fieldSet.contains(filterField)) {\n                    notAvailableFields.add(filterField);\n                }\n            }\n        }\n        if (CollectionUtils.isNotEmpty(notAvailableFields)) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n    }\n\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5073ea97-6c6f-486b-a929-9a1240ca4813","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/FeatureToggleUtil.java","startLine":45,"endLine":66,"content":"aluateMultiVariateFeature(String featureName, String tenantId) {\n        FeatureVariationDetailDTO featureVariationDetailDTO = null;\n        try {\n            FeatureConfigEvaluationService service = (new FeatureConfigEvaluationServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n            featureVariationDetailDTO = service.evaluate(featureName, tenantId);\n            ObjectMapper objectMapper = new ObjectMapper();\n            CollectionType javaType = objectMapper.getTypeFactory().constructCollectionType(Collection.class, String.class);\n            return objectMapper.readValue(objectMapper.writeValueAsString(featureVariationDetailDTO.getValue()), javaType);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}\", ex.getMessage(), ex);\n            LOGGER.error(\"Unable to serialize the feature configuration. Actual value = {}. Ignoring exception and returning empty list\", null == featureVariationDetailDTO ? null : featureVariationDetailDTO.getValue(), ex);\n        }\n        return Collections.emptyList();\n    }\n\n    public static <T> T evaluateFeature(String name, String tenantId, T defaultValue) {\n        try {\n            FeatureConfigEvaluationService service = (new FeatureConfigEvaluationServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n            FeatureVariationDetailDTO featureVariationDetailDTO = service.evaluate(name, tenantId);\n            return (T) featureVariationDetailDTO.getValue();\n        } catch (Exception ex) {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4cb03085-fbf9-45b7-a1d7-ee38ddf802f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DuctValidationServiceImpl.java","startLine":55,"endLine":62,"content":"      validationConnectorDataSourceService.validate(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        }catch (CaasException ex){\n            gsExternalSystemErrorMappingDao.insert(ex.getGsExternalSystemErrorMapping());\n            throw ex;\n        }\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bf3e46c-8560-4061-b5bb-60cf3ec37b49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GainsightPXFieldDescription.java","startLine":1,"endLine":76,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightPXFieldDescription implements Serializable {\n\n    private static final long serialVersionUID = -1L;\n\n    private String objectName;\n\n    private String name;\n\n    private String apiName;\n\n    private String internalName;\n\n    private String description;\n\n    private String type;\n\n    private String state;\n\n    private String origin;\n\n    private String defaultValue;\n\n    private String canonicalName;\n\n    private List<String> referenceTo;\n\n    public String getObjectName() {\n        return objectName;\n    }\n\n    public void setObjectName(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getApiName() {\n        return apiName;\n    }\n\n    public void setApiName(String apiName) {\n        this.apiName = apiName;\n    }\n\n    public String getInternalName() {\n        return internalName;\n    }\n\n    public void setInternalName(String internalName) {\n        this.internalName = internalName;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = descrip","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ff44965e-5f29-4031-b795-d92e3f58491c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":157,"endLine":191,"content":"nowflakeChannelService.executeQuery(query, fieldInfos);\n            String nextPageToken = limit > data.size() ? null : String.valueOf(offset + limit - 1);\n            if (limit == data.size())\n                data.remove(data.size() - 1);\n            Map res = new HashMap();\n            res.put(RESULTS, data);\n            return DuctResponse.builder()\n                    .tenantId(RequestContextProvider.getTenantId())\n                    .jobId(ductJobMapping.getJobId())\n                    .externalSystemResponse(res)\n                    .nextPageToken(nextPageToken)\n                    .totalNumberOfRecords(data.size())\n                    .build();\n        } catch (SQLException e) {\n            log.error(\"SQLException while fetching data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        } catch (Exception e) {\n            log.error(\"Exception while fetch data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n        }\n    }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a151d93-138f-4e82-9def-8dc57bcd54c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":152,"endLine":175,"content":"   if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails.isQueryParam())\n                    queryparam.put(paginationDetails.getRequestKey(), ductJobMapping.getNextPageToken());\n            }\n            queryparam.put(PER_PAGE, String.valueOf(maxPageSize));\n            queryparam.put(CRITERIA, DEFAULT_CRITERIA);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryparam);\n            jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(), false);\n\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n\n            if (ObjectUtils.isNotEmpty(objectDefinition)) {\n                transformJsonObjectTypeFieldsFromResponse(objectDefinition, data);\n            }\n\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connector","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65148faa-ef58-43c9-a802-fa6a39f536bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorServiceImpl.java","startLine":69,"endLine":98,"content":"NT_TOPIC_NAME, MSTEAMS_WEBHOOK_EVENT_NAME, WEBHOOK_EVENT_VERSION, eventPayload);\n                    } else {\n                        log.error(\"Error initializing context : {}\", tenantId);\n                    }\n                });\n            } else {\n                log.error(\"Invalid Teams Event Payload : {}\", eventPayload);\n            }\n            return body;\n        } catch (Exception ex) {\n            LOGGER.error(\"Error occured while processing webhooks for {}\", ConnectorType.MSTEAMS.getValue());\n            throw ex;\n        }\n    }\n\n    private boolean isValidTeamsEvent(Map<String, Object> webhookPayload) throws Exception {\n        // TODO : Validate the incoming webhook payload\n        return false;\n    }\n\n    private List<String> fetchTenantDetails(String subscriptionId) {\n        List<PNPConnectionsInfo> pnpConnectionsInfos = GainsightCollectionUtils.nullSafeList(pnpConnectionInfoDao.findAllConnectionForConnectionType(ConnectorType.ZOOM));\n\n        List<String> tenantIds = pnpConnectionsInfos.stream().filter(pnpConnectionsInfo ->\n                        null != pnpConnectionsInfo.getProperties().get(MSTEAMS_SUBSCRIPTION_ID) ?\n                                pnpConnectionsInfo.getProperties().get(MSTEAMS_SUBSCRIPTION_ID).toString().equals(subscriptionId) : false)\n                .map(PNPConnectionsInfo::getTenantId).collect(Collectors.toList());\n        return tenantIds;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"826f43fd-e092-492e-92f3-11415b7141db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/ExternalDatabaseWBMessageProcessor.java","startLine":29,"endLine":63,"content":"n;\nimport java.util.Collections;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class ExternalDatabaseWBMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private DuctService ductService;\n\n    @Autowired\n    public ExternalDatabaseWBMessageProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                log.info(\"Received packet : {} for tenant id : {} \", messageRequestVO.getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7f04658-9efb-43f2-ace8-22e52f7b8156","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":263,"endLine":295,"content":"ring.format(DuctConstants.MS_DYNAMICS_ACCESS_KEY_CACHE_FORMAT, RequestContextProvider.getTenantId(), connectionId);\n    }\n\n    public static String getObjectsSuperclassCacheKey(String connectionId) {\n        return String.format(DuctConstants.OBJECTS_SUPERCLASS_CACHE_KEY_FORMAT, RequestContextProvider.getTenantId(), connectionId);\n    }\n\n    public static Object getObjectTypeIdForHubspotFromCacheIfPresent(RedisCacheUtility redisCacheUtility, String objectName, String connectionId) {\n        Object value = redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(connectionId));\n        Map cacheValue = null;\n        if (value != null) {\n            cacheValue = (Map) value;\n            if (cacheValue.containsKey(objectName))\n                return cacheValue.get(objectName);\n        }\n        return null;\n    }\n\n    public static List<String> getFieldListFromCriteria(Criteria criteria) {\n        List<String> fields = Lists.newArrayList();\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            fields.add(criteria.getFieldName());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            criteria.getFilters().forEach(childRule -> {\n                childRules.addAll(getFieldListFromCriteria(childRule));\n            });\n            fields.addAll(childRules);\n        }\n        return fields;\n    }\n\n    public static boolean isDecimalType(String d","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b4dcf51-247e-4ca5-8674-1f3db8375a40","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":543,"endLine":563,"content":"nParser = new JsonParser();\n                JsonObject jsonObject = (JsonObject) jsonParser.parse(gson.toJson(dataRow));\n                dataRow.clear();\n                try {\n                    dataRow.putAll(DuctCollectionUtils.convertJSONToRecordValue(jsonObject, ductJobMapping.getFields(), objectDefinition));\n                } catch (CaasException e) {\n                    log.error(\"Some exception occurred while resolving field value due to : {}\", e.getMessage(), e);\n                }\n            }\n        }\n        return queryAPIResponseBean;\n    }\n\n    private QueryAPIResponseBean getSynchronizedQueryApiResponse(DuctJobMapping ductJobMapping, PNPConnectionsInfo\n            pnpConnectionsInfo, ObjectDefinition objectDefinition, String recordId) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        int pageSize = caasConnectorConfig.getAdditionalProperties().containsKey(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE) ?\n                Integer.parseInt(caasConnectorConfig.getAdditionalProperties().get(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE).toString())\n                : 100;\n        ConnectorDataSourceService connectorDataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n        DuctResponse ductResponse = StringUtils.isEmpty(recor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd3027bc-401e-43d3-bcc2-8432834aa45a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackDynamicsMessageProcessor.java","startLine":29,"endLine":64,"content":"n;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class WriteBackDynamicsMessageProcessor extends AbstractDbQueueMessageProcessor {\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private DuctService ductService;\n\n    @Autowired\n    public WriteBackDynamicsMessageProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                log.info(\"Received packet : {} for tenant id : {} \", messageRequestVO.getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81954a1b-f950-43bf-bff8-e4099331d2c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":164,"endLine":182,"content":"ODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEmpty(apiConfigAttributes.getReplaceByIdRegexInPath()))\n                apiConfigAttributes.setPath(apiConfigAttributes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"757c917f-42b4-46ee-a797-fe4d3e4415e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/IpaasBulkFileDownloadMessageProcessor.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.service.IpaasBulkFileDownloadService;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport com.gainsight.duct.utils.TenantUtility;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n@Slf4j\n@Service\npublic class IpaasBulkFileDownloadMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private IpaasBulkFileDownload","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bea1ef75-f145-4015-8b52-a9261d7ade1b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":329,"endLine":359,"content":"  .entrySet()\n                .stream()\n                .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n                .forEach(kv -> externalFilterableFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return externalFilterableFieldsMap;\n    }\n\n    private List<Criteria> flattenCriteria(Criteria criteria) {\n        List<Criteria> flattenedCriteria = new ArrayList<>();\n        // Recursively flatten the criteria\n        flatten(criteria, flattenedCriteria);\n        return flattenedCriteria;\n    }\n\n    private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n        if (criteria.getFilters() == null || criteria.getFilters().isEmpty()) {\n            // Base case: No nested filters, add current criteria to flattened list\n            flattenedCriteria.add(criteria);\n        } else {\n            // Recursively flatten nested filters\n            for (Criteria nestedCriteria : criteria.getFilters()) {\n                flatten(nestedCriteria, flattenedCriteria);\n            }\n        }\n    }\n\n    private Criteria getSingleCriteriaForQueryBody(List<Criteria> flattenedCriteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap, String resourceName) {\n        Criteria requiredSingleCriteria;\n        nullSafeList(flattenedCriteria)\n                .stream()\n                .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap));\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd1ce9cd-97ed-4842-ba88-6a392210e304","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/OMDConverterBaseService.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\npublic interface OMDConverterBaseService {\n  boolean canHandle(ConnectorType connectorType);\n\n  void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException;\n\n  default Map<String, Object> addObjectDetailsToOMDFormat(String objectName, PNPConnectionsInfo pnpConnectionsInfo) {\n    Map<String, Object> objectDefinition = new HashMap<>();\n    objectDefinition.put(OBJECT_ID, objectName);\n    objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n    objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n    objectDefinition.put(LABEL, objectName);\n    objectDefinition.put(FIELDS, new ArrayList());\n    return objectDefinition;\n  }\n\n  /**\n   * @param objectName          {@link String}\n   * @param objectDefinitionMap {@link Map}\n   * @param fields","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8283256-9a69-4c8f-8c9f-2e4b1f2802bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":202,"endLine":215,"content":"pe\", MediaType.APPLICATION_JSON);\n    headers.put(\"tenantId\", RequestContextProvider.getTenantId());\n    headers.put(Constants.X_REQUEST_ID, RequestContextProvider.getRequestId());\n    String gsEnv = DuctCommonUtils.getEnv();\n    if (gsEnv != null) {\n      headers.put(\"x-gs-environment\", gsEnv);\n    }\n    if (additionalHeader != null && !additionalHeader.isEmpty()) {\n      headers.putAll(additionalHeader);\n    }\n    return headers;\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fca347b1-d193-452d-87c8-9047ce0fbcb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":180,"endLine":199,"content":"ginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, null);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(), false);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            List dataList = new ArrayList();\n            Map<String, Object> jsonMap = new ObjectMapper().convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n            });\n            dataList.add(jsonMap);\n            externalSystemResponse.put(DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c93d5ec1-5518-4330-9052-bb6f90d02383","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":82,"endLine":106,"content":"umberOfRecordsSync = 0;\n        boolean shouldContinue = true;\n        int maxNoOfRetries = dataExtractionRequest.getMaxNoOfRetries();\n        int retryCounter = 0;\n        String nextPage = StringUtils.EMPTY;\n        HttpResponse httpResponse = new HttpResponse();\n        boolean isFirstRequest = true;\n        LOGGER.info(\"CE connection/read timeout in milli secs {}\", timeoutInMilliSecs);\n\n        while (shouldContinue) {\n            try (FileWriter fr = new FileWriter(file, true)) {\n                Map<String, Object> queryParams = createQueryParams(dataExtractionRequest, nextPage);\n                httpResponse = httpUrlConnectionUtils.get(apiUrl, IpaasDataExtractionHelperService.getElementHeaders(dataExtractionRequest.getUserToken().getString(), dataExtractionRequest.getInstanceToken().getString(), dataExtractionRequest.getOrgToken()),\n                        timeoutInMilliSecs, false, queryParams);\n                if (isFirstRequest) {\n                    LOGGER.info(\"RequestUrl {}\", apiUrl);\n                    LOGGER.info(\"Request queryParams {}\", queryParams);\n                    isFirstRequest = false;\n                }\n                if (httpResponse.getResponseCode() == 200) {\n                    retryCounter = 0;\n                    JSONArray arr = new JSONArray(httpResponse.getRespMsg());\n                    LOGGER.info(\"Headers recieved are {}\", httpResponse.getResponseHeaders());\n                    String elementsNextPageToken;\n                    if (httpResp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bc1348a-845a-4530-aff8-aab89176f599","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDao.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.dao;\n\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @Author Manas Ranjan Sur\n * @Date 31st March 2022\n * @Description Dao layer for Snowflake\n */\npublic interface SnowflakeDao {\n\n    List<Map<String, Object>> listAllObjects();\n\n    List<Map<String, Object>> listAllFields(String objectName) throws CaasException;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c91b3e03-052c-4b2b-b910-923fbae901b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":184,"endLine":211,"content":" + ((PNPConnectionsInfo) unifiedConnectorRequest.getRequestObject()).getConnectionName());\n                auditDetails.setAdditionalInfo(\"Connection Deleted\");\n                break;\n            case JOB:\n                auditRecord.setEventName(UCConstants.DELETE_JOB + ((DuctJobMapping) unifiedConnectorRequest.getRequestObject()).getJobName());\n                auditDetails.setAttributeType(AttributeAuditType.JOB);\n                auditDetails.setAdditionalInfo(\"Job Deleted\");\n                break;\n        }\n        auditDetailsList.add(auditDetails);\n        auditRecord.setEventType(AuditOperationType.DELETE);\n        return auditRecord;\n    }\n\n    @NotNull\n    private static AuditRecord getBasicAuditRecordObject(AuditEntityType auditEntityType, UnifiedConnectorRequest unifiedConnectorRequest, EventStatusEnum eventStatusEnum) {\n        AuditRecord auditRecord = new AuditRecord();\n        auditRecord.setSystemTimestamp(new DateTime(DateTimeZone.UTC).toString(UTC_DATETIME_FORMAT));\n        auditRecord.setEventStatus(eventStatusEnum);\n        auditRecord.setUserId(RequestContextProvider.getUserId());\n        auditRecord.setUserName(RequestContextProvider.getUserName());\n        auditRecord.setTenantId(RequestContextProvider.getTenantId());\n\n        auditRecord.setGeneratedBy(\"SFDC_USER\"); // TODO Needs discussion on this\n        auditRecord.setRequestSource(\"MDA\"); // TODO Needs discussion on this\n\n        List<String> systemTags = Lists.newArrayList();\n        systemTags.add","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11f51653-1af4-4f77-a527-fb0729a6af7b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":888,"endLine":900,"content":"Input pnpconnectionInputFromUI, List<BeanPropertyTracker> updatedPropertyList) throws Exception {\n        PNPConnectionsInfo pnpConnectionInfoFromUI = pnpconnectionInputFromUI.getPnpConnectionsInfo();\n        PNPConnectionsInfo pnpConnectionsInfoFromDB = pnpConnectionInfoDao.findByConnectionId(pnpConnectionInfoFromUI.getConnectionId());\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionInfoFromUI.getConnectionType());\n        assertNotNull(pnpConnectionsInfoFromDB, CaasValidationCode.CONNECTOR_CONNECTION_INFO_NULL, CaasValidationCode.CONNECTION_INFO_NOT_EXIST.getUserText());\n        boolean isConnectionNameChanged = !pnpConnectionsInfoFromDB.getConnectionName().equals(pnpConnectionInfoFromUI.getConnectionName());\n        assertTrue(GainsightPrecondition.scanAndNotBlank(pnpConnectionInfoFromUI.getConnectionName(), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_CONNECTION_NAME.getUserText());\n//    assertTrue(!pnpConnectionsInfoFromDB.getConnectionStatus().equals(ConnectionStatus.REVOKED), CaasValidationCode.REVOKED_CONNECTION, HttpStatus.SC_BAD_REQUEST);\n        validateUniqueness(pnpConnectionInfoFromUI, true);\n        if (!pnpconnectionInputFromUI.getProperties().isEmpty()) {\n            switch (pnpConnectionInfoFromUI.getConnectionType()) {\n                case MIXPANEL:\n                    pnpConnectionsInfoFromDB.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c9b3df1-9053-4ee6-bdc0-eb5e27bec478","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":441,"endLine":457,"content":"attenConnectionInfo.put(\"callBackUrl\", getCallbackAuthUrl(caasConnectorConfig, pnpConnectionsInfo));\n        if (state != null)\n            flattenConnectionInfo.put(\"state\", state);\n        return flattenConnectionInfo;\n    }\n\n    private static String getCallbackAuthUrl(CaasConnectorConfig caasConnectorConfig, PNPConnectionsInfo pnpConnectionsInfo) {\n        String callbackUrlWithFormatSpecifier = caasConnectorConfig.getProperties().containsKey(\"excludeVersionFromAuthorization\") && ((Boolean) (caasConnectorConfig.getProperties().get(\"excludeVersionFromAuthorization\"))) ?\n                \"/api/accounts/oauth2callback%s\" : CALLBACK_AUTH_URL;\n        return caasConnectorConfig.getProperties().containsKey(\"isAccountTypeRequiredForAuthorization\") && !((Boolean) (caasConnectorConfig.getProperties().get(\"isAccountTypeRequiredForAuthorization\")))\n                ? String.format(DeploymentProperties.getDeploymentProperties().getValue(Constants.CALL_BACK_BASE_URL) + callbackUrlWithFormatSpecifier, org.apache.commons.lang.StringUtils.EMPTY) : String.format(DeploymentProperties.getDeploymentProperties().getValue(Constants.CALL_BACK_BASE_URL) + callbackUrlWithFormatSpecifier, \"?accountType=\" + AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n    }\n\n    public static Map<String, Object> removeCEPropertiesFromIpaasPropertiesIfPresent(PNPConnectionsInfo pnpConnectionsInfo) {\n        try {\n            DuctConnectorCalloutUtil.deleteCEInstance(pnpConnectionsInfo);\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e9ee3fcc-8599-4e17-9373-2efb4db3dcf2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":142,"endLine":161,"content":"hubspotResponse.get(CATEGORY) != null && hubspotResponse.get(CATEGORY).asText().equals(MISSING_SCOPES)) {\n                    LOGGER.info(\"Custom Objects fetch failed with below message : {}\", hubspotResponse.toString());\n                    response.setResult(new ArrayList<>());\n                    return response;\n                } else\n                    throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getStatusLine().getStatusCode()), httpResponse.getStatusLine().getReasonPhrase()));\n            } else if (httpResponse.getStatusLine().getStatusCode() != 200) {\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getStatusLine().getStatusCode()), httpResponse.getStatusLine().getReasonPhrase()));\n            }\n            JsonNode jsonNode = new ObjectMapper().readTree(httpResponse.getEntity().getContent());\n            gainsightHubspotSchemaBean = MAPPER.convertValue(jsonNode.get(\"results\"), new TypeReference<List<GainsightHubspotSchema>>() {\n            });\n            response.setResult(gainsightHubspotSchemaBean);\n            response.setSuccessful(true);\n            return response;\n        } catch (CaasException ex) {\n            throw ex;\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while fetching Custom Objects data from Hubspot-\" + e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.EXTERNAL_SYSTEM_","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfa9593c-2cc7-4911-bedc-d0f4d4835880","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":115,"endLine":149,"content":"tance().decrypt(tokenDetail.getRefreshToken()));\n                break;\n            case CLIENT_CREDENTIALS:\n                break;\n            default:\n                LOGGER.error(\"Invalid grant type: {}\", grantType);\n                throw new SystemException(\"Invalid grant type: \" + grantType);\n        }\n        payloadMap.put(\"client_id\", tokenDetail.getClientId().getString());\n        payloadMap.put(\"client_secret\", tokenDetail.getClientSecret().getString());\n        payloadMap.put(\"grant_type\", grantType);\n        String payload = \"\";\n        switch (payloadContentType) {\n            case MediaType.APPLICATION_FORM_URLENCODED_VALUE:\n                payload = getQueryStringFromMap(payloadMap);\n                if (!grantType.equalsIgnoreCase(CLIENT_CREDENTIALS)) {\n                    payload = payload + \"&redirect_uri=\" + redirectURI;\n                }\n                break;\n            case MediaType.APPLICATION_JSON_VALUE:\n                if (!grantType.equalsIgnoreCase(CLIENT_CREDENTIALS)) {\n                    payloadMap.put(\"redirect_uri\", redirectURI);\n                }\n                payload = GainsightUtils.OBJECT_MAPPER.writeValueAsString(payloadMap);\n                break;\n            default:\n                break;\n        }\n        return payload;\n    }\n\n    private static String getQueryStringFromMap(Map<String, String> map) {\n        return map.entrySet().stream()\n                .map(p -> encode(p.getKey()) + \"=\" + encode(p.getValue()))\n                .re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1790198-8e5a-44e2-bf9f-88661bed59af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/DataTypeConversion.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.enums;\n\nimport com.gainsight.platform.metadata.DataType;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @Author Manas Ranjan Sur\n * @Date 31st March 2022\n * @Description enum for conversion - Snowflake\n */\npublic enum DataTypeConversion {\n    STRING(DataType.STRING, Lists.newArrayList(\"text\", \"character varying\", \"character\", \"varchar\", \"nchar\", \"nvarchar\", \"ntext\")),\n    NUMBER(DataType.NUMBER, Lists.newArrayList(\"fixed\", \"real\", \"number\", \"numeric\", \"smallint\", \"integer\", \"bigint\", \"decimal\", \"double precision\", \"serial\", \"smallserial\", \"bigserial\", \"tinyint\", \"smallint\", \"mediumint\", \"int\", \"bigint\", \"float\", \"double\", \"money\", \"smallmoney\")),\n    DATE(DataType.DATE, Lists.newArrayList(\"date\")),\n    DATETIME(DataType.DATETIME, Lists.newArrayList(\"timestamp_ntz\", \"timestamp_tz\", \"timestamp_ltz\", \"timestamp without time zone\", \"timestamp with time zone\", \"datetime\", \"timestamp\", \"smalldatetime\")),\n    BOOLEAN(DataType.BOOLEAN, Lists.newArrayList(\"boolean\", \"tinyint(1)\", \"bit\"));\n\n    private static final Map<String, DataType> CONNECTOR_TYPE_TO_DATA_TYPE_MAP = Maps.newTreeMap(String.CASE_INSENSITIVE_ORDER);\n\n    static {\n        for (DataTypeConversion type : DataTypeConversion.values()) {\n            for (String connectorType : type.connectorTypes) {\n                CONNECTOR_TYPE_TO_DATA_TYPE_MAP.put(connectorType, typ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b231a08b-9a75-4157-a29a-2ccf2915e852","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":283,"endLine":308,"content":"erable\n            List<Criteria> flattenedRequiredCriteria = nullSafeList(flattenedCriteria)\n                    .stream()\n                    .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n                    .collect(Collectors.toList());\n\n            // In this case we have at least one filter which is externally filterable\n            if (CollectionUtils.isNotEmpty(flattenedRequiredCriteria))\n                modifiedCriteria = getSingleCriteriaForQueryBody(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap, ductJobMapping.getResourceName());\n            LOGGER.info(\"Criteria being used for search request: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria));\n            return modifiedCriteria;\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while modifying criteria for object search, Falling back to default criteria accepted by the external system\", ex);\n            return getDefaultFallbackCriteria(ductJobMapping.getResourceName());\n        }\n    }\n\n    private Criteria getDefaultFallbackCriteria(String resourceName) {\n        Criteria criteria = new Criteria();\n        Criteria fieldCriteria = new Criteria();\n        // set a hardcoded filter condition since this is a required parameter\n        if(!StringUtils.isEmpty(resourceName) && resourceName.equalsIgnoreCase(\"Users\"))\n            fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD_FOR_USERS);\n        else\n            f","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adcf035e-683c-48eb-85cf-2c5687436f36","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":57,"endLine":82,"content":" {\n        });\n        Set<String> fieldNames = gsFieldDefinitions.stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toSet());\n        Map<String, GSFieldDefinition> generatedFieldDefinitions = new HashMap<>();\n        // Data sampling to be done collect and keep at the side for detection of data type\n        if (StringUtils.isEmpty(fieldNamePrefix))\n            fieldNamePrefix = \"\";\n        if (data.isArray()) {\n            for (JsonNode datum : data) {\n                processData(datum, fieldNamePrefix, generatedFieldDefinitions, fieldNames);\n            }\n        } else {\n            processData(data, fieldNamePrefix, generatedFieldDefinitions, fieldNames);\n        }\n//        metadataGenerationDetails.setFieldNameToDataMap(fieldNameToDataMap);\n        return generatedFieldDefinitions.values().stream().collect(Collectors.toList());\n    }\n\n    private void processData(JsonNode data, String fieldNamePrefix, Map<String, GSFieldDefinition> generatedFieldDefinitions, Set<String> fieldNames) {\n        Iterator<Map.Entry<String, JsonNode>> fields = data.fields();\n        String finalFieldNamePrefix = fieldNamePrefix;\n        fields.forEachRemaining((field) -> {\n            if (field.getValue().isObject()) {\n                handleSchemaGenerationForObject(finalFieldNamePrefix + field.getKey(), field.getValue(), generatedFieldDefinitions, fieldNames);\n            } else if (field.getValue().isArray()) {\n                handleSchemaGenerationForArray(finalFieldNamePre","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b49dd7d6-ca2d-4620-8004-4ac2471b27ae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":52,"endLine":79,"content":"static final HashSet<ConnectorType> EXCLUDED_CONNECTORS_LIST = new HashSet<>(Arrays.asList(ConnectorType.ZENDESK, ConnectorType.SERVICENOW));\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return !EXCLUDED_CONNECTORS_LIST.contains(connectorType) && !isIpaas;\n    }\n\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = reso","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91431d02-dedc-4497-a440-a83f1a60db55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":356,"endLine":385,"content":"Criteria requiredSingleCriteria;\n        nullSafeList(flattenedCriteria)\n                .stream()\n                .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap));\n\n\n        requiredSingleCriteria = nullSafeList(flattenedCriteria)\n                .stream()\n                .filter(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    return externalFilterableFieldsMap.containsKey(fieldName);\n                })\n                .map(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    // Assuming \"field.\" is a prefix to remove\n                    if (fieldName.startsWith(\"fields.\")) {\n                        fieldName = fieldName.substring(\"fields.\".length());\n                    }\n                    flatCriteria.setFieldName(fieldName); // Update the fieldName in flatCriteria\n                    return flatCriteria;\n                })\n                .min((criteria1, criteria2) -> {\n                    Object value1 = criteria1.getValues() instanceof List ? ((List) criteria1.getValues()).get(0) : criteria1.getValues();\n                    Object value2 = criteria2.getValues() instanceof List ? ((List) criteria2.getValues()).get(0) : criteria2.getValues();\n                    return value1.toString().compareTo(value2.toString());\n                })\n                .orElse(null);\n\n        if (Objects.isNull(requiredSingleCriteria)) {\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b22009b-7c43-4183-be59-635b48f61e17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":307,"endLine":334,"content":" dateTimeFormat);\n      criteria.setValues(Lists.newArrayList(dateTimeStr));\n    }\n  }\n\n/*  private Object processDateTimeValue(Object dateTimeStr, String dateTimeFormat) {\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(dateTimeFormat);\n    ZonedDateTime dateTime = ZonedDateTime.parse(DuctUtils.valueOf(dateTimeStr), formatter);\n    return dateTime;\n  }*/\n\n  private Criteria getSingleCriteriaForRequest(List<Criteria> flattenedCriteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap, String dateTimeformat) {\n    Criteria requiredSingleCriteria;\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(dateTimeformat);\n\n    nullSafeList(flattenedCriteria)\n        .stream()\n        .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n        .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap, dateTimeformat));\n\n    requiredSingleCriteria = nullSafeList(flattenedCriteria)\n        .stream()\n        .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n        .filter(flatCriteria -> FilterOperator.GT.equals(flatCriteria.getOperatorType()) || FilterOperator.GTE.equals(flatCriteria.getOperatorType()))\n        .min((c1, c2) -> {\n          Object dateStr1 = ((List<Object>) c1.getValues()).get(0);\n          Object dateStr2 = ((List<Object>) c2.getValues()).get(0);\n          ZonedDateTime dateTime1 ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67e96ec2-8a4e-42c6-9299-65ae3b4d994a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":30,"endLine":74,"content":"util.Map;\nimport java.util.Set;\n\nimport static com.gainsight.dao.mapper.MongoBaseFieldMapper.DELETED;\n\n/**\n * Created by :\n * author : Vipin Sharma\n * date : 22/04/16\n */\n\n@Repository\npublic class PNPConnectionInfoDaoImpl extends AbstractEntityDaoImpl<PNPConnectionsInfo> implements PNPConnectionInfoDao {\n\n  @Autowired\n  public PNPConnectionInfoDaoImpl(DatabaseTemplateService databaseTemplateService) {\n    super(databaseTemplateService, PNPConnectionsInfo.class, \"tenantId\");\n  }\n\n  @Override\n  protected MongoTemplate getMongoTemplate() {return getAuthMongoTemplate();}\n\n  @Override\n  protected void setEntityId(PNPConnectionsInfo entity, String entityId) {entity.setId(entityId);}\n\n  @Override\n  protected void setTenantId(PNPConnectionsInfo entity, String tenantId) {\n      entity.setTenantId(tenantId);\n  }\n\n  @Override\n  public void markDeleted(String connectionId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionId(connectionId);\n    updateFirst(query, new Update().set(DELETED, true));\n  }\n\n  @Override\n  public PNPConnectionsInfo findByConnectionId(String connectionId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionId(connectionId);\n    return findOne(query);\n  }\n  @Override\n  public PNPConnectionsInfo findByConnectionIdIncludingDeleted(String connectionId) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionId(connectionId);\n    query.addCriteria(Criteria.where(UCConstants.MONGO_TENANTID_FIELD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"733bed86-f1b9-4399-9d21-ee1a620de355","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":189,"endLine":210,"content":"rrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE);\n        gsExternalSystemErrorMapping.setMessage(hubspotBulkWriteBackNotSupported);\n        gsExternalSystemErrorMapping.setJobId(jobId);\n        return gsExternalSystemErrorMapping;\n    }\n\n    public static void throwError(String errorCode, String errorMessage, String message) throws CaasException {\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping();\n        gsExternalSystemErrorMapping.setGsErrorCode(errorCode);\n        gsExternalSystemErrorMapping.setGsErrorMessage(errorMessage);\n        gsExternalSystemErrorMapping.setMessage(message);\n        throw new CaasException(gsExternalSystemErrorMapping);\n    }\n\n    public static void prepareErrorResponseAndThrowException(String errorCode, String errorMessage, String message, String externalSystemErrorCode, String externalSystemErrorMessage, ConnectorType connectorType) throws CaasException {\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping();\n        gsExternalSystemErrorMapping.setGsErrorCode(errorCode);\n        gsExternalSystemErrorMapping.setGsErrorMessage(errorMessage);\n        gsExternalSystemErrorMapping.setMessage(message);\n        gsExternalSystemErrorMapping.setExternalSystemErrorCode(externalSystemErrorCode);\n        gsExternalSystemErrorMapping.setExternalSystemErrorMessage(externalSystemErrorMessage);\n        gsExternalSystemErrorMapping.setConnectorType(connectorType);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c383cf4b-24d5-4308-88cd-5c50dbe758ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountDetail.java","startLine":119,"endLine":168,"content":"blic void setFlippedMeasuresSyncInfoId(String flippedMeasuresSyncInfoId) {\n        this.flippedMeasuresSyncInfoId = flippedMeasuresSyncInfoId;\n    }\n\n    public NotificationDetail getNotificationDetails() {\n        return notificationDetails;\n    }\n\n    public void setNotificationDetails(NotificationDetail notificationDetails) {\n        this.notificationDetails = notificationDetails;\n    }\n\n    @JsonIgnore\n    public Set<String> getSuccessRecipients() {\n        return getNotificationDetails() == null ? Sets.newHashSet() : getNotificationDetails().getSuccessRecipients();\n\n    }\n\n    @JsonIgnore\n    public Set<String> getFailureRecipients() {\n        return getNotificationDetails() == null ? Sets.newHashSet() : getNotificationDetails().getFailureRecipients();\n    }\n\n    public RunNowDetails getRunNowDetails() {\n        return runNowDetails;\n    }\n\n    public void setRunNowDetails(RunNowDetails runNowDetails) {\n        this.runNowDetails = runNowDetails;\n    }\n\n    @JsonIgnore\n    public ApplicationSubArea getApplicationSubArea() {\n        return getAccountType() == null ? null : getAccountType().getSubArea();\n    }\n\n    public boolean isReSync() {\n        return reSync;\n    }\n\n    public void setReSync(boolean reSync) {\n        this.reSync = reSync;\n    }\n\n    public boolean isEncryptionEnabled() {\n        return StringUtils.isNotEmpty(getKeyId());\n    }\n\n    public boolean isGenerateErrorFile() {\n        return Boolean.parseBoolean(getPropertyValue(this, GENERATE_ERROR_FILE));","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2822f3e3-f202-4769-ad65-e4fb3e015f09","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":279,"endLine":301,"content":".error(\"Failed to get AccessToken: {}\", e.getMessage(), e);\n        }\n        return null;\n    }\n\n    public static List<PNPConnectionInput> addNewSSOInstancesToConnectionList(List<InstanceMasterDetail> instances, List<PNPConnectionInput> existingConnections) {\n        try {\n            for (InstanceMasterDetail ssoInstance : GainsightCollectionUtils.nullSafeList(instances)) {\n                if ((InstanceType.CS.equals(InstanceType.getInstance(ssoInstance.getInstanceType()))) ||\n                        (existingConnections.stream().filter(existingConnection -> VersionConstants.V2.equalsIgnoreCase(existingConnection.getPnpConnectionsInfo().getVersion())\n                                        && (!Objects.isNull(existingConnection.getPnpConnectionsInfo().getInstanceDetail()))\n                                        && existingConnection.getPnpConnectionsInfo().getInstanceDetail().getInstanceId().equalsIgnoreCase(ssoInstance.getInstanceId()))\n                                .findAny().isPresent())) {\n                    //Ignore the instance as it's already present\n                    continue;\n                }\n                PNPConnectionsInfo pnpConnectionsInfo = new PNPConnectionsInfo();\n                pnpConnectionsInfo.setSsoInstance(true);\n                pnpConnectionsInfo.setConnectionName(ssoInstance.getInstanceName());\n                pnpConnectionsInfo.setVersion(VersionConstants.V2);\n                pnpConnectionsInfo.setSetupStatus(SetupStatus.INIT);\n\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da532598-6ca5-4c41-ac09-9068eef85b72","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":75,"endLine":116,"content":"EVENT(8089),\n    PNP_TASK_PAYLOAD_EMPTY(8090),\n    PNP_SEGMENT_PAYLOAD_EMPTY(8091),\n    PNP_SEGMENT_UNEXPECTED_BATCH_SIZE(8092),\n    PNP_SEGMENT_METADATA_GENERATION_FAILURE(8093),\n    PNP_MANDATORY_FIELD_NOT_IN_INPUT_DATA(8094),\n    PNP_NOTIFICATION_DETAILS_MISSING(8095),\n    PNP_S3_FILE_IS_MISSING(8096),\n    PNP_MALFORMED_S3_FILE_PATH(8097),\n    PNP_INTERNAL_ERROR(8098),\n\n    //GS Integrations\n    PNP_INVALID_AUTHENTICATION_FILE(19000),\n    PNP_INVALID_INPUT(19001),\n    PNP_SFDC_METADATA_FETCH_ERROR(19002),\n    PNP_USERNAME_HEADER_MISSING(19003),\n    PNP_MAPPING_DETAILS_EMPTY(19004),\n    PNP_CONNECTION_ALREADY_EXISTS_FOR_USER(19005),\n    PNP_CONNECTION_ALREADY_EXISTS_FOR_ORG(19007),\n    PNP_CONNECTION_ALREADY_EXISTS_FOR_TYPE(19009),\n    PNP_JOB_HAS_DEPENDENCY(19006),\n    PNP_JOB_HAS_CYCLIC_DEPENDENCY(19008),\n    PNP_DUPLICATE_TENANT_ID(19009),\n    PNP_INVALID_ORG_ID(19010),\n    PNP_REVOKED_CONNECTION(19011),\n    PNP_TOO_MANY_CONNECTIONS(19012),\n    PNP_GAINSIGHT_PX_METADATA_FETCH_ERROR(19013),\n    PNP_CONNECTOR_NOT_ENABLED(19014),\n    PNP_SFDC_ERROR_RETREIVED_EMPTY_FILE(19015),\n    PNP_EMPTY_UPSERT_KEY(19016),\n    PNP_NULL_UPSERT_KEY(19017),\n    PNP_INVALID_TASK(19018),\n    PNP_INVALID_ACCESS_KEY(19019),\n    PNP_CURRENCY_SYNC_OOB_JOB_MODIFICATION_NOT_ALLOWED(19020),\n    PNP_HOUR_LIMIT_EXCEEDED(19021),\n    PNP_DAY_LIMIT_EXCEEDED(19022),\n    PNP_ALLOWED_CONNECTIONS(19023),\n    PNP_JOB_IN_PROGRESS(19024),\n\n    //Dynamics\n    PNP_DYNAMICS_ORG_URI_MISSING(20000),\n    PNP_DYNAMICS","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45d7f572-b504-48c1-abea-62bc3c805626","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":201,"endLine":222,"content":"ex.getGsExternalSystemErrorMapping());\n        }catch (Exception e){\n            log.error(\"Error while writing into DB, hence skipping\", e);\n        }\n        String errorMessage = DuctUtils.getErrorMessageToPopulateFromException(ex);\n        DuctResponse ductResponse = DuctResponse.builder().externalSystemResponse(ex.getGsExternalSystemErrorMapping().getResponsePayload()).errorMessage(errorMessage).\n                tenantId(ex.getGsExternalSystemErrorMapping().getTenantId()).connectionId(ex.getGsExternalSystemErrorMapping().getConnectionId()).ductStatus(DuctStatus.FAILED)\n                .jobId(ex.getGsExternalSystemErrorMapping().getJobId()).build();\n        log.info(\"updating Job status\");\n        String jobIdToUpdate = null != ex.getGsExternalSystemErrorMapping().getJobId() ? ex.getGsExternalSystemErrorMapping().getJobId() : jobId;\n        updateDuctJobMappingStatus(jobIdToUpdate, ductResponse);\n    }\n\n    @Override\n    public DuctResponse updateSingleData(DuctJobMapping ductJobMapping) throws CaasException {\n        DuctResponse ductResponse = null;\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductJobMapping.getConnectionId());\n            ConnectorDataSourceService dataSourceService =\n                    connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            ductResponse = dataSourceService.updateData(ductJobMapping);\n            updateDuctJobMappingStatus(d","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96452b87-0fb5-4894-87b5-992d29a73c22","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":242,"endLine":268,"content":"eplaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n            }\n        return mapping.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (!((JsonNode) externalSystemResponse.get(DATA)).isNull()) {\n            return OBJECT_MAPPER.convertValue(externalSystemResponse.get(DATA), List.class).size();\n        }\n        return 0;\n    }\n\n    private Criteria modifyCriteria(Criteria criteria, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5b1bec21-fc19-4072-82c1-2911f957fcb3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":237,"endLine":264,"content":"eldDefinition> defaultObjectAttributes = new ArrayList<>();\n    if (!configAttributes.isEmpty())\n      configAttributes.forEach(i -> {\n        if (null != i.getDefaultObjectAttributes())\n          defaultObjectAttributes.addAll(i.getDefaultObjectAttributes());\n      });\n\n    CaasObjectAttributesConfig caasObjectDefaultAttributesConfig = new CaasObjectAttributesConfig();\n    caasObjectDefaultAttributesConfig.setDefaultObjectAttributes(defaultObjectAttributes);\n    // TODO: duplicates could be present\n    Map ObjectDefinitionAsMap = OBJECT_MAPPER.convertValue(objectDefinition.get(objectName), Map.class);\n    MetadataCommonUtil.overrideAttributesFromConfig(Arrays.asList(caasObjectDefaultAttributesConfig), ObjectDefinitionAsMap);\n\n    // Global Override Config\n\n    List<Map<String, Object>> globalObjectOverrideAttributes = new ArrayList<>();\n    if (!configAttributes.isEmpty())\n      configAttributes.forEach(i -> {\n        if (null != i.getOverrideAttribute())\n          globalObjectOverrideAttributes.addAll(i.getOverrideAttribute());\n      });\n\n    CaasObjectAttributesConfig caasObjectOverrideAttributesConfig = new CaasObjectAttributesConfig();\n    caasObjectOverrideAttributesConfig.setOverrideAttribute(globalObjectOverrideAttributes);\n    MetadataCommonUtil.overrideAttributesFromConfig(Arrays.asList(caasObjectOverrideAttributesConfig), ObjectDefinitionAsMap);\n\n    // Override attributes if defined at connector type level\n    List<CaasObjectAttributesTenantConfig> tenantConfigAtt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9d39c5c-0303-4d28-a874-68b88d6c119b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":88,"endLine":132,"content":"onInclusion(JsonSerialize.Inclusion.NON_NULL);\n    mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n  }\n\n  public static void setInstanceName(String pid) {\n    String dynoName = getDynoName(pid);\n    System.setProperty(INSTANCE_NAME_PROPERTY, dynoName);\n    Constants.INSTANCE_NAME = dynoName;\n  }\n\n  private static String getDynoName(String pid) {\n    String instanceName = CoreUtils.getProperty(DYNO);\n    if (StringUtils.isBlank(instanceName)) {\n      instanceName = EC2MetadataUtils.getInstanceId();\n    }\n    if (StringUtils.isBlank(instanceName)) {\n      instanceName = \"local\";\n    }\n    log.info(\"Instance Name is {}\", instanceName);\n    return instanceName + \".\" + pid;\n  }\n\n  public static String getEnv() {\n    String env = EnvironmentContext.getEnvName();\n    if (StringUtils.isEmpty(env)) {\n      env = DuctCommonConstants.DEFAULT_ENV;\n    }\n    return env;\n  }\n\n  public static String getEnvDeploymentProperty(String key, String defaultValue) {\n    String env = getEnv();\n    String value = DEPLOYMENT_PROPERTIES.getValue(env + \".\" + key);\n    if (value != null) {\n      return value;\n    }\n    return DEPLOYMENT_PROPERTIES.getValue(key, defaultValue);\n  }\n\n  private static ClientConfig getFeatureToggleClientConfig() {\n    return new ClientConfig()\n            .withHost(DuctCommonConstants.FEATURE_CONFIG_URL)\n            .withEnvironment(getEnv())\n            .withCredentials(new Credentials()\n                    .withRequestInfo(RequestContextPr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"355d61d4-b6f5-432b-aeae-643928555780","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.processor;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescription;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescriptionV3;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotSchema;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.google.common.collect.Lists;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.spr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bcc0e4b5-0025-49c9-9c1e-c7607d4415a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":192,"endLine":213,"content":"\"\n          + filter + \" limit \" + limit + \" offset \" + offset;\n    } else {\n      query = \"Select \" + fieldJsonPathList.stream().collect(Collectors.joining(\",\"))\n          + \" from \" + OPEN_QUOTE + sapDatasphereConnectionDetail.getSchema() + CLOSE_QUOTE + \".\" + OPEN_QUOTE + objectName + CLOSE_QUOTE\n          + \" limit \" + limit + \" offset \" + offset;\n    }\n    try {\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n      GainsightSAPDatasphereChannelService gainsightSAPHanaChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromProperties(pnpConnectionsInfo, true, pnpConnectionsInfo.getAuthorizationType());\n      List<Map<String, Object>> data = gainsightSAPHanaChannelService.executeQuery(query, fieldInfos);\n      String nextPageToken = limit > data.size() ? null : String.valueOf(offset + limit - 1);\n      if (limit == data.size())\n        data.remove(data.size() - 1);\n      Map<String, Object> res = new HashMap<>();\n      res.put(\"data\", data);\n\n      return DuctResponse.builder().externalSystemResponse(res).nextPageToken(nextPageToken).\n          tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n          .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n          .totalNumberOfRecords(populateTotalNumberOfRecords(res)).externalResourceName(ductJobMapping.getResourceName())\n          .jobId(ductJobMapping.getJobId()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfc3c77a-631a-4ce4-b7f0-85a38271e352","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1631,"endLine":1654,"content":"s.equals(decodedNewPassword, (byte[]) oldPassword);\n        } catch (IllegalArgumentException e) {\n            log.error(\"Not an encoded value {}\", e);\n            return true;\n        }\n    }\n\n    private void processRelationalDBDetails(PNPConnectionsInfo pnpConnectionInputFromUI, PNPConnectionsInfo pnpConnectionInputFromDB) {\n        RelationalDBConnectionDetail relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInputFromUI.getConnectionDetail();\n        RelationalDBConnectionDetail relationalDBConnectionDetailFromDB = (RelationalDBConnectionDetail) pnpConnectionInputFromDB.getConnectionDetail();\n\n        if (relationalDBConnectionDetail.getUrl() != null) {\n            relationalDBConnectionDetailFromDB.setUrl(cryptUtil.encrypt(relationalDBConnectionDetail.getUrl()).getValue());\n        }\n        if (relationalDBConnectionDetail.getHost() != null) {\n            relationalDBConnectionDetailFromDB.setHost(cryptUtil.encrypt(relationalDBConnectionDetail.getHost()).getValue());\n        }\n        if (relationalDBConnectionDetail.getPort() != null) {\n            relationalDBConnectionDetailFromDB.setPort(cryptUtil.encrypt(relationalDBConnectionDetail.getPort()).getValue());\n        }\n        if (relationalDBConnectionDetail.getDataBaseName() != null) {\n            relationalDBConnectionDetailFromDB.setDataBaseName(cryptUtil.encrypt(relationalDBConnectionDetail.getDataBaseName()).getValue());\n        }\n        if (relationalDBConnectionDetail.getUser() != nu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f90870a-253c-4836-8379-cbe80913aa0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":154,"endLine":179,"content":"ghwayUtils.generateCleanTaskName(\"RootTask_\" + RandomStringUtils.randomAlphanumeric(10)));\n        dpWorkflowTaskDetailsDTO.setChildrenTaskIds(new ArrayList<>());//add children here\n        return dpWorkflowTaskDetailsDTO;\n    }\n\n    private DPWorkflowDagDetailsDTO generateDag(DPWorkflowTaskDetailsDTO rootTask, String jobId,\n                                                String systemToken) {\n        DPWorkflowDagDetailsDTO dpWorkflowDagDetailsDTO = new DPWorkflowDagDetailsDTO();\n        dpWorkflowDagDetailsDTO.setRootTaskId(rootTask.getTaskId());\n        getDagWorkflowProperties(dpWorkflowDagDetailsDTO, jobId, systemToken);\n\n        List<DPWorkflowTaskDetailsDTO> taskDetailsDTOList = Lists.newArrayList();\n        List<String> listOfChildTaskId = Lists.newArrayList();\n        rootTask.setChildrenTaskIds(listOfChildTaskId);\n        taskDetailsDTOList.add(rootTask);\n        dpWorkflowDagDetailsDTO.setTasks(taskDetailsDTOList);\n        return dpWorkflowDagDetailsDTO;\n    }\n\n    private void getDagWorkflowProperties(DPWorkflowDagDetailsDTO dpWorkflowDagDetailsDTO, String jobId, String systemToken) {\n        DPWorkflowPropertiesDTO dpWorkflowPropertiesDTO = new DPWorkflowPropertiesDTO();\n        DPNotificationDetails dpNotificationDetails = new DPNotificationDetails();\n        DPWorkflowWebhookDetailsDTO dpWorkflowWebhookDetailsDTO = getDpWorkflowWebhookDetailsDTO(jobId,\n                systemToken);\n        dpNotificationDetails.setWebhookDetails(dpWorkflowWebhookDetailsDTO);\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"67758e43-c2a2-4682-a2ee-43efa6e7e3e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DuctValidationServiceImpl.java","startLine":38,"endLine":57,"content":"       PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductRequestDTO.getResourceName(),\n                pnpConnectionsInfo);\n        return validate(ductRequestDTO, pnpConnectionsInfo, objectDefinitionMap);\n    }\n\n    @Override\n    public boolean validateRequest(DuctRequestDTO ductRequestDTO, PNPConnectionsInfo pnpConnectionsInfo, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        return validate(ductRequestDTO, pnpConnectionsInfo, objectDefinitionMap);\n    }\n\n    private boolean validate(DuctRequestDTO ductRequestDTO, PNPConnectionsInfo pnpConnectionsInfo, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n\n        ValidationConnectorDataSourceService validationConnectorDataSourceService = validationConnectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType());\n        try {\n            validationConnectorDataSourceService.validate(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        }catch (CaasException ex){\n            gsExternalSystemErrorMappingDao.insert(ex.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91a58db7-acb2-4a71-9171-33ae876fc90e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCCommonUtility.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.Tenant;\nimport com.gainsight.bean.TenantAuthInfo;\nimport com.gainsight.bean.UserAuthInfo;\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.BaseTenantMasterService;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport com.gainsight.utils.CoreUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport exception.SystemException;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.Response;\nimport java.util.Map;\n\n/**\n * Created by vipinsharma on 23/05/18.\n */\npublic class UCCommonUtility {\n\n    private static final BaseTenantMasterService tenantMasterService = SpringServiceLocatorFactory.getService(\"baseTenantMasterService\", BaseTenantMasterService.class);\n    private static final Logger LOGGER = LoggerFactory.getLogger(UCCommonUtility.class);\n\n\n    public static Response httpResponse(Object data) {\n        return Response.status(Response.Status.OK).entity(new ResponseObj(true, data)).build();\n    }\n\n    public static Response httpResponse(Object data, String errorMessage) {\n        return R","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dd1be6af-22f3-4e22-bd43-834f1fabafb0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1722,"endLine":1740,"content":"NNECTION_NAME.getUserText(), HttpStatus.SC_PRECONDITION_FAILED);\n            assertTrue(GainsightPrecondition.scanAndNotBlank(pnpConnectionsInfo.getConnectionName().trim(), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_CONNECTION_NAME.getUserText(), HttpStatus.SC_PRECONDITION_FAILED);\n            assertNull(pnpConnectionInfoDao.findByNameAndConnectionType(pnpConnectionsInfo.getConnectionName().trim(), pnpConnectionsInfo.getConnectionType()), CaasValidationCode.CONNECTION_NAME_ALREADY_EXISTS);\n            //TODO: remove the below change when we allow multiple CRM connections\n            List<ConnectorType> excludeConnectors = new ArrayList<>();\n            GainsightUtils.OBJECT_MAPPER.readValue(DEPLOYMENT_PROPERTIES.getValue(\"uc.excluded.connectors\", \"[]\"), List.class).stream().forEach(\n                    connector -> excludeConnectors.add(ConnectorType.forValue(connector.toString())));\n            assertTrue(!excludeConnectors.contains(pnpConnectionsInfo.getConnectionType()), CaasValidationCode.INVALID_INPUT, \"Connector not allowed in the environment\", HttpStatus.SC_BAD_REQUEST);\n        } catch (Exception exception) {\n            log.error(\"Exception in evaluating excluded connectors list. {}\", exception.getMessage(), exception);\n            throw exception;\n        }\n\n    }\n\n    @SneakyThrows\n    private String aquireLock(String tenantId) {\n        return mutexService.acquire(String.format(\"DUCT-CONNECTION-%s\", tenantId), 1 * 60 * 1000);\n    }\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d911b47a-1911-42c6-bfe9-5f50387e6726","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":51,"endLine":90,"content":"ion.Function;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FORMAT;\nimport static com.gainsight.duct.constants.DuctErrorConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.COMMA;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHCollectionUtils.nullSafeMap;\n\n/**\n * createdBy: snargana\n * date: 14/08/24\n */\n\n@Slf4j\n@Service\n@Order(1000)\npublic class SAPDatasphereDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n  private static final String RESULTS = \"results\";\n\n  private static final String OPEN_QUOTE = \"\\\"\";\n  private static final String CLOSE_QUOTE = \"\\\"\";\n  private static final String SAP_DATAPSHERE_WRITEBACK_BATCH_SIZE = \"SAP_DATAPSHERE_WRITEBACK_BATCH_SIZE\";\n  private static final String SUPPORT_LENGTH = \"supportLength\";\n  private static final String SUPPORT_SCALE = \"supportScale\";\n  private static final String LENGTH = \"LENGTH\";\n  private static final String SCALE = \"SCALE\";\n\n  @Override\n  protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n    internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n  }\n\n  @Override\n  protected String getTaskName() {\n      return \"CaasSAPDatasphereExtract\";\n  }\n\n  @Override\n  protected String getTeamName() {\n    return DuctConstants.CONN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2ddf792-a838-489b-ba8e-3c2619a18e0f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":61,"endLine":86,"content":"ng GSNAP_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    public class DescribeMetaConstants {\n        public static final String OBJECT_ID = \"objectId\";\n        public static final String CONNECTION_TYPE = \"connectionType\";\n        public static final String CONNECTION_ID = \"connectionId\";\n        public static final String LABEL = \"label\";\n        public static final String FIELD_NAME = \"fieldName\";\n        public static final String DB_NAME = \"dbName\";\n        public static final String DATA_TYPE = \"dataType\";\n        public static final String FILTERABLE = \"filterable\";\n        public static final String REQUIRED = \"required\";\n        public static final String FORMAT = \"format\";\n        public static final String CAN_BE_IDENTIFIER = \"canBeIdentifier\";\n        public static final String TIME_ZONE_ID = \"timeZoneId\";\n        public static final String WRITEBACK_FORMAT = \"writebackFormat\";\n        public static final String SOURCE = \"source\";\n        public static final String GROUPABLE = \"groupable\";\n        public static final String SORTABLE = \"sortable\";\n        public static final String VALUE = \"value\";\n        public static final String OPTIONS = \"options\";\n        public static final String UPDATEABLE = \"updateable\";\n        public static final String READ_ONLY = \"readOnly\";\n        public static final String ACCESSIBLE = \"accessible\";\n        public static final String SCHEMA_UPDATEABLE = \"schemaUpdateable\";\n        publi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9b11cc10-3c78-4276-992c-70c77d54221c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":231,"endLine":262,"content":"pe instanceType, boolean isCCEnabled, boolean isCEEnabled, boolean isPXEnabled) {\n        if (Objects.isNull(instanceType)) {\n            return false;\n        }\n        switch (instanceType) {\n            case CC:\n                return isCCEnabled;\n            case CE:\n                return isCEEnabled;\n            case PX:\n                return isPXEnabled;\n            default:\n                return false;\n        }\n    }\n\n    private static Map<String, String> getHeaders(String accessToken) {\n        Map<String, String> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON);\n        headers.put(AUTHORIZATION, GS_B2B_TOKEN + accessToken);\n        return headers;\n    }\n\n    private static String getGSB2BToken(String authProjectId, boolean reGenerateB2BToken) {\n        String accessToken = (String) redisCacheUtility.getValue(RequestContextProvider.getTenantId() + UCConstants.COLON + authProjectId);\n        if (ObjectUtils.isEmpty(accessToken) || reGenerateB2BToken) {\n            LOGGER.info(\"Generating new GSB2BToken for project: {}\", authProjectId);\n            accessToken = getAccessToken(RequestContextProvider.getTenantId());\n            if (!ObjectUtils.isEmpty(accessToken)) {\n                LOGGER.info(\"Successfully Generated new GSB2BToken for project: {}\", authProjectId);\n                redisCacheUtility.clearCache(RequestContextProvider.getTenantId() + UCConstants.COLON + authProjectId);\n                redisCacheUtility.putValu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"23914dd4-b67f-463d-b1ca-5447ca103248","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":133,"endLine":157,"content":"d(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken());\n                tokenDetails.setAccessToken(tokenDetailMap.get(ACCESS_TOKEN).toString());\n                tokenDetails.setRefreshToken(tokenDetailMap.get(REFRESH_TOKEN).toString());\n            } catch (Exception ex) {\n                log.error(\"Error in fetching synchronized data\", ex);\n                DuctUtils.throwError(CaasValidationCode.ZOOM_CREDENTIALS_EXPIRED.getGsEventCode() , CaasValidationCode.ZOOM_CREDENTIALS_EXPIRED.getUserText(), ex.getMessage());\n            }\n            try {\n                updateTokenDetails(ductJobMapping.getConnectionId(), tokenDetails);\n\n                if (isPaginationSupported) {\n                    return fetchSynchronizedDataWithPagination(ductJobMapping, dataApi, recordId, tokenDetails);\n                } else\n                    return fetchSynchronizedDataWithoutPagination(ductJobMapping, recordId, dataApi, tokenDetails);\n\n            } catch (CaasException cex) {\n                log.error(\"Error in fetching synchronized data\", cex);\n                throw cex;\n            } catch (Exception e) {\n                log.error(\"Error in fetching synchronized data\", e);\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            }\n\n        } else {\n            DuctUtils.throwError(CaasValidationCode.API_CONFIG_NOT_FOUND.getGsEventCode(), CaasVa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c96c017-25f0-4d8d-8940-f65eff4dbbac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":659,"endLine":671,"content":"R_MESSAGE, e));\n                    }\n                }\n            }\n        }\n\n        Map data = new HashMap();\n        data.put(RESULTS,arr);\n        if(arr.size() < Integer.valueOf(dataExtractionRequest.getProperties().get(PAGE_SIZE).toString()))\n            elementsNextPageToken = null;\n        return DuctResponseDTO.builder().externalSystemResponse(data).nextPageToken(elementsNextPageToken).build();\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"839969c3-1ef4-4ce3-9cde-2056a314cbe4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":53,"endLine":80,"content":"eFields(ductRequestDTO.getCriteria(), fieldsNames, ductRequestDTO.getIsSynchronized());\n    }\n\n    private static void checkForDuplicateFields(Criteria criteria, Set<String> fieldNames, boolean isSync) throws CaasException {\n        if (criteria != null && isSync) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filtr : criteria.getFilters()) {\n                    checkForDuplicateFields(filtr, fieldNames, isSync);\n                }\n            }\n            if (fieldNames.contains(criteria.getFieldName())) {\n                DuctUtils.throwError(CaasValidationCode.GIVEN_FILTER_IS_NOT_VALID.getGsEventCode(), CaasValidationCode.GIVEN_FILTER_IS_NOT_VALID.getUserText(),\n                        String.format(\"Duplicate filter for field : %s\", criteria.getFieldName()));\n            }\n            if (criteria.getFieldName() != null)\n                fieldNames.add(criteria.getFieldName());\n        }\n    }\n\n    private static void checkForFiltersSupportedFields(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFiltersSupportedFields(filterCriteria, fieldNameToFieldDefinitionMap, isSync);\n                }\n            }\n            if (StringUtils.isNotEmpty(criteria.getFieldName())) {\n                GSFiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ed4f982-5711-485a-8b44-78c86e0b05f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":154,"endLine":186,"content":"      .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ad61fd5-1a21-4b5e-a245-c9fe381e84d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1502,"endLine":1524,"content":") throws CaasException {\n        if (pnpConnectionsInfo.getConnectionType().equals(ConnectorType.REST_API)) {\n            if (Objects.equals(pnpConnectionsInfo.getProperties().get(AUTH_TYPE), AuthType.OAUTH_v2)) {\n                setOAuthConstructedAuthorizationURL(pnpConnectionsInfo);\n            } else if (Objects.equals(pnpConnectionsInfo.getProperties().get(AUTH_TYPE), AuthType.TWO_LEGGED_OAUTH_v2)) {\n                updateOAuthAccessToken(pnpConnectionsInfo, null, CLIENT_CREDENTIALS);\n            }\n        }\n    }\n\n    private void setOAuthConstructedAuthorizationURL(PNPConnectionsInfo pnpConnectionsInfo) {\n        OAuthV2TokenDetail oAuthV2TokenDetail = (OAuthV2TokenDetail) pnpConnectionsInfo.getTokenDetail();\n        String redirectURI = oAuthV2TokenDetail.getRedirectURI();\n        Map<String, Object> additionalState = new HashMap<>();\n        additionalState.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String state = gainsightAccountServiceFactory.getState(null, additionalState);\n        String oauthServiceProviderURLWithParams = callOutOAuthService.constructOAuthServiceProviderURI(pnpConnectionsInfo, redirectURI, state);\n        pnpConnectionsInfo.getProperties().put(\"constructedAuthorizationURL\", oauthServiceProviderURLWithParams);\n    }\n\n    private Map updateOAuthAccessToken(PNPConnectionsInfo pnpConnectionsInfo, String code, String grantType) throws CaasException {\n        Map oauthResponse = null;\n        try {\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf2e7355-6365-42b4-ad64-98c63a0da129","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZuoraV2ConnectionService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimpo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7dfc9b7-80a4-497a-8648-b8abb064482d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":491,"endLine":515,"content":"(result.getOrDefault(ERROR_MESSAGE, EMPTY_STRING));\n                        }\n                        writeToFile(failureFile, clonedRecord);\n                    }\n                } catch (Exception ex) {\n                    log.error(\"Exception while loading data to Dynamics\", ex);\n                    ++failedRecords;\n                    String[] clonedRecord = Arrays.copyOf(nextRecord, nextRecord.length + 1);\n                    clonedRecord[nextRecord.length] = ex.getMessage();\n                    writeToFile(failureFile, clonedRecord);\n                    ductResponse.setErrorMessage(ex.getMessage());\n                }\n            }\n            ductResponse.setTotalNumberOfRecords(totalRecords);\n            ductResponse.setSuccessRecords(successRecords);\n            ductResponse.setFailedRecords(failedRecords);\n            ductResponse.setExternalSuccessFileLocation(successFile.getName());\n            ductResponse.setExternalErrorFileLocation(failureFile.getName());\n            ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n\n            log.info(\"Uploading success & failure files to S3\");\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                    + FORWARD_SLASH + successFile.getName(), successFile);\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bfec696-f632-4790-ba4f-22b96bdee84a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":324,"endLine":332,"content":" :{}\", file.getName());\n            return file;\n        } catch (Exception e) {\n            log.error(\"Error in downloading the file\");\n            throw e;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9bf89c79-8761-47ae-a163-9e6b20651e9b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":55,"endLine":100,"content":"sponse.setName(name);\n        if (this.databaseTemplateService.checkTenantHAPostgresConnection(tenantId)) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getApplicationDBStatus() {\n        String name = \"GS-MicroService: Application DB\";\n        String query = \"SELECT 1;\";\n        boolean status = false;\n        try {\n            this.ductDatabaseTemplateService.getApplicationJdbcTemplate().execute(query);\n            status = true;\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to connect to GS-MicroService: Application DB.\", ex);\n        }\n\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        response.setType(\"POSTGRES\");\n        if (status) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getTenantRedshiftStatus(String tenantId) {\n        String name = \"RedShift\";\n        HealthStatus response = new HealthStatus();\n        response.setName(name);\n        if (this.databaseTemplateService.checkTenantRedshiftConnection(tenantId)) {\n            response.setStatus(\"OK\");\n        } else {\n            response.setStatus(\"FAILED\");\n        }\n        return response;\n    }\n\n    public HealthStatus getTenantDataMongoStatus(String tenantId) {\n        String name = \"DataMongo\";\n        HealthStatus r","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7afb5b57-fb31-4057-b3fb-6d912bd1dba9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":563,"endLine":603,"content":" externalSystemResponse.get(RECORDS_KEYWORD);\n        }\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_DYNAMICS_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.dynamics.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.dynamics.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.dynamics.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        return null;\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1692025-3372-4946-9e3e-57b0b0d0e4bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":408,"endLine":434,"content":"    generatedMetadataCacheDao.insert(generatedMetadataCache);\n      } else {\n        metadataByConnectionIdAndObjectName.setGeneratedFields(generatedFields);\n        generatedMetadataCacheDao.update(metadataByConnectionIdAndObjectName);\n      }\n      metadataGenerationDetails.setGeneratedFields(generatedFields);\n      metadataGenerationDetails.setStatus(MetadataJobStatus.SUCCESS);\n      metadataGenerationDetails.setGeneratedFieldCount(generatedFields.size());\n      metadataGenerationDetailsDao.update(metadataGenerationDetails);\n      return generatedFields;\n    } catch (CaasException se) {\n      catchExceptionAndUpdateStatus(se, metadataGenerationDetails);\n      InstrumentationUtil.recordException(metadataGenerationDetails, DuctConstants.CAAS_WEB, se.getErrorMessage());\n      throw se;\n    } catch (Exception e) {\n      log.error(\"exception \", e);\n      CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n      catchExceptionAndUpdateStatus(caasException, metadataGenerationDetails);\n      InstrumentationUtil.recordException(metadataGenerationDetails, DuctConstants.CAAS_WEB, e.getMessage());\n      throw caasException;\n    }\n  }\n\n  private void catchExceptionAndUpdateStatus(CaasException ex, MetadataGenerationDetails metadataGenerationDetails) {\n    log.info(\"Writing error into DB\");\n    try {\n      gsExternalSystemErrorMappingDao.insert(ex.getGsExter","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bdc38e9-3d43-409d-b995-ad2119fe6f9c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":57,"endLine":102,"content":"SIGHT_API &&\n                connectorType != ConnectorType.AHA &&\n                connectorType != ConnectorType.BIGQUERY &&\n                connectorType != ConnectorType.ECOSYSTEM &&\n                connectorType != ConnectorType.ZOOM &&\n                connectorType != ConnectorType.MSTEAMS;\n    }\n\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_IPAAS_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ipaas.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ipaas.extract.version\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    protected String getTaskTime","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89933897-2d92-4523-8587-b5e7fc831a89","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5dde97c-c242-47f4-b05b-6cfb206e336d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":556,"endLine":582,"content":"nConstants.GSNAP_SECRET).getValue());\n            httpGet.setHeader(\"Content-Type\", \"application/json\");\n\n            LOGGER.info(\"Retrieving metadata for {} from connectors. Hitting : {}\", entityName, uri);\n            response = httpclient.execute(httpGet);\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                responseContent = MAPPER.readTree(response.getEntity().getContent());\n            } else {\n                String errorMsg = String.format(\"Caas metadata api returned status code :%s for objectName:%s . Reason received:%s.\",\n                        response.getStatusLine().getStatusCode(), entityName, response.getStatusLine().getReasonPhrase());\n                LOGGER.error(errorMsg);\n                throw new Exception(\"Error while trying to fetch metadata for Servicenow\");\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while trying to pull metadata from CAAS :{} . Response received : {} \", ex, response);\n            throw ex;\n        }\n\n        String directoryPath = Paths.get(\"\").toAbsolutePath() + \"/\" + RequestContextProvider.getTenantId();\n        createDirectory(directoryPath);\n        directoryPath = directoryPath + \"/\" + \"CE\";\n        createDirectory(directoryPath);\n        logResponse(directoryPath, entityName, responseContent);\n        return MAPPER.convertValue(responseContent.get(\"data\"), Map.class);\n    }\n\n    private void logResponse(String directoryPath, String entity","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0033200f-a2c0-4fa0-8893-c6601192c8f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":98,"endLine":114,"content":"IpaasFeatureToggleUtility.getCEBaseURL() + CLOUD_API_BASE_URL + UCConstants.FORWARD_SLASH + BULK + ipaasBulkDownloadCallbackPayload.getRequestMap().get(\"id\") + UCConstants.FORWARD_SLASH + ipaasBulkDownloadCallbackPayload.getRequestMap().get(\"objectName\");\n        setMDCContext(ipaasBulkDownloadCallbackPayload.getTenantId());\n\n        IpaasAccountUserDetails ipaasAccountUserDetails = ipaasAccountUserDetailsDao.findByTenantId(ipaasBulkDownloadCallbackPayload.getTenantId());\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ipaasBulkDownloadCallbackPayload.getConnectionId());\n        Map<String, Object> headers = IpaasHelperService.getBulkFileDownloadHeaders(ipaasAccountUserDetails, pnpConnectionsInfo);\n        headers.put(\"accept\", \"text/csv\");\n        File file = null;\n        HttpUrlConnectionUtils httpUrlConnection = new HttpUrlConnectionUtils();\n        try {\n            HttpResponse httpResponse = httpUrlConnection.get(requestURL, headers, AdvancedHttpHelper.TIMEOUT, true, new HashMap<>());\n            if (httpResponse.getResponseCode() == 200) {\n                file = File.createTempFile(\"BulkFile_\", ipaasBulkDownloadCallbackPayload.getRequestMap().get(\"id\").toString());\n                InputStream inputStream = httpResponse.getResponseIs();\n                log.info(\"leng : {}\", httpResponse.getContentLength());\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                String path = uploadToS3(UUID.randomUUID","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3fb573df-babe-4816-930d-157d8abd3402","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GsExternalSystemErrorMapping.java","startLine":69,"endLine":87,"content":";\n        this.jobId = jobId;\n    }\n\n    public GsExternalSystemErrorMapping(String gsErrorCode, String gsErrorMessage, Object exceptionStackTrace, String jobId, String message){\n        this.gsErrorCode = gsErrorCode;\n        this.gsErrorMessage = gsErrorMessage;\n        this.exceptionStackTrace = exceptionStackTrace;\n        this.jobId = jobId;\n        this.message = message;\n    }\n\n    public GsExternalSystemErrorMapping(String externalSystemErrorCode, String externalSystemErrorMessage, Map<String, Object> responsePayload){\n        this.externalSystemErrorCode = externalSystemErrorCode;\n        this.externalSystemErrorMessage = externalSystemErrorMessage;\n        this.responsePayload = responsePayload;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5a122185-0d74-430a-a289-6b4aa9f542d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":104,"endLine":126,"content":"BJECTS_KEYWORD.equalsIgnoreCase(i.getObjectName())).map(CaasObjectApiConfig::getObjectName).collect(Collectors.toList());\n            CaasObjectApiConfig caasObjectApiConfig = caasObjectApiConfigs.stream().filter(config -> DuctConstants.CUSTOM_OBJECTS_KEYWORD.equalsIgnoreCase(config.getObjectName())).findFirst().get();\n            GSIntegrationResponse customObjects = gainsightHubspotFetchProcessor.getCustomObjects(pnpConnectionsInfo, caasObjectApiConfig.getAdditionalProperties().get(LIST_CALL).toString());\n            List<GainsightHubspotSchema> gainsightHubspotSchemas = (List<GainsightHubspotSchema>) customObjects.getResult();\n            putObjectsInCache(caasObjectApiConfigs, gainsightHubspotSchemas, pnpConnectionsInfo.getConnectionId());\n            hubspotObjects.addAll(gainsightHubspotSchemas.stream().map(i -> i.getLabels().get(SINGULAR)).collect(Collectors.toList()));\n        } else {\n            LOGGER.info(\"Objects found in cache\");\n            Map cachedObjectsValue = (Map) cacheValue;\n            hubspotObjects = cachedObjectsValue.keySet();\n        }\n        List<Map<String, Object>> returnObj = new ArrayList<>(hubspotObjects.size());\n        for (String obj : hubspotObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, obj);\n            retMap.put(OBJECT_NAME, obj);\n            retMap.put(LABEL, obj);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    private void putObjectsInCache(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24d52353-306d-4275-b800-dbc4f816b6db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/FieldLevelMetadataTransformationConfig.java","startLine":1,"endLine":17,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter @Setter\npublic class FieldLevelMetadataTransformationConfig implements Serializable {\n\n    private Map<String,MetadataTransformAttributes> metadataTransformAttributes;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f29734ed-8579-4ec0-bf29-190556877e24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":106,"endLine":133,"content":"Criteria.class);\n        Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n        if(modifiedCriteria == null)\n            return null;\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.PIPEDRIVEV2.equals(connectorType) && !isIpaas;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c76a3eb9-f6e6-42ec-a756-fbfed9358753","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":96,"endLine":111,"content":"nnectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n         } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstant","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf553cd9-93a4-4993-8aec-187ed2d0c8ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/RetryHandler.java","startLine":1,"endLine":49,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules.helper;\n\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.client.HttpRequestRetryHandler;\nimport org.apache.http.client.protocol.HttpClientContext;\nimport org.apache.http.conn.ConnectTimeoutException;\nimport org.apache.http.conn.HttpHostConnectException;\nimport org.apache.http.protocol.HttpContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLException;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\n\n/**\n * HTTP request retry handler with specified retry count\n * <p>\n * Created by rchejerla\n * Date: 9/14/16\n */\npublic class RetryHandler implements HttpRequestRetryHandler {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(RetryHandler.class);\n\n  private final int retryCount;\n  private final String requestURL;\n\n  public RetryHandler(int retryCount, String requestURL) {\n    this.retryCount = retryCount;\n    this.requestURL = requestURL;\n  }\n\n  @Override\n  public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n    boolean canRetry = false;\n    if (executionCount >= this.retryCount) {\n      // Do not retry if max\n      canRetry = false;\n    } else if (exception instanceof HttpHostConnectException) {\n      // network unreachable, retry\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b5527727-a4f0-4266-92c6-0f35e6f99cfd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":103,"endLine":127,"content":"atic final String BEARER = \"Bearer \";\n    private static final String SCOPE = \"&scope=\";\n    private static final String STATE = \"&state=\";\n    private static final String AUTHORIZATION_URL = \"&prompt=login%20consent\";\n    private final UserSessionDAO userSessionDAO;\n    private final PNPConnectionInfoDao pnpConnectionInfoDao;\n    private final CollectionMasterService collectionMasterService;\n    private final TenantMasterDAO tenantMasterDAO;\n    private final HttpClientService httpClientService;\n    private CaasConnectorConfigDAO connectorConfigDAO;\n\n\n    @Autowired\n    public GainsightAccountServiceFactoryImpl(List<GainsightAccountService> gainsightAccountServices, UserSessionDAO userSessionDAO, PNPConnectionInfoDao pnpConnectionInfoDao, CollectionMasterService collectionMasterService, TenantMasterDAO tenantMasterDAO,\n                                              HttpClientService httpClientService, CaasConnectorConfigDAO caasConnectorConfig) {\n        this.userSessionDAO = userSessionDAO;\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n        this.collectionMasterService = collectionMasterService;\n        this.tenantMasterDAO = tenantMasterDAO;\n        this.httpClientService = httpClientService;\n        this.connectorConfigDAO = caasConnectorConfig;\n        for (GainsightAccountService gainsightAccountService : gainsightAccountServices) {\n            GAINSIGHT_ACCOUNT_SERVICE_MAP.put(gainsightAccountService.oauthType(), gainsightAccountService);\n        }\n    }\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"23bf72b5-0f50-4b14-bd0e-cb85230ae232","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":202,"endLine":221,"content":"sNotEmpty(objectDefinitionOfCurrentObject));\n\n        Map<String, ObjectDefinition> metadata = Collections.singletonMap(currentObject, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinitionOfCurrentObject, ObjectDefinition.class));\n        fieldsSet.addAll(metadata.get(currentObject).getFields());\n      } catch (Exception e) {\n        log.error(\"Exception occurred while trying to initiate metadata refresh:{}\", e);\n        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Exception occurred while trying to initiate metadata refresh : \" + e.getMessage()));\n      }\n    }\n\n    // Fetch and convert source metadata to OMD if available\n    metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n    Map<String, Object> objectDefinition = fetchMetadataFromSource(metadataEngineConfig, pnpConnectionsInfo, objectName);\n    log.info(\"Metadata fetched from source for connectionId:{} and objectName:{} with metadata present: {}\", connectionId, objectName, MapUtils.isNotEmpty(objectDefinition));\n\n    Map<String, ObjectDefinition> metadata = Collections.singletonMap(objectName, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n    fieldsSet.addAll(metadata.get(objectName).getFields());\n    metadata.get(objectName).setFields(fieldsSet.stream().collect(Collectors.toList()));\n\n    if (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0764fc92-f782-4b08-a9fa-042af9013b33","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":108,"endLine":131,"content":"tConnectionId());\n    try {\n      MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n      Optional<ResourceConfig> optionalResourceConfig = getResourceConfig(ductJobMapping);\n      if (!optionalResourceConfig.isPresent()) {\n        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n      }\n      ResourceConfig resourceConfig = optionalResourceConfig.get();\n      ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n      PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n      Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n      Map<String, Object> paginationInfo = null;\n      Map<String, String> queryParam = new HashMap<>();\n      AuthService authService = new AuthServiceImpl();\n\n      CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.FRESHDESK);\n      Map<String, GSFieldDefinition> fieldNameMetaMap = nullSafeList(objectDefinition.getFields())\n          .stream()\n          .collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n\n\n      boolean filteringPossibleOnUpdatedAt = filteringPossibleOnUpdatedAt(resourceConfig);\n      Criteria modifiedCriteria = null;\n      if (filteringPossibleOnU","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c5c2c16-1dc9-4d7c-98dc-10016cab690c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":320,"endLine":349,"content":"tion metadata not exist for {}\", gainsightHubspotFieldDescription.getName());\n            }\n\n            if (BooleanUtils.isTrue(gainsightHubspotFieldDescription.getMultiValued()))\n                meta.put(MULTI_VALUED, true);\n\n\n            metaProperties.put(SOURCE_COMPLEX_TYPE, gainsightHubspotFieldDescription.getFieldType());\n            metaProperties.put(DATA_PREVIEW_AVAILABLE, true);\n            if (complexTypeMappings.containsKey(gainsightHubspotFieldDescription.getFieldType()))\n                metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(gainsightHubspotFieldDescription.getFieldType()).getValue());\n            meta.put(PROPERTIES, metaProperties);\n\n\n            fieldDefinition.put(META, meta);\n            fields.add(fieldDefinition);\n        }\n        objectDefinition.put(FIELDS, fields);\n        return objectDefinition;\n    }\n\n    private static void handleSpecialHandlingForPickList(Map gsFieldDefinition, List<Object> pipelineValues) {\n        List<Map> picklistOptions = new ArrayList<>();\n        for (Object obj : pipelineValues) {\n            Map<String, Object> actualValues = (Map<String, Object>) obj;\n            if (actualValues.containsKey(STAGES)) {\n                List<Map<String, Object>> hubspotOptionsMap = (List<Map<String, Object>>) actualValues.get(\"stages\");\n                for (Map<String, Object> hubspotOptions : hubspotOptionsMap) {\n                    Map<String, Object> picklistOption = new HashMap<>();\n                    picklistOptio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9e18e1c-690e-4c55-8f91-344e65eddae3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":209,"endLine":236,"content":"rojectId);\n                List<Object> authProjectList = WebClient.makeRestCall(apiEndpoint, HttpMethod.GET, null, List.class, null, getHeaders(accessToken));\n                List<AuthProject> authProjects = GainsightCollectionUtils.nullSafeList(authProjectList).stream()\n                        .map(i -> MAPPER.convertValue(i, AuthProject.class)).collect(Collectors.toList());\n                for (AuthProject authProject : authProjects) {\n                    for (InstanceMasterDetail instanceMasterDetail : authProject.getInstances()) {\n                        if (isInstanceSupported(InstanceType.getInstance(instanceMasterDetail.getInstanceType()), isCCEnabled, isCEEnabled, isPXEnabled)) {\n                            ssoInstances.add(instanceMasterDetail);\n                        }\n                    }\n                }\n                retry = false;\n                LOGGER.info(\"Successfully obtained instances from SSO for projectId: {}\", authProjectId);\n            } catch (Exception e) {\n                --maxRetry;\n                reGenerateB2BToken = true;\n                LOGGER.error(\"Exception occurred while getting instances from SSO {}\", e.getMessage(), e);\n            }\n        }\n        return ssoInstances;\n    }\n\n    private static boolean isInstanceSupported(InstanceType instanceType, boolean isCCEnabled, boolean isCEEnabled, boolean isPXEnabled) {\n        if (Objects.isNull(instanceType)) {\n            return false;\n        }\n        switch (instanceType) {\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dfb1628-859c-4f64-ac38-d336e6c9f6cf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":471,"endLine":495,"content":"CATION_JSON));\n            target.setHeader(\"requestInfo\", requestInfo);\n            target.setHeader(\"secret\", gsnapSecret);\n            LOGGER.info(\"Calling Galaxy resolution API to add default company mapping for {}. Url --> {}, tenantId --> {}\", pnpConnectionsInfo.getConnectionType(), url, RequestContextProvider\n                    .getTenantId());\n            HttpResponse response = client.execute(target);\n            LOGGER.info(\"Response received from Galaxy resolution API. Status --> {}, Body --> {}\", response.getStatusLine().getStatusCode(), EntityUtils.toString(response.getEntity()));\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to create resolution bean\", e);\n        } finally {\n            IOUtils.closeQuietly(client);\n        }\n    }\n\n    private Pair<String, String> verifyDynamics(String resourceUri, BaseTokenDetail baseTokenDetail) {\n        try {\n            LOGGER.info(\"Inside verifyDynamics()\");\n            String accessToken = CryptHandler.getInstance().decrypt(baseTokenDetail.getAccessToken());\n            httpClientService.setTimeout(10000);\n            Map<String, Object> header = Maps.newHashMap();\n            header.put(\"Authorization\", \"Bearer \" + accessToken);\n            LOGGER.info(\"Making WhoAmI call to verify. ResourceUri: {}\", resourceUri);\n            Response response = httpClientService.get(resourceUri + \"/api/data/v9.0/WhoAmI\", header);\n            if (response.getStatus() != 200) {\n                throw new SystemExcepti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"294f1504-46af-40af-9a29-ff84ffa3d363","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":424,"endLine":441,"content":"      FileMerger.mergeFiles(failedFiles, mergedFile);\n                        DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n                        ductResponse.setExternalErrorFileLocation(mergedFile.getName());\n                    }\n                    break;\n                case PARTIAL_SUCCESS:\n                    if (successfulFiles.size() > 0) {\n                        mergedFile = new File(successfulFiles.get(0).getParent() + UCConstants.FORWARD_SLASH + GainsightUtils.getRandomUUID() + \"_success.csv\");\n                        FileMerger.mergeFiles(successfulFiles, mergedFile);\n                        DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n                        ductResponse.setExternalSuccessFileLocation(mergedFile.getName());\n                    }\n                    if (failedFiles.size() > 0) {\n                        mergedFile = new File(failedFiles.get(0).getParent() + UCConstants.FORWARD_SLASH + GainsightUtils.getRandomUUID() + \"_failure.csv\");\n                        FileMerger.mergeFiles(failedFiles, mergedFile);\n                        DuctS3Utility.uploadFilesOnS3(ductJobMapping.ge","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c223b57-ff5e-414a-a379-90c034dfb074","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":360,"endLine":390,"content":"xtPageToken());\n    return queryAPIResponseBean;\n  }\n\n  private File validateSapDatasphereWriteBackPayload(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> objectAttributes, Map.Entry<String, Object> objectLevelOperation) throws CaasException {\n    File file;\n    try {\n      log.info(\"[SAP DATASPHERE] Starting validation for write back Payload {}\", ductJobMapping.getJobId());\n      StopWatch stopWatch = new StopWatch();\n      stopWatch.start();\n\n      validateMappings(ductJobMapping, objectAttributes.values().iterator().next().getFields(), DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()));\n\n      validateS3Info(ductJobMapping);\n      validateIfFilePresent(ductJobMapping);\n      file = getFileFromS3(ductJobMapping);\n      validateMappedFieldsAndCsv(ductJobMapping, file);\n      validateHeadersFieldsAndMappings(ductJobMapping, file);\n      stopWatch.stop();\n      log.info(\"[SAP DATASPHERE] Completed validation write back Payload {} in :{} seconds\", ductJobMapping.getJobId(), stopWatch.getTotalTimeSeconds());\n      return file;\n    } catch (CaasException ex) {\n      log.error(\"Exception in validation 1 \", ex);\n      throw ex;\n    } catch (Exception e) {\n      log.error(\"Exception in validation 2 \", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n    }\n  }\n\n  private void validateMappings(DuctJobMapping","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3e436416-b9a0-4569-8f7e-62be0d6cd97f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/SchedulerDetails.java","startLine":1,"endLine":71,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Created by: santa\n * Created Date: 23/6/14 6:01 PM.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class SchedulerDetails implements Serializable {\n  private static final long serialVersionUID = -1L;\n  private RunType type;\n  private Date startDate;\n  private Date endDate;\n  private RunFrequency period;\n  private String periodValue;\n  private boolean isRecursive;\n  private String month;\n  private String dayOfMonth;\n  private String dayOfWeek;\n  private String cronExpression;\n  /**\n   * The name of the timezone in which schedule operates  For Example, America/Los Angeles\n   */\n  private String timeZoneName = \"UTC\";\n\n  public RunType getType() {\n    return type;\n  }\n\n  public void setType(RunType type) {\n    this.type = type;\n  }\n\n  public Date getStartDate() {\n    return startDate;\n  }\n\n  public void setStartDate(Date startDate) {\n    this.startDate = startDate;\n  }\n\n  public Date getEndDate() {\n    return endDate;\n  }\n\n  public void setEndDate(Date endDate) {\n    this.endDate = endDate;\n  }\n\n  public RunFrequency getPeriod() {\n    return period;\n  }\n\n  public void setPeriod(RunFrequency period) {\n    this.period = period;\n  }\n\n  public String getPeriodValue() {\n    return periodValue;\n  }\n\n  public void setPeriodValue(String periodValue) {\n    this.pe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c057c2d4-c271-42a7-8259-61ee0c3ab11a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/Operators.java","startLine":1,"endLine":25,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.enums;\n\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport exception.SystemException;\nimport org.apache.http.HttpStatus;\n\nimport java.util.Arrays;\n\npublic enum Operators {\n    EQ(\"=\", FilterOperator.EQ, \"$left = $right\", \"$left = $right\", \"$left = $right\"),\n    NE(\"!=\", FilterOperator.NE, \"$left <> $right\", \"$left <> $right\", \"$left <> $right\"),\n    LT(\"<\", FilterOperator.LT, \"$left < $right\", \"$left < $right\", \"$left < $right\"),\n    LTE(\"<=\", FilterOperator.LTE, \"$left <= $right\", \"$left <= $right\", \"$left <= $right\"),\n    GT(\">\", FilterOperator.GT, \"$left > $right\", \"$left > $right\", \"$left > $right\"),\n    GTE(\">=\", FilterOperator.GTE, \"$left >= $right\", \"$left >= $right\", \"$left >= $right\"),\n    IN(\"IN\", FilterOperator.IN, \"$left IN ($right)\", \"$left IN ($right)\", \"$left IN ($right)\"),\n    NOT_IN(\"Not In\", FilterOperator.NOT_IN, \"$left NOT IN ($right)\", \"$left NOT IN ($right)\",\"$left NOT IN ($right)\"),\n    LIKE(\"Like\", FilterOperator.CONTAINS, \"$left LIKE $right\", \"$left LIKE $right\", \"$left LIKE $right\"),\n    CONTAINS(\"Like\", FilterOperator.CONTAINS, \"$left ILIKE $right\", \"$left LIKE $right\", \"$left LIKE $right\"),\n    NOT_CONTAINS(\"Like\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $right\", \"$left NOT LIKE $right\", \"$left NOT LIKE $right\"),\n    DOES_NOT_CONTAINS(\"Like\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $rig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9ee79f7-f738-4849-9fd9-aef507c5d030","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":187,"endLine":211,"content":"boolean isPXEnabled = FeatureToggleUtil.evaluateFeature(DuctCommonConstants.PX_SSO_ENABLED, RequestContextProvider.getTenantId(), true);\n\n        if (!isCCEnabled && !isCEEnabled && !isPXEnabled) {\n            return Collections.emptyList();\n        }\n\n        List<InstanceMasterDetail> ssoInstances = new ArrayList<>();\n        String authProjectId = OrganizationInfo.info().getAuthProjectId();\n        if (StringUtils.isEmpty(authProjectId)) {\n            LOGGER.error(\"authProject not found for tenant: {}\", RequestContextProvider.getTenantId());\n            return ssoInstances;\n        }\n\n        boolean retry = true;\n        boolean reGenerateB2BToken = false;\n        int maxRetry = SSO_INSTANCES_EXTRACT_MAX_RETRY;\n        while (retry && maxRetry >= 0) {\n            try {\n                String accessToken = getGSB2BToken(authProjectId, reGenerateB2BToken);\n                GainsightPrecondition.assertTrue(StringUtils.isNotEmpty(accessToken), CaasValidationCode.INTERNAL_ERROR, CaasValidationCode.ERROR_FETCHING_ACCESS_TOKEN.getUserText());\n\n                LOGGER.info(\"Getting instances from SSO for project: {}\", authProjectId);\n                String apiEndpoint = String.format(SSO_INSTANCES_URI, DeploymentProperties.getDeploymentProperties().getValue(\"ssoserver_base_url\"), authProjectId);\n                List<Object> authProjectList = WebClient.makeRestCall(apiEndpoint, HttpMethod.GET, null, List.class, null, getHeaders(accessToken));\n                List<AuthProject> authPr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90057177-bdf6-4b35-a500-7eb7815b4ab6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":252,"endLine":277,"content":"    boolean validColumnMapping) {\n        DuctJobMapping ductJobMapping = new DuctJobMapping();\n        populateObject(ductJobMapping, validObject);\n        ductJobMapping.setConnectorType(ConnectorType.HUBSPOT);\n        Map<String, Object> properties = new HashMap<>();\n        if (objectLevelOperation != null)\n            properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelOperation);\n        ductJobMapping.setProperties(properties);\n        ductJobMapping.setColumnMappings(createColumnMapping(objectsForMandatoryMapping, validColumnMapping));\n        return ductJobMapping;\n    }\n\n    private void populateObject(DuctJobMapping ductJobMapping, boolean validObject) {\n        ColumnMapping columnMapping = new ColumnMapping();\n        columnMapping.setObjectName(validObject ? \"CONTACT\" : \"RANDOM\");\n        ductJobMapping.setColumnMappings(new ArrayList<>(Arrays.asList(columnMapping)));\n    }\n\n    private List<ColumnMapping> createColumnMapping(List<String> objectsForMandatoryMapping, boolean validColumnmapping) {\n        List<ColumnMapping> columnMappingList = new ArrayList<>();\n        for (String object : objectsForMandatoryMapping) {\n            if (validColumnmapping)\n                columnMappingList.add(new ColumnMapping(object, \"HEADER\", \"hs_object_id\", \"hs_object_id\", null, null, new HashMap<>()));\n            else\n                columnMappingList.add(new ColumnMapping(object, null, \"hs_object_id\", \"hs_object_id\", null, null, new HashMap<>()));\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ee19873a-fe97-4fe5-bb85-925300226d66","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/Client.java","startLine":25,"endLine":58,"content":"pringframework.boot.autoconfigure.gson.GsonAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\nimport org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.test.context.ActiveProfiles;\n\nimport java.util.Collection;\nimport java.util.Optional;\n\n@ActiveProfiles(\"client\")\n@Slf4j\n@SpringBootApplication\n@EnableAutoConfiguration(exclude = {\n        SecurityAutoConfiguration.class,\n        DataSourceAutoConfiguration.class,\n        DataSourceTransactionManagerAutoConfiguration.class,\n        MongoAutoConfiguration.class,\n        MongoDataAutoConfiguration.class,\n        BatchAutoConfiguration.class,\n        JpaRepositoriesAutoConfiguration.class,\n        RedisAutoConfiguration.class,\n        SpringDataWebAutoConfiguration.class,\n        GsonAutoConfiguration.class,\n        RabbitAutoConfiguration.class,\n        QuartzAutoConfiguration.class\n})\n@Import(DuctClientConfiguration.class)\npublic class Client {\n    public static void main(String[] args) throws ParseException {\n        ConfigurableApplicationContext context =","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c4f36a1-836f-4555-aecd-458b806461af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":33,"endLine":56,"content":"source, List<String> showFields, Map<String, Object> extResponse) {\n        List<GSFieldDefinition> projections = resource.getFields().stream().filter(f -> showFields.contains(f.getDbName())).collect(Collectors.toList());\n        List<Map<String, Object>> records = new ArrayList<>();\n        EcosystemResponse ecosystemResponse = new EcosystemResponse();\n        JsonArray iterator;\n        JsonObject jsonObject;\n        try {\n            jsonObject = new JsonParser().parse(MAPPER.writeValueAsString(extResponse)).getAsJsonObject();\n            iterator = jsonObject.getAsJsonArray(\"entries\");\n            if (iterator != null) {\n                iterator.iterator().forEachRemaining((JsonElement jsonElement) -> {\n                    JsonObject documentObject = jsonElement.getAsJsonObject();\n                    //vds present\n                    if (documentObject.get(VDS) != null\n                            && !documentObject.get(VDS).isJsonNull()\n                            && documentObject.get(VDS).isJsonArray()) {\n                        JsonArray vdsArray = documentObject.get(VDS).getAsJsonArray();\n                        vdsArray.iterator().forEachRemaining(vds -> {\n                            Map<String, Object> record = new HashMap<>();\n                            JsonObject vdsObject = vds.getAsJsonObject();\n\n                            for (GSFieldDefinition fieldInfo : projections) {\n                                String jsonPath = fieldInfo.getDbName();\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"538ae3b1-cc60-4126-9fa9-96c0ff563e7b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":666,"endLine":686,"content":"nfo.getConnectionType());\n                    if (!GainsightCollectionUtils.nullSafeList(pnpConnectionsInfoList).isEmpty()) {\n                        throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.MULTIPLE_CONNECTION_NOT_ALLOWED.getUserText()));\n                    }\n                }\n                processConnectionForSFDC(pnpConnectionsInfo);\n                // updateConnection(true, pnpConnectionsInfo);   to do (multiconnection)\n                break;\n            case DYNAMICS:\n                isCrmConnectedOrDisabled(DYNAMICS);\n                processConnectionForDynamicsAndHubspot(pnpConnectionsInfo);\n                break;\n\n            case GAINSIGHT_PX:\n                if (!FeatureToggleUtil.evaluateBooleanFeature(DuctCommonConstants.MULTI_PX_ENABLED, RequestContextProvider.getTenantId())) {\n                    isCrmConnected(ConnectorType.GAINSIGHT_PX);\n                }\n                assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(\"API_KEY\")), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_API_KEY.getUserText());\n                UCAptrinsicChannelService ucAptrinsicChannelService = new UCAptrinsicChannelServiceImpl(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(\"API_KEY\")));\n                assertNotNull(pnpConnectionsInfo.getProperties().get(DuctCommonConstants.PX_URL), CaasValidationCode.INVALID_INPUT);\n                assertTrue","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3eae99c6-f623-4dfc-91db-cfe33486ca50","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":59,"endLine":88,"content":"tMapper();\n    private static com.fasterxml.jackson.databind.ObjectMapper MAPPER = new com.fasterxml.jackson.databind.ObjectMapper();\n    public static final HashSet<ConnectorType> IPAAS_CONNECTORS = new HashSet<>(Arrays.asList(ZENDESK, FRESHDESK, SERVICENOW, ZOHO, ZUORA, INTERCOM, PIPEDRIVE, JIRA));\n\n    public static void getFieldsFromFilter(Criteria criteria, Set<String> filterFields) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filter : criteria.getFilters()) {\n                    getFieldsFromFilter(filter, filterFields);\n                }\n                return;\n            }\n            filterFields.add(criteria.getFieldName());\n        }\n    }\n\n    public static File downloadAndGetLocalFilePath(String preSignedS3URL) throws CaasException {\n        URL url1;\n        HttpURLConnection httpConn = null;\n        InputStream inputStream = null;\n        FileOutputStream outputStream = null;\n        File zippedLocalFile = null;\n        File localFile = null;\n        try {\n            url1 = new URL(preSignedS3URL);\n            httpConn = (HttpURLConnection) url1.openConnection();\n            int responseCode = httpConn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                inputStream = httpConn.getInputStream();\n                zippedLocalFile = File.createTempFile(String.format(\"UC_S3_to_Local_Zipped_%s_%d\", RandomStringUtils.randomAlphanumeric(5), System.currentTime","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1414ca18-7fcd-48ea-8926-b96bf822f5ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":83,"endLine":112,"content":"ect().get(pathArray[depth]) == JsonNull.INSTANCE\n                        || !jsonElement.getAsJsonObject().get(pathArray[depth]).isJsonObject()) {\n                    log.info(\"No data for the json path specified in the field info for {}. setting as null in the parquet.\", fieldInfo);\n                    return null;\n                } else {\n                    jsonElement = jsonElement.getAsJsonObject().get(pathArray[depth]).getAsJsonObject();\n                    depth++;\n                }\n            }\n\n            if (!jsonElement.isJsonArray()) {\n                Matcher matcher = pattern.matcher(pathArray[depth]);\n                // in case last pathArray has indexed value like value[0] so this will remove [0]\n                jsonElement = (matcher.find()) ?\n                        jsonElement.getAsJsonObject().get(pathArray[depth].replace(matcher.group(0), \"\"))\n                        : jsonElement.getAsJsonObject().get(pathArray[depth]);\n            }\n            if (jsonElement == null || jsonElement.isJsonNull()) {\n                return null;\n            }\n\n            if (jsonElement.isJsonArray() && !isMultiValued) {\n                //using path extract list of string\n                if (jsonElement.getAsJsonArray().size() > 0) {\n                    return jsonElement.getAsJsonArray().get(0).getAsString();\n                } else {\n                    return null;\n                }\n            } else if (isMultiValued) {\n                return extractMultipleValues(j","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"737e3ea5-48a6-480c-bf0a-55e357bc3975","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":115,"endLine":135,"content":"erOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n    private Set<String> getAvailableRelationships(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> baseAttributes) {\n        Set<String> availableRelationships = new HashSet<>();\n        for (GSFieldDefinition field : baseAttributes.get(ductRequestDTO.getResourceName()).getFields()) {\n            if (field.getMeta().getLookupDetail() != null) {\n                availableRelationships.add(field.getMeta().getLookupDetail().getLookupId());\n            }\n        }\n        return availableRelationships;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7b521d7-14da-4b05-be47-0beaaffc7725","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ServicenowToOMDConverterServiceImpl.java","startLine":75,"endLine":100,"content":"ldDefinition(field, STRING, dataTypeMappings, complexTypeMappings,\n                                    field.get(ELEMENT).asText() + UCConstants.PERIOD + item,\n                                    field.get(COLUMN_LABEL).asText() + UCConstants.SPACE + StringUtils.capitalize(item), true);\n                            if (null != fieldDefinition) {\n                                fieldFromObjectDefinition.add(fieldDefinition);\n                            }\n                        }\n                );\n            } else {\n                Map<String, Object> fieldDefinition = populateFieldDefinition(field, originalDataType, dataTypeMappings, complexTypeMappings,\n                        field.get(ELEMENT).asText(), field.get(COLUMN_LABEL).asText(), false);\n                if (null != fieldDefinition) {\n                    fieldFromObjectDefinition.add(fieldDefinition);\n                }\n            }\n        }\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n    }\n\n    private Map<String, Object> populateFieldDefinition(JsonNode field, String originalDataType, List<DataTypeMappings> dataTypeMappings,\n                                                        Map<String, ComplexType> complexTypeMappings, String fieldName, String fieldDisplayName,\n                                                        boolean isNormalizableInternalType) {\n\n        DataTypeMappings dataTypeMappingsForField;\n        Map<String, Object> fieldDefinition = new HashMap();\n        Map<String, O","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1775ab9-f419-439c-b6da-b228783c723e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":380,"endLine":407,"content":"caasConnectorConfig) {\n    Criteria defaultCriteria = getDefaultFallbackCriteria();\n    try {\n      log.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUtils.convertObjectToJson(criteria));\n      if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters()) || (Objects.isNull(criteria.getFieldName()) && CollectionUtils.isEmpty(criteria.getFilters()))) {\n        return defaultCriteria;\n      }\n\n      Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n      Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n      String dateTimeFormat = getDateTimeFormat(caasConnectorConfig);\n      Criteria modifiedCriteria = null;\n\n      // flatten the criteria to get all the nested filters\n      List<Criteria> flattenedCriteria = flattenCriteria(criteria);\n\n      // filter only those criteria which are externally filterable\n      List<Criteria> flattenedRequiredCriteria = nullSafeList(flattenedCriteria)\n          .stream()\n          .filter(flatCriteria -> externalFilterableFieldsMap.containsKey(flatCriteria.getFieldName()))\n          .collect(Collectors.toList());\n\n      // In this case we have at least one filter which is externally filterable\n      if (flattenedCriteria.size() == flattenedRequiredCriteria.size()) {\n        int size = flattenedCriteria.size();\n        switch (size) {\n          case 1:\n            modifiedCriteria = DuctUtil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2e818e1b-a120-4610-9d12-2093129b6d93","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":133,"endLine":156,"content":"pl();\n      Map<String, GSFieldDefinition> fieldNameMetaMap = nullSafeList(objectDefinition.getFields())\n          .stream()\n          .collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n      Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n      boolean generateQueryBodyForRequest = isQueryBodyRequiredForRequest(apiConfigAttributes);\n      HttpRequestBase httpClient;\n      CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.INTERCOMV2);\n\n      // this will be a simple get request without any request body\n      if (!generateQueryBodyForRequest) {\n        if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n          paginationInfo = new HashMap<>();\n          if (paginationDetails.isUrl()) {\n            paginationInfo.put(URL, ductJobMapping.getNextPageToken());\n          } else if (paginationDetails.isQueryParam()) {\n            queryParam.put(apiConfigAttributes.getPaginationDetails().getRequestKey(), ductJobMapping.getNextPageToken());\n          }\n        }\n        httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n            apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam);\n      } else {\n        // this will be a post request without request body\n        caasConnectorConfig = caasConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78540e93-7122-484c-8297-41295d9ff6a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":26,"endLine":54,"content":"mport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.CONNECTORS;\nimport static com.gainsight.duct.constants.DuctConstants.METADATA_CONFIG_CACHE_KEY;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b2f5fd85-f066-4ee3-9419-fce91fc91175","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1545,"endLine":1564,"content":"     accessKeyQuery.accessType(\"SEGMENT_IO\");\n        accessKeyQuery.deleted(false);\n\n        AccessKeyInfo accessKeyInfo = accessKeyDao.findOne(accessKeyQuery);\n        return (null != accessKeyInfo);\n    }\n\n    private void commonUpdateValidation(PNPConnectionsInfo pnpConnectionsInfoFromDb, List<PNPConnectionsInfo> existingConnections, PNPConnectionsInfo connectionsInfo) throws CaasException {\n        assertNotNull(pnpConnectionsInfoFromDb, CaasValidationCode.CONNECTOR_CONNECTION_INFO_NULL, \"ConnectionInfo does not exist.\");\n        assertTrue(GainsightPrecondition.scanAndNotBlank(connectionsInfo.getConnectionName(), true), CaasValidationCode.INVALID_CLIENT_INPUT, \"Invalid/empty connection name passed\");\n        for (PNPConnectionsInfo pnpConnectionsInfo : GainsightCollectionUtils.nullSafeList(existingConnections)) {\n            if (pnpConnectionsInfo.getConnectionName().equals(connectionsInfo.getConnectionName())\n                    && !pnpConnectionsInfo.getConnectionId().equalsIgnoreCase(pnpConnectionsInfoFromDb.getConnectionId())) {\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.CONNECTION_NAME_ALREADY_EXISTS.getUserText(), HttpStatus.SC_BAD_REQUEST));\n            }\n        }\n    }\n\n    private static void updateConnectionProperties(PNPConnectionsInfo pnpConnectionInfo, CaasConnectorConfig caasConnectorConfig, PNPConnectionsInfo pnpConnectionsInfoFromDB) {\n        if (AuthorizationType.CUSTOM.equals(pnpConnectionInfo.getAutho","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80416d76-66e3-430a-808d-98a0f9dd07bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctCallBackController.java","startLine":49,"endLine":55,"content":"     JobDetails jobDetails = dhResponseDTO.getJobDetails();\n        log.info(\"External job ack {}\", jobDetails);\n        IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload = new IpaasBulkDownloadCallbackPayload(jobDetails.getTenantId(), jobId, RequestContextProvider.getRequestId());\n        ipaasBulkFileDownloadProducerService.pushMessageForFileDownloadDH(ipaasBulkDownloadCallbackPayload);\n        return new ResponseObj(true);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed79f3ae-0cb0-441c-b7a9-2fbfc5dd622d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/MetadataCommonUtil.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.utils.GainsightCollectionUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FIELD_NAME;\n\npublic class MetadataCommonUtil {\n\n    public static final String OVERRIDE_KEY = \"GS___OVERRIDE_KEY\";\n    public static final String OVERRIDE_KEY_VALUE = \"GS___OVERRIDE_KEY_VAL\";\n\n    public static final String EXCLUDE_KEY = \"GS___EXCLUDE_KEY\";\n    public static final String EXCLUDE_KEY_VALUE = \"GS___EXCLUDE_KEY_VAL\";\n\n    public static void overrideAttributesFromConfig(List<CaasObjectAttributesConfig> configAttributes, Map metadata) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        List<Map> gsFields = objectMapper.convertValue(metadata.get(FIELDS), new TypeReference<List<Map>>() {\n        });\n        List<Map<String, Object>> overrideAttribute;\n        Map<String, Object> tempOverrideAttribute;\n        for (CaasObjectAttributesConfig configAttribute : configAttributes) {\n            overrideAttribute = GainsightCollectionUtils.nullSafeList(configAt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eacd9828-8725-4db0-9699-d02f2e088f62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/UpdateJiraAttributes.java","startLine":75,"endLine":95,"content":"er backupCsvWriter) {\n        log.info(\"Started for tenant: {}\", tenantId);\n        boolean continueIt = UCCommonUtility.initRequestContextSuccessfully(tenantId);\n        if (!continueIt) {\n            log.error(\"Error initializing context\");\n            writeOutData(csvWriter, tenantId, \"Failed\", \"Error initializing context\");\n        }\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesTenantConfigList = caasObjectAttributesTenantConfigDAO.getConfigAttributes(ConnectorType.JIRA, tenantId);\n        for(CaasObjectAttributesTenantConfig caasObjectAttributesTenantConfig : caasObjectAttributesTenantConfigList){\n            writeOutBackup(backupCsvWriter, tenantId, caasObjectAttributesTenantConfig);\n            List<EnhancedGSFieldDefinition> enhancedGSFieldDefinitions = caasObjectAttributesTenantConfig.getDefaultObjectAttributes();\n            List<Map<String, Object>> overrideAttribute  = caasObjectAttributesTenantConfig.getOverrideAttribute();\n            for(EnhancedGSFieldDefinition enhancedGSFieldDefinition : enhancedGSFieldDefinitions){\n                try {\n                    Map<String, Object> properties = enhancedGSFieldDefinition.getMeta().getProperties();\n                    if(properties == null){\n                        continue;\n                    }\n                    for (Map.Entry<String, Object> entry : properties.entrySet()) {\n                        if (entry.getValue() instanceof String) {\n                            String value = (String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2b51122-17c8-4eca-a67a-2502a901645c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasFeatureToggleUtility.java","startLine":62,"endLine":89,"content":"Region);\n        map.put(\"orgToken\", decryptKey(orgToken));\n        CE_DETAILS__LIST.put(tenantRegion, map);\n        return (CE_DETAILS__LIST.get(tenantRegion)).get(\"orgToken\").toString();\n    }\n\n    public static String decryptKey(String key) {\n        StandardPBEStringEncryptor propertiesEncryptor = new StandardPBEStringEncryptor();\n        propertiesEncryptor.setPassword(CoreUtils.getProperty(Constants.GS_PROPS_PWD));\n        return propertiesEncryptor.decrypt(key);\n    }\n\n    public static TenantRegion getTenantRegion() {\n        TenantRegion tenantRegion = TENANT_REGION_LIST.get(RequestContextProvider.getTenantId());\n        if (null == tenantRegion) {\n            Collection<String> regions = FeatureToggleUtil.evaluateMultiVariateFeature(TENANT_REGION_FEATURE_NAME, RequestContextProvider.getTenantId());\n            Optional<String> region = regions.stream().findFirst();\n            if (region.isPresent()) {\n                tenantRegion = TenantRegion.getTenantRegion(region.get());\n            } else {\n                tenantRegion = TenantRegion.DEFAULT;\n            }\n            TENANT_REGION_LIST.put(RequestContextProvider.getTenantId(), tenantRegion);\n        }\n        return tenantRegion;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"860f86b2-c721-491c-997b-a3bc4eedc0e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":136,"endLine":156,"content":"ng = DuctDaoUtils.setBaseFields(r, new GsExternalSystemErrorMapping());\n            gsExternalSystemErrorMapping.setGsErrorCode(r.getString(GS_ERROR_CODE_COLUMN));\n            gsExternalSystemErrorMapping.setGsErrorMessage(r.getString(GS_ERROR_MESSAGE_COLUMN));\n            gsExternalSystemErrorMapping.setExternalSystemErrorCode(r.getString(EXTERNAL_SYSTEM_ERRORCODE_COLUMN));\n            gsExternalSystemErrorMapping.setExternalSystemErrorMessage(r.getString(EXTERNAL_SYSTEM_ERROR_MESSAGE_COLUMN));\n            gsExternalSystemErrorMapping.setExceptionStackTrace(r.getString(EXCEPTION_STACKTRACE_COLUMN));\n            String properties = r.getString(PROPERTIES_COLUMN);\n            if (properties != null) {\n                gsExternalSystemErrorMapping.setProperties(JsonUtil.readObject(properties, Map.class));\n            }\n            if(StringUtils.isNotEmpty(r.getString(CONNECTOR_TYPE_COLUMN))){\n                gsExternalSystemErrorMapping.setConnectorType(ConnectorType.valueOf(r.getString(CONNECTOR_TYPE_COLUMN)));\n            }\n            gsExternalSystemErrorMapping.setJobId(r.getString(JOB_ID_COLUMN));\n            gsExternalSystemErrorMapping.setRequestId(r.getString(REQUEST_ID_COLUMN));\n            gsExternalSystemErrorMapping.setTenantId(r.getString(TENANT_ID_COLUMN));\n            gsExternalSystemErrorMapping.setMessage(r.getString(MESSAGE_COLUMN));\n\n            String responsePayload = r.getString(RESPONSE_PAYLOAD_COLUMN);\n            if (responsePayload != null) {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32e85841-baa3-4770-86c4-7ce1ebe08b4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":272,"endLine":290,"content":"           } else {\n                log.info(\"copyManager did not yield any result with multipart execution. Will proceed with dummy file creation later on!\");\n            }\n        } catch (SQLException e) {\n            throw new SystemException(e.getMessage(), e);\n        } finally {\n            if (jdbcConnection != null) {\n                jdbcConnection.prepareStatement(\"drop stage if exists \" + tempStageName).executeQuery();\n                jdbcConnection.close();\n            }\n            if (resultSet != null) {\n                resultSet.close();\n            }\n            if (preparedStatement != null) {\n                preparedStatement.close();\n            }\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09abdf9e-8a31-4298-ab94-f526766f303a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":53,"endLine":82,"content":"nal String DATA = \"data\";\n    private static final String ZUORA_EXTRACT_TASK = \"CaasZuoraV2Extract\";\n\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.ZUORAV2.equals(connectorType) && !isIpaas;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_F","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3210128-2c39-44e2-99ed-642c6f45b05a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":210,"endLine":230,"content":"g, String> relationshipNameToObjectNameMap = createRelationshipNameToObjectNameMap(ductJobMapping, baseAttributes);\n        Set<String> relationshipFieldsAlreadyAdded = new HashSet<>();\n        String relationBaseObject;\n        Map<String, ObjectDefinition> relationshipObjectAttributes;\n        String relationshipName;\n        Set<String> fieldList = new HashSet<>(ductJobMapping.getFields());\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()))\n            fieldList.addAll(DuctUtils.getFieldListFromCriteria(ductJobMapping.getCriteria()));\n\n        boolean loadToDynamicsEnabled = FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId());\n        for (String field : fieldList) {\n            if (loadToDynamicsEnabled && field.contains(UCConstants.PERIOD)) {\n                String[] sourceFieldNameList = field.split(\"\\\\.\");\n                relationshipName = sourceFieldNameList[0] + UCConstants.PERIOD + sourceFieldNameList[1];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = relationshipNameToObjectNameMap.get(relationshipName);\n                    if (!baseAttributes.containsKey(relationBaseObject)) {\n                        baseAttributes.put(relationBaseObject, getObjectAttributes(relationBaseObject, pnpConnectionsInfo, false).get(relationBaseObject));\n                    }\n\n                    List<GSFieldDefinition> fields ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca649184-8012-4e41-bfb0-c5540d986cde","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":199,"endLine":212,"content":"     }\n        meta.put(FILTERABLE_IN_INTERNAL_SYSTEM, true);\n        meta.put(FILTERABLE_IN_EXTERNAL_SYSTEM, true);\n        meta.put(PATH, String.valueOf(fieldDetails.get(\"col_name\")));\n        meta.put(IS_PRIMARY_KEY, false);\n        meta.put(ACCESSIBLE, true);\n        meta.put(SORTABLE, true);\n        meta.put(GROUPABLE, true);\n        meta.putIfAbsent(ORIGINAL_DATA_TYPE, fieldDataType);\n        retMap.put(META, meta);\n        return retMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2219c19f-59d1-4e79-acfa-84787a7580b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":384,"endLine":412,"content":"Value() + FORWARD_SLASH + ductJobMapping.getTenantId()\n            );\n            if (!targetDirectory.exists()) {\n                targetDirectory.mkdirs();\n            }\n            successFile = File.createTempFile(SUCCESS, UCConstants.CSV, targetDirectory);\n            failureFile = File.createTempFile(FAILED, UCConstants.CSV, targetDirectory);\n\n            String[] headers = csvReader.readNext();\n            //Create File and add headers\n            if (null != headers) {\n                log.info(\"Creating header for success and failure files\");\n                try (CSVWriter csvWriter = new CSVWriter(new FileWriter(successFile))) {\n                    csvWriter.writeNext(headers);\n                } catch (IOException e) {\n                    log.error(\"[Dynamics] Error occurred while writing headers to success file\", headers, e.getMessage());\n                    throw e;\n                }\n\n                try (CSVWriter csvWriter = new CSVWriter(new FileWriter(failureFile))) {\n                    String[] clonedArray = Arrays.copyOf(headers, headers.length + 1);\n                    clonedArray[headers.length] = FAILURE_REASON;\n                    csvWriter.writeNext(clonedArray);\n                } catch (IOException e) {\n                    log.error(\"[Dynamics] Error occurred while writing headers to failure file\", headers, e.getMessage());\n                    throw e;\n                }\n            } else {\n                log.error(\"[Dynamics] No data found in the inpu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"382b83b5-999c-4d0c-b478-387c6716a822","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":90,"endLine":122,"content":"           caasObjectAttributesConfigDAO.dropCollection();\n            caasObjectAttributesConfigDAO.insertAll(caasObjectAttributesConfigs);\n        }\n        return true;\n    }\n\n    private boolean loadCaasObjectConfigs() throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_OBJECT_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasObjectConfig> caasObjectConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasObjectConfig>>() {\n            });\n            caasObjectConfigDAO.dropCollection();\n            caasObjectConfigDAO.insertAll(caasObjectConfigs);\n        }\n        return true;\n    }\n\n    private boolean loadCaasConnectorConfigs() throws IOException {\n        redisCacheUtility.clearCache(DuctConstants.CAAS_CONNECTION_CONFIG_CACHE_KEY);\n        ClassPathResource r = new ClassPathResource(CAAS_CONNECTOR_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasConnectorConfig> caasConnectorConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasConnectorConfig>>() {\n            });\n            caasConnectorConfigDAO.dropCollection();\n            caasConnectorConfigDAO.insertAll(caasConnectorConfigs);\n        }\n        return true;\n    }\n\n    private boolean loadCaasObjectApiConfigs() throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_OBJECT_API_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasObjectApiConf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0aa1f349-44dc-43be-852a-fab7576fb849","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":60,"endLine":103,"content":"ing, Object>> fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n    if (fields.isNull() || (!fields.isArray()) || fields.size() == 0) {\n      return;\n    }\n\n    List<Map<String, Object>> fieldsList = OBJECT_MAPPER.convertValue(fields, new TypeReference<List<Map<String, Object>>>() {\n    });\n\n\n    /**\n     * We have defined the system fields in our configuration, just need to process custom fields here\n     */\n    List<Map<String, Object>> customFieldsList = nullSafeList(fieldsList)\n        .stream()\n        .filter(Objects::nonNull)\n        .filter(field -> Objects.nonNull(field.get(\"default\")) && BooleanUtils.isFalse((Boolean) field.get(\"default\")))\n        .collect(Collectors.toList());\n\n    if (customFieldsList.isEmpty()) {\n      return;\n    }\n\n    List<Map<String, Object>> additionalFields = Lists.newArrayList();\n\n    nullSafeList(customFieldsList)\n        .stream()\n        .map(field -> generateFieldDefinitionFromFieldInfo(field, connectorConfig, objectDefinition, additionalFields))\n        .filter(Objects::nonNull)\n        .forEach(fieldFromObjectDefinition::add);\n\n    fieldFromObjectDefinition.addAll(additionalFields);\n\n  }\n\n\n  /**\n   * @param fieldInfo        {@link Map}\n   * @param connectorConfig  {@link CaasConnectorConfig\n   * @param objectDefinition {@link Map}\n   * @param additionalFields {@link List}\n   * @return {@link Map} fieldDefinition in a map format\n   * <p>\n   * Source Field -> OMD field\n   * full_nam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cf85cb9-286f-41b2-ba1f-72f337ab3ac8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCCommonUtility.java","startLine":91,"endLine":110,"content":";\n            throw new SystemException(UCValidationCode.PNP_INVALID_INPUT.getUserText());\n        }\n        return tenant;\n    }\n\n    public static String decryptKey(String key) {\n        StandardPBEStringEncryptor propertiesEncryptor = new StandardPBEStringEncryptor();\n        propertiesEncryptor.setPassword(CoreUtils.getProperty(Constants.GS_PROPS_PWD));\n        return propertiesEncryptor.decrypt(key);\n    }\n\n    public static String getApiGWUrl() {\n        String gwHost = DeploymentProperties.getDeploymentProperties().getValue(\"gnative.apigateway.fqdn\");\n        String gwPort = DeploymentProperties.getDeploymentProperties().getValue(\"gnative.apigateway.port\");\n        return \"https://\" + gwHost + (\"443\".equals(gwPort) ? \"\" : \":\" + gwPort);\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"435a9e87-fe0c-4e28-981c-8a2bd1540e38","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":223,"endLine":246,"content":", field));\n        }\n\n        return String.join(\" \", displayFieldList);\n\n    }\n\n    private void validateAllowedFieldsForWriteBack(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> metaInfoDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = null;\n        HashSet<String> fieldsRequired = null;\n        Set<String> objects = new HashSet<>();\n        objects.addAll(ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getObjectName).collect(Collectors.toList()));\n        Set<String> fieldsForWriteback = null;\n        StringBuilder errorMessageForNotAvailableFields = new StringBuilder().append(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText() + \":\");\n        StringBuilder errorMessageForReadOnlyFields = new StringBuilder().append(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText() + \":\");\n        boolean availableFieldValidationFailed = false;\n        boolean readOnlyFieldValidationFailed = false;\n        for (String object : objects) {\n            objectDefinition = metaInfoDefinitionMap.get(object);\n            fieldsRequired = new HashSet<>();\n            fieldsRequired.addAll(DuctUtils.getFieldsFromExpression(objectDefinition.getExpressionForRequiredFields()));\n            fieldsRequired.addAll(DuctUtils.getFieldsFromExpression(objectDefinition.getExpressionForUpsertKeys()));\n            List<GSFieldDefinition> fields = objectDefinition.getFields();\n            Map<String, GSFieldDefinition> fi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22d83588-5ee8-4c23-bbf1-ccd3db14210d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":93,"endLine":120,"content":"ErrorResponse(request, response, message);\n            }\n        } else {\n            secretVerified = false;\n        }\n\n        try {\n            RequestInfo requestInfo = null;\n            boolean eligibleToSwitch = false;\n            String jwtToken = request.getHeader(\"authToken\");\n            if (StringUtils.isNotEmpty(jwtToken)) {\n                if (!secretVerified) {\n                    log.info(\"Secret not verified and auth token is present, will try to decrypt.\");\n                    KeyPair kp = keystore.getHighestKey(KeyType.DEFAULT);\n                    jwtToken = CryptUtil.getSimpleCryptor().decrypt(kp, jwtToken);\n                }\n                requestInfo = tenantUserRoleTypeService.validateJWT(jwtToken);\n            }\n\n            if (requestInfo == null && secretVerified) {// if requestInfo not set yet and secret is verified\n                String encryptedRequestInfo = request.getHeader(\"requestInfo\");\n                String tenantId = request.getHeader(\"tenantId\");\n                if (StringUtils.isNotEmpty(encryptedRequestInfo)) {\n                    log.debug(\"Encrypted request info is present, will set request info from it.\");\n                    KeyPair kp = keystore.getHighestKey(KeyType.DEFAULT);\n                    String decryptedRequestInfo = CryptUtil.getSimpleCryptor().decrypt(kp, encryptedRequestInfo);\n                    requestInfo = GainsightUtils.OBJECT_MAPPER.readValue(decryptedRequestInfo, RequestInfo.class);\n                    eligibl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f508e27f-a02c-4f56-95a1-57fbfb5e6870","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasMetadataService.java","startLine":1,"endLine":34,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Aditya Agrawal\n * created on 22-May-2023\n * Base Metadata Fetch interface\n */\n\npublic interface CaasMetadataService {\n    boolean canHandle(ConnectorType connectorType, boolean isIpaas);\n    List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException;\n    Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException;\n    default Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, boolean includePicklistOptions) throws CaasException{\n        return getObjectAttributes(objectName,pnpConnectionsInfo);\n    }\n    default Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, String consumer) throws CaasException{\n        return getObjectAttributes(objectName,pnpConnectionsInfo);\n    }\n    default Map<String, ObjectDefinition> getObject","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3764ca5b-a121-426f-88e8-a2f09e3604d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/GsDuctWebApp.java","startLine":41,"endLine":79,"content":"ProducerSpringConfiguration.class)\n@EnableAutoConfiguration(exclude = {\n        SecurityAutoConfiguration.class,\n        DataSourceAutoConfiguration.class,\n        DataSourceTransactionManagerAutoConfiguration.class,\n        MongoAutoConfiguration.class,\n        MongoDataAutoConfiguration.class,\n        BatchAutoConfiguration.class,\n        JpaRepositoriesAutoConfiguration.class,\n        RedisAutoConfiguration.class,\n        SpringDataWebAutoConfiguration.class,\n        GsonAutoConfiguration.class,\n        RabbitAutoConfiguration.class,\n        QuartzAutoConfiguration.class\n})\n@Import({DuctWebConfiguration.class, UCCommonAppConfiguration.class, SwaggerConfiguration.class})\n@Slf4j\npublic class GsDuctWebApp {\n\n  @Autowired\n  private ApplicationContext applicationContext;\n\n    public static void main(String[] args) {\n       DuctCommonUtils.init(DuctAppType.WEB);\n       SpringApplication.run(GsDuctWebApp.class, args);\n       Thread waitForSometimeBeforeExitingVM = new Thread(() -> {\n           try {\n               log.info(\"Shutdown hook thread running.\");\n               Thread.sleep(2000);\n               log.info(\"Shutdown hook thread ended.\");\n           } catch (InterruptedException ignored) {log.error(\"Shutdown hook thread interrupted.\");}\n        });\n        Runtime.getRuntime().addShutdownHook(waitForSometimeBeforeExitingVM);\n    }\n\n  @EventListener(ApplicationReadyEvent.class)\n  public void startup() {\n    applicationContext.getBeanDefinitionNames();\n    JobTracer.initiali","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf406499-d1a3-4806-8a09-0d406bc08886","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":101,"endLine":128,"content":"adataCacheDao metadataCacheDao, GeneratedMetadataCacheDao generatedMetadataCacheDao,\n                            MetadataGenerationDetailsDao metadataGenerationDetailsDao, QueueProducer queueProducer, GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao) {\n    this.queueProducer = queueProducer;\n    this.gsExternalSystemErrorMappingDao = gsExternalSystemErrorMappingDao;\n    MESSAGE_INFO = new MetadataGenerationMessageInfo();\n    this.metadataEngineService = new MetadataEngineServiceImpl();\n    this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n    this.metadataEngineConfigDao = metadataEngineConfigDao;\n    this.schemaGeneratorService = schemaGeneratorService;\n    this.omdConverterFactory = omdConverterFactory;\n    this.caasObjectAttributesConfigDAO = caasObjectAttributesConfigDAO;\n    this.caasObjectAttributesTenantConfigDAO = caasObjectAttributesTenantConfigDAO;\n    this.authService = new AuthServiceImpl(pnpConnectionInfoDao);\n    this.metadataCacheDao = metadataCacheDao;\n    this.generatedMetadataCacheDao = generatedMetadataCacheDao;\n    this.metadataGenerationDetailsDao = metadataGenerationDetailsDao;\n  }\n\n  @Autowired\n  CaasConnectorConfigDAO caasConnectorConfigDAO;\n  @Autowired\n  OAuthClientService oAuthClientService;\n\n  @Override\n  public Map<String, ObjectDefinition> getMetadataUsingEngine(String connectionId, String objectName, boolean forceRefresh) throws CaasException {\n    try {\n      Set<GSFieldDefinition> fieldsSet = new HashSet<>();\n      PNPConnection","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0678f073-5d6c-483c-acdb-b17da358ccf3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":228,"endLine":254,"content":"alue = \"/data/{jobId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getJobInfo(@ApiParam(value = \"Job Id to retrieve status\", required = true) @PathVariable(\"jobId\") final String jobId) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.getDuctJobMappingByJobId(jobId));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @PostMapping(value = \"/validate/metadata\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj validateMetadata(@RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductValidationService.validateRequest(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Objects for a connection\", response = List.class)\n    @GetMapping(value = \"/{connecti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b3843a2b-8fc9-4cd5-b204-433f25e67b89","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":178,"endLine":210,"content":"2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + EXTRACT;\n        try {\n            Response response = httpClientService.post(url, headers, ductRequestDTO, APPLICATION_JSON_TYPE);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), CaaSExtractDetails.class);\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public Map<String,Object> createExtractTaskWithJarDetails(String ductRequestDTO, String parentId) {\n        Map<String, Object> headers = getB2BHeaders();\n        String formattedUrl = String.format(EXTRACT_WITH_JAR_DETAILS, parentId);\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + formattedUrl;\n        try {\n            Response response = httpClientService.post(url, headers, ductRequestDTO, APPLICATION_JSON_TYPE);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<Map<String,Object>>(){});\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a8c2f47-328c-4bb4-8e66-774416a557c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.FeatureToggleUtil;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Order(200)\n@Service\n@Slf4j\npublic class DynamicsValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.DYNAMICS;\n    }\n\n    @","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9829d3fd-c27a-467a-aa12-9ac200c97624","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ZoomValidationDataSourceService.java","startLine":50,"endLine":72,"content":"efinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if(criteria!=null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if(criteria.getFieldName()!=null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String type = gsFieldDefinition.getMeta().getOriginalDataType();\n        String fieldType = gsFieldDefinition.getMeta().getOriginalDataType();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if(dataTypeMappings.stream().anyMatch(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if(isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataType","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b669223-e6e6-4c69-b21d-b1a777b07dd7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":80,"endLine":121,"content":"(fieldName).getDbName());\n  }\n\n  @Override\n  protected String getTaskName() {\n      return \"CaasSAPDatasphereExtract\";\n  }\n\n  @Override\n  protected String getTeamName() {\n    return DuctConstants.CONNECTORS;\n  }\n\n  @Override\n  protected String getUseLatest() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.sapdatasphere.external.task.extract.use.latest\", \"true\");\n  }\n\n  @Override\n  protected String getVersion() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.sapdatasphere.external.task.extract.version\", \"v1\");\n  }\n\n  @Override\n  protected String getTaskTimeoutMins() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.sapdatasphere.external.task.default.timeout\", \"240\");\n  }\n\n  @Override\n  protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SAP_DATASPHERE);\n    return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n  }\n\n  @Override\n  protected Boolean generateFreeFormTask() {\n    return false;\n  }\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return connectorType == ConnectorType.SAP_DATASP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e95d888c-c658-45df-affb-b4f7bfbb5ad8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":25,"endLine":64,"content":"lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.integration.bean.IPaasConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n/**\n * @Author Manas Ranjan Sur\n * @Date 31st March 2022\n * @Description Metadata service for Snowflake\n */\n@Component\n@Slf4j\npublic class SnowflakeMetadataServiceImpl implements SnowflakeMetadataService{\n\n    private static final Comparator<GSFieldDefinition> FIELD_DEFINITION_COMPARATOR_BY_LABEL = Comparator.comparing(GSFieldDefinition::getLabel, String.CASE_INSENSITIVE_ORDER);\n\n    private static final String OBJECT_ID = \"objectId\";\n    private static final String OBJECT_NAME = \"objectName\";\n    private static final String COLUMN_NAME=\"column_name\";\n    public static final String ARRAY_DATATYPE = \"ARRAY\";\n\n    public static final ObjectMapper OBJECT_MAPPER;\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    static {\n\n        OBJECT_MAPPER = new ObjectMapper() // needed for LocalDateTime serialization\n                    .configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS, true)\n                    .configure(Ma","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"380111ff-d191-4c86-b853-39719831e8d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":157,"endLine":176,"content":"amesMap.containsKey(fieldInfo.getName()) && (null != gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta())\n                    && StringUtils.isNotEmpty(gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta().getOriginalDataType())\n                    && DuctConstants.BINARY.equalsIgnoreCase(gsFieldsByNamesMap.get(fieldInfo.getName()).getMeta().getOriginalDataType())) {\n                fieldJsonPathList.add(\"CAST(`\" + fieldInfo.getJsonPath() + \"` AS STRING) AS `\" + fieldInfo.getJsonPath() + \"`\");\n            } else {\n                fieldJsonPathList.add(\"`\" + fieldInfo.getJsonPath() + \"` AS `\" + fieldInfo.getJsonPath() + \"`\");\n            }\n        }\n\n        int limit = Math.min(ductJobMapping.getLimit(), maxPageSize) + 1;\n        int offset = 0;\n        if (!ObjectUtils.isEmpty(ductJobMapping.getOffset()) && ductJobMapping.getOffset() > 0) {\n            offset = ductJobMapping.getOffset();\n        } else if (!ObjectUtils.isEmpty(ductJobMapping.getNextPageToken())) {\n            offset = Integer.parseInt(ductJobMapping.getNextPageToken());\n        }\n        Map propertie = pnpConnectionsInfo.getProperties();\n        if (!ObjectUtils.isEmpty(ductJobMapping.getCriteria())) {\n            Map<String, Object> fieldNameToDataTypeMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            FilterRule filterRule = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f0b2f43-0b3d-4dca-a52e-87f959343887","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctClientConfig.java","startLine":1,"endLine":55,"content":"package com.gainsight.duct.sdk.client;\n\nimport com.gainsight.core.repo.ConsumerType;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.Assert;\n\nimport static org.apache.commons.lang3.StringUtils.isNotBlank;\n\n/**\n * Created by\n * <p>\n * User: sannamalai\n * Date: 13/07/18\n * Time: 9:24 PM\n */\npublic class DuctClientConfig {\n  private String baseUrl;\n  private String targetVersion;\n  private String clientId;\n  private String secret;\n  private static final String URI_PATH_SEPARATOR = \"/\";\n\n  public DuctClientConfig(String baseUrl, String secret) {\n    Assert.isTrue(isNotBlank(baseUrl), \"CAAS baseUrl can not be null\");\n    Assert.isTrue(isNotBlank(secret), \"CAAS shared secret can not be null\");\n    this.baseUrl = StringUtils.appendIfMissing(baseUrl, URI_PATH_SEPARATOR);\n    this.secret = secret;\n    this.clientId = ConsumerType.UNDEFINED.toString();\n    this.targetVersion = \"\";\n  }\n\n  public String baseUrl() {\n    return this.hasTargetVersion() ? baseUrl + this.targetVersion() + \"/\" : baseUrl;\n  }\n\n  public void setBaseUrl(String baseUrl) {\n    Assert.isTrue(isNotBlank(baseUrl), \"CAAS baseUrl can not be null\");\n    this.baseUrl = baseUrl;\n  }\n\n  public String targetVersion() {\n    return targetVersion;\n  }\n\n  public boolean hasTargetVersion() {\n    return StringUtils.isNotBlank(this.targetVersion);\n  }\n\n  public void setTargetVersion(String targetVersion) {\n    this.targetVersion = targetVersion;\n  }\n\n  public String clientId() {\n    return clientId;\n  }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b378d65-67a7-4231-89ae-8d34e338979c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1407,"endLine":1430,"content":"l.getUser()).getValue());\n        }\n        if (relationalDBConnectionDetail.getPwd() != null) {\n            processedDBConnectionDetail.setPwd(cryptUtil.encrypt(relationalDBConnectionDetail.getPwd()).getValue());\n        }\n        if (MapUtils.isNotEmpty(relationalDBConnectionDetail.getProperties())) {\n            Map<String, Object> processedPropertyMap = new HashMap<>();\n            for (Map.Entry<String, Object> property : relationalDBConnectionDetail.getProperties().entrySet()) {\n                if (null != property.getKey()) {\n                    processedPropertyMap.put(property.getKey(), cryptUtil.encrypt(GainsightUtils.valueOf(property.getValue())).getValue());\n                }\n            }\n            processedDBConnectionDetail.setProperties(processedPropertyMap);\n        }\n        processedDBConnectionDetail.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        processedDBConnectionDetail.setType(pnpConnectionsInfo.getConnectionType().toString());\n        return processedDBConnectionDetail;\n    }\n\n    private PendoConnectionDetail preProcessPendoConnectionDetail(PNPConnectionsInfo pnpConnectionsInfo) {\n        PendoConnectionDetail pendoConnectionDetail = (PendoConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        isNotBlank(pendoConnectionDetail.getIntegrationKey(), CaasValidationCode.INVALID_CLIENT_INPUT, \"integrationKey can't be null\");\n        PendoConnectionDetail processedPendoConnectionDetail = new PendoConnectionDetail();\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e55f7e91-7ccd-4533-bcf8-0ca235f780f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":233,"endLine":273,"content":"Utils.consumeQuietly(entity);\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n    }\n    return response;\n  }\n\n  private static CloseableHttpClient getHttpClient(String uri) {\n    HttpClientBuilder builder = HttpClient.getApacheHttpClientBuilder();\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(TIMEOUT).setSocketTimeout(TIMEOUT).build();\n    builder.setDefaultRequestConfig(requestConfig);\n    return builder.build();\n  }\n\n  /**\n   * Sets default retry handler. This http client is used for get requests as they don't need any check before retrying.\n   *\n   * @param uri\n   * @return\n   */\n  private static CloseableHttpClient getHttpClientWitRetry(String uri) {\n    HttpClientBuilder builder = HttpClient.getApacheHttpClientBuilder();\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(TIMEOUT).setSocketTimeout(TIMEOUT).build();\n    builder.setDefaultRequestConfig(requestConfig);\n    builder.setRetryHandler(new RetryHandler(RETRY_COUNT, uri));\n    return builder.build();\n  }\n\n  /**\n   * method to add headers to http request\n   *\n   * @param httpRequestBase\n   * @param headers\n   */\n  private static void addHeaders(HttpRequestBase httpRequestBase, Map<String, String> headers) {\n    if (MapUtils.isNotEmpty(headers)) {\n      headers.entrySet().stream().forEach(entry -> httpRequestBase.addHeader(entry.getKey(), entry.getValue()));\n    }\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"759be207-55fd-47e4-b84c-f6109477c8c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":251,"endLine":273,"content":"  MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n    QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n    List<Map<String, Object>> responseList = new ArrayList<>();\n    Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n    if (!first.isPresent())\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    ResourceConfig resourceConfig = first.get();\n    List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n    });\n    if (resourceConfig.getMetadataTransformationConfig() != null) {\n      data = sanitizeData(data, resourceConfig);\n    }\n    responseList.addAll(data);\n    queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n    queryAPIResponseBean.setRecords(responseList);\n    return queryAPIResponseBean;\n  }\n\n\n  private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n    List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n    Chainr chainr = Chainr.fromSpec(spec);\n    List<Map<String, Object>> finalData = new ArrayLi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9dd82833-012f-4694-af53-43cb71797d51","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/CaaSExtractDetails.java","startLine":43,"endLine":86,"content":"ic Map<String, Object> getAdditionalDetails() {\n        if (this.additionalDetails == null) {\n            return Maps.newHashMap();\n        }\n        return this.additionalDetails;\n    }\n\n    public void setAdditionalDetails(Map<String, Object> additionalDetails) {\n        this.additionalDetails = additionalDetails;\n    }\n\n    public void addAdditionalDetails(String key, String value) {\n        getAdditionalDetails().put(key, value);\n    }\n\n    public List<FieldInfo> getProjectionClause() {\n        return projectionClause;\n    }\n\n    public void setProjectionClause(List<FieldInfo> projectionClause) {\n        this.projectionClause = projectionClause;\n    }\n\n    public FilterRule getWhereClause() {\n        return whereClause;\n    }\n\n    public void setWhereClause(FilterRule whereClause) {\n        this.whereClause = whereClause;\n    }\n\n    @Override\n    public String toString() {\n        return \"CaaSExtractDetails{\" +\n                \"connectorId='\" + connectorId + '\\'' +\n                \", additionalDetails=\" + additionalDetails +\n                \", externalEntityName='\" + externalEntityName + '\\'' +\n                \", projectionClause=\" + projectionClause +\n                \", whereClause=\" + whereClause +\n                '}';\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad22e85b-8d17-4d3a-879f-179c77a28bbb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.bean.GainsightBigQueryEntityDescription;\nimport com.gainsight.integration.connector.bean.GainsightBiqQueryFieldDescription;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelFactory;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelService;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.google.common.collect.Maps;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimpo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b1f2b758-faf0-4237-b15b-4ac194d821bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":111,"endLine":131,"content":"ype) {\n                case NONE:\n                    break;\n                case BASIC:\n                    pnpConnectionInput.setProperties(USERNAME, baseTokenDetail.getUserName());\n                    String password = baseTokenDetail.getPassword() != null ? baseTokenDetail.getPassword().getString() : null;\n                    pnpConnectionInput.setProperties(PASSWORD, password);\n                    if (MapUtils.isNotEmpty(baseTokenDetail.getHeaders())) {\n                        pnpConnectionInput.setProperties(HEADERS, baseTokenDetail.getHeaders());\n                    }\n                    break;\n                case API_KEY:\n                    pnpConnectionInput.setProperties(HEADERS, baseTokenDetail.getHeaders());\n                    break;\n                case OAUTH_v2:\n                    if (!(pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail() instanceof OAuthV2TokenDetail)) {\n                        throw new Exception(CaasValidationCode.INVALID_TOKEN_DETAIL.getUserText() + pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail().getClass().getSimpleName());\n                    }\n                    OAuthV2TokenDetail oAuthV2TokenDetail = (OAuthV2TokenDetail) pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail();\n                    String clientId = oAuthV2TokenDetail.getClientId() != null ? oAuthV2TokenDetail.getClientId().getString() : null;\n                    String clientSecret = oAuthV2TokenDetail.getClientSecret() != null ? oAuthV2TokenDe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69d98d66-7432-47e6-a19e-2a0e24113a38","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":86,"endLine":113,"content":"kyThrows\n  private void validateConnectionProperties(PNPConnectionsInfo pnpConnectionsInfo) {\n\n    if(Objects.isNull(pnpConnectionsInfo)){\n      throw new CaasException(PROPERTIES_MISSING_ERROR, CaasValidationCode.INVALID_INPUT_DATA);\n    }\n\n    Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n    if (MapUtils.isEmpty(properties)) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n    }\n\n    Map<String, Object>  ipaasProperties = (Map<String, Object>) properties.get(IPaasConstants.IPAAS_PROPERTIES);\n    if (MapUtils.isEmpty(ipaasProperties)) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n    }\n\n   if(StringUtils.isBlank(DuctUtils.valueOf(ipaasProperties.get(USERNAME))) || StringUtils.isBlank(DuctUtils.valueOf(ipaasProperties.get(SUBDOMAIN))) || StringUtils.isBlank(DuctUtils.valueOf(pnpConnectionsInfo.getConnectionName()))){\n     throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n   }\n   return;\n  }\n\n\n  /**\n   * @param accessToken        {@link String}\n   * @param pnpConnectionsInfo {@link PNPConnectionsInfo\n   * @return validate the given credentials by making","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"72a2a654-b5f1-46a8-845f-fc0731fec11f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":176,"endLine":209,"content":"tadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n        });\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ae4a754-cee6-4108-bb02-fc6b80bb0161","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":166,"endLine":193,"content":"ompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o,\n                                Exception e) throws Exception {\n        try {\n            if(httpServletRequest.getServletPath().equalsIgnoreCase(\"/v1.0/duct/callback/bulk/ipaas\") ||\n                    httpServletRequest.getServletPath().equalsIgnoreCase(\"/error\") ){\n                return;\n            }\n            logRequest(httpServletRequest, httpServletResponse);\n        } finally {\n            resetContext();\n        }\n    }\n\n    private void logRequest(HttpServletRequest request, HttpServletResponse response) {\n        long timeTaken = System.currentTimeMillis() - (long) request.getAttribute(REQUEST_START_TIME_ATT);\n        Object patternO = request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n        String pattern = patternO == null ? request.getRequestURI() : patternO.toString() ;\n        log.info(\"method={} path='{}' pattern='{}' query='{}' user='{}' gsuser='{}' lmauser='{}' status={} in {} millis\", request.getMethod(), request\n                        .getRequestURL(), pattern, request.getQueryString(), RequestContextProvider.getUserName(),\n                RequestContextProvider.getGSUserName(), RequestContextProvider.getLMAUserEmail(), response.getStatus(), timeTaken);\n    }\n\n    private void resetContext() {\n        GainsightContext.removeAll();\n        MDC.clear();\n    }\n\n    private boolean setErrorResponse(HttpServletRequest request, HttpServle","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ee091c1-cfbe-468e-89fe-a78e6c5e7571","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":77,"endLine":94,"content":"s.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            Map<String, String> queryParam = new HashMap<>();\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails.isQueryParam())\n                    queryParam.put(apiConfigAttributes.getPaginationDetails().getRequestKey(),ductJobMapping.getNextPageToken());\n            }\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getRespon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e63508b-8c25-48b5-8e1c-128cc866bc93","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":68,"endLine":84,"content":"taTypeMappingsForField.getGainsightDatatype().name());\n                } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType))) {\n                    dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType)).findFirst().get();\n                    retMap.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                } else {\n                    retMap.put(DATA_TYPE, DataType.STRING.name());\n                    meta.put(FILTERABLE, true);\n                    meta.put(EXTERNALLY_FILTERABLE, false);\n                }\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n                if (ObjectUtils.isNotEmpty(complexTypeMappings) && complexTypeMappings.containsKey(fieldDataType))\n                    metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(fieldDataType).getValue());\n                if(field.get(\"custom\") != null)\n                    metaProperties.p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55c50904-b15d-4c94-9e82-4850033efa72","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/AccountService.java","startLine":1,"endLine":18,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.duct.beans.account.AccountDetail;\n\n/**\n * User: santa\n * Date: 17/4/14\n * Time: 3:30 PM\n */\npublic interface AccountService {\n    boolean exists(String accountId);\n\n    AccountDetail findOne(String accountId);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61deaa16-d99f-4cf7-a8c8-447808cbc679","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":189,"endLine":217,"content":"ltAttribute.put(enhancedGSFieldDefinition.getFieldName(), enhancedGSFieldDefinition);\n                isTenantConfigUpdate = true;\n            } else {\n                /*\n                Need to override the global attributes\n                 */\n                if(fieldsFromTenantOverrideAttribute.containsKey(fieldInfo.get(FIELD_NAME))){\n                    DuctCollectionUtils.deepMerge(fieldsFromTenantOverrideAttribute.get(fieldInfo.get(FIELD_NAME)), fieldInfo);\n                }else{\n                    fieldsFromTenantOverrideAttribute.put(fieldInfo.get(FIELD_NAME).toString(), fieldInfo);\n                    caasObjectAttributesTenantConfig.getOverrideAttribute().add(createOverrideAttribute(fieldInfo, saveType));\n                }\n                isTenantConfigUpdate = true;\n            }\n        }\n        if(isTenantConfigUpdate) {\n            caasObjectAttributesTenantConfig.getDefaultObjectAttributes().clear();\n            caasObjectAttributesTenantConfig.getDefaultObjectAttributes().addAll(fieldsFromTenantDefaultAttribute.values());\n            caasObjectAttributesTenantConfigDAO.update(caasObjectAttributesTenantConfig);\n        }\n        if(isMetadataCacheUpdate) {\n            metadataCacheDao.update(metadataCache);\n        }\n    }\n\n    private Map createOverrideAttribute(Map<String, Object> fieldInfo, FieldSaveType saveType) {\n        Map overrideAttribute = Maps.newHashMap();\n        overrideAttribute.put(MetadataCommonUtil.OVERRIDE_KEY, PATH);\n        overrideAttri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8836f72-a7c8-49cf-90de-396068a841c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctPXExtractService.java","startLine":78,"endLine":86,"content":"ping, ObjectDefinition objectDefinition, DHTaskType dpTaskType, String parentId,Map<String, String> fieldNameToFieldAlias) {\n        return null;\n    }\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.GAINSIGHT_PX;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31495b1d-16c5-4adf-9d7c-2ff5d76f7f2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":31,"endLine":56,"content":"ConnectorType.ECOSYSTEM;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> attributes, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, attributes);\n        validateFields(ductRequestDTO, attributes);\n        validateFilters(ductRequestDTO, attributes, caasConnectorConfig);\n        validateFilterOperators(ductRequestDTO, attributes, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilters(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> attributes, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = attributes.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n        checkForFiltersSupportedFields(ductRequestDTO.getCriteria(), fieldDefinitionMap, ductRequestDTO.getIsSynchronized());\n        Set<String> fieldsNames = new HashSet<>();\n        checkForDuplicateFields(ductRequestDTO.getCriteria(), fieldsNames, ductRequestDTO.getIsSynchronized());\n    }\n\n    private static void checkForDuplicateFields(Criteria criteria, Set<String> fieldNames, boolean isSync","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"29452587-c70e-42c3-91a0-115ff9fd89ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":76,"endLine":96,"content":"  PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            JsonNode jsonNode;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            Map<String,String> queryparam = new HashMap<>();\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, null);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDet","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d40a9915-aeea-459f-a01b-f44c43c66247","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":485,"endLine":508,"content":"ectLevelWritebackOperation.entrySet().iterator().next();\n\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectAttributes = service.getObjectAttributes(objectLevelOperation.getKey(), pnpConnectionsInfo);\n            validateMappings(ductJobMapping, objectAttributes.values().iterator().next().getFields(), DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()));\n\n            validateS3Info(ductJobMapping);\n            validateIfFilePresent(ductJobMapping);\n            file = getFileFromS3(ductJobMapping);\n            validateMappedFieldsAndCsv(ductJobMapping, file);\n            validateHeadersFieldsAndMappings(ductJobMapping, file);\n            stopWatch.stop();\n            log.info(\"Completed validation for databricks write back Payload {} in :{} seconds\", ductJobMapping.getJobId(), stopWatch.getTotalTimeSeconds());\n            return file;\n        } catch (CaasException ex) {\n            log.error(\"Exception in validation 1 \", ex);\n            throw ex;\n        } catch (Exception e) {\n            log.error(\"Exception in validation 2 \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private void validateMappings(DuctJobMapping ductJobMapping, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3674da0f-8a32-41bf-8e8a-345a656b60ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1563,"endLine":1578,"content":"ies(PNPConnectionsInfo pnpConnectionInfo, CaasConnectorConfig caasConnectorConfig, PNPConnectionsInfo pnpConnectionsInfoFromDB) {\n        if (AuthorizationType.CUSTOM.equals(pnpConnectionInfo.getAuthorizationType())) {\n            caasConnectorConfig.getAuthInfo(pnpConnectionInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFieldsInfo ->\n                    requiredFieldsInfo.getProperties().containsKey(\"storeInDb\") && requiredFieldsInfo.getProperties().containsKey(\"isSecretKey\")).forEach(requiredFieldsInfo -> {\n                if ((Boolean) requiredFieldsInfo.getProperties().get(\"storeInDb\") && (Boolean) requiredFieldsInfo.getProperties().get(\"isSecretKey\")\n                        && (null != pnpConnectionInfo.getProperties())) {\n                    (pnpConnectionInfo.getProperties()).put(requiredFieldsInfo.getFieldName(),\n                            CryptHandler.getInstance().encrypt((String) (pnpConnectionInfo.getProperties()).get(requiredFieldsInfo.getFieldName())));\n                }\n            });\n            pnpConnectionsInfoFromDB.setAuthorizationType(AuthorizationType.CUSTOM);\n            pnpConnectionsInfoFromDB.getProperties().putAll(pnpConnectionInfo.getProperties());\n            return;\n        }\n        if (pnpConnectionInfo.getAuthorizationType().equals(pnpConnectionsInfoFromDB.getAuthorizationType())) {\n            caasConnectorConfig.getAuthInfo(pnpConnectionInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5b31f29d-dbf2-46d1-aae1-6e06f070f6a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":90,"endLine":116,"content":"            setUIPropertiesForRestAPIConnections(pnpConnectionInput);\n                        }\n                        return pnpConnectionInput;\n                    }\n                });\n    }\n\n    private static void setUIPropertiesForRestAPIConnections(PNPConnectionInput pnpConnectionInput) {\n        Map<String, Object> properties = pnpConnectionInput.getPnpConnectionsInfo().getProperties();\n        if (MapUtils.isNotEmpty(properties)) {\n            pnpConnectionInput.setProperties(AUTH_TYPE, GainsightUtils.valueOf(properties.get(AUTH_TYPE)));\n            pnpConnectionInput.setProperties(DESCRIPTION, GainsightUtils.valueOf(properties.get(DESCRIPTION)));\n        }\n    }\n\n    private static void setRestAPIDecryptedBaseTokenDetail(PNPConnectionInput pnpConnectionInput) throws Exception {\n        Map<String, Object> properties = pnpConnectionInput.getPnpConnectionsInfo().getProperties();\n        BaseTokenDetail baseTokenDetail = pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail();\n        if (MapUtils.isNotEmpty(properties) && StringUtils.isNotBlank(GainsightUtils.valueOf(properties.get(AUTH_TYPE)))) {\n            String authTypeStr = GainsightUtils.valueOf(properties.get(AUTH_TYPE));\n            AuthType authType = AuthType.valueOf(authTypeStr);\n            switch (authType) {\n                case NONE:\n                    break;\n                case BASIC:\n                    pnpConnectionInput.setProperties(USERNAME, baseTokenDetail.getUserName());\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d517a66-2391-4df8-914e-3c4ecce1bd5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BigQueryValidationDataSourceService.java","startLine":72,"endLine":89,"content":"nnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e329d318-33e6-42d1-8728-80f183f33200","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1447,"endLine":1466,"content":"(String) ((Map) pnpConnectionsInfo.getProperties()).get(\"serviceAccountConfiguration\"));\n            GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.getChannelServiceForServiceAccount(serviceAccountJson, ((Map) pnpConnectionsInfo.getProperties()).get(\"projectId\").toString(),\n                    ((Map) pnpConnectionsInfo.getProperties()).get(\"datasetId\").toString());\n            log.info(\"Connection authorized will check the access to dataset\");\n            Boolean authorized = gainsightBigQueryChannelService.authorizeWithServiceAccount();\n            if (!authorized) {\n                log.error(\"Invalid datasetId\");\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_DATASETID.getUserText(), HttpStatus.SC_BAD_REQUEST));\n            }\n        } catch (CaasException e) {\n            log.error(\"error while authentication using service account json {}\", e.getMessage());\n            throw e;\n        }\n    }\n\n    private boolean testEcosystemsConnection(PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> ecosystemProperties = pnpConnectionsInfo.getProperties();\n        GainsightEcosystemChannelService gainsightEcosystemChannelService = new GainsightEcosystemChannelFactory().getChannelServiceWithApiKey((String) ecosystemProperties.get(ACCESS_TOKEN));\n        String url = StringUtils.defaultIfBlank((String) ecosystemProperties.get(URL),\n                DeploymentProperti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1cf50d78-f2e6-4cd7-873a-ec88a4daadb7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/EcosystemsCaasMetadataServiceImpl.java","startLine":55,"endLine":86,"content":"FieldDefinition.getLabel();//(String) map.get(\"label\");\n      String dbName = gsFieldDefinition.getDbName();//(String) map.get(\"dbName\");\n\n      GSFieldDefinition field = new GSFieldDefinition();\n      field.setLabel(label);\n      field.setFieldName(fieldName);\n      field.setDbName(dbName);\n      field.setObjectName(objectAttributesConfig.getObjectName());\n      field.setConnectionId(pnpConnectionsInfo.getConnectionId());\n      field.setConnectionType(pnpConnectionsInfo.getConnectionType().getValue());\n      field.setDataType(dataType);\n      field.setObjectLabel(objectAttributesConfig.getObjectName());\n\n      GSFieldMeta fieldMeta = new GSFieldMeta();\n      /*Map metaMap = (Map) map.get(\"meta\");\n      if (metaMap != null) {\n        Integer i = (Integer) metaMap.get(\"decimalPlaces\");\n        if (dataType.equalsIgnoreCase(\"number\")) {\n          i = (i == null) ? 0 : i;\n          fieldMeta.setDecimalPlaces(i);\n        }\n        fieldMeta.setMultiValued((Boolean) metaMap.get(\"multiValued\"));\n        fieldMeta.setOriginalDataType((String) metaMap.get(\"originalDataType\"));\n        fieldMeta.setFilterable((Boolean) metaMap.get(\"filterable\"));\n        fieldMeta.setAccessible((Boolean) metaMap.get(\"accessible\"));\n        fieldMeta.setProperties((Map<String, Object>) metaMap.get(\"properties\"));\n        fieldMeta.setExternallyFilterable((Boolean) metaMap.get(\"externallyFilterable\"));\n      }*/\n      field.setMeta(gsFieldDefinition.getMeta());\n      fields.add(field);\n    }\n    objectD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2c3f9b47-ea48-4780-8013-b8a4945f8162","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.dh;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.base.connection.SAPDatasphereConnectionDetail;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.data.ConnectorDataSourceService;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.*;\nimport com.gainsight.duct.utils.snowflake.DBConnectorsQueryBuilder;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelFactory;\nimport com.gainsight.integration.connector.sapHana.GainsightSAPDatasphereChannelService;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.integration.utils.file.FileMerger;\nimport com.gainsight.properties.DeploymentProperties;\nimport ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a840daa9-cf3e-41be-aa06-4a657b44b6f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":100,"endLine":122,"content":"inition.put(DuctConstants.DescribeMetaConstants.LABEL, objectName);\n        objectDefinition.put(DuctConstants.DescribeMetaConstants.FIELDS, fieldList);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, objectDefinition);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n    }\n\n    private void validateDatabricksRequest(String objectName) throws CaasException{\n        if(StringUtils.isEmpty(objectName)) {\n            throw new CaasException(\"Resource name can not be empty\", CaasValidationCode.INVALID_RESOURCE_NAME);\n        }\n        Pattern pattern = Pattern.compile(DeploymentProperties.getDeploymentProperties()\n                .getValue(\"uc.databricks.not.allowed.regex\", \"^[^`]*$\")\n        );\n        if(!(pattern.matcher(objectName)).find()) {\n            throw new CaasException(\"Resource name contains some characters which are restricted in the request\", CaasValidationCode.INVALID_RESOURCE_NAME);\n        }\n    }\n\n    private Map<String, Object> constructFieldMap(Map<String, Object> fieldDetails, String objectName, CaasConnectorConfig connectorConfig) {\n        Map<String, Object> retMap = new HashMap<>();\n        Map<String, Object> meta = Maps.newHashMap();\n        Map<String, Object> metaProperties = new HashMap<>()","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba0835f3-0754-4598-a442-cb21c5035c39","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":124,"endLine":164,"content":"companyCollection\");\n                removeProperty(modifiedRequestInfo, \"relationshipCollection\");\n                removeProperty(modifiedRequestInfo, \"authToken\");\n                RequestContextProvider.setRequestInfo(modifiedRequestInfo);\n            }\n            return RequestContextProvider.getEncryptedRequestInfo(true);\n        } finally {\n            RequestContextProvider.setRequestInfo(requestInfo);\n        }\n    }\n\n    private static void removeProperty(RequestInfo requestInfo, String key) {\n        if (MapUtils.isNotEmpty(requestInfo.getAdditionalInfo())) {\n            requestInfo.getAdditionalInfo().remove(key);\n        }\n    }\n\n    /**\n     * Append Path to Base URL\n     * Basic Check - Ends with \"/\"\n     *\n     * @param baseUrl Base URL with Protocol & Host.\n     * @param path    Context Path\n     * @return Absolute URL\n     */\n    public static String addPathToUrl(String baseUrl, String path) {\n        return (baseUrl.endsWith(\"/\") ? baseUrl : baseUrl + \"/\") + (path.endsWith(\"/\") ? path : path + \"/\");\n    }\n\n    /**\n     * Method to make API call to external services.\n     *\n     * @param url         Absolute URL\n     * @param httpMethod  HTTP Method\n     * @param requestBody Request Body (If Any)\n     * @param clazz       Class of Response.\n     * @param <T>         Response Type.\n     * @param <R>         Request Body Type.\n     * @return Response will be parsed to given response type.\n     */\n    public static <T, R> T makeRestCall(String url, HttpMethod ht","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e120be32-b52a-47c8-9201-5b8443db8bfd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":249,"endLine":271,"content":"       fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n            } else {\n                if (fieldsFlattened) {\n                    targetFieldName = criteria.getFieldName();\n                    fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                    fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                } else {\n                    if (fieldSplitted.length == 2) {\n                        targetFieldName = fieldSplitted[1];\n                        String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldSplitted[0]).getMeta()\n                                .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(lookedUpObjectName);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(lookedUpObjectName);\n                    } else {\n                        targetFieldName = criteria.getFieldName();\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                    }\n                }\n            }\n\n            return createFilterRule(criteria, fieldName","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c16bf0eb-64d0-476f-a010-4d736a24ea2a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":323,"endLine":350,"content":"DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), fields);\n        return new ArrayList<>(fields);\n    }\n\n    private String[] getHeaders(List<String> fields, List<String> currentHeaders, String objectName) {\n        String[] newHeaders = new String[currentHeaders.size()];\n        String fieldNameWithoutSpecialChar;\n        for (String field : fields) {\n            if(field.matches(\"^[0-9].*\")) {\n                fieldNameWithoutSpecialChar = objectName + CUSTOM_FIELD_PREFIX + field.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n            } else {\n                fieldNameWithoutSpecialChar = field.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n            }\n            if (currentHeaders.contains(fieldNameWithoutSpecialChar))\n                newHeaders[currentHeaders.indexOf(fieldNameWithoutSpecialChar)] = field;\n        }\n        return newHeaders;\n    }\n\n    private void catchExceptionAndUpdateStatus(CaasException ex, String jobId) {\n        log.info(\"Writing error into DB\");\n        try {\n            gsExternalSystemErrorMappingDao.insert(ex.getGsExternalSystemErrorMapping());\n        } catch (Exception e) {\n            log.error(\"Error while writing into DB, hence skipping\", e);\n        }\n        DuctResponse ductResponse = DuctResponse.builder().externalSystemResponse(ex.getGsExternalSystemErrorMapping().getResponsePayload()).errorMessage(ex.getGsExternalSystemErrorMapping().getMessage()).\n                tenantId(ex.getGsExternalSystemErrorMapping().getTenantId()).connectionId(ex.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"206dcda5-d6a8-4282-a433-b4e96a0210ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":52,"endLine":83,"content":"com.gainsight.duct.constants.DuctConstants.METADATA_CONFIG_CACHE_KEY;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeMap;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Order(1500)\n@Service\npublic class ZohoV2DataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final Logger LOGGER = LoggerFactory.getLogger(ZohoV2DataSourceService.class);\n    private AuthService authService = new AuthServiceImpl();\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n    private static final String CAAS_ZOHO_V2_EXTRACT = \"CaasZohoV2Extract\";\n\n    private static final String PER_PAGE = \"per_page\";\n    private static final String DATA = \"data\";\n    private static final String CRITERIA = \"criteria\";\n    private static final String DEFAULT_CRITERIA = \"id:not_equal:0\";\n    private static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD = \"Modified_Time\";\n    private static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssz\";\n    private static final String INFO_KEYWORD = \"info\";\n    private static final String MORE_RECORDS_KEYWORD = \"more_records\";\n\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"111aec18-79b2-437a-9d56-31da191bef2f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightAhaFetchProcessorImpl.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.connector.aha.bean.GainsightAhaEntityDescription;\nimport com.gainsight.integration.connector.aha.bean.GainsightAhaEntityEnum;\nimport com.google.common.collect.Lists;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author puneetsaluja\n * @created 10/03/23\n */\n@Service\npublic class GainsightAhaFetchProcessorImpl implements GainsightAhaFetchProcessor {\n    @Override\n    public GSIntegrationResponse getEntityDescription(String connectionId, String objectName) throws CaasException {\n        GainsightAhaEntityDescription gainsightAhaEntityDescription = new GainsightAhaEntityDescription(objectName, Lists.newArrayList());\n        GSIntegrationResponse response = new GSIntegrationResponse();\n        response.setResult(true);\n        response.setResult(gainsightAhaEntityDescription);\n        return response;\n    }\n\n    @Override\n    public List<ObjectDefinition> getListOfAvailableEntities(String connection) {\n        List<ObjectDefinition> objectDefinitions = Arrays.stream(GainsightAhaEntityEnum.values())\n                .map(gainsightAhaEntityEnum -> {\n                    ObjectDefinition objectDefinition = new ObjectDefinition();\n                    objectDefinition","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f78bfe7e-82b1-42fb-99b3-dc6af829c747","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectField.java","startLine":1,"endLine":50,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SObjectField implements Serializable {\n    private Integer length;\n    private String name;\n    private String type;\n    private String defaultValue;\n    private String label;\n    private Boolean updateable;\n    private Boolean calculated;\n    private Boolean caseSensitive;\n    private String controllerName;\n    private Boolean unique;\n    private Boolean nillable;\n    private Integer precision;\n    private Integer scale;\n    private Integer byteLength;\n    private Boolean nameField;\n    private Boolean sortable;\n    private Boolean filterable;\n    private Boolean writeRequiresMasterRead;\n    private Boolean externalId;\n    private Boolean idLookup;\n    private String inlineHelpText;\n    private Boolean createable;\n    private String soapType;\n    private Boolean autoNumber;\n    private Boolean restrictedPicklist;\n    private Boolean namePointing;\n    private Boolean custom;\n    private Boolean defaultedOnCreate;\n    private Boolean deprecatedAndHidden;\n    private Boolean htmlFormatted;\n    private String defaultValueFormula;\n    private String calculatedFormula;\n    private List<PickListValue> picklistValues;\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"df69be8d-fbcc-4e8d-b2ac-bed46c769b43","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/SyncDirection.java","startLine":1,"endLine":15,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\n/**\n * Created by vipinsharma on 21/02/18.\n */\npublic enum SyncDirection {\n\n    MDA_TO_EXTERNAL_SYSTEM,\n    EXTERNAL_SYSTEM_TO_MDA,\n    EXTERNAL_SYSTEM_TO_EXTERNAL_SYSTEM\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5149fb3-26d5-4626-bb54-db02de411f70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1162,"endLine":1184,"content":"onId().equals(ucTenantConnection.getCurrentPrimaryConnection()))\n                    || (null != ucTenantConnection.getPreviousPrimaryConnection() && pnpConnectionsInfo.getConnectionId().equals(ucTenantConnection.getPreviousPrimaryConnection()))) {\n                List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.findByConnectionType(ConnectorType.SFDC);\n                for (PNPConnectionsInfo connectionsInfo : pnpConnectionsInfoList) {\n                    connectionsInfo.getProperties().put(UCCommonConstants.SHOW_LINK, true);\n                    pnpConnectionInfoDao.update(connectionsInfo);\n                }\n                ucTenantConnection.setPreviousPrimaryConnection(pnpConnectionsInfo.getConnectionId());\n                ucTenantConnection.setCurrentPrimaryConnection(null);\n                tenantConnectionService.update(ucTenantConnection);\n            }\n            return;\n        }\n\n        ucTenantConnection = tenantConnectionService.findOneOrCreate(RequestContextProvider.getTenantId());\n        if (null != ucTenantConnection.getCurrentPrimaryConnection() || (null != ucTenantConnection.getPreviousPrimaryConnection() &&\n                null != findByConnectionId(ucTenantConnection.getPreviousPrimaryConnection()))) {\n            pnpConnectionsInfo.getProperties().put(UCCommonConstants.SHOW_LINK, false);\n        } else {\n            pnpConnectionsInfo.getProperties().put(UCCommonConstants.SHOW_LINK, true);\n        }\n\n        //MultiConnection: for wh","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1020a85c-447e-4ef8-be5d-12e78608a7ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasFeatureToggleUtility.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.ExpiryCache;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.enums.TenantRegion;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CoreUtils;\nimport jersey.repackaged.com.google.common.collect.Maps;\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport utils.Constants;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic class IpaasFeatureToggleUtility {\n\n    public static final String CE_BASE_URL_CONFIG_KEY = \"CE.BASE.URL\";\n    public static final String CE_ORG_TOKEN_CONFIG_KEY = \"CE.ORG.TOKEN\";\n    public static final String CE_USER_TOKEN_CONFIG_KEY = \"CE.USER.TOKEN\";\n    private static final String DEFAULT_CE_BASE_URL = \"https://staging.cloud-elements.com\";\n    private static final Long CE_DETAILS_CACHE_EXPIRY = DeploymentProperties.getDeploymentProperties().getLongValue(\"ce.base.url.cache.expiry\", 60 * 60 * 1000);\n    private static final ExpiryCache<String, Map> CE_DETAILS__LIST = new ExpiryCache<>(CE_DETAILS_CACHE_EXPIRY);\n\n    private static final String TENANT_REGION_FEATURE_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"tenant.region.feature.name\", \"TENANT_REGION\");\n    private static final Long TENANT_REGION_FEATURE_CONFIG_CACHE_EXPIRY = DeploymentProperties.getDeploymentProperties().getLongValue(\"tenant.region.feature.config.cache.expiry\", 60 * 60 * 1000);\n    private static final","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd6fdbd2-8b09-42d1-89c7-781f1ce41785","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":147,"endLine":167,"content":"g attributes fetch for object: {}, connection: {}\", objectName, pnpConnectionsInfo.getConnectionId());\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n\n        Map<String, Object> extractedData;\n        DynamicsGainsightUtils.setDynamicsCtx(pnpConnectionsInfo);\n        try {\n            extractedData = msDynamicsSchemaService.extractMetadata(new MSDynamicsObjectQuery().logicalName(objectName), true, includePicklistOptions);\n        } catch (SystemException exception) {\n            if ((null != exception.getErrorCode()) && exception.getErrorCode().equals(DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND)) {\n                DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n            }\n            throw exception;\n        }\n        stopWatch.stop();\n        LOGGER.info(\"completed attributes fetch for object: {}, connection: {} in: {} MS\", objectName, pnpConnectionsInfo.getConnectionId(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n        Map metadata = MSDynamicsObjectUtil.constructDynamicsObjectDefinition(extractedData, pnpConnectionsInfo,\n                true, FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()),\n                con","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf860192-055b-47af-9cfe-d846e713c5ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountEventMeasureMapping.java","startLine":1,"endLine":62,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport com.gainsight.enums.AggregationFunction;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n/**\n * User: sdugar\n * Date: 26/8/14\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AccountEventMeasureMapping implements Serializable {\n  private static final long serialVersionUID = -1L;\n  private String event;\n  private AggregationFunction aggregationFunction;\n  private String aggregationKey;\n  private String flippedMeasureDisplayName;\n  private String flippedMeasureDbName;\n\n  /**\n   * Represents event display name in source\n   * @return\n   */\n  public String getEvent() {\n    return event;\n  }\n\n  public void setEvent(String event) {\n    this.event = event;\n  }\n\n  public AggregationFunction getAggregationFunction() {\n    return aggregationFunction;\n  }\n\n  public void setAggregationFunction(AggregationFunction aggregationFunction) {\n    this.aggregationFunction = aggregationFunction;\n  }\n\n  /**\n   * Represents dbName of measures(raw data source dbName) stored in postgres table\n   * @return\n   */\n  public String getAggregationKey() {\n    return aggregationKey;\n  }\n\n  public void setAggregationKey(String aggregationKey) {\n    this.aggregationKey = aggregationKey;\n  }\n\n  /**\n   * Represents displayName that is to be stored in mongo collection collectionmaster\n   * @return\n   */\n  public String getFlippedMeasureDisplayName() {\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"73c6bcb9-14c9-4627-b392-db2c921198d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/IntercomV2ToOMDConverterServiceImpl.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.google.common.collect.Maps;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n/**\n * createdBy: snargana\n * date: 16/05/24\n */\n\n@Service\n@Slf4j\npublic class IntercomV2ToOMDConverterServic","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bee77f8-2a2e-4a63-8f0d-d1733c56c15e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasConnectorConfig.java","startLine":1,"endLine":41,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.duct.beans.AuthInfo;\n\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.platform.metadata.ComplexType;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_connector_config\")\n@Getter\n@Setter\npublic class CaasConnectorConfig extends MongoBaseBean implements Serializable {\n    public static String CONNECTOR_TYPE_PROP = \"connectorType\";\n\n    @Indexed(background = true)\n    private ConnectorType connectorType;\n    private String label;\n    private String description;\n    private String version;\n    private String sourceVersion;\n    private String primaryDomain;\n    private boolean flattenExternalResponse = true;\n    private boolean validateObjectForMetadata = true;\n    private List<String> secondary","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48f8fff4-4cb0-467d-b480-24bba4f1555b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":94,"endLine":111,"content":"YPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(TYPE).asText()))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(TYPE).asText())).findFirst().get();\n                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(ORIGINAL_DATA_TYPE, field.get(TYPE).asText());\n                    if (complexTypeMappings.containsKey(field.get(TYPE).asText()))\n                        metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.get(TYPE).asText()).getValue());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                    // TODO: Specific analysis for external filters to be performed for all connectors\n//                meta.put(\"externallyFilterable\", !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n                } else {\n                    LOGGER.warn(\"Type not supported, hence skipping {}\", field.get(TYPE).asText());\n                    continue;\n                }\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n                if (dataTypeMappingsForField != null && !StringUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"acff4432-6fe3-4be3-93bd-8281a3aa09cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":212,"endLine":253,"content":"nnectorConfigByObjectName);\n    return connectorConfigByObjectName;\n  }\n\n  private String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n    Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n    return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n  }\n\n  private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n    if (externalSystemResponse.get(\"total\") != null) {\n      return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n    }\n    return 0;\n  }\n\n\n  @Override\n  public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n    MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n    QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n    List<Map<String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3dca5a6e-364b-4956-b3ba-432e387a17d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctErrorConstants.java","startLine":28,"endLine":47,"content":"tory required keys are not present \";\n\n    public static final String MAPPED_FIELDS_NOT_PRESENT_IN_CSV = \"Mapped fields : [%s] is not present in extract CSV. Reach out to Gainsight Support if the issue persists\";\n\n    public static final String CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS = \"CSV has some extra fields which is not part of mappings \";\n\n\n    public static final String NO_UPSERT_KEYS_PRESENT = \"No Upsert keys are present \";\n\n    public static final String NO_MANDATORY_MAPPINGS_PRESENT = \"No Mandatory Mapping keys are present \";\n\n    public static final String RECORD_NOT_FOUND_IN_SOURCE = \"Record not found in Source\";\n\n    public static final String PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE= \"Source System data retrieval error. Make sure authorised user has access to the object in source.\";\n\n    public static final String INVALID_OPERTION_FOR_BULK_WRITE = \"Only INSERT/UPDATE/UPSERT operation is allowed\";\n\n    public static final String PNP_DYNAMICS_WB_MAX_RECORDS_LIMIT_REACHED = \"Too many records to process in a single request. The maximum allowed records to process per request is: \";\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34f96e55-e8c9-4f5b-977d-d7116719ac1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":58,"endLine":93,"content":"0;\n  private static final String THREAD_INTERRUPT_WARNING =\n      \"Just a warning, waking up and trying collection master creation\";\n  private static final String batchIdPattern = \"(?<=/[A-Z]{5,6}[_])(\\\\d{8,}[_][A-Z0-9]+?)(?=\\\\.json)\";\n  private static final Pattern pattern = Pattern.compile(batchIdPattern);\n\n  public static void init(DuctAppType appType) {\n    log.info(\"Initialiazing application properties\");\n    ApplicationConfigProperties applicationProperties = ApplicationConfigProperties.getInstance();\n    log.info(\"Initialized application properties {}\", applicationProperties);\n\n    DuctCommonConstants.setAppType(appType);\n\n    log.info(\"Capturing PID\");\n    String pid;\n    try {\n      pid = capturePID();\n    } catch (Exception e) {\n      log.error(\"{}\", e.getMessage(), e);\n      pid = TokenGenerator.generate();\n    }\n    log.info(\"Setting instance name\");\n    setInstanceName(pid);\n\n    ApplicationInitializer initializer = new ApplicationInitializer(); // NOSONAR\n    log.info(\"Initialiazing logger config {}\", initializer); // Loading ApplicationInitializer.class will intialize\n\n\n    ObjectMapper mapper = JsonUtil.OBJECT_MAPPER; // lets customize object mapper for our use.\n    mapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);\n    mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);\n    mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n  }\n\n  public static void setInstanceName(String pid) {\n    String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9efac75f-c29c-4cf7-8b3d-6bc14f6c8150","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":56,"endLine":76,"content":"vate static final Integer SSO_INSTANCES_EXTRACT_MAX_RETRY = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.extract.sso.instances.max.retry\", 1);\n    private static final String SSO_INSTANCES_URI = \"%s/v1/auth/projects?projectId=%s\";\n    private static final Integer ACCESS_TOKEN_CACHE_EXPIRY_IN_SEC = 23 * 60 * 60;\n    private static final String GSNAP_SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    @Autowired\n    private static RedisCacheUtility redisCacheUtility;\n\n    public static List<PNPConnectionInput> getPnpConnectionInputList(List<PNPConnectionsInfo> pnpConnectionsInfoList) throws Exception {\n        return GainsightCollectionUtils\n                .transformList(pnpConnectionsInfoList, new GainsightCollectionUtils.Transformer<PNPConnectionInput, PNPConnectionsInfo>() {\n                    @SneakyThrows\n                    @Override\n                    public PNPConnectionInput transform(PNPConnectionsInfo pnpConnectionsInfo) {\n                        PNPConnectionInput pnpConnectionInput = new PNPConnectionInput();\n                        pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfo);\n                        if (pnpConnectionsInfo.getConnectionType().equals(ConnectorType.REST_API)) {\n                            try {\n                                setRestAPIDecryptedBaseTokenDetail(pnpConnectionInput);\n                            } catch (Exception e) {\n                             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae2cf475-2c17-4e61-b81a-9c0377f5f1f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":50,"endLine":84,"content":"nfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.stereotype.Component;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.*;\n\n@Component\npublic class CENativeComparisonClient implements DuctClient {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CENativeComparisonClient.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String NEW_LINE_CHAR = \"\\n\";\n    private static final String FIELD_NAME = \"fieldName\";\n    private static final String META = \"meta\";\n    private static final String ORIGINAL_DATA_TYPE = \"originalDataType\";\n    private static final String PATH = \"path\";\n    private static final String FILTERABLE_IN_EXTERNAL_SYSTEM = \"filterableInExternalSystem\";\n    private static final String IS_PICKLIST_FIELD = \"isPicklistField\";\n    private static final String IS_PRIMARY_KEY = \"isPrimaryKey\";\n    private static final String FILTERABLE_IN_INTERNAL_SYSTEM = \"filterableInInternalSystem\";\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9007b563-7497-4023-8965-0e3e6916df10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCEnvSpecificConfigDetailUtil.java","startLine":83,"endLine":100,"content":"\n        String serviceUrl = StringUtils.EMPTY;\n        if(Objects.nonNull(gsService)) {\n            try {\n                serviceUrl = GSServiceURLFactory.getServiceURL(gsService);\n            } catch (Throwable ex) { //NOSONAR\n                // purposefully catching all errors here since we have our own fallback key value in config server\n                log.trace(\"Could not retrieve service url via dynamic mechanism. Falling back to env specific key. emsg: {}\", ex.getMessage());\n            }\n        }\n\n        if (ObjectUtils.isEmpty(serviceUrl)) {\n            return DeploymentProperties.getDeploymentProperties().getValue(fallbackKey);\n        } else {\n            return serviceUrl;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69d06d8b-f009-4201-be63-b4704919a9d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":137,"endLine":160,"content":"TimeOnFail() * secondsToWaitForRetry;\n                    Thread.sleep((sleepOnFail * 1000));\n                }\n\n                LOGGER.info(\"Total records synced {} are\", currentNumberOfRecordsSync);\n            } catch (SocketTimeoutException e) {\n                LOGGER.error(\"CE API Timeout has occured . Hence increasing the timeout and continue extraction to retry count {}\", retryCounter + 1, e);\n                timeoutInMilliSecs = timeoutInMilliSecs + 20 * 1000; //  increasing 20 sec as previous call was timed out\n                shouldContinue = true;\n                if (shouldContinue) {\n                    if (retryCounter >= maxNoOfRetries) {\n                        throw new Exception(String.format(\"Extraction timeout has happened due to \", e));\n                    }\n                    retryCounter++;\n                    shouldContinue = true;\n                    long sleepOnFail = dataExtractionRequest.getDefaultSleepTimeOnFail() == 0 ? retryCounter * secondsToWaitForRetry : dataExtractionRequest.getDefaultSleepTimeOnFail() * secondsToWaitForRetry;\n                    Thread.sleep((sleepOnFail * 1000));\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Headers recieved are {}\", httpResponse.getResponseHeaders());\n                AtomicBoolean ignoreError = new AtomicBoolean(false);\n                String respMsg = httpResponse.getRespMsg();\n                JsonNode jsonNode = OBJECT_MAPPER.readTree(respMsg);\n                if (j","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce926c25-f90b-4c7e-854f-be3d8819bbf3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDao.java","startLine":43,"endLine":78,"content":"ctorType connectorType);\n\n    List<PNPConnectionsInfo> findAllLinkedConnections(ConnectorType connectorType);\n\n    PNPConnectionsInfo findAuthorizedAndLinkedPrimaryConnectionByCRMId(String externalSystemId);\n\n    PNPConnectionsInfo findConnectionByCRMIdForLinking(String crmId);\n\n    PNPConnectionsInfo findConnectionByCRMIdForLinkingUnLinking(String crmId);\n\n    List<PNPConnectionsInfo> findAllAuthorizedAndLinkedCRMConnections(String externalSystemId);\n\n    List<PNPConnectionsInfo> findByConnectionType(ConnectorType connectorType);\n\n    List<PNPConnectionsInfo> findByConnectionIds(List<String> connectionIds);\n\n    PNPConnectionsInfo findByCrmId(String crmId);\n\n    List<PNPConnectionsInfo> findByConnectionTypes(List<ConnectorType> connectorTypes);\n\n    List<PNPConnectionsInfo> findByExcludingConnectionTypes(List<ConnectorType> connectorTypes);\n\n    boolean findIfTenantAlreadyLinked(ConnectorType connectorType);\n\n    Set<String> findAllDistinctTenantsWithEnabledConnection();\n\n    List<PNPConnectionsInfo> findAllConnectionForConnectionType(ConnectorType connectorType);\n\n    PNPConnectionsInfo findByQueueName(String queueName);\n\n    PNPConnectionsInfo populateIpaasStagingPostgresDetails();\n\n    List<PNPConnectionsInfo> findPrimaryConnectionsByConnectorType(ConnectorType connectorType);\n}\n;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59187b83-ac89-4142-bc33-c895293fe191","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":244,"endLine":265,"content":"tUtils.getFieldsFromExpression(objectDefinition.getExpressionForUpsertKeys()));\n            List<GSFieldDefinition> fields = objectDefinition.getFields();\n            Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap = fields.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n            Set<String> readOnlyFields = new HashSet<>();\n            Set<String> fieldNotAvailable = new HashSet<>();\n            fieldsForWriteback = new HashSet<>(ductJobMapping.getColumnMappings().stream()\n                    .filter(mapping -> object.equals(mapping.getObjectName()))\n                    .map(ColumnMapping::getFieldName).collect(Collectors.toList()));\n            for (String fieldName : fieldsForWriteback) {\n                if (fieldNameToFieldDefinitionMap.containsKey(fieldName)) {\n                    if (fieldNameToFieldDefinitionMap.get(fieldName).getMeta().isReadOnly())\n                        readOnlyFields.add(fieldName);\n                } else\n                    fieldNotAvailable.add(fieldName);\n            }\n            readOnlyFields.removeAll(fieldsRequired);\n            if (!fieldNotAvailable.isEmpty()) {\n                availableFieldValidationFailed = true;\n                log.error(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText() + \":\" + String.join(\",\", fieldNotAvailable));\n                errorMessageForNotAvailableFields.append(object).append(\":\").append(String.join(\",\", fieldNotAvailable));\n            }\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61ed583a-f839-4985-858f-fa5b2385c2fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/auth/TenantUserRoleTypeServiceImpl.java","startLine":1,"endLine":45,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.auth;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.bean.RequestInfoDTO;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.enums.AuthTokenType;\nimport com.gainsight.service.TenantUserRoleTypeService;\nimport com.gainsight.service.UserSessionService;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Maps;\nimport com.nimbusds.jose.JOSEException;\nimport com.nimbusds.jose.crypto.DirectDecrypter;\nimport com.nimbusds.jwt.EncryptedJWT;\nimport com.nimbusds.jwt.JWTClaimsSet;\nimport org.apache.commons.lang3.NotImplementedException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.ImmutablePair;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.text.ParseException;\nimport java.util.Date;\nimport java.util.Map;\n\n/**\n * Author: Santa Thounaojam\n * Date  : 11/17/17\n * Time  : 4:34 PM\n */\n@Service\npublic class TenantUserRoleTypeServiceImpl implements TenantUserRoleTypeService {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(TenantUserRoleTypeServiceImpl.class);\n\n  private static final String REQUEST_INFO = \"ri\";\n\n  private final UserSessionService userSessionService;\n  private final Map<String, String> additionals = Maps.newHashMap(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d3f033f2-8134-4a63-bb06-ae6b65cdad24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":349,"endLine":366,"content":"emErrorMapping().getResponsePayload()).errorMessage(ex.getGsExternalSystemErrorMapping().getMessage()).\n                tenantId(ex.getGsExternalSystemErrorMapping().getTenantId()).connectionId(ex.getGsExternalSystemErrorMapping().getConnectionId()).ductStatus(DuctStatus.FAILED)\n                .jobId(ex.getGsExternalSystemErrorMapping().getJobId()).build();\n        log.info(\"updating Job status\");\n        String jobIdToUpdate = null != ex.getGsExternalSystemErrorMapping().getJobId() ? ex.getGsExternalSystemErrorMapping().getJobId() : jobId;\n        updateDuctJobMappingStatus(jobIdToUpdate, ductResponse);\n    }\n\n    private void updateDuctJobMappingStatus(String jobId, DuctResponse ductResponse) {\n        DuctJobMapping ductJobMappingDb = ductJobMappingDao.findByJobId(jobId);\n        ductJobMappingDb.setDuctStatus(ductResponse.getDuctStatus());\n        ductJobMappingDb.setOutputS3Path(ductResponse.getS3FilePath() != null ? ductResponse.getS3FilePath() : null);\n        ductJobMappingDb.setExternalSystemResponse(ductResponse.getExternalSystemResponse());\n        ductJobMappingDb.setTotalNumberOfRecords(ductResponse.getTotalNumberOfRecords());\n        ductJobMappingDb.setExternalErrorMessage(ductResponse.getErrorMessage());\n        ductJobMappingDao.update(ductJobMappingDb);\n    }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8200a117-74d5-4cc4-af7c-f349ccd84025","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":109,"endLine":116,"content":", metadataGenerationDetails, appName);\n        LOGGER.info(\"creating instrumentationJob with jobId : {}\", instrumentationJob.getJobId());\n        JobContext jobContext = JobTracer.createJob(instrumentationJob);\n        JobTracer.injectJobContext(jobContext, requestInfo, RequestInfoSetterGetter.getInstance());\n        JobTracer.activateJobContext(jobContext);\n        LOGGER.info(\"created job and injected instrumentationJob context with jobId : {}\", instrumentationJob.getJobId());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"912d503a-c693-46c3-b83c-3bf259147066","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":61,"endLine":86,"content":"nService.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String RESULTS = \"results\";\n\n    public List<File> extractData(DataExtractionRequest dataExtractionRequest) throws Exception {\n        httpUrlConnectionUtils.setEscapeQueryParams(false);\n        String apiUrl;\n\n        int timeoutInMilliSecs = 60000;\n        int secondsToWaitForRetry = 70;\n        if (dataExtractionRequest.getProperties().containsKey(\"ceTimeOut\")) {\n            timeoutInMilliSecs = (int) dataExtractionRequest.getProperties().get(\"ceTimeOut\");\n        }\n\n        if (StringUtils.isNotEmpty(dataExtractionRequest.getQueryParamForDataFetch())) {\n            apiUrl = dataExtractionRequest.getCloudElementsBaseUrl() + FORWARD_SLASH + CLOUD_API_BASE_URL + FORWARD_SLASH + dataExtractionRequest.getObjectName() + \"?\" + dataExtractionRequest.getQueryParamForDataFetch();\n        } else {\n            apiUrl = dataExtractionRequest.getCloudElementsBaseUrl() + FORWARD_SLASH + CLOUD_API_BASE_URL + FORWARD_SLASH + dataExtractionRequest.getObjectName();\n        }\n        File file = new File(System.getProperty(\"user.dir\") + \"/\" + dataExtractionRequest.getConnectorType() + \"_\" + dataExtractionRequest.getJobId() + JSON);\n        file.createNewFile();\n        int currentNumberOfRecordsSync = 0;\n        boolean shouldContinue = true;\n        int maxNoOfRetries = dataExtractionRequest.getMaxNoOfRetries();\n        int retryCounter = 0;\n        String nextPage = StringUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9eb4d6f1-a8c9-4ddd-ac65-0ef2d9286524","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":157,"endLine":177,"content":"dSplitted.length == 2) {\n                                targetFieldName = fieldSplitted[1];\n                                String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldSplitted[0]).getMeta()\n                                        .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(lookedUpObjectName);\n                                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(lookedUpObjectName);\n                            } else {\n                                targetFieldName = criteria.getFieldName();\n                                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                            }\n                        }\n                    }\n\n                    internalFilterRule = createFilterRule(criteria, fieldNameGSDataTypeMap, fieldNameMetaMap,\n                            ignoreMetadataFieldNames, caasConnectorConfig, objectName, targetFieldName);\n                    filterRules.add(internalFilterRule);\n                    continue;\n                }\n                internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n                filterRules.add(buildRule(criteria, objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1b338b83-cec6-40ce-8bb8-bf31ccbd6344","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/event/DuctEventServiceImpl.java","startLine":30,"endLine":50,"content":"ystem.asset.event.version\";\n        private static final String EVENTS_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.service.api.gateway.url.base\");\n        private static final String PUBLISH_EVENT = \"event\";\n\n\n        @Override\n        public void publishConnectionEvent(PNPConnectionsInfo pnpConnectionsInfo,String operation) {\n            try {\n                Map<String, Object> headers = Maps.newHashMap();\n                headers.put(\"sharedSecret\", DeploymentProperties.getDeploymentProperties().getValue(SYSTEM_ASSET_PUBLISHER_SHARED_SECRET));\n                headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n                headers.put(\"eventName\", DeploymentProperties.getDeploymentProperties().getValue(SYSTEM_ASSET_EVENT_NAME));\n                headers.put(\"topicName\", DeploymentProperties.getDeploymentProperties().getValue(SYSTEM_ASSET_TOPIC_NAME));\n                headers.put(\"eventVersion\", DeploymentProperties.getDeploymentProperties().getValue(SYSTEM_ASSET_EVENT_VERSION));\n                headers.put(\"tenantId\", pnpConnectionsInfo.getTenantId());\n                headers.put(\"x-request-id\", RequestContextProvider.getRequestId());\n\n                ConnectorSystemAssetEventPayload systemAssetEventPayload = new ConnectorSystemAssetEventPayload();\n                systemAssetEventPayload.setAssetType(\"CONNECTION\");\n                systemAssetEventPayload.setAssetId(pnpConnectionsInfo.getConnectionId());\n                systemA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b92d1320-9f05-44b2-af40-85f74f9924f5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":285,"endLine":307,"content":"        retMap.put(\"fields\", constructDynamicsFields(msDynamicsObject.getColumns(), msDynamicsObject.getDisplayName()));\n        return retMap;\n    }*/\n\n    /*private List constructDynamicsFields(List<Column> columns, String objectLabel) {\n        List fieldsList = new ArrayList();\n        Map field;\n        for (Column column : columns) {\n            field = new HashMap();\n            field.put(\"fieldName\", column.getLogicalName());\n            field.put(\"dataType\", column.getExternalType());\n            field.put(\"label\", column.getDisplayName());\n            field.put(\"objectLabel\", objectLabel);\n\n            Map meta = OBJECT_MAPPER.convertValue(column, Map.class);\n            meta.put(\"originalDataType\", column.getLocalType());\n            field.put(\"meta\", meta);\n\n            fieldsList.add(field);\n        }\n        return fieldsList;\n    }*/\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86339e74-fbfb-4a46-a8ea-cc90e8c31f11","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":1,"endLine":26,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelFactory;\nimport com.gainsight.integration.connector.service.GainsightBigQueryChannelService;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.F","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b136f6f-3191-41c1-8769-47473220e0a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct;\n\n\nimport com.gainsight.actions.bean.actionowner.BulkActionResponse;\nimport com.gainsight.actions.bean.actionowner.BulkDataLoadRequest;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.io.File;\nimport java.util.Map;\n\npublic interface DuctJobMappingService {\n\n    DuctResponseDTO synchronousFetch(DuctRequestDTO ductRequestDTO) throws CaasException;\n\n    DuctResponseDTO synchronousUpsert(DuctRequestDTO ductRequestDTO) throws Exception;\n\n    DuctResponseDTO synchronousInsert(DuctRequestDTO ductRequestDTO) throws Exception;\n\n    DuctResponseDTO synchronousUpdate(DuctRequestDTO ductRequestDTO) throws Exception;\n\n    DuctResponseDTO bulkFetch(DuctRequestDTO ductRequestDTO) throws CaasException;\n\n    DuctResponseDTO bulkWrite(DuctRequestDTO ductRequestDTO, File file) throws Exception;\n\n    DuctResponseDTO getDuctJobMappingByJobId(String jobId) throws CaasException;\n\n    BulkActionResponse loadtoExternalSystemViaBulk(BulkDataLoadRequest bulkDataLoadRequest) throws CaasException;\n\n    BulkActionResponse getExternalLoadStatus(String jobId);\n\n    QueryAPIResponseBean getSynchronizedDataFromExternalSystem(DuctRequestDTO ductRequestDTO, boolean useEngine) throws Exception","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3653848-a36c-491b-acf0-05de1cae91cc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":109,"endLine":152,"content":"_LIMIT_EXCEEDED(19021),\n    PNP_DAY_LIMIT_EXCEEDED(19022),\n    PNP_ALLOWED_CONNECTIONS(19023),\n    PNP_JOB_IN_PROGRESS(19024),\n\n    //Dynamics\n    PNP_DYNAMICS_ORG_URI_MISSING(20000),\n    PNP_DYNAMICS_OBJECT_LOGICAL_NAME_MISSING(20001),\n    PNP_DYNAMICS_COLUMN_LOGICAL_NAME_MISSING(20002),\n    PNP_DYNAMICS_UNABLE_TO_FETCH_OPTIONSET(20003),\n    PNP_DYNAMICS_OBJECT_NOT_FOUND(20004),\n    PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT(20005),\n    PNP_DYNAMICS_NOT_AN_OPTIONSET(20006),\n    PNP_DYNAMICS_MAPPING_SOURCE_NOT_FOUND(20007),\n    PNP_DYNAMICS_INVALID_TENANT(20008),\n    PNP_DYNAMICS_NOT_ENABLED(20009),\n\n\n    PNP_TENANT_NON_EXISTENT(30001),\n    PNP_INVALID_TENANT_ID(30002),\n    PNP_REDIS_CACHE_INVALID_TENANT_ID(30003),\n    PNP_CANNOT_DISABLE_SYSTEM_DEFINED_TENANT(30004),\n\n\n    PNP_INVALID_DB_DETAILS(31001),\n    PNP_AUTHENTICATION_ERROR(31002),\n    PNP_REQUIRED_FIELDS_NOT_MAPPED_ERROR(31003),\n    PNP_MAXIMUM_DATA_LIMIT_REACHED(31004),\n    AUTHENTICATION_ERROR(2401),\n\n    PNP_DB_VALIDATION_ERROR(19119),\n    PNP_UNMAPPED_SRC_OBJ_ERROR(19120),\n    MISSING_DESTINATION_TASK(19121),\n    PNP_OBJECT_NOT_FOUND_IN_SOURCE(19122),\n    PNP_AUTHENTICATION_FAILED(19123),\n    FAILED_REQUEST_WITH_ERROR_FILE(19124),\n    FAILED_REQUEST_WITHOUT_ERROR_FILE(19125),\n    PARTIAL_SUCCESS_DATALOAD_MESSAGE(19126),\n    DATA_PREVIEW_IN_PROGRESS(19124),\n    JOB_IN_PROGRESS(19125),\n    ENHANCE_META_DATA_FEATURE_ERROR(19126),\n    ENHANCE_META_DATA_NO_DATA(19127),\n    FIELD_ALREADY_EXISTS(19128),\n    UC_JOB_DP_NOT_FOUND","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"195f39c6-48f2-45a1-82d6-2b02bfe526a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1609,"endLine":1638,"content":"cessKeyQuery = new AccessKeyQuery();\n        accessKeyQuery.accessKey(GainsightUtils.encryptToCSV(oldAccessKey));\n        accessKeyQuery.tenantId(pnpConnectionsInfoFromDb.getTenantId());\n        accessKeyQuery.deleted(false);\n\n        AccessKeyInfo accessKeyInfoFromDB = accessKeyDao.findOne(accessKeyQuery);\n        AccountQuery query = new AccountQuery();\n        query.accountId(accessKeyInfoFromDB.getProjectId());\n\n        GainsightPrecondition.assertFalse(accountDAO.exists(query), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.ACCESS_KEY_SEGMENT_ALTERED.getUserText(), HttpStatus.SC_BAD_REQUEST);\n\n        //check newAccesskey is not already present in AccessKey\n        GainsightPrecondition.assertFalse(isDuplicateSegmentAccessKey(GainsightUtils.encryptToCSV(newAccessKey)), CaasValidationCode.DUPLICATE_ACCESS_KEY);\n\n        accessKeyInfoFromDB.setAccessKeyHashed(GainsightUtils.encryptToCSV(newAccessKey.trim()));\n        accessKeyInfoFromDB.setAccessKeyEncrypted(SecretData.fromValue(newAccessKey.trim()));\n        accessKeyDao.update(accessKeyInfoFromDB);\n    }\n\n    private boolean isPasswordChanged(String newPassword, Object oldPassword) {\n        try {\n            byte[] decodedNewPassword = java.util.Base64.getDecoder().decode(newPassword);\n            return !Arrays.equals(decodedNewPassword, (byte[]) oldPassword);\n        } catch (IllegalArgumentException e) {\n            log.error(\"Not an encoded value {}\", e);\n            return true;\n        }\n    }\n\n    pr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bbac88c9-f6fc-46c0-b3fd-97fa578ebe02","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":171,"endLine":193,"content":"pe));\n                    }\n                    isTenantConfigUpdate = true;\n                }else{\n                    log.info(\"Field is not editable as it is not promoted or metadata api field : {} :{}\", fieldInfo.get(FIELD_NAME), fieldInfo);\n                }\n\n            } else if(fieldsFromTenantDefaultAttribute.containsKey(fieldInfo.get(FIELD_NAME))){\n                /*\n                Fields present in tenant level default attribute list. Hence, editing the entry.\n                */\n                String json = gson.toJson(fieldsFromTenantDefaultAttribute.get(fieldInfo.get(FIELD_NAME)));\n                Map<String, Object> transformedMap = gson.fromJson(json, new TypeToken<Map<String, Object>>() {}.getType());\n                DuctCollectionUtils.deepMerge(transformedMap, fieldInfo);\n                EnhancedGSFieldDefinition enhancedGSFieldDefinition = gson.fromJson(gson.toJson(transformedMap), new TypeToken<EnhancedGSFieldDefinition>(){}.getType());\n                enhancedGSFieldDefinition.setFieldSaveType(saveType);\n                enhancedGSFieldDefinition.setLastModifiedAt(GainsightUtils.getCurrentUTCDate());\n                enhancedGSFieldDefinition.getMeta().getProperties().put(\"modifiedAt\", GainsightUtils.getCurrentUTCDate());\n                fieldsFromTenantDefaultAttribute.put(enhancedGSFieldDefinition.getFieldName(), enhancedGSFieldDefinition);\n                isTenantConfigUpdate = true;\n            } else {\n                /*\n                Need to overr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9b414d1-1b61-40d9-a90d-f948ed39b404","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":125,"endLine":143,"content":"etched fields\n                meta.put(ACCESSIBLE, true);\n\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n                metaProperties.put(SOURCE, FieldSaveType.METADATA_API);\n\n                populateValueIfPresent(field, URL, metaProperties, URL, String.class);\n                populateValueIfPresent(field, ID, metaProperties, ID, String.class);\n                populateValueIfPresent(field, DESCRIPTION, metaProperties, DESCRIPTION, String.class);\n                populateValueIfPresent(field, RAW_DESCRIPTION, metaProperties, RAW_DESCRIPTION, String.class);\n                populateValueIfPresent(field, ACTIVE, metaProperties, ACTIVE, Boolean.class);\n                populateValueIfPresent(field, COLLAPSED_FOR_AGENTS, metaProperties, COLLAPSED_FOR_AGENTS, Boolean.class);\n                populateValueIfPresent(field, REGEXP_FOR_VALIDATION, metaProperties, REGEXP_FOR_VALIDATION, String.class);\n                populateValueIfPresent(field, RAW_TITLE_IN_PORTAL, metaProperties, RAW_TITLE_IN_PORTAL, String.class);\n                populateValueIfPresent(field, VISIBLE_IN_PORTAL, metaProperties, VISIBLE_IN_PORTAL, Boolean.class);\n                populateValueIfPresent(field, TAG, metaProperties, TAG, String.class);\n                populateValueIfPresent(field, CREATED_AT, metaProperties, CREATED_AT, String.class);\n                populateValueIfPresent(field, UPDATED_AT, metaProperties, UPDATED_AT, String.class);\n                po","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84caed35-1421-423c-84aa-589b1a2f3351","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":176,"endLine":203,"content":"     });\n\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while fetching OWNER metadata for Hubspot-\" + e.getMessage()\n                    , e);\n            throw new SystemException(\"Error occurred while fetching OWNER metadata for Hubspot\");\n        }\n        return hubspotEntityProperties;\n    }\n\n    @Override\n    public List<Object> getPipeLineValues(PNPConnectionsInfo pnpConnectionsInfo, String entityName) throws CaasException {\n        if (PIPELINE_ALLOWED_OBJECT_LIST.contains(entityName)) {\n            GainsightHubspotChannelFactory connectionFactory = new GainsightHubspotChannelFactory();\n            try {\n                return connectionFactory.getChannelServiceWithOAuth20(\n                                pnpConnectionsInfo.getTokenDetail().getClientId().getString(),\n                                pnpConnectionsInfo.getTokenDetail().getClientSecret().getString(),\n                                CryptHandler.getInstance()\n                                        .decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()))\n                        .getPipelineMapping(entityName);\n            } catch (Exception e) {\n                LOGGER.error(\"Error in calling Pipeline call from hubspot \", e);\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE,\n                        DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE,\n                        e));\n            }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09e7eccf-ab96-4437-af1e-c28b44a03aad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":356,"endLine":381,"content":".valueOf(field.get(\"name\")), field);\n        });\n\n    Set<String> systemPicklistFields = systemPicklistFieldsInfoMap.keySet();\n\n    objectDefinition.getFields().forEach(fieldDefinition -> {\n      if (systemPicklistFields.contains(fieldDefinition.getFieldName())) {\n        Map<String, Object> fieldInfo = systemPicklistFieldsInfoMap.get(fieldDefinition.getFieldName());\n        List<Map<String, Object>> picklistOptions = processPicklistOptions(fieldInfo, new HashMap<>());\n        List<com.gainsight.bean.PicklistOption> processedPickListOptions = nullSafeList(picklistOptions).stream().map(picklistOption -> {\n          PicklistOption option = new PicklistOption();\n          option.setValue(DuctUtils.valueOf(picklistOption.get(VALUE)));\n          option.setLabel(DuctUtils.valueOf(picklistOption.get(LABEL)));\n          return option;\n        }).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(processedPickListOptions)) {\n          fieldDefinition.setOptions(processedPickListOptions);\n        }\n      }\n    });\n\n\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bb30a636-0c81-429f-a88b-a62459a07b67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":202,"endLine":242,"content":"\n  @Deprecated\n  public static String logformatter(String jobId, Supplier<String> supplier) {\n    return String.format(\"%s {taskType:} {tId:%s} {jId:%s} %s\", UCConstants.UC_CONNECTOR_LOG, RequestContextProvider.getTenantId(), jobId, supplier.get());\n  }\n\n  /**\n   * @deprecated formatting handled using logback config.\n   *\n   * @param jobId\n   * @param message\n   * @return\n   */\n  @Deprecated\n  public static String logformatter(String jobId, String message) {\n    return String.format(\"%s {taskType:} {tId:%s} {jId:%s} %s\", UCConstants.UC_CONNECTOR_LOG, RequestContextProvider.getTenantId(), jobId, message);\n  }\n\n  public static String capturePID() throws IOException {\n    RuntimeMXBean runtimeBean = ManagementFactory.getRuntimeMXBean();\n    String jvmName = runtimeBean.getName();\n    long pid = Long.parseLong(jvmName.split(\"@\")[0]);\n    File file = new File(\"./pid.txt\");\n    if (!file.exists()) {\n      boolean newFile = file.createNewFile();\n      if (!newFile) {\n        throw new SystemException(\"Unable to create pid.txt\", CoreErrorCode.SYSTEM_ERROR);\n      }\n    }\n    FileUtils.write(file, String.valueOf(pid), false);\n    return String.valueOf(pid);\n  }\n\n  public static void setContext(RequestInfo requestInfo) {\n    if(requestInfo == null) {\n      throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    } else {\n      if(StringUtils.isEmpty(requestInfo.getRequestId())) {\n        requestInfo.setRequestId(TokenGenerator.generate());\n      }\n      RequestContextProvider.se","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e0c6d28-6993-49f5-9e91-d1dee26f9ee4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":272,"endLine":283,"content":"uthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, code, null);\n            Object res = authService.getAccessDeatils(authDetailsOp.get().getInitialTokenGenerationDetail(), pnpConnectionsInfo, metadataEngineConfig, flattenConnectionInfo, null);\n            Gson gson = new Gson();\n            Map<String, Object> response = gson.fromJson(res.toString(), Map.class);\n            BaseTokenDetail baseTokenDetail = new BaseTokenDetail();\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRootKey()))\n                baseTokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(String.valueOf(response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRootKey()))));\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRefreshTokenKey()))\n                baseTokenDetail.setRefreshToken(CryptHandler.getInstance().encrypt((response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRefreshTokenKey())).toString()));\n            if (StringUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseAccessExpireKey())) {\n                Long expire = ((Double) response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseAccessExpireKey())).longValue();\n                ExpireUnit expireUnit = ObjectUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit()) ? authD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bcc34bdc-9add-4650-bbc5-ce9ba294087a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":114,"endLine":129,"content":"-> dataTypeMapping.getExternalDatatype().equals(fieldDataType))) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType)).findFirst().get();\n            retMap.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n        } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType))) {\n            dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType)).findFirst().get();\n            retMap.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n        } else {\n            retMap.put(DATA_TYPE, DataType.STRING.name());\n            meta.put(FILTERABLE, true);\n            meta.put(EXTERNALLY_FILTERABLE, false);\n        }\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForFiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9cc49d0-6c85-41b7-a698-a773b78a72cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/CaasMessageProperties.java","startLine":1,"endLine":52,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport com.gainsight.properties.ConfigFileUtil;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class CaasMessageProperties {\n  private static final Logger LOGGER = LoggerFactory.getLogger(CaasMessageProperties.class);\n  private static Properties messageProperties = null;\n  private static final String MESSAGES_EN_PROPERTIES = \"messages_en.properties\";\n  private final Properties properties;\n\n  private CaasMessageProperties(Properties properties) {\n    this.properties = properties;\n  }\n\n  public static Properties getProperties() {\n    if (messageProperties == null) {\n      loadMessageProperties();\n    }\n    return messageProperties;\n  }\n\n  public static CaasMessageProperties getMessageProperties() {\n    return PropertiesHolder.INSTANCE;\n  }\n\n  /**\n   * Method return the corresponding value for the key. If key is not present it will return null\n   *\n   * @param key {@link String} - The key for which value need to be found\n   * @return {@link String} - The value for the input key\n   */\n  public String getValue(String key) {\n    return properties.getProperty(key);\n  }\n\n  private static void loadMessageProperties() {\n    InputStream inputStream = null;\n    try {\n      String filePath = ConfigFileUtil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"079066e8-8af1-40cf-99c7-46eaeadc6377","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasNativeMetadataServiceImpl.java","startLine":119,"endLine":144,"content":"onIDSpecificCaasObjectTenantConfig != null) {\n            for (Map<String, Object> object : connectionIDSpecificCaasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing connection id object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (connectionIDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n        return filteredAndEnhancedObjectList;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return metadataDriver.getMetadataUsingEngine(pnpConnectionsInfo.getConnectionId(), objectName, true);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7eed4a46-6869-4f27-8a1d-e96c95628476","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":1,"endLine":26,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.FeatureToggleUtil;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.MSDynamicsObject;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsSchemaService;\nimport com.gainsight.integration.connector.dynamics.service.error.DynamicsErrorCode;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.connector.dynamics.util.MSDynamicsObjectUtil;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.utils.GainsightColl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6783b95e-1e2a-4369-905f-9a714d823cc4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":168,"endLine":188,"content":" (tenantToObjectMap != null && !tenantToObjectMap.isEmpty()) {\n                //Do nothing\n            } else if (!cmd.hasOption(\"o\")) {\n                if (ConnectorType.ZENDESK.equals(connectorType)) {\n                    objectNames = Arrays.asList(\"tickets\", \"organizations\", \"users\", \"brands\");\n                } else if (ConnectorType.SERVICENOW.equals(connectorType)) {\n                    objectNames = Arrays.asList(\"sn_customerservice_case\", \"asmt_metric_result\", \"asmt_metric\", \"contract_sla\", \"customer_account\",\n                            \"customer_contact\", \"incident\", \"sc_req_item\", \"sc_request\", \"service_entitlement\", \"sn_customerservice_case\",\n                            \"sn_install_base_item\", \"sys_m2m\", \"sys_user\", \"task_sla\", \"cmdb_model\", \"sn_customerservice_escalation\",\n                            \"u_customer_services\", \"sys_user_group\", \"problem\", \"cmdb_ci_outage\", \"cmdb_ci_service\", \"cmdb_ci_appl\",\n                            \"cmdb_rel_ci\", \"cmdb_ci\", \"sn_install_base_m2m_affected_install_base\", \"asmt_assessment_instance\");\n                }\n            } else {\n                String objectFilePath = String.valueOf(cmd.getOptionValue(\"o\"));\n                objectNames = Files.readAllLines(Paths.get(objectFilePath), StandardCharsets.UTF_8);\n            }\n\n            Map<String, List<String>> superClassInfo;\n            LOGGER.info(\"populating super_class_info\");\n            superClassInfo = populateSuperClassInfo();\n            LOGGER.info(\"population of ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9cfdff9a-b105-49cc-89ac-810152183d6a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":720,"endLine":739,"content":"i.getFieldName());\n                                    gsFieldDefinition.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                    return gsFieldDefinition;\n                                }\n                                return null;\n                            }).filter(Objects::nonNull).collect(Collectors.toList()));\n                }\n                relationshipFieldsAlreadyAdded.add(relationshipName);\n            } else if (!loadToDynamicsEnabled && field.contains(\".\")) {\n                relationshipName = field.split(\"\\\\.\")[0];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = relationshipNameToObjectNameMap.get(relationshipName);\n                    relationshipObjectAttributes = service.getObjectAttributes(relationBaseObject, pnpConnectionsInfo, false);\n                    List<GSFieldDefinition> fields = baseAttributes.get(ductJobMapping.getResourceName()).getFields();\n                    String finalRelationshipName = relationshipName;\n                    fields.addAll(relationshipObjectAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                if (ductJobMapping.getFields().contains(finalRelationshipName + \".\" + i.getFieldName())) {\n                                    GSFieldDefinition gsFieldDefinition = DuctUtils.cloneGSFieldDefinition(i);\n                                    gsFieldDefinit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f8d68c3c-48f6-4069-98a9-2f85011ae4b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":291,"endLine":312,"content":"   if (field.getDataType().getDataType().equals(DataType.TIMESTAMP.getDataType())) {\n                    try {\n                        String timestamp = getFieldValue(obj, field.getJsonPath());\n                        if (timestamp.contains(\".\")) {\n                            String[] split = timestamp.split(\"\\\\.\");\n                            updateFieldValue(obj, field.getJsonPath(), Long.parseLong(split[0]));\n                            timestamp = split[0];\n                        }\n                        if (timestamp.length() == 16) {\n                            updateFieldValue(obj, field.getJsonPath(), (Long.parseLong(timestamp) / 1000));\n                        } else if (timestamp.length() == 10 && dataExtractionRequest.getConnectorType().equals(ConnectorType.BIGQUERY)) {\n                            updateFieldValue(obj, field.getJsonPath(), timestamp + \"000\");\n                        }\n\n                    } catch (Exception e) {\n                        throw new Exception(\"Error occurred while trying to convert epoch value\", e);\n                    }\n                } else if (dataExtractionRequest.getConnectorType().equals(ConnectorType.JIRA) && field.getDataType().equals(DataType.DATETIME)) {\n                    try {\n                        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        String timestamp = getFieldValue(obj, field.getJsonPath());\n                        if (","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"852aed9f-74ab-417a-be8a-8dbfbeaad2fc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasMetadataTransformationConfigDAO.java","startLine":1,"endLine":12,"content":"package com.gainsight.duct.metadata.db.service;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.config.CaasMetadataTransformationConfig;\n\npublic interface CaasMetadataTransformationConfigDAO extends AbstractEntityDao<CaasMetadataTransformationConfig> {\n\n    CaasMetadataTransformationConfig getConfigByConsumer(String consumer);\n\n    void dropCollection();\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"904947ad-db33-4f47-ba7b-c3ab2d47d59c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":271,"endLine":294,"content":"    redisCacheUtility.putValue(DuctUtils.getObjectsSuperclassCacheKey(pnpConnectionsInfo.getConnectionId()), cachedSuperClass,\n                            DeploymentProperties.getDeploymentProperties().getIntegerValue(\"caas.servicenow.objects.superclass.cache.expiry.in.seconds\", 259200));\n\n                    return superClassObject;\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Exception occurred at the time of fetching servicenow super_class information for object {}\", objectName, e);\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n        return null;\n    }\n\n    private List<Map<String, Object>> transformObjectList\n            (List<Map<String, Object>> objectList, PNPConnectionsInfo pnpConnectionsInfo, boolean showOnlyIncludedObjects) throws CaasException {\n\n        CaasObjectConfig caasObjectConfig = caasObjectConfigDAO.getCaasObjectConfig(pnpConnectionsInfo.getConnectionType());\n        CaasObjectTenantConfig caasObjectTenantConfig = caasObjectTenantConfigDAO.getTenantSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId());\n        CaasObjectTenantConfig connectionIDSpecificCaasObjectTenantConfig = caasObjectTenantConfigDAO.getConnectionIdSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n        List<Map<String, Object>> filteredAn","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03317178-c975-4247-9b59-d947f3d8d10b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayResponseHandler.java","startLine":1,"endLine":38,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dh;\n\nimport java.io.Serializable;\n\n/**\n * user : Vipin Sharma\n * date : 15/10/19\n **/\npublic class ConnectorsDataHighwayResponseHandler<T> implements Serializable {\n\n    private static final long serialVersionUID = -8367143034851667017L;\n    private int statusCode;\n    private String reasonPhrase;\n    private T responseBody;\n\n    public ConnectorsDataHighwayResponseHandler(int statusCode, String reasonPhrase, T responseBody) {\n        this.statusCode = statusCode;\n        this.reasonPhrase = reasonPhrase;\n        this.responseBody = responseBody;\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    public String getReasonPhrase() {\n        return reasonPhrase;\n    }\n\n    public T getResponseBody() {\n        return responseBody;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"771cb98c-1ead-4c6f-9340-5e84bd4bb78a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":376,"endLine":397,"content":"ieldInfo = new FieldInfo();\n            fieldInfo.setName(getNameForDHFilterRule(mapping, ductJobMapping.getResourceName()));\n            fieldInfo.setFieldAlias(getNameForDHFilterRule(mapping, ductJobMapping.getResourceName()));\n            DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, mapping, fieldInfo, fieldNameMetaMap, getIgnoreMetadataFieldNames(),dateFormate,dateTimeFormate);\n            fieldInfo.setFieldType(FieldType.FIELD);\n            showFields.add(fieldInfo);\n        });\n        //TODO hubspot add import lookup source here\n        //todo check associations to be added\n        //todo check for external datatype and date\n\n        freeFormQueryInfo.setShowFields(showFields);\n        freeFormQueryInfo.setWhereClause(DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, getIgnoreMetadataFieldNames(),caasConnectionConfig, ductJobMapping.getResourceName()));\n        LOGGER.info(\"{} freeform task creation payload for DH completed\", ductJobMapping.getConnectorType());\n        return freeFormQueryInfo;\n    }\n\n    protected abstract void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap);\n\n    private void populateMetadataInfoForDHTask(Map<String, Object> metaData) {\n        metaData.putIfAbsent(DuctConstants.TASK_NAME, getTaskName());\n        metaData.putIfAbsent(DuctConstants.TEAM_NAME, getTeamNam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc377dd2-1c26-4ab3-8e51-9aba01881a59","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":580,"endLine":603,"content":"l) {\n                Boolean disablePromptConsent = (Boolean) pnpConnectionsInfo.getProperties().get(\"disablePromptConsent\");\n                if (!disablePromptConsent) {\n                    dynamicsConsentStr = \"&prompt=consent\";\n                }\n            } else {\n                dynamicsConsentStr = \"&prompt=consent\";\n            }\n        }\n        return dynamicsConsentStr;\n    }\n\n    private String getState(String accountId, String authToken, Map<String, Object> properties) {\n        OAuthStateDetail oAuthStateDetail = new OAuthStateDetail();\n        oAuthStateDetail.setAccountId(accountId);\n        oAuthStateDetail.setAuthToken(authToken);\n        if (properties != null && !properties.isEmpty()) {\n            oAuthStateDetail.setProperties(properties);\n        }\n        String stateJson = GainsightUtils.convertObjectToJson(oAuthStateDetail);\n        return GainsightUtils.encryptToCSV(stateJson);\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e33b47d-0e6e-481b-a9d6-3f95578000d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":197,"endLine":214,"content":" = gainsightHubspotSchemaBean.getAssociations().stream()\n                    .filter(association -> association.containsKey(FROM_OBJECT_TYPE_ID) && association.get(FROM_OBJECT_TYPE_ID)\n                            .equals(gainsightHubspotSchemaBean.getObjectTypeId())).collect(Collectors.toList());\n            HashMap<String, CaasObjectApiConfig> typeIdByConfig = new HashMap();\n            for (CaasObjectApiConfig connectorConfig : connectorConfigs) {\n                if (connectorConfig.getAdditionalProperties().containsKey(DuctConstants.OBJECT_TYPE_ID))\n                    typeIdByConfig.put(connectorConfig.getAdditionalProperties().get(DuctConstants.OBJECT_TYPE_ID).toString(), connectorConfig);\n            }\n            String targetObjectTypeId = null;\n            CaasObjectApiConfig caasObjectApiConfig = null;\n            GainsightHubspotFieldDescriptionV3 fieldDescriptionWithReference = null;\n            ModificationMetadata modificationMetadata = new ModificationMetadata(false, true, true);\n            for (Map<String, Object> association : associations) {\n                targetObjectTypeId = association.get(TO_OBJECT_TYPE_ID).toString();\n                caasObjectApiConfig = typeIdByConfig.get(targetObjectTypeId);\n                if (caasObjectApiConfig != null) {\n                    String fieldName = String.format(FIELD_NAME_FORMAT, caasObjectApiConfig.getAdditionalProperties().get(PLURAL_NAME_KEY));\n                    fieldDescriptionWithReference = createFieldDescri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e67baa76-9b60-4a00-8715-f69a46ee37f5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectField.java","startLine":276,"endLine":338,"content":"}\n\n    public Boolean getNamePointing() {\n        return namePointing;\n    }\n\n    public void setNamePointing(Boolean namePointing) {\n        this.namePointing = namePointing;\n    }\n\n    public Boolean getCustom() {\n        return custom;\n    }\n\n    public void setCustom(Boolean custom) {\n        this.custom = custom;\n    }\n\n    public Boolean getDefaultedOnCreate() {\n        return defaultedOnCreate;\n    }\n\n    public void setDefaultedOnCreate(Boolean defaultedOnCreate) {\n        this.defaultedOnCreate = defaultedOnCreate;\n    }\n\n    public Boolean getDeprecatedAndHidden() {\n        return deprecatedAndHidden;\n    }\n\n    public void setDeprecatedAndHidden(Boolean deprecatedAndHidden) {\n        this.deprecatedAndHidden = deprecatedAndHidden;\n    }\n\n    public Boolean getHtmlFormatted() {\n        return htmlFormatted;\n    }\n\n    public void setHtmlFormatted(Boolean htmlFormatted) {\n        this.htmlFormatted = htmlFormatted;\n    }\n\n    public String getDefaultValueFormula() {\n        return defaultValueFormula;\n    }\n\n    public void setDefaultValueFormula(String defaultValueFormula) {\n        this.defaultValueFormula = defaultValueFormula;\n    }\n\n    public String getCalculatedFormula() {\n        return calculatedFormula;\n    }\n\n    public void setCalculatedFormula(String calculatedFormula) {\n        this.calculatedFormula = calculatedFormula;\n    }\n\n    public List<PickListValue> getPicklistValues() {\n        return picklistValues;\n    }\n\n    public void setPicklistValues(Li","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d0b1363-1f99-48ab-b775-023b3d206498","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackDynamicsMessageProcessor.java","startLine":61,"endLine":81,"content":".getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                DuctJobMapping payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                log.info(\"Received payload for WriteBackDynamicsMessageProcessor  : {}\", payload);\n                DuctCommonUtils.setContext(JsonUtil.readObject(CryptUtil.getSimpleCryptor().decrypt(payload.getEncryptedRequestInfo()), RequestInfo.class));\n                MDCContext.put(\"jobId\", payload.getJobId());\n                MDCContext.put(\"connectorType\", payload.getConnectorType().getValue());\n                if (payload.isBulk()) {\n                    ductService.uploadBulkData(payload);\n                }\n                if (!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                    ductService.createSingleData(payload);\n                } else if (!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                    ductService.updateSingleData(payload);\n                }\n                log.info(\"WriteBackDynamicsMessageProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n            } catch (Exception exception) {\n                log.error(\"Error while processing WriteBackDynamicsMessageProcessor {}\", exception.getMessage(), exception);\n                re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31825034-c6b7-45bc-84af-271516e3a5df","type":"exception","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/error/CaasException.java","startLine":1,"endLine":24,"content":"package com.gainsight.duct.beans.error;\n\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport exception.ErrorCode;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class CaasException extends Exception{\n\n    private GsExternalSystemErrorMapping gsExternalSystemErrorMapping;\n    private ErrorCode errorCode;\n    private String errorMessage;\n\n    public CaasException(GsExternalSystemErrorMapping gsExternalSystemErrorMapping) {\n        this.gsExternalSystemErrorMapping = gsExternalSystemErrorMapping;\n    }\n\n    public CaasException(String message, ErrorCode errorCode){\n        this.errorCode = errorCode;\n        this.errorMessage = message;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54ee0816-f2b3-4f2f-bbbb-d7e8fc0ed749","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/CommonEngineConnectionService.java","startLine":24,"endLine":64,"content":"n.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Order(100000)\n@Service\npublic class CommonEngineConnectionService implements CaasConnectionService {\n\n\n    private static final Logger log = LoggerFactory.getLogger(CommonEngineConnectionService.class);\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    private AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return true;\n    }\n\n    @Override\n    public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c32acca1-827b-4f6e-8bc6-3632ec8e3413","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/Zuorav2ValidationDatasourceService.java","startLine":83,"endLine":90,"content":"ield: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4811036b-d313-408f-8ee2-6b4cd46e73e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":75,"endLine":115,"content":"y.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.ws.rs.NotSupportedException;\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@Service\npublic class DuctJobMappingServiceImpl implements DuctJobMappingService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctJobMappingServiceImpl.class);\n    private static String CAAS_BUCKET_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"s3.caas.bucket.name\");\n    private static final String AWS_REGION_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"aws.region.name\", \"us-east-1\");\n\n    private static String ENCODING = \"UTF8\";\n    private static Character DELIMITER = ',';\n\n\n    private DuctJobMappingDao ductJobMappingDao;\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    private final QueueProducer queueProducer;\n    private final MessageInfo<DuctJobMapping> MESSAGE_INFO;\n\n    private final MessageInfo<DuctJobMapping> WB_HUBSPOT_MESSAGE_INFO;\n    private final MessageInfo<DuctJobMapping> WB_DYNAMICS_MESSAGE_INFO;\n    private final MessageInfo<DuctJobMapping> EXT_DB_SYS_WB_MESSAGE_INFO;\n\n    private ConnectorDataSourceFactory connectorDataSourceFactory;\n\n    private DuctValidationService ductValidationService;\n\n    private GainsightLoadFactory gainsightLoadFactory;\n\n    private CaasMetadataFactory caasMetadataFactory;\n\n    private ZoomEventProcessorService zoomEventProcessorService;\n\n    private EngineCommonDat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19cddfa2-6e83-493a-8331-3671ad93048c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":88,"endLine":111,"content":"etadataGenerationDetails, appName);\n        JobTracer.completeJob(job);\n    }\n\n\n    public static void pushJobToInstrumentation(DuctJobMapping ductJobMapping, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        Job instrumentationJob = createJob(requestInfo, ductJobMapping, appName);\n        LOGGER.info(\"creating instrumentationJob with jobId : {}\", instrumentationJob.getJobId());\n        JobContext jobContext = JobTracer.createJob(instrumentationJob);\n        JobTracer.injectJobContext(jobContext, requestInfo, RequestInfoSetterGetter.getInstance());\n        JobTracer.activateJobContext(jobContext);\n        LOGGER.info(\"created job and injected instrumentationJob context with jobId : {}\", instrumentationJob.getJobId());\n    }\n\n    public static void pushJobToInstrumentation(MetadataGenerationDetails metadataGenerationDetails, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        Job instrumentationJob = createJob(requestInfo, metadataGenerationDetails, appName);\n        LOGGER.info(\"creating instrumentationJob with jobId : {}\", instrumentationJob.getJobId());\n        JobContext jobContext = JobTracer.createJob(instrument","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69b8e29e-deb4-45f9-83d5-403467a19b9c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":248,"endLine":272,"content":";\n            meta.put(CREATEABLE, field.getCreateable());\n            meta.put(GDM_FORMULA_COLUMN, field.getCalculated());\n            meta.put(NILLABLE, field.getNillable());\n            meta.put(DECIMAL_PLACES, field.getScale());\n            meta.put(PRECISION, field.getPrecision());\n            meta.put(LENGTH, field.getLength());\n            meta.put(FIELD_GROUP_TYPE, field.getCustom() ? FieldGroupType.CUSTOM : FieldGroupType.STANDARD);\n            meta.put(GROUPABLE, field.getGroupable());\n            meta.put(NAME_FIELD, field.getNameField());\n            meta.put(SORTABLE, field.getSortable());\n            meta.put(FILTERABLE, field.getFilterable());\n            meta.put(AGGREGATABLE, field.getAggregatable());\n            if (REFERENCE_KEYWORD.equalsIgnoreCase(field.getType())) {\n                meta.put(LOOKUP_DETAIL, createLookupDetail(field));\n            }\n            // No property which gives this value\n            meta.put(ACCESSIBLE, true);\n            // No property which gives this value\n//            meta.put(SCHEMA_UPDATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyDefinition());\n            // No property which gives this value\n//            metaProperties.put(SOURCE_COMPLEX_TYPE, gainsightHubspotFieldDescription.getFieldType());\n            if (complexTypeMappings.containsKey(field.getType()))\n                metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.getType()).getValue());\n            metaProperties.pu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"618fe688-eeeb-4424-b032-2b52c1a70def","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":103,"endLine":124,"content":" = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        if (baseCriteria.getFilters() != null && !baseCriteria.getFilters().isEmpty()) {\n            for (Criteria criteria : baseCriteria.getFilters()) {\n                FilterRule internalFilterRule = new FilterRule();\n                if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                    //handle if there is only one filter\n                    internalFilterRule = createFilterRule(criteria, fieldNameGSDataTypeMap, fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName);\n                    filterRules.add(internalFilterRule);\n                    continue;\n                }\n                internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n                filterRules.add(buildRule(criteria, fieldNameGSDataTypeMap, fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName));\n            }\n            if (baseCriteria.getDuctFilterCondition() != null)\n                filterRule.setCondition(baseCriteria.getDuctFilterCondition());\n        } else {\n            FilterRule internalFilterRule = createFilterRule(baseCriteria, fieldNameGSDataTypeMap, fieldNameMetaMap, ignoreMetadataFieldNames,caasConnectorConfig, objectName);\n            filterRules.add(internalFilterRule);\n        }\n        filterRule.setRules(filterRules);\n        return filterR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a860dbec-bb0c-4120-924b-f6f7c28adc1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":645,"endLine":667,"content":"_FETCH.getGsEventCode(),\n                            CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(), providerMessage.asText());\n                    throw new CaasException(gsExternalSystemErrorMapping);\n                } catch (Exception ex) {\n                    try {\n                        LOGGER.error(\"Error occurred while trying to extract data : {}\",ex);\n                        Document doc = UCXMLUtility.convertStringToXMLDocument(respMsg);\n                        String providerMessage = UCXMLUtility.getElementValueById(doc, \"providerMessage\");\n                        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsEventCode(),\n                                CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(),\n                                providerMessage);\n                        throw new CaasException(gsExternalSystemErrorMapping);\n                    } catch (Exception e1) {\n                        LOGGER.error(\"Could not find provider message on failure \", e1);\n                        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n                    }\n                }\n            }\n        }\n\n        Map data = new HashMap();\n        data.put(RESULTS,arr);\n        if(arr.size() < Integer.valueOf(dataExtraction","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ac446d6-9174-4f62-bb59-445a71cea8d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctJobMappingDao.java","startLine":1,"endLine":9,"content":"package com.gainsight.duct.dao;\n\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.DuctJobMapping;\n\npublic interface DuctJobMappingDao extends AbstractEntityDao<DuctJobMapping> {\n    DuctJobMapping findByJobId(String jobId);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8912331d-548e-4802-8a68-446f953471ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":125,"endLine":153,"content":"POINT + SLASH + connectionId + SLASH + objectName + SLASH + ATTRIBUTES;\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<Map<String, ObjectDefinition>>() {\n            });\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getAttributes(String objectName, String connectionId, boolean includePicklistOptions) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + SLASH + connectionId + SLASH + objectName + SLASH + ATTRIBUTES;\n        if (includePicklistOptions) {\n            url = url + \"?includePicklistOptions=true\";\n        }\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<Map<String, ObjectDefinition>>() {\n            });\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80bbd6eb-eda8-4de8-a919-94a54720f655","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/AuthorizationLevel.java","startLine":1,"endLine":12,"content":"package com.gainsight.duct.enums;\n\npublic class AuthorizationLevel {\n\n        public static final int LIST = 1;\n        public static final int READ = 2;\n        public static final int EXECUTE = 4;\n        public static final int UPDATE = 8;\n        public static final int CREATE = 16;\n        public static final int DELETE = 32;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aaa56903-4b38-4b9b-b0c4-ece601e6ccb1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/DuctAppType.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.enums;\n\nimport lombok.Getter;\n\n@Getter\npublic enum DuctAppType {\n  WEB(\"uc-web\"),\n  WORKER(\"uc-worker\"),\n  CDC_ROUTER(\"cdc-router\"),\n  CDC_BROKER(\"cdc-broker\"),\n  CLIENT(\"uc-client\");\n\n  /**\n   * represents app.name vm arg.\n   */\n  private final String name;\n\n  DuctAppType(String name) {\n    this.name = name;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0045f213-37e7-489a-9a1b-de4fe33c1daa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":524,"endLine":541,"content":"length() == 18 ? sfdcOrgId : SalesforceUtils.convert15To18(sfdcOrgId));\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_USER_ID, sfdcProfile.getUserId());\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_PICTURE_URL, sfdcProfile.getPhotos().getThumbnail());\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_USER_DISPLAY_NAME, sfdcProfile.getDisplayName());\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_USER_NAME, sfdcProfile.getUserName());\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_USER_EMAIL, sfdcProfile.getUserName());\n            pnpConnectionProperties.put(Constants.SalesforceAPIRequest.SERVICE_ENDPOINT_URL, String.format(SERVICE_ENDPOINT_URL_FORMAT, pnpConnectionProperties.get(UCConstants.GSIntegration.SFDC_INSTANCE_URL)));\n        } catch (IOException e) {\n            throw new SystemException(CaasValidationCode.ERROR_POPULATING_PROPERTIES.getUserText(), e);\n        }\n    }\n\n    private void setSFDCConnectionProperties(String jsonString, PNPConnectionsInfo pnpConnectionsInfo) {\n        try {\n            Map<String, Object> map = GainsightUtils.OBJECT_MAPPER.readValue(jsonString, new TypeReference<Map<String, Object>>() {\n            });\n            pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.SFDC_TOKEN_ID, GainsightUtils.valueOf(map.get(\"id\")));\n            pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.SFDC_INSTANC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08296b63-8cf0-4869-9848-b3a7eba26bb1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightOAuth20AccountServiceImpl.java","startLine":84,"endLine":110,"content":"Type.QueryString, null, null));\n        return service.getAuthorizationUrl(null);\n    }\n\n    @Override\n    public Token accessToken(AccountType accountType, String code, String hostUrl, String resource, OAuthDetail oAuthDetail) {\n        OAuthConfig config = new OAuthConfig(CRYPT_HANDLER.decrypt(oAuthDetail.getClientId()), CRYPT_HANDLER.decrypt(oAuthDetail.getClientSecret()),\n                callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null);\n\n        OAuthService service;\n        if (accountType == AccountType.DYNAMICS) {\n            service = new GainsightDynamicsOAuth20Service((DefaultApi20) accountType.getApi(), config, resource);\n        } else if (accountType.isAccessBodyRequest()) {\n            service = new GainsightOAuth20Service((DefaultApi20) accountType.getApi(), config);\n        } else {\n            service = new OAuth20ServiceImpl((DefaultApi20) accountType.getApi(), config);\n        }\n\n        return service.getAccessToken(null, new Verifier(code));\n    }\n\n    @Override\n    public Token accessToken(AccountType accountType, String code, String hostUrl, OAuthDetail oAuthDetail, String customDomain, String orgType) {\n        OAuthConfig config = new OAuthConfig(CRYPT_HANDLER.decrypt(oAuthDetail.getClientId()), CRYPT_HANDLER.decrypt(oAuthDetail.getClientSecret()),\n                callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null);\n\n        OAuthService service = new GainsightOAuth20Service(new SFDC20ApiV2(customDomain, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4381dcfd-ea52-488d-9cf5-89273c4161d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.connector.Zuorav2ChannelServiceImpl;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db419190-425d-45b8-9db5-387d708c4a87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":90,"endLine":110,"content":"           if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n                if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n                    meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n\n                populateValueIfPresent(field, CREATEABLE_FLAG, meta, CREATEABLE, Boolean.class);\n\n                populatePicklistOption(field, fieldDefinition);\n                //No property to identify hidden field marking accessible as true by default for all fetched fields\n                meta.put(ACCESSIBLE, true);\n                meta.put(READ_ONLY, field.get(CREATEABLE_FLAG).asBoolean() ? false : true);\n\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n                populateValueIfPresent(field, ID, metaProperties, ID, String.class);\n                populateValueIfPresent(field, DESCRIPTION, metaProperties, DESCRIPTION, String.class);\n                populateValueIfPresent(field, ACTIVE_FLAG, metaProperties, ACTIVE_FLAG, Boolean.class);\n                populateValueIfPresent(field, ADD_TIME, metaPr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"44b89190-2915-4fc7-bcfa-48d988e58f7c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":31,"endLine":55,"content":"oOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String RAW_TITLE = \"raw_title\";\n    private static final String TITLE = \"title\";\n    private static final String TITLE_IN_PORTAL = \"title_in_portal\";\n    private static final String TYPE = \"type\";\n    private static final String EDITABLE_IN_PORTAL = \"editable_in_portal\";\n    private static final String REQUIRED_IN_PORTAL = \"required_in_portal\";\n    private static final String URL = \"url\";\n    private static final String ID = \"id\";\n    private static final String DESCRIPTION = \"description\";\n    private static final String RAW_DESCRIPTION = \"raw_description\";\n    private static final String POSITION = \"position\";\n    private static final String ACTIVE = \"active\";\n    private static final String COLLAPSED_FOR_AGENTS = \"collapsed_for_agents\";\n    private static final String REGEXP_FOR_VALIDATION = \"regexp_for_validation\";\n    private static final String RAW_TITLE_IN_PORTAL = \"raw_title_in_portal\";\n    private static final String VISIBLE_IN_PORTAL = \"visible_in_portal\";\n    private static final String TAG = \"tag\";\n    private static final String CREATED_AT = \"created_at\";\n    private static final String UPDATED_AT = \"updated_at\";\n    private static final String REMOVABLE = \"removable\";\n    private static final String KEY = \"key\";\n    private static final String AGENT_DESCRIPTION = \"agent_description\";\n    private static final String SYSTEM_FIELD_OPTI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fbba16a-6efa-426a-9757-4eb532125a80","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":144,"endLine":173,"content":"the source or user is not authorised to access the object.\\n\" +\n                \"Remove the object from connector mappings and re-run the job.\",pluralName));\n        throw se;\n      }\n      return Collections.emptyList();\n    } catch(OAuth2Exception o)\n    {\n      log.error(\"Authentication failed. Please check your refersh token\");\n      SystemException se=new SystemException(\"OAuth token expired\",o);\n      se.setUiMessage(UCValidationCode.PNP_AUTHENTICATION_FAILED.getUserText());\n      throw se;\n    }\n    catch (Exception e) {\n      log.error(\"Failed to get dynamics object {} : {}\", pluralName, e.getMessage(), e);\n      return Collections.emptyList(); //failed for some reason, skip this validation and pass it on..\n    }\n    //Do not use stream\n    List<String> missingColumns = new LinkedList<>();\n    Map<String, String> sourceColumnLogicalNameToTargetObject = Maps.newHashMap();\n    for (Column column : msDynamicsObject.getColumns()) {\n      sourceColumnLogicalNameToTargetObject.put(column.getLogicalName(), column.getTargetObject());\n    }\n    for (Map.Entry<String, String> entry : sourceCanonicalNamesToDisplayNameMap.entrySet()) {\n      String[] mappedSourceColumns = entry.getKey().split(\"\\\\.\");\n      if (mappedSourceColumns.length == 1) { //non lookup\n        if (!sourceColumnLogicalNameToTargetObject.containsKey(mappedSourceColumns[0])) {\n          missingColumns.add(entry.getValue());\n        }\n      } else { //lookup, length=2\n        if (!sourceColumnLogicalNameToTarget","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"086576e1-dd26-401f-9492-ee21d5a74623","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":146,"endLine":162,"content":"ate static String getQueryStringFromMap(Map<String, String> map) {\n        return map.entrySet().stream()\n                .map(p -> encode(p.getKey()) + \"=\" + encode(p.getValue()))\n                .reduce((p1, p2) -> p1 + \"&\" + p2)\n                .orElse(\"\");\n    }\n\n    private static String encode(String value) {\n        try {\n            value = URLEncoder.encode(value, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            LOGGER.error(\"Error while encoding tokens in url \", e);\n            throw new SystemException(\"Error while encoding tokens in url \", e);\n        }\n        return value;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"465e8565-2d8c-4d0e-a5c2-17fbff70b3c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.databricks.GainsightDatabricksChannelFactory;\nimport com.gainsight.integration.connector.databricks.GainsightDatabricksChannelService;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d3d8179d-e116-48f4-8d64-7c8b310c9a48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/Zuorav2ValidationDatasourceService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Order(200)\n@Service\n@Slf4j\npublic class Zuorav2ValidationDatasourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.ZUORAV2;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequest","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de7fb5b0-832e-45b0-963f-5596b82a10b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":221,"endLine":246,"content":"ception {\n        DPWorkflowTaskDetailsDTO fetchTask;\n        DPWorkflowTaskDetailsDTO filterTask;\n        // todo owner job - not honoured\n        fetchTask = generateWorkflowTask(ductJobMapping,\n                DHTaskType.EXTERNALTASK, rootTaskId, objectDefinition);\n        taskDetailsDTOList.add(fetchTask);\n        if (ductJobMapping.getCriteria() != null && generateFreeFormTask()) {\n            filterTask = generateWorkflowTask(ductJobMapping,\n                    DHTaskType.FREE_FORM_QUERY, fetchTask.getTaskId(), objectDefinition);\n            fetchTask.setChildrenTaskIds(Lists.newArrayList(filterTask.getTaskId()));\n            taskDetailsDTOList.add(filterTask);\n        } else {\n            fetchTask.setChildrenTaskIds(new ArrayList<>());\n        }\n        listOfChildTaskId.add(fetchTask.getTaskId());\n        return fetchTask;\n    }\n\n    private DPWorkflowTaskDetailsDTO generateWorkflowTask(DuctJobMapping ductJobMapping,\n                                                          DHTaskType dpTaskType,\n                                                          String parentId, ObjectDefinition objectDefinition) throws CaasException{\n        DPWorkflowTaskDetailsDTO dpWorkflowTaskDetailsDTO = new DPWorkflowTaskDetailsDTO();\n        dpWorkflowTaskDetailsDTO.setTaskId(RandomStringUtils.randomAlphanumeric(10));\n//        dpWorkflowTaskDetailsDTO.setTaskName(DHUtils.generateCleanTaskName(jobInfo.getJobName()));\n        dpWorkflowTaskDetailsDTO.setChildrenTaskIds(Lists.newArrayLi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eae364a3-b79c-4e96-bcec-16aeaa4389c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1286,"endLine":1310,"content":"        return defaultValue;\n            }\n        } catch (Exception ex) {\n            log.warn(\"Feature Config ::: Failed to feature name. {}, {}\", ex.getMessage(), ex);\n            return defaultValue;\n        }\n    }\n\n    private PNPConnectionsInfo insertPxMultiInstance(PNPConnectionsInfo pnpConnectionsInfo) {\n        if (pnpConnectionsInfo.getProperties().containsKey(\"MULTIPLE_INSTANCE_ACCOUNT\")) {\n            pnpConnectionsInfo.getProperties().put(\"MULTIPLE_INSTANCE_ACCOUNT\",\n                    pnpConnectionsInfo.getProperties().get(\n                            \"MULTIPLE_INSTANCE_ACCOUNT\"));\n        }\n        return pnpConnectionsInfo;\n    }\n\n    private PNPConnectionsInfo processConnectionForDynamicsAndHubspot(PNPConnectionsInfo pnpConnectionsInfo) {\n        pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.INIT);\n        boolean isPrimaryConnection = pnpConnectionsInfo.getProperties().containsKey(UCConstants.GSIntegration.IS_PRIMARY_CONNECTION) ? Boolean.valueOf(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.IS_PRIMARY_CONNECTION))) : true;\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.IS_PRIMARY_CONNECTION, isPrimaryConnection);\n        pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.GENERATE_OOB_JOBS, true);\n        if (pnpConnectionsInfo.getConnectionType().equals(ConnectorType.HUBSPOT)\n                && null != pnpConnectionsInfo.getProperties()\n                && pnpConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"138ed2e1-f2e2-422b-a02a-9a3ef45955ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":387,"endLine":421,"content":"Provider.getTenantId();\n                createDirectory(directoryPath);\n                directoryPath = directoryPath + \"/\" + \"NATIVE\";\n                createDirectory(directoryPath);\n                directoryPath = directoryPath + \"/\" + \"PROCESSED\";\n                createDirectory(directoryPath);\n                logResponse(directoryPath, objectName, result);\n                return result;\n            } else {\n                removeDuplicateFieldsIfPresent(omdMetadata, objectName);\n                return metadataDriver.applyGlobalAndTenantOverrides(omdMetadata, pnpConnectionsInfo, objectName);\n            }\n        } catch (CaasException e) {\n            LOGGER.error(e.getMessage(), e);\n            throw e;\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw e;\n        }\n    }\n\n    private void removeDuplicateFieldsIfPresent(Map<String, ObjectDefinition> omdMetadata, String objectName) {\n        List<GSFieldDefinition> fields = omdMetadata.get(objectName).getFields();\n        Set<String> dbNames = new HashSet<>();\n        List<GSFieldDefinition> uniqueFields = new ArrayList<>();\n        for (GSFieldDefinition field : fields) {\n            if (!dbNames.contains(field.getDbName())) {\n                uniqueFields.add(field);\n                dbNames.add(field.getDbName());\n            }\n        }\n        omdMetadata.get(objectName).setFields(uniqueFields);\n    }\n\n    private JsonNode getNativeMetadataFromCE(String objectName, PNPConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d806cf78-bd3a-424d-842c-d999da81d6f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/IpaasBulkFileDownloadProducerServiceImpl.java","startLine":31,"endLine":53,"content":"ype()); //todo check the type\n        messageRequestDTO.setPayload(ipaasBulkDownloadCallbackPayload);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequestDTO.setTenantId(ipaasBulkDownloadCallbackPayload.getTenantId());\n        messageRequestDTO.setSource(\"CONNECTORS\");\n        messageRequestDTO.setExternalId(UUID.randomUUID().toString());\n        return queueProducer.enqueue(messageRequestDTO);\n    }\n\n    @Override\n    public String pushMessageForFileDownloadDH(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload) {\n        MessageRequestDTO<IpaasBulkDownloadCallbackPayload> messageRequestDTO = new MessageRequestDTO<>();\n        messageRequestDTO.setMessageType(MESSAGE_INFO.getSupportedType()); //todo check the type\n        messageRequestDTO.setPayload(ipaasBulkDownloadCallbackPayload);\n        messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n        messageRequestDTO.setTenantId(ipaasBulkDownloadCallbackPayload.getTenantId());\n        messageRequestDTO.setSource(\"CONNECTORS\");\n        messageRequestDTO.setExternalId(UUID.randomUUID().toString());\n        return queueProducer.enqueue(messageRequestDTO);\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"42667da5-e1e0-46e0-b303-a1247787eb4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":129,"endLine":146,"content":"dateTimeFormate = caasConnectorConfig.getExternalJarAdditionalProperties().containsKey(DATETIME_FORMAT)?\n                caasConnectorConfig.getExternalJarAdditionalProperties().get(DATETIME_FORMAT).toString():\"%Y-%m-%d %H:%M:%S\";\n        String table = BACK_QUOTE + pnpConnectionsInfo.getProperties().get(DATASET_ID) + DOT + ductJobMapping.getResourceName() + BACK_QUOTE;\n        StringJoiner joiner = new StringJoiner(COMMA);\n        for (String field : ductJobMapping.getFields()) {\n            if(fieldNameToDataTypeMap.get(field).toString().toLowerCase().equals(\"timestamp\") && ductJobMapping.getProperties().containsKey(\"targetTimezone\"))\n                joiner.add(FORMAT_TIMESTAMP +  \"\\\\\\\"\" + timestampFormate + \"\\\\\\\",\" + field + \", \\\\\\\"\" + ductJobMapping.getProperties().get(\"targetTimezone\") + \"\\\\\\\"\" + CLOSE_BRACKET + \"AS \" + field);\n            else if (fieldNameToDataTypeMap.get(field).toString().toLowerCase().equals(\"timestamp\")) {\n                joiner.add(FORMAT_TIMESTAMP + \"\\\\\\\"\" + timestampFormate + \"\\\\\\\",\"  + field  + CLOSE_BRACKET + \"AS \" + field);\n            }\n            else if (fieldNameToDataTypeMap.get(field).toString().toLowerCase().equals(\"datetime\")) {\n                joiner.add(FORMAT_TIMESTAMP + \"\\\\\\\"\" + dateTimeFormate + \"\\\\\\\",\"  + field  + CLOSE_BRACKET + \"AS \" + field);\n            } else\n                joiner.add(field);\n        }\n        String fields = joiner.toString();\n        if (StringUtils.isEmpty(whereClause)) {\n            return String.form","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f383050-8c5e-407e-bc2a-ee710c07493c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackHubspotMessageProcessor.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.MDCContext;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.DuctService;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class WriteBackHubspotMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n\n    private final MessageInfoFactory","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"151b7ed7-0626-49c9-abad-893d999d4fb7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":88,"endLine":111,"content":"onfigService.getConnectorConfig(ConnectorType.SNOWFLAKE);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n\n    @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.SNOWFLAKE;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        String objectName = ductJobMapping.getResourceName().replaceAll(\" \", \"_\");\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SNOWFLAKE);\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(),\n                pnpConnectionsInfo);\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n        Map<String, GSFieldDefinition> gsFieldsByNamesMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ece803fd-8da0-4ba6-9bec-727ca830967d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":106,"endLine":128,"content":"eateDuctRequestDTO(true, new DateTime(), 5, false));\n        } catch (CaasException ex) {\n            gsExternalSystemErrorMapping = ex.getGsExternalSystemErrorMapping();\n            passed = true;\n        } finally {\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n            assertEquals(CaasValidationCode.NO_CONNECTION_FOUND.getGsEventCode(), gsExternalSystemErrorMapping.getGsErrorCode(), \" Wrong Error code passed in exception\");\n            assertEquals(CaasValidationCode.NO_CONNECTION_FOUND.getUserText(), gsExternalSystemErrorMapping.getGsErrorMessage(), \"Wrong error message passed in exception\");\n            assertNull(gsExternalSystemErrorMapping.getExceptionStackTrace(), \"Stack trace should be null\");\n            assertNull(gsExternalSystemErrorMapping.getJobId(), \"jobId should be null\");\n            assertEquals(\"No Connection Found\", gsExternalSystemErrorMapping.getMessage(), \"Wrong message passed in exception\");\n        }\n    }\n\n    @Test\n    public void saveMapping_test_unauthorized_connection() {\n        boolean passed;\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = null;\n        List<ConnectionStatus> connectionStatuses = new ArrayList<>(Arrays.asList(ConnectionStatus.REVOKED, ConnectionStatus.REVOKED_AND_LINKED,\n                ConnectionStatus.INIT, null));\n        for (ConnectionStatus connectionStatus : connectionStatuses) {\n            passed = false;\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"307aaef4-e1a7-4140-93e9-943f591400b2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":283,"endLine":307,"content":"    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(DuctRequestDTO ductRequestDTO) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductRequestDTO.getConnectionId());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n        try {\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            if (connectorConfig.isValidateObjectForMetadata()) {\n                Map<String, Object> queryParams = Maps.newHashMap();\n                queryParams.put(\"fetchAll\", String.valueOf(true));\n                validateObject(ductRequestDTO.getResourceName(), service.getObjects(pnpConnectionsInfo, queryParams));\n            }\n            return service.getObjectAttributes(ductRequestDTO, pnpConnectionsInfo);\n        } catch (CaasException excp) {\n            log.error(\"error in getObjectAttributes\", excp);\n            throw new CaasException(getGsExternalSystemErrorMapping(pnpConnectionsInfo, true, excp.getGsExternalSystemErrorMapping()));\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public Map","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"016009f1-e2bd-4165-99b2-eae5eefdc73d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":214,"endLine":235,"content":"eAccessExpireKey())).longValue();\n                ExpireUnit expireUnit = ObjectUtils.isNotEmpty(authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit()) ? authDetailsOp.get().getInitialTokenGenerationDetail().getExpireUnit() : MILLIS;\n                switch (expireUnit) {\n                    case SECONDS:\n                        expire = expire * 1000;\n                        break;\n                    default:\n                        break;\n                }\n                expire = expire + System.currentTimeMillis() - 10000;\n                pnpConnectionsInfo.getTokenDetail().setExpiry(expire);\n            }\n            pnpConnectionInfoDao.update(pnpConnectionsInfo);\n            log.info(\"Access token refreshed successfully for connection Type: {}\", pnpConnectionsInfo.getConnectionType());\n            //return plain access token if user scope is skip authorization and exclude it from persisiting in DB\n            if ((Objects.nonNull(RequestContextProvider.getRequestInfo())) && Objects.nonNull(RequestContextProvider.getRequestInfo().getUserScope())\n                    && RequestContextProvider.getRequestInfo().getUserScope().isSkipAuthorization()) {\n                pnpConnectionsInfo.getProperties().put(ACCESS_TOKEN, String.valueOf(response.get(authDetailsOp.get().getInitialTokenGenerationDetail().getResponseRootKey())));\n            }\n            return pnpConnectionsInfo;\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying t","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d20ac7a3-2935-4d3e-b7e7-362892530be5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":502,"endLine":539,"content":"< data.length; i++) {\n            try {\n                if (i == data.length - 1) {\n                    return jsonObject.optString(data[i]);\n                } else {\n                    if (jsonObject.isNull(data[i])) {\n                        return StringUtils.EMPTY;\n                    } else if (jsonObject.get(data[i]) instanceof JSONObject) {\n                        jsonObject = jsonObject.getJSONObject(data[i]);\n                    } else {\n                        return StringUtils.isNotEmpty(jsonObject.optString(data[i])) ? jsonObject.optString(data[i]) : null;\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error occured while trying to get field value {}\", jsonPath, e);\n                return jsonObject.optString(jsonPath);\n            }\n\n        }\n        return StringUtils.EMPTY;\n    }\n\n\n    private static void updateFieldValue(JSONObject obj, String jsonPath, Object newValue) {\n\n        String[] data = jsonPath.split(\"\\\\.\");\n        JSONObject jsonObject = obj;\n        for (int i = 0; i < data.length; i++) {\n            try {\n                if (i == data.length - 1) {\n                    jsonObject.put(data[i], newValue);\n                } else {\n                    if (jsonObject.isNull(data[i])) {\n                        return;\n                    } else if (jsonObject.get(data[i]) instanceof JSONObject) {\n                        jsonObject = jsonObject.getJSONObject(data[i]);\n                    }\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"023a9575-4a11-40a2-b56a-f79aa801b6a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":98,"endLine":129,"content":"tPageToken(String.valueOf(limit));\n        }\n        return ecosystemResponse;\n    }\n\n    private static void insertOrAppend(GSFieldDefinition fieldInfo, JsonObject documentObject, String[] path, Map<String, Object> record) {\n        Map<String, Object> tempMap = fetchFieldValue(fieldInfo, documentObject, path);\n        if (MapUtils.isNotEmpty(tempMap)) {\n            Optional<String> optional = tempMap.keySet().stream().findFirst();\n            if (optional.isPresent()) {\n                String mapKey = optional.get();\n                if (record.containsKey(mapKey)) {\n                    Object existingVal = record.get(mapKey);\n                    Object tempVal = tempMap.get(mapKey);\n                    if (existingVal instanceof Map && tempVal instanceof Map) {\n                        Map valueMap = (Map) tempVal;\n                        Map existingValMap = (Map) existingVal;\n                        existingValMap.putAll(valueMap);\n                    }\n                } else\n                    record.putAll(tempMap);\n            }\n        }\n    }\n\n    public static Map<String, String> constructQueryParams(Criteria criteria, DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, String limit) {\n        Map<String, String> queryParams = new HashMap<>();\n        String offset = ductJobMapping.getNextPageToken() == null ? \"0\" : ductJobMapping.getNextPageToken();\n        queryParams.put(\"limit\", limit);\n        queryParams.put(\"offset\", offset);\n\n        Map<String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca20af1c-f29c-423c-a731-3d7b35f2eb3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasMetadataTransformationConfig.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_metadata_transformation_config\")\n@Getter\n@Setter\npublic class CaasMetadataTransformationConfig extends MongoBaseBean implements Serializable {\n\n    @Indexed(background = true)\n    private String consumer;\n    private boolean addLookUpFieldsToMeta;\n\n    private Map<String, FieldLevelMetadataTransformationConfig> resourceLevelMetadataConfig;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"038e0e04-42bc-4903-8319-97cded93a9f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/Impl/SnowFlakeConnectionDetailsEncryptor.java","startLine":21,"endLine":32,"content":"().decrypt((byte[])((byte[])inputProperties.get(\"password\"))).toString()).getValue());\n            snowFlakeConnectionDetail.setDataBaseName(simpleCryptor.encrypt(inputProperties.get(\"databaseName\").toString()).getValue());\n            snowFlakeConnectionDetail.setWarehouse(simpleCryptor.encrypt(inputProperties.get(\"warehouse\").toString()).getValue());\n            snowFlakeConnectionDetail.setSchema(simpleCryptor.encrypt(inputProperties.get(\"datasetId\").toString()).getValue());\n            Map<String,Object> property = new HashMap<>();\n            property.put(\"tablesSchema\", simpleCryptor.encrypt(inputProperties.get(\"datasetId\").toString()).getValue());\n            snowFlakeConnectionDetail.setProperties(property);\n            snowFlakeConnectionDetail.setSslEnabled(true);\n            snowFlakeConnectionDetail.setType(type);\n            return snowFlakeConnectionDetail;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0bc127cc-7461-4e9a-84a7-a41ddf864876","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":58,"endLine":79,"content":"PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, Object> fieldDefinition;\n        if (fields.isArray()) {\n            for (JsonNode field : fields) {\n                fieldDefinition = new HashMap();\n                Map<String, Object> meta = new HashMap<>();\n                Map<String, Object> metaProperties = new HashMap<>();\n                fieldDefinition.put(FIELD_NAME, field.get(API_NAME).asText());\n                fieldDefinition.put(DB_NAME, field.get(API_NAME).asText());\n                //For some fields CE does not give display name, setting field name as display name for those fields\n                fieldDefinition.put(LABEL, field.get(DISPLAY_LABEL).asText());\n\n                //set datatype\n                if (field.get(DATA_TYPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(DATA_TYPE).asText()))) {\n                    dataTypeMapp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f0fb2fb-888a-463c-834e-36f302c59dbc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":566,"endLine":592,"content":"ty(e.getMessage()))\n                DuctUtils.populateAndInsertError(e.getMessage(), ductJobMapping.getJobId());\n            else\n                DuctUtils.populateAndInsertError(INTERNAL_SYSTEM_ERROR_MESSAGE, ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateMappedFieldsAndCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n\n        mappedFields.removeAll(clonedHeaders);\n        if (!mappedFields.isEmpty()) {\n            DuctUtils.populateAndInsertError(String.format(MAPPED_FIELDS_NOT_PRESENT_IN_CSV,\n                    String.join(\", \", mappedFields)), ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateHeadersFieldsAndMappings(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n        clonedHeaders.removeAll(mappedFields);\n        if (!clonedHeaders.isEmpty()) {\n            DuctUtils.populateAndInsertError(CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb96122b-64d1-4bd4-a6e9-2315eebda507","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/GeneratedMetadataCacheDao.java","startLine":1,"endLine":8,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.metadata.engine.GeneratedMetadataCache;\n\npublic interface GeneratedMetadataCacheDao extends AbstractEntityDao<GeneratedMetadataCache> {\n    GeneratedMetadataCache getMetadataByConnectionIdAndObjectName(String connectionId, String objectName);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"760527ea-b64b-43ac-b140-cce9c420f65f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":133,"endLine":151,"content":"  LOGGER.info(\"completed attributes fetch for object: {}, connection: {} in: {} MS\", objectName, pnpConnectionsInfo.getConnectionId(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n        Map metadata = MSDynamicsObjectUtil.constructDynamicsObjectDefinition(extractedData, pnpConnectionsInfo,\n                (Boolean) GainsightCollectionUtils.nullSafeMap(ductJobMapping.getProperties()).getOrDefault(LOOKUP_FIELDS_FLATTENED, true),\n                FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()),\n                connectorConfig.getDataTypeMappings());\n        Map<String, ObjectDefinition> omdFormatMetadata = Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n        GainsightCollectionUtils.nullSafeMap(ductJobMapping.getProperties()).put(DuctConstants.DYNAMICS_OMD_META_DATA, omdFormatMetadata);\n        return omdFormatMetadata;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, boolean includePicklistOptions) throws CaasException {\n        LOGGER.info(\"Starting attributes fetch for object: {}, connection: {}\", objectName, pnpConnectionsInfo.getConnectionId());\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n\n        Map<String, Ob","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ffddf7d-da48-4682-8df2-fff629bed696","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/MetadataCommonUtil.java","startLine":71,"endLine":96,"content":"RRIDE_KEY);\n                tempOverrideAttribute.remove(OVERRIDE_KEY_VALUE);\n                List<Map> fieldsToBeUpdated = gsFields.stream().filter(meta -> meta.containsKey(key) && meta.get(key).toString().equalsIgnoreCase(value)).collect(Collectors.toList());\n                for (Map s : fieldsToBeUpdated) {\n                    DuctCollectionUtils.deepMerge(s, tempOverrideAttribute);\n                }\n            }\n\n            List<Map> defaultAttributes = objectMapper.convertValue(configAttribute.getDefaultObjectAttributes(), new TypeReference<List<Map>>() {\n            });\n            gsFields.addAll(defaultAttributes);\n        }\n        metadata.put(FIELDS, gsFields);\n    }\n\n    public static void excludeAttributesFromConfig(List<CaasObjectAttributesConfig> configAttributes, Map metadata) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        List<Map> gsFields = objectMapper.convertValue(metadata.get(FIELDS), new TypeReference<List<Map>>() {\n        });\n        List<Map<String, Object>> excludeAttribute;\n        Map<String, Object> tempOverrideAttribute;\n        for (CaasObjectAttributesConfig configAttribute : configAttributes) {\n            excludeAttribute = GainsightCollectionUtils.nullSafeList(configAttribute.getExcludeAttribute());\n            for (Map<String, Object> stringObjectMap : excludeAttribute) {\n                tempOverrideAttribute = new HashMap<>(stringObjectMap);\n                String key = tempOverrideAttribute.get(EXCLUDE_KEY).toString(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"25a912cd-56c9-41b5-a6e6-9018e476c931","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.PicklistOption;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n@Service","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9423e69-4c29-4207-a446-1a1f7861c87e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.config.CaasMetadataTransformationConfig;\nimport com.gainsight.duct.beans.config.MetadataTransformAttributes;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.db.service.CaasMetadataTransformationConfigDAO;\nimport com.gainsight.duct.utils.DuctGSServiceUrlUtil;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.CollectionObjectGroupType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.web.client.HttpClientService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.SerializationUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.Response;\nimport java.util.ArrayList;\nimpor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a8d313d-49f9-4041-8c3e-8b03a0c09ee8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":194,"endLine":217,"content":"> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectName);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectName);\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        List fieldsList = new ArrayList();\n        Map<String, Object> fieldDefinition;\n\n        for (JsonNode field : fields) {\n            fieldDefinition = new HashMap();\n            Map<String, Object> meta = new HashMap<>();\n            Map<String, Object> metaProperties = new HashMap<>();\n            fieldDefinition.put(FIELD_NAME, ObjectUtils.isNotEmpty(field.get(PATH)) ? field.get(PATH) : field.get(VENDOR_PATH));\n            fieldDefinition.put(DB_NAME, ObjectUtils.isNotEmpty(field.get(PATH)) ? field.get(PATH) : field.get(VENDOR_PATH));\n            //For some fields CE does not give display name, setting field name as display name for those fields\n            fieldDefinition.put(LABEL, ObjectUtils.isNotEmpty(field.get(VENDOR_DISPLAY_NAME)) ? field.get(VENDOR_DISPLAY_NAME) : field.get(PATH));\n\n            bool","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f50e008-a5ae-4e11-ab8e-223c0d1bdd2c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/DuctClient.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.clients;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Options;\n\npublic interface DuctClient {\n\n  /**\n   * unique name.\n   *\n   * @return\n   */\n  String name();\n\n  /**\n   * options required for this client.\n   *\n   * @return\n   */\n  Options requiredOptions();\n\n  /**\n   *\n   * @param cmd\n   */\n  void migrate(CommandLine cmd);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e249f9f-4959-42be-8caa-2b4bf21527ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":226,"endLine":244,"content":"bjectType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescriptionWithModificationMetadata(String name, String label, String canonicalname, String type, String fieldType, ModificationMetadata modificationMetadata) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = new GainsightHubspotFieldDescriptionV3(name, label, canonicalname, type, fieldType, modificationMetadata);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private Map constructHubspotObjectDefinition(List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.HUBSPOT);\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectLabel);\n//        objectDefinition.put(\"requiredFieldsExpression\", GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(obje","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04143a50-7e75-4d60-a624-b688780d5dab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuthenticationType.java","startLine":1,"endLine":14,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\n/**\n * Created by Sunand on 2/26/2016.\n */\npublic enum AuthenticationType {\n  USERNAME_PASSWORD,\n  OAUTH_2,\n  SECRET_KEY\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bec58c2c-43f3-44dd-adb2-120910878a24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":113,"endLine":148,"content":"nField, DateTime startDate, DateTime endDate) {\n    StringBuilder dateFilter = new StringBuilder();\n    if (startDate == null && endDate == null) {\n      dateFilter.append(\"\");\n    } else {\n      dateFilter.append(\"(\");\n      if (startDate != null) {\n        dateFilter.append(\" \" + modifiedOnField + \" gt \" + startDate + \" \");\n      }\n      if (endDate != null) {\n        if (startDate != null) {\n          dateFilter.append(\"and\");\n        }\n        dateFilter.append(\" \" + modifiedOnField + \" le \" + endDate + \" \");\n      }\n      dateFilter.append(\")\");\n    }\n\n    if (StringUtils.isNotBlank(filter)) {\n      return \"( \" + filter + \" ) and \" + dateFilter.toString();\n    } else {\n      return dateFilter.toString();\n    }\n  }*/\n\n  /*private List<String> validateSourceExistence(String pluralName, Map<String, String> sourceCanonicalNamesToDisplayNameMap) {\n    MSDynamicsObject msDynamicsObject = null;\n    try {\n      msDynamicsObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().pluralName(pluralName), true, false);\n    }catch (SystemException se) {\n      if(se.getErrorCode().getEventCode() == (UCValidationCode.PNP_DYNAMICS_OBJECT_NOT_FOUND.getEventCode())) {\n        se.setUiMessage(String.format(\"The job cannot be completed as the %s object was either deleted from the source or user is not authorised to access the object.\\n\" +\n                \"Remove the object from connector mappings and re-run the job.\",pluralName));\n        throw se;\n      }\n      return Col","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5d6dd40-c695-491d-8422-b69a25e29315","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":231,"endLine":258,"content":"t().getInitialTokenGenerationDetail().getResponseRootKey())));\n            }\n            return pnpConnectionsInfo;\n        } catch (Exception e) {\n            log.error(\"Error occurred while trying to refresh access token : {0}\",e);\n            throw new CaasException(new GsExternalSystemErrorMapping(e.getMessage()));\n        }\n    }\n\n\n    @Override\n    public List<PNPConnectionInput> getConnections() throws CaasException {\n        try {\n            log.info(\"Request received to get connection lists\");\n            List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.find();\n            return createPnpConnectionInputsFromConnectionInfo(pnpConnectionsInfoList);\n        } catch (Exception e) {\n            log.error(\"Error occured while getting connection list\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(e.getMessage()));\n        }\n    }\n\n    private List<PNPConnectionInput> createPnpConnectionInputsFromConnectionInfo(List<PNPConnectionsInfo> pnpConnectionsInfoList) throws Exception {\n        List<PNPConnectionInput> pnpConnectionInputs = DuctConnectionHelperUtils.getPnpConnectionInputList(pnpConnectionsInfoList);\n        pnpConnectionInputs.addAll(getAccessKeyConnectionInfo());\n        List<InstanceMasterDetail> ssoInstances = DuctConnectionHelperUtils.getSSOInstances();\n        if (CollectionUtils.isNotEmpty(ssoInstances)) {\n            DuctConnectionHelperUtils.addNewSSOInstancesToConnectionList(ssoInstances, pnpConnectionInput","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56f38c22-0849-4489-b38f-0665ad0beb50","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":248,"endLine":270,"content":"metadataCacheDao.update(metadataByConnectionIdAndObjectName);\n            generatedMetadataCacheDao.update(generatedMetadata);\n            return new ResponseObj(true, metadataByConnectionIdAndObjectName.getMetadata());\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    private Object prepareErrorResponseForException(GsExternalSystemErrorMapping gsExternalSystemErrorMapping) {\n        GsExternalSystemErrorMappingDTO response = new GsExternalSystemErrorMappingDTO();\n        response.setExternalSystemErrorMessage(gsExternalSystemErrorMapping.getExternalSystemErrorMessage());\n        response.setExternalSystemErrorCode(gsExternalSystemErrorMapping.getExternalSystemErrorCode());\n        response.setGsErrorCode(gsExternalSystemErrorMa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e31d824-8520-4881-9cff-8340aca56057","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IntercomV2CaasMetadataServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * createdBy: snargana\n * date: 20/05/24\n */\n\n@Order(1000)\n@Service\n@Slf4j\npublic class IntercomV2CaasMetadataServiceImpl extends CaasNativeMetadataServiceImpl implements CaasMetadataService {\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return ConnectorType.INTERCOMV2.equals(connectorType);\n  }\n\n  @Override\n  public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n    return super.getObjects(pnpConnectionsInfo, map);\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    return super.getObjectAttributes(objectName, pnpConnectionsInfo);\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"693e07b5-d232-4777-9aac-6a821c8b7b7b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/AuthInfo.java","startLine":1,"endLine":44,"content":"package com.gainsight.duct.beans;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class AuthInfo implements Serializable {\n\n    private AuthorizationType authType;\n    private String authTypeLabel;\n    private List<FieldsInfo> fieldsInfoList = new ArrayList<>();\n\n    public AuthorizationType getAuthType(){\n        return authType;\n    }\n\n    public void setAuthType(AuthorizationType authType){\n        this.authType = authType;\n    }\n\n    public List<FieldsInfo> getFieldsInfoList(){\n        return fieldsInfoList;\n    }\n\n    public void setFieldsInfoList(List<FieldsInfo> fieldsInfoList){\n        this.fieldsInfoList=fieldsInfoList;\n    }\n\n    public String getAuthTypeLabel(){\n        return authTypeLabel;\n    }\n\n    public void setAuthTypeLabel(String authTypeLabel){\n        this.authTypeLabel = authTypeLabel;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89d7c9f6-b1d5-4347-af2e-006e9641989b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":685,"endLine":707,"content":"rn mapping;\n    }\n\n    @Override\n    protected Map getAttributesWithLookupFieldsIfPresent(CaasMetadataService service, DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Map<String, ObjectDefinition> baseAttributes = new HashMap<>();\n        baseAttributes.put(ductJobMapping.getResourceName(), service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo, false)\n                .get(ductJobMapping.getResourceName())\n        );\n        Map<String, String> relationshipNameToObjectNameMap = createRelationshipNameToObjectNameMap(ductJobMapping, service, baseAttributes);\n        Set<String> relationshipFieldsAlreadyAdded = new HashSet<>();\n        String relationBaseObject;\n        Map<String, ObjectDefinition> relationshipObjectAttributes;\n        String relationshipName;\n        Set<String> fieldList = new HashSet<>(ductJobMapping.getFields());\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()))\n            fieldList.addAll(DuctUtils.getFieldListFromCriteria(ductJobMapping.getCriteria()));\n\n        boolean loadToDynamicsEnabled = FeatureToggleUtil.evaluateBooleanFeature(LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId());\n        for (String field : fieldList) {\n            if (loadToDynamicsEnabled && field.contains(PERIOD)) {\n                String[] sourceFieldNameList = field.split(\"\\\\.\");\n                relationshipName = sourceFieldNameList[0] + PERIOD + sourceFieldNameLi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e6e988f7-5d5f-475d-84eb-2770335811b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1020,"endLine":1037,"content":".getProperties().put(DuctCommonConstants.SUBDOMAIN, properties.get(DuctCommonConstants.SUBDOMAIN));\n                    }\n                    break;\n                case AHA:\n                    Map<String, Object> ahaConnectionProperties = pnpConnectionInfoFromUI.getProperties();\n                    AhaChannelService ahachannelservice = new AhaChannelService(ahaConnectionProperties.get(ACCESS_TOKEN).toString(), ahaConnectionProperties.get(\"subdomain\").toString());\n                    ;\n                    assertTrue(ahachannelservice.authenticateAccessToken(), CaasValidationCode.INVALID_INPUT, \"Unable to authenticate to \" + pnpConnectionsInfoFromDB.getConnectionType(), HttpStatus.SC_BAD_REQUEST);\n                    pnpConnectionsInfoFromDB\n                            .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(ahaConnectionProperties.get(ACCESS_TOKEN)\n                            ).trim(), pnpConnectionsInfoFromDB.getConnectionType()));\n                    pnpConnectionsInfoFromDB.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                    if (ahaConnectionProperties.containsKey(DuctCommonConstants.SUBDOMAIN)) {\n                        pnpConnectionsInfoFromDB.getProperties().put(DuctCommonConstants.SUBDOMAIN, ahaConnectionProperties.get(DuctCommonConstants.SUBDOMAIN));\n                    }\n                    break;\n                case HUBSPOT:\n                    Map<String, Object> propertiesFromUI = pnpConnectionInfoFromUI.getProperties","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa4c30a4-23ea-48da-898e-b19d30b6eeb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":362,"endLine":383,"content":"s);\n    Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n    return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n  }\n\n  /**\n   * Will take the input criteria and generate new criteria out of it which will be used for external system search\n   * At max, we will have 2 filter conditions for external system search on the fields which are externally filterable\n   * In general \"updated_at\" field is the only field which is externally filterable\n   * If we have more than 2 filter conditions, we will take the min value filter condition where operator is {@link FilterOperator#GT}\n   * If we don't have above criteria, we will fall back to default criteria accepted by the external system\n   *\n   * @param criteria            {@link Criteria}\n   * @param ductJobMapping      {@link DuctJobMapping}\n   * @param fieldNameMetaMap    {@link Map<String, GSFieldDefinition>}\n   * @param caasConnectorConfig {@link CaasConnectorConfig\n   * @return {@link Criteria\n   */\n  private Criteria modifyCriteria(Criteria criteria, DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap, CaasConnectorConfig caasConnectorConfig) {\n    Criteria defaultCriteria = getDefaultFallbackCriteria();\n    try {\n      log.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32a968b5-741e-4e96-832d-8cf657269979","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":62,"endLine":87,"content":"nse.getStatus());\n            return DuctUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), List.class);\n        } catch (Exception e) {\n            log.error(\"Not able to fetch the object list now\", e);\n            throw new CaasException(\"Not able to fetch the object list now\", CaasValidationCode.FAILED_TO_FETCH_GAINSIGHT_OBJECTS);\n        }\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return getObjectAttributes(objectName, pnpConnectionsInfo, null);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, String consumer) throws CaasException {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = DuctGSServiceUrlUtil.getObjectMetadataApiUrl() + \"/v1/meta/describe/MDA/\" + objectName + \"/describe\";\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from OMD --> {}\", response.getStatus());\n            Map<String, Map<String, Object>> map = DuctUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), Map.class);\n            return transformToObjectDefinition(map, objectName, consumer);\n        } catch (Exception e) {\n            log.error(\"Not able to fetch attributes of object\", e);\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5df12521-b37c-49a5-a9e1-aaf1373f6629","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":299,"endLine":321,"content":"erationsMap.put(objectId, \"CREATE\");\n                } else if (DuctDataOperation.valueOf(objectLevelOperation.getValue()) == DuctDataOperation.UPDATE) {\n                    importOperationsMap.put(objectId, \"UPDATE\");\n                } else if (DuctDataOperation.valueOf(objectLevelOperation.getValue()) == DuctDataOperation.UPSERT) {\n                    importOperationsMap.put(objectId, \"UPSERT\");\n                }\n            }\n            bulkImportBean = new HubspotBulkImportBean(ductJobMapping.getJobId(), importOperationsMap, internalBulkFileBeans);\n\n            log.info(\"Submitting bulk Write payload to Hubspot : {} \", bulkImportBean);\n\n            response = fetchService.uploadBulkData(ductJobMapping.getResourceName(),\n                    accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken(),\n                    accessDetailsFromDB.getAccessToken(), bulkImportBean, file);\n            log.info(\"Raw Response from Hubspot Import API {}\", response);\n            finalResponse = extractResponse(response);\n            log.info(\"Response from hubspot for bulk import {}\", finalResponse);\n            if (response.getStatusLine().getStatusCode() != 200 && response.getStatusLine().getStatusCode() != 201) {\n                throw new CaasException(getDuctResponse(ductJobMapping, response, finalResponse));\n            }\n        } catch (CaasException e) {\n            log.error(\"Exception in uploadBulkData \", e);\n            thr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4bd9e6de-5888-4bf5-8e06-bc9825e39c7c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/GlobalObjects.java","startLine":1,"endLine":46,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\nimport java.util.List;\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class GlobalObjects  implements Serializable {\n    private String encoding;\n    private Integer maxBatchSize;\n    private List<SObject> sobjects;\n\n    public GlobalObjects() {\n    }\n\n    public String getEncoding() {\n        return encoding;\n    }\n\n    public void setEncoding(String encoding) {\n        this.encoding = encoding;\n    }\n\n    public Integer getMaxBatchSize() {\n        return maxBatchSize;\n    }\n\n    public void setMaxBatchSize(Integer maxBatchSize) {\n        this.maxBatchSize = maxBatchSize;\n    }\n\n    public List<SObject> getSobjects() {\n        return sobjects;\n    }\n\n    public void setSobjects(List<SObject> sobjects) {\n        this.sobjects = sobjects;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0a7663b-78a3-4a88-ab0c-bbe1f703a9c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":105,"endLine":124,"content":"tOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n    public void validateWriteBack(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> metaInfoDefinitionMap) throws CaasException {\n        if (null == ductRequestDTO.getData())\n            DuctUtils.throwError(CaasValidationCode.NO_DATA_PROVIDED.getGsEventCode(),\n                    CaasValidationCode.NO_DATA_PROVIDED.getUserText(), CaasValidationCode.NO_DATA_PROVIDED.getUserText());\n        ObjectDefinition objectDefinition = metaInfoDefinitionMap.get(ductRequestDTO.getResourceName());\n        HashSet<String> fieldsRequired = new HashSet<>();\n        fieldsRequired.addAll(DuctUtils.getFieldsFromExpression(objectDefinition.getExpressionForRequiredFields()));\n        fieldsRequired.addAll(DuctUtils.getFieldsFromExpression(objectDefinition.getExpressionForUpsertKeys()));\n        List<GSFieldDefinition> fields = objectDefinition.getFields();\n        Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap = fields.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n        Set<String> readOnlyFields","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24d24b5e-2c13-4b4f-b312-f188f69ab2bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":79,"endLine":115,"content":"red while trying to create prepared Statement : {} \", sqlException);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL, sqlException));\n        }\n        return result;\n\n    }\n\n    private List<Map<String, Object>> executeWithMapListHandler(PreparedStatement preparedStatement) {\n        try {\n            ResultSet resultSet = preparedStatement.executeQuery();\n            return new MapListHandler().handle(resultSet);\n        } catch (SQLException sqlException) {\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\",sqlException);\n        }\n    }\n\n\n    private void setConnection(PNPConnectionsInfo pnpConnectionsInfo){\n        Connection connection;\n        try {\n            connection = connection(pnpConnectionsInfo);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to connect to snowflake using IPAAS properties, will try to connect using Connection Details\",e);\n            try {\n                connection = connection();\n            } catch (Exception ex) {\n                String errorMsg = String.format(\"Failed to connect to Snowflake due to %s\", ex.getMessage());\n                SystemException systemException = new SystemException(errorMsg, ex);\n                systemException.setUiMessage(errorMsg);\n                throw systemException;\n            }\n        }\n        this.connection = connection;\n    }\n\n    private Connection connection() {\n        String ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60f7b6cd-b5dd-449f-a89d-1f7dfc5ab715","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":737,"endLine":762,"content":"nshipName + \".\" + i.getFieldName())) {\n                                    GSFieldDefinition gsFieldDefinition = DuctUtils.cloneGSFieldDefinition(i);\n                                    gsFieldDefinition.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n                                    gsFieldDefinition.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                    return gsFieldDefinition;\n                                }\n                                return null;\n                            }).filter(Objects::nonNull).collect(Collectors.toList()));\n                }\n                relationshipFieldsAlreadyAdded.add(relationshipName);\n            }\n        }\n        return baseAttributes;\n    }\n\n    private Map<String, String> createRelationshipNameToObjectNameMap(DuctJobMapping ductJobMapping, CaasMetadataService service, Map<String, ObjectDefinition> baseAttributes) {\n        Map<String, String> relationToObjectNameMap = new HashMap<>();\n        for (GSFieldDefinition field : baseAttributes.get(ductJobMapping.getResourceName()).getFields()) {\n            if (field.getMeta().getLookupDetail() != null) {\n                relationToObjectNameMap.put(field.getMeta().getLookupDetail().getLookupId(), field.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName());\n            }\n        }\n        return relationToObjectNameMap;\n    }\n\n    private File validateDynamicsWriteBackPayload(DuctJobMapping ductJobMapping, Map<St","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"053c4197-9d5e-4260-a6ca-8ac1fa194ac5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":150,"endLine":175,"content":".info(\"External extract was completed with {} records\", recordCount);\n                ductJobMapping.setTotalCount((long) recordCount);\n                char quoteChar = taskResults.get(\"quoteChar\").isNull() ? '\\\"' : taskResults.get(\"quoteChar\").asText().charAt(0);\n                char escapeChar = taskResults.get(\"escapeChar\").isNull() ? '\\\"' : taskResults.get(\"escapeChar\").asText().charAt(0);\n\n                if (recordCount > 0) {\n                    handleSuccessDHExtract(taskResults, ductJobMapping, recordCount, quoteChar, escapeChar);\n                } else {\n                    updateDuctJobMapping(ductJobMapping.getJobId(), null, DuctStatus.SUCCESS);\n                }\n            } else {\n                log.info(\"Handling error\");\n                handleError(ductJobMapping);\n            }\n        } catch (CaasException se) {\n            catchExceptionAndUpdateStatus(se, ipaasBulkDownloadCallbackPayload.getJobId());\n            throw se;\n        } catch (Exception e) {\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            catchExceptionAndUpdateStatus(caasException, ipaasBulkDownloadCallbackPayload.getJobId());\n            throw caasException;\n        }\n    }\n\n    private void handleError(DuctJobMapping ductJobMapping) {\n        ConnectorsDataHighwayResponseHandler<ResponseObj> responseErrorHandler = connectorsDataHigh","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c880f297-5d92-4b0b-9c62-848889596ac8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1787,"endLine":1814,"content":"Code() == HttpStatus.SC_NO_CONTENT) {\n                log.info(\"Successfully revoked user auth for the CRM connection {}\", crmId);\n            } else {\n                throw new CaasException(CaasValidationCode.FAILED_TO_COMMUNICATE_SERVICE.getUserText(), CoreErrorCode.SYSTEM_ERROR);\n            }\n        } catch (Exception e) {\n            log.error(\"Failed to revoke user auth for the CRM connection {}\", crmId, e);\n        }\n    }\n\n    private boolean deleteDataPodiumConnection(String connectionId) {\n        boolean result = false;\n        String url = String.format(DATA_PODIUM_DELETION_URL, connectionId);\n        HttpResponseWrapper<ResponseObj> response;\n        try {\n            Map<String, String> headers = Maps.newHashMap();\n            headers.put(\"secret\", CryptUtil.getSimpleCryptor().encrypt(SECRET_VAL).getValue());\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            headers.put(CONTENT_TYPE, APPLICATION_JSON);\n\n            log.info(\"Invoking data podium deletion with URL {}\", url);\n            response = AdvancedHttpHelper.delete(url, headers, ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    log.info(\"Deletion successful on data podium for connection: {}\", connectionId);\n                    log.debug(\"Response: {}\", responseObj.getData());\n               ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d612913-5a9b-41c7-a22c-03c2c6519bb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":428,"endLine":463,"content":"umnMapping) {\n        if (ductColumnMapping.getFieldName().equalsIgnoreCase(\"hs_object_id\")) {\n            return \"HUBSPOT_OBJECT_ID\";\n        }\n//        else if (ductColumnMapping.getIsKeyField()) {\n//            return \"HUBSPOT_ALTERNATE_ID\";\n//        }\n        return null;\n    }\n\n\n    private File getFileFromS3(DuctJobMapping ductJobMapping) {\n        try {\n            File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            log.info(\"file name :{}\", file.getName());\n            return file;\n        } catch (Exception e) {\n            log.error(\"Error in downloading the file\");\n            throw e;\n        }\n\n        //return UCS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n    }\n\n    private File getFile(String fileName, DuctJobMapping ductJobMapping) throws Exception {\n        File file = new File(fileName);\n        FileUtils.copyURLToFile(\n                new URL(ductJobMapping.getTargetSystemDataURL()),\n                file,\n                100000,\n                0);\n        return file;\n    }\n\n    private GsExternalSystemErrorMapping getDuctResponse(DuctJobMapping ductJobMapping, HttpResponse response, Map<String, Object> finalResponse) throws CaasException {\n        GsExternalSystemErrorMapping gsExternalSystemErr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"508d24de-28e7-450d-8f95-2c9df82cfbd0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriver.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface MetadataDriver {\n\n    Map<String, ObjectDefinition> getMetadataUsingEngine(String connectionId, String objectName, boolean forceRefresh) throws CaasException;\n\n    Map<String, ObjectDefinition> getMetadataUsingEngine(String connectionId, List<String> superClassObjects, String objectName, boolean forceRefresh) throws CaasException;\n\n    Map<String, ObjectDefinition> applyGlobalAndTenantOverrides(Map<String, ObjectDefinition> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, String objectName);\n\n    List<GSFieldDefinition> refreshGeneratedMetadata(MetadataGenerationDetails metadataGenerationDetails) throws CaasException;\n\n    MetadataGenerationResponse initiateMetadataRefresh(String connectionId, String objectName) throws CaasException;\n\n    MetadataGenerationResponse initiateMetadataRefresh(String connectionId, String objectName, String recordId) throws CaasException;\n\n    MetadataGenerationResponse getMetadataGenerationStatus(String jobId);\n\n    Object getPreviewRawData(Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8441833-897c-43bc-80ca-2700d7de924f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":27,"endLine":66,"content":";\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * createdBy: snargana\n * date: 25/06/24\n */\n\n@Order(10000)\n@Service\npublic class FreshdeskConnectionServiceImpl implements CaasConnectionService {\n  private static final Logger log = LoggerFactory.getLogger(IntercomV2ConnectionServiceImpl.class);\n  private static final String USERNAME = \"username\";\n  private static final String SUBDOMAIN = \"subdomain\";\n  private static final String PREFIX_URL = \"https://\";\n  private static final String CONNECTION_VALIDATE_URL = \".freshdesk.com/api/v2/agents\";\n  private static final String AUTHORIZATION = \"Authorization\";\n  private static final String GENERATE_OOB_JOBS = \"GENERATE_OOB_JOBS\";\n\n  private static final String CONNECTION_AUTHORIZATION_FAILURE = \"Error occured while authorizing connection\";\n\n  private static final String PROPERTIES_MISSING_ERROR = \"Error occured while performing action\";\n\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType) {\n    return ConnectorType.FRESHDESK.equals(connectorType);\n  }\n\n  @SneakyThrows\n  @Override\n  public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n    validateConnectionProperties(pnpConnectionsInfo);\n    pnpConnectionsInfo.setIpaasConnection(false);\n    pnpConnectionsInfo.setAuthorizatio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30e62fb6-5eb3-4b56-848d-cf1b1a8e9bd9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":188,"endLine":220,"content":"       Date fromDateUTC;\n            if (isValidDate(String.valueOf(getFilterValue(rule)), rule.getFieldInfo().getDateTimeProperties().getFormat())) {\n                fromDateUTC = GainsightUtils.parseDate(String.valueOf(getFilterValue(rule)), rule.getFieldInfo().getDateTimeProperties().getFormat(), userTZ);\n            } else {\n                fromDateUTC = GainsightUtils.parseDate(String.valueOf(getFilterValue(rule)), YYYY_MM_DDPATTERN, userTZ);\n            }\n\n            Date toDateUTC = DateUtils.addDays(fromDateUTC, 1);\n            fromDateUTCStr = GainsightUtils.formatDate(fromDateUTC, \"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n            toDateUTCStr = GainsightUtils.formatDate(toDateUTC, \"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n        }\n\n        switch (rule.getOp()) {\n            case IS_NULL:\n                evaluatedExpression.append(fieldName)\n                        .append(\" \")\n                        .append(\"eq\")\n                        .append(\" \")\n                        .append(\"null\");\n                break;\n            case IS_NOT_NULL:\n                evaluatedExpression.append(fieldName)\n                        .append(\" \")\n                        .append(\"ne\")\n                        .append(\" \")\n                        .append(\"null\");\n                break;\n            case EQ:\n            case NE:\n            case GT:\n            case LT:\n                if (isDate(externalDataType) || isDateTime(externalDataType)) {\n                    if (rule.getOp() == FilterOperator.E","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f166729-8fca-4b25-bb1f-9dcac1d45fdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":212,"endLine":263,"content":"      Map choiceList = (Map) entry.getValue();\n          picklistOption.put(LABEL, entry.getKey());\n          picklistOption.put(VALUE, DuctUtils.valueOf(choiceList));\n          picklistOptions.add(picklistOption);\n\n\n        } else {\n          // \"choices\": {\n          //            \"Low\": 1,\n          //            \"Medium\": 2,\n          //            \"High\": 3,\n          //            \"Urgent\": 4\n          //        }\n          picklistOption.put(VALUE, entry.getValue());\n          picklistOption.put(LABEL, DuctUtils.valueOf(entry.getKey()));\n          picklistOptions.add(picklistOption);\n        }\n\n\n      }\n    }\n\n    if (CollectionUtils.isNotEmpty(picklistOptions)) {\n      fieldDefinition.put(OPTIONS, picklistOptions);\n    }\n\n    return picklistOptions;\n\n  }\n\n\n  public void populateMetaForFieldInfo\n      (Map<String, Object> fieldDefinition, Map<String, Object> fieldInfo, Map<String, Object> meta, CaasConnectorConfig\n          connectorConfig) {\n\n    meta.put(FILTERABLE, true);\n    meta.put(EXTERNALLY_FILTERABLE, false);\n    meta.put(ACCESSIBLE, true);\n    meta.put(READ_ONLY, true);\n    meta.put(REQUIRED, false);\n\n    String originalDataType = DuctUtils.valueOf(fieldInfo.get(TYPE));\n\n    if (originalDataType.startsWith(CUSTOM_PREFIX)) {\n      originalDataType = originalDataType.replace(CUSTOM_PREFIX, \"\");\n    }\n\n    if (originalDataType.startsWith(DEFAULT_PREFIX)) {\n      originalDataType = originalDataType.replace(DEFAULT_PREFIX, \"\");\n    }\n\n    meta.put(ORIGINAL_DATA_TY","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e401c6c-de80-4d18-b361-b5df378fdee2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":297,"endLine":319,"content":"fo.setConnectionName(ssoInstance.getInstanceName());\n                pnpConnectionsInfo.setVersion(VersionConstants.V2);\n                pnpConnectionsInfo.setSetupStatus(SetupStatus.INIT);\n\n                InstanceType instanceType = InstanceType.getInstance(ssoInstance.getInstanceType());\n                if (Objects.isNull(instanceType)) {\n                    LOGGER.error(\"Invalide instance type received from SSO service: {} instanceId: {}\", ssoInstance.getInstanceType(), ssoInstance.getInstanceId());\n                    continue;\n                }\n\n                pnpConnectionsInfo.setConnectionType(InstanceType.getConnectorType(instanceType));\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.INIT);\n                pnpConnectionsInfo.setInstanceDetail(GainsightUtils.OBJECT_MAPPER.convertValue(ssoInstance, InstanceDetail.class));\n                PNPConnectionInput pnpConnectionInput = new PNPConnectionInput();\n                pnpConnectionInput.setPnpConnectionsInfo(pnpConnectionsInfo);\n                existingConnections.add(pnpConnectionInput);\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while getting SSOInstances {}\", ex.getMessage(), ex);\n        }\n        return existingConnections;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0a1221c-c314-4e22-9e26-ee988ef0177c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":500,"endLine":525,"content":" localFile = File.createTempFile(UUID.randomUUID().toString(), \".segmentio.tmp\");\n        FileUtils.copyInputStreamToFile(inputStream, localFile);\n        return localFile;\n    }\n\n    private void validateObject(String objectName, List<Map<String, Object>> objects) throws CaasException {\n        AtomicBoolean isValidObject = new AtomicBoolean(false);\n        objects.forEach(object->{\n            if(objectName.equals(object.get(DuctConstants.DescribeMetaConstants.OBJECT_NAME)))\n                isValidObject.set(true);\n        });\n        if(!isValidObject.get())\n            DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n    }\n\n    private static List<ObjectDefinition> transformToObjectDefinition(List<Map<String, Object>> objectList){\n        List<ObjectDefinition> objectDefinitions = new ArrayList<>();\n        for(Map<String, Object> objectMap : objectList) {\n            ObjectDefinition objectDefinition = new ObjectDefinition();\n            String objectName = objectMap.get(\"objectName\").toString();\n            objectDefinition.setObjectId(objectName);\n            objectDefinition.setObjectName(objectName);\n            objectDefinition.setLabel(objectName);\n            objectDefinition.setAccessible(true);\n            objectDefinition.setDbName(objectMap.get(\"dbName\").toString());\n            objectDefinition.setSource(objectMap.get(\"sourc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec9ce1b0-7a65-45d1-8de5-6d9e78f671eb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ZoomCaasMetadataServiceImpl.java","startLine":72,"endLine":96,"content":"lds.stream().forEach(field -> {\n            GSFieldMeta metaMap = field.getMeta();\n            Map<String, Object> metaProperties = metaMap.getProperties();\n            if(null != metaMap.getOriginalDataType()) {\n                DataTypeMappings dataTypeMappingsForField = connectorConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                        .equalsIgnoreCase(metaMap.getOriginalDataType())).findFirst().get();\n                if (null == metaMap.getDecimalPlaces() && Objects.nonNull(dataTypeMappingsForField.getDecimalPlaces())) {\n                    metaMap.setDecimalPlaces(dataTypeMappingsForField.getDecimalPlaces());\n                }\n                if (StringUtils.isNotEmpty(dataTypeMappingsForField.getFormat())) {\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n                }\n                if (ObjectUtils.isNotEmpty(metaProperties)) {\n                    metaMap.setProperties(metaProperties);\n                }\n            }\n            field.setMeta(metaMap);\n        });\n        metadata.put(FIELDS, gsFields);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n    }\n\n    private Map constructZoomObjectDefinition(List<GainsightZoomFieldDescription> gainsightZoomFieldDescription, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> objectDefinition = new HashMap<>();\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bbdfd7b0-5caa-4ea3-baa3-3bbb489c9941","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":466,"endLine":499,"content":"     if(query != null)\n                queryparam.put(\"jql\",getJqlQuery(query));\n        }\n        additionalDetails.put(\"QueryParam\", queryparam);\n        additionalDetails.put(CONNECTOR_TYPE, ConnectorType.JIRA);\n        return additionalDetails;\n    }\n\n\n    private String getJqlQuery(FilterRule rules) {\n        try {\n            List<String> whereClauses = Lists.newArrayList();\n            rules.getRules().forEach(rule -> {\n                whereClauses.addAll(buildRule(rule));\n            });\n            String joiner =\n                    rules.getCondition() != null\n                            ? rules.getCondition().getSpaceWrappedFilterCondition()\n                            : StringUtils.SPACE;\n            return Joiner.on(joiner).join(whereClauses);\n        } catch (Exception e) {\n            log.error(\"exception occured while creating jql query {}\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static List<String> buildRule(FilterRule rule) {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(SPACE);\n            String clause = Operators.getJQSqlClause(rule.getOp());\n            clause = clause.replace(\"$left\", rule.getFieldInfo().getName());\n            clause = clause.replace(\"$right\", StringUtils.join(rule.getValu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f663fcb6-cc24-42c7-b295-5fe023704646","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":199,"endLine":223,"content":"split(\"\\\\.\");\n                    if (sourceFieldNameList.length == 3 || sourceFieldNameList.length == 4) {\n                        fieldDefinitionOptional = objectDefinition.getFields().stream()\n                                .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(sourceFieldNameList[0] + UCConstants.PERIOD + sourceFieldNameList[1])).findFirst();\n                        if (!fieldDefinitionOptional.isPresent()) {\n                            notAvailableFields.add(filterField);\n                        }\n                    } else {\n                        notAvailableFields.add(filterField);\n                    }\n                }\n            }\n        }\n\n        if (!notAvailableFields.isEmpty()) {\n            DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n                    \"Some of the fields does not exist in the source system \" + String.join(\",\", notAvailableFields));\n        }\n\n        if (!ductRequestDTO.isIncludeLookups()) {\n            ductRequestDTO.getFields().removeAll(lookupFields);\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"560cd323-0f6a-4ae3-bd6f-86b9d591172a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/Client.java","startLine":83,"endLine":100,"content":"arse(co, args);\n                c.migrate(ccmd);\n            } else {\n                log.error(\"No client with name {} found\", name);\n            }\n\n            // shutdown after migration.\n            IOUtils.closeQuietly(context);\n            System.exit(0); // NOSONAR\n        } catch (Exception e) {\n            log.error(\"Error while running client {}\", e.getMessage(), e);\n\n            IOUtils.closeQuietly(context);\n            System.exit(1); // NOSONAR\n        }\n\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ea7379c-12f9-4e62-b400-6c799d9dd7fc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasMetadataService.java","startLine":31,"endLine":49,"content":"PConnectionsInfo pnpConnectionsInfo, String consumer) throws CaasException{\n        return getObjectAttributes(objectName,pnpConnectionsInfo);\n    }\n    default Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, boolean resolvePicklistOptions,\n                                                              DuctJobMapping ductJobMapping) throws CaasException {\n        return getObjectAttributes(objectName, pnpConnectionsInfo);\n    }\n\n    default Map<String, ObjectDefinition> getObjectAttributesUsingEngine(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {return new HashMap<>();\n    };\n\n    default Map getObjectAttributes(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n    }\n\n    default Map<String, ObjectDefinition> getObjectAttributes(DuctRequestDTO ductRequestDTO, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return getObjectAttributes(ductRequestDTO.getResourceName(), pnpConnectionsInfo);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a32236b-4c08-4491-a05b-fc610f663c93","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZendeskConnectionService.java","startLine":24,"endLine":62,"content":"com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Order(10000)\n@Service\npublic class ZendeskConnectionService implements CaasConnectionService {\n\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    private AuthService authService = new AuthServiceImpl();\n    private static final Logger LOGGER = LoggerFactory.getLogger(ZendeskConnectionService.class);\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.ZENDESK.equals(connectorType);\n    }\n\n    @Override\n    public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"92fa4f5e-c041-42e7-8fde-d6d01e3a6be4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":175,"endLine":202,"content":"t[1])).findFirst();\n\n                    if (fieldDefinitionOptional.isPresent()) {\n                        GSFieldDefinition gsFieldDefinition = fieldDefinitionOptional.get();\n                        if ((null != gsFieldDefinition.getMeta())\n                                && (MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(gsFieldDefinition.getMeta().getOriginalDataType().toUpperCase()))) {\n                            lookupFields.add(field);\n                        }\n                    } else {\n                        notAvailableFields.add(field);\n                    }\n                } else {\n                    notAvailableFields.add(field);\n                }\n            }\n        }\n\n        if (ObjectUtils.allNotNull(ductRequestDTO.getCriteria())) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n                fieldDefinitionOptional = objectDefinition.getFields().stream()\n                        .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(filterField)).findFirst();\n                if (!fieldDefinitionOptional.isPresent()) {\n                    String[] sourceFieldNameList = filterField.split(\"\\\\.\");\n                    if (sourceFieldNameList.length == 3 || sourceFieldNameList.length == 4) {\n                        fieldDefinitionOptional = objectDefinition.getFields().stream()\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"454fadfd-1e01-4450-a3c1-eb0ee973369b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":1,"endLine":26,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.snowflake.DBConnectorsQueryBuilder;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelFactory;\nimport com.gainsight.integration.connector.snowflake.GainsightSnowflakeChannelService;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e76b3d3d-e0b6-4112-957d-65d5edf03b0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":113,"endLine":125,"content":"ataTypeMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.append(\" Select \").append(String.join(\",\", ductJobMapping.getFields()));\n            stringBuilder.append(\" from \").append(ductJobMapping.getResourceName());\n            Set<String> fieldList = new HashSet<>(ductJobMapping.getFields());\n            if(ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()))\n                fieldList.addAll(DuctUtils.getFieldListFromCriteria(ductJobMapping.getCriteria()));\n            List<String> ignoreMetadataFields = GainsightCollectionUtils.nullSafeList(fieldList.stream().filter(field -> field.contains(\".\")).collect(Collectors.toList()));\n            if (ductJobMapping.getCriteria() != null) {\n                stringBuilder.append(\" where \").append(SoqlQueryBuilder.createQuery(DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameToDataTypeMap, fieldNameToFieldDefinitionMap, ignoreMetadataFields,caasConnectorConfig, ductJobMapping.getResourceName())));\n            }\n            stringBuilder.app","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ca9a94b-c513-4f44-a9ee-d89e181e333a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":342,"endLine":365,"content":",# col_name\").split(COMMA));\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            for (Map<String, Object> row : gainsightDatabricksChannelService.listAllFields(objectLevelOperation.getKey(), ignoreSystemFields)) {\n                colNameToDataType.put(String.valueOf(row.get(\"col_name\")), String.valueOf(row.get(\"data_type\")));\n            }\n        } catch (Exception e) {\n            log.error(\"Exception occurred while describing table: {}. {}\", objectLevelOperation.getKey(), e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n\n        DuctResponse ductResponse = new DuctResponse();\n        Set<DuctStatus> ductStatusSet = new HashSet<>();\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        Map<String, Object> result;\n\n        Long totalRecords = 0L;\n        Long recordsAffected = 0L;\n        Long failedRecords = 0L;\n        List<File> successfulFiles = new ArrayList<>();\n        List<File> failedFiles = new ArrayList<>();\n\n        for (File splitFile : splitFiles) {\n            GainsightDatabricksChannelFactory gainsightDatabricksC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82cafdb4-e85d-4829-999e-253c51a6eae1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":587,"endLine":611,"content":" String objectName) {\n    if (DataEnum.DATA_FETCH_BY_ID.equals(dataEnum)) {\n      List<ApiConfigAttributes> apiConfigAttributes = GainsightCollectionUtils.nullSafeList(dataApiForMetadataGeneration.get(dataEnum));\n      if (apiConfigAttributes.isEmpty())\n        LOGGER.info(\"No Api Config Attribute found for object : {}, enum type : {}\", objectName, dataEnum.name());\n      List<ApiConfigAttributes> finalApiConfigAttribute = new ArrayList<>();\n      for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n        if (StringUtils.isNotEmpty(apiConfigAttribute.getReplaceByIdRegexInPath()))\n          apiConfigAttribute.setPath(apiConfigAttribute.getPath().replace(apiConfigAttribute.getReplaceByIdRegexInPath(), recordId));\n        finalApiConfigAttribute.add(apiConfigAttribute);\n      }\n      return finalApiConfigAttribute;\n    } else\n      return dataApiForMetadataGeneration.get(dataEnum);\n  }\n\n\n  private void queueMessage(MetadataGenerationDetails metadataGenerationDetails) {\n    MessageRequestDTO<MetadataGenerationDetails> messageRequestDTO = new MessageRequestDTO<>();\n    messageRequestDTO.setMessageType(MESSAGE_INFO.getSupportedType()); //todo check the type\n    messageRequestDTO.setPayload(metadataGenerationDetails);\n    messageRequestDTO.setRequestId(RequestContextProvider.getRequestId());\n    messageRequestDTO.setTenantId(RequestContextProvider.getTenantId());\n    messageRequestDTO.setSource(\"CAAS\");\n    messageRequestDTO.setExternalId(UUID.randomUUID().toString","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89f0e47b-3eee-449e-8cc3-9e5236772c49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectTenantConfigDAOImpl.java","startLine":31,"endLine":52,"content":"     super(databaseTemplateService, CaasObjectTenantConfig.class);\n    }\n    @Override\n    public CaasObjectTenantConfig getTenantSpecificObjectConfigs(ConnectorType connectorType, String tenantId) throws CaasException{\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType)\n                .and(\"tenantId\").is(tenantId).and(\"connectionId\").exists(false));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectTenantConfig> ipaasObjectListTenantListConfig = getMongoTemplate().find(query, CaasObjectTenantConfig.class);\n\n        if(ipaasObjectListTenantListConfig.size()>1) {\n            throw new CaasException(String.format(\"Duplicate document found for same connector type : %s\", connectorType.getValue()), CaasValidationCode.DUPLICATE_DOCUMENTS_FOUND_CONFIG);\n        }\n        return ipaasObjectListTenantListConfig.size() == 1 ? ipaasObjectListTenantListConfig.get(0) : null;\n    }\n\n    @Override\n    public CaasObjectTenantConfig getConnectionIdSpecificObjectConfigs(ConnectorType connectorType, String tenantId,\n                                                                             String connectionId) throws CaasException{\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType)\n                .and(\"tenantId\").is(tenantId).and(\"connectionId\").is(connectionId));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectTenantCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fe95aa3-445c-4279-a6c1-b6de5d6ab58e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1652,"endLine":1673,"content":"    relationalDBConnectionDetailFromDB.setDataBaseName(cryptUtil.encrypt(relationalDBConnectionDetail.getDataBaseName()).getValue());\n        }\n        if (relationalDBConnectionDetail.getUser() != null) {\n            relationalDBConnectionDetailFromDB.setUser(cryptUtil.encrypt(relationalDBConnectionDetail.getUser()).getValue());\n        }\n        if (relationalDBConnectionDetail.getPwd() != null) {\n            relationalDBConnectionDetailFromDB.setPwd(cryptUtil.encrypt(relationalDBConnectionDetail.getPwd()).getValue());\n        }\n        if (MapUtils.isNotEmpty(relationalDBConnectionDetail.getProperties())) {\n            Map<String, Object> processedPropertyMap = MapUtils.isNotEmpty(relationalDBConnectionDetailFromDB.getProperties()) ? relationalDBConnectionDetailFromDB.getProperties() : new HashMap<>();\n            for (Map.Entry<String, Object> property : relationalDBConnectionDetail.getProperties().entrySet()) {\n                if (null != property.getKey()) {\n                    processedPropertyMap.put(property.getKey(), cryptUtil.encrypt(GainsightUtils.valueOf(property.getValue())).getValue());\n                }\n            }\n            relationalDBConnectionDetailFromDB.setProperties(processedPropertyMap);\n        }\n        relationalDBConnectionDetailFromDB.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n    }\n\n    private void processPendoConnectionDetail(PNPConnectionsInfo pnpConnectionInputFromUI, PNPConnectionsInfo pnpConnectionInputFromDB) {\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"807aa1bd-f78a-4a41-a8e0-68faf47c0d55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesConfigDAOImpl.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.UUID;\n\n\n@Repository\npublic class CaasObjectAttributesConfigDAOImpl extends AbstractEntityDaoImpl<CaasObjectAttributesConfig> implements CaasObjectAttributesConfigDAO {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CaasObjectAttributesConfigDAOImpl.class);\n\n    @Autowired\n    public CaasObjectAttributesConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasObjectAttributesConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectAttributesConfig> getConfigAttributes(ConnectorType connectorType, String objectName) {\n        Query query = Query.query","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d40fb5ea-14d2-499f-a46c-55dc6b3209b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":132,"endLine":154,"content":" !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                    meta.put(READ_ONLY, gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                    meta.put(CREATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                    meta.put(ACCESSIBLE, !gainsightHubspotFieldDescription.isHidden());\n                    meta.put(SCHEMA_UPDATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyDefinition());\n                } else {\n                    LOGGER.info(\"modification metadata not exist for {}\", gainsightHubspotFieldDescription.getName());\n                }\n\n                if (BooleanUtils.isTrue(gainsightHubspotFieldDescription.getMultiValued()))\n                    meta.put(MULTI_VALUED, true);\n\n\n                metaProperties.put(SOURCE_COMPLEX_TYPE, gainsightHubspotFieldDescription.getFieldType());\n                metaProperties.put(DATA_PREVIEW_AVAILABLE, true);\n                if (complexTypeMappings.containsKey(gainsightHubspotFieldDescription.getFieldType()))\n                    metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(gainsightHubspotFieldDescription.getFieldType()).getValue());\n                metaProperties.put(SOURCE, FieldSaveType.METADATA_API);\n                meta.put(PROPERTIES, metaProperties);\n\n\n                fieldDefinition.put(META, meta);\n                fieldFromObjectDefinition.add(fieldDefinition","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9750adf-c974-4c22-9b71-13c097e6e0ba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":437,"endLine":476,"content":"ionalResourceConfig;\n  }\n\n/*  private String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n    Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n    return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n  }*/\n\n  private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n    if (externalSystemResponse.get(\"total\") != null) {\n      return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n    }\n    return 0;\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n    MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n    QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n    List<Map<String, Object>> responseList = new ArrayList<>();","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1cbec0e-c616-43ff-a703-88203d12fc01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":297,"endLine":308,"content":"aining Metadata from native way for tenant: {}\", tenantId);\n                        Map<String, ObjectDefinition> nativeAttributes = getNativeAttributes(objectName, pnpConnectionsInfo, superClassInfo);\n                        LOGGER.info(\"Metadata from native way for tenant: {} obtained successfully\", tenantId);\n\n                        Map<String, Map<String, Object>> fieldNameToCEMetadataMap = generateFieldNameToMetadataMap(metadataFromConnectors);\n                        Map<String, GSFieldDefinition> fieldNameToNativeMetadataMap = nativeAttributes.get(objectName).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, i -> i));\n                        String errors = compareCEAndNativeMetadata(fieldNameToCEMetadataMap, fieldNameToNativeMetadataMap, connectorType);\n                        writeOutData(icsvOutWriter, tenantId, RequestContextProvider.getTenantName(), RequestContextProvider.getTenantType(), objectName, pnpConnectionsInfo.getConnectionId(), \"Completed\", errors);\n                        LOGGER.info(\"Final Errors for connectionId : {}, objectName : {} . Errors : \\n {}\", pnpConnectionsInfo.getConnectionId(), objectName, errors);\n                    } catch (Exception ex) {\n                        LOGGER.error(String.format(\"Error occurred while processing for connectionId:{%s}, object:{%s}. Error : {%s}. Workflow will continue.\", pnpConnectionsInfo.getConnectionId(), objectName, ex));\n                        writeOutData(icsvOutWriter, tena","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"29e395f1-f67f-4c96-933e-82b310f9965c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":55,"endLine":86,"content":"() + SPACE\n                        : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses);\n    }\n\n\n    private static List<String> buildRule(FilterRule rule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(rule.getFieldInfo().getName());\n            handleDataTypeAndOperator(rule, stringBuilder);\n            stringBuilder.append(SPACE);\n            if (rule.getOp() == FilterOperator.DOES_NOT_CONTAINS)\n                whereClause.add(\"(\" + SPACE + DuctConstants.NOT + SPACE + stringBuilder.toString() + \")\");\n            else\n                whereClause.add(stringBuilder.toString());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            for (FilterRule childRule : rule.getRules()) {\n                childRules.addAll(buildRule(childRule));\n            }\n            whereClause.add(\"(\" +\n                    Joiner.on(null == rule.getCondition() ? SPACE + FilterCondition.AND.getFilterCondition() : rule.getCondition() + SPACE).join(childRules) + \")\");\n        }\n        return whereClause;\n    }\n\n    private static void handleDataTypeAndOperator(FilterRule rule, StringBuilder stringBuilder) {\n        List<String> values;\n        switch (rule.getOp()) {\n            case C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8b017e3-ed8d-408d-b805-ca6ea903e821","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasMetadataFactory.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n/**\n * @author Aditya Agrawal\n * created on 22-May-2023\n * Factory for Metadata Services\n */\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class CaasMetadataFactory {\n\n    private final List<CaasMetadataService> services;\n\n    public CaasMetadataService getService(ConnectorType connectorType, boolean isIpaas) {\n        for (CaasMetadataService service : services) {\n            if (service.canHandle(connectorType, isIpaas)) {\n                return service;\n            }\n        }\n        log.error(\"Not able to find service for {}\", connectorType);\n        throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a117c8db-6cf0-46f6-9297-c8ecbb011047","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.beans.EnhancedGSFieldDefinition;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.duct.beans.dbqueue.MetadataGenerationMessageInfo;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.en","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5189ef28-6765-4074-9734-db79a6327269","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/GsDuctWorkerApp.java","startLine":77,"endLine":91,"content":"lder(GsDuctWorkerApp.class).web(WebApplicationType.NONE).run(args);\n        DynamicQueuePropertiesConfigProvider configProvider = new DynamicQueuePropertiesConfigProvider();\n        SpringDbQueueInitializer springDbQueueInitializer =\n                springApplicationBuilder.getBean(SpringDbQueueInitializer.class);\n        springDbQueueInitializer.start(Sets.newHashSet(\"DUCT_PROCESS_QUEUE\",\"IPAAS_BULK_DOWNLOAD_QUEUE\",\"WRITE_BACK_HUBSPOT_QUEUE\", \"METADATA_QUEUE\", \"EXTERNAL_DB_SYS_WB_QUEUE\", \"WRITE_BACK_DYNAMICS_QUEUE\"), configProvider); //todo change the queue name\n\n     }\n    @EventListener(ApplicationReadyEvent.class)\n    public void startup() {\n        applicationContext.getBeanDefinitionNames();\n        JobTracer.initialize(\n                GSInstrumentationConfigProvider.getInstrumentationConfig(DuctConstants.CAAS_WORKER,\n                        ComponentCode.CAAS));\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c00ebe81-94e4-4c8f-9c9b-23e5e5c44f19","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/transformer/ExternalToGsObjectDefinitionTransformer.java","startLine":28,"endLine":42,"content":"  if (unsupportedFetchObjects.contains(objectName))\n                continue;\n            objectDefinition.setObjectId(objectMap.get(DuctConstants.DescribeMetaConstants.OBJECT_ID).toString());\n            objectDefinition.setConnectionType(pnpConnectionsInfo.getConnectionType().getValue());\n            objectDefinition.setConnectionId(pnpConnectionsInfo.getConnectionId());\n            objectDefinition.setObjectName(objectName);\n            if (null != objectMap.get(DuctConstants.DescribeMetaConstants.LABEL)) {\n                objectDefinition.setLabel(objectMap.get(DuctConstants.DescribeMetaConstants.LABEL).toString());\n            }\n            objectDefinition.setAccessible(true);\n            if (ObjectUtils.isNotEmpty(connectorConfig.getObjectLevelFieldsExpression())) {\n                if (connectorConfig.getObjectLevelFieldsExpression().containsKey(objectName) && ((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectName)).containsKey(DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS)) {\n                    objectDefinition.setExpressionForRequiredFields(((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectName)).get(DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS).toString());\n                }\n                if (connectorConfig.getObjectLevelFieldsExpression().containsKey(objectName) && ((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectName)).containsKey(DuctConstants.EXPRESSION_FOR_UPSERT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ee481a78-3d0e-4c4d-b780-18865fc2f02d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightPxCaasMetadataServiceImpl.java","startLine":81,"endLine":89,"content":"PER.convertValue(gainsightPXFieldDescription, Map.class);\n            meta.put(\"originalDataType\", gainsightPXFieldDescription.getType());\n            field.put(\"meta\", meta);\n\n            fieldsList.add(field);\n        }\n        return fieldsList;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5c709cb-2200-402d-994a-9c443900ccfc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":70,"endLine":95,"content":"ct)) * 1000) + System.currentTimeMillis();\n            oAuthV2TokenDetail.setExpiry(expiresIn);\n            oAuthV2TokenDetail.setTokenType(GainsightUtils.valueOf(oauthResponse.get(\"token_type\")));\n            oAuthV2TokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(accessToken));\n            pnpConnectionsInfo.setTokenDetail(oAuthV2TokenDetail);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n        } else {\n            throw new AccessDeniedException(\"Could not retrieve oauth access token.\");\n        }\n    }\n\n    @Override\n    public String constructOAuthServiceProviderURI(PNPConnectionsInfo pnpConnectionInput, String redirectURI, String state) {\n        Map<String, Object> properties = pnpConnectionInput.getProperties();\n        String authorizationURI = GainsightUtils.valueOf(properties.get(SERVICE_PROVIDER_AUTHORIZATION_URI));\n        try {\n            URIBuilder uriBuilder = new URIBuilder(authorizationURI);\n            uriBuilder\n                    .addParameter(\"response_type\", \"code\")\n                    .addParameter(\"access_type\", \"offline\")\n                    .addParameter(\"prompt\", \"consent\")\n                    .addParameter(\"client_id\", GainsightUtils.valueOf(properties.get(\"clientId\")))\n                    .addParameter(\"scope\", GainsightUtils.valueOf(properties.get(\"scope\")))\n                    .addParameter(\"state\", state);\n            return uriBuilder.toString() + \"&redirect_uri=\" + redirectURI;\n        } ca","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8a8875b-3699-46be-bf96-99b0c79fb242","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorServiceImpl.java","startLine":53,"endLine":72,"content":"ionInfoDao) {\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n    }\n\n    @Override\n    public Object handleEventFromExternalSystemForMSTeams(Object body, Map<String, String> headers) throws Exception {\n        try {\n            Map<String, Object> incomingWebhookPayload = new ObjectMapper().convertValue(body, new TypeReference<Map<String, Object>>() {});\n            Map<String, Object> eventPayload = new ObjectMapper().convertValue(incomingWebhookPayload.get(RESOURCE_DATA), new TypeReference<Map<String, Object>>() {});\n            eventPayload.entrySet().stream().filter(entry -> MSTEAMS_TRANSCRIPT_EVENT_FIELDS.contains(entry.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n            eventPayload.put(UUID, eventPayload.get(ID));\n            List<String> tenantIds = fetchTenantDetails(incomingWebhookPayload.get(SUBSCRIPTION_ID).toString());\n            if(isValidTeamsEvent(eventPayload)) {\n                tenantIds.stream().forEach(tenantId -> {\n                    if (UCCommonUtility.initRequestContextSuccessfully(tenantId)) {\n                        log.info(\"Tenant Context Set Successfully for tenant {}, hence publishing MS Teams event with payload : {}\", tenantId, eventPayload);\n                        EventUtils.publishEvent(WEBHOOK_EVENT_TOPIC_NAME, MSTEAMS_WEBHOOK_EVENT_NAME, WEBHOOK_EVENT_VERSION, eventPayload);\n                    } else {\n                        log.error(\"Error initializing context : {}\", tenantId);\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dfab96cd-6df4-4939-9057-cf50fa84855b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":504,"endLine":529,"content":"nstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private void validateMappings(DuctJobMapping ductJobMapping, List<GSFieldDefinition> fieldDefinitions, DuctDataOperation ductDataOperation) throws CaasException {\n        Set<String> readOnlyFields = new HashSet<>();\n        Set<String> fieldsNotPresent = new HashSet<>();\n        boolean isIdentifierPresent = false;\n\n        for (ColumnMapping ductColumnMapping : ductJobMapping.getColumnMappings()) {\n            if (ductColumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n                log.error(DuctErrorConstants.INVALID_MAPPINGS);\n                DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_MAPPINGS, ductJobMapping.getJobId());\n            }\n\n            Optional<GSFieldDefinition> gsFieldDefinitionOptional = fieldDefinitions.stream().filter(fieldDefinition -> fieldDefinition.getFieldName().equals(ductColumnMapping.getFieldName())).findFirst();\n            if (gsFieldDefinitionOptional.isPresent()) {\n                if (gsFieldDefinitionOptional.get().getMeta().isReadOnly()) {\n                    readOnlyFields.add(ductColumnMapping.getFieldName());\n                }\n            } else {\n                fieldsNotPresent.add(ductColumnMapping.getFieldName());\n            }\n\n            if (!isIdentifierPresent && ductColumnMapping.getIsKeyField()) {\n                isIdentifierPresent = tru","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c21841f5-5f00-4afa-b25a-d61ac806c063","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/AbstractCaasDao.java","startLine":128,"endLine":139,"content":"Map<String, Object> criteria) {\n    String query = String.format(SELECT_CRITERIA_QUERY, tableName, DuctDaoUtils.andCriteria(criteria));\n    return Optional.ofNullable(DataAccessUtils.singleResult(namedParameterJdbcTemplate().query(query, criteria, rowMapper)));\n  }\n\n  protected long count(Map<String, Object> criteria) {\n    String query = String.format(\"SELECT COUNT(*) FROM %s WHERE %s\", tableName, DuctDaoUtils.andCriteria(criteria));\n    Long r = namedParameterJdbcTemplate().queryForObject(query, criteria, Long.class);\n    return r == null ? 0L : r;\n  }\n\n}\n\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"134e979e-9f9c-4c14-a3a8-ea3d65e73d0d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":185,"endLine":211,"content":"          return fetchSynchronizedDataWithoutPagination(ductJobMapping, url, tokenDetails);\n                    } else {\n                        DuctUtils.throwError(CaasValidationCode.MSTEAMS_USER_ID_NOT_FOUND.getGsEventCode(), CaasValidationCode.MSTEAMS_USER_ID_NOT_FOUND.getUserText(), \"MSTEAMS_USER_ID not found in connection properties\");\n                        return null;\n                    }\n                } catch (Exception e) {\n                    log.error(\"Error in fetching synchronized data\", e);\n                    throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n                }\n            } else {\n                DuctUtils.throwError(CaasValidationCode.SINGLE_RECORD_FETCH_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.SINGLE_RECORD_FETCH_NOT_SUPPORTED.getUserText(), \"Single record fetch not supported for \" + resourceName);\n                return null;\n            }\n        } else {\n            DuctUtils.throwError(CaasValidationCode.API_CONFIG_NOT_FOUND.getGsEventCode(), CaasValidationCode.API_CONFIG_NOT_FOUND.getUserText(), resourceName + \" API Config not found\");\n            return null;\n        }\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        r","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1aec48a0-74e1-4424-a951-a9d81545b32b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectAttributesConfig.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.beans.config;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.duct.beans.EnhancedGSFieldDefinition;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.*;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_object_attributes_config\")\npublic class CaasObjectAttributesConfig extends MongoBaseBean implements Serializable {\n  public static String CONNECTOR_TYPE_PROP = \"connectorType\";\n\n  @Indexed(background = true)\n  private ConnectorType connectorType;\n  private int order;\n  private String objectName;\n  private Map<String, List<String>> filterAttribute;\n  private List<Map<String, Object>> overrideAttribute = Lists.newArrayList();\n  private String transformationFunction;\n  private List<EnhancedGSFieldDefinition> defaultObjectAttributes = Lists.newArrayList();\n  private List<Map<String, Object>> excludeAttribute = Lists.newArrayList();\n  private Set<String> primaryKeys = new HashSet<>();\n  private String lastModifiedFieldName;\n\n  public List<EnhancedGSFieldDefinition> getDefaultObjectAttributes() {\n    return defaultObjectAttributes;\n  }\n\n  p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30ccdcab-7b4f-4af8-a78d-1cf645335c64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":119,"endLine":143,"content":"\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private void validateMappedFieldsAndCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n\n        mappedFields.removeAll(clonedHeaders);\n        if (!mappedFields.isEmpty()) {\n            DuctUtils.populateAndInsertError(String.format(MAPPED_FIELDS_NOT_PRESENT_IN_CSV,\n                    String.join(\", \", mappedFields)), ductJobMapping.getJobId());\n        }\n    }\n\n    private void validateHeadersFieldsAndMappings(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n        clonedHeaders.removeAll(mappedFields);\n        if (!clonedHeaders.isEmpty()) {\n            DuctUtils.populateAndInsertError(CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n                    String.join(\",\", clonedHea","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0803988d-1298-4b73-9e1d-5ad5f9aeac06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":173,"endLine":191,"content":"mResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred: {}\", e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_E","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"171c00da-ef89-475f-8877-5aaef859b2d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":689,"endLine":698,"content":"info(\"Resetting the context !!!\");\n            GainsightContext.unsetMDC();\n            RequestContextProvider.removeRequestContext();\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception in resetting context\");\n            LOGGER.error(ex.getMessage(), ex);\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c800ae4-0ab6-4102-9339-ea6a2ce44d82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.*;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.processor.GainsightHubspotFetchProcessor;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.hubspot.bean.*;\nimport com.gainsight.p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac405e95-09ef-4366-9d3d-8a7b42a88be9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":379,"endLine":407,"content":"ateFieldNameForCriteria(String fieldName, String resourceName) {\n        if(ObjectUtils.isNotEmpty(resourceName) && fieldName.matches(\"^[0-9].*\")) { {\n                return resourceName + CUSTOM_FIELD_PREFIX + fieldName.replaceAll(\"[^a-zA-Z0-9_]+\", \"\") ;\n            }\n        }\n        return fieldName.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n    }\n\n    private static CharMatcher legalTaskNameChars() {\n        return CharMatcher.inRange('a', 'z').or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.digit()).or(CharMatcher.anyOf(\"_\")).or(CharMatcher.whitespace()).precomputed();\n    }\n\n    public static String generateCleanTaskName(String taskName) {\n        return legalTaskNameChars().retainFrom(StringUtils.trim(taskName).replaceAll(\" \", \"_\"));\n    }\n\n    public static void getCriteria(Criteria criteria, Map<String, Criteria> valueToCriteriaMap, String fieldName, FilterOperator operatorType) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filter : criteria.getFilters()) {\n                    getCriteria(filter, valueToCriteriaMap, fieldName, operatorType);\n                }\n                return;\n            }\n            if (criteria.getFieldName().equalsIgnoreCase(fieldName) && operatorType.equals(criteria.getOperatorType()))\n                valueToCriteriaMap.put(criteria.getValues().toString(), criteria);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"88174330-3a2d-4757-ad20-14f73a205148","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/repo/DuctDatabaseTemplateService.java","startLine":1,"endLine":17,"content":"package com.gainsight.duct.repo;\n\nimport com.gainsight.database.DatabaseTemplateService;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\nimport javax.sql.DataSource;\n\npublic interface DuctDatabaseTemplateService extends DatabaseTemplateService {\n\n  DataSource getApplicationDataSource();\n\n  JdbcOperations getApplicationJdbcTemplate();\n\n  NamedParameterJdbcOperations getApplicationNamedParameterJdbcTemplate();\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c40ae742-eef1-48ea-902c-47d2db83bbdf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/CaasValidationCode.java","startLine":78,"endLine":119,"content":"CTOR_CONNECTION_INFO_NULL(5012),\n    CONNECTION_INFO_NOT_EXIST(5013),\n    INVALID_TIMEZONE(5014),\n    INVALID_SECRET_KEY(5015),\n    ACCESS_KEY_NOT_PROVIDED(5016),\n    INVALID_LENGTH_ACCESS_KEY(5017),\n    DUPLICATE_ACCESS_KEY(5018),\n    ACCESS_KEY_ALREADY_PRESENT(5019),\n    INVALID_DATALOAD_ACCESS_KEY(5020),\n    INVALID_S3_BUCKET_NAME(5021),\n    INVALID_API_KEY(5022),\n    CONNECTION_ALREADY_EXISTS_FOR_USER(5023),\n    MULTIPLE_CONNECTION_NOT_ALLOWED(5024),\n    CONNECTOR_NOT_ENABLED(5025),\n    TENANT_NOT_ENABLED(5026),\n    INVALID_URL(5027),\n    MORE_CONNECTION_NAME_SUBSCRIPTION(5028),\n    INVALID_AUTHENTICATION_TYPE(5029),\n    INVALID_REDIRECT_URL(5030),\n    CONNECTION_NAME_IN_USE(5031),\n    PROVIDE_VALID_HOST_DETAILS(5032),\n    INVALID_INPUT_DATA(5033),\n    INVALID_DATASETID(5034),\n    UNABLE_TO_AUTHORISE(5034),\n    GAINSIGHT_PX_METADATA_FETCH_ERROR(3035),\n    INVALID_ACCESS_KEY(3036),\n    INVALID_CONNECTION_NAME(3037),\n    CONNECTION_NAME_MORE_THAN_100(3038),\n    ACCESS_KEY_SEGMENT_ALTERED(3039),\n    //need to add\n    AUTHORIZATION_FAILED(3040),\n    ERROR_FETCHING_HUBSPOT_ACCOUNT_DETAIL(3041),\n    INVALID_HUBSPOT_HUB_ID(3042),\n    ERROR_POPULATING_PROPERTIES(3043),\n    ACCOUNT_INVALID_ACCOUNT_TYPE(4044),\n    CONNECTOR_PROJECT_INFO_NULL(4045),\n    INVALID_ORGANIZATION_URL(4046),\n    INVALID_SFDC_ORG_ID(4046),\n    UNABLE_FETCH_SALESFORCE_PROFILE(4047),\n    OAUTH_DYNAMICS_RESOURCE_INVALID(4049),\n    INVALID_OLD_CONNECTION_STATUS(4048),\n    OAUTH_ACCOUNT_AND_CURRENT_ACCOUNT_MISMA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2c7f098b-82ca-4c1a-9210-d266bb9f0a80","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":264,"endLine":288,"content":"hrows CaasException {\n        Set<String> fieldsToExtract = new HashSet<>();\n        fieldsToExtract.addAll(ductJobMapping.getFields());\n        DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), fieldsToExtract);\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields();\n        Map<String, Object> fieldNameDataTypeMap = getFieldNameDataTypeMap(fieldDefinitions);\n        Map<String, GSFieldDefinition> fieldNameMetaMap = getFieldNameMetaMap(fieldDefinitions);\n        Map<String, Object> metaData = new HashMap<>();\n        metaData.putIfAbsent(DuctConstants.SUB_TASK_TYPE, dpTaskType.getTaskType());\n        if(StringUtils.isNotEmpty(parentId))\n            metaData.putIfAbsent(DuctConstants.PARENTS, Lists.newArrayList(parentId));\n        if (dpTaskType.equals(DHTaskType.EXTERNALTASK)) {\n            populateMetadataInfoForDHTask(metaData);\n            metaData.putIfAbsent(EXTRACT_DETAILS,\n                    getExtractTask(ductJobMapping, fieldNameDataTypeMap, fieldNameMetaMap, fieldNameToFieldAlias));\n        } else {\n            metaData.putIfAbsent(\"isLast\", true);\n            metaData.putIfAbsent(FREE_FORM_QUERY_DETAILS, getFreeFormQueryInfoTask(ductJobMapping, fieldNameDataTypeMap, fieldNameMetaMap));\n        }\n        metaData.putIfAbsent(DuctConstants.TASK_TIMEOUT_MINS, \"120\");\n        metaData.put(\"ductConnectorType\", ductJobMapping.getConnectorType());\n        return metaData;\n    }\n\n    private DPWorkflowTaskTypeDetailsDTO getDpWorkflowTas","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ee66641-4e7b-4c51-bad7-16f3e2104f29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":184,"endLine":205,"content":"_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Get Raw Data\", response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/{connectionId}/{objectname}/preview/rawdata\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getPreviewRawData(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                      @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                                      @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                                      @ApiParam(value = \"JobId of the generateMetadata\", required = false) @RequestParam(value = \"jobId\", required = false) String jobId) {\n        try {\n            return new ResponseObj(true, metadataDriver.getPreviewRawData(connectionId, objectName, jobId));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f8756442-ed56-4286-b72d-636c69b7b164","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":26,"endLine":66,"content":"g3.StringUtils;\nimport org.jetbrains.annotations.Nullable;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.integration.bean.IPaasConstants.META;\nimport static com.gainsight.integration.bean.IPaasConstants.*;\n\n/**\n * createdBy: snargana\n * date: 13/08/24\n */\n@Order(1000)\n@Service\n@Slf4j\npublic class SAPDatasphereCaasMetadataServiceImpl implements CaasMetadataService {\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final String OBJECT_DBNAME = \"objectDBName\";\n  private static final String TABLE_NAME = \"TABLE_NAME\";\n  private static final String VIEW_NAME = \"VIEW_NAME\";\n  private static final String DATA_TYPE_NAME = \"DATA_TYPE_NAME\";\n  private static final String COLUMN_NAME = \"COLUMN_NAME\";\n\n  private static final String TABLE = \"TABLE\";\n  private static final String VIEW = \"VIEW\";\n  private static final String SUPPORT_LENGTH = \"supportLength\";\n  private static final String SUPPORT_SCALE = \"supportScale\";\n  private static final String LENGTH = \"LENGTH\";\n  private static final String SCALE = \"SCALE\";\n  private static final String IS_NULLABLE = \"IS_NULLABLE\";\n\n  @Autowired\n  private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n  @Autowired\n  priva","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5b6420e-e4d3-4e34-8bd3-e4b3e0c14455","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":133,"endLine":158,"content":"oString());\n        properties.put(\"db\", ipaasProperties.get(\"databaseName\").toString());\n        properties.put(\"schema\", ipaasProperties.get(\"datasetId\"));\n        properties.put(\"warehouse\", ipaasProperties.get(\"warehouse\").toString());\n        properties.put(\"password\", CryptHandler.getInstance().decrypt((byte[]) (ipaasProperties.get(\"password\"))));\n        properties.put(\"CLIENT_SESSION_KEEP_ALIVE\", Boolean.TRUE.toString());\n\n        return createConnection(connectionUrl, properties);\n    }\n\n    private Connection createConnection(String connectionUrl, Properties properties){\n        Connection connection = null;\n        try {\n            SnowflakeDriver snowflakeDriver = new SnowflakeDriver();\n            connection = snowflakeDriver.connect(connectionUrl, properties);\n        } catch (Exception ex) {\n            String errorMsg = String.format(\"Failed to connect to Snowflake due to %s\", ex.getMessage());\n            SystemException systemException = new SystemException(errorMsg, ex);\n            systemException.setUiMessage(errorMsg);\n            throw systemException;\n        }\n\n        return connection;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"586abf40-f6ec-440e-89c0-ef64c043833b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":266,"endLine":290,"content":"             fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                    }\n                }\n            }\n\n            return createFilterRule(criteria, fieldNameGSDataTypeMap, fieldNameMetaMap,\n                    ignoreMetadataFieldNames, caasConnectorConfig, objectName, targetFieldName);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                childRulesList.add(buildRule(childCriteria, objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFieldDefinitionMap, ignoreMetadataFieldNames, caasConnectorConfig, objectName, fieldsFlattened));\n            }\n            FilterRule current = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private static FilterRule createFilterRule(Criteria criteria, Map<String, Object> fieldNameGSDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, List<String> ignoreMetadataFieldNames, CaasConnectorConfig caasConnectionConfig, String objectName) {\n        FilterRule filterRule = new FilterRule();\n        FieldInfo internalFieldInfo = new FieldInfo();\n        internalFieldInfo.setFieldType(FieldType.FIELD);\n        if (ignoreMetadataFieldNames != null && ignoreMetadataFieldNames.contains(criteria.getFieldName()))\n            internalFieldInfo.setName(criteria.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f92a81c-8a8f-4452-8742-5fdba65bed05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":115,"endLine":137,"content":"cted Boolean generateFreeFormTask() {\n    return false;\n  }\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return connectorType == ConnectorType.SAP_DATASPHERE;\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n    Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo, false, ductJobMapping);\n    return fetchSynchronziedData(ductJobMapping, objectDefinitionMap.get(ductJobMapping.getResourceName()), maxPageSize);\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    SAPDatasphereConnectionDetail sapDatasphereConnectionDetail = (SAPDatasphereConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SAP_DATASPHERE);\n    String objectName = ductJobMapping.getResourceName().replace","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19f26d9e-4e37-4e83-b0b2-476a66d4db08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/ResourceMetadataTransformationConfig.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter @Setter\npublic class ResourceMetadataTransformationConfig implements Serializable {\n\n    private Map<String, FieldLevelMetadataTransformationConfig> resourceLevelMetadataConfig;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96d5c86c-11b4-4528-99c2-7f25325a990a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":203,"endLine":231,"content":"thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED));\n            ductJobMappingService.synchronousInsert(new DuctRequestDTO());\n        } catch (SystemException ex) {\n            e = ex;\n            passed = true;\n        } catch (Exception exc) {\n            e = exc;\n        } finally {\n            assertNotNull(e, \"Exception should not be null\");\n            if (e instanceof SystemException) {\n                SystemException sysEx = (SystemException) e;\n                assertNotNull(sysEx, \"System Exception can't be null\");\n                assertEquals(\"Resource Name should be present\", sysEx.getMessage(), \"Incorrect Message in Exception\");\n                assertEquals(\"Resource Name should be present\", sysEx.getUiMessage(), \"Incorrect Message in Exception\");\n                assertEquals(400, sysEx.getHttpStatus(), \"Incorrect Http Status Code\");\n                assertEquals(CoreErrorCode.INVALID_PARAMETER, sysEx.getErrorCode(), \"Incorrect Error Code\");\n            }\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n        }\n    }\n\n    @Test\n    public void saveMapping_test_validate_mapping_null_connectionId() {\n        DuctRequestDTO ductRequestDTO = new DuctRequestDTO();\n        Exception e = null;\n        boolean passed = false;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2b88cd0-3df6-43d7-a3d0-1fd6c3969ec2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":797,"endLine":823,"content":"\n            case PIPEDRIVEV2:\n            case ZOHOV2:\n            case SERVICENOW:\n                pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n                CaasConnectionService service = caasConnectionFactory.getService(pnpConnectionsInfo.getConnectionType());\n                pnpConnectionsInfo = service.createConnection(pnpConnectionInput);\n                break;\n            case FRESHDESK:\n            case SAP_DATASPHERE:\n                CaasConnectionService caasConnectionFactoryService = caasConnectionFactory.getService(pnpConnectionsInfo.getConnectionType());\n                pnpConnectionsInfo = caasConnectionFactoryService.createConnection(pnpConnectionInput);\n                break;\n            default:\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT_DATA.getUserText()));\n        }\n\n        pnpConnectionsInfo.setConnectionId(UUID.randomUUID().toString());\n        pnpConnectionsInfo.setConnectionName(pnpConnectionsInfo.getConnectionName().trim());\n        if (pnpConnectionsInfo.getConnectionType().equals(SEGMENT_IO)) { // refactor type\n            generateAccessKeyDetails(pnpConnectionsInfo);\n        }\n        if(pnpConnectionsInfo.getConnectionType().equals(ZUORAV2)) {\n            try {\n                Boolean authorized = authorizeConnection(pnpConnectionInput.getPnpConnectionsInfo(),null);\n            } catch (Exception e) {\n                log.error(\"Error occured while authorizing ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"003f8bff-66d0-4d94-870f-c567789e5734","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasHelperService.java","startLine":52,"endLine":70,"content":"ders.put(ELEMENTS_VERSION,HELIUM);\n        return headers;\n    }\n\n    public static Map<String, Object> getBulkFileDownloadHeaders(IpaasAccountUserDetails ipaasAccountUserDetails, PNPConnectionsInfo pnpConnectionsInfo){\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(ACCEPT, APPLICATION_JSON);\n        String userTokenRequest = USER + ipaasAccountUserDetails.getUserToken().getString();\n        String elementToken = ELEMENT + CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES)).get(IPAAS_INSTANCE_TOKEN));\n        String orgTokenRequest = ORG + IpaasFeatureToggleUtility.getOrgToken();\n        headers.put(IPaasConstants.AUTHORIZATION, userTokenRequest + \",\" + orgTokenRequest + \",\" + elementToken);\n        return headers;\n    }\n    public static Map<String, Object> getMetadataSpecificHeaders(IpaasAccountUserDetails ipaasAccountUserDetails, PNPConnectionsInfo pnpConnectionsInfo){\n        Map<String, Object> connectionSpecificHeaders = getConnectionSpecificHeaders(ipaasAccountUserDetails, pnpConnectionsInfo);\n        connectionSpecificHeaders.put(IPaasConstants.ELEMENTS_VERSION,\"Helium\");\n        return connectionSpecificHeaders;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2fc07af-c1b2-4560-bba8-d0c41c6866fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":498,"endLine":523,"content":"nectionId())\n          .connectorType(detailsById.getConnectorType()).objectName(detailsById.getObjectName()).status(detailsById.getStatus())\n          .jobId(detailsById.getJobId()).tenantId(detailsById.getTenantId()).errorMessage(detailsById.getErrorMessage()).build();\n    return metadataGenerationResponse;\n  }\n\n  @Override\n  public Object getPreviewRawData(String connectionId, String objectName, String jobId) throws CaasException {\n    try {\n      MetadataGenerationDetails metadataGenerationDetails = null;\n      if (jobId != null)\n        metadataGenerationDetails = metadataGenerationDetailsDao.getDetailsById(jobId);\n      else\n        metadataGenerationDetails = metadataGenerationDetailsDao.getDetailsByConnectionIdAndObjectName(connectionId, objectName).stream().\n            max(Comparator.comparing(MongoBaseBean::getModifiedDate)).orElse(null);\n      if (metadataGenerationDetails == null)\n        throw new CaasException(new GsExternalSystemErrorMapping(\"No metadata generation details found\"));\n      String filePath = metadataGenerationDetails.getDataFilePath();\n      File file = DuctS3Utility.downloadFileFromS3(filePath);\n      // Read the JSON content as a JsonNode\n      JsonNode jsonNode = OBJECT_MAPPER.readTree(file);\n      if (jsonNode.isArray()) {\n        // If it's an array, deserialize as List<Map<String, Object>>\n        return OBJECT_MAPPER.readValue(jsonNode.traverse(), new TypeReference<List<Map<String, Object>>>() {\n        });\n      } else if (jsonNode.isObj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22406d59-d4e4-4d57-84a9-01dd7205db3b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":104,"endLine":130,"content":"HubspotSchema.class);\n                    hubspotEntityProperties = gainsightHubspotSchemaBean.getProperties();\n                }\n                hubspotEntityProperties.forEach(gainsightHubspotFieldDescription -> {\n                    gainsightHubspotFieldDescription\n                            .setApiName(gainsightHubspotFieldDescription.getName());\n                    gainsightHubspotFieldDescription.setCanonicalName(\n                            \"properties.\" + gainsightHubspotFieldDescription.getName());\n                    handleSpecialCases(entityName, gainsightHubspotFieldDescription);\n                });\n            }\n            response.setResult(gainsightHubspotSchemaBean);\n            response.setSuccessful(true);\n            return response;\n        } catch (CaasException ex) {\n            throw ex;\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while fetching data from Hubspot-\" + e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_CODE_NULL, DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL));\n        }\n    }\n\n    @Override\n    public GSIntegrationResponse getCustomObjects(PNPConnectionsInfo pnpConnectionsInfo, String api) throws CaasException {\n        GSIntegrationResponse response = new GSIntegrationResponse();\n        try {\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing Connecti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7f666d33-36a1-4bef-979b-a5b817d19870","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":1,"endLine":32,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.bean.*;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.bean.account.sfdc.SFDCProfile;\nimport com.gainsight.bi.commons.utils.SalesforceUtils;\nimport com.gainsight.bigquery.util.BigQueryUrlUtil;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.dao.TenantMasterDAO;\nimport com.gainsight.dao.UserSessionDAO;\nimport com.gainsight.duct.beans.account.OAuthStateDetail;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctCommonConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctConnectorCalloutUtil;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.UCEnvSpecificConfigDetailUtil;\nimport com.gainsight.enums.*;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.se","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a4709b6-eb86-47e7-adb9-b2518929ccd3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackHubspotMessageProcessor.java","startLine":82,"endLine":97,"content":"     } catch (Exception exception) {\n                log.error(\"Error while processing DuctMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.WRITE_BACK_HUBSPOT_DATA.getName());\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b62d0275-94f2-40dc-a1b5-b187d67505d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":87,"endLine":117,"content":".put(UPDATEABLE, true);\n        retMap.put(CREATEABLE, true);\n        retMap.put(SOURCE, TABLE);\n      } else {\n        objectName = object.get(VIEW_NAME).toString();\n        retMap.put(SOURCE, VIEW);\n      }\n      retMap.put(OBJECT_ID, objectName);\n      retMap.put(OBJECT_NAME, objectName);\n      retMap.put(DuctConstants.DescribeMetaConstants.LABEL, objectName);\n      returnObj.add(retMap);\n    }\n    return returnObj;\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n\n    GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n    GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromProperties(pnpConnectionsInfo, true, pnpConnectionsInfo.getAuthorizationType());\n    List<String> ignoreSystemFields = Lists.newArrayList();\n    Set<Map<String, Object>> fields = gainsightSAPDatasphereChannelService.listAllFields(objectName, ignoreSystemFields);\n\n    CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(ConnectorType.SAP_DATASPHERE);\n    List<Map<String, Object>> fieldList = fields.stream()\n        .map(field -> constructFieldMap(field, objectName, connectorConfig))\n        .filter(field -> Objects.nonNull(field))\n        .collect(Collectors.toList());\n\n    Map<String, Object> objectDefinition = new HashMap<>();\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f28c62ec-4fcf-4b4e-84a0-eb15e838fb8c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":323,"endLine":344,"content":"(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if (FilterOperator.INCLUDES.equals(criteria.getOperatorType()) || FilterOperator.EXCLUDES.equals(criteria.getOperatorType()))\n            filterRule.setOperatorInputs(new ArrayList<>());\n        return filterRule;\n    }\n\n    private static FilterRule createFilterRule(Criteria criteria, Map<String, Object> fieldNameGSDataTypeMap,\n                                                                        Map<String, GSFieldDefinition> fieldNameMetaMap, List<String> ignoreMetadataFieldNames,\n                                                                        CaasConnectorConfig caasConnectionConfig, String objectName, String targetFieldName) {\n        FilterRule filterRule = new FilterRule();\n        FieldInfo internalFieldInfo = new FieldInfo();\n        internalFieldInfo.setFieldType(FieldType.FIELD);\n        if (ignoreMetadataFieldNames != null && ignoreMetadataFieldNames.contains(criteria.getFieldName()))\n            internalFieldInfo.setName(criteria.getFieldName());\n        else\n            internalFieldInfo.setName(createFieldNameForCriteria(criteria.getFieldName(), objectName));\n        internalFieldInfo.setJsonPath(criteria.getFieldName());\n\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || data","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27d02788-1606-4ef8-a2d0-81d5abf84d05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":25,"endLine":58,"content":"ot.bean.ColumnMapping;\nimport com.gainsight.integration.connector.hubspot.bean.*;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.io.CsvListWriter;\nimport org.supercsv.prefs.CsvPreference;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"439526fd-6cc8-42dd-a737-7c2a32a7523c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":113,"endLine":133,"content":"P, ObjectUtils.allNotNull(gainsightHubspotFieldDescription.getReferencedObjectType()));\n\n                if (ObjectUtils.isNotEmpty(gainsightHubspotFieldDescription.getOptions()) && !gainsightHubspotFieldDescription.getOptions().isEmpty()) {\n                    List<Map> picklistOptions = new ArrayList<>();\n                    for (Options option : gainsightHubspotFieldDescription.getOptions()) {\n                        Map<String, Object> picklistOption = new HashMap<>();\n                        picklistOption.put(LABEL, option.getLabel());\n                        picklistOption.put(DISPLAY_ORDER, option.getDisplayOrder());\n                        picklistOption.put(VALUE, option.getValue());\n                        picklistOption.put(ACTIVE, !option.isHidden());\n                        picklistOptions.add(picklistOption);\n                    }\n                    fieldDefinition.put(OPTIONS, picklistOptions);\n                }\n\n                if (PICKLIST_DATA_TYPE.contains(fieldDefinition.get(DATA_TYPE)) && !fieldDefinition.containsKey(OPTIONS))\n                    gainsightHubspotFieldDescription.getModificationMetadata().setReadOnlyValue(true);\n\n                if (gainsightHubspotFieldDescription.getModificationMetadata() != null) {\n                    meta.put(UPDATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                    meta.put(READ_ONLY, gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7f7f7b4-3728-40df-823d-cc267e818373","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":374,"endLine":397,"content":"Request(metadataEngineConfig,\n            apiConfigAttribute, objectName, pnpConnectionsInfo, flattenConnectionInfo, null);\n        resultData = metadataEngineService.executeApi(httpClientForApiCall, apiConfigAttribute.getResponseRootKey(),\n            metadataEngineConfig.getRateLimitDetails());\n      }\n      omdConverterFactoryService.postProcessFields(objectName, objectDefinitionMap, resultData);\n\n    } catch (Exception ex) {\n      LOGGER.error(\"Exception occurred while trying to fetch post process field metadata from external System : {}\", ex.getMessage(), ex);\n    }\n  }\n\n  @Override\n  public List<GSFieldDefinition> refreshGeneratedMetadata(MetadataGenerationDetails metadataGenerationDetails) throws CaasException {\n    metadataGenerationDetails = metadataGenerationDetailsDao.getDetailsById(metadataGenerationDetails.getJobId());\n    try {\n      metadataGenerationDetails.setStatus(MetadataJobStatus.IN_PROGRESS);\n      metadataGenerationDetailsDao.update(metadataGenerationDetails);\n      String connectionId = metadataGenerationDetails.getConnectionId();\n      String objectName = metadataGenerationDetails.getObjectName();\n\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n      MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n      Map<String, ObjectDefinition> metadata = getMetadataUsingEngine(connectionId, objectName, false);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0bcd0767-8a34-4c10-adb0-75e1c6c4a2a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":650,"endLine":670,"content":"db\"));\n        superClassInfo.put(\"cmdb_rel_ci\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci\", Arrays.asList(\"cmdb\"));\n        superClassInfo.put(\"sn_install_base_m2m_affected_install_base\", new ArrayList<>());\n        superClassInfo.put(\"asmt_assessment_instance\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_service_product_model\", Arrays.asList(\"cmdb_model\"));\n        superClassInfo.put(\"cmdb_ci_service_business\", Arrays.asList(\"cmdb_ci_service\"));\n        superClassInfo.put(\"cmdb\", new ArrayList<>());\n        superClassInfo.put(\"service_offering\", Arrays.asList(\"cmdb_ci_service\", \"cmdb_ci\", \"cmdb\"));\n        superClassInfo.put(\"sc_cat_item\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"cmn_department\", new ArrayList<>());\n        superClassInfo.put(\"core_company\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci_environment\", Arrays.asList(\"cmdb_ci\", \"cmdb_ci\"));\n        superClassInfo.put(\"ast_contract\", new ArrayList<>());\n        superClassInfo.put(\"change_request\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"sn_customerservice_team_member\", new ArrayList<>());\n        superClassInfo.put(\"alm_asset\", new ArrayList<>());\n        superClassInfo.put(\"asmt_metric_type\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"asmt_assessment_instance_question\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci_service_discovered\", Arrays.asList(\"cmdb_ci_service_auto\", \"cmdb_ci_service\", \"cmdb_ci\", \"cmdb\"));\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ccbfb7d2-4300-452b-b0d0-eb446eb7142f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/AhaCaasMetadataServiceImpl.java","startLine":74,"endLine":77,"content":" gainsightAhaFieldDescriptions);\n        return objectDefinition;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a023384-5d85-4fde-9946-5e8061214a3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":113,"endLine":144,"content":"ctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n        return ConnectorDataSourceService.super.fetchSynchronziedData(ductJobMapping, objectDefinition, maxPageSize);\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    private Map<String, Object> extractResponse(HttpResponse response) throws CaasException{\n        Map<String, Object> responseMap;\n        try {\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n            responseMap = (Map) MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n            try {\n                if (response != null && response.getEntity() != null && response.getEntity().getContent() != null) {\n                    response.getEntity().getContent().close();\n                }\n            } catch (Exception e) {\n                log.error(\"Error in input stream \", e);\n            }\n        }\n        return responseMap;\n    }\n\n    @Override\n    public DuctResponse createDa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f668fb95-72c1-4287-8ea8-fd310eab1bd9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":274,"endLine":281,"content":"hs_object_id\", null, null, new HashMap<>()));\n            else\n                columnMappingList.add(new ColumnMapping(object, null, \"hs_object_id\", \"hs_object_id\", null, null, new HashMap<>()));\n        }\n        return columnMappingList;\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63ffa543-e996-4d10-aac4-457fb2024dfc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":100,"endLine":128,"content":"oreErrorCode.SYSTEM_ERROR, 500);\n      } else {\n        throw new SystemException(\"Error occured while invoking : \" + url, e, CoreErrorCode.SYSTEM_ERROR, 500);\n      }\n    }\n  }\n\n  public static <T> T postGsAppV1(String uri, Object payload, Class<T> clazz) {\n    return postGsAppV1(uri, payload, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T postGsAppV1(String uri, Object payload, Map<String, String> queryParam, Class<T> clazz) {\n    return postGsAppV1(uri, payload, queryParam, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T postGsAppV1(String uri, Object payload, Map<String, String> queryParam, Map<String, String> additionalHeaders, Class<T> clazz) {\n    String url = constructGsAppV1Url(uri, queryParam);\n    Map<String, String> headers = headers(additionalHeaders);\n    HttpResponseWrapper<ResponseObj> response = null;\n    try {\n      LOGGER.info(\"Invoking mda POST : {}, with payload : {}\", url, JsonUtil.toJsonString(payload));\n      response = AdvancedHttpHelper.post(url, headers, GainsightUtils.convertObjectToJson(payload), ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        LOGGER.info(\"Response of mda to {}, is {}\", uri, JsonUtil.toJsonString(response.getResponseBody()));\n        ResponseObj responseObj = response.getResponseBody();\n        if (responseObj.isResult()) {\n          return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), clazz);\n        } else if (responseObj.getErrorDesc() != null) {\n          th","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1da81f0b-efb1-4471-ad76-4da9668e40dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/GainsightCaasMetadataServiceImpl.java","startLine":143,"endLine":174,"content":"             }\n            }\n\n        }\n        return newFieldDefinitionList;\n    }\n\n    private GSFieldDefinition addNewFieldForLookUpFields(GSFieldDefinition gsFieldDefinition) {\n        GSFieldDefinition newField = new GSFieldDefinition();\n        try {\n            newField = SerializationUtils.clone(gsFieldDefinition);\n            //BeanUtils.copyProperties(gsFieldDefinition, newField);\n            newField.setDataType(\"STRING\");\n            newField.setLabel(String.format(DuctConstants.LOOKUP_FIELD_LABEL_PATTERN,\n                    gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getLabel(),\n                    gsFieldDefinition.getLabel()));\n            newField.setFieldName(String.format(DuctConstants.LOOKUP_FIELD_NAME_PATTERN, gsFieldDefinition.getFieldName(),\n                    gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName()));\n            newField.getMeta().setLookupDetail(null);\n            newField.getMeta().setHasLookup(false);\n            newField.getMeta().setOriginalDataType(\"string\");\n            newField.getMeta().setDescription(newField.getLabel());\n            newField.getMeta().setRequired(false);\n            newField.setDbName(newField.getFieldName());\n        } catch (Exception e) {\n            log.error(\"Could not add extra field for the look up type field due to : {}\", e);\n        }\n        return newField;\n    }\n\n    private static Map<String, Object> getB2BHeaders() {\n        Map<Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b9494c9-37b9-425a-80c9-a365566fbdad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":33,"endLine":72,"content":"vletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.UUID;\n\n/**\n * Author: Santa Thounaojam\n * Date  : 06/10/16\n * Time  : 11:06 AM\n * <p>\n * This interceptor class act as a authentication filter for all B2B request.\n * This expect encrypted request info from the caller\n */\n@Slf4j\n@Component\npublic class DuctWebB2BInterceptor implements HandlerInterceptor {\n\n    private static final String REQUEST_START_TIME_ATT = \"startTime\";\n    private static final KeyManagementStore keystore = KeyManagementStore.getDefaultKeyStore(DeploymentProperties.getProperties());\n    private static final String SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    private static final String SECURE_CODE = DeploymentProperties.getDeploymentProperties().getValue(\"uc.gs.connect.secure.code\");\n\n    @Autowired\n    @Qualifier(\"baseTenantMasterService\")\n    private BaseTenantMasterService service;\n\n    @Autowired\n    private TenantUserRoleTypeService tenantUserRoleTypeService;\n\n    @Autowired\n    private DatabaseTemplateService databaseTemplateService;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o)\n            throws Exception {\n        if(request.getServletPath().equalsIgnoreCase(\"/error\")){\n            return true;\n        }\n        request.setAttribute(REQUEST_START_TIME_ATT, System.currentTimeMillis());\n        String requestId = request.getHeader(C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"209a8afc-be7e-483a-a443-e3aa8ea9ce05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":155,"endLine":168,"content":"tegrationResponseHubspot.getResult();\n            GainsightHubspotEntityDescriptionV3 gainsightHubspotEntityDescription = new GainsightHubspotEntityDescriptionV3(objectName, gainsightHubspotSchemaBean.getProperties());\n            addAssociationAndIdFields(gainsightHubspotSchemaBean, connectorConfigs);\n            Map metadata = constructHubspotObjectDefinition(gainsightHubspotEntityDescription.getGainsightHubspotFieldDescriptions(), objectName, pnpConnectionsInfo);\n            List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n            MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n            // tenant Level Overrides\n            List<CaasObjectAttributesTenantConfig> tenantConfigAttributes = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId());\n            MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(tenantConfigAttributes, metadata);\n            /*\n            Connection Id level overrides\n             */\n            List<CaasObjectAttributesTenantConfig> connectionIdConfigAttributes = caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName, RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n            MetadataCommonUtil.overrideAttributesFromConfigAtTen","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5845e06a-20a3-4e26-a28f-8f6e37e721d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.UCFileUtility;\nimport com.gainsight.duct.utils.snowflake.DBConnectorsQueryBuilder;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.enums.CSVParserType;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.databricks.GainsightDatabricksChannelFactory;\nimport com.gainsight.integration.connector.databricks.GainsightDatabricksChannelService;\nimport com.gainsight.integration.utils.file.CsvDataParserBuilder;\nimport com.gainsi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7dd57e0-6072-455d-8261-d20be337a18e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":169,"endLine":177,"content":"     }\n        ObjectDefinition resource = metaMap.get(ductResponse.getExternalResourceName());\n        EcosystemResponse ecosystemResponse = EcosystemHelper.transformExternalResponse(resource, ductResponse.getProjections(), ductResponse.getExternalSystemResponse());\n        responseBean.setRecords(ecosystemResponse.getTransformedRecords());\n        responseBean.setNextPageToken(ecosystemResponse.getNextPageToken());\n        return responseBean;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81997def-ce71-4647-b0c7-8803b274df94","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":188,"endLine":231,"content":" code.\n     *\n     * @param value the value\n     * @return the copilot validation code\n     */\n    public static UCValidationCode fromValue(String value) {\n        if (StringUtils.isNotBlank(value)) {\n            return MAP.get(value.toLowerCase());\n        }\n        return null;\n    }\n\n    /**\n     * Gets Event Code for an exception\n     */\n    public int getEventCode() {\n        return code;\n    }\n\n    /**\n     * Gets Gainsight Event Code for an exception\n     */\n    @Override\n    public String getGsEventCode() {\n        return \"GS_CP_\" + code;\n    }\n\n    public boolean isCodeConstant() {\n        return codeConstant;\n    }\n\n    /**\n     * Refers to User Defined Text\n     */\n    public String getUserText() {\n        String key = className + \"__\" + this.name();\n        return UCMessageProperties.getMessageProperties().getValue(key);\n    }\n\n    @Override\n    public ExceptionType getExceptionType() {\n        return exceptionType;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d70acd9-5d61-4d6c-a8c0-7fda805e33d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/OperatorType.java","startLine":71,"endLine":100,"content":"() {\n        return alias;\n    }\n\n    public OperandType getOperandType() {\n        return operandType;\n    }\n\n    public String replace(String sql, String with, boolean left) {\n        if (left) {\n            return sql.replace(\"$left\", with);\n        }\n        return sql.replace(\"$right\", with);\n    }\n\n    public String replace(String sql, String... withs) {\n        for (int x = 0; x < withs.length; x++) {\n            sql = sql.replace(\"$\" + x, withs[x]);\n        }\n        return sql;\n    }\n\n    public static OperatorType forValue(String alias) {\n        if (alias == null) {\n            return null;\n        }\n        return MAP.get(alias.toLowerCase());\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc9538f3-2b8a-4efb-a66c-ef713d6cedf5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":330,"endLine":362,"content":"))\n        .min((c1, c2) -> {\n          Object dateStr1 = ((List<Object>) c1.getValues()).get(0);\n          Object dateStr2 = ((List<Object>) c2.getValues()).get(0);\n          ZonedDateTime dateTime1 = ZonedDateTime.parse(DuctUtils.valueOf(dateStr1), formatter);\n          ZonedDateTime dateTime2 = ZonedDateTime.parse(DuctUtils.valueOf(dateStr2), formatter);\n          return dateTime1.compareTo(dateTime2);\n        }).orElse(null);\n\n    if (Objects.isNull(requiredSingleCriteria)) {\n      return getDefaultFallbackCriteria();\n    } else {\n      return requiredSingleCriteria;\n    }\n  }\n\n\n  private List<Map<String, Object>> postProcessData(JsonNode data, DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    try {\n\n      Map<String, List<PicklistOption>> picklistMap = generatePicklistMap(objectDefinition, fieldNameMetaMap);\n\n      if (MapUtils.isNotEmpty(picklistMap) && Objects.nonNull(data)) {\n        // resolve picklist options\n        data.iterator().forEachRemaining((JsonNode jsonNode) -> CommonUtils.resolvePicklist(jsonNode, picklistMap));\n      }\n\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      List<Map<String, Object>> flattenedMap = new ArrayList<>();\n      for (Map<String, Object> dataMap : dataToBeProcessed) {\n        flattenedMap.add(JsonFlattener.flattenAsMap(OBJECT_MAPPER.writeValueAsString(dataMap)));\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"762f7913-a5cf-4eef-9e25-ef57fbbc9f63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/metadata/engine/MetadataEngineConfigDaoImpl.java","startLine":59,"endLine":67,"content":"onfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        return getMongoTemplate().find(query, MetadataEngineConfig.class);\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(MetadataEngineConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30641921-4e23-4ac5-b61c-60b650111028","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXFetchServiceImpl.java","startLine":1,"endLine":41,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.processor;\n\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.duct.beans.GainsightPXFieldDescription;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class GainsightPXFetchServiceImpl implements GainsightPXFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(Gai","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"52f16c02-72ad-47a4-b851-dcd4ac2b8783","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":86,"endLine":111,"content":"uditOperationType.CREATE);\n        switch (auditEntityType) {\n            case CONNECTION:\n                auditRecord.setEventName(UCConstants.CREATE_CONNECTION + ((PNPConnectionsInfo) unifiedConnectorRequest.getRequestObject()).getConnectionName());\n                auditDetails.setAdditionalInfo(\"Connection Created\");\n                break;\n            case JOB:\n                auditRecord.setEventName(UCConstants.CREATE_JOB + ((DuctJobMapping) unifiedConnectorRequest.getRequestObject()).getJobName());\n                auditDetails.setAdditionalInfo(\"Job Created\");\n                auditDetails.setAttributeType(AttributeAuditType.JOB);\n                break;\n        }\n        auditRecord.getData().setAuditDetailsList(auditDetailsList);\n        return auditRecord;\n    }\n\n    private static AuditRecord generateUpdateAuditLogs(AuditEntityType auditEntityType, UnifiedConnectorRequest unifiedConnectorRequest, EventStatusEnum eventStatusEnum, List<BeanPropertyTracker> propertyTrackerLits) {\n        AuditRecord auditRecord =\n                getBasicAuditRecordObject(auditEntityType, unifiedConnectorRequest, eventStatusEnum);\n        AuditData auditData = auditRecord.getData();\n        auditRecord.setEventType(AuditOperationType.UPDATE);\n        if (null != propertyTrackerLits) {\n            switch (auditEntityType) {\n                case CONNECTION:\n                    generateConnectionAuditLogs(unifiedConnectorRequest, propertyTrackerLits, auditRecord, auditData);\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65a96c09-7ff2-43f7-b8a2-56b960797ddb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":85,"endLine":106,"content":"<>());\n    IntercomV2Region oldRegion = DuctUtils.getRegion(pnpConnectionsInfo);\n    IntercomV2Region newRegion = IntercomV2Region.valueOf(IPAAS_PROPERTIES_NEW.getOrDefault(\"region\", IntercomV2Region.US.name()).toString());\n\n    if (!newRegion.equals(oldRegion)) {\n      Map<String, Object> IPAAS_PROPERTIES = (Map<String, Object>) GainsightCollectionUtils.nullSafeMap(pnpConnectionsInfo.getProperties())\n              .getOrDefault(IPaasConstants.IPAAS_PROPERTIES, new HashMap<>());\n      IPAAS_PROPERTIES.put(\"region\", newRegion.name());\n      IPAAS_PROPERTIES.put(\"APP_URL\", newRegion.getAppURL());\n      IPAAS_PROPERTIES.put(\"API_URL\", newRegion.getApiURL());\n      GainsightCollectionUtils.nullSafeMap(pnpConnectionsInfo.getProperties()).put(IPaasConstants.IPAAS_PROPERTIES, IPAAS_PROPERTIES);\n    }\n    pnpConnectionsInfo.setIpaasConnection(false);\n    return pnpConnectionsInfo;\n  }\n\n  @Override\n  public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(ConnectorType.INTERCOMV2);\n    Optional<AuthDetails> authInfoOptional = metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n    if (!authInfoOptional.isPresent())\n      throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TY","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1afc57c3-eb8c-424d-af67-ef6736eb2c29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":348,"endLine":380,"content":"uatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n                break;\n            case STARTS_WITH:\n                evaluatedExpression.append(\"startsWith\".toLowerCase())\n                        .append(\"(\")\n                        .append(fieldName)\n                        .append(\",\")\n                        .append(\"'\");\n                if (isStringType(externalDataType) && !Objects.isNull(getFilterValue(rule))) {\n                    evaluatedExpression.append(escapeSql(String.valueOf(getFilterValue(rule))));\n                } else {\n                    evaluatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n                break;\n            case ENDS_WITH:\n                evaluatedExpression.append(\"endsWith\".toLowerCase())\n                        .append(\"(\")\n                        .append(fieldName)\n                        .append(\",\")\n                        .append(\"'\");\n                if (isStringType(externalDataType) && !Objects.isNull(getFilterValue(rule))) {\n                    evaluatedExpression.append(escapeSql(String.valueOf(getFilterValue(rule))));\n                } else {\n                    evaluatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bbb5c22c-bf7f-4c9b-aee9-41b67c04f72d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":414,"endLine":448,"content":"          if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing tenant level object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (caasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n\n        /*\n        Adding connection id level object\n         */\n        if (connectionIDSpecificCaasObjectTenantConfig != null) {\n            for (Map<String, Object> object : connectionIDSpecificCaasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing connection id object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (connectionIDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsS","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"531d8c71-17ea-4244-910d-87f2d2bbe495","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":165,"endLine":191,"content":"s().getValue(CONNECTOR_BASE_URL) + String.format(\"/v1.0/connector/ipaas/%s/revoke/%s\",\n                pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.getConnectionId());\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking update connection : {}\", url);\n            response = AdvancedHttpHelper.put(url, headers, \"{}\", ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of update connection to {}, is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    return true;\n                } else if (responseObj.getErrorDesc() != null) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(responseObj.getErrorDesc(), response.getStatusCode()));\n                }\n            }\n            return null;\n        } catch (Exception e) {\n            if (response != null && response.getReasonPhrase() != null) {\n                throw new CaasException(new GsExternalSystemErrorMapping(response.getReasonPhrase(), e));\n            } else {\n                throw new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n    public static void deleteCEInstance(PNPConnectionsInfo pnpConnectio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"727c992f-1fd4-4dc8-a458-316f5f0c6a73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":727,"endLine":761,"content":"UPSERT) {\n            return DuctDataOperation.UPSERT;\n        } else if (operation == OperationType.INSERT) {\n            return DuctDataOperation.INSERT;\n        } else {\n            return DuctDataOperation.UPDATE;\n        }\n    }\n\n    @Override\n    public BulkActionResponse getExternalLoadStatus(String jobId) {\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(jobId);\n        BulkActionResponse bulkActionResponse = new BulkActionResponse();\n        bulkActionResponse.setJobId(jobId);\n        populateExecutionStatus(bulkActionResponse, ductJobMapping);\n        populateCount(bulkActionResponse, ductJobMapping);\n        if (ductJobMapping.getExternalErrorMessage() != null) {\n            bulkActionResponse.setErrorMessage(ductJobMapping.getExternalErrorMessage());\n        }\n        if (ductJobMapping.getExternalErrorFileLocation() != null) {\n            bulkActionResponse.setFailureFileName(ductJobMapping.getExternalErrorFileLocation());\n        }\n        if (ductJobMapping.getExternalSuccessFileLocation() != null) {\n            bulkActionResponse.setSuccessFileName(ductJobMapping.getExternalSuccessFileLocation());\n        }\n        if (ductJobMapping.getSourceResponseFile() != null) {\n            bulkActionResponse.setErrorMessage(\"Source Error File location : \" + ductJobMapping.getSourceResponseFile());\n        }\n\n        log.info(\"Return response to Rules from CAAS {}\", bulkActionResponse);\n        return bulkActionResponse;\n    }\n\n    @Override\n    pub","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"268a26ab-1188-4f4e-b14d-d5ec98d72154","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/DuctSingleCEQueryBuilder.java","startLine":74,"endLine":94,"content":"       stringBuilder.append(URLEncoder.encode(String.join(\",\", values), \"UTF-8\"));\n            stringBuilder.append(\")\");\n        } else if ((rule.getOp() == FilterOperator.IN || rule.getOp() == FilterOperator.NOT_IN) && rule.getFieldInfo().getDataType() != DataType.NUMBER) {\n            stringBuilder.append(\"(\");\n            stringBuilder.append(URLEncoder.encode(values\n                    .stream()\n                    .map(name -> (\"'\" + name + \"'\"))\n                    .collect(Collectors.joining(\",\")), \"UTF-8\"));\n            stringBuilder.append(\")\");\n        } else if ((rule.getOp() == FilterOperator.EQ || rule.getOp() == FilterOperator.GTE ||\n                rule.getOp() == FilterOperator.LT || rule.getOp() == FilterOperator.LTE || rule.getOp() == FilterOperator.NE)\n                && rule.getFieldInfo().getDataType() == DataType.NUMBER) {\n            stringBuilder.append(URLEncoder.encode(rule.getValues().get(0).getValue().toString(), \"UTF-8\"));\n        } else if ((rule.getOp() == FilterOperator.EQ || rule.getOp() == FilterOperator.GTE ||\n                rule.getOp() == FilterOperator.LT || rule.getOp() == FilterOperator.LTE || rule.getOp() == FilterOperator.NE)\n                && rule.getFieldInfo().getDataType() != DataType.NUMBER) {\n            stringBuilder.append(\"'\");\n            stringBuilder.append(URLEncoder.encode(rule.getValues().get(0).getValue().toString(), \"UTF-8\"));\n            stringBuilder.append(\"'\");\n        }\n        log.info(\"where condition formed","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6781719d-85bc-4852-bf52-a45845f73742","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":116,"endLine":138,"content":"ue(newClientId));\n            ipaasProps.put(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET, SecretData.fromValue(newClientSecret));\n            ((Map) pnpConnectionsInfo.getProperties().getOrDefault(IPaasConstants.IPAAS_PROPERTIES, Maps.newHashMap())).putAll(ipaasProps);\n            pnpConnectionsInfo.setTokenDetail(null);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.REVOKED);\n        }\n\n        if(pnpConnectionsInfo.getProperties().containsKey(IPaasConstants.IPAAS_PROPERTIES)) {\n            ((Map) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).remove(IPAAS_INSTANCE_ID);\n            ((Map) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).remove(IPAAS_INSTANCE_TOKEN);\n        }\n\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionInfoDao.update(pnpConnectionsInfo);\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        MetadataEngineConfig metadataEngineConfigByConnectorType = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n        Optional<AuthDetails> authInfoOptional = metadataEngineConfigByConnectorType.getAuthInfo().stream().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3949dc63-4d56-4f44-aa63-10e413f32379","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":121,"endLine":129,"content":"ty(lookups)) {\n            if (MapUtils.isNotEmpty(externalDataRequestDto.getLookups())) {\n                externalDataRequestDto.getLookups().putAll(lookups);\n            } else {\n                externalDataRequestDto.setLookups(lookups);\n            }\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e18b8b0a-80a5-4357-bdd6-70952cb467e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":174,"endLine":204,"content":"talNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n          .jobId(ductJobMapping.getJobId()).build();\n    } catch (Exception e) {\n      log.error(\"Error while fetching data from external system FRESHDESK, Exception: \", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n    }\n\n  }\n\n  private boolean filteringPossibleOnUpdatedAt(ResourceConfig resourceConfig) {\n\n    if (Objects.isNull(resourceConfig) || Objects.isNull(resourceConfig.getDataConfig()) || Objects.isNull(resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC))) {\n      return false;\n    }\n\n    List<AuthApiAttributes> queryParamDetails = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC).getQueryParamDetails();\n    boolean filteringPossible = nullSafeList(queryParamDetails)\n        .stream()\n        .anyMatch(authApiAttributes -> UPDATED_SINCE.equalsIgnoreCase(authApiAttributes.getRequestKey()));\n\n    return filteringPossible;\n\n  }\n\n  private Map<String, GSFieldDefinition> getDateTimeFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n    Map<String, GSFieldDefinition> dateTimeFieldsMap = new HashMap<>();\n    nullSafeMap(fieldNameMetaMap)\n        .entrySet()\n        .stream()\n        .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(DataType.DATETIME.getValue()))\n        .forEach(kv -> dateTimeFieldsMap.put(kv.getValue","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83f7bb10-3931-4507-8747-9e5f36012c28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":55,"endLine":83,"content":"tility redisCacheUtility;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.DYNAMICS.equals(connectorType);\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        Object cacheValue = redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()));\n        List<Map<String, Object>> objectsList;\n        if (cacheValue == null) {\n            LOGGER.info(\"Objects not found in Cache, fetching again from source\");\n            DynamicsGainsightUtils.setDynamicsCtx(pnpConnectionsInfo);\n            List<MSDynamicsObject> msObjects = msDynamicsSchemaService.listAllObjects(new MSDynamicsObjectQuery().includeFields(\"logicalName\", \"displayName\"));\n            objectsList = convertForUI(msObjects);\n            redisCacheUtility.putValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()), objectsList, 600);\n        } else {\n            LOGGER.info(\"Objects found in cache\");\n            objectsList = (List) cacheValue;\n        }\n        return objectsList;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException{\n        return getObjectAttributes(objectName, pnpConnectionsInfo,","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d8e6803-45ba-4ba7-bf83-c03d4838c979","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CustomerGoalsLoadServiceImpl.java","startLine":59,"endLine":75,"content":"oint = endPoint + \"/csgoal/external/create\";\n\n            HttpResponseWrapper<ResponseObj> response = AdvancedHttpHelper.post(endPoint, headers, JsonUtil.toJsonString(requestDto), ResponseObj.class);\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to customer goals service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce) {\n            throw ce;\n        } catch (Exception e) {\n            log.error(\"Exception occurred while writing data to customer goals\", e);\n            throw new CaasException(\"Failed while writing to customer goals\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"586c903f-4e4d-42e2-b9e9-35183cae346f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/AhaDataSourceService.java","startLine":34,"endLine":85,"content":"  return connectorType == ConnectorType.AHA;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        return null;\n    }\n\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        return null;\n    }\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return AHA_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.ta","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a60e39d2-6066-475d-890d-ca46fe6f880c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":30,"endLine":49,"content":"ectorType) {\n        return connectorType == ConnectorType.DATABRICKS;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        if (Objects.nonNull(ductRequestDTO.getTargetSystem()) && TargetSystem.EXTERNAL.equals(ductRequestDTO.getTargetSystem())) {\n\n            if (Objects.nonNull(ductRequestDTO.getDuctDataOperation()) && DuctDataOperation.INSERT.equals(ductRequestDTO.getDuctDataOperation())) {\n                if (ductRequestDTO.getData().isEmpty()) {\n                    DuctUtils.throwError(CaasValidationCode.NO_DATA_PROVIDED.getGsEventCode(), CaasValidationCode.NO_DATA_PROVIDED.getUserText(),\n                            CaasValidationCode.NO_DATA_PROVIDED.getUserText());\n                }\n            } else if (Objects.nonNull(ductRequestDTO.getDuctDataOperation()) && DuctDataOperation.UPDATE.equals(ductRequestDTO.getDuctDataOperation())) {\n                if (ductRequestDTO.getData().isEmpty()) {\n                    DuctUtils.throwError(CaasValidationCode.NO_DATA_PROVIDED.getGsEventCode(), CaasValidationCode.NO_DATA_PROVIDED.getUserText(),\n                            CaasValidationCode.NO_DATA_PROVIDED.getUserTe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b39c5452-0468-4ba3-ab16-8e4413280675","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":179,"endLine":205,"content":"d {}\", ductJobMapping.getJobId());\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductJobMapping.getConnectionId());\n            ConnectorDataSourceService dataSourceService =\n                    connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            ductResponse = dataSourceService.createData(ductJobMapping);\n            updateDuctJobMappingStatus(ductJobMapping.getJobId(), ductResponse);\n        }catch (CaasException ex){\n            catchExceptionAndUpdateStatus(ex,ductJobMapping.getJobId());\n            throw ex;\n        } catch (Exception e) {\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            catchExceptionAndUpdateStatus(caasException,ductJobMapping.getJobId());\n            throw caasException;\n        }\n        log.info(\"Processing single data Creation for hubspot come {}\", ductJobMapping.getJobId());\n        return ductResponse;\n\n    }\n\n    private void catchExceptionAndUpdateStatus(CaasException ex, String jobId) {\n        log.info(\"Writing error into DB\");\n        try {\n            gsExternalSystemErrorMappingDao.insert(ex.getGsExternalSystemErrorMapping());\n        }catch (Exception e){\n            log.error(\"Error while writing into DB, hence skipping\", e);\n        }\n        String errorMessage = DuctUtils.getError","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1597a76a-24b7-45d8-ace8-f864eb5b6c8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":588,"endLine":611,"content":";\n        clonedHeaders.removeAll(mappedFields);\n        if (!clonedHeaders.isEmpty()) {\n            DuctUtils.populateAndInsertError(CSV_HAS_EXTRA_FIELDS_WHICH_IS_NOT_PART_OF_MAPPINGS +\n                    String.join(\",\", clonedHeaders), ductJobMapping.getJobId());\n        }\n    }\n\n    private static List<String> getHeaders(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> headers;\n        try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);) {\n            headers = csvReader.read();\n            return headers;\n        } catch (Exception e) {\n            log.error(\"Error in getHeaders\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        }\n    }\n\n    private File getFileFromS3(DuctJobMapping ductJobMapping) {\n        try {\n            log.info(\"downloaded file from location: {}\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            log.info(\"downloaded file from location: {} succeeded\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + d","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db1727e2-690d-4dc8-b048-eaee6008442b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":885,"endLine":911,"content":" objectLevelWritebackOperation.put(targetObjectName.toString(), setOperation(bulkDataLoadRequest.getOperation()));\n            properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelWritebackOperation);\n            return properties;\n        } else {\n            DuctUtils.throwError(CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getGsEventCode(),\n                    CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(),\n                    CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText());\n            return null;\n        }\n    }\n\n    private CaasFileInfo populateCaasFileInfo(String fileName, FileFormat fileFormat) {\n        CaasFileInfo caasFileInfo = new CaasFileInfo();\n        caasFileInfo.setFileName(fileName);\n        caasFileInfo.setDelimiter(fileFormat.getDelimiter());\n        caasFileInfo.setQuoteChar(fileFormat.getQuoteChar());\n        caasFileInfo.setEscapeChar(fileFormat.getEscapeChar());\n        caasFileInfo.setFileEncoding(fileFormat.getFileEncoding());\n        return caasFileInfo;\n    }\n\n    private CaasS3FileDetails populateS3Details(S3BucketDetails s3BucketDetails) {\n        CaasS3FileDetails caasS3FileDetails = new CaasS3FileDetails();\n        caasS3FileDetails.setFilesDir(s3BucketDetails.getFilesDir());\n        caasS3FileDetails.setBucketName(s3BucketDetails.getBucketName());\n        caasS3FileDetails.setBucketRegion(s3BucketDetails.getBucketRegion());\n//        caasS3FileDetails","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eaeb7adb-6c97-4286-b5a0-ab2a119f6220","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":53,"endLine":71,"content":" GainsightHubspotFetchProcessor gainsightHubspotFetchProcessor;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.HUBSPOT.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode sourceFields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n        Map fieldDefinition;\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        String objectLabel = objectDefinition.get(LABEL).toString();\n        objectDefinition.put(EXPRESSION_FOR_REQUIRED_FIELDS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_REQUIRED_FIELDS));\n        objectDefinition.put(EXPRESSION_FOR_UPSERT_KEYS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpress","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ffad9de-a19a-4123-bae1-03e76bc06f87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightEcosystemFetchProcessor.java","startLine":1,"endLine":19,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport org.apache.http.HttpResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightEcosystemFetchProcessor {\n\n    /**\n     *\n     * @param connection\n     * @return\n     */\n    List<ObjectDefinition> getListOfAvailableEntities(String connection);\n\n    HttpResponse getSynchronizedData(String entityName, List<String> projections, String apiKey, Map<String, String> queryParams);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59f3ad2b-4f0c-48a8-b63c-cfa2858f240a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":26,"endLine":57,"content":"rt com.gainsight.integration.connector.sfdc.bean.SFDCMetadataTypeEnum;\nimport com.gainsight.integration.connector.sfdc.service.SalesforceMetadataService;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightPrecondition;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_UPSERT_KEYS;\nimport static com.gainsight.duct.constants.DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_CODE_NULL;\nimport static com.gainsight.duct.constants.DuctErrorConstants.EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL;\n\n@Order(800)\n@Service\npublic class SalesforceCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SalesforceCaasMetadataServiceImpl.class);\n\n    private static","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"100efa73-f84f-4512-9894-ca05839c39dd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":94,"endLine":121,"content":"encrypt(SHARED_SECRET).getValue()));\n        FeatureConfigCRUDService featureConfigEvaluationService = new FeatureConfigCRUDServiceImpl().withClientConfig(clientConfig);\n        try {\n           featureConfigDTO =  featureConfigEvaluationService.getFeature(featureName);\n        } catch (Exception e){\n            LOGGER.error(\"Exception while fetching feature from feature toggle service\", e);\n            return featureConfigDTO;\n        }\n        return featureConfigDTO;\n    }\n    public static boolean updateFeature(String featureId, FeatureConfigDTO input){\n        ClientConfig clientConfig = new ClientConfig()\n                .withHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestInfo())\n                        .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n        FeatureConfigCRUDService featureConfigEvaluationService = new FeatureConfigCRUDServiceImpl().withClientConfig(clientConfig);\n        try {\n            featureConfigEvaluationService.updateFeature(featureId,input);\n            LOGGER.info(\"Updated feature using feature toggle service\");\n        } catch (Exception e){\n            LOGGER.error(\"Exception updating feature from feature toggle service\", e);\n            return false;\n        }\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9f8516f-69ad-4edd-8846-f29fa6c175c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/SuccessPlanLoadServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.dto.ExternalDataRequestDto;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.*;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class SuccessPlanLoadServiceImpl implements GainsightLoadService{\n    @Override\n    public GSModule getType() {\n        return GSModule.SUCCESS_PLAN;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return \"CTA_Group\".equalsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f285e75-cafd-4823-a753-6a7c11bf8a0f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":350,"endLine":375,"content":"getOutputS3Path() != null)\n            finalOutputFile = DuctS3Utility.getSignedURL(ductJobMapping.getOutputS3Path()).toString();\n        if (ductJobMapping.isBulk())\n            finalOutputFile = ductJobMapping.getExternalSuccessFileLocation();\n        return DuctResponseDTO.builder()\n                .jobId(ductJobMapping.getJobId())\n                .fields(ductJobMapping.getFields())\n                .connectionId(ductJobMapping.getConnectionId())\n                .resourceName(ductJobMapping.getResourceName())\n                .successFilePath(finalOutputFile)\n                .status(populateExecutionStatus(ductJobMapping))\n                .successCount(ductJobMapping.getSuccessRecords())\n                .failedCount(ductJobMapping.getFailedRecords())\n                .errorFilePath(ductJobMapping.getExternalErrorFileLocation())\n                .sourceErrorResponseFile(ductJobMapping.getSourceResponseFile())\n                .totalNumberOfRecords(ductJobMapping.getTotalNumberOfRecords())\n                .externalSystemResponse(ductJobMapping.getExternalSystemResponse())\n                .errorMessage(ductJobMapping.getExternalErrorMessage())\n                .errorFilePathS3Link(ductJobMapping.getExternalErrorFileLocationS3Link())\n                .build();\n    }\n\n    private DuctJobMapping createDuctJobMappingForBulkWrite(DuctRequestDTO ductRequestDTO) throws CaasException {\n        return DuctJobMapping.builder()\n                .jobId(UUID.randomUUID().toString())\n             ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"23d59180-75bb-4ea8-9472-b7299ee28e06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/RecordTypeInfo.java","startLine":1,"endLine":52,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n\npublic class RecordTypeInfo implements Serializable {\n    private String name;\n    private Boolean available;\n    private String recordTypeId;\n    private Boolean defaultRecordTypeMapping;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Boolean getAvailable() {\n        return available;\n    }\n\n    public void setAvailable(Boolean available) {\n        this.available = available;\n    }\n\n    public String getRecordTypeId() {\n        return recordTypeId;\n    }\n\n    public void setRecordTypeId(String recordTypeId) {\n        this.recordTypeId = recordTypeId;\n    }\n\n    public Boolean getDefaultRecordTypeMapping() {\n        return defaultRecordTypeMapping;\n    }\n\n    public void setDefaultRecordTypeMapping(Boolean defaultRecordTypeMapping) {\n        this.defaultRecordTypeMapping = defaultRecordTypeMapping;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d69b074-c721-4dd0-918e-071f2bef4010","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":113,"endLine":130,"content":"nition.getFieldName()));\n                }\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupported(Criteria criteria, GSFieldDefinition fieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fop = criteria.getOperatorType().getFilterOperator();\n        String type = fieldDefinition.getDataType();\n        if (!isSync) {\n            Map<DataType, List<String>> dataTypeToAllowedFilterOps = caasConnectorConfig.getDataTypeMappings().stream().collect(Collectors.toMap(DataTypeMappings::getGainsightDatatype, DataTypeMappings::getAllowedFilterOperators));\n            return dataTypeToAllowedFilterOps.get(DataType.forValue(type)).contains(fop);\n        } else {\n            Map<DataType, List<String>> dataTypeToExtFilterOps = caasConnectorConfig.getDataTypeMappings().stream().collect(Collectors.toMap(DataTypeMappings::getGainsightDatatype, DataTypeMappings::getAllowedExternalFilterOperators));\n            return dataTypeToExtFilterOps.get(DataType.forValue(type)).contains(fop);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbe44f92-2a6c-4563-9c95-f937f7ea5221","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":109,"endLine":130,"content":"e())\n              res.remove(res.size()-1);\n            Map data = new HashMap();\n            data.put(RESULTS, res);\n            return DuctResponse.builder().totalNumberOfRecords(res.size()).externalSystemResponse(data).nextPageToken(nextPageToken).build();\n        } catch (Exception e) {\n            log.error(\"Exception occurred while fetching data {}\",e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    private String getQuery(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> fieldNameToDataTypeMap, DuctJobMapping ductJobMapping, int limit, int page,String whereClause) throws Exception {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.BIGQUERY);\n        String timestampFormate = caasConnectorConfig.getExternalJarAdditionalProperties().containsKey(TIMESTAMP_FORMAT)?\n                caasConnectorConfig.getExternalJarAdditionalProperties().get(TIMESTAMP_FORMAT).toString():\"%Y-%m-%d %H:%M:%S:%Ez\";\n        String dateTimeFormate = caasConnectorConfig.getExternalJarAdditionalProperties().containsKey(DATETIME_FORMAT)?\n                caasConnectorConfig.getExternalJarAdditionalProperties().get(DATETIME_FORMAT).t","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5097a36-fdd7-4cc6-8f25-bda43d0c5f60","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.data;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\n\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.Operators;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gains","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d7251e1-388b-4f86-99b6-b1d1d26aea0f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":242,"endLine":267,"content":"urceService =\n                    connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n            ductResponse = dataSourceService.uploadBulkData(ductJobMapping);\n            updateDuctJobMappingStatusForBulk(ductJobMapping.getJobId(), ductResponse);\n        } catch (CaasException ex){\n            catchExceptionAndUpdateStatus(ex,ductJobMapping.getJobId());\n            throw ex;\n        } catch (Exception e) {\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            catchExceptionAndUpdateStatus(caasException,ductJobMapping.getJobId());\n            throw caasException;\n        }\n        return ductResponse;\n    }\n\n\n    @Override\n    public List<ObjectDefinition> getObject(String connectionId) throws CaasException{\n        if(StringUtils.isNotEmpty(connectionId) && !connectionId.equalsIgnoreCase(\"MDA\")) {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            Map<String, Object> queryParams = Maps.newHashMap();\n            queryParams.put(\"fetchAll\", String.valueOf(true));\n            try {\n                CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n                Lis","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4876e275-96db-43cb-8187-59ac5a447b88","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/DuctSingleCEQueryBuilder.java","startLine":90,"endLine":96,"content":";\n            stringBuilder.append(URLEncoder.encode(rule.getValues().get(0).getValue().toString(), \"UTF-8\"));\n            stringBuilder.append(\"'\");\n        }\n        log.info(\"where condition formed for this rule is {}\", stringBuilder.toString());\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d2578ab-c2e5-4e51-9bf2-41577e75c9ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":71,"endLine":97,"content":"ithHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestInfo())\n                        .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n        FeatureConfigCRUDService featureConfigEvaluationService = new FeatureConfigCRUDServiceImpl().withClientConfig(clientConfig);\n        try {\n            featureConfigEvaluationService.updateVariation(featureId,variationId,input);\n            LOGGER.info(\"Updated feature variation using feature toggle service\");\n        } catch (Exception e){\n            LOGGER.error(\"Exception updating feature variation from feature toggle service\", e);\n            return false;\n        }\n        return true;\n    }\n\n    public static FeatureConfigDTO getFeature(String featureName){\n        FeatureConfigDTO featureConfigDTO = null;\n        ClientConfig clientConfig = new ClientConfig()\n                .withHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestInfo())\n                        .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n        FeatureConfigCRUDService featureConfigEvaluationService = new FeatureConfigCRUDServiceImpl().withClientConfig(clientConfig);\n        try {\n           featu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1e17e80f-c67d-419d-8927-b2febbf0bfa5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":91,"endLine":123,"content":".getFieldInfo().getJsonPath() + \"`\");\n                }\n            } else {\n                clause = replaceLeft(clause, \"\\\"\" + rule.getFieldInfo().getJsonPath() + \"\\\"\" );\n            }\n            clause = replaceRight(clause, StringUtils.join(rule.getValues().stream().map(value -> {\n                Object val = value.getValue();\n                val = handleValue(val, rule.getOp());\n                if (ENCLOSE_IN_SINGLE_QUOTE.contains(value.getDataType())) {\n                    val = \"'\" + val + \"'\";\n                } else if (ConnectorType.DATABRICKS.equals(connectorType) && (DATABRICKS_ENCLOSE_SINGLE_QUOTE.contains(rule.getOp()))) {\n                    val = \"'\" + val + \"'\";\n                }\n                return val;\n            }).collect(Collectors.toList()), \",\"));\n            stringBuilder.append(clause);\n            whereClause.add(stringBuilder.toString());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            rule.getRules().forEach(childRule -> childRules.addAll(buildRule(childRule, connectorType, ntzFields)));\n            whereClause.add(wrapRoundBrackets(\n                    Joiner.on(rule.getCondition().getSpaceWrappedFilterCondition()).join(childRules)));\n        }\n        return whereClause;\n    }\n\n  private static String getSQLClause(ConnectorType connectorType, FilterRule rule) {\n    if (Objects.isNull(connectorType)) {\n      return null;\n    }\n    switch (connectorType) {\n      case BIGQUERY:\n        return Operators.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9bdec839-2bbb-4938-8c78-f48fe01bcc28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":244,"endLine":279,"content":" public void setNextPage(String nextPage) {\n        this.nextPage = nextPage;\n    }\n\n    public FilterRule getFilterRule() {\n        return filterRule;\n    }\n\n    public void setFilterRule(FilterRule filterRule) {\n        this.filterRule = filterRule;\n    }\n\n    public Map<String, List<PicklistOption>> getPicklistOptionMap() {\n        return picklistOptionMap;\n    }\n\n    public void setPicklistOptionMap(Map<String, List<PicklistOption>> picklistOptionMap) {\n        this.picklistOptionMap = picklistOptionMap;\n    }\n\n    public String getOrderByInfoField() {\n        return orderByInfoField;\n    }\n\n    public void setOrderByInfoField(String orderByInfoField) {\n        this.orderByInfoField = orderByInfoField;\n    }\n\n    public String getQueryParamForDataFetch() {\n        return queryParamForDataFetch;\n    }\n\n    public void setQueryParamForDataFetch(String queryParamForDataFetch) {\n        this.queryParamForDataFetch = queryParamForDataFetch;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"044c90c4-49a1-42c9-81c9-cdd875c32789","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":53,"endLine":77,"content":"ServiceImpl();\n\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return ConnectorType.ZENDESK.equals(connectorType) && !isIpaas;\n    }\n\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping,int pageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        try {\n            MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"846d5efa-b2f4-4083-a75d-19cfa9e5464c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":753,"endLine":780,"content":": \" + ductJobMapping.getSourceResponseFile());\n        }\n\n        log.info(\"Return response to Rules from CAAS {}\", bulkActionResponse);\n        return bulkActionResponse;\n    }\n\n    @Override\n    public QueryAPIResponseBean getSynchronizedDataFromExternalSystem(DuctRequestDTO ductRequestDTO, boolean useEngine) throws\n            CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n        validateMappings(ductRequestDTO);\n\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> objectDefinitionMap = null;\n        objectDefinitionMap = service.getObjectAttributes(ductRequestDTO.getResourceName(), pnpConnectionsInfo,\n                ductRequestDTO.isResolvePickListOptions(), ductJobMapping);\n        ductValidationService.validateRequest(ductRequestDTO, pnpConnectionsInfo, objectDefinitionMap);\n        ductJobMapping.setConnectorType(pnpConnectionsInfo.getConnectionType());\n\n        return getSynchronizedQueryApiResponse(ductJobMapping, pnpConnectionsInfo, objectDefinitionMap.get(ductRequestDTO.getResourceName()), useEngine);\n    }\n\n    @Override\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"440b102d-7e62-4a14-bd0c-1770bfc882ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctJobMapping.java","startLine":141,"endLine":164,"content":"' +\n                \", syncDirection=\" + syncDirection +\n                \", connectionId='\" + connectionId + '\\'' +\n                \", resourceName='\" + resourceName + '\\'' +\n                \", totalCount=\" + totalCount +\n                \", successCount=\" + successCount +\n                \", fields=\" + fields +\n                \", aliasFieldsMappings=\" + aliasFieldsMappings +\n                \", filters=\" + filters +\n                \", location='\" + location + '\\'' +\n                \", callbackUrl='\" + callbackUrl + '\\'' +\n                \", properties=\" + properties +\n                \", filteredDateField='\" + filteredDateField + '\\'' +\n                \", startTime=\" + startTime +\n                \", endTime=\" + endTime +\n                \", ductStatus=\" + ductStatus +\n                \", targetSystem=\" + targetSystem +\n                \",query=\" + query +\n                \", totalNumberOfRecords=\" + totalNumberOfRecords +\n                \", successRecords=\" + successRecords +\n                \", failedRecords=\" + failedRecords +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"76f85a0f-b2f7-43ab-be80-b054c6a8ab83","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":52,"endLine":78,"content":"Object = vds.getAsJsonObject();\n\n                            for (GSFieldDefinition fieldInfo : projections) {\n                                String jsonPath = fieldInfo.getDbName();\n                                String[] path = jsonPath.split(\"\\\\.\");\n\n                                if (path[0].equalsIgnoreCase(VDS)) {\n                                    Map<String, Object> vdsKeyVal = fetchFieldValue(fieldInfo, vdsObject, ArrayUtils.subarray(path, 1, path.length));\n                                    if (record.containsKey(VDS)) {\n                                        Map<String, Object> tempMap = (Map<String, Object>) record.get(VDS);\n                                        tempMap.putAll(vdsKeyVal);\n                                        record.put(VDS, tempMap);\n                                    } else {\n                                        record.put(VDS, vdsKeyVal);\n                                    }\n                                } else {\n                                    insertOrAppend(fieldInfo, documentObject, path, record);\n                                }\n                            }\n                            //parseDateTimeValues(record, projections);\n                            records.add(record);\n                        });\n                    }\n                    //no vds entries\n                    else {\n                        Map<String, Object> record = new HashMap<>();\n                        for (GSFieldDefinition fieldInfo : pro","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"73224f95-94aa-4ae0-807b-6fb5728b0975","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/AbstractAuthTokenGenStrategyImpl.java","startLine":38,"endLine":71,"content":"fo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n        requestInfo.setUserAuthInfo(RequestContextProvider.getUserAuthInfo());\n\n        AuthorizationDTO authorizationDTO = new AuthorizationDTO();\n        authorizationDTO.setSkipAuthorization(true);\n        requestInfo.setUserScope(authorizationDTO);\n\n        return requestInfo;\n    }\n\n    @Override\n    public void removeAuthToken() {\n        RequestInfo info = RequestContextProvider.getRequestInfo();\n        if (info.getTokenType() == getAuthTokenType()) {\n            userSessionDAO.removeAuthToken(info.getAuthToken());\n        } else {\n            LOGGER.error(getTokenTypeErrorMessage());\n            throw new SystemException(getTokenTypeErrorMessage(), SC_UNAUTHORIZED);\n        }\n    }\n\n    @Override\n    public void expireToken() {\n        RequestInfo info = RequestContextProvider.getRequestInfo();\n        if (info.getTokenType() == getAuthTokenType()) {\n            userSessionDAO.expireAuthToken(info);\n        } else {\n            LOGGER.error(getTokenTypeErrorMessage());\n            throw new SystemException(getTokenTypeErrorMessage(), SC_UNAUTHORIZED);\n        }\n    }\n\n    protected abstract String getTokenTypeErrorMessage();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e49e0e58-6918-4a06-9e50-b9c4faa006d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/exception/externaltask/ExternalTaskErrorParser.java","startLine":51,"endLine":57,"content":"OR_MESSAGE_FROM_DP.getMessage());\n            map.put(MESSAGE,\"No error message from Data Processing\");\n        }\n\n        return map;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0839108a-10b2-4d91-ae74-2e0db8d8a58d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":192,"endLine":211,"content":"mdb_ci_service\\\",\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"sc_cat_item\\\":[\\\"sys_metadata\\\"],\\\"cmn_department\\\":[],\\\"core_company\\\":[],\\\"cmdb_ci_environment\\\":[\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"ast_contract\\\":[],\\\"change_request\\\":[\\\"task\\\"],\\\"sn_customerservice_team_member\\\":[],\\\"alm_asset\\\":[],\\\"asmt_metric_type\\\":[\\\"sys_metadata\\\"],\\\"asmt_assessment_instance_question\\\":[],\\\"cmdb_ci_service_discovered\\\":[\\\"cmdb_ci_service_auto\\\",\\\"cmdb_ci_service\\\",\\\"cmdb_ci\\\",\\\"cmdb\\\"],\\\"asmt_metric_category\\\":[\\\"sys_metadata\\\"],\\\"sys_documentation\\\":[\\\"sys_metadata\\\"]}\n\n             try {\n             superClassInfo = MAPPER.readValue(String.valueOf(cmd.getOptionValue(\"super_class_info\")), Map.class);\n             } catch (IOException e) {\n             LOGGER.error(\"Error in populating super_class_info {}\", e.getMessage(), e);\n             } catch (Exception e) {\n             LOGGER.error(\"Error in populating super_class_info {}\", e.getMessage(), e);\n             }\n             */\n\n            if (tenantToObjectMap != null && !tenantToObjectMap.isEmpty()) {\n                LOGGER.info(\"starting in tenantToObjectMap\");\n                for (Map.Entry<String, List<String>> entry : tenantToObjectMap.entrySet()) {\n                    String tenantId = entry.getKey();\n                    LOGGER.info(\"String for tenant: {}\", tenantId);\n                    try {\n                        boolean continueIt = UCCommonUtility.initRequestContextSuccessfully(tenantId);\n                        if (!continueIt) {\n                   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9d74ee9a-5cac-44db-83f3-181cf111c6a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/ExternalActivityRequestDto.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.beans.dto;\nimport com.gainsight.commons.gsobjects.ImportLookupLite;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by psingh\n */\n@Getter\n@Setter\n@ToString\npublic class ExternalActivityRequestDto implements Serializable {\n    private static final long serialVersionUID = 3707022932617031212L;\n    private List<Map<String, Object>> records;\n    private Map<String, ImportLookupLite> lookups;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0fef3c9f-962d-40fe-986c-5284f0631f87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/Redis/CaasRedisTemplateImpl.java","startLine":24,"endLine":59,"content":"ew RedisTemplate<>();\n        redisTemplate = LoggingInterceptor.intercept(\"RedisCache\", redisTemplate);\n        redisTemplate.setConnectionFactory(getJedisConnectionFactory());\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n    private JedisConnectionFactory getJedisConnectionFactory() {\n        if (jedisConnectionFactory == null) {\n            synchronized (LOCK) {\n                if (jedisConnectionFactory == null) {\n                    JedisShardInfo shardInfo = new JedisShardInfo(HOST, PORT);\n                    shardInfo.setPassword(PASSWORD);\n                    shardInfo.setTimeout(REDIS_TIMEOUT);\n                    JedisConnectionFactory factory = new JedisConnectionFactory(shardInfo);\n                    factory.setHostName(HOST);\n                    factory.setPort(PORT);\n                    factory.setPassword(PASSWORD);\n                    factory.setTimeout(REDIS_TIMEOUT);\n                    factory.setUsePool(true);\n                    factory.afterPropertiesSet();\n                    addShutdownHook(factory);\n                    jedisConnectionFactory = factory;\n                }\n            }\n        }\n        return jedisConnectionFactory;\n    }\n\n    private void addShutdownHook(final JedisConnectionFactory factory) {\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                if (factory != null) {\n                    try {\n                        facto","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2910e96-29ba-450a-92c1-8086dddd85d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":124,"endLine":140,"content":"us.REVOKED, ConnectionStatus.REVOKED_AND_LINKED,\n                ConnectionStatus.INIT, null));\n        for (ConnectionStatus connectionStatus : connectionStatuses) {\n            passed = false;\n            try {\n                when(pnpConnectionInfoDao.findByConnectionId(any()))\n                        .thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.REVOKED));\n                ductJobMappingService.synchronousInsert(createDuctRequestDTO(true, new DateTime(), 5, false));\n            } catch (CaasException ex) {\n                gsExternalSystemErrorMapping = ex.getGsExternalSystemErrorMapping();\n                passed = true;\n            } finally {\n                assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated for status \" + connectionStatus);\n                assertEquals(CaasValidationCode.CONNECTION_NOT_AUTHORIZED.getGsEventCode(), gsExternalSystemErrorMapping.getGsErrorCode(), \" Wrong Error code passed in exception when connection status is \" + connectionStatus);\n                assertEquals(CaasValidationCode.CONNECTION_NOT_AUTHORIZED.getUserText(), gsExternalSystemErrorMapping.getGsErrorMessage(), \"Wrong error message passed in exception when connection status is \" + connectionStatus);\n                assertNull(gsExternalSystemErrorMapping.getExceptionStackTrace(), \"Stack trace should be null when connection status is \" + connectionStatus);\n                as","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"062a64d1-d5c6-42db-b06e-3d8e9ce77d85","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":222,"endLine":241,"content":"pnpConnectionsInfo, token, oldConnectionStatus);\n//        linkCRMConnection(pnpConnectionsInfo);\n                pnpConnectionInfoDao.update(pnpConnectionsInfo);\n            } catch (SystemException e) {\n                LOGGER.error(String.format(\"%s Authorization Failed due to %s\", accountType.getDisplayName(), e.getMessage()), RequestContextProvider.getTenantId(), e);\n                throw new SystemException(accountType.getDisplayName() + CaasValidationCode.AUTHORIZATION_FAILED.getUserText() + e.getMessage(), null, SC_BAD_REQUEST);\n            }\n        }\n    }\n\n\n    private void authorizeConnection(OAuthDetail oAuthDetail, PNPConnectionsInfo pnpConnectionsInfo, Token token, ConnectionStatus oldConnectionStatus) {\n        if (pnpConnectionsInfo.getConnectionType() == ConnectorType.SFDC) {\n            if (pnpConnectionsInfo.getProperties().containsKey(UCConstants.GSIntegration.SFDC_ORG_ID)) {\n                String existingOrgId = pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.SFDC_ORG_ID).toString();\n                pnpConnectionsInfo.setConnectionStatus(getNewConnectionStatus(oldConnectionStatus));\n                pnpConnectionsInfo.setTokenDetail(getTokenDetail(oAuthDetail, token.getRawResponse()));\n                setSFDCConnectionProperties(token.getRawResponse(), pnpConnectionsInfo);\n                populateConnectionProperties(pnpConnectionsInfo.getTokenDetail(), pnpConnectionsInfo.getProperties());\n                pnpConnectionsInfo.getProperties(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20108f24-c12a-4888-b266-1c5031ca6f2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":62,"endLine":79,"content":" boolean isStandardObject) throws CaasException {\n        GSIntegrationResponse response = new GSIntegrationResponse();\n        try {\n            LOGGER.info(\"Api being hit for fetching metadata for object : {} , api : {}\", entityName, api);\n            GainsightPrecondition.assertNotNull(connectionId, UCValidationCode.PNP_INVALID_INPUT, \"Invalid input\", HttpStatus.SC_BAD_REQUEST);\n            GainsightPrecondition.assertNotNull(entityName, UCValidationCode.PNP_INVALID_INPUT, \"Invalid input\", HttpStatus.SC_BAD_REQUEST);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing ConnectionInfo\", HttpStatus.SC_BAD_REQUEST);\n            List<GainsightHubspotFieldDescriptionV3> hubspotEntityProperties = null;\n            GainsightHubspotSchema gainsightHubspotSchemaBean = null;\n            if (entityName.equals(GSHubSpotEntityEnum.OWNER.name())) {\n                gainsightHubspotSchemaBean = new GainsightHubspotSchema();\n                hubspotEntityProperties = handleOwnerProeprties(pnpConnectionsInfo, true);\n                gainsightHubspotSchemaBean.setProperties(hubspotEntityProperties);\n            } else {\n                GainsightHubspotChannelFactory connectionFactory = new GainsightHubspotChannelFactory();\n                HttpResponse httpResponse = connectionFactory.getChannelServiceWithOAuth20(\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e60b0e49-7f0e-4107-b496-8926e0d69e34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":214,"endLine":229,"content":"me as display name for those fields\n            fieldDefinition.put(LABEL, ObjectUtils.isNotEmpty(field.get(VENDOR_DISPLAY_NAME)) ? field.get(VENDOR_DISPLAY_NAME) : field.get(PATH));\n\n            boolean isFieldSupported = true;\n            dataTypeMappingsForField = null;\n            //set datatype\n            if (field.get(VENDOR_NATIVE_TYPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(VENDOR_NATIVE_TYPE).asText()))) {\n                dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(VENDOR_NATIVE_TYPE).asText())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                metaProperties.put(VENDOR_NATIVE_TYPE, field.get(VENDOR_NATIVE_TYPE).asText());\n                metaProperties.put(CE_TYPE.toUpperCase(), field.get(TYPE).asText());\n                if (complexTypeMappings.containsKey(field.get(VENDOR_NATIVE_TYPE).asText()))\n                    metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.get(VENDOR_NATIVE_TYPE).asText()).getValue());\n                meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                // TODO: Specific analysis for external filters to be performed for all connectors\n//                meta.put(\"externallyFilterable\", !dataTypeMappingsForField.getAllowedEx","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56a01a67-467a-46c6-950b-b89b4abd4e17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":111,"endLine":135,"content":"CONTACT\");\n                StringBuilder errorMessageBuilder = new StringBuilder().append(MANDATORY_REQUIRED_KEYS_NOT_PRESENT).append(\" : \")\n                        .append(\"CONTACT\" + \":\")\n                        .append(getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForRequiredFields(), resourceDefinition))\n                        .append(\".\");\n                assertEquals(errorMessageBuilder.toString(), caex.getGsExternalSystemErrorMapping().getMessage());\n            }\n        }\n    }\n\n    @Test\n    public void test_validateMapping_failed() {\n        boolean passed = true;\n        CaasException caex = null;\n        Map<String, ObjectDefinition> objectDefinition = null;\n        try {\n            objectDefinition = mockAttributesHubspotContact();\n            Map<String, String> objectLevelOperation = new HashMap<>();\n            objectLevelOperation.put(\"CONTACT\", \"UPDATE\");\n            when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(createConnectionInfo());\n            when(caasMetadataFactory.getService(ConnectorType.HUBSPOT,false)).thenReturn(hubspotCaasMetadataService);\n            when(hubspotCaasMetadataService.getObjectAttributes(any(String.class), any(PNPConnectionsInfo.class))).thenReturn(objectDefinition);\n            when(caasConnectorConfigService.getConnectorConfig(any(ConnectorType.class))).thenAnswer((Answer<CaasConnectorConfig>) invocation -> createConnectorConfig(invocation.getArgument(0)));\n\n            hubspotBulkWriteBack","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"40e1fb1a-01bc-46c0-b142-ffb14c5a5c82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":286,"endLine":303,"content":"nnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        File file = validateDatabricksWriteBackPayload(ductJobMapping, pnpConnectionsInfo);\n\n        List<File> splitFiles = new ArrayList<>();\n        if (ductJobMapping.isRules()) {\n            GainsightPrecondition.assertTrue((null != ductJobMapping.getCaasS3FileDetails() && StringUtils.isNotEmpty(ductJobMapping.getCaasS3FileDetails().getFilesDir()))\n                    , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n        }\n        Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n        Map.Entry<String, Object> objectLevelOperation = requestObjectLevelWritebackOperation.entrySet().iterator().next();\n        Character quoteChar = isNullOrEmpty(ductJobMapping.getCaasFileInfo().getQuoteChar()) ? '\\\"'\n                : ductJobMapping.getCaasFileInfo().getQuoteChar();\n        Character escapeChar = isNullOrEmpty(ductJobMapping.getCaasFileInfo().getEscapeChar()) ? '\\\"'\n                : ductJobMapping.getCaasFileInfo().getEscapeChar();\n        Character seperatorChar = isNullOrEmpty(ductJobMapping.getCaasFileInfo().getDelimiter()) ? ','\n                : ductJobMapping.getCaasFileInfo().getDelimiter();\n\n        if (fileSizeInMBs(file) > DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.databr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"311dd252-f71c-4299-9815-a8f5406ff4ba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SnowflakeCaasMetadataServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.processor.SnowflakeMetadataService;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Order(900)\n@Service\npublic class SnowflakeCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n    @Autowired\n    private SnowflakeMetadataService snowflakeMetadataService;\n\n    @Autowired\n    private Ca","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8106b7b-7967-4142-82fa-7a14a12efc7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":96,"endLine":115,"content":", objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, objectDefinition);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n    }\n\n    private Map<String, Object> constructFieldMap(GainsightBiqQueryFieldDescription fieldDetails, String objectName, CaasConnectorConfig connectorConfig) {\n        Map<String, Object> retMap = new HashMap<>();\n        Map<String, Object> meta = Maps.newHashMap();\n        Map<String, Object> metaProperties = new HashMap<>();\n        String fieldDataType = fieldDetails.getType().toLowerCase();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n        retMap.put(FIELD_NAME, String.valueOf(fieldDetails.getName()));\n        retMap.put(DB_NAME, String.valueOf(fieldDetails.getName()));\n        retMap.put(LABEL, String.valueOf(fieldDetails.getLabel()));\n        retMap.put(OBJECT_LABEL, objectName);\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldDataType))) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b49cbfcf-adfd-49a8-842d-644fdc577f4d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":282,"endLine":304,"content":"sageMap.get(CODE), errorMessageMap.get(MESSAGE), ConnectorType.ZOOM);\n                    else\n                        DuctUtils.throwError(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsEventCode(), CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(), \"Error in fetching data from source. Error : \" + errorMessage);\n                } catch (CaasException cex) {\n                    throw cex;\n                } catch (Exception e) {\n                    log.error(\"Error in fetching synchronized data\", e);\n                    DuctUtils.throwError(CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getGsEventCode(), CaasValidationCode.EXTERNAL_SYSTEM_ERROR_DURING_FETCH.getUserText(), \"Error in fetching data from source. Error : \" + errorMessage);\n                }\n            }\n            externalSystemResponse = extractResponse(httpResponse);\n        } catch (CaasException cex) {\n            log.error(\"Error in fetching synchronized data\", cex);\n            throw cex;\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return externalSystemResponse;\n    }\n\n    private void constructZoomDownloadUrl(Map<String, Object> externalSystemResponse) throws CaasException {\n        if (null != externalSystemResponse.get(DOWNLOAD_AC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20cb3577-763b-4e06-9517-691994e49902","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":325,"endLine":344,"content":"ConnectorType.getResources()\n                        .stream().filter(resource -> resource.isDefaultResource()).findFirst();\n                if (!optionalDefaultResourceConfig.isPresent() || !optionalDefaultResourceConfig.get().getResourceName().equals(\"{objectName}\")) {\n                    DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(),\n                            CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n                }\n                resourceConfig = optionalDefaultResourceConfig.get();\n                resourceConfig.setResourceName(objectName);\n            } else {\n                resourceConfig = first.get();\n            }\n\n            if (null == resourceConfig) {\n                DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n            }\n\n            List<ApiConfigAttributes> apiConfigAttributes = GainsightCollectionUtils.nullSafeList(resourceConfig.getMetadataConfig().getMetadataApi());\n            JsonNode nativeMetadataFromCE = getNativeMetadataFromCE(objectName, pnpConnectionsInfo);\n            OMDConverterBaseService omdConverterFactoryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType());\n            Map<String, Object> objectDefinition = omdConverterFactoryService.addObjectDetailsToOMDFormat(objectNam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ebdadd15-9296-492f-b67a-62ec21f1a8b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZuoraV2ConnectionService.java","startLine":60,"endLine":91,"content":"pConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(pnpConnectionInput.getPnpConnectionsInfo().getAuthorizationType());\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n        pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n        if (pnpConnectionsInfo.isIpaasConnection()) {\n            // TODO : Delete CE Instance\n        }\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        return pnpConnectionsInfo;\n    }\n\n    @Override\n    public String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo revokeAuthorization() {\n        return null;\n    }\n\n    @Override\n    public PNPConnectionsInfo deleteConnection() {\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12fad7f3-8f2f-4ec8-9c7f-6b7fbca6e962","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctFilterCondition.java","startLine":36,"endLine":47,"content":"tFilterCondition)FILTER_CONDITION_MAP.get(filterCondition.toLowerCase());\n            Precondition.isNotNull(resolvedFilterCondition, ValidationCode.GENERIC_SYSTEM_ERROR, DHUtils.msg(\"Invalid filter condition: {}\", new Object[]{filterCondition}));\n            return resolvedFilterCondition;\n        }\n    }\n\n    @JsonValue\n    public String getFilterCondition() {\n        return this.ductFilterCondition;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9311a6f0-a8ea-49bf-8b44-3f7269dffbee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":865,"endLine":889,"content":"etFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            log.info(\"downloaded file from location: {} succeeded\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            return file;\n        } catch (Exception e) {\n            log.error(\"Error in downloading the file\");\n            throw e;\n        }\n    }\n\n    private void validateMappedFieldsAndCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Collectors.toList());\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<String> clonedHeaders = new ArrayList<>(headers);\n\n        mappedFields.removeAll(clonedHeaders);\n        if (!mappedFields.isEmpty()) {\n            DuctUtils.populateAndInsertError(String.format(DuctErrorConstants.MAPPED_FIELDS_NOT_PRESENT_IN_CSV,\n                    String.join(\", \", mappedFields)), ductJobMapping.getJobId());\n        }\n    }\n\n    private static List<String> getHeaders(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<String> headers;\n        try (CsvListReader csvReader = new CsvListReader(new Fil","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9bf53e8-f6c1-4b7d-a36d-c7a38e972155","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":137,"endLine":156,"content":"ata(), pnpConnectionsInfo, objectName);\n        processSystemFieldsIfRequired(metadataEngineConfig, pnpConnectionsInfo, objectName, objectDefinitionMap);\n        return objectDefinitionMap;\n      }\n      MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n\n      // Fetch and convert source metadata to OMD if available\n      Map<String, Object> objectDefinition = fetchMetadataFromSource(metadataEngineConfig, pnpConnectionsInfo, objectName);\n      log.info(\"Metadata fetched from source for connectionId:{} and objectName:{} with metadata present: {}\", connectionId, objectName, MapUtils.isNotEmpty(objectDefinition));\n\n      Map<String, ObjectDefinition> metadata = Collections.singletonMap(objectName, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n      if (metadataByConnectionIdAndObjectName != null) {\n\n        fieldsSet.addAll(metadata.get(objectName).getFields());\n        fieldsSet.addAll(metadataByConnectionIdAndObjectName.getMetadata().get(objectName).getFields());\n        // adding the promoted fields to the existing metadata which we recive from source metadatapi(generated metadata from data api is not included)\n        metadata.get(objectName).setFields(fieldsSet.stream().collect(Collectors.toList()));\n        metadataByConnectionIdAndObjectName.setMetadata(metadata);\n        metadataCacheDao.update(metadataByConnectionIdAndObjectName);\n      } ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5cee88ff-ebb3-4e76-9212-8de151614d68","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/MetadataCommonUtil.java","startLine":30,"endLine":52,"content":" Map<String, Object> tempOverrideAttribute;\n        for (CaasObjectAttributesConfig configAttribute : configAttributes) {\n            overrideAttribute = GainsightCollectionUtils.nullSafeList(configAttribute.getOverrideAttribute());\n            for (Map<String, Object> stringObjectMap : overrideAttribute) {\n                tempOverrideAttribute = new HashMap<>(stringObjectMap);\n                String key = tempOverrideAttribute.get(OVERRIDE_KEY).toString();\n                String value = tempOverrideAttribute.get(OVERRIDE_KEY_VALUE).toString();\n                tempOverrideAttribute.remove(OVERRIDE_KEY);\n                tempOverrideAttribute.remove(OVERRIDE_KEY_VALUE);\n                List<Map> fieldsToBeUpdated = gsFields.stream().filter(meta -> meta.containsKey(key) && meta.get(key).toString().equalsIgnoreCase(value)).collect(Collectors.toList());\n                for (Map s : fieldsToBeUpdated) {\n                    DuctCollectionUtils.deepMerge(s, tempOverrideAttribute);\n                }\n            }\n\n            List<Map> defaultAttributes = objectMapper.convertValue(configAttribute.getDefaultObjectAttributes(), new TypeReference<List<Map>>() {\n            });\n\n            Map<String,Map> fieldNameToFieldMap = gsFields.stream() .collect(Collectors.toMap(k -> k.get(FIELD_NAME).toString(), v ->v));\n\n            for(Map defaultAttribute : defaultAttributes) {\n                if(!fieldNameToFieldMap.containsKey(defaultAttribute.get(FIELD_NAME).toString())) {\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fefe7dda-9494-4491-869c-29b855ec70c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":46,"endLine":69,"content":"tDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, metadataGenerationDetails, appName);\n        JobTracer.processJob(job);\n    }\n\n    public static void recordException(DuctJobMapping ductJobMapping, String appName, String errorMessage) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, ductJobMapping, appName);\n        JobTracer.recordException(job, new Exception(StringUtils.defaultIfBlank(errorMessage, \"Exception occurred while processing the job\")));\n\n    }\n\n    public static void recordException(MetadataGenerationDetails metadataGenerationDetails, String appName, String errorMessage) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, metadataGenerationDetails","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c064f428-ad9a-4a1e-b270-db4d5e7f0976","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/EcosystemsCaasMetadataServiceImpl.java","startLine":80,"endLine":89,"content":"ies\"));\n        fieldMeta.setExternallyFilterable((Boolean) metaMap.get(\"externallyFilterable\"));\n      }*/\n      field.setMeta(gsFieldDefinition.getMeta());\n      fields.add(field);\n    }\n    objectDefinition.setFields(fields);\n    return Collections.singletonMap(objectName, objectDefinition);\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adf034d1-af98-4c80-893c-7820034bd71a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":156,"endLine":175,"content":"apping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private List<JsonNode> getIpaasMetadata(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            List<JsonNode> fields = Lists.newArrayList();\n            IpaasAccountUserDetails ipaasAccountUserDetails = ipaasAccountUserDetailsDao.findByTenantId(pnpConnectionsInfo.getTenantId());\n            HttpUrlConnectionUtils httpUrlConnection = new HttpUrlConnectionUtils();\n            HttpResponse httpResponse = httpUrlConnection.get(IpaasFeatureToggleUtility.getCEBaseURL()\n                            + CLOUD_API_BASE_URL + OBJECTS + FORWARD_SLASH + objectName + FORWARD_SLASH + METADATA,\n                    IpaasHelperService.getConnectionSpecificHeaders(ipaasAccountUserDetails, pnpConnectionsInfo),\n                    TIMEOUT, false, null);\n            String respMsg = httpResponse.getRespMsg();\n            if (httpResponse.getResponseCode() == 404) {\n                LOGGER.error(\"{CAAS} Error in External System due to {}\", httpResponse.getRespMsg());\n            } else if (httpResponse.getResponseCode() != 200) {\n                LOGGER.error(\"{CAAS} Error in External System \");\n                Map<String, Object> responseMap = OBJECT_MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getResponseCode())","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8dd72011-26cd-4441-bb41-faaa8f5608d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.UCEnvSpecificConfigDetailUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport exception.SystemException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\n\npublic class UCAptrinsicChannelServiceImpl implements UCAptrinsicChannelService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(UCAptrinsicChannelServiceImpl.class);\n    private static final String GET = \"GET\";\n    private static final String OPTIONS = \"OPTIONS\";\n\n    private static final String APTRINSIC_AUTH_HEADER = \"X-APTRINSIC-API-KEY\";\n    private static final String CONTENT_TYPE_HEADER = \"Content-Type\";\n    private static final String APPLICATION_JSON = \"application/json\";\n    public static final String  CS_INTEGRATION = \"csIntegration/\";\n    public static final String INCLUDE_ACCOUNT_DETAILS = \"&includeAccountDetails=true\";\n    public static final String PX_URL = \"URL\";\n    private String  aptrinsicApiKey;\n\n    public UCAptrinsicChannelServiceImpl(String aptrinsicApiKey) {\n        this.aptrinsicApiKey = aptrinsicApiKey;\n    }\n\n    @Override\n    public boolean authenticateAPIKeys(String baseE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8062cab-8bf2-4b00-b4de-f4607be1ac1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":450,"endLine":470,"content":"aFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = null;\n        try {\n            attributesMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n        } catch (CaasException ex) {\n            throw new RuntimeException(ex);\n        }\n        ObjectDefinition objectDefinition = attributesMap.get(ductJobMapping.getResourceName());\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields();\n        Map<String, Object> fieldNameDataTypeMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n        Map<String, GSFieldDefinition> fieldNameMetaMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n\n        HashMap<String, Object> additionalDetails = new HashMap<>();\n        HashMap<String, String> queryparam = new HashMap<>();\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria()) && ductJobMapping.getResourceName().equals(\"incidents\")) {\n            FilterRule query = getWhereClause(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, ductJobMapping);\n            if(query != null)\n                queryparam.put(\"jql\",getJqlQuery(query));\n        }\n        additionalDetails.put(\"QueryParam\", queryparam);\n        additionalDetails.put(CONNECTOR_TYPE, Connec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"374e7497-383d-4263-aabd-b181525cffb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":99,"endLine":119,"content":"g.get();\n            }\n\n            Map<String, Object> paginationInfo = new HashMap<>();\n            HashMap<String, String> queryparam = new HashMap<>();\n            String nextPageToken = StringUtils.isEmpty(ductJobMapping.getNextPageToken()) ? \"0\" : ductJobMapping.getNextPageToken();\n            assertTrue(StringUtils.isNumeric(nextPageToken), CaasValidationCode.INTERNAL_ERROR);\n            queryparam.put(UCConstants.SYS_PARAM_OFFSET, nextPageToken);\n            queryparam.put(UCConstants.SYS_PARAM_LIMIT, String.valueOf(ductJobMapping.getLimit()));\n            paginationInfo.put(\"QueryParam\", queryparam);\n\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(),\n                    DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo), paginationInfo, null);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(),\n                    connectorConfigByObjectName.getRateLimitDetails(), false);\n            log.info(\"Successfully Fetched data from external system for resource: {}\", ductJobMapping.getResourceName());\n\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            externalSystemResponse","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5249efa1-1c68-4764-b0eb-b82713dad776","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":123,"endLine":148,"content":"enantId\", true, \"TenantId\");\n        o.addOption(\"b\", \"baseUrl\", true, \"Gs Integrations base url\");\n        o.addOption(\"o\", \"objects\", true, \"File path of line separated objects\");\n        o.addOption(\"c\", \"connector\", true, \"connector type\");\n        o.addOption(\"tenant_to_object_map\", \"tenant_to_object_map\", true, \"tenant_to_object_map\");\n        //o.addOption(\"super_class_info\", \"super_class_information\", true, \"Super class information\");\n        return o;\n    }\n\n    @Override\n    public void migrate(CommandLine cmd) {\n        List<String> tenantIds = new ArrayList<>();\n        Map<String, String> successTenants = new HashMap<>();\n        Map<String, String> failedTenants = new HashMap<>();\n        File outFile = new File(\"./ComparisionClientOutput.csv\");\n        try (Writer writer = new FileWriter(outFile);\n             ICSVWriter icsvOutWriter = new CSVWriter(writer)) {\n            writeOutHeaders(icsvOutWriter);\n            Map<String, List<String>> tenantToObjectMap = new HashMap<>();\n            if (cmd.hasOption(\"tenant_to_object_map\")) {\n                String tenantToObjectMapFilePath = cmd.getOptionValue(\"tenant_to_object_map\");\n                LOGGER.info(\"populating tenant_to_object_map\");\n                readFilePopulateMap(tenantToObjectMapFilePath, tenantToObjectMap);\n                LOGGER.info(\"population completed\");\n                if (null == tenantToObjectMap || tenantToObjectMap.isEmpty()) {\n                    throw new SystemException(\"Tenant to Obj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5b1c58af-d0ff-4f8b-83bd-37dbd3bf1c4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/DuctWebConfiguration.java","startLine":75,"endLine":130,"content":", String orgId, String sessionId, boolean embedMode) {\n//                return null;\n//            }\n//        };\n//    }\n//\n//    @Bean\n//    public TenantUserRoleTypeService getTenantUserRoleTypeService() {\n//        return new TenantUserRoleTypeService() {\n//            @Override\n//            public String generateJWT(RequestInfo requestInfo) {\n//                return null;\n//            }\n//\n//            @Override\n//            public RequestInfo validateJWT(String s) {\n//                return null;\n//            }\n//        };\n//    }\n//\n    @Bean\n    public DynamicsUserLookUpService getDynamicsUserLookUpService() {\n        return new DynamicsUserLookUpService() {\n            @Override\n            public RequestInfo getRIFromMsDynamicsToken(String s) {\n                return null;\n            }\n\n            @Override\n            public Map<String, String> getTokenFromRI(RequestInfo requestInfo) {\n                return null;\n            }\n        };\n    }\n\n    //for router\n\n    @Bean\n    public UserSessionService userSessionService(){\n        return new UserSessionServiceImpl();\n    }\n\n    @Bean\n    @Primary\n    public TenantUserRoleTypeService getTenantUserRoleTypeService(UserSessionService userSessionService) {\n        return new TenantUserRoleTypeServiceImpl(userSessionService);\n    }\n\n    @Bean\n    public DuctDatabaseTemplateService ductDatabaseTemplateService(){\n        return new DuctDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public CaasRedisTemplate ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c464255-b3b3-4ee1-a5a8-391e54c61e22","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":241,"endLine":270,"content":"ppend(toDateUTCStr)\n                                    .append(\")\");\n                        }\n                    } else if (rule.getOp() == FilterOperator.NE) {\n                        if (Objects.isNull(getFilterValue(rule))) {\n                            evaluatedExpression.append(fieldName)\n                                    .append(\" \")\n                                    .append(\"ne\")\n                                    .append(\" \")\n                                    .append(getFilterValue(rule));\n                        } else {\n                            evaluatedExpression.append(\"(\")\n                                    .append(fieldName)\n                                    .append(\" \")\n                                    .append(\"lt\")\n                                    .append(\" \")\n                                    .append(fromDateUTCStr)\n                                    .append(\" \")\n                                    .append(\"or\")\n                                    .append(\" \")\n                                    .append(fieldName)\n                                    .append(\" \")\n                                    .append(\"ge\")\n                                    .append(\" \")\n                                    .append(toDateUTCStr)\n                                    .append(\")\");\n                        }\n                    } else if (rule.getOp() == FilterOperator.GT) {\n                        evaluatedExpression.append(fieldName)\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bb401af6-cd30-49ef-a8f0-4aba7f2a0c18","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":73,"endLine":99,"content":" is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), PNPConnectionsInfo.class);\n                } else if (responseObj.getErrorDesc() != null) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(responseObj.getErrorDesc(), response.getStatusCode()));\n                }\n            }\n            return null;\n        } catch (CaasException ce) {\n            throw ce;\n        } catch (Exception e) {\n            if (response != null && response.getReasonPhrase() != null) {\n                throw new CaasException(new GsExternalSystemErrorMapping(response.getReasonPhrase(), e));\n            } else {\n                throw new CaasException(new GsExternalSystemErrorMapping(\"Error occured while invoking : \" + url, e));\n            }\n        }\n    }\n\n    public static Boolean deleteConnection(String connectionId, boolean checkDependency) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) + String.format(\"/v1.0/connector/ipaas/connection/%s?%s\",\n                connectionId, \"checkDependency=\" + checkDependency);\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking delete c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a00fb2bc-d391-4a1d-a346-cac389ccf504","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":122,"endLine":143,"content":"jectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getDbName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldDBNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldDBNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldDBNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null && !criteria.getFieldName().contains(\".\")) {\n                isFilterOperatorSupportedForField(criteria, fieldDBNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ed3cacb-f5d9-4a27-8a72-7d37415f9610","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":24,"endLine":65,"content":"le.gson.JsonParser;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @author : vipinsharma\n * @createdOn : 28 Jun 2019 :: 12:59\n **/\n\n@Service\npublic class GainsightHubspotFetchProcessorImpl implements GainsightHubspotFetchProcessor {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightHubspotFetchProcessorImpl.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private static List<String> PIPELINE_ALLOWED_OBJECT_LIST = Lists.newArrayList(\"TICKET\", \"DEAL\");\n    private static final String CATEGORY = \"category\";\n    private static final String MISSING_SCOPES = \"MISSING_SCOPES\";\n\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public GSIntegrationResponse getEntityDescription(String connectionId, String entityName, String api, boolean isStandardObject) throws CaasException {\n        GSIntegrationResponse response = new GSIntegrationResponse();\n        try {\n            LOGGER.info(\"Api being hit for fetching metadata for o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f57b96d-e5de-45dd-93cb-83312a95e069","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":156,"endLine":205,"content":"neakyThrows\n  public static void sleepSeconds(long seconds) {\n    Thread.sleep(TimeUnit.SECONDS.toMillis(seconds));\n  }\n\n\n  private DuctCommonUtils() {\n  }\n\n  public static File convertToFile(MultipartFile inputCSVFile) {\n    File file = null;\n    try {\n      file = File.createTempFile(\n              RequestContextProvider.getTenantId() + \"_\" + UUID.randomUUID(), UCConstants.CSV);\n      inputCSVFile.transferTo(file);\n    } catch (IOException ex) {\n      log.error(\"Exception while converting to MultipartFile. {}\", ex);\n    }\n    return file;\n  }\n\n  /**\n   * @deprecated formatting handled using logback config.\n   *\n   * @param message\n   * @return\n   */\n  @Deprecated\n  public static String logformatter(String message) {\n    return String.format(\"%s {taskType:} {tId:%s} {jId:} %s\", UCConstants.UC_CONNECTOR_LOG, RequestContextProvider.getTenantId(), message);\n  }\n\n  /**\n   * @deprecated formatting handled using logback config.\n   */\n  @Deprecated\n  public static String logformatter(Supplier<String> supplier) {\n    return String.format(\"%s {taskType:} {tId:%s} {jId:} %s\", UCConstants.UC_CONNECTOR_LOG, RequestContextProvider.getTenantId(), supplier.get());\n  }\n\n  /**\n   * @deprecated formatting handled using logback config.\n   *\n   * @param jobId\n   * @param supplier\n   * @return\n   */\n  @Deprecated\n  public static String logformatter(String jobId, Supplier<String> supplier) {\n    return String.format(\"%s {taskType:} {tId:%s} {jId:%s} %s\", UCConstants.UC_CONNECTOR_LOG, RequestConte","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"953bf0eb-9c22-4b55-86f8-4fbfbfe29146","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":167,"endLine":182,"content":"tes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            com.gainsight.integration.bean.metadata.engine.PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            Map<String, String> queryparam = new HashMap<>();\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryparam);\n            Boolean isXmlResponse = !org.springframework.util.ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4716e894-3677-4271-b611-6605e2fcba8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/connectiondetailEncrytor/EncryptConnectionDetails.java","startLine":1,"endLine":10,"content":"package com.gainsight.duct.utils.connectiondetailEncrytor;\n\nimport com.gainsight.bean.base.connection.BaseConnectionDetail;\n\nimport java.util.Map;\n\npublic interface EncryptConnectionDetails {\n\n    BaseConnectionDetail getConnectionDetails(Map<String,Object> inputProperties, String type);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"25b1fab1-24d9-4097-8061-57438243a107","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":158,"endLine":182,"content":"Response.getExternalSuccessFileLocation());\n        ductJobMappingDb.setExternalErrorFileLocationS3Link(ductResponse.getExternalErrorFileLocationS3Link());\n        ductJobMappingDb.setSourceResponseFile(ductResponse.getSourceResponseFile());\n        ductJobMappingDb.setExternalErrorMessage(ductResponse.getErrorMessage());\n        ductJobMappingDao.update(ductJobMappingDb);\n    }\n\n    private void updateDuctJobMappingStatus(String jobId, DuctResponse ductResponse) {\n        DuctJobMapping ductJobMappingDb = ductJobMappingDao.findByJobId(jobId);\n        ductJobMappingDb.setDuctStatus(ductResponse.getDuctStatus());\n        ductJobMappingDb.setOutputS3Path(ductResponse.getS3FilePath() != null ? ductResponse.getS3FilePath() : null);\n        ductJobMappingDb.setExternalSystemResponse(ductResponse.getExternalSystemResponse());\n        ductJobMappingDb.setTotalNumberOfRecords(ductResponse.getTotalNumberOfRecords());\n        ductJobMappingDb.setExternalErrorMessage(ductResponse.getErrorMessage());\n        ductJobMappingDao.update(ductJobMappingDb);\n    }\n\n    @Override\n    public DuctResponse createSingleData(DuctJobMapping ductJobMapping) throws CaasException {\n        DuctResponse ductResponse = null;\n        try {\n            log.info(\"Processing single data Creation for hubspot started {}\", ductJobMapping.getJobId());\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductJobMapping.getConnectionId());\n            ConnectorDataSourceService dataSourceService =\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adce826b-289a-44fb-bcc7-599a224e7fcd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1669,"endLine":1691,"content":"d(relationalDBConnectionDetail.isSslEnabled());\n    }\n\n    private void processPendoConnectionDetail(PNPConnectionsInfo pnpConnectionInputFromUI, PNPConnectionsInfo pnpConnectionInputFromDB) {\n        PendoConnectionDetail pendoConnectionDetail = (PendoConnectionDetail) pnpConnectionInputFromUI.getConnectionDetail();\n        PendoConnectionDetail pendoConnectionDetailFromDB = (PendoConnectionDetail) pnpConnectionInputFromDB.getConnectionDetail();\n\n        if (pendoConnectionDetail.getIntegrationKey() != null) {\n            pendoConnectionDetailFromDB.setIntegrationKey(cryptUtil.encrypt(pendoConnectionDetail.getIntegrationKey()).getValue());\n        }\n        if (MapUtils.isNotEmpty(pendoConnectionDetail.getProperties())) {\n            Map<String, Object> processedPropertyMap = MapUtils.isNotEmpty(pendoConnectionDetailFromDB.getProperties()) ? pendoConnectionDetailFromDB.getProperties() : new HashMap<>();\n            for (Map.Entry<String, Object> property : pendoConnectionDetail.getProperties().entrySet()) {\n                if (null != property.getKey()) {\n                    processedPropertyMap.put(property.getKey(), cryptUtil.encrypt(GainsightUtils.valueOf(property.getValue())).getValue());\n                }\n            }\n            pendoConnectionDetailFromDB.setProperties(processedPropertyMap);\n        }\n    }\n\n    public void validateUniqueness(PNPConnectionsInfo connectionsInfo, boolean isUpdate) throws CaasException {\n        List<PNPConnectionsInfo> existingConnecti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"850b22be-e4bb-4495-b5f7-432a348d4ecf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connectordependency/ConnectorDependencyFrameworkServiceImpl.java","startLine":51,"endLine":73,"content":"         });\n                List<Dependency> consumers = dependencyMetas.stream().map(dependencyInfo -> dependencyInfo.getConsumer()).collect(Collectors.toList());\n                for (Dependency consumer : consumers) {\n                    if (!connectionDependencyList.containsKey(consumer.getModule().toString())) {\n                        List<Map<String, String>> dependencyMapList = new ArrayList<>();\n                        dependencyMapList.add(populateIdNameMap(consumer.getId(), consumer.getName()));\n                        connectionDependencyList.put(consumer.getModule().toString(), dependencyMapList);\n                    } else {\n                        List<Map<String, String>> addedDependencyMapList = connectionDependencyList.get(consumer.getModule().toString());\n                        addedDependencyMapList.add(populateIdNameMap(consumer.getId(), consumer.getName()));\n                        connectionDependencyList.put(consumer.getModule().toString(), addedDependencyMapList);\n                    }\n                }\n            }\n        } catch (SystemException ex) {\n            LOGGER.error(\"Error occured while fetching external dependencies : {}\", ex.getMessage(), ex);\n            throw new SystemException(CaasValidationCode.FAILED_FETCHING_DEPENDENCY.getUserText(), ex);\n        }\n        return connectionDependencyList;\n    }\n\n    private Map<String, String> populateIdNameMap(String id, String name) {\n        Map<String, String> dependentAssetMap = new HashMa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21815567-24d7-4384-88e3-497ca1df1a7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/OAuthStateDetail.java","startLine":1,"endLine":63,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport com.google.api.client.util.Maps;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * Created by\n * <p/>\n * User: sannamalai\n * Date: 10/06/15\n * Time: 11:49 AM\n * <p/>\n * <p>\n * OAuthStateDetail used to store the state information for OAuth callback validation.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class OAuthStateDetail implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String authToken;\n    private String accountId;\n    private Map<String, Object> properties;\n\n    public Map<String, Object> getProperties() {\n        if (null == this.properties) {\n            this.properties = Maps.newHashMap();\n        }\n        return properties;\n    }\n\n    public void setProperties(Map<String, Object> properties) {\n        this.properties = properties;\n    }\n\n    public String getAuthToken() {\n        return authToken;\n    }\n\n    public void setAuthToken(String authToken) {\n        this.authToken = authToken;\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public void setAccountId(String accountId) {\n        this.accountId = accountId;\n    }\n\n    @Override\n    public String toString() {\n        return \"OAuthStateDetail{\" +\n                \"authToken='\" + authToken + '\\'' +\n                \", accountId='\" + accountId + '\\'' +\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4a15233c-e0d4-4d48-8209-5db6ec1f91a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":67,"endLine":94,"content":"o = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, metadataGenerationDetails, appName);\n        JobTracer.recordException(job, new Exception(StringUtils.defaultIfBlank(errorMessage, \"Exception occurred while processing the job\")));\n\n    }\n\n    public static void completeJob(DuctJobMapping ductJobMapping, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, ductJobMapping, appName);\n        JobTracer.completeJob(job);\n    }\n\n    public static void completeJob(MetadataGenerationDetails metadataGenerationDetails, String appName) {\n        if (!DeploymentProperties.getDeploymentProperties().getBooleanValue(DUCT_INSTRUMENTATION_ENABLE, false))\n            return;\n        RequestInfo requestInfo = RequestContextProvider.getRequestInfo();\n        JobTracer.extractJobContext(requestInfo, RequestInfoSetterGetter.getInstance());\n        Job job = createJob(requestInfo, metadataGenerationDetails, appName);\n        JobTracer.completeJob(job);\n    }\n\n\n    public static void pushJobToInstrumentation(DuctJobMapping ductJobMapping, String appName) {\n        if (!Deployment","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dfdf8fb8-794e-4336-ba6f-9d0cc5e9bc52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":230,"endLine":254,"content":"            externalResultsList.add(ductResponse.getExternalSystemResponse());\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(externalResultsList);\n        return queryAPIResponseBean;\n    }\n\n    private DuctResponse fetchSynchronizedDataWithPagination(DuctJobMapping ductJobMapping, String baseUrl, TokenDetails tokenDetails) throws CaasException {\n        int limit = Math.min(ductJobMapping.getLimit(), 100);\n        GainsightMSTeamsFetchService fetchService = new GainsightMSTeamsFetchServiceImpl();\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        String skipToken = \"\";\n        try {\n            if (ductJobMapping.getNextPageToken() != null)\n                skipToken = ductJobMapping.getNextPageToken();\n            String url =  baseUrl + \"?$top=\" + limit + \"&$skipToken=\" + skipToken;\n\n            HttpResponse httpResponse = fetchService.searchData(\n                    tokenDetails.getClientId(), tokenDetails.getClientSecret(), tokenDetails.getRefreshToken(),\n                    tokenDetails.getAccessToken(), url);\n            externalSystemResponse = extractResponse(httpResponse);\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctRes","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81735f6d-67ba-46c0-b7a4-a44f8bbebaa6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":80,"endLine":97,"content":"ts.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            flattenedConnectionInfo.put(\"query\",getZuoraQuery(ductJobMapping));\n            Map<String, Object> paginationInfo = null;\n            Map<String, String> queryParam = new HashMap<>();\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails != null && paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails != null && paginationDetails.isQueryParam())\n                    queryParam.put(apiConfigAttributes.getPaginationDetails().getRequestKey(),ductJobMapping.getNextPageToken());\n            }\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryPa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9162cc9f-c9a6-4dd6-af2e-477fbda6adbb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/DuctProcessMessage.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.beans.dbqueue;\n\n\n\npublic enum DuctProcessMessage {\n  DUCT_PROCESS_EXTRACT_TASK(\"DUCT_PROCESS_EXTRACT_TASK\", DuctProcessQueue.PROCESS_QUEUE),\n  IPAAS_BULK_FILE_DOWNLOAD(\"IPAAS_BULK_FILE_DOWNLOAD\", DuctProcessQueue.IPAAS_BULK_DOWNLOAD_QUEUE),\n\n  WRITE_BACK_HUBSPOT_DATA(\"WRITE_BACK_HUBSPOT_DATA\", DuctProcessQueue.WRITE_BACK_HUBSPOT_QUEUE),\n  WRITE_BACK_DYNAMICS_DATA(\"WRITE_BACK_DYNAMICS_DATA\", DuctProcessQueue.WRITE_BACK_DYNAMICS_QUEUE),\n  METADATA_GENERATION_TASK(\"METADATA_GENERATION_TASK\", DuctProcessQueue.METADATA_QUEUE),\n  EXTERNAL_DB_SYS_WB_TASK(\"EXTERNAL_DB_SYS_WB_TASK\", DuctProcessQueue.EXTERNAL_DB_SYS_WB_QUEUE);\n  private final String name;\n  private final DuctProcessQueue queue;\n\n  private DuctProcessMessage(String name, DuctProcessQueue queue) {\n    this.name = name;\n    this.queue = queue;\n  }\n\n  public DuctProcessQueue getQueue() {\n    return queue;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getQueueName() {\n    return queue.getQueueName();\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b811a972-18ee-428e-a02f-9c0445fe1e4f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":111,"endLine":135,"content":"();\n                log.info(\"leng : {}\", httpResponse.getContentLength());\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                String path = uploadToS3(UUID.randomUUID().toString(), file, UCConstants.CSV);\n                String url = DuctS3Utility.getSignedURL(PNP_BUCKET_NAME, 100, path, HttpMethod.GET).toString();\n                log.info(\"URL for paginated json JSON : {}\", url);\n                log.info(String.format(\"File Downloaded From CE %s\", file.getAbsolutePath()));\n                updateDuctJobMapping(ipaasBulkDownloadCallbackPayload.getJobId(), url, DuctStatus.SUCCESS);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception in get call\", e);\n            updateDuctJobMapping(ipaasBulkDownloadCallbackPayload.getJobId(), null, DuctStatus.FAILED);\n            return false;\n        } finally {\n            log.info(\"deleting  that file\");\n            FileUtils.deleteQuietly(file);\n        }\n        return true;\n    }\n\n    @Override\n    public void processCallBackFromDH(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload) throws CaasException {\n        log.info(\"Handling external extract completed for jobId {} {}\", ipaasBulkDownloadCallbackPayload.getTenantId(), ipaasBulkDownloadCallbackPayload.getJobId());\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(ipaasBulkDownloadCallbackPayload.getJobId());\n        ConnectorsDataHighwayResponseHandler<ResponseObj> responseHandler = connec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da9cedcb-e7f5-4ad0-9cdd-afe413230818","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UserManagementUtil.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.ExpiryCache;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.feature.config.sdk.http.ClientConfig;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationServiceImpl;\nimport com.gainsight.feature.toggle.bean.Credentials;\nimport com.gainsight.feature.toggle.bean.FeatureVariationDetailDTO;\nimport com.gainsight.gsusers.core.bean.ApiConsumer;\nimport com.gainsight.gsusers.sdk.GsUsersApi;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightUtils;\nimport org.apache.commons.collections4.ListUtils;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\npublic class UserManagementUtil {\n\n    private static final String FT_HOST = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    private static final String ENV = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n    private static final ExpiryCache<String, List<String>> GS_USERS_FT_CACHE_SPECIFIC_CONSUMER = new ExpiryCache<>(6L * 3600000); //6 hours\n\n    private UserManagementUtil() {\n    }\n\n    private static String encryptB2","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"058772d3-ea21-4627-b482-b5394dced70f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":205,"endLine":228,"content":"\n        } catch (CaasException e) {\n            log.error(\"Exception in createData \", e);\n            throw e;\n        } catch (Exception e) {\n            log.error(\"Exception in createData \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(finalResponse).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS)\n                .totalNumberOfRecords(1).jobId(ductJobMapping.getJobId()).build();\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        HttpResponse response = null;\n        Map<String, Object> finalResponse;\n        try {\n            HubspotTokenDetails accessDetailsFromDB = extractAccessDetails(ductJobMapping.getConnectionId());\n            GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            String id = (String) ductJobMapping.getData().get(DuctConstants.HS_OBJECT_ID);\n            ductJobMapping.getData().remove(DuctConstants.HS_OBJECT_ID);\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetai","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc54d379-4f37-4edf-8a04-3a28fbc12323","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":447,"endLine":473,"content":"ctorType) {\n        try {\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.getConnectorType(connectorType));\n            return new ResponseObj(true, connectorConfig.getWritebackConfig());\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Config of a connector type\", response = Map.class)\n    @GetMapping(value = \"/config/{connectorType}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getConnectionConfig(@ApiParam(value = \"Connector Type for fetching config\", required = true) @PathVariable(\"connectorType\") String connectorType) {\n        try {\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.getConnectorType(connectorType));\n            return new ResponseObj(true, connectorConfig);\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Config of a connector type\", response = Map.class)\n    @GetMapping(value = \"/engine/config/{connectorType}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getEngineConfig(@ApiParam(value = \"Connector Type for fetching config\", required = true) @PathVa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50be6ac7-9a0d-4b9c-9ad6-1466eaa76b01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":292,"endLine":311,"content":"cordsRequest.withFilterExpression(filterQuery);\n        }\n        log.info(\"Filter generated for jobId: {} pluralName: {} projections: {} filter: {}\", jobId, pluralName, projections, filterQuery);\n\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n\n        RecordsResponse recordsResponse;\n        if ((Boolean) GainsightCollectionUtils.nullSafeMap(request.getProperties()).getOrDefault(LOOKUP_FIELDS_FLATTENED, true)\n                && FeatureToggleUtil.evaluateBooleanFeature(LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId())) {\n            CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n            recordsResponse = msDynamicsDataServiceV2.getPaginatedRecords(getRecordsRequest, DynamicsGainsightUtils.fetchMapFromConfigServer(),\n                    metaInfoDefinitionMap.get(request.getResourceName()), request.getNextPageToken(), request.getLimit(), resolvePicklistOptions,\n                    pnpConnectionsInfo, true, true, connectorConfig.getDataTypeMappings());\n        } else {\n            Map<String, Object> extractedData = new HashMap<>();\n            if (GainsightCollectionUtils.nullSafeMap(request.getProperties()).containsKey(DuctConstants.DYNAMICS_RAW_META_DATA)) {\n                extractedData = (Map<String, Object>) request.getProperties().get(DuctConstants.DYNAMICS_RAW_META_DATA);\n            }\n            recordsResponse = msDynamicsDataService.getPaginatedRecords(g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15d006a4-4a88-42be-8a28-7d645c24a296","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":81,"endLine":101,"content":"(field);\n        }\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null && !criteria.getFieldName().contains(\".\")) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionM","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8608530-324a-420e-b580-5cb0fd2427ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":84,"endLine":97,"content":"ionUtils.isNotEmpty(pipelineValues)) {\n                    handleSpecialHandlingForPickList(fieldDefinition, pipelineValues);\n                }\n\n                //set datatype\n                if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getFieldType()))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getFieldType())).findFirst().get();\n                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                    meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n                } else if (fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getType()))) {\n                    dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getType())).findFirst().get();\n                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15f94b87-9a53-46f5-b957-b74cc0d60d7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":102,"endLine":118,"content":"acheIfPresent(redisCacheUtility, ductJobMapping.getResourceName(), ductJobMapping.getConnectionId());\n        if (cacheValue == null) {\n            service.getObjects(pnpConnectionsInfo, null);\n            cacheValue = DuctUtils.getObjectTypeIdForHubspotFromCacheIfPresent(redisCacheUtility, ductJobMapping.getResourceName(), ductJobMapping.getConnectionId());\n        }\n        GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n        HubspotTokenDetails hubspotTokenDetails = extractAccessDetails(ductJobMapping.getConnectionId());\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        try {\n            hubspotTokenDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(hubspotTokenDetails.getClientId(), hubspotTokenDetails.getClientSecret(), hubspotTokenDetails.getRefreshToken()));\n            HttpResponse httpResponse = fetchService.searchData(\n                    hubspotTokenDetails.getClientId(), hubspotTokenDetails.getClientSecret(), hubspotTokenDetails.getRefreshToken(),\n                    hubspotTokenDetails.getAccessToken(), cacheValue.toString(), hubspotSearchRequest);\n            externalSystemResponse = extractResponse(httpResponse);\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"710efc2d-32c3-4370-9c73-76a5afa9a90a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":907,"endLine":930,"content":"    }\n\n    private void writeToFile(File file, String[] data) {\n        try (CSVWriter csvWriter = new CSVWriter(new FileWriter(file, true))) {\n            csvWriter.writeNext(data);\n        } catch (IOException e) {\n            log.error(\"[Dynamics] Error occurred while writing to success records file\", e.getMessage());\n        }\n    }\n\n    private String getAccessToken(PNPConnectionsInfo pnpConnectionsInfo, boolean forceAccessTokenGeneration) {\n        Object accessKeyCached = DuctUtils.getMSDynamicsAccessTokenFromCache(redisCacheUtility, pnpConnectionsInfo.getConnectionId());\n        if (forceAccessTokenGeneration || (null == accessKeyCached)) {\n            log.info(\"Generating access_token for the connection: {}\", pnpConnectionsInfo.getConnectionId());\n            Map<String, Object> tokenResponseMap = GSODataClientFactory.generateAccessToken();\n            GainsightPrecondition.assertTrue(MapUtils.isNotEmpty(tokenResponseMap) && tokenResponseMap.containsKey(ACCESS_TOKEN)\n                            && tokenResponseMap.containsKey(EXPIRY), CoreErrorCode.INVALID_REQUEST,\n                    CaasValidationCode.ERROR_FETCHING_ACCESS_TOKEN.getUserText(), HttpStatus.SC_INTERNAL_SERVER_ERROR);\n\n            redisCacheUtility.putValue(DuctUtils.getMSDynamicsAccessCacheKey(pnpConnectionsInfo.getConnectionId()), tokenResponseMap,\n                    (Long) tokenResponseMap.get(EXPIRY));\n            return String.valueOf(tokenResponseMap.get(ACCESS_TOKEN));\n        } else {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"945d00e9-2764-4bbd-8553-1a3fcab0b88a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/WriteBackDynamicsMessageInfo.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class WriteBackDynamicsMessageInfo implements MessageInfo<DuctJobMapping> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.WRITE_BACK_DYNAMICS_DATA;\n    private static final MessagePayloadTransformer<DuctJobMapping> transformer = new DefaultMessagePayloadTransformer<>(DuctJobMapping.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<DuctJobMapping> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e8d386a9-9d05-4e98-984d-72c0045be187","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1329,"endLine":1354,"content":"o processCustomConnectionDetails(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n        String authTypeStr = GainsightUtils.valueOf(properties.get(AUTH_TYPE));\n        assertTrue(StringUtils.isNotBlank(authTypeStr), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_AUTHENTICATION_TYPE.getUserText());\n        AuthType authType = AuthType.valueOf(authTypeStr);\n        BaseTokenDetail tokenDetail = null;\n        switch (authType) {\n            case NONE:\n                break;\n            case BASIC:\n                String userName = GainsightUtils.valueOf(properties.get(USERNAME));\n                String password = GainsightUtils.valueOf(properties.get(PASSWORD));\n                tokenDetail = new BaseTokenDetail();\n                tokenDetail.setUserName(userName);\n                tokenDetail.setPassword(SecretData.fromValue(password));\n                // Even in basic authentication user may send optional headers apart from userName and password\n                if (properties.get(HEADERS) instanceof Map) {\n                    tokenDetail.setHeaders((Map) properties.get(HEADERS));\n                }\n                break;\n            case API_KEY:\n                tokenDetail = new BaseTokenDetail();\n                if (properties.get(HEADERS) instanceof Map) {\n                    tokenDetail.setHeaders((Map) properties.get(HEADERS));\n                }\n                br","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5cf69e44-bcd4-49c8-a47d-6211c5441433","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":508,"endLine":548,"content":"  }\n\n  private static long getStartOfNextDayEpoch(Long epoch) {\n    // Convert epoch milliseconds to LocalDate\n    LocalDate date = Instant.ofEpochMilli(epoch * 1000)\n        .atZone(ZoneId.of(\"UTC\"))\n        .toLocalDate();\n\n    // Get the start of the day (midnight) for the given date and add one day to it\n    LocalDateTime startOfNextDay = date.atStartOfDay().plusDays(1);\n\n    // Convert  to epoch milliseconds\n    long startOfNextDayEpochMillis = startOfNextDay.toInstant(ZoneOffset.UTC).toEpochMilli() / 1000;\n    return Math.max(0, startOfNextDayEpochMillis);\n  }\n\n  private String getDateTimeFormat(CaasConnectorConfig caasConnectorConfig) {\n    DataTypeMappings dateTimeMapping = caasConnectorConfig.getDataTypeMappings()\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(\"DATE\"))\n        .findFirst().orElse(null);\n\n    if (Objects.isNull(dateTimeMapping)) {\n      return DEFAULT_DATETIME_FORMAT;\n    }\n    return dateTimeMapping.getFormat();\n  }\n\n  private Criteria getDefaultFallbackCriteria() {\n    Criteria criteria = new Criteria();\n    Criteria fieldCriteria = new Criteria();\n    // set a hardcoded filter condition since this is a required parameter\n    fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD);\n    fieldCriteria.setOperatorType(FilterOperator.GT);\n    fieldCriteria.setValues(Lists.newArrayList(\"0\"));\n\n    criteria.setFilters(Lists.newArrayList(fieldCriteria));\n    return criteria;\n  }\n\n  @NotNull","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec617e2c-1b6a-4d29-b464-7f4b191fd86c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":657,"endLine":671,"content":"apping.getResourceName()).get(fieldSplitted[0]).getMeta()\n                                    .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                            if (!objectToFieldDBNameToFieldDefinitionMap.containsKey(lookedUpObjectName)) {\n                                Map<String, ObjectDefinition> expandedObjectMetaInfoDefinitionMap = service.getObjectAttributes(lookedUpObjectName, pnpConnectionsInfo, false, ductJobMapping);\n                                objectToFieldDBNameToFieldDefinitionMap.put(lookedUpObjectName, expandedObjectMetaInfoDefinitionMap.get(lookedUpObjectName).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n                                objectToFieldDBNameToGSDataTypeMap.put(lookedUpObjectName, expandedObjectMetaInfoDefinitionMap.get(lookedUpObjectName).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                            }\n                        }\n                    }\n                }\n\n                List<Relationship> relationships = msDynamicsSchemaService.listRelationships(ductJobMapping.getResourceName(), RelationshipType.MANY_TO_ONE);\n                filterQuery = ODataQueryBuilder.createQuery(DataHighwayUtils.getFilterRule(ductJobMapping.getCriteria(),\n                                objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFieldDefinitionMap,\n                          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f53066d-7b69-4e40-8fa4-5766ae530114","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesTenantConfigDAOImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n\n@Repository\npublic class CaasObjectAttributesTenantConfigDAOImpl extends AbstractEntityDaoImpl<CaasObjectAttributesTenantConfig> implements CaasObjectAttributesTenantConfigDAO {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CaasObjectAttributesTenantConfigDAOImpl.class);\n\n    @Autowired\n    public CaasObjectAttributesTenantConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasObjectAttributesTenantConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectAttributesTenantConfig> getConfigAttributes(Conne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc2170f1-a4a4-43be-ac2b-3a17e7672806","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectAttributesTenantConfig.java","startLine":1,"endLine":44,"content":"package com.gainsight.duct.beans.config;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_object_attributes_tenant_config\")\npublic class CaasObjectAttributesTenantConfig extends CaasObjectAttributesConfig implements Serializable {\n  public static String CONNECTOR_TYPE_PROP = \"connectorType\";\n\n  private static final long serialVersionUID = -1L;\n\n  private String tenantId;\n  private String connectionId;\n\n  @Override\n  public String toString() {\n    return \"CaasObjectAttributesTenantConfig{\" +\n            \"tenantId='\" + tenantId + '\\'' +\n            \", connectionId='\" + connectionId + '\\'' +\n            '}';\n  }\n\n  public String getTenantId() {\n    return tenantId;\n  }\n\n  public void setTenantId(String tenantId) {\n    this.tenantId = tenantId;\n  }\n\n  public String getConnectionId() {\n    return connectionId;\n  }\n\n  public void setConnectionId(String connectionId) {\n    this.connectionId = connectionId;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f6726088-ac7b-4374-aa29-92cbeeeaea66","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":468,"endLine":487,"content":"ect>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    public File validateDatabricksWriteBackPayload(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        File file;\n        try {\n            log.info(\"Starting validation for Databricks write back Payload {}\", ductJobMapping.getJobId());\n            StopWatch stopWatch = new StopWatch();\n            stopWatch.start();\n\n            Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n            //For Databricks, we support writing to only one object at a time\n            GainsightPrecondition.assertTrue((Objects.nonNull(requestObjectLevelWritebackOperation) && requestObjectLevelWritebackOperation.size() == 1)\n                    , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n            Map.Entry<String, Object> objectLevelOperation = requestObjectLevelWritebackOperation.entrySet().iterator().next();\n\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74a64456-8eaf-432b-8378-1427cf168e03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZuoraV2ConnectionService.java","startLine":25,"endLine":62,"content":"gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Order(1000)\n@Service\npublic class ZuoraV2ConnectionService implements CaasConnectionService {\n\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType.equals(ConnectorType.ZUORAV2);\n    }\n\n    @Override\n    public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(pnpConnectionInput.getPnpConne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89c4f1f5-5a2d-44cb-82ce-ff84738b2836","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":244,"endLine":262,"content":"n::getDbName, fieldDefinition -> fieldDefinition)));\n                                objectToFieldDBNameToGSDataTypeMap.put(lookedUpObjectName, expandedObjectMetaInfoDefinitionMap.get(lookedUpObjectName).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                            }\n                        }\n                    }\n                }\n\n                List<Relationship> relationships = msDynamicsSchemaService.listRelationships(request.getResourceName(), RelationshipType.MANY_TO_ONE);\n                filterQuery = ODataQueryBuilder.createQuery(DataHighwayUtils.getFilterRule(request.getCriteria(),\n                                objectToFieldDBNameToGSDataTypeMap, objectToFieldDBNameToFieldDefinitionMap,\n                                ignoreMetadataFields, caasConnectorConfig, request.getResourceName(), fieldsFlattened), objectToFieldDBNameToFieldDefinitionMap,\n                        relationships, pluralName, request.getResourceName(), DynamicsGainsightUtils.fetchMapFromConfigServer(), fieldsFlattened);\n            } catch (Exception exception) {\n                log.error(\"Exception occurred while constructing ODATA filter query: {}\", exception.getMessage(), exception);\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, exception));\n            }\n        }\n\n        String dynamicsClien","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"600a1cfa-b8de-4b25-8d82-f9bce2b46907","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":92,"endLine":120,"content":"ter(\"scope\", GainsightUtils.valueOf(properties.get(\"scope\")))\n                    .addParameter(\"state\", state);\n            return uriBuilder.toString() + \"&redirect_uri=\" + redirectURI;\n        } catch (URISyntaxException e) {\n            LOGGER.info(\"Invalid Authorization URI Provided: {}\", authorizationURI, e);\n            throw new SystemException(\"Invalid Authorization URI Provided\", e);\n        }\n    }\n\n    private String getOAuthAccessTokenRequestPayload(String payloadContentType, OAuthV2TokenDetail tokenDetail, String code, String grantType) throws IOException {\n        String redirectURI = tokenDetail.getRedirectURI();\n        Map<String, String> payloadMap = new HashMap<>();\n        GainsightPrecondition.assertNotNull(grantType, CaasValidationCode.INVALID_REQUEST);\n        switch (grantType) {\n            case AUTHORIZATION_CODE:\n                if (code == null) {\n                    LOGGER.info(\"Code cannot be null for {} grant type\", AUTHORIZATION_CODE);\n                    throw new SystemException(\"Code cannot be null for authorization_code grant type\");\n                } else {\n                    payloadMap.put(\"code\", code);\n                }\n                break;\n            case REFRESH_TOKEN:\n                payloadMap.put(REFRESH_TOKEN, CryptHandler.getInstance().decrypt(tokenDetail.getRefreshToken()));\n                break;\n            case CLIENT_CREDENTIALS:\n                break;\n            default:\n                LOGGER.error(\"Invalid grant typ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31ce079c-77bf-4323-b35f-b6daa98c640a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.connection;\n\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.IntercomV2Region;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.GainsightC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7368d3d5-04b0-4a79-a824-49e5557751f1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":79,"endLine":101,"content":"n validation 2 \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n        } finally {\n            FileUtils.deleteQuietly(file);\n        }\n    }\n\n    private Map<String, ObjectDefinition> getAttributesMapForObjects(DuctJobMapping ductJobMapping, CaasMetadataService service, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Set<String> objects = new HashSet<>();\n        objects.addAll(ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getObjectName).collect(Collectors.toList()));\n        Map<String, ObjectDefinition> objectNameToObjectDefinitionMap = new HashMap<>();\n        for (String object : objects) {\n            if (!objectNameToObjectDefinitionMap.containsKey(object))\n                objectNameToObjectDefinitionMap.put(object, service.getObjectAttributes(object, pnpConnectionsInfo).get(object));\n        }\n        return objectNameToObjectDefinitionMap;\n    }\n\n    private void transformColumnMappingAccordingToCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n        List<ColumnMapping> actualColumnMappings = ductJobMapping.getColumnMappings();\n        log.info(\"Actual Column mapping order {}\", actualColumnMappings.stream().map(ColumnMapping::getHeaderName).collect(Collectors.joining(\",\")));\n        List<String> headers = getHeaders(ductJobMapping, file);\n        List<Co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bcc236e5-5439-412d-a42c-4d4d3a840d4f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":33,"endLine":60,"content":"orType.SFDC;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> fieldSet = objectDefinition.getFields().stream().map(gsFieldDefinition -> gsFieldDefinition.getFieldName()).collect(Collectors.toSet());\n        Set<String> notAvailableFields = new HashSet<>();\n        Set<String> availableRelationships = getAvailableRelationships(ductRequestDTO, objectDefinitionMap);\n        for (String field : ductRequestDTO.getFields()) {\n            if (!fieldSet.contains(field)) {\n                validateLookupField(notAvailableFields, availableRelationships, field);\n            }\n        }\n        if (ObjectUtils.allNotNull(ductRequestDTO.getCriteria())) {\n            Set<String> filterFiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f78c44ae-9d09-4a99-814a-8cd40222f582","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":141,"endLine":149,"content":"ON , GET);\n        try {\n            InputStream inputStream = httpURLConnection.getInputStream();\n            return inputStream;\n        } catch (Exception ex) {\n            throw new SystemException(\"Error in connecting and getting  Gainsight subscription\", ex, CaasValidationCode.GAINSIGHT_PX_METADATA_FETCH_ERROR, httpURLConnection.getResponseCode());\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f7b3f87-8ae8-47dc-b54f-5b4f2e65c329","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":141,"endLine":177,"content":"\n        } else {\n            List<List<HubspotFilters>> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                internalRulesList.addAll(buildRule(childCriteria, mainFilterRule, childRulesList));\n            }\n\n        }\n        return internalRulesList;\n    }\n\n    private static void createFilterRule(Criteria criteria, HubspotFilters mainFilterRule, List<List<HubspotFilters>> internalRulesList) {\n        HubspotFilters filterRule = new HubspotFilters();\n        if (criteria.getValues() instanceof List) {\n            filterRule.setValue(String.join(\",\", (List) criteria.getValues()));\n        } else {\n            filterRule.setValue(criteria.getValues());\n        }\n        filterRule.setOperator(criteria.getOperatorType().getFilterOperator());\n        filterRule.setPropertyName(criteria.getFieldName());\n        internalRulesList.add(Lists.newArrayList(filterRule));\n    }\n\n    private static String getHubspotSyncOperator(FilterOperator operator) throws CaasException {\n        switch (operator) {\n            case NE:\n                return \"NEQ\";\n            case EQ:\n            case LT:\n            case GT:\n            case LTE:\n            case GTE:\n            case IN:\n            case NOT_IN:\n                return operator.getFilterOperator();\n            default:\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"922585dc-45e6-4d2e-bbf7-459b0a7c4a3f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":200,"endLine":227,"content":"ion(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE,\n                        DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE,\n                        e));\n            }\n        } else {\n            return Lists.newArrayList();\n        }\n\n    }\n\n    @Override\n    public GSIntegrationResponse getListOfAvailableEntities(String connection) {\n        GSIntegrationResponse response = new GSIntegrationResponse();\n        response.setResult(Arrays.stream(GSHubSpotEntityEnum.values())\n                .map(GSHubSpotEntityEnum::labelName)\n                .collect(Collectors.toList()));\n        response.setSuccessful(true);\n        return response;\n    }\n\n    private void handleSpecialCases(String entityName, GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescriptionV3) {\n        if (entityName.equals(GSHubSpotEntityEnum.COMPANY.name()) && gainsightHubspotFieldDescriptionV3.getLabel().equals(\"Parent Company\")) {\n            gainsightHubspotFieldDescriptionV3.setType(\"string\");\n            gainsightHubspotFieldDescriptionV3.setFieldType(\"text\");\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8434196a-5012-44c7-b183-dc6f9eaa273a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":196,"endLine":227,"content":"DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> respo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2ca4499-e043-448b-ad92-0bd8894d5f10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/RelaxedParser.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.clients;\n\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * parser which ignores unknown args.\n */\npublic class RelaxedParser extends DefaultParser {\n  @Override\n  public CommandLine parse(Options options, String[] arguments) throws ParseException {\n    final List<String> knownArgs = new LinkedList<>();\n    for (int i = 0; i < arguments.length; i++) {\n      if (options.hasOption(arguments[i])) {\n        knownArgs.add(arguments[i]);\n        if (i + 1 < arguments.length && options.getOption(arguments[i]).hasArg()) {\n          knownArgs.add(arguments[i + 1]);\n        }\n      }\n    }\n    return super.parse(options, knownArgs.toArray(new String[0]));\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"00e088b3-a320-4911-b128-d2de50d129fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1110,"endLine":1133,"content":"AccessException e) {\n                log.error(\"Error updating the ConnectionInfo Object\", e);\n            } catch (InvocationTargetException e) {\n                log.error(\"Error updating the ConnectionInfo Object\", e);\n            }\n        });\n        return pnpConnectionsInfo;\n    }\n\n    private void validateForBulkAPIAccessKey(PNPConnectionsInfo pnpConnectionsInfo) {\n        boolean isTenantOauthEnabled = FeatureToggleUtil.evaluateBooleanFeature(DuctConstants.USER_OAUTH_ENABLEMENT, RequestContextProvider.getTenantId());\n        if (!isTenantOauthEnabled || (isTenantOauthEnabled && !ObjectUtils.isEmpty(pnpConnectionsInfo.getProperties()\n                .get(DATALOAD_ACCESSKEY)))) {\n            assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                    .get(DATALOAD_ACCESSKEY)), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_DATALOAD_ACCESS_KEY.getUserText());\n            assertTrue(((String) pnpConnectionsInfo.getProperties().get(DATALOAD_ACCESSKEY)).length() ==\n                    36, CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_LENGTH_ACCESS_KEY.getUserText());\n        }\n    }\n\n    private void segmentPreProcessing(PNPConnectionsInfo pnpConnectionsInfo) {\n        assertNotNull(pnpConnectionsInfo.getProperties()\n                .get(ACCESS_SECRET), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.ACCESS_KEY_NOT_PROVIDED.getUserText());\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aec4acb7-bb39-438a-a055-b847ee3067c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":432,"endLine":456,"content":"ping.getCaasS3FileDetails().getBucketName() == null ||\n            (ductJobMapping.getCaasS3FileDetails().getFilesDir() == null || ductJobMapping.getCaasFileInfo().getFileName() == null)) {\n      log.error(DuctErrorConstants.INVALID_S3_FILE_DETAILS);\n      DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_S3_FILE_DETAILS, ductJobMapping.getJobId());\n    }\n  }\n\n  private void validateIfFilePresent(DuctJobMapping ductJobMapping) throws CaasException {\n    try {\n      boolean isFilePresent = DuctS3Utility.keyExists(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n      if (!isFilePresent) {\n        log.error(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET);\n        DuctUtils.populateAndInsertError(S3_FILE_IS_NOT_PRESENT_IN_THE_BUCKET, ductJobMapping.getJobId());\n      }\n    } catch (Exception e) {\n      log.error(\"Failed while trying to validate s3 file presence\", e);\n      if (!org.springframework.util.StringUtils.isEmpty(e.getMessage()))\n        DuctUtils.populateAndInsertError(e.getMessage(), ductJobMapping.getJobId());\n      else\n        DuctUtils.populateAndInsertError(INTERNAL_SYSTEM_ERROR_MESSAGE, ductJobMapping.getJobId());\n    }\n  }\n\n  private void validateMappedFieldsAndCsv(DuctJobMapping ductJobMapping, File file) throws CaasException {\n    List<String> mappedFields = ductJobMapping.getColumnMappings().stream().map(ColumnMapping::getHeaderName).collect(Col","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc6e5308-a995-407a-a688-89922fe54657","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":60,"endLine":80,"content":"npConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> metaInfoDefinitionMap = getAttributesMapForObjects(ductJobMapping, service, pnpConnectionsInfo);\n            validateObject(ductJobMapping);\n            validateMandatoryMappings(ductJobMapping, metaInfoDefinitionMap);\n            validateMappings(ductJobMapping);\n            validateS3Info(ductJobMapping);\n            validateIfFilePresent(ductJobMapping);\n            validateAllowedFieldsForWriteBack(ductJobMapping, metaInfoDefinitionMap);\n            validateUpsertKeys(ductJobMapping, metaInfoDefinitionMap);\n            file = getFileFromS3(ductJobMapping);\n            validateMappedFieldsAndCsv(ductJobMapping, file);\n            validateHeadersFieldsAndMappings(ductJobMapping, file);\n            transformColumnMappingAccordingToCsv(ductJobMapping, file); //todo move to transformation layer later\n            stopWatch.stop();\n            log.info(\"Completed validation for hubspot write back Payload {} in :{} seconds\", ductJobMapping.getJobId(), stopWatch.getTotalTimeSeconds());\n        } catch (CaasException ex) {\n            log.error(\"Exception in validation 1 \", ex);\n            throw ex;\n        } catch (Exception e) {\n            log.error(\"Exception in validation 2 \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbdca7f9-a279-41a0-bfbb-83e0e6af7b30","type":"exception","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/ExternalTaskException.java","startLine":1,"endLine":57,"content":"package com.gainsight.duct.beans;\n\nimport com.gainsight.duct.enums.ExternalTasksValidationCode;\n\npublic class ExternalTaskException extends RuntimeException {\n\n    private static final long serialVersionUID = 13934748239343L;\n\n    private int httpStatus;\n    private String message;\n    private int errorCode;\n    private String errorMessage;\n\n    public ExternalTaskException(int httpStatus, ExternalTasksValidationCode externalTasksValidationCode, String message){\n        this.httpStatus = httpStatus;\n        this.errorCode = externalTasksValidationCode.getCode();\n        this.errorMessage = externalTasksValidationCode.getMessage();\n        this.message = message;\n    }\n\n    public ExternalTaskException(int httpStatus, int errorCode, String errorMessage, String message){\n        this.httpStatus = httpStatus;\n        this.errorCode = errorCode;\n        this.errorMessage = errorMessage;\n        this.message = message;\n    }\n\n    public static long getSerialVersionUID() {\n        return serialVersionUID;\n    }\n\n    public int getHttpStatus() {\n        return httpStatus;\n    }\n\n    public void setHttpStatus(int httpStatus) {\n        this.httpStatus = httpStatus;\n    }\n\n    @Override\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public int getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(int errorCode) {\n        this.errorCode = errorCode;\n    }\n\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c9a4379-8f34-4b4e-917a-2733f0df7a5e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.msteams.service.GainsightMSTeamsChannelFactory;\nimport com.gainsight.integration.connector.msteams.service.GainsightMSTeamsFetchService;\nimport com.gainsight.integration.connector.msteams.service.GainsightMSTeamsFetchServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02d4c18f-ab76-440c-8bf2-1eed83b2f2dd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":309,"endLine":349,"content":"getDeploymentProperties().getValue(\"uc.caas.intercomv2.external.task.default.timeout\", \"240\");\n  }\n\n\n  /**\n   * Generates query payload for object search\n   *\n   * @param criteria {@link Criteria}\n   * @return {@map<String, Object>}\n   */\n  private Map<String, Object> getQueryRequestBody(Criteria criteria) {\n    try {\n      if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters())) {\n        return getDefaultQueryBodyMap(criteria);\n      }\n      if (criteria.getFilters().isEmpty() && Objects.isNull(criteria.getFieldName())) {\n        return getDefaultQueryBodyMap(criteria);\n      }\n      Map<String, Object> responseMap = getDefaultQueryBodyMap(criteria);\n\n      if (Objects.nonNull(criteria.getFieldName())) {\n        Map<String, String> externalCriteria = createFieldNodeMap(criteria);\n        ((Map<String, Object>) responseMap.get(QUERY)).put(VALUE, Lists.newArrayList(externalCriteria));\n      } else {\n        List<Map<String, String>> externalCriteriaList = nullSafeList(criteria.getFilters())\n            .stream()\n            .map(this::createFieldNodeMap)\n            .collect(Collectors.toList());\n        ((Map<String, Object>) responseMap.get(QUERY)).put(VALUE, Lists.newArrayList(externalCriteriaList));\n      }\n      return responseMap;\n    } catch (Exception ex) {\n      log.error(\"Error while generating query payload for object search, Falling back to default payload\", ex);\n      return getDefaultQueryBodyMap(criteria);\n    }\n\n  }\n\n\n  @Override\n  protected Filt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf57d332-2f26-418b-a65a-ac05754ad5c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":145,"endLine":180,"content":"   private static final Logger log = LoggerFactory.getLogger(DuctConnectionServiceImpl.class);\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    private MutexService mutexService;\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private DuctAuditLogClientService ductAuditLogClientService;\n    @Autowired\n    private AccessKeyDao accessKeyDao;\n    @Autowired\n    private ConnectionAccountDAO accountDAO;\n    @Autowired\n    private TenantMasterDAO tenantMasterDAO;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    @Autowired\n    private CallOutOAuthService callOutOAuthService;\n    @Autowired\n    private DuctEventService ductEventService;\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectionFactory caasConnectionFactory;\n    @Autowired\n    TenantMasterDAO tenantMasterDao;\n\n    public static final String ALLOWED_CONNECTIONS = \"allowedConnections\";\n    private static final DeploymentProperties DEPLOYMENT_PROPERTIES = DeploymentProperties.getDeploymentProperties();\n    private static final SimpleCryptor cryptUtil = CryptUtil.getSimpleCryptor();\n    public static final String AUTH_SCOPE = \"AUTH_SCOPE\";\n    private static final String BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"callback_base_url\");\n    p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf9d1a74-ed0f-4eb2-87a3-1dfce1ec9fa4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":68,"endLine":88,"content":"  @ApiOperation(value = \"Insert Attribute Config\", response = DuctResponseDTO.class)\n    @PostMapping(value = \"/enhance/fields/{connectionId}/{object}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj insertEnhanceMetadata(@NotNull @NotEmpty @PathVariable(name = \"connectionId\") final String connectionId,\n                                             @NotNull @NotEmpty @PathVariable(name = \"object\") final String object,\n                                             @NotNull @NotEmpty @QueryParam(\"fieldSaveType\") final FieldSaveType fieldSaveType,\n                                             @RequestBody(required = true) List<Map<String, Object>> fieldInfo) {\n        try {\n            enhanceMetadataService.saveTheEnhancedMetaData(connectionId, object, fieldInfo, fieldSaveType);\n            return new ResponseObj(true);\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, e.getErrorMessage());\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Update Attribute config\", response = DuctResponseDTO.class)\n    @PutMapping(value = \"/enhance/fields/{connectionId}/{object}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3f47377-8e20-4eb6-8336-6b59375a69ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":169,"endLine":205,"content":"null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpDelete httpDelete = new HttpDelete(uri);\n\n      addHeaders(httpDelete, headers);\n      closeableHttpResponse = httpClient.execute(httpDelete);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static <T> BionicRuleHttpResponseWrapper<T> delete(String uri, Map<String, String> headers, String payload,\n                                                            Class<T> clazz) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpDeleteWithBody httpDeleteWithBody = new HttpDeleteWithBody(uri);\n\n      addHeaders(httpDeleteWithBody, headers);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpDeleteWithBody.setEntity(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpDeleteWithBody);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  private static <T> BionicRuleHttpResponseWrapper<T> generateResponse(CloseableHttpResponse closeableHttpResponse,\n                                       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"591f50e6-be80-4b0a-a58c-2b5364e58a97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":172,"endLine":190,"content":"nInfoDao.findByConnectionId(connectionId);\n    GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Connection not found\", SC_BAD_REQUEST);\n    MetadataCache metadataByConnectionIdAndObjectName = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n    Set<GSFieldDefinition> fieldsSet = new HashSet<>();\n    if (metadataByConnectionIdAndObjectName != null) {\n      log.info(\"Metadata found in cache for connectionId:{} and objectName:{} with metadata present: {}\", metadataByConnectionIdAndObjectName.getConnectionId(),\n          metadataByConnectionIdAndObjectName.getObjectName(), MapUtils.isNotEmpty(metadataByConnectionIdAndObjectName.getMetadata()));\n      fieldsSet.addAll(metadataByConnectionIdAndObjectName.getMetadata().get(objectName).getFields());\n    }\n    if (!forceRefresh && metadataByConnectionIdAndObjectName != null) {\n      return applyGlobalAndTenantOverrides(metadataByConnectionIdAndObjectName.getMetadata(), pnpConnectionsInfo, objectName);\n    }\n\n    MetadataEngineConfig metadataEngineConfig;\n    for (String currentObject : GainsightCollectionUtils.nullSafeList(superClassObjects)) {\n      try {\n        metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n        MetadataCache metadataByConnectionIdAndCurrentObjectName = metadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, currentObject);\n        if ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7ac607a-8657-4757-a2a7-687ab308c157","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasConnectorConfigDAOImpl.java","startLine":30,"endLine":46,"content":"();\n    }\n\n    @Override\n    protected void setEntityId(CaasConnectorConfig caasConnectorConfig, String s) {\n        caasConnectorConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasConnectorConfig caasObjectAttributesConfig, String s) {\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(CaasConnectorConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7908c1f-d54c-47e7-af72-cca262c13767","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/MetadataGenerationProcessor.java","startLine":61,"endLine":79,"content":" throw new SystemException(\"payload not found.\");\n                }\n                MessageInfo<MetadataGenerationDetails> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                MetadataGenerationDetails payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                log.info(\"Received payload for MetadataGenerationProcessor  : {}\", payload);\n                DuctCommonUtils.setContext(JsonUtil.readObject(CryptUtil.getSimpleCryptor().decrypt(payload.getEncryptedRequestInfo()), RequestInfo.class));\n                MDCContext.put(\"jobId\", payload.getJobId());\n                MDCContext.put(\"connectorType\", payload.getConnectorType().getValue());\n                InstrumentationUtil.pushJobToInstrumentation(payload, DuctConstants.CAAS_WORKER);\n                InstrumentationUtil.processJob(payload, DuctConstants.CAAS_WORKER);\n                List<GSFieldDefinition> gsFieldDefinitions = metadataDriver.refreshGeneratedMetadata(payload);\n                log.info(\"MetadataGenerationProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n                InstrumentationUtil.completeJob(payload, DuctConstants.CAAS_WORKER);\n            } catch (Exception exception) {\n                log.error(\"Error while processing MetadataGenerationProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"670b8953-34b8-4994-a3e1-e14124be83b5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":93,"endLine":113,"content":"<String, Object> fieldNameToDataTypeMap =  objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName,GSFieldDefinition::getDataType));\n            String whereClause = null;\n            if(!ObjectUtils.isEmpty(ductJobMapping.getCriteria())){\n                FilterRule rule = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(),fieldNameToDataTypeMap,fieldNameToGsFieldDefinitionMap,null,caasConnectorConfig, ductJobMapping.getResourceName());\n                whereClause = gainsightBigQueryChannelService.getWhereClause(rule);\n            }\n            String query = null;\n            if(ObjectUtils.isEmpty(ductJobMapping.getQuery()))\n                query = getQuery(pnpConnectionsInfo, fieldNameToDataTypeMap, ductJobMapping, limit, page,whereClause);\n            else\n                query = ductJobMapping.getQuery();\n            log.info(\"query to be executed {}\", query);\n            JsonArray jsonArray = gainsightBigQueryChannelService.getQueryResults(query,limit);\n            List res = OBJECT_MAPPER.readValue(jsonArray.toString(), new TypeReference<List<Map<String, Object>>>() {\n            });\n            String nextPageToken = limit > res.size() ? null : String.valueOf(page + limit - 1);\n            if(limit == res.size())\n              res.remove(res.size()-1);\n            Map data = new HashMap();\n            data.put(RESULTS, res);\n            return DuctResponse.builder().totalNumberOfRecords(res.size()).extern","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec9a4e5b-8c53-42f5-a3e6-5caa7670cca6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/CEQueryBuilder.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.utils.ipaas;\n\nimport com.gainsight.duct.enums.Operators;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\nimport java.util.Objects;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\n\n@Slf4j\npublic class CEQueryBuilder {\n    public static String createQuery(FilterRule filterRule) throws UnsupportedEncodingException {\n        String criteria = getFilterString(filterRule);\n        log.debug(String.format(\"Query created for \", criteria));\n        return criteria;\n    }\n\n    private static String getFilterString(FilterRule filterRule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(createFilterQueryFromEachRule(filterRule, stringBuilder));\n        return stringBuilder.toString();\n    }\n\n    private static String createFilterQueryFromEachRule(FilterRule filterRule, StringBuilder stringBuilder) throws UnsupportedEncodingException {\n        List<String> whereClauses = Lists.newArrayList();\n        for (FilterRule rule : filterRule.getRules()) {\n            whe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"abf93b53-cbe4-468d-a862-6680516133cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":26,"endLine":55,"content":"nums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightUtils;\nimport com.github.wnameless.json.flattener.JsonFlattener;\nimport com.github.wnameless.json.unflattener.JsonUnflattener;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport jodd.net.HttpMethod;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.jetbrains.annotations.NotNull;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.text.SimpleDateFormat;\nimport java.time.*;\nimpo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"53ee0344-d9d9-48b3-85d3-2ea609732653","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.utils.DuctCollectionUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.platform.metadata.ComplexType;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n@Service\npublic class ZohoV2ToOMDConverterServiceImpl implements OMDConverterBaseService{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ZohoV2ToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private static final String API_NA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8caccf95-11f7-41c0-9118-f057f1cc4bf6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":533,"endLine":558,"content":";\n        }\n        long createdCount = 0l, updatedCount = 0l;\n        if (countersMap.get(\"CREATED_OBJECTS\") != null) {\n            createdCount = Long.parseLong(String.valueOf(countersMap.get(\"CREATED_OBJECTS\")));\n        }\n        if (countersMap.get(\"UPDATED_OBJECTS\") != null) {\n            updatedCount = Long.parseLong(String.valueOf(countersMap.get(\"UPDATED_OBJECTS\")));\n        }\n        if (countersMap.get(\"ERRORS\") != null) {\n            Map<String, Object> errorData = getErrorDataFromHubspot(ductJobMapping.getConnectionId(), fileId);\n            populateAndSetSourceErrorFile(errorData, ductResponse, ductJobMapping);\n            List<File> files = populateErrorFileFromHubspotResponse(errorData, ductJobMapping, ductResponse);\n            uploadAndErrorFile(ductJobMapping, ductResponse, files.get(0), files.get(1));\n            ductResponse.setSuccessRecords(ductResponse.getTotalNumberOfRecords() - ductResponse.getFailedRecords() < 0\n                    ? 0 : ductResponse.getTotalNumberOfRecords() - ductResponse.getFailedRecords());\n        } else {\n            ductResponse.setSuccessRecords(ductResponse.getTotalNumberOfRecords());\n            ductResponse.setExternalSuccessFileLocation(ductJobMapping.getCaasFileInfo().getFileName());\n        }\n\n        log.info(\"Success count : {} , total count : {} , failed count : {} \", ductResponse.getSuccessRecords(),\n                ductResponse.getTotalNumberOfRecords(), ductResponse.getFailedRecords());\n    }\n\n    private void po","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"946a4bb2-667a-4ed1-aca1-6eee3d8bc9f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Order(400)\n@Service\n@Slf4j\npublic class HubspotValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.HUBSPOT;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8b8011d0-b4b8-4dd8-9885-20d5e9798992","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":621,"endLine":635,"content":"NAMICS_ACTION_ENABLED,\n                FeatureToggleUtil.evaluateBooleanFeature(LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()));\n\n        if (null != ductJobMapping.getCriteria()) {\n            log.info(\"Generating filter query for Dynamics connector with jobId: {}\", ductJobMapping.getJobId());\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n            CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.DYNAMICS, pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> metaInfoDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo,\n                    false, ductJobMapping);\n            String filterQuery;\n            try {\n                Map<String, Map<String, Object>> objectToFieldDBNameToGSDataTypeMap = new HashMap<>();\n                Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap = new HashMap<>();\n                objectToFieldDBNameToGSDataTypeMap.put(ductJobMapping.getResourceName(), metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                objectToFieldDBNameToFieldDefinitionMap.put(ductJobMapping.getResourceName(), metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de7fbff0-f225-41f3-96fa-185f72d81f37","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/TimelineLoadServiceImpl.java","startLine":1,"endLine":45,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.commons.gsobjects.ImportLookupLite;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.dto.ExternalActivityRequestDto;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class TimelineLoadServiceImpl implements GainsightLoadService {\n\n    @Override\n    public GSModule getType() {\n        return GSModule.TIMELINE;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return \"Activity_Timeline\".equalsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2f12ae7-3796-4ba2-8f13-10704a16bb30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":26,"endLine":45,"content":" String TEAM_NAME = \"teamName\";\n    public static final String VERSION = \"version\";\n    public static final String USE_LATEST = \"useLatest\";\n    public static final String PARENTS = \"parents\";\n    public static final String TASK_TIMEOUT_MINS = \"taskTimeoutMins\";\n    public static final String CONNECTORS = \"connectors\";\n    public static final String CLOUD_API_BASE_URL = \"/elements/api-v2/\";\n    public static final String OBJECTS_CALL_CACHE_KEY_FORMAT = \"Objects_Call_Cached__%s__%s\";\n    public static final String SRC_OBJECTS_WITH_OVERRIDDEN_CALL_CACHE_KEY_FORMAT = \"SRC_Objects_With_Overridden_Call_Cached__%s__%s\";\n    public static final String MS_DYNAMICS_ACCESS_KEY_CACHE_FORMAT = \"MS_Dynamics_Access_key_Cached__%s__%s\";\n    public static final String OBJECTS_SUPERCLASS_CACHE_KEY_FORMAT = \"Objects_Superclass_Cached__%s__%s\";\n    public static final String ATTRIBUTES_CALL_CACHE_KEY_FORMAT = \"Attributes_Call_Cached__%s__%s__%s\";\n    public static final String CUSTOM_OBJECTS_KEYWORD = \"CUSTOM_OBJECTS\";\n    public static final String OBJECT_TYPE_ID = \"objectTypeId\";\n    public static final String OBJECT_LEVEL_WRITEBACK_OPERATION = \"objectLevelWritebackOperation\";\n    public static final String SECRET_KEY = \"gsnap.shared.secret\";\n    public static final String SFDC_API_VERSION = \"sfdcApiVersion\";\n    public static final String LABEL_PLURAL = \"labelPlural\";\n    public static final String CAAS_CONNECTION_CONFIG_CACHE_KEY = \"caas\";\n    public static final String USER_OAUTH_ENABLEMEN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5a9d5ce5-4ba0-4312-bcfa-8272801ed8a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConnectionController.java","startLine":164,"endLine":188,"content":"Translation(ex.getErrorCode().name(), ex.getMessage(), RequestContextProvider.getTenantLanguage()));\n        }\n    }\n\n    @DeleteMapping(value = \"/{connectionId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CONNECTORS, level = AuthorizationLevel.DELETE)\n    public ResponseObj deleteConnection(@PathVariable(\"connectionId\") final String connectionId, @RequestParam(required = false, name = \"checkDependgenerey\", defaultValue = \"true\") boolean checkDependency) {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfoFromDB = pnpConnectionInfoDao.findByConnectionId(connectionId);\n            assertNotNull(pnpConnectionsInfoFromDB, CaasValidationCode.CONNECTOR_CONNECTION_INFO_NULL);\n\n            if (checkDependency) {\n                Object dependencies = connectorDependencyFrameworkService.fetchConnectorDependencies(connectionId, pnpConnectionsInfoFromDB.getConnectionType());\n\n                if (!ObjectUtils.isEmpty(dependencies)) {\n                    return new ResponseObj(false, dependencies, CaasValidationCode.CONNECTION_HAS_DEPENDENCY);\n                }\n            }\n\n            if (pnpConnectionsInfoFromDB.getProperties().containsKey(UCConstants.PROJECTS_COUNT) &&\n                    (int) pnpConnectionsInfoFromDB.getProperties().get(UCConstants.PROJECTS_COUNT) > 0) {\n                return new ResponseObj(false, HttpStatus.SC_BAD_REQUEST, CaasValidationCode.CONNECTION_HAS_PROJECT_DEPENDANCY);\n            }\n\n            PNP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a650fcf-e339-4589-8258-1554439059bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":446,"endLine":476,"content":"                .append(\"PropertyValues=\")\n                                .append(valuesAsString)\n                                .append(\")\");\n                    } else if (isMultiSelectPicklist(externalDataType)) {\n                        evaluatedExpression.append(\"Microsoft.Dynamics.CRM.DoesNotContainValues(PropertyName='\")\n                                .append(fieldName)\n                                .append(\"'\")\n                                .append(\",\")\n                                .append(\"PropertyValues=\")\n                                .append(valuesAsString)\n                                .append(\")\");\n                    }\n                }\n                break;\n            default:\n                log.error(\"Operator: {} not supported in filter\", rule.getOp().getFilterOperator());\n                throw new Exception(rule.getOp().getFilterOperator() + \"not supported in filters\");\n        }\n        log.info(\"where condition formed for this criteria is {}\", evaluatedExpression.toString());\n    }\n\n    private static boolean isStringType(String externalType) {\n        List<String> stringTypes = Lists.newArrayList(\"string\", \"lookup\", \"memo\", \"uniqueidentifier\", \"managedproperty\", \"entityname\", \"customer\");\n        return stringTypes.contains(StringUtils.lowerCase(externalType));\n    }\n\n    private static boolean isDateTime(String externalType) {\n        return \"DateTime\".equalsIgnoreCase(externalType);\n    }\n\n    private static boolean isDate(String exter","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d304907-03d5-46c0-a99a-00eef978d28d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/EventUtils.java","startLine":26,"endLine":39,"content":"ntentType(MediaType.APPLICATION_JSON_VALUE)\n                    .setEventData(data);\n            eventService.postEvent(event);\n            log.info(\"Successfully published event : {}\", data);\n        } catch (Exception e) {\n            log.error(\"Failed to publish event\", e);\n        }\n    }\n\n    public static void publishEvent(String topicName, String eventName, String version, Object payload) {\n        publishEvent(EVENT_BASE_URL, EVENT_PUBLISHER_SECRET, topicName, eventName, version, payload);\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5725f13-3a35-4c06-9779-26da6437ef35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":133,"endLine":152,"content":";\n        DuctJobMapping ductJobMapping = ductJobMappingDao.findByJobId(ipaasBulkDownloadCallbackPayload.getJobId());\n        ConnectorsDataHighwayResponseHandler<ResponseObj> responseHandler = connectorsDataHighwayInteractionService.listOutputs(ductJobMapping.getExternalDHJobId());\n        ResponseObj responseObj = responseHandler.getResponseBody();\n        if (responseObj == null || responseHandler.getStatusCode() != 200 || responseObj.getData() == null) {\n            log.error(\"Unable to fetch output of job from data processing stack {}\", responseObj);\n            throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n\n        try {\n            String jobStatus = MAPPER.readTree(MAPPER.writeValueAsString(responseObj.getData())).get(\"jobStatus\").asText();\n            if (\"success\".equalsIgnoreCase(jobStatus)) {\n                log.info(\"Handling success\");\n                String lastTaskId = ductJobMapping.getFreeFormTaskId() == null ? ductJobMapping.getExtractTaskId() : ductJobMapping.getFreeFormTaskId();\n                JsonNode taskResults = getTaskNodeForTaskId(responseObj, lastTaskId);\n                int recordCount = taskResults.get(\"recordCount\").asInt();\n                log.info(\"DH job was successful, uploading file to caas bucket\");\n                log.info(\"External extract was completed with {} records\", recordCount);\n                ductJobMapping.setTotalCount((long) recordCount);\n                char quoteChar = taskResults.get(\"quoteChar\").is","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61179e7c-c6f5-4061-958e-0a99b117a32e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpDelete;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\npublic abstract class DuctConnectorCalloutUtil {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctConnectorCalloutUtil.class);\n    private static final String CONNECTOR_BASE_URL = \"connector.base.url\";\n\n    public static PNPC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3171900e-f1ba-4668-ae4f-ca0aacb410ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":181,"endLine":204,"content":"  queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    public PNPConnectionsInfo getConnectionId(String connectionId) {\n        return pnpConnectionInfoDao.findByConnectionId(connectionId);\n\n    }\n\n    private String filters(List<DuctFilter> ductFilters) throws Exception {\n        if (!CollectionUtils.isEmpty(ductFilters)) {\n            StringBuilder filterBuilder = new StringBuilder();\n            for (DuctFilter ductFilter : ductFilters) {\n                List<Object> value = (ductFilter.getValues() instanceof List) ? (List) ductFilter.getValues() : Collections.singletonList(ductFilter.getValues());\n                if (StringUtils.equals(ductFilter.getDuctOperatorType().getSymbol(), DuctOperatorType.IN.getSymbol()) ||\n                        StringUtils.equals(ductFilter.getDuctOperatorType().getSymbol(), DuctOperatorType.NOT_IN.getSymbol())) {\n                    filterBuilder.append(ductFilter.getFieldName()).append(\" \").append(ductFilter.getDuctOperatorType().getSymbol()).append(\"(\").append(Joiner.on(StringUtils.SPACE).join(value)).append(\",\");\n                } else {\n                    filterBuilder.append(ductFilter.getFieldName()).append(\" \").append(ductFilter.getDuctOperatorType().getSymbol()).append(\"'\").append(value.get(0)).append(\"'\").append(\",\");\n\n                }\n            }\n            filterBuilder.deleteCharAt(filterBuilder.length() - 1);\n            return URLEncoder.encode(filterBuilder","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b5b1f77-aadb-4ede-8e85-4fead0edc3e3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectAttributesConfig.java","startLine":31,"endLine":91,"content":"Set<String> primaryKeys = new HashSet<>();\n  private String lastModifiedFieldName;\n\n  public List<EnhancedGSFieldDefinition> getDefaultObjectAttributes() {\n    return defaultObjectAttributes;\n  }\n\n  public void setDefaultObjectAttributes(List<EnhancedGSFieldDefinition> defaultObjectAttributes) {\n    this.defaultObjectAttributes = defaultObjectAttributes;\n  }\n\n\n  public ConnectorType getConnectorType() {\n    return connectorType;\n  }\n\n  public void setConnectorType(ConnectorType connectorType) {\n    this.connectorType = connectorType;\n  }\n\n  public int getOrder() {\n    return order;\n  }\n\n  public void setOrder(int order) {\n    this.order = order;\n  }\n\n  public Map<String, List<String>> getFilterAttribute() {\n    return filterAttribute;\n  }\n\n  public void setFilterAttribute(Map<String, List<String>> filterAttribute) {\n    this.filterAttribute = filterAttribute;\n  }\n\n  public void setOverrideAttribute(List<Map<String, Object>> overrideAttribute) {\n    this.overrideAttribute = overrideAttribute;\n  }\n\n  public String getObjectName() {\n    return objectName;\n  }\n\n  public void setObjectName(String objectName) {\n    this.objectName = objectName;\n  }\n\n  public List<Map<String, Object>> getOverrideAttribute() {\n    return overrideAttribute;\n  }\n\n  public List<Map<String, Object>> getExcludeAttribute() {\n    return excludeAttribute;\n  }\n\n  public void setExcludeAttribute(List<Map<String, Object>> excludeAttribute) {\n    this.excludeAttribute = excludeAttribute;\n  }\n\n  public String get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef4aed4c-a669-4d53-9257-d8d33227318c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":469,"endLine":496,"content":"Case(externalType));\n    }\n\n    private static boolean isDateTime(String externalType) {\n        return \"DateTime\".equalsIgnoreCase(externalType);\n    }\n\n    private static boolean isDate(String externalType) {\n        return \"Date\".equalsIgnoreCase(externalType);\n    }\n\n    private static boolean isPicklist(String externalType) {\n        return \"Picklist\".equalsIgnoreCase(externalType) || \"State\".equalsIgnoreCase(externalType) || \"Status\".equalsIgnoreCase(externalType);\n    }\n\n    private static boolean isMultiSelectPicklist(String externalType) {\n        return (StringUtils.isNotEmpty(externalType) && \"MULTISELECTDROPDOWNLIST\".equalsIgnoreCase(externalType));\n    }\n\n    private static String computeCanonicalNameForFilter(Map<String, String> masterLookUpConfiguration, String lookupFieldName, String lookedUpObjectName,\n                                                        String targetFieldName, String baseObjectPluralName, List<Relationship> relationships, boolean isTargetFieldOfTypeLookup) {\n        String targetField = isTargetFieldOfTypeLookup ? String.format(VALUE_FIELD, targetFieldName) : targetFieldName;\n        String propertyValue = masterLookUpConfiguration.get(baseObjectPluralName + \"@@\" + lookupFieldName);\n        String canonicalName;\n        if (StringUtils.isNotEmpty(propertyValue)) {\n            canonicalName = propertyValue + UCConstants.FORWARD_SLASH + targetField;\n        } else {\n            String referencingAttribute = DynamicsGainsightUtils.getReferen","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"95908756-d1db-47ad-9ece-cb777f90fc91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":242,"endLine":267,"content":"ctResponse(ductJobMapping, response, finalResponse));\n            }\n        } catch (CaasException e) {\n            log.error(\"Exception in updateData \", e);\n            throw e;\n        } catch (Exception e) {\n            log.error(\"Exception in updateData \", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(finalResponse).ductStatus(DuctStatus.SUCCESS).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                .totalNumberOfRecords(1).jobId(ductJobMapping.getJobId()).build();\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        Map<String, Object> finalResponse;\n        HubspotTokenDetails accessDetailsFromDB;\n        File file = null;\n        try {\n            hubspotBulkWriteBackValidationService.validateHubspotWriteBackPayload(ductJobMapping);\n            accessDetailsFromDB = extractAccessDetails(ductJobMapping.getConnectionId());\n            HttpResponse response = null;\n            GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFact","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ad080af-fa7e-441d-b00d-b1b6354fbfe7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":309,"endLine":335,"content":"        extractedData = (Map<String, Object>) request.getProperties().get(DuctConstants.DYNAMICS_RAW_META_DATA);\n            }\n            recordsResponse = msDynamicsDataService.getPaginatedRecords(getRecordsRequest, DynamicsGainsightUtils.fetchMapFromConfigServer(),\n                    extractedData, request.getNextPageToken(), request.getLimit(), resolvePicklistOptions);\n        }\n\n        Map<String, Object> externalResponse = new HashMap<>();\n        externalResponse.put(RECORDS_KEYWORD, recordsResponse.getRecords());\n        DuctResponse ductResponse = DuctResponse.builder().externalSystemResponse(externalResponse).nextPageToken(recordsResponse.getBatchQuery())\n                .tenantId(request.getTenantId()).connectionId(request.getConnectionId())\n                .totalNumberOfRecords(recordsResponse.getNumberOfRecords())\n                .jobId(request.getJobId()).build();\n        FileUtils.deleteQuietly(recordsResponse.getCsvFile());\n        stopWatch.stop();\n        log.info(\"dynamics jobId: {} recordCount: {} nextPageToken: {} in time: {} MS\", jobId, recordsResponse.getNumberOfRecords(),\n                recordsResponse.getBatchQuery(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n\n        if (recordsResponse.getNoRecords()) {\n            ductResponse.setDuctStatus(DuctStatus.NO_DATA_FOUND);\n        } else {\n            ductResponse.setDuctStatus(DuctStatus.SUCCESS);\n        }\n        return ductResponse;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedDa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f43aefe1-9a48-4d28-8ac0-926ee5960033","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":117,"endLine":157,"content":"SQLClause(ConnectorType connectorType, FilterRule rule) {\n    if (Objects.isNull(connectorType)) {\n      return null;\n    }\n    switch (connectorType) {\n      case BIGQUERY:\n        return Operators.getBQSqlClause(rule.getOp());\n      case SAP_DATASPHERE:\n        return Operators.getSAPSqlClause(rule.getOp());\n      default:\n        return Operators.getSqlClause(rule.getOp());\n    }\n\n  }\n\n    private static String replaceLeft(String sql, String with) {\n        return sql.replace(\"$left\", with);\n    }\n\n    private static String replaceRight(String sql, String with) {\n        sql = sql.replace(\"$right\", with);\n        return sql;\n    }\n\n    private static Object handleValue(Object value, FilterOperator op) {\n        switch (op) {\n            case CONTAINS:\n            case DOES_NOT_CONTAINS:\n                value = \"%\" + value + \"%\";\n                return value;\n            case STARTS_WITH:\n                value = value + \"%\";\n                return value;\n            case ENDS_WITH:\n                value = \"%\" + value;\n                return value;\n            default:\n                return value;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0bfc563-7bd6-4025-9681-100f82866e08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasNativeMetadataServiceImpl.java","startLine":32,"endLine":59,"content":"tConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return !isIpaas;\n    }\n\n    @Override\n    public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n        List<Map<String, Object>> objectList = new ArrayList<>();\n        return transformObjectList(objectList, pnpConnectionsInfo);\n    }\n\n    private List<Map<String, Object>> transformObjectList(List<Map<String, Object>> objectList, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n\n        CaasObjectConfig caasObjectConfig = caasObjectConfigDAO.getCaasObjectConfig(pnpConnectionsInfo.getConnectionType());\n        CaasObjectTenantConfig caasObjectTenantConfig = caasObjectTenantConfigDAO.getTenantSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId());\n        CaasObjectTenantConfig connectionIDSpecificCaasObjectTenantConfig = caasObjectTenantConfigDAO.getConnectionIdSpecificObjectConfigs(\n                pnpConnectionsInfo.getConnectionType(), RequestContextProvider.getTenantId(), pnpConnectionsInfo.getConnectionId());\n\n        List<Map<String, Object>> filteredAndEnhancedObjectList = Lists.newArrayList();\n        Set<String> objectIdsSet = new HashSet<>();\n        for (Map<String, Object> object : objectList) {\n            objectIdsSet.add(String.valueOf(object.get(OBJECT_ID)));\n        }\n\n        filteredAndEnhancedObje","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9106cb6-563b-404f-a99a-c94eceaacc35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":29,"endLine":62,"content":"mport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n@Service\n@Slf4j\npublic class FreshdeskToOMDConverterServiceImpl implements OMDConverterBaseService {\n\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final String CUSTOM = \"custom\";\n  private static final String FULL_NAME = \"full_name\";\n  private static final String TYPE = \"type\";\n  private static final String OBJECT_DBNAME = \"objectDBName\";\n  private static final String customFieldPrefix = \"custom_fields.\";\n  private static final String CUSTOM_PREFIX = \"custom_\";\n  private static final String DEFAULT_PREFIX = \"default_\";\n\n  @Autowired\n  CaasConnectorConfigService caasConnectorConfigService;\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType) {\n    return ConnectorType.FRESHDESK.equals(connectorType);\n  }\n\n  @Override\n  public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) {\n\n    CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n    ArrayList<Map<String, Object>> fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n    if (fields.isNull() || (!fields.isArray()) || fields.size() == 0) {\n      retur","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a52dcfb9-ee47-446e-825b-f8972603a0ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.service;\n\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.DuctJobMappingServiceImpl;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.data.ConnectorDataSourceFactory;\nimport com.gainsight.duct.data.HubspotDataSourceService;\nimport com.gainsight.duct.data.SalesforceDataSourceService;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.validation.DuctValidationService;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.queue.db.bean.MessageRequestDTO;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.producer.QueueProducer;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.joda.time.DateTime;\nimport org.junit.jupiter.api.BeforeEach;\nim","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2975ef75-d87f-46c9-a972-42f6c7620116","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":265,"endLine":279,"content":", CoreErrorCode.SYSTEM_ERROR);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  private static CloseableHttpClient getHttpClient() {\n    HttpClientBuilder builder = HttpClient.getApacheHttpClientBuilder();\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(TIMEOUT).setSocketTimeout(TIMEOUT).build();\n    builder.setDefaultRequestConfig(requestConfig);\n    return builder.build();\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5e99557-01f4-4495-9241-b92506aae593","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/MetadataTransformAttributes.java","startLine":1,"endLine":19,"content":"package com.gainsight.duct.beans.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class MetadataTransformAttributes implements Serializable {\n    private boolean creatable;\n    private boolean updatable;\n    private boolean mandatory;\n    private boolean multiValued;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4af37c4-e18f-4efd-bae0-805ad64f7ea8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":201,"endLine":233,"content":"ponseObj.getData(), new TypeReference<Map<String,Object>>(){});\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public CaasConnectorConfig getCaaSConnectorConfig(ConnectorType connectorType) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + CONNECTOR_CONFIG + connectorType.getValue();\n        try {\n            Response response = httpClientService.get(url, headers);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), CaasConnectorConfig.class);\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean syncDataExtract(DuctRequestDTO ductRequestDTO) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + SYNC_DATA_FETCH_PATH;\n        try {\n            Response response = httpClientService.post(url, headers, ductRequestDTO, APPLICATION_JSON_TYPE);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24084070-8da1-46ec-9c93-a4a2d75c550b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":58,"endLine":84,"content":"ry = new GainsightDatabricksChannelFactory();\n        GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n        List<Map<String, Object>> objects = gainsightDatabricksChannelService.listAllObjects();\n        List<Map<String, Object>> returnObj = new ArrayList<>(objects.size());\n        for (Map<String, Object> object : objects) {\n            String objectName;\n            Map<String, Object> retMap = new HashMap<>();\n            if (object.containsKey(\"tableName\")) {\n                objectName = object.get(\"tableName\").toString();\n                retMap.put(UPDATEABLE, true);\n                retMap.put(CREATEABLE, true);\n            } else {\n                objectName = object.get(\"viewName\").toString();\n            }\n            retMap.put(OBJECT_ID, objectName);\n            retMap.put(OBJECT_NAME, objectName);\n            retMap.put(DuctConstants.DescribeMetaConstants.LABEL, objectName);\n            returnObj.add(retMap);\n        }\n        return returnObj;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        validateDatabricksRequest(objectName);\n        GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n        GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b17080c7-178c-428c-9b24-3eec7718bf3d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":53,"endLine":73,"content":"String payload = getOAuthAccessTokenRequestPayload(payloadContentType, oAuthV2TokenDetail, code, grantType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(\"Content-Type\", payloadContentType);\n        headers.put(\"Accept\", MediaType.APPLICATION_JSON_VALUE);\n        return BionicRuleHttpHelper.post(serviceProviderAccessTokenURI, headers, payload, Map.class).getResponseBody();\n    }\n\n    @Override\n    public void getUpdatedPnpConnectionsInfoWithAccessToken(PNPConnectionsInfo pnpConnectionsInfo, Map oauthResponse) {\n        if (MapUtils.isNotEmpty(oauthResponse) && oauthResponse.containsKey(\"access_token\")) {\n            String accessToken = GainsightUtils.valueOf(oauthResponse.get(\"access_token\"));\n            OAuthV2TokenDetail oAuthV2TokenDetail = (OAuthV2TokenDetail) pnpConnectionsInfo.getTokenDetail();\n            if (oauthResponse.containsKey(REFRESH_TOKEN)) {\n                String refreshToken = GainsightUtils.valueOf(oauthResponse.get(\"refresh_token\"));\n                oAuthV2TokenDetail.setRefreshToken(CryptHandler.getInstance().encrypt(refreshToken));\n            }\n            Object expiresInObject = oauthResponse.get(\"expires_in\");\n            Long expiresIn = expiresInObject == null ? null : (Long.valueOf(GainsightUtils.valueOf(expiresInObject)) * 1000) + System.currentTimeMillis();\n            oAuthV2TokenDetail.setExpiry(expiresIn);\n            oAuthV2TokenDetail.setTokenType(GainsightUtils.valueOf(oauthResponse.get(\"token_type\")));\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b15773c-5e8f-465b-8818-9f6159bf025f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/test/java/com/gainsight/integration/service/IpaasBulkFileDownloadServiceImplTest.java","startLine":40,"endLine":59,"content":"actionService;\n\n    @Mock\n    private BaseTenantMasterService service;\n\n    @BeforeAll\n    public void setup() {\n\n        MockitoAnnotations.initMocks(this);\n    }\n\n    //    @Test\n    public void test() throws CaasException {\n        DuctJobMapping ductJobMapping = new DuctJobMapping();\n        ductJobMapping.setFields(new ArrayList<>(Arrays.asList(new String[]{\"hs_lastmodified_At\", \"associations.contacts.results[*].id\"})));\n        File file = new File(\"/Users/aagrawal/Documents/CAAS/gs-duct/duct-dbq-worker/src/test/resources/data.csv\");\n\n        ipaasBulkFileDownloadService.updateFileHeaders(file, ductJobMapping, '\\\"', '\\\"');\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a432ecdb-fc87-4c28-a5a2-768112462f6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":361,"endLine":381,"content":"\", hubspotAccountMap.get(\"timeZone\"));\n            pnpConnectionProperties.put(\"CURRENCY\", hubspotAccountMap.get(\"currency\"));\n            pnpConnectionProperties.put(\"UTC_OFFSET_IN_MILLIS\", hubspotAccountMap.get(\"utcOffsetMilliseconds\"));\n            pnpConnectionProperties.put(\"UTC_OFFSET\", hubspotAccountMap.get(\"utcOffset\"));\n        } catch (Exception e) {\n            throw new SystemException(CaasValidationCode.ERROR_POPULATING_PROPERTIES.getUserText(), e);\n        }\n    }\n\n    private BaseTokenDetail getTokenDetailForHubspot(OAuthDetail oAuthDetail, String jsonString) {\n        try {\n            Map<String, Object> map = GainsightUtils.OBJECT_MAPPER.readValue(jsonString, new TypeReference<Map<String, Object>>() {\n            });\n            Object expiresInObject = map.get(\"expires_in\");\n            Long expiresIn = expiresInObject == null ? null : Long.valueOf(GainsightUtils.valueOf(expiresInObject));\n            BaseTokenDetail tokenDetail =\n                    new BaseTokenDetail(CryptHandler.getInstance().encrypt(GainsightUtils.valueOf(map.get(\"access_token\"))), CryptHandler.getInstance()\n                            .encrypt(GainsightUtils.valueOf(map.get(\"refresh_token\"))), expiresIn, GainsightUtils\n                            .valueOf(map.get(\"token_type\")));\n            tokenDetail.setClientId(SecretData.fromValue(CryptHandler.getInstance().decrypt(oAuthDetail.getClientId())));\n            tokenDetail.setClientSecret(SecretData.fromValue(CryptHandler.getInstance(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d98e7feb-5678-425c-8a6a-eeca9ae7296d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorService.java","startLine":1,"endLine":12,"content":"package com.gainsight.duct.metadata.engine.generator;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface SchemaGeneratorService {\n    List<GSFieldDefinition> generateSchemaFromData(MetadataGenerationDetails metadataGenerationDetails, JsonNode data, Map<String, Object> objectDefinition, String fieldNamePrefix);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f3e8e6c-6c9b-47a9-843f-c47bf5bca697","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctValidationRequestDTO.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class DuctValidationRequestDTO {\n\n    private String connectionId;\n    private String resourceName;\n    private Criteria criteria;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe634234-7724-4534-9bfc-f4f0e1e278ad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/NotificationDetail.java","startLine":1,"endLine":52,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Set;\n\n/**\n * User: sdugar\n * Date: 20/1/15\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class NotificationDetail implements Serializable {\n  private static final long serialVersionUID = -1L;\n\n  private Set<String> successRecipients;\n  private Set<String> failureRecipients;\n\n  public Set<String> getSuccessRecipients() {\n    successRecipients = GainsightCollectionUtils.nullSafeSet(successRecipients);\n    successRecipients.removeIf(StringUtils::isBlank);\n    return successRecipients;\n  }\n\n  public void setSuccessRecipients(Set<String> successRecipients) {\n    this.successRecipients = successRecipients;\n  }\n\n  public Set<String> getFailureRecipients() {\n    failureRecipients = GainsightCollectionUtils.nullSafeSet(failureRecipients);\n    failureRecipients.removeIf(StringUtils::isBlank);\n    return failureRecipients;\n  }\n\n  public void setFailureRecipients(Set<String> failureRecipients) {\n    this.failureRecipients = failureRecipients;\n  }\n\n  @Override\n  public String toString() {\n    return \"NotificationDetail{\" +\n        \"successRecipients=\" + successRecipients +\n        \", failureRecipients=\" + failureRecipients +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eb94166f-0790-4d82-9ed8-3b2247c06c13","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":136,"endLine":152,"content":"eam().filter(i -> i.getAuthType().name().equals(pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails authDetails = authInfoOptional.get();\n        AuthorizationUrl authorizationUrl = authDetails.getAuthorizationUrl();\n        OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"nativeEnabled\", true);\n        properties.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n        Map<String, Object> flattenConnectionInfoWithOAuthAndCallbackUrl = null;\n        String authUrl = null;\n        try {\n            flattenConnectionInfoWithOAuthAndCallbackUrl = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0118d64c-5aee-40cc-bcdd-d9ee587c0aa7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":27,"endLine":66,"content":"org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@Service\n@Slf4j\npublic class EnhanceMetadataServiceImpl implements EnhanceMetadataService{\n\n    private final String FIELD_NAME = \"fieldName\";\n    private final String DB_NAME = \"dbName\";\n    private final String DATA_TYPE = \"dataType\";\n    private final String LABEL = \"label\";\n    private final String PATH = \"path\";\n    private final String META = \"meta\";\n    private final String LAST_MODIFIED_DATE = \"lastModifiedDate\";\n    private final String TYPE = \"type\";\n    private final String SAVE_TYPE = \"saveType\";\n    private final String VENDOR_NATIVE_TYPE = \"vendorNativeType\";\n    private final String VENDOR_DISPLAY_NAME = \"vendorDisplayName\";\n    private Gson gson = new Gson();\n\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n    @Autowired\n    private DuctService ductService;\n\n    @Autowired\n    private MetadataCacheDao metadataCacheDao;\n\n    @Override\n    public void saveTheEnhancedMetaData(String connectionId, String object, List<Map<String, Object>> fieldInfos,\n                                           FieldSaveType saveType) throws CaasException {\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        Li","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba1c9cee-619d-4904-a45c-05f5125e4ecb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackHubspotMessageProcessor.java","startLine":29,"endLine":67,"content":"n;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class WriteBackHubspotMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private DuctService ductService;\n\n    @Autowired\n    public WriteBackHubspotMessageProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                log.info(\"Received packet : {} for tenant id : {} \",messageRequestVO.getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e584962-e94d-463d-95d9-6511b2f02f7f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":73,"endLine":118,"content":"import java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\nimport static utils.Constants.STATUS;\n\n@Slf4j\n@Service\n@Order(200)\npublic class DuctMSDynamicsExtractService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String CAAS_DYNAMICS_EXTRACT_TASK = \"CaasDynamicsExtract\";\n    private static final String RECORDS_KEYWORD = \"records\";\n    private static final String ACCESS_TOKEN_EXPIRED = \"Status Line: 401 Unauthorized\";\n\n    @Autowired\n    private OAuthClientService oAuthClientService;\n\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n\n    @Autowired\n    private MSDynamicsDataService msDynamicsDataService;\n\n    @Autowired\n    private MSDynamicsDataServiceV2 msDynamicsDataServiceV2;\n\n    @Autowired\n    private RedisCacheUtility redisCacheUtility;\n\n    @Autowired\n    public CaasMetadataFactory caasMetadataFactory;\n\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n/* private String generateDateFilter(String filter, String modifiedOnField, DateTime startDate, DateTime endDate) {\n    StringBuilder dateFilter = new StringBuilder();\n    if (startDate == null && endDate == null) {\n      dateFilter.append(\"\");\n    } else {\n      date","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae382886-dac8-42d3-bdb3-a12e72bdd24a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":415,"endLine":433,"content":"yObject.getAllColumns().add(column);\n                collectionMasterService.updateStandardCollection(companyObject);\n            }\n            properties.put(UCConstants.GSIntegration.COMPANY_IDENTIFIER, externalAccountIdFieldName);\n            String externalContactIdFieldName = \"ExternalContactId_\" + StringUtils.capitalize(StringUtils.lowerCase(StringUtils.remove(pnpConnectionsInfo.getCrmId(), \"-\")));\n            CollectionMasterV2 companyPersonObject = collectionMasterService.findOneV2(new CollectionMasterQuery().standardObjectType(StandardObjectType.COMPANYPERSON), false, true, MetadataVersion.getLatestVersion());\n            boolean companyPersonUpdateRequired = false;\n            if (Objects.isNull(companyPersonObject.getColumn(externalContactIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalContactIdFieldName);\n                column.setDisplayName(\"External Contact ID_\" + tenantDomain);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Contact ID from Microsoft Dynamics 365 Tenant, \" + tenantDomain);\n                column.setProperties(prop);\n                companyPersonObject.getAllColumns().add(column);\n                companyPersonUp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56ef1be2-6d4e-4825-b6a1-10c7e5aa8553","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.dh;\n\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.duct.beans.PicklistOption;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.api.client.util.Lists;\nimport com.google.api.client.util.Maps;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DataExtractionRequest implements Serializable {\n    private String objectName;\n    private String orgToken;\n    private SecretData instanceToken;\n    private SecretData userToken;\n    private List<FieldInfo> fields;\n    private Map<String, Object> properties = Maps.newHashMap();\n    private ConnectorType connectorType;\n    private String jobId;\n    private String ucId;\n    private String nextPage;\n    private String orderByInfoField;\n    private String cloudElementsBaseUrl;\n    private boolean dateTimeConversionRequired;\n    private List<String> excludedStrings = Lists.newArrayList();\n    private boolean honourLastModfiedFieldValueToFetchDeltaData;\n    private int defaultSleepTimeOnFail;\n    private int maxNoOfRetries;\n    private String queryParamForDataFetch;\n\n    private List<String> ductFields;\n    private String filterQeueryParams;\n    private boolean isDuct;\n\n    public","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b8e8eb9-059f-4bc0-9c07-7957552cb9e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":207,"endLine":234,"content":"C_USER\"); // TODO Needs discussion on this\n        auditRecord.setRequestSource(\"MDA\"); // TODO Needs discussion on this\n\n        List<String> systemTags = Lists.newArrayList();\n        systemTags.add(UCConstants.UNIFIED_CONNECTOR);\n        systemTags.add(unifiedConnectorRequest.getUC_ID());\n\n        AuditData auditData = new AuditData();\n        auditRecord.setData(auditData);\n        auditRecord.setSystemTags(systemTags);\n\n        switch (auditEntityType) {\n            case CONNECTION:\n                PNPConnectionsInfo pnpConnectionInput = (PNPConnectionsInfo) unifiedConnectorRequest.getRequestObject();\n                String connectionId = pnpConnectionInput.getConnectionId();\n                connectionId = connectionId != null ? connectionId : UCConstants.NULL_CONNECTION_ID_PLACEHOLDER;\n                auditRecord.setSystemId(connectionId);\n                systemTags.add(UCConstants.CONNECTION);\n                systemTags.add(pnpConnectionInput.getConnectionType().toString());\n                auditData.setEntityName(pnpConnectionInput.getConnectionName());\n                auditData.setAuditEntityType(AuditEntityType.CONNECTION);\n                auditData.setConnectorType(pnpConnectionInput.getConnectionType());\n                if (eventStatusEnum.equals(EventStatusEnum.SUCCESS)) {\n                    auditData.setEntityID(connectionId);\n                }\n                break;\n            case JOB:\n                DuctJobMapping ductJobMapping = (DuctJobMapping) unifiedC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7aab34db-813d-4c97-9904-d1115c749235","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":105,"endLine":122,"content":"bject> queryParams) throws CaasException {\n        Object cacheValue = redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()));\n        Map<String, SObject> sfdcObjects;\n\n        if (cacheValue == null) {\n            GlobalObjects globalObjects;\n            try {\n                HttpResponse response = salesforceMetadataService.getSalesforceObjects(SFDCMetadataTypeEnum.GLOBAL_OBJECT, pnpConnectionsInfo, null);\n                if (null != response && response.getResponseCode() == HttpStatus.SC_OK) {\n                    globalObjects = OBJECT_MAPPER.readValue(response.getRespMsg(), GlobalObjects.class);\n                    sfdcObjects = globalObjects.getSobjects().stream().collect(Collectors.toMap(SObject::getName, Function.identity()));\n                    redisCacheUtility.putValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()), sfdcObjects, 600);\n                } else {\n                    LOGGER.error(\"Error occurred while fetching global objects for tenant: {}\", RequestContextProvider.getTenantId());\n                    throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, response.toString(), null, \"Error occurred while fetching global objects for tenant: {}\"));\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error occurred while fetching global objects for tenant: {}, er","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77e05502-c425-4e7d-bf41-85b04ad0c206","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":479,"endLine":513,"content":"earching-for-Timestamp-Fields\n      // Intercom by default will convert LT from anypoint of day to LT start of the day\n      // so set it to start of next day, so all current day records are returned\n      if (FilterOperator.LT.equals(criteria.getOperatorType())) {\n        Long updatedEpoch = getStartOfNextDayEpoch(Long.parseLong(DuctUtils.valueOf(epoch)));\n        criteria.setValues(Lists.newArrayList(updatedEpoch));\n      }\n\n      /// In case of GT, send end of the previous day, so we pick up all current day records\n      if (FilterOperator.GT.equals(criteria.getOperatorType())) {\n        Long updatedEpoch = getEndOfPreviousDayEpoch(Long.parseLong(DuctUtils.valueOf(epoch)));\n        criteria.setValues(Lists.newArrayList(updatedEpoch));\n      }\n\n    }\n  }\n\n  private static long getEndOfPreviousDayEpoch(Long epoch) {\n    // Convert epoch milliseconds to LocalDate\n    LocalDate date = Instant.ofEpochMilli(epoch * 1000)\n        .atZone(ZoneId.of(\"UTC\"))\n        .toLocalDate();\n\n    // Get the start of the day (midnight) for the given date\n    LocalDateTime startOfDay = date.atStartOfDay();\n\n    // Convert start of day to epoch milliseconds\n    long startOfDayEpochMillis = startOfDay.toInstant(ZoneOffset.UTC).toEpochMilli() / 1000;\n    return Math.max(0, startOfDayEpochMillis - 1);\n  }\n\n  private static long getStartOfNextDayEpoch(Long epoch) {\n    // Convert epoch milliseconds to LocalDate\n    LocalDate date = Instant.ofEpochMilli(epoch * 1000)\n        .atZone(ZoneId.of(\"UTC\"))","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c85de86e-60a9-4158-a720-a6f489aca3da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":133,"endLine":156,"content":"               ValidationConnectorDataSourceFactory validationConnectorDataSourceFactory, MSTeamsEventProcessorService msTeamsEventProcessorService) {\n        this.queueProducer = queueProducer;\n        this.metadataDriver = metadataDriver;\n        this.caasConnectorConfigService = caasConnectorConfigService;\n        this.validationConnectorDataSourceFactory = validationConnectorDataSourceFactory;\n        MESSAGE_INFO = new CheckerMessageInfo();\n        WB_HUBSPOT_MESSAGE_INFO = new WriteBackHubspotMessageInfo();\n        WB_DYNAMICS_MESSAGE_INFO = new WriteBackDynamicsMessageInfo();\n        EXT_DB_SYS_WB_MESSAGE_INFO = new ExternalDataBaseWBMessageInfo();\n        this.ductJobMappingDao = ductJobMappingDao;\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n        this.connectorDataSourceFactory = connectorDataSourceFactory;\n        this.ductValidationService = ductValidationService;\n        this.caasMetadataFactory = caasMetadataFactory;\n        this.gainsightLoadFactory = gainsightLoadFactory;\n        this.zoomEventProcessorService = zoomEventProcessorService;\n        this.engineCommonDataSourceService = engineCommonDataSourceService;\n        this.msTeamsEventProcessorService = msTeamsEventProcessorService;\n    }\n\n    @Override\n    public DuctResponseDTO synchronousFetch(DuctRequestDTO ductRequestDTO) throws CaasException {\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f46d427-d88b-4ddb-9734-29540e2a6606","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionService.java","startLine":1,"endLine":33,"content":"package com.gainsight.duct;\n\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.List;\n\npublic interface DuctConnectionService {\n    List<PNPConnectionInput> getConnections() throws CaasException;\n\n    List<PNPConnectionInput> getAccessKeyConnectionInfo();\n\n    PNPConnectionInput createNewConnection(PNPConnectionInput pnpConnectionInput) throws CaasException;\n\n    PNPConnectionsInfo updateNewConnection(PNPConnectionInput pnpConnectionInput) throws Exception;\n\n    String getAuthorizationUrl(PNPConnectionsInfo pnpConnectionsInfo, String hosturl) throws CaasException;\n\n    List<PNPConnectionInput> findByConnectionType(ConnectorType connectorType) throws CaasException;\n\n    PNPConnectionInput findByConnectionId(String connectionId) throws CaasException;\n\n    void delete(PNPConnectionInput pnpConnectionInput);\n\n    void revokeRequest(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException;\n\n    Boolean authorizeConnection(PNPConnectionsInfo pnpConnectionsInfo , String code) throws Exception;\n\n    Object refreshAccessToken(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e6e3295e-e392-48d9-bd48-fc2475ae8094","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CTALoadServiceImpl.java","startLine":59,"endLine":81,"content":"eploymentProperties.getDeploymentProperties().getValue(\"cockpit.api.base.url\");\n            String url = ctaEndPoint + \"/v2/cockpit/cta\";\n            //check response\n            HttpResponseWrapper<ResponseObj> response = null;\n            if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                response = AdvancedHttpHelper.put(url, headers, JsonUtil.toJsonString(externalDataRequestDto), ResponseObj.class);\n            } else if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                response = AdvancedHttpHelper.post(url, headers, JsonUtil.toJsonString(externalDataRequestDto), ResponseObj.class);\n            }\n            log.info(\"Response from api call : {}\", response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to CTA service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce){\n            throw ce;\n        } catch(Exception e) {\n            log.error(\"Exception occurred while writing data to CTA model : {}\", e.getMessage(), e);\n            throw new CaasException(\"Failed to loading into CTA model\", CaasValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"98ef1b7e-20e0-45bd-bb97-184bb36329f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpResponseWrapper.java","startLine":1,"endLine":40,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules.helper;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n/**\n * Created by: sdugar\n * Date: 9/13/16\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class BionicRuleHttpResponseWrapper<T> implements Serializable {\n  private static final long serialVersionUID = -8367143034851667017L;\n  private int statusCode;\n  private String reasonPhrase;\n  private T responseBody;\n\n  public BionicRuleHttpResponseWrapper(int statusCode, String reasonPhrase, T responseBody) {\n    this.statusCode = statusCode;\n    this.reasonPhrase = reasonPhrase;\n    this.responseBody = responseBody;\n  }\n\n  public int getStatusCode() {\n    return statusCode;\n  }\n\n  public String getReasonPhrase() {\n    return reasonPhrase;\n  }\n\n  public T getResponseBody() {\n    return responseBody;\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0be78816-6d7a-49bb-95fa-b82904afa397","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/CaaSExtractDetails.java","startLine":1,"endLine":50,"content":"package com.gainsight.duct.beans.dh;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.collect.Maps;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Aditya Agrawal\n * <p>\n * Created On: 6-Jun-2023\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class CaaSExtractDetails implements Serializable {\n    public static String EXTRACT_DETAILS_KEY = \"extractDetails\";\n\n    private String connectorId;\n    private Map<String, Object> additionalDetails; //used to store conector specific additional information\n    private String externalEntityName;\n    private List<FieldInfo> projectionClause;\n    private FilterRule whereClause;\n\n    public String getConnectorId() {\n        return connectorId;\n    }\n\n    public void setConnectorId(String connectorId) {\n        this.connectorId = connectorId;\n    }\n\n    public String getExternalEntityName() {\n        return externalEntityName;\n    }\n\n    public void setExternalEntityName(String externalEntityName) {\n        this.externalEntityName = externalEntityName;\n    }\n\n    public Map<String, Object> getAdditionalDetails() {\n        if (this.additionalDetails == null) {\n            return Maps.newHashMap();\n        }\n        return this.additionalDetails;\n    }\n\n    public v","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae96ffd6-65c0-499a-951c-963e9a536bb2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":319,"endLine":344,"content":".per.batch\", 500);\n                FileSplitter splitter = new FileSplitter(file, recordSeparatorPolicy, StandardCharsets.UTF_8.displayName(), maxRecordsPerBatch, maxSplitFileSizeInMB,\n                        targetDir, true);\n                splitFiles = splitter.split();\n            } catch (Exception exception) {\n                log.error(\"Error while splitting the file: {}\", exception.getMessage(), exception);\n                for (File splitFile : splitFiles) {\n                    FileUtils.deleteQuietly(splitFile);\n                }\n                FileUtils.deleteQuietly(file);\n                throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", exception.getMessage()));\n            } finally {\n                FileUtils.deleteQuietly(file);\n            }\n            log.info(\"File split into multiple files successfully. created {} files\", splitFiles.size());\n        } else {\n            splitFiles.add(file);\n        }\n\n        //construct columnName to columnType map\n        Map<String, String> colNameToDataType = new HashMap<>();\n        try {\n            List<String> ignoreSystemFields = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n                    .getValue(\"uc.databricks.system.fields\", \"# Partition Information,# col_name\").split(COMMA));\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService ga","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d4f97ba-526d-42fd-8df7-8cf14337328d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":225,"endLine":248,"content":"onnectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n        if (!first.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        List<Map<String, Object>> data = GainsightCollectionUtils.nullSafeList(OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(DATA), new TypeReference<List<Map<String, Object>>>() {\n        }));\n        responseList.addAll(data);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(responseList);\n        return queryAPIResponseBean;\n    }\n\n    @Override\n    protected String getNameForDHFilterRule(String mapping, String resourceName) {\n        if(StringUtils.isNotEmpty(resourceName) && mapping.matches(\"^[0-9].*\")) {\n                return resourceName + CUSTOM_FIELD_PREFIX + mapping.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n            }\n        return mapping.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93ca01e8-5fbf-4b19-b0d2-a7abcb455487","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/auth/TenantUserRoleTypeServiceImpl.java","startLine":80,"endLine":114,"content":"n userSessionService.findByAuthToken(authorizationToken, AuthTokenType.BIONIC_RULES_DP_SYSTEM_USER);\n  }\n\n  private Pair<RequestInfo, Boolean> getRequestInfo(String jwtToken) {\n    try {\n      JWTClaimsSet jwtClaimsSet = getJwtClaimSet(jwtToken);\n      boolean isValid = validateRequest(jwtClaimsSet);\n      if (!isValid) {\n        return ImmutablePair.of(null, false);\n      }\n      String requestInfoString = jwtClaimsSet.getStringClaim(REQUEST_INFO);\n      if (StringUtils.isBlank(requestInfoString)) {\n        return ImmutablePair.of(null, false);\n      }\n      RequestInfoDTO requestInfoDTO =\n          GainsightUtils.OBJECT_MAPPER_NON_NULL.readValue(requestInfoString, RequestInfoDTO.class);\n      return ImmutablePair.of(new RequestInfo(requestInfoDTO), false);\n    } catch (Exception e) {\n      LOGGER.error(\"Unable to get request info\", e);\n      return ImmutablePair.of(null, true);\n    }\n  }\n\n  private JWTClaimsSet getJwtClaimSet(String encryptedJwtString) throws ParseException, JOSEException {\n    EncryptedJWT jwt = EncryptedJWT.parse(encryptedJwtString);\n    jwt.decrypt(new DirectDecrypter(CryptUtil.getSimpleCryptor().getKey()));\n    return jwt.getJWTClaimsSet();\n  }\n\n  private boolean validateRequest(JWTClaimsSet jwtClaimsSet) {\n    return jwtClaimsSet.getExpirationTime().after(new Date());\n  }\n}new Date());\n  }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60853591-761e-40f4-8ee3-98bc5fe7c3d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectTenantConfigDAOImpl.java","startLine":49,"endLine":74,"content":"PROP).is(connectorType)\n                .and(\"tenantId\").is(tenantId).and(\"connectionId\").is(connectionId));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectTenantConfig> ipaasObjectListTenantListConfig = getMongoTemplate().find(query, CaasObjectTenantConfig.class);\n        if(ipaasObjectListTenantListConfig.size()>1) {\n            throw new CaasException(String.format(\"Duplicate document found for same connector type : %s\", connectorType.getValue()), CaasValidationCode.DUPLICATE_DOCUMENTS_FOUND_CONFIG);\n        }\n        return ipaasObjectListTenantListConfig.size() == 1 ? ipaasObjectListTenantListConfig.get(0) : null;\n    }\n\n    @Override\n    public CaasObjectTenantConfig upsertConfigs(CaasObjectTenantConfig objectListConfig){\n        removeObjectListConfig(objectListConfig.getConnectorType(), objectListConfig.getObjectName(), objectListConfig.getTenantId());\n        objectListConfig.setId(UUID.randomUUID().toString());\n        getMongoTemplate().insert(objectListConfig);\n        return objectListConfig;\n    }\n\n    private void removeObjectListConfig(ConnectorType connectorType, String objectName, String tenantId) {\n        Query query = new Query().addCriteria(Criteria.where(\"connectorType\").is(connectorType));\n        query.addCriteria(Criteria.where(\"objectName\").is(objectName));\n        query.addCriteria(Criteria.where(\"tenantId\").is(tenantId));\n        getMongoTemplate().remove(query, CaasObjectTenantConfig.class);\n    }\n\n    @Override","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f81487d8-80ae-4b49-bcab-f60a4fcd4168","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":121,"endLine":146,"content":"ap<String, String> getHeaders() {\n        Map<String, String> headers = new HashMap<>();\n        String encryptedRequestInfo = RequestContextProvider.getEncryptedRequestInfo(true);\n        String secret = getSimpleCryptor().encrypt(DuctConstants.GSNAP_SECRET).getValue();\n        headers.put(\"requestInfo\", encryptedRequestInfo);\n        headers.put(\"secret\", secret);\n        headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n        headers.put(\"tenantId\", RequestContextProvider.getTenantId());\n        headers.put(Constants.X_REQUEST_ID, RequestContextProvider.getRequestId());\n        String gsEnv = DuctCommonUtils.getEnv();\n        if (gsEnv != null) {\n            headers.put(\"x-gs-environment\", gsEnv);\n        }\n        return headers;\n    }\n\n    public static String authorizationUrl(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) + String.format(\"/v1.0/connector/ipaas/%s/authorizationUrl/%s\",\n                pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.getConnectionId());\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking update connection : {}\", url);\n            response = AdvancedHttpHelper.put(url, headers, \"{}\", ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of update con","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da6bc17d-d9ba-4249-b666-cd09d76d5b1f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":150,"endLine":181,"content":"eturn OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<Map<String, ObjectDefinition>>() {\n            });\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getAttributes(DuctRequestDTO ductRequestDTO) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + SLASH + ductRequestDTO.getConnectionId()\n                + SLASH + ductRequestDTO.getResourceName() + SLASH + ATTRIBUTES + SLASH + OPTIONS_SET;\n        try {\n            Response response = httpClientService.post(url, headers, ductRequestDTO, APPLICATION_JSON_TYPE);\n            ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), new TypeReference<Map<String, ObjectDefinition>>() {\n            });\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n        return null;\n    }\n\n    @Override\n    public CaaSExtractDetails createExtractTask(String ductRequestDTO) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + EXTRACT;\n        try {\n            Response response = httpClientService.post(url, headers, ductRequestDTO, APPLI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d84ca982-335f-465d-9ce3-178af6853841","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":231,"endLine":263,"content":"loymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"total\") != null) {\n            return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n        }\n        return 0;\n    }\n\n    private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n        List spec = DuctUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5d825b0f-ed7a-4ce2-ab1d-ae8821d61016","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":111,"endLine":148,"content":"l) {\n\n            if (CollectionUtils.isNotEmpty(caasObjectConfig.getShowOnlyIncludedObjects())) {\n                for (Map<String, Object> object : objectList) {\n                    if (!caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                        filteredAndEnhancedObjectList.remove(object);\n                        objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                    }\n                }\n            }\n\n            for (Map<String, Object> object : caasObjectConfig.getAddedObjects()) {\n                if ((!objectIdsSet.contains(object.get(OBJECT_ID).toString()))\n                        && caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        }\n\n        /*\n        Adding tenant level object\n         */\n        if (caasObjectTenantConfig != null) {\n            for (Map<String, Object> object : caasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        }\n\n        /*\n        Adding connection id level object\n         */\n        if (connectionIDSpecificCaasO","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6424c727-d9df-4b20-bb8e-987786f5b99f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":25,"endLine":52,"content":"htDatabricksChannelFactory;\nimport com.gainsight.integration.connector.databricks.GainsightDatabricksChannelService;\nimport com.gainsight.integration.utils.file.CsvDataParserBuilder;\nimport com.gainsight.integration.utils.file.CustomRecordSeparatorPolicy;\nimport com.gainsight.integration.utils.file.FileMerger;\nimport com.gainsight.integration.utils.file.FileSplitter;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.batch.item.file.separator.RecordSeparatorPolicy;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StopWatch;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.prefs.CsvPreference;\n\nimport","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e739bf5b-2bef-4e92-a954-da940aabcf06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":25,"endLine":50,"content":"il.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.PERIOD;\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.utils.GainsightUtils.YYYY_MM_DDPATTERN;\n\n@Slf4j\npublic class ODataQueryBuilder {\n    private static final String VALUE_FIELD = \"_%1$s_value\";\n\n    public static String createQuery(FilterRule filterRule, Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap,\n                                     List<Relationship> relationships, String baseObjectPluralName, String objectName, Map<String, String> masterLookUpConfiguration,\n                                     boolean fieldsFlattened) throws Exception {\n        try {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.append(createFilterQueryFromEachRule(filterRule, objectToFieldDBNameToFieldDefinitionMap, relationships,\n                    objectName, baseObjectPluralName, masterLookUpConfiguration, fieldsFlattened));\n            log.info(\"Final where clause created : {}\", stringBuilder);\n            return stringBuilder.toString();\n        } catch (Exception exception) {\n            throw exception;\n        }\n    }\n\n    private static String createFilterQueryFromEachRule(FilterRule filterRule, Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap,\n                                                        List<Relationship> relationships, Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f73265fc-279e-4b50-8005-dc8c53a5cdac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":185,"endLine":221,"content":"uctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        return queryAPIResponseBean;\n    }\n\n    @SneakyThrows\n    private void runCopyManager(String jobId, String objectName, String query, String url, Properties prop, List<File> extractedFiles, Map<String, Object> properties) {\n        Connection jdbcConnection = null;\n        String tempStageName = null;\n        ResultSet resultSet = null;\n        PreparedStatement preparedStatement = null;\n        try {\n            log.info(\"Running snowflake copy manager\");\n\n            SnowflakeDriver snowflakeDriver = new SnowflakeDriver();\n            jdbcConnection = snowflakeDriver.connect(url, prop);\n\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8a833d1-1ae9-440f-a5cc-64c3f7ef4033","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":91,"endLine":119,"content":"String fileName) {\n        return gainsightS3.doesObjectExist(bucketName, fileName);\n    }\n\n    public static void deleteObjectsInS3Folder(String folderPath) {\n        for (S3ObjectSummary file : listFiles(folderPath)) {\n            LOGGER.info(String.format(\"{unified connector}{jId:%s}Deleting file on S3 @ path %s started\", null, file.getKey()));\n            try {\n                gainsightS3.deleteFile(CAAS_BUCKET_NAME, file.getKey());\n            } catch (AmazonS3Exception exception) {\n                LOGGER.error(String.format(\"Unable to delete File at S3 @path : %s\", file.getKey()), exception);\n            }\n            LOGGER.error(String.format(\" Successfully deleted File at S3 @path : %s\", file.getKey()));\n        }\n    }\n\n    public static void copyObjectsInS3Folder(String sourceFilePath,String destinationFilePath) {\n        try {\n            gainsightS3.copyObject(CAAS_BUCKET_NAME, sourceFilePath, CAAS_BUCKET_NAME, destinationFilePath);\n        } catch (AmazonS3Exception exception) {\n            LOGGER.error(String.format(\"Unable to copy File at S3 @path : %s\", destinationFilePath), exception);\n        }\n        LOGGER.error(String.format(\" Successfully copy File at S3 @path : %s\", destinationFilePath));\n    }\n\n    public static void copyObjectsInS3Folder(String sourceBucket, String sourceFilePath, String targetBucket, String destinationFilePath) {\n        try {\n            if(targetBucket.equals(sourceBucket) && destinationFilePath.equals(sourceFilePath)) {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1a5ef615-458e-49bb-b3fe-0a1b48c78143","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/OperatorType.java","startLine":1,"endLine":32,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by vgautam on 09/05/18.\n */\npublic enum OperatorType {\n\n    //Organized as display name, symbol, alias\n    //Example Equals, = , eq\n    //Server builds the query from display name, SalesForce will send alias.\n    EQ(\"=\", \"=\", \"eq\", \"$left = $right\", OperandType.BINARY),\n    NE(\"!=\", \"!=\", \"ne\", \"$left != $right\", OperandType.BINARY),\n    LT(\"<\", \"<\", \"lt\", \"$left < $right\", OperandType.BINARY),\n    LTE(\"<=\", \"<=\", \"lte\", \"$left <= $right\", OperandType.BINARY),\n    GT(\">\", \">\", \"gt\", \"$left > $right\", OperandType.BINARY),\n    GTE(\">=\", \">=\", \"gte\", \"$left >= $right\", OperandType.BINARY),\n    IN(\"In\", \"IN\", \"in\", \"$left IN ($right)\", OperandType.BINARY),\n    NOT_IN(\"Not In\", \"NOT IN\", \"nin\", \"$left NOT IN ($right)\", OperandType.BINARY),\n    LIKE(\"Like\", \"LIKE\", \"like\", \"$left LIKE $right\", OperandType.BINARY),\n    CONTAINS(\"Like\", \"LIKE\", \"contains\", \"$left ILIKE $right\", OperandType.BINARY),\n    NOT_CONTAINS(\"Like\", \"LIKE\", \"notContains\", \"$left NOT ILIKE $right\", OperandType.BINARY),\n    STARTS_WITH(\"LIKE\", \"LIKE\", \"startsWith\", \"$left ILIKE $right\", OperandType.BINARY),\n    ENDS_WITH(\"Ends With\", \"ILIKE\", \"endsWith\", \"$left ILIKE $right\", OperandType.BINARY),\n    //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n    INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", Oper","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f37ec4b-7943-4af0-840c-46c5d87b40ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GainsightPXFieldDescription.java","startLine":126,"endLine":143,"content":"escription='\" + description + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", state='\" + state + '\\'' +\n                \", origin='\" + origin + '\\'' +\n                \", defaultValue='\" + defaultValue + '\\'' +\n                \", canonicalName='\" + canonicalName + '\\'' +\n                \", referenceTo=\" + referenceTo +\n                '}';\n    }\n\n    public String getCanonicalName() {\n        return canonicalName;\n    }\n\n    public void setCanonicalName(String canonicalName) {\n        this.canonicalName = canonicalName;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74d57ad4-07ba-42f4-99ac-7708977c94f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":129,"endLine":144,"content":"tReplaceByPath());\n                if (valueFromConnectionInfo == null)\n                    throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n                String url = String.format(OBJECTS_URL, externalUrlDetails.getUrl().replace(externalUrlDetails.getDynamicRegex(), valueFromConnectionInfo.toString()));\n\n                HttpGet httpGet = new HttpGet();\n                HttpClient httpClient = HttpClients.createDefault();\n                URIBuilder uriBuilder = new URIBuilder(url);\n                AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n               Optional< AuthDetails > authDetailsOp = metadataEngineConfig.getAuthInfo().stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n                if (!authDetailsOp.isPresent())\n                    throw new Exception(\"Auth Type not present\");\n                Optional<AuthApiAttributes> authApiAttributes= authDetailsOp.get().getHeaderDetails().stream().filter(header -> header.getTokenGenerationDetails() != null).findFirst();\n                if(!authApiAttributes.isPresent())\n                    throw new Exception(\"Auth Api Attributes not present\");\n                httpGet.addHeader(UCConstants.AUTHORIZATION, String.format(\"Bearer %s\", authService.constructValueFromConfig(metadataEngineConfig,authApiAttributes.get(), pnpConnectionsInfo,flattene","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c4ee4d9-6adc-4bf9-a15e-89a9a4e82b98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/WebClient.java","startLine":39,"endLine":65,"content":"reated by gkallepu on 28-02-2018.\n */\npublic class WebClient {\n    private static final String X_REQUEST_ID = \"X-Request-ID\";\n    public static final RestTemplate restTemplate ;\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final org.codehaus.jackson.map.ObjectMapper CODEHAUS_OBJECT_MAPPER = new org.codehaus.jackson.map.ObjectMapper();\n    private static final Logger LOGGER = LoggerFactory.getLogger(WebClient.class);\n    private static final String SECRET_KEY =\n            DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    static {\n        restTemplate = new RestTemplate();\n        HttpClientBuilder httpClientBuilder = HttpClient.getApacheHttpClientBuilder(Boolean.TRUE, Boolean.TRUE);\n        HttpClient.addRetryHandler(httpClientBuilder);\n        restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(httpClientBuilder.build()));\n    }\n\n    public static <T, R> T makeRestCall(String url, HttpMethod httpMethod, R requestBody, Class<T> clazz, AuthenticationType authType) {\n        return makeRestCall(url, httpMethod, requestBody, clazz, authType, null, false);\n    }\n\n    public static <T, R> T makeRestCall(String url, HttpMethod httpMethod, R requestBody, TypeReference toValueTypeRef,\n                                        AuthenticationType authType) {\n        long startEpoch = System.nanoTime();\n        LOGGER.info(\"Executing Rest Call to {} [method: {}]\", url, httpMethod);\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cfd0dc60-27b5-46c8-bb02-a3e4c012cf96","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":247,"endLine":272,"content":"ES_KEYWORD))) {\n                            externalSystemResponse.put(MEETING_INVITEES_KEYWORD, settingsMap.get(MEETING_INVITEES_KEYWORD));\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(\"Error in fetching meeting invitee details : \", e);\n                }\n            }\n        } catch (CaasException cex) {\n            log.error(\"Error in fetching synchronized data\", cex);\n            throw cex;\n        } catch (Exception e) {\n            log.error(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(null).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(1)\n                .jobId(ductJobMapping.getJobId()).externalResourceName(ductJobMapping.getResourceName()).build();\n    }\n\n    private Map<String, Object> fetchDataFromExternalSystem(String url, TokenDetails tokenDetails) throws CaasException {\n        GainsightZoomFetchService fetchService = new GainsightZoomFetchServiceImpl();\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        try {\n            HttpResponse httpResponse = fetchService.searchData(\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34b37f11-d773-4b25-879e-d22fac7ad75b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":109,"endLine":115,"content":"EventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45a7ea57-5dc2-47c0-8fed-e258b467d966","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":102,"endLine":121,"content":" pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesTenantConfigs =\n                caasObjectAttributesTenantConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), object,\n                        RequestContextProvider.getTenantId(), connectionId);\n\n        CaasObjectAttributesTenantConfig caasObjectAttributesTenantConfig = null;\n        Map<String, Map<String, Object>> fieldsFromTenantOverrideAttribute = new HashMap<>();\n\n        if(CollectionUtils.isNotEmpty(caasObjectAttributesTenantConfigs)){\n            //TODO can only be one. Need to handle this at caasObjectAttributesTenantConfigDAO layer gracefully\n            caasObjectAttributesTenantConfig = caasObjectAttributesTenantConfigs.get(0);\n            if(CollectionUtils.isNotEmpty(caasObjectAttributesTenantConfig.getOverrideAttribute())) {\n                fieldsFromTenantOverrideAttribute = caasObjectAttributesTenantConfig.getOverrideAttribute().stream()\n                        .collect(Collectors.toMap(k -> k.get(MetadataCommonUtil.OVERRIDE_KEY_VALUE).toString(), v -> v));\n            }\n        }else{\n            caasObjectAttributesTenantConfig = new CaasObjectAttributesTenantConfig();\n            caasObjectAttributesTenantConfig.setTenantId(RequestContextProvider.getTenantId());\n            caasObjectAttributesTenantConfig.setObjectName(object);\n            caasObjectAttributesTenantConfig.setConnectorType(pnpCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da1fc1ee-2529-49cb-96ec-d2423771a330","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":226,"endLine":245,"content":"ng) value).isEmpty()) {\n            for (String format : SUPPORTED_FORMAT) {\n                try {\n                    LocalDateTime.parse(((String) value), DateTimeFormatter.ofPattern(format));\n                    result = true;\n                } catch (Exception ex) {\n                    log.info(\"Not a valid format\", ex.getMessage());\n                    continue;\n                }\n                if (result) {\n                    gsFieldDefinition.getMeta().getProperties().put(FORMAT, format);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"62f2dfe7-cf80-4fdd-9593-f59a5ce57477","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":124,"endLine":141,"content":"DE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEmpty(apiConfigAttributes.getReplaceByIdRegexInPath()))\n                apiConfigAttributes.setPath(apiConfigAttributes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            Map<String,String> queryparam = new HashMap<>();\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryparam);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAtt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d126c5b1-8090-423a-8812-f05dee2e8c8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/EnhancedGSFieldDefinition.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.FieldSaveType;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter @Setter\npublic class EnhancedGSFieldDefinition extends GSFieldDefinition implements Serializable {\n\n    private static final long serialVersionUID = -12232342L;\n    private FieldSaveType fieldSaveType;\n    private Date lastModifiedAt;\n\n    @Override\n    public String toString() {\n        return \"EnhancedGSFieldDefinition{\" +\n                \"fieldSaveType=\" + fieldSaveType +\n                \", lastModifiedAt=\" + lastModifiedAt +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0638b42-e479-400a-ac84-09a7f3267205","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GainsightLoadFactory.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.duct.enums.GSModule;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Component\npublic class GainsightLoadFactory {\n\n    @Autowired\n    private List<GainsightLoadService> gainsightLoadServices;\n\n    private static final Map<GSModule, GainsightLoadService> GAINSIGHT_LOAD_SERVICE_MAP = new HashMap<>();\n\n    public GainsightLoadService getService(String resource) {\n        for(GainsightLoadService dataloadService:gainsightLoadServices) {\n            GAINSIGHT_LOAD_SERVICE_MAP.put(dataloadService.getType(), dataloadService);\n            if(dataloadService.canHandle(resource)) {\n                return dataloadService;\n            }\n        }\n        return GAINSIGHT_LOAD_SERVICE_MAP.get(GSModule.GS_OBJECTS);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85fc3ec8-411f-4262-a86d-280c543dc04d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/Zuorav2ValidationDatasourceService.java","startLine":35,"endLine":55,"content":"lean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnecto","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc7abb1a-372a-417e-a4a8-38e46d05ddb6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":141,"endLine":166,"content":"lateValueIfPresent(field, CREATED_AT, metaProperties, CREATED_AT, String.class);\n                populateValueIfPresent(field, UPDATED_AT, metaProperties, UPDATED_AT, String.class);\n                populateValueIfPresent(field, REMOVABLE, metaProperties, REMOVABLE, Boolean.class);\n                populateValueIfPresent(field, KEY, metaProperties, KEY, String.class);\n                populateValueIfPresent(field, AGENT_DESCRIPTION, metaProperties, AGENT_DESCRIPTION, String.class);\n\n                meta.put(PROPERTIES, metaProperties);\n\n                fieldDefinition.put(META, meta);\n\n                if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n                    DuctCollectionUtils.deepMerge((Map<String, Object>) fieldDefinition.get(META), dataTypeMappingsForField.getMeta());\n                }\n\n                fieldFromObjectDefinition.add(fieldDefinition);\n            }\n//            }\n        } else\n            LOGGER.info(\"Fields is supposed to be an array\");\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n    }\n\n    private void populatePicklistOption(JsonNode field, Map<String, Object> fieldDefinition) {\n        if (field.get(CUSTOM_FIELD_OPTIONS_KEY) != null || field.get(SYSTEM_FIELD_OPTIONS_KEY) != null) {\n            JsonNode picklistValues = field.get(CUSTOM_FIELD_OPTIONS_KEY) == null ? field.get(SYSTEM_FIELD_OPTIONS_KEY) : field.get(CUSTOM_FIELD_OPTIONS_KEY);\n            List<Map> picklistOpti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b9faad2-6dfd-410e-8fbb-538a427f1aec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":302,"endLine":322,"content":"w new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, String connectionId, String consumer, boolean includePicklistOptions) throws CaasException {\n        if(StringUtils.isNotEmpty(connectionId) && !connectionId.equalsIgnoreCase(\"MDA\")) {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            try {\n                CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n                //TODO need handle this validation for metadata override /enhancement\n                CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n                if (connectorConfig.isValidateObjectForMetadata()) {\n                    Map<String, Object> queryParams = Maps.newHashMap();\n                    queryParams.put(\"fetchAll\", String.valueOf(true));\n                    validateObject(objectName, service.getObjects(pnpConnectionsInfo, queryParams));\n                }\n                return service.getObjectAttributes(objectName, pnpConnectionsInfo, includePicklistOptions);\n            } catch (CaasException excp) {\n                lo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd445068-261c-4580-af6d-65b80a5ad890","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.dao;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.utils.JsonUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Repository;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Slf4j\n@Repository\npublic class GsExternalSystemErrorMappingDao extends AbstractCaasDao<GsExternalSystemErrorMapping> implements DuctDao<GsExternalSystemErrorMapping> {\n\n\n    public GsExternalSystemErrorMappingDao(DuctDatabaseTemplateService ucDatabaseTemplateService) {\n        super(ucDatabaseTemplateService, GsExternalSystemErrorMapping.class, \"gs_external_error_mapping\", new GsExternalSystemErrorMappingRowMapper());\n    }\n\n\n    @Override\n    protected Map<String, Object> columnValueMap(GsExternalSystemErrorMapping entity) {\n        Map<String, Object> m = new LinkedHashMap<>();\n        if(entity.getGsErrorCode() != null) {\n            m.put(GsExternalSystemErrorMappingRowMapper.GS_ERROR_CODE_COLUMN, entity.getGsErrorCode());\n        }\n        if(entity.getGsErrorMessage() != null) {\n            m.put(GsExte","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"125162f4-e9b2-49b6-b05c-348310068d04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":608,"endLine":618,"content":"ovider.getRequestId());\n    messageRequestDTO.setTenantId(RequestContextProvider.getTenantId());\n    messageRequestDTO.setSource(\"CAAS\");\n    messageRequestDTO.setExternalId(UUID.randomUUID().toString());\n    String messageId = queueProducer.enqueue(messageRequestDTO);\n    log.info(\"Metadata Generation task -> Packet pushed with message id :{} for tenant id {} \", messageId, metadataGenerationDetails.getTenantId());\n    MetadataGenerationDetails metadataGenerationDetailsDB = metadataGenerationDetailsDao.getDetailsById(metadataGenerationDetails.getJobId());\n    metadataGenerationDetailsDB.setDbqMessageId(messageId);\n    metadataGenerationDetailsDao.update(metadataGenerationDetailsDB);\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9fb718d-f0d2-460b-9445-ccc17985a957","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":117,"endLine":143,"content":"or(\"Error in fetching synchronized data\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(populateNextPageToken(externalSystemResponse)).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse))\n                .jobId(ductJobMapping.getJobId()).build();\n\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"total\") != null) {\n            return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n        }\n        return 0;\n    }\n\n    private String populateNextPageToken(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"paging\") != null) {\n            Map<String, Object> nextPageMap = (Map<String, Object>) externalSystemResponse.get(\"paging\");\n            if (nextPageMap.get(\"next\") != null) {\n                Map<String, String> nextMap = (Map<String, String>) nextPageMap.get(\"next\");\n                return ne","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b656e12a-3c09-44cc-a713-dd947a7a515b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":29,"endLine":53,"content":"nal String GS_ENV_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n\n    public static boolean evaluate(String featureName) {\n        ClientConfig clientConfig = new ClientConfig()\n                .withHost(FEATURE_CONFIG_URL)\n                .withEnvironment(GS_ENV_NAME)\n                .withCredentials(new Credentials()\n                        .withRequestInfo(RequestContextProvider.getRequestInfo())\n                        .withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n        LOGGER.info(String.format(\"Retrieving salesforce connector state from feature toggle service for tenant %s\",RequestContextProvider.getTenantId()));\n        FeatureConfigEvaluationService featureConfigEvaluationService = new FeatureConfigEvaluationServiceImpl().withClientConfig(clientConfig);\n        FeatureVariationDetailDTO result;\n        try {\n            result = featureConfigEvaluationService.evaluate(featureName, RequestContextProvider.getTenantId());\n        } catch (Exception e){\n      LOGGER.error(String.format(\"Exception retrieving salesforce connector state from feature toggle service for tenant %s\",RequestContextProvider.getTenantId()),e);\n            return false;\n        }\n        return Boolean.valueOf(String.valueOf(result.getValue()));\n    }\n\n\n    public static boolean toggleFeature(String featureName, List<String> tenantIds, String variationName){\n        ClientConfig clientConfig = new ClientConfig()\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"019e30ad-476b-4469-928c-5232e97e0a8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/ConnectionAccountDAOImpl.java","startLine":1,"endLine":41,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.bean.UserAuthInfo;\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.database.GainsightMongoConverter;\nimport com.gainsight.duct.beans.account.AccountDetail;\nimport com.gainsight.enums.AccountType;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * User: santa\n * Date: 17/4/14\n * Time: 3:27 PM\n */\n@Repository\npublic class ConnectionAccountDAOImpl extends AbstractEntityDaoImpl<AccountDetail> implements ConnectionAccountDAO {\n    public static final String ACCOUNT_DETAIL_NOTIFICATION_USER_NAME_KEY = \"notificationUserName\";\n    public static final String ACCOUNT_DETAIL_NOTIFICATION_USER_EMAIL_KEY = \"notificationUserEmail\";\n\n    @Autowired\n    protected ConnectionAccountDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, AccountDetail.class, \"tenantId\");\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        MongoTemplate mongoTemplate = getSchemaMongoTemplate();\n        GainsightMongoConverter.setKeyDotReplacement(m","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35f1cb64-00b2-4f06-9a8b-dbd23f753a8b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":173,"endLine":196,"content":"        apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryParam, requestBody);\n      }\n\n      JsonNode jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails());\n      Map<String, Object> externalSystemResponse = new HashMap<>();\n\n      JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n      String dateTimeFormat = getDateTimeFormat(caasConnectorConfig);\n      // post process data according to the needed formats\n      List<Map<String, Object>> postProcessedData = postProcessData(data, dateTimeFieldsMap, ductJobMapping, dateTimeFormat);\n      externalSystemResponse.put(DATA, postProcessedData);\n\n      // Even though we need to process bodyParamDetails for pagination, populated the same details in metadata_engine paginationDetails object in this case\n      // so that we can reuse the existing logic to get next token\n      String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n\n      if (Objects.isNull(nextPageToken) || \"null\".equalsIgnoreCase(nextPageToken)) {\n        nextPageToken = null;\n      }\n\n\n      return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n          tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n          .connectorType(pnpConnectionsInfo.getConnectionTyp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aeda8e24-afe4-478f-bcb2-5ae1f09c0bda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":421,"endLine":444,"content":"}\n        ConnectorDataSourceService dataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.isIpaasConnection());\n        Map<String, Object> metadataForTask = dataSourceService.getMetadataForTask(ductJobMapping, objectDefinition, DHTaskType.EXTERNALTASK, parentId, ductRequestDTO.getFieldNameToFieldAlias());\n        InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n        return metadataForTask;\n    }\n\n    @Override\n    public Object handleEventFromExternalSystem(Object body, ConnectorType connectorType, Map<String, String> headers) throws Exception {\n        switch (connectorType) {\n            case ZOOM:\n                return zoomEventProcessorService.handleEventFromExternalSystemForZoom(body, headers);\n            case MSTEAMS :\n                return msTeamsEventProcessorService.handleEventFromExternalSystemForMSTeams(body, headers);\n            default:\n                throw new Exception(String.format(\"Event notifications not supported for Connector : %s\", connectorType));\n        }\n    }\n\n    private Map createPropertiesForBulkWrite(DuctRequestDTO ductRequestDTO) throws CaasException {\n        Map<String, Object> properties = new HashMap<>();\n        Map<String, DuctDataOperation> objectLevelWritebackOperation = new HashMap<>();\n        if (ductRequestDTO.getResourceName() != null && ductRequestDTO.getDuctDataOperation() != null) {\n            objectLevelWritebackOperation.put(ductReq","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ce7b9e7-0884-4629-8a38-649b1e398080","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":337,"endLine":364,"content":"heLoad = ductStatusSet.iterator().next();\n      ductResponse.setDuctStatus(statusOfTheLoad);\n    } else {\n      ductResponse.setDuctStatus(DuctStatus.COMPLETED);\n      statusOfTheLoad = DuctStatus.PARTIAL_SUCCESS;\n    }\n\n    populateFileLocations(statusOfTheLoad, ductResponse, ductJobMapping, successfulFiles, failedFiles, failedRecords, totalRecords);\n    ductResponse.setTotalNumberOfRecords(totalRecords);\n    ductResponse.setSuccessRecords(recordsAffected);\n    ductResponse.setFailedRecords(failedRecords.get());\n    ductResponse.setErrorMessage((String) externalSystemResponse.getOrDefault(UCConstants.ERROR_MESSAGE, StringUtils.EMPTY));\n    ductResponse.setTenantId(ductJobMapping.getTenantId());\n    ductResponse.setConnectionId(ductJobMapping.getConnectionId());\n    ductResponse.setJobId(ductJobMapping.getJobId());\n    return ductResponse;\n  }\n\n  @Override\n  public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n    QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n    List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(\"data\");\n    queryAPIResponseBean.setRecords(externalResultsList);\n    queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n    return queryAPIResponseBean;\n  }\n\n  private File validateSapDatasphereWriteBackPayload(DuctJobMapping ductJobMapping, Map<String, ObjectDefinition> objectAttributes, Map.Entry<Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1978378-c440-4fa3-9764-8979697d0ce3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":382,"endLine":410,"content":"xception e) {\n                    LOGGER.error(\"Error occurred while trying to find picklist mapping, ignored\", e);\n                }\n            }\n            String pickListLabel = \"\";\n            if (picklistFieldValue.contains(\",\")) {\n                if (picklistFieldValue.startsWith(\"[\")) {\n                    picklistFieldValue = picklistFieldValue.substring(1, picklistFieldValue.length() - 1);\n                }\n                picklistFieldValue = picklistFieldValue.replaceAll(\"\\\"\", \"\");\n                List<String> values = Arrays.asList(picklistFieldValue.split(\",\"));\n                for (String value : values) {\n                    boolean isPicklistPresent = false;\n                    for (PicklistOption option : picklistOptions) {\n                        if (value.equals(option.getPicklistValue())) {\n                            isPicklistPresent = true;\n                            if (picklistFieldValue.startsWith(\"[\")) {\n                                pickListLabel += (\",\\\"\" + option.getPicklistLabel() + \"\\\"\");\n                            } else {\n                                pickListLabel += (\",\" + option.getPicklistLabel() + \"\");\n                            }\n                            break;\n                        }\n                    }\n                    if (!isPicklistPresent)\n                        pickListLabel += (\",\\\"\" + value + \"\\\"\");\n                }\n                pickListLabel = pickListLabel.substring(1);\n                if (picklistField","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e05ec28d-9f60-4f96-ba88-3a4821a5bd84","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":243,"endLine":257,"content":"put(LABEL, objectLabel);\n//        objectDefinition.put(\"requiredFieldsExpression\", GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(\"requiredFieldsExpression\"));\n//        objectDefinition.put(\"upsertKeysExpression\", GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(\"upsertKeysExpression\"));\n        objectDefinition.put(EXPRESSION_FOR_REQUIRED_FIELDS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_REQUIRED_FIELDS));\n        objectDefinition.put(EXPRESSION_FOR_UPSERT_KEYS, GainsightCollectionUtils.nullSafeMap((Map<String, Object>) connectorConfig.getObjectLevelFieldsExpression().get(objectLabel)).get(EXPRESSION_FOR_UPSERT_KEYS));\n\n        List fields = new ArrayList();\n        Map fieldDefinition;\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n        List<Object> pipelineValues = gainsightHubspotFetchProcessor.getPipeLineValues(pnpConnectionsInfo, objectLabel);\n        for (GainsightHubspotFieldDescriptionV3 gainsightHubspo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ef65ee4-cbbe-43dc-9e65-b54019629bab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightHubspotFetchProcessorImpl.java","startLine":89,"endLine":107,"content":"StatusLine().getStatusCode()), httpResponse.getStatusLine().getReasonPhrase(), null, null ,DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE));\n                    throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getStatusLine().getStatusCode()), httpResponse.getStatusLine().getReasonPhrase()));\n                }\n                if (isStandardObject) {\n                    JsonObject jsonObject = new JsonParser()\n                            .parse(IOUtils.toString(httpResponse.getEntity().getContent(), Charset.defaultCharset()))\n                            .getAsJsonObject();\n                    String content = jsonObject.getAsJsonArray(\"results\").toString();\n                    hubspotEntityProperties = MAPPER.readValue(content,\n                            new TypeReference<List<GainsightHubspotFieldDescriptionV3>>() {\n                            });\n                    gainsightHubspotSchemaBean = new GainsightHubspotSchema();\n                    gainsightHubspotSchemaBean.setProperties(hubspotEntityProperties);\n                } else {\n                    JsonNode jsonNode = new ObjectMapper().readTree(httpResponse.getEntity().getContent());\n                    gainsightHubspotSchemaBean = MAPPER.convertValue(jsonNode, GainsightHubspotSchema.class);\n                    hubspotEntityProperties = gainsightHubspotSchemaBean.getProperties();\n                }\n                hubspotEntityProperties.forEach(gainsightHubspotFieldD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04a66891-bb90-41d1-b3df-4b9ed7228e5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/GsExternalSystemErrorMappingDTO.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GsExternalSystemErrorMappingDTO {\n\n    private String gsErrorCode;\n    private String gsErrorMessage;\n    private String externalSystemErrorCode;\n    private String externalSystemErrorMessage;\n    private ConnectorType connectorType;\n    private String message;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6cfd8c13-9fc7-46ea-8ecd-8f302151caaa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":256,"endLine":273,"content":"nnectionHelperUtils.getSSOInstances();\n        if (CollectionUtils.isNotEmpty(ssoInstances)) {\n            DuctConnectionHelperUtils.addNewSSOInstancesToConnectionList(ssoInstances, pnpConnectionInputs);\n        }\n        return pnpConnectionInputs;\n    }\n\n    @Override\n    public Boolean authorizeConnection(PNPConnectionsInfo pnpConnectionsInfo , String code) throws Exception {\n        try {\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n            List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n            Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(com.gainsight.integration.bean.enums.metadata.engine.AuthType.getAuthType(i.getAuthType()))).findFirst();\n            OAuthDetail oAuthDetail = getOAuthDetail(pnpConnectionsInfo);\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, code, null);\n            Object res = authService.getAccessDeatils(authDetailsOp.get().getInitialTokenGenerationDetail(), pnpCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed544faa-9716-401f-a177-d95062f255ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":189,"endLine":208,"content":" present : \");\n        boolean isInvalid = false;\n        for (String object : objects) {\n            operation = DuctDataOperation.valueOf(objectLevelOperationMap.get(object));\n            if (operation == DuctDataOperation.UPSERT || operation == DuctDataOperation.UPDATE) {\n                Set<String> fields = ductJobMapping.getColumnMappings().stream().filter(mapping -> mapping.getObjectName().equals(object)).map(ColumnMapping::getFieldName).collect(Collectors.toSet());\n\n                ObjectDefinition resourceDefinition = metaInfoDefinitionMap.get(object);\n                try {\n                    boolean result = DuctUtils.handleValidationForExpression(resourceDefinition.getExpressionForUpsertKeys(), fields);\n                    if (!result) {\n                        isInvalid = true;\n                        log.error(\"Upsert keys not present -> object : {} , field : {}\", object, getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForUpsertKeys(), resourceDefinition));\n                        errorMessage.append(object).append(\":\").append(getDisplayNamesForFieldNameKeys(resourceDefinition.getExpressionForUpsertKeys(), resourceDefinition));\n                    }\n                } catch (CaasException e) {\n                    log.error(\"Error in validateAllowedUpsertKeys \", e);\n                    throw e;\n                } catch (Exception e) {\n                    log.error(\"Error in validating the upsert keys expression {}, {}\", getDisplayNamesForFieldNameKey","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5b87b7c-4059-4eb5-882d-023e0a17a414","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":108,"endLine":136,"content":"ties, DESCRIPTION, String.class);\n                populateValueIfPresent(field, ACTIVE_FLAG, metaProperties, ACTIVE_FLAG, Boolean.class);\n                populateValueIfPresent(field, ADD_TIME, metaProperties, ADD_TIME, String.class);\n                populateValueIfPresent(field, UPDATE_TIME, metaProperties, UPDATE_TIME, String.class);\n\n                metaProperties.put(SOURCE, FieldSaveType.METADATA_API);\n                meta.put(PROPERTIES, metaProperties);\n\n                fieldDefinition.put(META, meta);\n\n                if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n                    DuctCollectionUtils.deepMerge((Map<String, Object>) fieldDefinition.get(META), dataTypeMappingsForField.getMeta());\n                }\n\n                fieldFromObjectDefinition.add(fieldDefinition);\n            }\n        } else\n            LOGGER.info(\"Fields is supposed to be an array\");\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n    }\n\n    private void populatePicklistOption(JsonNode field, Map<String, Object> fieldDefinition) {\n        if (field.get(OPTIONS) != null) {\n            JsonNode picklistValues = field.get(OPTIONS);\n            List<Map> picklistOptions = new ArrayList<>();\n            for (JsonNode option : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(VALUE, option.get(ID).asText());\n                picklistOption.put(LABE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"70389c71-f906-4b96-8480-d07ebdc24856","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/RetryHandler.java","startLine":44,"endLine":79,"content":" if (executionCount >= this.retryCount) {\n      // Do not retry if max\n      canRetry = false;\n    } else if (exception instanceof HttpHostConnectException) {\n      // network unreachable, retry\n      canRetry = true;\n    } else if (exception instanceof InterruptedIOException) {\n      // Timeout, retry\n      canRetry = true;\n    } else if (exception instanceof ConnectTimeoutException) {\n      // Connection refused, retry\n      canRetry = true;\n    } else if (exception instanceof SocketTimeoutException) {\n      // socket timeout, retry\n      canRetry = true;\n    } else if (exception instanceof SSLException) {\n      // SSL handshake exception\n      canRetry = false;\n    } else if (exception instanceof UnknownHostException) {\n      // Unknown host\n      canRetry = false;\n    } else {\n      HttpClientContext clientContext = HttpClientContext.adapt(context);\n      HttpRequest request = clientContext.getRequest();\n      boolean idempotent = !(request instanceof HttpEntityEnclosingRequest);\n      if (idempotent) {\n        // Retry if the request is considered idempotent\n        canRetry = true;\n      }\n    }\n    if (canRetry) {\n      LOGGER.warn(\"Retrying to connect to {} with try number: {}\", requestURL, executionCount);\n    }\n    return canRetry;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8c498408-91d3-4a32-b001-0d0e6ef71eda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":89,"endLine":118,"content":"for %s ucRequestId. Returning back first record\", ucRequestId));\n            return null;\n        } else if (auditDataList.size() > 1) {\n            LOGGER.error(String.format(\"Found Multiple Audit Records for %s ucRequestId. Returning back first record.\", ucRequestId));\n        }\n        return auditDataList.get(0);\n    }\n\n\n\n    @Override\n    public List<AuditRecord> getConnectionTopAuditLogs(ConnectorType connectorType, AuditEntityType auditEntityType, int limit, int offset) {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(AUDIT_SERVICE_AUDIT_TOKEN, AUDIT_SERVICE_AUDIT_TOKEN_VALUE);\n        String auditServiceGetURL;\n        Response response;\n        Map<String, Object> queryMap = Maps.newHashMap();\n        queryMap.put(UCConstants.SYSTEM_TAGS, getCommaSeparatedQueryParams(connectorType.name(), auditEntityType.name()));\n        queryMap.put(\"limit\", limit);\n        queryMap.put(\"offset\", offset);\n        queryMap.put(\"endDate\", new DateTime(DateTimeZone.UTC).toString(UCConstants.PNP_DATE_FORMAT));\n        queryMap.put(\"startDate\", UCConstants.EPOCH_START_DATE);\n        try {\n            auditServiceGetURL = AUDIT_SERVICE_END_POINT + UCConstants.QUESTION_MARK + getQueryParams(queryMap);\n            response = httpClientService.get(auditServiceGetURL, headers);\n        } catch (Exception e) {\n            LOGGER.error(\"Unable to get Connection Audit Records for from Audit Service\", e);\n            return Lists.newArrayList();\n        }\n        re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b758afe9-4513-4873-978a-3f1f2559668f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/bean/health/HealthStatus.java","startLine":1,"endLine":12,"content":"package com.gainsight.bean.health;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class HealthStatus {\n    private String name;\n    private String type;\n    private String status;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad861f19-b373-47f9-8c5c-b8c311247fd1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":119,"endLine":139,"content":"nectorConfig connectorConfig) {\n        Map<String, Object> retMap = new HashMap<>();\n        Map<String, Object> meta = Maps.newHashMap();\n        Map<String, Object> metaProperties = new HashMap<>();\n        String fieldDataType = String.valueOf(fieldDetails.get(\"data_type\")).toLowerCase();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n        retMap.put(FIELD_NAME, String.valueOf(fieldDetails.get(\"col_name\")));\n        retMap.put(DB_NAME, String.valueOf(fieldDetails.get(\"col_name\")));\n        retMap.put(DuctConstants.DescribeMetaConstants.LABEL, String.valueOf(fieldDetails.get(\"col_name\")));\n        retMap.put(OBJECT_LABEL, objectName);\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(fieldDataType))) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(fieldDataType)).findFirst().get();\n            if (!dataTypeMappingsForField.isSupported()) {\n                return null;\n            }\n        } else if (DuctUtils.isDecimalType(fieldDataType)) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(DuctConstants.DECIMAL)).findFirst().get();\n            if (!dataTypeMappingsFor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"535c94c6-a685-4f60-b2b6-48f24717cba2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":183,"endLine":185,"content":"OTE, BACKSLASH + SINGLE_QUOTE).replaceAll(PERCENT_SYMBOL, BACKSLASH + PERCENT_SYMBOL).replaceAll(UNDERSCORE, BACKSLASH + UNDERSCORE);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"07d61303-cc98-48c8-972d-e87ac4cf4e06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1179,"endLine":1204,"content":"operties().put(UCCommonConstants.SHOW_LINK, false);\n        } else {\n            pnpConnectionsInfo.getProperties().put(UCCommonConstants.SHOW_LINK, true);\n        }\n\n        //MultiConnection: for which all the OOB jobs wouldn't be created.\n        boolean multiConnection;\n        if (null != ucTenantConnection.getPreviousPrimaryConnection() || null != ucTenantConnection.getCurrentPrimaryConnection()) {\n            multiConnection = true;\n            pnpConnectionsInfo.getProperties().put(UCCommonConstants.IS_INVALID_LINKAGE, true);\n        } else {\n            pnpConnectionsInfo.getProperties().put(UCCommonConstants.IS_INVALID_LINKAGE, false);\n            List<PNPConnectionsInfo> sfdcConnections = pnpConnectionInfoDao.findNonInitStateConnection(ConnectorType.SFDC);\n            if (CollectionUtils.isEmpty(sfdcConnections)) {\n                multiConnection = false;\n            } else if (sfdcConnections.stream()\n                    .filter(connectionsInfo -> !connectionsInfo.getProperties().containsKey(UCCommonConstants.MULTI_CONNECTION)\n                            || !(Boolean) connectionsInfo.getProperties().get(UCCommonConstants.MULTI_CONNECTION)).findAny().isPresent()) {\n                multiConnection = true;\n            } else {\n                multiConnection = false;\n            }\n        }\n        pnpConnectionsInfo.getProperties().put(UCCommonConstants.MULTI_CONNECTION, multiConnection);\n    }*/\n    private PNPConnectionsInfo processConnectionForSFDC(PNPConnections","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a107d400-b7d1-4c84-b815-0d4dcd0aa3d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":290,"endLine":313,"content":"velOperation.getKey(), e.getMessage(), e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n    }\n\n    DuctResponse ductResponse = new DuctResponse();\n    Set<DuctStatus> ductStatusSet = new HashSet<>();\n    Map<String, Object> externalSystemResponse = new HashMap<>();\n    Map<String, Object> ductExternalSystemResponse = new HashMap<>();\n    Map<String, Object> result;\n\n    Long totalRecords = 0L;\n    Long recordsAffected = 0L;\n    AtomicReference<Long> failedRecords = new AtomicReference<>(0L);\n    List<File> successfulFiles = new ArrayList<>();\n    List<File> failedFiles = new ArrayList<>();\n\n    try {\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n      GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n      result = gainsightSAPDatasphereChannelService.loadBulkData(DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()),\n              inputDataFile, successfulFiles, failedFiles, objectLevelOperation.getKey(), ductJobMapping.getColumnMappings(), colNameToDataType, batchSize);\n      externalSystemResponse.putAll(result);\n      totalRecords = totalRecords + (Long) result.getOrDefault(UCConstants.TOTAL_RECORDS, 0l);\n      recordsA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f56deb9a-c39b-4ad0-8a48-fd9c03d956af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":609,"endLine":629,"content":"nse.getResponseHeaders().entrySet().stream().filter(entry -> entry.getKey() != null).filter(entry -> entry.getKey().equalsIgnoreCase(ELEMENTS_NEXT_PAGE_TOKEN)).findFirst().get().getValue().get(0);\n                    }\n                    shouldContinue = false;\n                } else {\n                    LOGGER.info(\"Headers received are {}\", httpResponse.getResponseHeaders());\n                    String respMsg = httpResponse.getRespMsg();\n                    LOGGER.error(\"Extraction call not successful due to  {} , retrying for {}\", respMsg, retryCounter);\n                    if (retryCounter >= maxNoOfRetries) {\n                        throw new Exception(String.format(\"Error occured while trying to extract data , exhausted maximum number of retries %s\", retryCounter));\n                    }\n                    retryCounter++;\n                    shouldContinue = true;\n                }\n            } catch (SocketTimeoutException e) {\n                LOGGER.error(\"CE API Timeout has occured . Hence increasing the timeout and continue extraction to retry count {}\", retryCounter + 1, e);\n                timeoutInMilliSecs = timeoutInMilliSecs + 20 * 1000; //  increasing 20 sec as previous call was timed out\n                shouldContinue = true;\n                if (shouldContinue) {\n                    if (retryCounter >= maxNoOfRetries) {\n                        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = new GsExternalSystemErrorMapping(\n                 ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4bf25ad4-6219-49a1-8e46-edfae05a3aca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dh.DataExtractionRequest;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.IpaasAccountUserDetailsDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.base.Joiner;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c6c8a3c-33b3-4ff8-947f-81163f25d1e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectTenantConfig.java","startLine":94,"endLine":110,"content":"onnectionId;\n  }\n\n  @Override\n  public String toString() {\n    return \"CaasObjectTenantConfig{\" +\n            \"connectorType=\" + connectorType +\n            \", addedObjects=\" + addedObjects +\n            \", notSupportedObjects=\" + notSupportedObjects +\n            \", showOnlyIncludedObjects=\" + showOnlyIncludedObjects +\n            \", order=\" + order +\n            \", objectName='\" + objectName + '\\'' +\n            \", connectionId='\" + connectionId + '\\'' +\n            \", tenantId='\" + tenantId + '\\'' +\n            '}';\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"964c493b-2ec2-4a53-b86c-8a3a27337362","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataService.java","startLine":1,"endLine":16,"content":"package com.gainsight.duct.enhance.metadata;\n\nimport com.gainsight.duct.beans.FieldSaveType;\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface EnhanceMetadataService {\n\n    void saveTheEnhancedMetaData(String connectionId, String object, List<Map<String,Object>> FieldInfo,\n                                    FieldSaveType saveType) throws CaasException;\n\n    void editTheEnhancedMetaData(String connectionId, String object, List<Map<String, Object>> fieldInfos,\n                                 FieldSaveType saveType) throws CaasException;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a609cbd-85fe-4b7c-be61-8e70b217e46a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":56,"endLine":78,"content":"tring> ntzFields) {\n        List<String> whereClauses = Lists.newArrayList();\n        String joiner = StringUtils.SPACE;\n        if (filterRule != null) {\n            ListUtils.emptyIfNull(filterRule.getRules()).forEach(rule -> whereClauses.addAll(buildRule(rule, connectorType, ntzFields)));\n            if (filterRule.getCondition() != null) {\n                joiner = filterRule.getCondition().getSpaceWrappedFilterCondition();\n            }\n        }\n        return Joiner.on(joiner).join(whereClauses);\n    }\n\n    private static List<String> buildRule(FilterRule rule, ConnectorType connectorType, Map<String, String> ntzFields) {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(SPACE);\n            String clause = getSQLClause(connectorType, rule);\n            if (ConnectorType.BIGQUERY.equals(connectorType) && DataType.TIMESTAMP.equals(rule.getFieldInfo().getDataType())) {\n                clause = replaceLeft(clause, UNIX_MILLIS + OPEN_BRACKET + rule.getFieldInfo().getJsonPath() + CLOSE_BRACKET);\n            } else if (ConnectorType.SNOWFLAKE.equals(connectorType) && DataType.DATETIME.equals(rule.getFieldInfo().getDataType())) {\n                if (MapUtils.isNotEmpty(ntzFields) && ntzFields.containsKey(rule.getFieldInfo().getJsonPath())) {\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7540cf9-2e08-4b9f-a38a-2b96b588fbe1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":633,"endLine":650,"content":"ENT_INPUT, CaasValidationCode.INVALID_TIMEZONE.getUserText());\n                assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                        .get(ACCESS_SECRET)), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_SECRET_KEY.getUserText());\n                pnpConnectionsInfo.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                        .get(ACCESS_SECRET)), pnpConnectionsInfo.getConnectionType()));\n                break;\n\n            case SEGMENT_IO:\n                segmentPreProcessing(pnpConnectionsInfo);\n                assertTrue(pnpConnectionInfoDao.findConnectionByAccessKey(String.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)).trim()) ==\n                        null, CaasValidationCode.DUPLICATE_ACCESS_KEY, CaasValidationCode.ACCESS_KEY_ALREADY_PRESENT.getUserText());\n                pnpConnectionsInfo\n                        .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)\n                        ).trim(), pnpConnectionsInfo.getConnectionType()));//can be removed and be saved only at one place\n                pnpConnectionsInfo.setAccessKeyHashed(GainsightUtils\n                        .encryptToCSV(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)).trim()));\n                break;\n            case GS_BU","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3603ae0-94dd-44cd-a5e5-25cccf2bb8e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":98,"endLine":120,"content":"  }\n            }\n            if (criteria.getFieldName() != null && !criteria.getFieldName().contains(\".\")) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fieldType = gsFieldDefinition.getMeta().getOriginalDataType();\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if (isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            Du","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de722fad-1d16-4455-81dc-44202907e32f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SalesforceValidationDataSourceService.java","startLine":1,"endLine":37,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.FieldsInfo;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Order(600)\n@Service\n@Slf4j\npublic class SalesforceValidationDataSourceService extends BaseValidationConnectorDataSourceService implements ValidationConnectorDataSourceService {\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return connectorType == ConnectorType.SFDC;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasExce","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"562c070b-d02b-4d84-81c7-2f49f128bed5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/PickListValue.java","startLine":1,"endLine":59,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class PickListValue implements Serializable {\n    private String value;\n    private String label;\n    private Boolean active;\n    private Boolean defaultValue;\n    private byte[] validFor;\n\n    public String getValue() {\n        return value;\n    }\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public Boolean getActive() {\n        return active;\n    }\n\n    public void setActive(Boolean active) {\n        this.active = active;\n    }\n\n    public Boolean getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(Boolean defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public byte[] getValidFor() {\n        return validFor;\n    }\n\n    public void setValidFor(byte[] validFor) {\n        this.validFor = validFor;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de11ac02-a342-4852-ac61-bfd93f81192d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasMetadataTransformationConfigDAOImpl.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.dao.config;\n\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.config.CaasMetadataTransformationConfig;\nimport com.gainsight.duct.metadata.db.service.CaasMetadataTransformationConfigDAO;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class CaasMetadataTransformationConfigDAOImpl extends AbstractEntityDaoImpl<CaasMetadataTransformationConfig>\n        implements CaasMetadataTransformationConfigDAO {\n\n    @Autowired\n    public CaasMetadataTransformationConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasMetadataTransformationConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasMetadataTransformationConfig caasMetadataTransformationConfig, String s) {\n        caasMetadataTransformationConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasMetadataTransformationConfig caasMetadataTransformationConfig, String s) {\n\n    }\n\n    @Override\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"438adb3f-794d-4b61-8abb-75ce47016947","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":116,"endLine":149,"content":"y.annotation.Autowired;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Service;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.InvocationTargetException;\nimport java.nio.file.AccessDeniedException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.commons.exception.CommonPrecondition.assertEqual;\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\nimport static com.gainsight.integration.bean.IPaasConstants.IPAAS_PROPERTIES;\nimport static com.gainsight.integration.bean.enums.common.ConnectorType.DYNAMICS;\nimport static com.gainsight.integration.bean.enums.common.ConnectorType.*;\nimport static com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit.MILLIS;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\nimport static com.gainsight.utils.GainsightPrecondition.isNotBlank;\nimport static com.gainsight.utils.GainsightPrecondition.*;\nimport static com.gainsight.utils.GainsightUtils.*;\n\n@Service\npublic class DuctConnectionServiceImpl implements DuctConnectionService {\n\n    private static final Logger log = LoggerFactory.getLogger(DuctConnectionServiceImpl.class);\n    @Autowired\n    private CaasConnectorConfigService caasConnectorConfigService;\n    @Autowired\n    priv","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7963d9c9-742e-4351-90c6-7a31d12dc99a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":176,"endLine":209,"content":"s(UCConstants.JSON) || key.contains(UCConstants.CSV)||key.contains(UCConstants.VM)) {\n            inputStream = gainsightS3.downloadFileStream(CAAS_BUCKET_NAME, key);\n        } else {\n            inputStream = gainsightS3.downloadFileStream(CAAS_BUCKET_NAME, key + UCConstants.JSON);\n        }\n        stopWatch.stop();\n        LOGGER.info(String.format(\"Downloading file on S3 @ path %s completed in %s secs\", key, stopWatch.getTotalTimeSeconds()));\n        return inputStream;\n    }\n\n    public static File downloadFileFromS3(String key) {\n        return downloadFileFromS3(CAAS_BUCKET_NAME, key);\n    }\n\n    public static File downloadFileFromS3(String bucketName, String key) {\n        StopWatch stopWatch = new StopWatch();\n        LOGGER.info(\"Downloading file from S3 @ path {} started\", key);\n        File result;\n        stopWatch.start();\n        if (key.contains(UCConstants.JSON) || key.contains(UCConstants.CSV)) {\n            result = gainsightS3.downloadFile(bucketName, key);\n        } else {\n            result = gainsightS3.downloadFile(bucketName, key + UCConstants.JSON);\n        }\n        stopWatch.stop();\n        LOGGER.info(\"Downloading file on S3 @ path {} completed in {} secs\", key, stopWatch.getTotalTimeSeconds());\n        if(result == null || result.length() == 0){\n            throw new SystemException(String.format(\"File not found on S3 @ path %s\", key));\n        }\n        return result;\n    }\n\n    public static File downloadFieldTrackingFileFromS3(String key) {\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2dd50bd1-2dc5-44b0-9261-e9387de9e867","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightPXObjectsEnum.java","startLine":1,"endLine":44,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.processor;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic enum GainsightPXObjectsEnum {\n\n    ACCOUNT(\"account\"),\n\n    USER(\"user\");\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, GainsightPXObjectsEnum> ENTITY_MAP = new HashMap<>();\n    private String objectName;\n\n    static {\n        for (GainsightPXObjectsEnum type : values()) {\n            ENTITY_MAP.put(type.objectName, type);\n        }\n    }\n\n    GainsightPXObjectsEnum(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public static String getObjectName(GainsightPXObjectsEnum entityName) {\n        return entityName.objectName;\n    }\n\n    public static GainsightPXObjectsEnum getInstance(String entityName){\n        return ENTITY_MAP.get(entityName);\n    }\n\n    public static List<String> getAllObjects(){return ENTITY_MAP.values().stream().map(GainsightPXObjectsEnum::getObjectName).collect(Collectors.toList());}\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fefc0d1-ca7c-45ba-8aec-9fab484031d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/RunNowDetails.java","startLine":1,"endLine":55,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * User: sdugar\n * Date: 11/3/15\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class RunNowDetails implements Serializable {\n    private static final long serialVersionUID = -1L;\n    private RunType type;\n    private Date startDate;\n    private Date endDate;\n\n    public RunType getType() {\n        return type;\n    }\n\n    public void setType(RunType type) {\n        this.type = type;\n    }\n\n    public Date getStartDate() {\n        return startDate;\n    }\n\n    public void setStartDate(Date startDate) {\n        this.startDate = startDate;\n    }\n\n    public Date getEndDate() {\n        return endDate;\n    }\n\n    public void setEndDate(Date endDate) {\n        this.endDate = endDate;\n    }\n\n    @Override\n    public String toString() {\n        return \"RunNowDetails{\" +\n                \"type=\" + type +\n                \", startDate=\" + startDate +\n                \", endDate=\" + endDate +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4448ed37-c91d-4224-bd90-3a51f730a7e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":593,"endLine":610,"content":"r = null;\n        LOGGER.info(\"CE connection/read timeout in milli secs {}\", timeoutInMilliSecs);\n\n        while(shouldContinue) {\n            try {\n                Map<String, Object> queryParams = createQueryParams(dataExtractionRequest, dataExtractionRequest.getNextPage());\n                httpResponse = httpUrlConnectionUtils.get(apiUrl, IpaasDataExtractionHelperService.getElementHeaders(dataExtractionRequest.getUserToken().getString(), dataExtractionRequest.getInstanceToken().getString(), dataExtractionRequest.getOrgToken()),\n                        timeoutInMilliSecs, false, queryParams);\n                LOGGER.info(\"RequestUrl {}\", apiUrl);\n                LOGGER.info(\"Request queryParams {}\", queryParams);\n                if (httpResponse.getResponseCode() == 200) {\n                    retryCounter = 0;\n                    arr = OBJECT_MAPPER.readValue(httpResponse.getRespMsg(),new TypeReference<List<Map<String,Object>>>(){});\n                    LOGGER.info(\"Headers recieved are {}\", httpResponse.getResponseHeaders());\n\n                    if (httpResponse.getResponseHeaders().entrySet().stream().filter(entry -> entry.getKey() != null).anyMatch(entry -> entry.getKey().equalsIgnoreCase(ELEMENTS_NEXT_PAGE_TOKEN))) {\n                        elementsNextPageToken = httpResponse.getResponseHeaders().entrySet().stream().filter(entry -> entry.getKey() != null).filter(entry -> entry.getKey().equalsIgnoreCase(ELEMENTS_NEXT_PAGE_TOKEN)).findFirst().get().getValue().get(0);\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a37f9bb-7966-43d0-adce-4680ca9314c6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":132,"endLine":147,"content":"   ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_BY_ID);\n            if (StringUtils.isNotEmpty(apiConfigAttributes.getReplaceByIdRegexInPath()))\n                apiConfigAttributes.setPath(apiConfigAttributes.getPath().replace(apiConfigAttributes.getReplaceByIdRegexInPath(), recordId));\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n            }\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, null);\n            Boolean isXmlResponse = !ObjectUtils.isEmpty(apiConfigAttributes.getResponseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), con","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ecfed76-cc0c-4308-80bd-2c12a2f1c064","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":363,"endLine":388,"content":"ime, int limit, boolean isWriteback) {\n        DuctRequestDTO ductRequestDTO = new DuctRequestDTO();\n        ductRequestDTO.setFields(new ArrayList<>(Arrays.asList(\"field\")));\n        ductRequestDTO.setResourceName(\"Resource Name\");\n        ductRequestDTO.setConnectionId(\"Id\");\n        ductRequestDTO.setFilterRule(new FilterRule());\n        ductRequestDTO.setStartTime(dateTime);\n        ductRequestDTO.setFilteredDateField(FILTERED_DATA_FIELD);\n        ductRequestDTO.setEndTime(dateTime);\n        ductRequestDTO.setIsSynchronized(isSync);\n        if (isWriteback) {\n            ductRequestDTO.setData(new HashMap<>());\n            ductRequestDTO.setColumnMappings(new ArrayList<>());\n            ductRequestDTO.setDuctDataOperation(DuctDataOperation.INSERT);\n            ductRequestDTO.setFileName(FILE_NAME);\n            ductRequestDTO.setTargetSystemDataURL(\"TargetSystemUrl\");\n        }\n        ductRequestDTO.setCriteria(new Criteria());\n        if (isSync) {\n            ductRequestDTO.setLimit(limit);\n            ductRequestDTO.setNextPageToken(NEXT_PAGE_TOKEN);\n        }\n        return ductRequestDTO;\n    }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6c2aab1-1ec6-4006-8c49-79205cc77860","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctJobMapping.java","startLine":36,"endLine":108,"content":"BaseBean implements Serializable {\n\n    private static final long serialVersionUID = -1L;\n\n    public DuctJobMapping() {\n    }\n\n    private List<FieldInfo> fieldInfos;\n    private String jobId;\n\n    private String jobName;\n\n    private ConnectorType connectorType;\n\n    private DuctDataOperation ductDataOperation;\n\n    private Boolean isPaginated;\n\n    private String tenantId;\n\n    private SyncDirection syncDirection;\n\n    private String connectionId;\n\n    private String resourceName;\n\n    private Long totalCount = 0l;\n\n    private Long successCount = 0l;\n\n    private String outputS3Path;\n    private String query;\n\n    private List<String> fields; // todo should it be mappings\n\n    private Map<String, String> aliasFieldsMappings;\n\n    private List<DuctFilter> filters;\n\n    private FilterRule filterRule;\n\n    private Map<String, Object> data;\n\n    private String location;\n\n    private String callbackUrl;\n\n    private Map<String, Object> properties;\n\n    private String filteredDateField;\n\n    private DateTime startTime;\n    private DateTime endTime;\n\n    private boolean isSynchronizedApi;\n\n    private DuctStatus ductStatus;\n\n    private long totalNumberOfRecords;\n    private long successRecords;\n    private long failedRecords;\n\n    private File outputFile;\n\n    private Map<String, Object> externalSystemResponse;\n    private String externalErrorMessage;\n\n    private String targetSystemDataURL;\n    private String fileName;\n\n    private List<ColumnMapping> columnMappings;\n\n    priv","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9b2ac920-bc38-44ae-92ee-499b75f860ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":433,"endLine":456,"content":"            Object value2 = criteria2.getValues() instanceof List ? ((List) criteria2.getValues()).get(0) : criteria2.getValues();\n                    return value1.toString().compareTo(value2.toString());\n                })\n                .orElse(null);\n\n        if (Objects.isNull(requiredSingleCriteria)) {\n            return getDefaultFallbackCriteria();\n        } else {\n            Criteria criteria = getDefaultFallbackCriteria();\n            criteria.setFilters(Lists.newArrayList(requiredSingleCriteria));\n            return criteria;\n        }\n    }\n\n    private void modifyCriteriaValueIfApplicable(Criteria criteria, Map<String, GSFieldDefinition> dateTimeFieldsMap) {\n        try {\n            if (dateTimeFieldsMap.containsKey(criteria.getFieldName())) {\n                String dateTimeStr = criteria.getValues() instanceof List ? ((List) criteria.getValues()).get(0).toString() : criteria.getValues().toString();\n                String format = dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\") == null ?\n                        DEFAULT_DATETIME_FORMAT : dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\").toString();\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);\n                LocalDateTime parsedDate = LocalDateTime.parse(dateTimeStr, formatter);\n                String formattedDate = parsedDate.toLocalDate().toString();\n                criteria.setValues(Lists.newAr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c1bfbdb-21f1-4b41-8681-6de6f0dfdf35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/FreshdeskCaasMetadataServiceImpl.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.metadata;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * createdBy: snargana\n * date: 25/06/24\n */\n\n@Order(1000)\n@Service\n@Slf4j\npublic class FreshdeskCaasMetadataServiceImpl extends CaasNativeMetadataServiceImpl implements CaasMetadataService {\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return ConnectorType.FRESHDESK.equals(connectorType) && !isIpaas;\n  }\n\n  @Override\n  public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n    return super.getObjects(pnpConnectionsInfo, map);\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    return super.getObjectAttributes(objectName, pnpConnectionsInfo);\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"41b067a1-9ba0-449f-b051-305ba17653d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ZendeskConnectionService.java","startLine":79,"endLine":96,"content":"dFirst();\n        if (!authInfoOptional.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails authDetails = authInfoOptional.get();\n        AuthorizationUrl authorizationUrl = authDetails.getAuthorizationUrl();\n        OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"nativeEnabled\", true);\n        properties.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n        Map<String, Object> flattenConnectionInfoWithOAuthAndCallbackUrl = null;\n        String authUrl = null;\n        try {\n            flattenConnectionInfoWithOAuthAndCallbackUrl = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to get auth url for Zend","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac324c99-c79b-4ab2-a0fe-5b22f40cb267","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.dh;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.DuctStatus;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.dto.DuctFetchRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.bionicrules.BionicRulesDPIntegrationService;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.DHHttpMethod;\nimport com.gainsight.services.utilit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aee12cb0-84c2-4f0b-9fdd-49a282829f4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/SnowFlakeDataValidationSourceService.java","startLine":32,"endLine":62,"content":"pe == ConnectorType.SNOWFLAKE;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> fieldSet = objectDefinition.getFields().stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toSet());\n        Set<String> notAvailableFields = new HashSet<>();\n        for (String field : ductRequestDTO.getFields()) {\n            if (!fieldSet.contains(field)) {\n                notAvailableFields.add(field);\n            }\n        }\n        if (ductRequestDTO.getCriteria() != null) {\n            Set<String> filterFields = new HashSet<>();\n            DuctUtils.getFieldsFromFilter(ductRequestDTO.getCriteria(), filterFields);\n            for (String filterField : filterFields) {\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7098b4c-5f83-4be9-a27f-e15604c0ed52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/common/aha/AhaCaasCriteriaBuilder.java","startLine":73,"endLine":100,"content":"ty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap);\n                    value.setValue(val);\n                    fieldInfoValues.add(value);\n                }\n            } else {\n                FieldInfo value = new FieldInfo();\n                value.setFieldType(FieldType.VALUE);\n                setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        filterRule.setFieldInfo(internalFieldInfo);\n        filterRule.setValues(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if (FilterOperator.INCLUDES.equals(criteria.getOperatorType()) || FilterOperator.EXCLUDES.equals(criteria.getOperatorType()))\n            filterRule.setOperatorInputs(new ArrayList<>());\n        return filterRule;\n    }\n\n    public static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<Strin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eaf48946-0aa4-4c02-892f-4bdc794237ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":215,"endLine":239,"content":"epted by the external system\n     *\n     * @param criteria            {@link Criteria}\n     * @param ductJobMapping      {@link DuctJobMapping}\n     * @param fieldNameMetaMap    {@link Map<String, GSFieldDefinition>}\n     * @param caasConnectorConfig {@link CaasConnectorConfig\n     * @return {@link Criteria\n     */\n    private Criteria modifyCriteria(Criteria criteria, DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap, CaasConnectorConfig caasConnectorConfig) {\n        Criteria defaultCriteria = getDefaultFallbackCriteria();\n        try {\n            log.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUtils.convertObjectToJson(criteria));\n            if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters()) || (Objects.isNull(criteria.getFieldName()) && CollectionUtils.isEmpty(criteria.getFilters()))) {\n                return defaultCriteria;\n            }\n\n            Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n            Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n            Criteria modifiedCriteria = null;\n\n            // flatten the criteria to get all the nested filters\n            List<Criteria> flattenedCriteria = flattenCriteria(criteria);\n\n            // filter only those criteria which are externally filterable\n            List<Criteria> flattenedRequiredCriteria = n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86e0c413-4d20-4677-8970-c4e02d73a371","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":88,"endLine":138,"content":"xNoOfRetries;\n    }\n\n    public void setMaxNoOfRetries(int maxNoOfRetries) {\n        this.maxNoOfRetries = maxNoOfRetries;\n    }\n\n    public boolean isDateTimeConversionRequired() {\n        return dateTimeConversionRequired;\n    }\n\n    public void setDateTimeConversionRequired(boolean dateTimeConversionRequired) {\n        this.dateTimeConversionRequired = dateTimeConversionRequired;\n    }\n\n    public List<String> getExcludedStrings() {\n        return excludedStrings;\n    }\n\n    public void setExcludedStrings(List<String> excludedStrings) {\n        this.excludedStrings = excludedStrings;\n    }\n\n    public String getCloudElementsBaseUrl() {\n        return cloudElementsBaseUrl;\n    }\n\n    public void setCloudElementsBaseUrl(String cloudElementsBaseUrl) {\n        this.cloudElementsBaseUrl = cloudElementsBaseUrl;\n    }\n\n\n\n    public int getDefaultSleepTimeOnFail() {\n        return defaultSleepTimeOnFail;\n    }\n\n    public void setDefaultSleepTimeOnFail(int defaultSleepTimeOnFail) {\n        this.defaultSleepTimeOnFail = defaultSleepTimeOnFail;\n    }\n\n    public boolean isHonourLastModfiedFieldValueToFetchDeltaData() {\n        return honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    public void setHonourLastModfiedFieldValueToFetchDeltaData(boolean honourLastModfiedFieldValueToFetchDeltaData) {\n        this.honourLastModfiedFieldValueToFetchDeltaData = honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    private FilterRule filterRule;\n    private String lastModifiedFieldNam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15b038b8-074a-43a2-b8f8-56a862473992","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/BigQueryValidationDataSourceService.java","startLine":83,"endLine":89,"content":" field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"329f0e4e-07a4-4027-8860-3653891484c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":1,"endLine":39,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.amazonaws.services.cloudfront.model.AccessDeniedException;\nimport com.gainsight.duct.beans.OAuthV2TokenDetail;\nimport com.gainsight.duct.bionicrules.helper.BionicRuleHttpHelper;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport exception.SystemException;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URISyntaxException;\nimport java.net.URLEncoder;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class CallOutOAuthServiceImpl implements CallOutOAuthService {\n\n    private final static Logger LOGGER = LoggerFactory.getLogger(CallOutOAuthServiceImpl.class);\n\n    private static final String PAYLOAD_CONTENT_TYPE = \"payloadContentType\";\n    private static final String SERVICE_PROVIDER_AUTHORIZATION_URI = \"serviceProviderAuthorizationURI\";\n    private static final S","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9505b215-9743-4280-8e38-a8b3e4c99eb3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctRequestDTO.java","startLine":36,"endLine":68,"content":"    private String filteredDateField;\n    private String from;\n    private String to;\n    private Boolean isSynchronized = false;\n    private boolean resolvePickListOptions = false;\n    private boolean includeLookups = false;\n    private FilterRule filterRule;\n    private Criteria criteria;\n    private DateTime startTime;\n    private DateTime endTime;\n    private DuctDataOperation ductDataOperation;\n    private String targetSystemDataURL;\n    private String fileName;\n    private List<ColumnMapping> columnMappings;\n    private Map<String, Object> externalSystemSpecificProperties;\n    private int limit = 10;\n    private int offset = 0;\n    private String nextPageToken;\n    private CaasS3FileDetails caasS3FileDetails;\n    private CaasFileInfo caasFileInfo;\n    private TargetSystem targetSystem;\n    private ConnectorType connectorType;\n    private Map<String, ImportLookupLite> lookups;\n    private List<String> identifiers;\n    private String query;//in case of sync updates\n    private Map<String,String> fieldNameToFieldAlias;\n    /*\n        This property signifies, if the lookup fields/projections are in flattened structure or not.\n        This is in effect only for Dynamics connector,\n     */\n    private boolean lookupFieldsFlattened = true;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b637d305-42fe-46cc-8a65-c1ec2c2b4aa7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ZoomCaasMetadataServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.zoom.bean.GainsightZoomEntityDescription;\nimport com.gainsight.integration.connector.zoom.bean.GainsightZoomFieldDescription;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9fe17df8-1e55-456b-88db-9c266b5176a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":574,"endLine":590,"content":"  * @param data              {@link List<Map>} data response received from external system\n   * @param dateTimeFieldsMap {@link Map<String, GSFieldDefinition>} map of datetime fields\n   * @param ductJobMapping    {@link DuctJobMapping}\n   * @param dateTimeFormat    {@link String}\n   *                          <p>\n   *                          Takes care of post processing the data received from external system\n   *                          For now we are doing the following changes - For any datetime fields we receive output in unix epoch from external system\n   *                          process this into datetime format based on properties defined in {@link DuctJobMapping}\n   *                          - If we have timezone specified in properties, convert the epoch to datetime in that timezone else convert it to UTC as default\n   *                          Note: If we fail to post process data for any reason, return the data received from external system as fallback without any processing\n   *                          Also make sure to either post process completely or return the data as is without any partial processing\n   */\n  private List<Map<String, Object>> postProcessData(JsonNode data, Map<String, GSFieldDefinition> dateTimeFieldsMap, DuctJobMapping ductJobMapping, String dateTimeFormat) {\n    try {\n      List<Map<String, Object>> dataToBeProcessed = OBJECT_MAPPER.convertValue(data, new TypeReference<List<Map<String, Object>>>() {\n      });\n      List<Map<String, Ob","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf5f5e1a-4fe1-465c-ab5d-2b398598bea5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":318,"endLine":341,"content":"eryParams));\n                }\n                return service.getObjectAttributes(objectName, pnpConnectionsInfo, includePicklistOptions);\n            } catch (CaasException excp) {\n                log.error(\"error in getObjectAttributes\", excp);\n                throw new CaasException(getGsExternalSystemErrorMapping(pnpConnectionsInfo, true, excp.getGsExternalSystemErrorMapping()));\n            } catch (Exception e){\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE,e));\n            }\n        } else{\n            CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.GAINSIGHT, false);\n            Map<String, ObjectDefinition> objectList = service.getObjectAttributes(objectName,null, consumer);\n            return objectList;\n        }\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributesUsingEngine(String objectName, String connectionId, String consumer) throws CaasException {\n        if(StringUtils.isNotEmpty(connectionId) && !connectionId.equalsIgnoreCase(\"MDA\")) {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            try {\n                CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n                validateObject","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be5a51b4-ae53-4667-9afd-909d3e6d6a9c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":48,"endLine":93,"content":"ingframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeMap;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n/**\n * createdBy: snargana\n * date: 26/06/24\n */\n\n@Service\n@Order(200)\n@Slf4j\npublic class FreshdeskDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final String CAAS_FRESHDESK_EXTRACT = \"CaasFreshdeskExtract\";\n  public static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ssX\";\n\n  public static final String DEFAULT_DATETIME_VALUE = \"1970-01-01T00:00:00Z\";\n  public static final String DEFAULT_EXTERNAL_FILTERABLE_FIELD = \"updated_at\";\n\n  public static final String UPDATED_SINCE = \"updated_since\";\n  private final MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n  private static final String DATA = \"data\";\n  private static final String URL = \"URL\";\n\n  @Autowired\n  RedisCacheUtility redisCacheUtility;\n  @Autowired\n  MetadataEngineConfigDao metadataEngineConfigDao;\n  @Autowired\n  PNPConnectionInfoDao pnpConnectionInfoDao;\n\n  @Autowired\n  CaasMetadataFactory caasMetadataFactory;\n\n\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca899a9b-3555-412d-9a91-e6ed7e012b68","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":23,"endLine":51,"content":"ants.FORMAT;\n\npublic class DataHighwayUtils {\n\n    public static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<String, GSFieldDefinition> fieldNameToMetaMap, List<String> ignoreMetadataFields) {\n        setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, fieldName, fieldInfo, fieldNameToMetaMap, ignoreMetadataFields, null, null);\n    }\n\n    public static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<String, GSFieldDefinition> fieldNameToMetaMap, List<String> ignoreMetadataFields,String dateFormate,String dateTimeFormate) {\n        List<String> ignoreMetdataFields = GainsightCollectionUtils.nullSafeList(ignoreMetadataFields);\n        boolean containsDatatype = ignoreMetdataFields.stream().anyMatch(fieldName::equalsIgnoreCase);\n        DataType dataType;\n        if (containsDatatype) {\n            fieldInfo.setDataType(DataType.STRING);\n            return;\n        }\n\n        String gsDataType = fieldNameDataTypeMap.get(fieldName).toString().toLowerCase();\n        GSFieldMeta gsFieldMeta = fieldNameToMetaMap.get(fieldName).getMeta();\n\n        switch (gsDataType) {\n\n            case \"textarea\":\n            case \"text\":\n            case \"radio\":\n            case \"checkbox\":\n            case \"dropdownlist\":\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d05a0244-98f9-4c92-a645-d99a466e09d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GsObjectsLoadServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.dto.ExternalActivityRequestDto;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport com.google.common.collect.Sets;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class GsObjectsLoadServiceImpl implements GainsightLoadService{\n\n    private static final Set<String> GS_OBJECTS_ALLOWED_OBJECTS = Sets.newHashSet(\"company\",\n            \"relationship\", \"relationship_type\");\n\n    @Override\n    public GSModule getType() {\n        return GSModule.GS_OBJECTS;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return GS_OBJECTS_ALLOWED_OBJ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"037dc998-ae4e-4ee0-8bc7-326445c9b65e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/metadata/engine/MetadataEngineConfigDaoImpl.java","startLine":33,"endLine":65,"content":"ected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(MetadataEngineConfig caasObjectApiConfig, String s) {\n        caasObjectApiConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(MetadataEngineConfig caasObjectApiConfig, String s) {\n    }\n\n    @Override\n    public MetadataEngineConfig getMetadataEngineConfigByConnectorType(ConnectorType connectorType) {\n        Object metadataConfigFromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigFromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigFromCache, MetadataEngineConfig.class);\n        Query query = Query.query(Criteria.where(MetadataEngineConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        MetadataEngineConfig metadataEngineConfig = getMongoTemplate().findOne(query, MetadataEngineConfig.class);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType, metadataEngineConfig);\n        return metadataEngineConfig;\n    }\n\n    @Override\n    public List<MetadataEngineConfig> getConnectorConfigs(ConnectorType connectorType) {\n        Query query = Query.query(Criteria.where(MetadataEngineConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        return getMongoTemplate().find(query, MetadataEngineConfig.class);\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTempla","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"acd7f8de-c8e1-48ae-9d64-83d6fbc293bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/EcosystemsCaasMetadataServiceImpl.java","startLine":37,"endLine":59,"content":"cts(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n    return ecosystemsMetadataService.listAllObjects(pnpConnectionsInfo);\n  }\n\n  @Override\n  public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n    CaasObjectAttributesConfig objectAttributesConfig = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName).get(0);\n    ObjectDefinition objectDefinition = new ObjectDefinition();\n    objectDefinition.setObjectName(objectAttributesConfig.getObjectName());\n    objectDefinition.setLabel(objectAttributesConfig.getObjectName());\n    objectDefinition.setConnectionId(pnpConnectionsInfo.getConnectionId());\n    objectDefinition.setConnectionType(pnpConnectionsInfo.getConnectionType().getValue());\n    objectDefinition.setObjectId(objectAttributesConfig.getObjectName());\n\n    List<GSFieldDefinition> fields = new ArrayList<>();\n    for (GSFieldDefinition gsFieldDefinition : objectAttributesConfig.getDefaultObjectAttributes()) {\n      String dataType = gsFieldDefinition.getDataType();//(String) map.get(\"dataType\");\n      String fieldName = gsFieldDefinition.getFieldName();//(String) map.get(\"fieldName\");\n      String label = gsFieldDefinition.getLabel();//(String) map.get(\"label\");\n      String dbName = gsFieldDefinition.getDbName();//(String) map.get(\"dbName\");\n\n      GSFieldDefinition field = new GSFieldDefinition();\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0115249-f77a-4942-9d17-95346a257b3b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":44,"endLine":84,"content":"rFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Component\nabstract public class DataHighwayInteractionServiceBase {\n\n    private static final String EXTRACT_DETAILS = \"extractDetails\";\n    private static final String FREE_FORM_QUERY_DETAILS = \"freeFormQueryDetails\";\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DataHighwayInteractionServiceBase.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String CUSTOM_QUERY = \"CUSTOM_QUERY\";\n    private static final String PUSH_TO_S3 = \"pushSourceDataToS3\";\n    private static final String CUSTOM_FIELD_SUFFIX = \"__gs\";\n\n    @Autowired\n    public PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    public BionicRulesDPIntegrationService bionicRulesDPIntegrationService;\n\n    @Autowired\n    public DuctJobMappingDao ductJobMappingDao;\n\n    @Autowired\n    public ConnectorsDataHighwayInteractionService connectorsDataHighwayInteractionService;\n\n    @Autowired\n    public CaasMetadataFactory caasMetadataFactory;\n\n    @Autowired\n    public CaasConnectorConfigService caasConnectorConfigService;\n\n    public DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException {\n        LOGGER.info(\"Starting Extract for {} for job id {}\", ductJobMapping.getConnectorType(), ductJobMa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ad60b75-7347-46c5-bcdc-b982b9de6c38","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":291,"endLine":326,"content":"(getFilterValue(rule));\n                    }\n                }\n                break;\n            case GTE:\n            case LTE:\n                if (isDate(externalDataType) || isDateTime(externalDataType)) {\n                    if (rule.getOp() == FilterOperator.GTE) {\n                        evaluatedExpression.append(fieldName)\n                                .append(\" \")\n                                .append(\"ge\")\n                                .append(\" \")\n                                .append(fromDateUTCStr);\n                    } else {\n                        evaluatedExpression.append(fieldName)\n                                .append(\" \")\n                                .append(\"lt\")\n                                .append(\" \")\n                                .append(toDateUTCStr);\n                    }\n\n                } else {\n                    evaluatedExpression.append(fieldName)\n                            .append(\" \")\n                            .append(StringUtils.remove(rule.getOp().getFilterOperator().toLowerCase(), 't'))\n                            .append(\" \");\n                    if (isStringType(externalDataType)) {\n                        evaluatedExpression.append(\"'\").append(escapeSql(String.valueOf(getFilterValue(rule)))).append(\"'\");\n                    } else {\n                        evaluatedExpression.append(getFilterValue(rule));\n                    }\n                }\n                break;\n\n            case CONTAINS:\n               ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fc4ab5f-2438-4873-a84b-7c51aa1dae4a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/GsExternalSystemErrorMappingDao.java","startLine":111,"endLine":138,"content":"emErrorMapping> {\n\n        private static final String GS_ERROR_CODE_COLUMN = \"gs_error_code\";\n        private static final String GS_ERROR_MESSAGE_COLUMN = \"gs_error_message\";\n        private static final String EXTERNAL_SYSTEM_ERRORCODE_COLUMN = \"external_system_errorcode\";\n        private static final String EXTERNAL_SYSTEM_ERROR_MESSAGE_COLUMN = \"external_system_error_message\";\n        private static final String EXCEPTION_STACKTRACE_COLUMN = \"exception_stacktrace\";\n        private static final String PROPERTIES_COLUMN = \"properties\";\n        private static final String RESPONSE_PAYLOAD_COLUMN = \"response_payload\";\n        private static final String REQUEST_PAYLOAD_COLUMN = \"request_payload\";\n        private static final String CONNECTOR_TYPE_COLUMN = \"connector_type\";\n        private static final String JOB_ID_COLUMN = \"job_id\";\n        private static final String REQUEST_ID_COLUMN = \"request_id\";\n        private static final String TENANT_ID_COLUMN = \"tenant_id\";\n        private static final String MESSAGE_COLUMN = \"message\";\n\n\n\n        public GsExternalSystemErrorMappingRowMapper() {\n\n        }\n\n\n        @Override\n        public GsExternalSystemErrorMapping mapRow(ResultSet r, int i) throws SQLException {\n            GsExternalSystemErrorMapping gsExternalSystemErrorMapping = DuctDaoUtils.setBaseFields(r, new GsExternalSystemErrorMapping());\n            gsExternalSystemErrorMapping.setGsErrorCode(r.getString(GS_ERROR_CODE_COLUMN));\n            gsExternalSystemErrorMap","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c835217c-63c5-46b0-9830-b478c4308d70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":82,"endLine":103,"content":"lic Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException{\n        return getObjectAttributes(objectName, pnpConnectionsInfo, true);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(DuctRequestDTO ductRequestDTO, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        LOGGER.info(\"Starting attributes fetch for object: {}, connection: {}\", ductRequestDTO.getResourceName(), pnpConnectionsInfo.getConnectionId());\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Map<String, Object> extractedData;\n        try {\n            DynamicsGainsightUtils.setDynamicsCtx(pnpConnectionsInfo);\n            extractedData = msDynamicsSchemaService.extractMetadataForOnlyRequestedFields(new MSDynamicsObjectQuery().logicalName(ductRequestDTO.getResourceName()), true,\n                    ductRequestDTO.isResolvePickListOptions(), ductRequestDTO.getFields());\n        } catch (SystemException exception) {\n            if ((null != exception.getErrorCode()) && exception.getErrorCode().equals(DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND)) {\n                DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), ductRequestDTO.getResourceName() + \" does not exist in source system\");\n            }\n            throw exception;\n        }\n        stopWatch.stop();\n        LOGG","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85fea57a-78d4-4c87-962b-59d608217de2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDaoUtils.java","startLine":122,"endLine":131,"content":"getTimestamp(CREATED_DATE_COLUMN));\n    entity.setModifiedAt(r.getTimestamp(MODIFIED_DATE_COLUMN));\n    entity.setDeleted(r.getBoolean(DELETED_COLUMN));\n    return entity;\n  }\n\n\n  private DuctDaoUtils() {\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7a5918e5-1b1d-4f0b-9cbc-e4552c073e58","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightOAuth20AccountServiceImpl.java","startLine":66,"endLine":89,"content":"oAuthConfig);\n        return service.getAuthorizationUrl(null);\n    }\n    @Override\n    public String authorizationURL(AccountType accountType, String hostUrl, String scope) {\n        OAuthDetail oAuthDetail = findOAuthDetail(accountType);\n        assertNotNull(oAuthDetail, CaasValidationCode.ACCOUNT_MISSING_APPLICATION_DETAILS, SC_BAD_REQUEST);\n        OAuthService service = accountType.getApi().createService(new OAuthConfig(CRYPT_HANDLER.decrypt(oAuthDetail.getClientId()),\n                CRYPT_HANDLER.decrypt(oAuthDetail.getClientSecret()), callbackUrl(accountType, hostUrl), SignatureType.QueryString, scope, null));\n        return service.getAuthorizationUrl(null);\n    }\n\n    @Override\n    public String authorizationURL(AccountType accountType, String hostUrl, String customDomain, String orgType) {\n        OAuthDetail oAuthDetail = findOAuthDetail(accountType);\n        assertNotNull(oAuthDetail, CaasValidationCode.ACCOUNT_MISSING_APPLICATION_DETAILS, SC_BAD_REQUEST);\n        Api api = new SFDC20ApiV2(customDomain, SalesforceOrgType.forValue(orgType));\n        OAuthService service = api.createService(new OAuthConfig(CRYPT_HANDLER.decrypt(oAuthDetail.getClientId()),\n                CRYPT_HANDLER.decrypt(oAuthDetail.getClientSecret()), callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null));\n        return service.getAuthorizationUrl(null);\n    }\n\n    @Override\n    public Token accessToken(AccountType accountType, String code, String hostUrl, String resourc","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"120e766e-01e2-4442-9089-283de25a7f06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/AbstractCaasDao.java","startLine":1,"endLine":43,"content":"\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport com.gainsight.bean.GSID;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.utils.GainsightPrecondition;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.dao.support.DataAccessUtils;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.jdbc.core.JdbcOperations;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;\n\nimport java.sql.PreparedStatement;\nimport java.sql.Timestamp;\nimport java.util.*;\n\n@Slf4j\n@RequiredArgsConstructor\npublic abstract class AbstractCaasDao<T extends BaseGSEntity> implements DuctDao<T> {\n\n  protected static final String SELECT_CRITERIA_QUERY = \"SELECT * FROM %s WHERE %s\";\n\n  protected final DuctDatabaseTemplateService ucDatabaseTemplateService;\n  protected final Class<T> entityClass;\n  protected final String tableName;\n  protected final RowMapper<T> rowMapper;\n\n  protected NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n    return ucDatabaseTemplateService.getApplicationNamedParameterJdbcTemplate();\n  }\n\n  protected JdbcOperations jdbcTemplate() {\n    return ucDatabaseTemplateService.getApplicationJdbcTemplate();\n  }\n\n  protected abstract Map<String, Object> columnValueMap(T entity);\n\n  protected Set<String> getAllowedSort","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3260bb39-3d91-4ac4-a4ab-ef3eacb5328a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":32,"endLine":59,"content":" final Logger LOGGER = LoggerFactory.getLogger(ZohoV2ToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private static final String API_NAME = \"api_name\";\n    private static final String DISPLAY_LABEL = \"display_label\";\n    private static final String DATA_TYPE = \"data_type\";\n    private static final String ID = \"id\";\n    private static final String CUSTOM_FIELD_FLAG = \"custom_field\";\n    private static final String READ_ONLY_FLAG = \"read_only\";\n    private static final String MODIFIED_TIME = \"modified_time\";\n    private static final String CREATED_TIME = \"created_time\";\n    private static final String DECIMAL_PLACE_FLAG = \"decimal_place\";\n    private static final String PICKLIST_VALUES = \"pick_list_values\";\n    private static final String PICKLIST_LABEL = \"display_value\";\n    private static final String PICKLIST_COLOR_CODE = \"colour_code\";\n    private static final String PICKLIST_VALUE = \"actual_value\";\n\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.ZOHOV2.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a057abae-2d86-49f1-a5f6-0a10c50af337","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":571,"endLine":596,"content":"d.GET).toString();\n            log.info(\"Url created\");\n            ductResponse.setSourceResponseFile(url);\n        } catch (Exception e) {\n            log.error(\"Error in creating and uploading the source error file \", e);\n        } finally {\n            FileUtils.deleteQuietly(errorFile);\n        }\n    }\n\n    private List<File> populateErrorFileFromHubspotResponse(Map<String, Object> errorData, DuctJobMapping ductJobMapping, DuctResponse ductResponse) {\n        List<File> files = new ArrayList<>();\n        File file = getFileFromS3(ductJobMapping);\n        Map<String, List<String>> outputMap = populatLineNumberAndErrorResponse(errorData);\n        ductResponse.setFailedRecords(outputMap.size());\n        File outputErrorFile = new File(UUID.randomUUID() + \".csv\");\n        File outputSuccessFile = new File(UUID.randomUUID() + \".csv\");\n\n        List<String> headers = new ArrayList<>();\n\n        try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);\n             CsvListWriter errorFileCSVListWriter = new CsvListWriter(new FileWriter(outputErrorFile), CsvPreference.STANDARD_PREFERENCE);\n             CsvListWriter successFileCSVListWriter = new CsvListWriter(new FileWriter(outputSuccessFile), CsvPreference.STANDARD_PREFERENCE)) {\n            headers = csvReader.read();\n            successFileCSVListWriter.write(headers);\n            headers.add(\"Error Reason - * Error records might have partial record level data inserted/updated","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5a9616a6-223b-4464-8233-c3fc2973ef6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":24,"endLine":58,"content":"insight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.collect.Lists;\nimport com.snowflake.client.jdbc.SnowflakeDriver;\nimport exception.SystemException;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\n\nimport java.io.File;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FORMAT;\n\n@Service\n@Order(900)\n@Slf4j\npublic class SnowflakeDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String RESULTS = \"results\";\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2d12fa9-5b21-4932-b0ee-1af43df883cf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":143,"endLine":152,"content":"ADATA_ENGINE_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<MetadataEngineConfig> metadataEngineConfigs = new ObjectMapper().readValue(in, new TypeReference<List<MetadataEngineConfig>>() {\n            });\n            metadataEngineConfigDao.dropCollection();\n            metadataEngineConfigDao.insertAll(metadataEngineConfigs);\n        }\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43feb046-e19a-4ef7-bd48-d962cb0fd79f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/EcosystemsValidationDataSourceService.java","startLine":98,"endLine":119,"content":"finition::getFieldName, i -> i));\n        checkForFieldOperatorsSupported(ductRequestDTO.getCriteria(), fieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n    }\n\n    private static void checkForFieldOperatorsSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperatorsSupported(filterCriteria, fieldNameToFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                GSFieldDefinition fieldDefinition = fieldNameToFieldDefinitionMap.get(criteria.getFieldName());\n                if (!isFilterOperatorSupported(criteria, fieldDefinition, caasConnectorConfig, isSync)) {\n                    DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                            String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), fieldDefinition.getFieldName()));\n                }\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupported(Criteria criteria, GSFieldDefinition fieldDefinition, CaasConnectorConfig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5b2e670-75cc-4250-824a-c894a0eda916","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/snowflake/DBConnectorsQueryBuilder.java","startLine":76,"endLine":96,"content":"Type) && DataType.DATETIME.equals(rule.getFieldInfo().getDataType())) {\n                if (MapUtils.isNotEmpty(ntzFields) && ntzFields.containsKey(rule.getFieldInfo().getJsonPath())) {\n                    clause = replaceLeft(clause, \"CONVERT_TIMEZONE('\" + ntzFields.get(rule.getFieldInfo().getJsonPath()) + \"', 'UTC', \" + \"\\\"\" + rule.getFieldInfo().getJsonPath() + \"\\\")\");\n                } else {\n                    clause = replaceLeft(clause, \"CONVERT_TIMEZONE('UTC', \" + \"\\\"\" + rule.getFieldInfo().getJsonPath() + \"\\\")\");\n                }\n            } else if (ConnectorType.DATABRICKS.equals(connectorType)) {\n                if (DataType.DATETIME.equals(rule.getFieldInfo().getDataType())) {\n                    if (MapUtils.isNotEmpty(ntzFields) && ntzFields.containsKey(rule.getFieldInfo().getJsonPath())) {\n                        clause = replaceLeft(clause, \"CONVERT_TIMEZONE('\" + ntzFields.get(rule.getFieldInfo().getJsonPath()) + \"', 'UTC', `\"\n                                + rule.getFieldInfo().getJsonPath() + \"`)\");\n                    } else {\n                        clause = replaceLeft(clause, \"CONVERT_TIMEZONE('UTC', `\" + rule.getFieldInfo().getJsonPath() + \"`)\");\n                    }\n                } else {\n                    clause = replaceLeft(clause, \"`\" + rule.getFieldInfo().getJsonPath() + \"`\");\n                }\n            } else {\n                clause = replaceLeft(clause, \"\\\"\" + rule.getFieldInfo().getJsonPath() + \"\\\"\" );\n            }\n            c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad7c532f-949d-439d-9e0b-bb2877629bb0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/IpaasBulkFileDownloadProducerService.java","startLine":1,"endLine":9,"content":"package com.gainsight.duct;\n\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\n\npublic interface IpaasBulkFileDownloadProducerService {\n    String pushMessageForFileDownload(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload);\n\n    String pushMessageForFileDownloadDH(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b27ae5f-f3d6-4330-96ed-940c09d33e92","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":343,"endLine":364,"content":"oryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType());\n            Map<String, Object> objectDefinition = omdConverterFactoryService.addObjectDetailsToOMDFormat(objectName, pnpConnectionsInfo);\n            for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n                if (ConnectorType.SERVICENOW.equals(pnpConnectionsInfo.getConnectionType()) &&\n                        StringUtils.isNotEmpty(apiConfigAttribute.getResponseRootKey())) {\n                    nativeMetadataFromCE = nativeMetadataFromCE.get(apiConfigAttribute.getResponseRootKey());\n                }\n                omdConverterFactoryService.convertToOMDFormat(nativeMetadataFromCE, objectDefinition, pnpConnectionsInfo, apiConfigAttribute);\n            }\n\n            Map<String, ObjectDefinition> omdMetadata = Collections.singletonMap(objectName, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n            if (ConnectorType.SERVICENOW.equals(pnpConnectionsInfo.getConnectionType())) {\n                List<String> superClassObjects;\n                if (!superClassInfo.containsKey(objectName)) {\n                    superClassObjects = new ArrayList<>();\n                } else {\n                    superClassObjects = superClassInfo.get(objectName);\n                }\n\n                //No superclass for the object\n                if (CollectionUtils.isNotEmpty(superClassObjects)) {\n                    Set<GSFieldDefinition> fieldsSet = n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ecaf1666-9792-4e15-a365-29f3bb289836","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":52,"endLine":84,"content":"eetings\";\n    private static final String MEETINGS_END_POINT = \"v2/meetings/%s\";\n    private static final String MEETING_INVITEES_KEYWORD = \"meeting_invitees\";\n    private static final String SETTINGS_KEYWORD = \"settings\";\n    private static final String DOWNLOAD_URL = \"download_url\";\n    private static final String DOWNLOAD_ACCESS_TOKEN = \"download_access_token\";\n    private static final String ACCESS_TOKEN_KEYWORD = \"?access_token=\";\n    private static final String PAGINATION_SUPPORTED = \"isPaginationSupported\";\n    private static final String NEXT_PAGE_TOKEN = \"next_page_token\";\n    private static final String TOTAL_RECORDS = \"total_records\";\n    private static final String ACCESS_TOKEN = \"access_token\";\n    private static final String REFRESH_TOKEN = \"refresh_token\";\n    private static final String RESPONSE_KEY = \"responseKey\";\n    private static final String CODE = \"code\";\n    private static final String FETCH_MEETING_INVITEE_DETAILS = \"fetchMeetingInviteeDetails\";\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return ZOOM_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7a3151b6-518d-4c63-a594-b5c03bab28de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/Operators.java","startLine":24,"endLine":45,"content":"e\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $right\", \"$left NOT LIKE $right\", \"$left NOT LIKE $right\"),\n    DOES_NOT_CONTAINS(\"Like\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $right\", \"$left NOT LIKE $right\", \"$left NOT LIKE $right\"),\n    STARTS_WITH(\"LIKE\", FilterOperator.STARTS_WITH, \"$left ILIKE $right\", \"$left LIKE $right\", \"$left LIKE $right\"),\n    ENDS_WITH(\"Ends With\", FilterOperator.ENDS_WITH, \"$left ILIKE $right\", \"$left LIKE $right\", \"$left LIKE $right\"),\n    INCLUDES(\"includes\", FilterOperator.INCLUDES, \"$left IN ($right)\", \"$left IN ($right)\", \"$left IN ($right)\"),\n    EXCLUDES(\"excludes\", FilterOperator.EXCLUDES, \"$left NOT IN ($right)\", \"$left NOT IN ($right)\", \"$left NOT IN ($right)\"),\n    IS_NULL(\"isNull\", FilterOperator.IS_NULL, \"$left is Null\", \"$left IS NULL\", \"$left IS NULL\"),\n    IS_NOT_NULL(\"isNotNull\", FilterOperator.IS_NOT_NULL, \"$left is Not Null\", \"$left IS NOT NULL\", \"$left IS NOT NULL\");\n\n    Operators(String gainsightOpertor, FilterOperator filterOperator, String sqlOperator, String bqSQLOperator, String sapSQLOperator) {\n        this.gainsightOpertor = gainsightOpertor;\n        this.filterOperator = filterOperator;\n        this.sqlOperator = sqlOperator;\n        this.bqSQLOperator = bqSQLOperator;\n        this.sapSQLOperator = sapSQLOperator;\n    }\n\n    private String gainsightOpertor;\n    private FilterOperator filterOperator;\n    private String sqlOperator;\n    private String bqSQLOperator;\n    private String sapSQLOperator","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1b991dda-e09a-43fe-8ca5-e361052ccfcf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":492,"endLine":513,"content":"sourceUri);\n            Response response = httpClientService.get(resourceUri + \"/api/data/v9.0/WhoAmI\", header);\n            if (response.getStatus() != 200) {\n                throw new SystemException(CaasValidationCode.INVALID_ORGANIZATION_URL.getUserText(), CaasValidationCode.OAUTH_DYNAMICS_RESOURCE_INVALID, SC_BAD_REQUEST);\n            }\n            Map<String, Object> responseMap = response.readEntity(Map.class);\n            LOGGER.info(\"Response received from WhoAmI call is: {}\", responseMap);\n            return Pair.of((String) responseMap.get(\"OrganizationId\"), new URL(resourceUri).getHost());\n        } catch (Exception exception) {\n            LOGGER.error(\"Error in verify\", exception);\n            throw new SystemException(CaasValidationCode.INVALID_ORGANIZATION_URL.getUserText(), CaasValidationCode.OAUTH_DYNAMICS_RESOURCE_INVALID, SC_BAD_REQUEST);\n        }\n    }\n\n    private void populateConnectionProperties(BaseTokenDetail baseTokenDetail, Map<String, Object> pnpConnectionProperties) {\n        try {\n            Map<String, Object> headers = Maps.newHashMap();\n            String accessToken = CryptHandler.getInstance().decrypt(baseTokenDetail.getAccessToken());\n            headers.put(AUTHORIZATION, BEARER + accessToken);\n            Response response = httpClientService.get(pnpConnectionProperties.get(UCConstants.GSIntegration.SFDC_TOKEN_ID).toString(), headers);\n            if (response.getStatus() != HttpStatus.SC_OK) {\n                LOGGER.error(String.form","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35f1c99e-580a-449a-8e5d-872da8d5da0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/event/DuctEventServiceImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.duct.event;\n\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.ConnectorSystemAssetEventPayload;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.web.client.HttpClientService;\nimport com.google.common.collect.Maps;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.Map;\n\n@Service\npublic class DuctEventServiceImpl implements  DuctEventService{\n\n        @Autowired\n        private HttpClientService httpClientService;\n;\n\n        private static final Logger LOGGER = LoggerFactory.getLogger(DuctEventServiceImpl.class);\n        private static final String SYSTEM_ASSET_PUBLISHER_SHARED_SECRET = \"events.framework.system.asset.publisher.shared.secret\";\n        private static final String SYSTEM_ASSET_TOPIC_NAME = \"events.framework.system.asset.topic.name\";\n        private static final String SYSTEM_ASSET_EVENT_NAME = \"events.framework.system.asset.event.name\";\n        private static final String SYSTEM_ASSET_EVENT_VERSION = \"events.framework.system.asset.event.version\";\n        private static final String EVENTS_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.service.api.gateway.url.base\");\n        priv","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2a0f8c0-3f39-468b-96e9-dbe0d59c51ae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":660,"endLine":692,"content":");\n\n        }\n\n    }\n\n    private Map<String, Object> getErrorDataFromHubspot(String connectionId, String fileId) {\n        try {\n            HubspotTokenDetails accessDetailsFromDB = extractAccessDetails(connectionId);\n            HttpResponse response = null;\n            GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken()));\n            response = fetchService.getErrorFileData(\n                    accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken(),\n                    accessDetailsFromDB.getAccessToken(), fileId);\n            return extractResponse(response);\n        } catch (Exception e) {\n            log.error(\"Exception in getting Error file from Hubspot\", e);\n        }\n        return null;\n    }\n\n    protected int pollCount() {\n        String propName = \"duct.hubspot.wb.max.poll.count\";\n        int count =\n                DEPLOYMENT_PROPERTIES.getIntegerValue(propName, 360);\n        log.info(\"Poll count is {}, for prop {} \", count, propName);\n        return count;\n    }\n\n    protected int pollDelaySeconds() {\n        String propName = \"duct.hubspot.wb.poll.delay.sec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3397a274-c5c6-49d4-900a-4a4f9812128d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":486,"endLine":500,"content":"th native movement, datatype refers to datatypeMappings in caas_connector_config*/\n                compareValues(ceMetadata.get(DATA_TYPE).toString(), gsFieldDefinition.getDataType().toLowerCase(), \"DataType doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n            }\n            compareValues(meta.get(IS_PICKLIST_FIELD).toString(),\n                    gsFieldDefinition.getDataType().equalsIgnoreCase(\"PICKLIST\")\n                            || gsFieldDefinition.getDataType().equalsIgnoreCase(\"MULTISELECTDROPDOWNLIST\"),\n                    \"Picklist field doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n\n            compareValues(meta.get(ORIGINAL_DATA_TYPE).toString(), gsFieldDefinition.getMeta().getOriginalDataType(), \"OriginalDataType doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n            if (!ConnectorType.SERVICENOW.equals(connectorType)) {\n                //As there's difference in the label of CE and Servicenow for few fields, this comparison is not valid for Servicenow\n                compareValues(ceMetadata.get(LABEL).toString(), gsFieldDefinition.getLabel(), \"Label doesn't Match with native - CE : {%s}, Native : {%s}, FieldName : {%s}\", entry.getKey(), sb);\n            }\n            if (ceMetadata.containsKey(OPTIONS)) {\n                List<Map<String, String>> options = MAPPER.convertValue(ceMetadata.get(OPTIONS), new TypeRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9754a65a-1c0f-466d-ae8b-b85dabb9250b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorServiceImpl.java","startLine":32,"endLine":49,"content":"= DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.topic.name\");\n    private static final String WEBHOOK_EVENT_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.name\");\n    private static final String WEBHOOK_EVENT_VERSION = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.version\");\n    private static final String ZOOM_EVENT_VALIDATION_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"zoom.event.validation.secret\");\n    private static final String ENDPOINT_URL_VALIDATION_NOTIFICATION = \"endpoint.url_validation\";\n    private static final String RECORDING_TRANSCRIPT_COMPLETED = \"recording.transcript_completed\";\n    private static final String PLAIN_TOKEN = \"plainToken\";\n    private static final String ENCRYPTED_TOKEN = \"encryptedToken\";\n    private static final String V0 = \"v0\";\n    private static final String EVENT = \"event\";\n    private static final String PAYLOAD = \"payload\";\n    private static final String OBJECT = \"object\";\n    private static final List<String> ZOOM_RECORDING_EVENT_FIELDS = Arrays.asList(\"uuid\", \"id\", \"type\");\n    private static final String ACCOUNT_ID = \"account_id\";\n    private static final String X_ZM_SIGNATURE = \"x-zm-signature\";\n    private static final String X_ZM_REQUEST_TIMESTAMP = \"x-zm-request-timestamp\";\n    private static final String ZOOM_ACCOUNT_ID = \"ZOOM_ACCOUNT_ID\";\n    private PNPConnectionInfoDao pnp","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b319b21c-3e6a-47ce-a734-e8fdf8ee0acd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/redis/GainsightRedisTemplateImpl.java","startLine":65,"endLine":75,"content":"  if (factory != null) {\n          try {\n            factory.destroy();\n          } catch (Exception e) {\n            LOGGER.warn(REDIS_ERROR, e);\n          }\n        }\n      }\n    });\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b301ad7-6e8d-408e-9cf7-3f43bb7af78f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/GeneratedMetadataCacheDaoImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.metadata.engine.GeneratedMetadataCache;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\nimport com.gainsight.utils.GainsightPrecondition;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport static org.apache.http.HttpStatus.SC_BAD_REQUEST;\n\n@Repository\npublic class GeneratedMetadataCacheDaoImpl extends AbstractEntityDaoImpl<GeneratedMetadataCache> implements GeneratedMetadataCacheDao {\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    public GeneratedMetadataCacheDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, GeneratedMetadataCache.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    prot","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"527614d4-a49f-4b44-a5c5-51335733107e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":493,"endLine":534,"content":"etMetadataTransformationConfig().get(\"spec\"), List.class);\n    Chainr chainr = Chainr.fromSpec(spec);\n    List<Map<String, Object>> finalData = new ArrayList<>();\n    for (Map<String, Object> datum : data) {\n      finalData.add(OBJECT_MAPPER.convertValue(chainr.transform(datum), new TypeReference<Map<String, Object>>() {\n      }));\n    }\n    return finalData;\n  }\n\n  @Override\n  protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n    internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n  }\n\n  @Override\n  protected String getTaskName() {\n    return CAAS_FRESHDESK_EXTRACT;\n  }\n\n  @Override\n  protected String getTeamName() {\n    return DuctConstants.CONNECTORS;\n  }\n\n  @Override\n  protected String getUseLatest() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.freshdesk.external.task.extract.use.latest\", \"true\");\n  }\n\n  @Override\n  protected String getVersion() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.freshdesk.external.task.extract.version\", \"v1\");\n  }\n\n  @Override\n  protected String getTaskTimeoutMins() {\n    return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.freshdesk.external.task.default.timeout\", \"240\");\n  }\n\n  @Override\n  protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNam","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14af2345-4c3f-49ea-b728-02aaeec8fad8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":22,"endLine":55,"content":"ers.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.util.EntityUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctErrorConstants.MESSAGE;\nimport static org.apache.calcite.avatica.remote.JsonService.MAPPER;\n\n@Service\n@Order(1100)\n@Slf4j\npublic class ZoomDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    @Autowired\n    private CaasObjectApiConfigDao caasObjectApiConfigDao;\n    private static final String ZOOM_EXTRACT_TASK = \"CaasZoomExtract\";\n    private static final String RECORDINGS_FILES_KEYWORD = \"recording_files\";\n    private static final String RECORDING_PLAY_PASSCODE = \"recording_play_passcode\";\n    private static final String RECORDINGS_KEYWORD = \"recordings\";\n    private static final String MEETINGS_KEYWORD = \"meetings\";\n    private static final String MEETINGS_END_POINT = \"v2/meetings/%s\";\n    private static final String MEETING_INVITEES_KEYWORD = \"meeting_invitees\";\n    private static final String SETTINGS","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"faf90c88-9b75-4ba9-bb55-8f4b0fee6bef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":152,"endLine":174,"content":"questParam(value = \"consumer\", required = false) String consumer) {\n        try {\n            return new ResponseObj(true, metadataDriver.initiateMetadataRefresh(connectionId, objectName, recordId));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Get metadata from cache\", response = ObjectDefinition.class)\n    @GetMapping(value = \"/engine/{connectionId}/{objectname}/attributes\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjectAttributesUsingEngine(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                      @ApiParam(value ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c98a9a9e-02b4-4233-a0a1-864d3bdb6135","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":180,"endLine":202,"content":"xception {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        if (ConnectorType.HUBSPOT.equals(ductResponse.getConnectorType())) {\n            List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n            for (Map<String, Object> internalResultsMap : externalResultsList) {\n                Map<String, Object> propertiesMap = (Map<String, Object>) internalResultsMap.get(PROPERTIES);\n                if (internalResultsMap.containsKey(ID))\n                    propertiesMap.put(ID, internalResultsMap.get(ID));\n                responseList.add(propertiesMap);\n            }\n        } else {\n            Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n            if (!first.isPresent())\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd735f56-fc58-4175-8c0a-eeae167f728c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":205,"endLine":225,"content":", oAuthDetail, String\n                        .valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL)), String\n                        .valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ORG_TYPE)));\n            } else if (accountType == AccountType.DYNAMICS) {\n                String resource = String.valueOf(pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DYNAMICS_ORG_URI));\n                LOGGER.debug(\"accessTokenAuthorization for {}\", resource);\n                token = gainsightAccountService.accessToken(accountType, code, hostUrl, resource, oAuthDetail);\n            } else if (accountType == AccountType.HUBSPOT) {\n                LOGGER.info(\"Authorising Hubspot Connector\");\n                token = gainsightAccountService.accessToken(accountType, code, hostUrl, null, oAuthDetail);\n            }\n            try {\n                //Commenting this part for now. As this wont be there. (Confirmed with Suraj)\n                /**if (GainsightUtils.parseBoolean(additionalState.get(USER_LEVEL_AUTH))) {\n                 handleUserAuth(oAuthDetail, pnpConnectionsInfo, token, (String) additionalState.get(USER_GSID));\n                 return;\n                 }*/\n                authorizeConnection(oAuthDetail, pnpConnectionsInfo, token, oldConnectionStatus);\n//        linkCRMConnection(pnpConnectionsInfo);\n                pnpConnectionInfoDao.update(pnpConnectionsInfo);\n            } catch (SystemException ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8527a228-49fa-47ba-8877-002d81a7ee03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":231,"endLine":250,"content":"         ResponseObj responseObj = response.readEntity(ResponseObj.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n            return OBJECT_MAPPER.convertValue(responseObj.getData(), QueryAPIResponseBean.class);\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n\n        return null;\n    }\n\n\n    private Map<String, Object> getB2BHeaders() {\n        Map<String, Object> headers = Maps.newHashMap();\n        GainsightPrecondition.assertNotNull(RequestContextProvider.getRequestInfo(), CoreErrorCode.INVALID_REQUEST_INFO);\n        headers.put(\"Content-Type\", \"application/json\");\n        headers.put(\"secret\", CryptUtil.getSimpleCryptor().encrypt(this.ductClientConfig.secret()).getValue());\n        headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n        return headers;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0c760d7-f6a4-4db7-a829-8a70b7a53535","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/JiraToOMDConverterServiceImpl.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Service\npublic class JiraToOMDConverterServiceImpl implements OMDConverterBaseService{\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.JIRA.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) {\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b178401e-f62f-4939-a6f9-fea3e9bef1ba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/ConnectionAccountDAO.java","startLine":1,"endLine":16,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.account.AccountDetail;\n\n/**\n * User: santa\n * Date: 17/4/14\n * Time: 3:27 PM\n */\npublic interface ConnectionAccountDAO extends AbstractEntityDao<AccountDetail> {\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cca4417d-6103-49d6-bfb7-7b79325a57dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.constants;\n\nimport com.gainsight.properties.DeploymentProperties;\n\npublic final class DuctConstants {\n\n    public static final String DUCT = \"CaaS\";\n    public static final String CAAS_JOB = \"CaaS Job\";\n    public static final String CAAS_WEB = \"caas-web\";\n    public static final String CAAS_WORKER = \"caas-worker\";\n    public static final String DYNAMICS_OMD_META_DATA = \"DYNAMICS_OMD_META_DATA\";\n    public static final String DYNAMICS_RAW_META_DATA = \"DYNAMICS_RAW_META_DATA\";\n    public static final String RESOLVE_PICKLIST_OPTIONS = \"resolvePicklistOptions\";\n    public static final String FORWARD_SLASH = \"/\";\n    public static final String FILLER = \"-\";\n    public static final String PERCENTAGE = \"%\";\n    public static final String COLON = \":\";\n    public static final String EQUALS = \"=\";\n    public static final String NOT = \"NOT\";\n    public static final String CSV = \".csv\";\n    public static final String EXPRESSION_FOR_REQUIRED_FIELDS = \"expressionForRequiredFields\";\n    public static final String EXPRESSION_FOR_UPSERT_KEYS = \"expressionForUpsertKeys\";\n    public static final String HS_OBJECT_ID = \"hs_object_id\";\n    public static final String SUB_TASK_TYPE = \"subTaskType\";\n    public static final String TASK_NAME = \"taskName\";\n    public static final String TEAM_NAME = \"teamName\";\n    public static final String VERSION = \"version\";\n    public static final String USE_LATEST = \"useLatest\";\n    public static final String PARENTS = \"parents\";\n    pub","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2deec127-1965-4883-969f-bc7b060aa2f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":109,"endLine":135,"content":" private GainsightLoadFactory gainsightLoadFactory;\n\n    private CaasMetadataFactory caasMetadataFactory;\n\n    private ZoomEventProcessorService zoomEventProcessorService;\n\n    private EngineCommonDataSourceService engineCommonDataSourceService;\n\n    private MetadataDriver metadataDriver;\n\n    private CaasConnectorConfigService caasConnectorConfigService;\n\n    private ValidationConnectorDataSourceFactory validationConnectorDataSourceFactory;\n    private MSTeamsEventProcessorService msTeamsEventProcessorService;\n\n    @Autowired\n    CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n    @Autowired\n    public DuctJobMappingServiceImpl(QueueProducer queueProducer, DuctJobMappingDao ductJobMappingDao, PNPConnectionInfoDao pnpConnectionInfoDao,\n                                     ConnectorDataSourceFactory connectorDataSourceFactory, DuctValidationService ductValidationService,\n                                     CaasMetadataFactory caasMetadataFactory, GainsightLoadFactory gainsightLoadFactory,\n                                     ZoomEventProcessorService zoomEventProcessorService, EngineCommonDataSourceService engineCommonDataSourceService,\n                                     MetadataDriver metadataDriver, CaasConnectorConfigService caasConnectorConfigService,\n                                     ValidationConnectorDataSourceFactory validationConnectorDataSourceFactory, MSTeamsEventProcessorService msTeamsEventProcessorService) {\n        this.queueProducer = queueProducer;\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2f120bb1-dd89-4e90-ac3d-84db949e57e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":231,"endLine":251,"content":"\n    }\n\n    private static FilterRule buildRule(Criteria criteria, Map<String, Map<String, Object>> objectToFieldDBNameToGSDataTypeMap,\n                                                                 Map<String, Map<String, GSFieldDefinition>> objectToFieldDBNameToFieldDefinitionMap, List<String> ignoreMetadataFieldNames, CaasConnectorConfig caasConnectorConfig,\n                                                                 String objectName, boolean fieldsFlattened) {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            Map<String, Object> fieldNameGSDataTypeMap;\n            Map<String, GSFieldDefinition> fieldNameMetaMap;\n            String[] fieldSplitted = criteria.getFieldName().split(\"\\\\.\");\n\n            String targetFieldName;\n            if (fieldSplitted.length == 3) {\n                targetFieldName = fieldSplitted[2];\n                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n            } else if (fieldSplitted.length == 4) {\n                targetFieldName = fieldSplitted[2] + UCConstants.PERIOD + fieldSplitted[3];\n                fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n            ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"056629c4-85b9-4497-948e-fcc2f7b87140","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":542,"endLine":558,"content":"       break;\n      }\n    } catch (Exception e) {\n      log.error(\"[SAP DATASPHERE] Error while populating file locations\", e);\n    } finally {\n      for (File file : successfulFiles) {\n        FileUtils.deleteQuietly(file);\n      }\n      for (File file : failedFiles) {\n        FileUtils.deleteQuietly(file);\n      }\n      FileUtils.deleteQuietly(mergedFile);\n    }\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45be67cd-3c37-4cfa-b7ec-e0c18ff52784","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":375,"endLine":402,"content":"   } else {\n                    evaluatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n                break;\n            case INCLUDES:\n                List<Object> includeValues = new ArrayList<>();\n                if (rule.getValues() instanceof List) {\n                    for (FieldInfo fieldInfo : rule.getValues()) {\n                        if (isStringType(externalDataType) && !Objects.isNull(fieldInfo.getValue())) {\n                            includeValues.add(escapeSql(String.valueOf(fieldInfo.getValue())));\n                        } else {\n                            includeValues.add(fieldInfo.getValue());\n                        }\n                    }\n                } else {\n                    FieldInfo fieldInfo = rule.getValues().get(0);\n                    if (isStringType(externalDataType) && !Objects.isNull(fieldInfo.getValue())) {\n                        includeValues.add(escapeSql(String.valueOf(fieldInfo.getValue())));\n                    } else {\n                        includeValues.add(fieldInfo.getValue());\n                    }\n                }\n                if (CollectionUtils.isNotEmpty(includeValues)) {\n                    List<String> includeValuesAsString = includeValues.stream().map(value -> \"'\" + value + \"'\").collect(Collectors.toList());\n                    if (isPicklist(externalDataType)) {\n                        evaluatedExpression.appe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d4461ee-7e5e-4a91-a3fe-53558a571c65","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UserManagementUtil.java","startLine":54,"endLine":72,"content":"tailDTO evaluationResult;\n        try {\n            evaluationResult = featureConfigEvaluationService.evaluate(\"GS_USERS_SERVICE_ENABLED\", RequestContextProvider.getTenantId());\n            if (evaluationResult.getValue() instanceof List) {\n                return ListUtils.emptyIfNull((List) evaluationResult.getValue());\n            } else {\n                return GainsightUtils.parseBoolean(evaluationResult.getValue()) ? Arrays.asList(ApiConsumer.UNKNOWN.toString()) : Collections.emptyList();\n            }\n        } catch (Exception e) { //NOSONAR\n            return Collections.emptyList();\n        }\n    }\n\n    private static ClientConfig getClientConfig() {\n        Credentials credentials = new Credentials().withRequestInfo(RequestContextProvider.getRequestInfo())\n            .withEncryptedSecret(encryptB2B());\n        return new ClientConfig().withHost(FT_HOST).withCredentials(credentials).withEnvironment(ENV);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2e141624-b9e0-43c2-8bb4-bde3eee71d0b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":209,"endLine":235,"content":"   }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        GainsightPrecondition.assertTrue((null == ductJobMapping.getCriteria())\n                , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n\n        Map<String, Object> externalSystemResponse = new HashMap<>();\n        Map properties = pnpConnectionsInfo.getProperties();\n        String absoluteObjectPath = UCConstants.BACKTICK + properties.get(UCConstants.GSIntegration.SCHEMA_NAME).toString() + UCConstants.BACKTICK + UCConstants.PERIOD +\n                UCConstants.BACKTICK + properties.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + UCConstants.BACKTICK + UCConstants.PERIOD +\n                UCConstants.BACKTICK + ductJobMapping.getResourceName().replaceAll(StringUtils.SPACE, UCConstants.UNDERSCORE) + UCConstants.BACKTICK;\n\n        try {\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86046212-a5e8-4247-b39c-3cb4d78d933a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1050,"endLine":1074,"content":"eOf(ecosystemProperties.get(ACCESS_TOKEN)\n                            ).trim(), pnpConnectionsInfoFromDB.getConnectionType()));\n                    if (ecosystemProperties.containsKey(URL)) {\n                        pnpConnectionsInfoFromDB.getProperties().put(URL, ecosystemProperties.get(URL));\n\n                    }\n                    break;\n                case ZENDESK:\n                case JIRA:\n                case ZUORA:\n                case SERVICENOW:\n                case PIPEDRIVE:\n                    pnpConnectionsInfoFromDB.setAuthorizationType(AuthorizationType.OAUTH);\n                    CaasConnectionService service = caasConnectionFactory.getService(pnpConnectionsInfoFromDB.getConnectionType());\n                    pnpConnectionsInfoFromDB = service.updateConnection(pnpConnectionsInfoFromDB, pnpconnectionInputFromUI);\n                    break;\n                case ZUORAV2:\n                    CaasConnectionService caasConnectionService = caasConnectionFactory.getService(pnpConnectionsInfoFromDB.getConnectionType());\n                    pnpConnectionsInfoFromDB = caasConnectionService.updateConnection(pnpConnectionsInfoFromDB, pnpconnectionInputFromUI);\n                    authorizeConnection(pnpConnectionsInfoFromDB,null);\n                    break;\n                case FRESHDESK:\n                case SAP_DATASPHERE:\n                    CaasConnectionService connectionService = caasConnectionFactory.getService(pnpConnectionsInfoFromDB.getConnectionType());\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55ae0435-e551-47b0-a44e-84199288978a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":61,"endLine":85,"content":"dInfo, boolean isMultiValued) throws CaasException {\n        try {\n            Pattern pattern = Pattern.compile(\"\\\\[.*?\\\\]\"); //earlier we were just expecting a digit here. Now this regex will take anything inside []\n            String[] pathArray = fieldInfo.split(\"\\\\.\");\n            int depth = 0;\n            JsonElement jsonElement = object.getAsJsonObject();\n            while (depth < pathArray.length - 1) {\n                //specifically to handle array objects with index\n                Matcher matcher = pattern.matcher(pathArray[depth]);\n                if (matcher.find()) {\n                    JsonElement jsonElementTemp = jsonElement.getAsJsonObject().get(pathArray[depth].replace(matcher.group(0), \"\"));\n                    if (jsonElementTemp == null || jsonElementTemp.isJsonNull()) {\n                        return null;\n                    }\n\n                    if (isMultiValued) {\n                        jsonElement = jsonElementTemp;\n                    } else {\n                        jsonElement = jsonElementTemp.getAsJsonArray().get(0).getAsJsonObject();\n                    }\n                    depth++;\n                } else if (jsonElement == null || jsonElement.getAsJsonObject().get(pathArray[depth]) == null\n                        || jsonElement.getAsJsonObject().get(pathArray[depth]) == JsonNull.INSTANCE\n                        || !jsonElement.getAsJsonObject().get(pathArray[depth]).isJsonObject()) {\n                    log.info(\"No data for the json pa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"181ee1d3-550e-488e-81a4-ae558f16512a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFileUtility.java","startLine":85,"endLine":130,"content":"\n    LOGGER.debug(\"Request received to delete files quietly\");\n    for (File file : files) {\n      FileUtils.deleteQuietly(file);\n    }\n  }\n\n  public static String getFullS3Path(String basePath, String type, String id, String subPath, String... morePaths) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(basePath)\n        .append(subPath)\n        .append(UCConstants.FORWARD_SLASH);\n\n    if (morePaths != null) {\n      for (String path : morePaths) {\n        sb.append(path).append(UCConstants.FORWARD_SLASH);\n      }\n    }\n\n    sb.append(StringUtils.upperCase(type));\n\n    if (id != null) {\n      sb.append(UCConstants.UNDERSCORE)\n          .append(id);\n    }\n\n    sb.append(UCConstants.JSON);\n\n    return sb.toString();\n  }\n\n  public static long getRecordCount(File csvFile) {\n    try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n      // Skip the header line\n      br.readLine();\n\n      // Count the remaining lines (records)\n      long numRecords = br.lines().count();\n      return numRecords;\n    } catch (Exception e) {\n      LOGGER.error(\"Exception occurred while reading the file\", e);\n      return -1;\n    }\n  }\n\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4a228f8-b47d-41f4-bb0c-1c62ca70d904","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":259,"endLine":291,"content":"flatten(criteria, flattenedCriteria);\n        return flattenedCriteria;\n    }\n\n    private void flatten(Criteria criteria, List<Criteria> flattenedCriteria) {\n        if (criteria.getFilters() == null || criteria.getFilters().isEmpty()) {\n            // Base case: No nested filters, add current criteria to flattened list\n            flattenedCriteria.add(criteria);\n        } else {\n            // Recursively flatten nested filters\n            for (Criteria nestedCriteria : criteria.getFilters()) {\n                flatten(nestedCriteria, flattenedCriteria);\n            }\n        }\n    }\n\n    private Map<String, GSFieldDefinition> getDateTimeFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> dateTimeFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> kv.getValue().getDataType().equalsIgnoreCase(com.gainsight.platform.metadata.DataType.DATETIME.getValue()))\n                .forEach(kv -> dateTimeFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return dateTimeFieldsMap;\n    }\n\n\n    private Map<String, GSFieldDefinition> getExternalFilterableFieldsMap(Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        Map<String, GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> BooleanUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"741942b2-a884-4b33-915d-5e0f3476d507","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":103,"endLine":122,"content":"tatic final String DATA_PREVIEW_AVAILABLE = \"dataPreviewAvailable\";\n        public static final String DATA_PREVIEW_AVAILABLE_FOR_LOOKUP_FIELDS = \"dataPreviewAvailableForLookUpFields\";\n        public static final String DEFAULT_VALUE = \"defaultValue\";\n        public static final String FIELD_GROUP_TYPE = \"fieldGroupType\";\n        public static final String PRECISION = \"precision\";\n        public static final String LENGTH = \"length\";\n        public static final String NAME_FIELD = \"nameField\";\n        public static final String AGGREGATABLE = \"aggregatable\";\n        public static final String LOOKUP_DETAIL = \"lookupDetail\";\n        public static final String COLOR = \"color\";\n    }\n\n    public class ConnectorConfigConstants {\n        public static final String PICKLIST_VALUES_PATH = \"picklistValuesPath\";\n        public static final String FALLBACK_PICKLIST_VALUES_PATH = \"fallbackPicklistValuesPath\";\n        public static final String PICKLIST_NAME_IDENTIFIER = \"picklistNameKey\";\n        public static final String PICKLIST_VALUE_IDENTIFIER = \"picklistValueKey\";\n        public static final String SYNC_REQUEST_MAX_PAGE_SIZE = \"syncRequestMaxPageSize\";\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bc9b4957-7b49-48ff-9111-9f1b018fc2c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/Zuorav2ToOMDConverterServiceImpl.java","startLine":28,"endLine":54,"content":"nts.DescribeMetaConstants.FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.LABEL;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.ORIGINAL_DATA_TYPE;\nimport static com.gainsight.integration.bean.IPaasConstants.META;\n\n@Service\npublic class Zuorav2ToOMDConverterServiceImpl implements OMDConverterBaseService{\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.ZUORAV2.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        JsonNode fieldList = fields.get(\"object\").get(\"fields\").get(\"field\");\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = connectorConfig.getFallbackDataTypeMappings();\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9382850f-b653-4d31-a77a-33d31ddb980d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":468,"endLine":486,"content":" pnpConnectionInfoDao.findByConnectionId(connectionId);\n      MetadataGenerationDetails metadataGenerationDetails =\n          MetadataGenerationDetails.builder().jobId(UUID.randomUUID().toString()).connectionId(connectionId)\n              .objectName(objectName).connectorType(pnpConnectionsInfo.getConnectionType()).recordId(recordId)\n              .tenantId(RequestContextProvider.getTenantId()).status(MetadataJobStatus.INIT)\n              .encryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(\n                  JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded()).build();\n      MetadataGenerationDetails metadataGenerationDetailsDB = metadataGenerationDetailsDao.insert(metadataGenerationDetails);\n      queueMessage(metadataGenerationDetailsDB);\n      return MetadataGenerationResponse.builder().connectionId(metadataGenerationDetails.getConnectionId())\n          .connectorType(metadataGenerationDetails.getConnectorType()).objectName(metadataGenerationDetails.getObjectName()).status(metadataGenerationDetails.getStatus())\n          .jobId(metadataGenerationDetails.getJobId()).tenantId(metadataGenerationDetails.getTenantId()).build();\n    } catch (Exception e) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Exception occurred while trying to initiate metadata refresh\"));\n    }\n  }\n\n  @Override\n  public MetadataGenerationResponse getMe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e65ba7d-5b8c-4edc-9a47-316a0d3cd59b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":40,"endLine":72,"content":";\n  public static final String CAAS_BUCKET_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"s3.caas.bucket.name\");\n\n  /**\n   * This is the max content-length supported by Unified Conn\n   * ector\n   * while Importing tha data.\n   */\n  public static final long MAX_CONTENT_LENGTH = 5 * 1024 * 1024 * 1024L;\n  public static final long PART_SIZE = DeploymentProperties.getDeploymentProperties().getLongValue(\"s3.bulk.part.size\", 200 * 1024 * 1024);\n  private static final String PNP_ACCESS_KEY = DeploymentProperties.getDeploymentProperties().getValue(\"s3.access.key\");\n  private static final String PNP_SECRET_KEY = DeploymentProperties.getDeploymentProperties().getValue(\"s3.access.secret\");\n  private static final Boolean AWS_ROLE_MANDATORY = DeploymentProperties.getDeploymentProperties().getBooleanValue(\"aws.role.mandatory\", false);\n  private static final String S3_MULTI_PART_UPLOAD_FEATURE_ENABLED = \"S3_MULTI_PART_UPLOAD_FEATURE_ENABLED\";\n  private static GainSightS3 gainsightS3;\n\n  private DuctS3Utility() {\n  }\n\n    static {\n        if(AWS_ROLE_MANDATORY) {\n            LOGGER.info(\"Initializing Amazon S3 client via role based authentication.\");\n            gainsightS3 = GainSightS3.getDefault();\n        } else {\n            gainsightS3 = new GainSightS3(PNP_ACCESS_KEY, PNP_SECRET_KEY);\n        }\n    }\n\n    public static URL getSignedURL (String fileName) throws CaasException {\n        return getSignedURL(fileName, 15);\n    }\n\n    public static URL getSignedURL (String ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bd7ef9d-9403-41e2-9489-89ad9a6d74ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GSDTOTransformer.java","startLine":76,"endLine":100,"content":"lookups = new HashMap<>();\n        List<Map<String, Object>> transformedRecords = new ArrayList<>();\n        for(Map<String, Object> record: externalDataRequestDto.getRequests()){\n            Map<String, Object> directFields = new HashMap<>();\n            Map<String, Object> lookupFields = new HashMap<>();\n            Map<String, Object> recordInside = (Map<String, Object>) record.get(\"record\");\n            for(Map.Entry<String,Object> tuple : recordInside.entrySet()){\n                if(tuple.getKey().startsWith(DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX)){\n                    lookupFields.put(tuple.getKey(), tuple.getValue());\n                }else{\n                    directFields.put(tuple.getKey(), tuple.getValue());\n                }\n            }\n\n            for(Map.Entry<String,Object> tuple : lookupFields.entrySet()){\n                String key = tuple.getKey();\n                ImportLookupLite importLookupLite = new ImportLookupLite();\n                importLookupLite.setLookupField(\"Gsid\");\n                importLookupLite.setObjectName(key.substring(\n                        key.indexOf(DuctConstants.LOOKUP_OBJECT_PATTERN)+ DuctConstants.LOOKUP_OBJECT_PATTERN.length()));\n                importLookupLite.setMultiMatchOption(LookUpMatchOption.FIRSTMATCH);\n                importLookupLite.setOnNoMatch(LookupInsertOption.ERROR);\n\n                String gsidFieldName = key.substring(\n                        key.indexOf(DuctConstants.LOOKUP_FIELD_PATTERN_PREFIX) + DuctCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9eff41da-92e5-4a50-a89a-17d7a899559a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectConfigDAOImpl.java","startLine":58,"endLine":87,"content":"ndomUUID().toString());\n        getMongoTemplate().insert(objectListConfig);\n        return objectListConfig;\n    }\n\n    private void removeObjectListConfig(ConnectorType connectorType, String objectName) {\n        Query query = new Query().addCriteria(Criteria.where(\"connectorType\").is(connectorType));\n        query.addCriteria(Criteria.where(\"objectName\").is(objectName));\n        getMongoTemplate().remove(query, CaasObjectConfig.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasObjectConfig caasObjectConfig, String s) {\n        caasObjectConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasObjectConfig caasObjectConfig, String s) {\n    }\n\n    @Override\n    public void dropCollection() {\n        getMongoTemplate().dropCollection(CaasObjectConfig.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8dd44b9-a3f9-4cbe-86d7-819cd32af6f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":908,"endLine":931,"content":"ails.getFilesDir());\n        caasS3FileDetails.setBucketName(s3BucketDetails.getBucketName());\n        caasS3FileDetails.setBucketRegion(s3BucketDetails.getBucketRegion());\n//        caasS3FileDetails.setEncryptedAccessKey(s3BucketDetails.getEncryptedAccessKey());\n//        caasS3FileDetails.setEncryptedAccessSecret(s3BucketDetails.getEncryptedAccessSecret());\n        return caasS3FileDetails;\n    }\n\n    private List<ColumnMapping> createColumnMappings(BulkDataLoadRequest bulkDataLoadRequest) {\n        List<Mapping> rulesMappings = bulkDataLoadRequest.getMappings();\n        Object objectName = bulkDataLoadRequest.getParams().get(\"objName\");\n        List<ColumnMapping> caasMappings = new ArrayList<>();\n        String targetObjectName = null;\n        for (Mapping rulesMapping : rulesMappings) {\n            targetObjectName = rulesMapping.getTarget().getObjectName();\n            ColumnMapping caasColumnMapping = new ColumnMapping();\n            caasColumnMapping.setFieldName(rulesMapping.getTarget().getFieldName());\n            caasColumnMapping.setHeaderName(rulesMapping.getTarget().getFieldAlias());\n            caasColumnMapping.setIsKeyField(rulesMapping.getTarget().isIdentifier());\n            caasColumnMapping.setExternalFieldDataType(rulesMapping.getTarget().getDataType());\n            caasColumnMapping.setObjectName(null == targetObjectName ? objectName.toString() : targetObjectName);\n            caasMappings.add(caasColumnMapping);\n        }\n        return caasMappings;\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a69fd21-ddeb-45ed-8a44-70b150ea088b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":139,"endLine":159,"content":"           //handle if there is only one filter\n\n                    String targetFieldName;\n                    String[] fieldSplitted = criteria.getFieldName().split(\"\\\\.\");\n                    if (fieldSplitted.length == 3) {\n                        targetFieldName = fieldSplitted[2];\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n                    } else if (fieldSplitted.length == 4) {\n                        targetFieldName = fieldSplitted[2] + UCConstants.PERIOD + fieldSplitted[3];\n                        fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(fieldSplitted[1]);\n                        fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(fieldSplitted[1]);\n                    } else {\n                        if (fieldsFlattened) {\n                            targetFieldName = criteria.getFieldName();\n                            fieldNameMetaMap = objectToFieldDBNameToFieldDefinitionMap.get(objectName);\n                            fieldNameGSDataTypeMap = objectToFieldDBNameToGSDataTypeMap.get(objectName);\n                        } else {\n                            if (fieldSplitted.length == 2) {\n                                targetFieldName = fieldSplitted[1];\n                                String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(obj","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93fe22f6-c745-4e02-8d38-8740a25e7077","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/MSTeamsCaasMetaDataServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.msteams.bean.GainsightMSTeamsEntityDescription;\nimport com.gainsight.integration.connector.msteams.bean.GainsightMSTeamsFieldDescription;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0228d5a3-dcbb-4d45-b586-ab2c6d5ca121","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/Zuorav2CaasMetadataServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.connector.Zuorav2ChannelServiceImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasObjectConfig;\nimport com.gainsight.duct.beans.config.CaasObjectTenantConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesTenantConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectConfigDAO;\nimport com.gainsight.duct.dao.config.CaasObjectTenantConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.metadata.engine.service.MetadataDriver;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gains","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"98621c93-352b-422b-9b67-a2ea0f3cc012","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":638,"endLine":670,"content":"uestDTO.getNextPageToken())\n                .properties(ductRequestDTO.getProperties())\n                .query(ductRequestDTO.getQuery())\n                .build();\n        if (ductRequestDTO.isResolvePickListOptions()) {\n            ductJobMapping.getProperties().put(DuctConstants.RESOLVE_PICKLIST_OPTIONS, ductRequestDTO.isResolvePickListOptions());\n        }\n\n        /*\n        This property signifies, if the lookup fields/projections are in flattened structure or not.\n        This is in effect only for Dynamics connector,\n\n        Requests from Connectors will include this value as false.\n        */\n        if (ConnectorType.DYNAMICS.equals(ductRequestDTO.getConnectorType())) {\n            ductJobMapping.getProperties().put(UCConstants.LOOKUP_FIELDS_FLATTENED, ductRequestDTO.isLookupFieldsFlattened());\n        }\n\n        InstrumentationUtil.pushJobToInstrumentation(ductJobMapping, DuctConstants.CAAS_WEB);\n        InstrumentationUtil.processJob(ductJobMapping, DuctConstants.CAAS_WEB);\n        return ductJobMapping;\n    }\n\n    private SyncDirection getDirection(DuctRequestDTO ductRequestDTO) {\n        if (MapUtils.isNotEmpty(ductRequestDTO.getData()) || StringUtils.isNotEmpty(ductRequestDTO.getTargetSystemDataURL())) {\n            return SyncDirection.MDA_TO_EXTERNAL_SYSTEM;\n        } else {\n            return SyncDirection.EXTERNAL_SYSTEM_TO_MDA;\n        }\n    }\n\n    private void queueMessage(DuctJobMapping ductJobMapping) {\n        MessageRequestDTO<DuctJobMapping> messageR","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a15406ed-b000-44fa-81c3-c690f82273fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":337,"endLine":372,"content":"eTimeStr =criteria.getValues() instanceof List ? ((List) criteria.getValues()).get(0).toString() : criteria.getValues().toString();\n              String format = dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\") == null?\n                      DEFAULT_DATETIME_FORMAT : dateTimeFieldsMap.get(criteria.getFieldName()).getMeta().getProperties().get(\"format\").toString();\n              DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format);\n              LocalDateTime parsedDate = LocalDateTime.parse(dateTimeStr, formatter);\n              String formattedDate = parsedDate.toLocalDate().toString();\n              criteria.setValues(Lists.newArrayList(formattedDate));\n          }\n      }catch (Exception e){\n          log.error(\"Error while parsing date time field value\", e);\n      }\n    }\n\n\n\n\n    private Criteria getDefaultFallbackCriteria() {\n        Criteria criteria = new Criteria();\n        Criteria fieldCriteria = new Criteria();\n        // set a hardcoded filter condition since this is a required parameter\n        fieldCriteria.setFieldName(DEFAULT_EXTERNAL_FILTERABLE_FIELD);\n        fieldCriteria.setOperatorType(FilterOperator.GT);\n        fieldCriteria.setValues(Lists.newArrayList(\"0\"));\n\n        criteria.setFilters(Lists.newArrayList(fieldCriteria));\n        return criteria;\n    }\n\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a829536-7443-4af0-8cd0-45b336a5f513","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DuctValidationService.java","startLine":1,"endLine":15,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.Map;\n\npublic interface DuctValidationService {\n\n    boolean validateRequest(DuctRequestDTO ductRequestDTO) throws CaasException;\n    boolean validateRequest(DuctRequestDTO ductRequestDTO, PNPConnectionsInfo pnpConnectionsInfo, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ecf0a3d-5fae-4452-87f1-2579ad19c020","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":53,"endLine":90,"content":"private static final String SINGLE_RECORD_FETCH_SUPPORTED = \"isSingleRecordFetchSupported\";\n    private static final String MULTI_RECORD_FETCH_SUPPORTED = \"isMultiRecordFetchSupported\";\n\n    private static final String PARTICIPANTS_KEYWORD = \"participants\";\n    private static final String ORGANIZER_KEYWORD = \"organizer\";\n    private static final String ATTENDEES_KEYWORD = \"attendees\";\n    private static final String HOST_KEYWORD = \"isHost\";\n    private static final String RESPONSE_KEY = \"responseKey\";\n    private static final String FETCH_BY_ID = \"isFetchById\";\n    private static final String FETCH_BY_ID_API = \"fetchByIdApi\";\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return MSTEAMS_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.msteams.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.msteams.extract.version\", \"v1\");\n    }\n\n    @Override\n    prote","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f8928d6-c7bb-4e52-9333-039f9a1ca7d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.LookupDetails;\nimport com.gainsight.bean.gsmeta.LookupObjectDetails;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.sfdc.*;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.enums.FieldGroupType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.sfdc.bean.SFDCMetadataTypeEnum;\nimport com.gainsight.integration.connector.sfdc.service.SalesforceMetadataService;\nimport com.gainsight.integration.utils.HttpRes","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dac91b87-8203-4514-8e8e-93af68907bc9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":155,"endLine":185,"content":"    .stream()\n                    .map(name -> (SINGLE_QUOTE + escapeSpecialChar(name) + SINGLE_QUOTE))\n                    .collect(Collectors.joining(\",\")));\n        } else\n            stringBuilder.append(values.stream().map(SoqlQueryBuilder::escapeSpecialChar).collect(Collectors.joining(\",\")));\n    }\n\n    private static String escapeSpecialChar(Object value) {\n        Matcher matcher = SFDC_SPECIAL_CHARACTER_PATTERN.matcher(value.toString());\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            String theGroup = matcher.group(1);\n            matcher.appendReplacement(sb, \"\\\\\" + theGroup);\n        }\n        matcher.appendTail(sb);\n\n        return sb.toString().replaceAll(BACKSLASH, BACKSLASH + BACKSLASH).replaceAll(SINGLE_QUOTE, BACKSLASH + SINGLE_QUOTE);\n\n    }\n\n    private static String escapeSpecialCharLIKE(Object value) {\n        Matcher matcher = SFDC_SPECIAL_CHARACTER_PATTERN_LIKE_OPERATOR.matcher(value.toString());\n        StringBuffer sb = new StringBuffer();\n        while (matcher.find()) {\n            String theGroup = matcher.group(1);\n            matcher.appendReplacement(sb, \"\\\\\" + theGroup);\n        }\n        matcher.appendTail(sb);\n        return sb.toString().replaceAll(BACKSLASH, BACKSLASH + BACKSLASH).replaceAll(SINGLE_QUOTE, BACKSLASH + SINGLE_QUOTE).replaceAll(PERCENT_SYMBOL, BACKSLASH + PERCENT_SYMBOL).replaceAll(UNDERSCORE, BACKSLASH + UNDERSCORE);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83cdfec4-cb69-4fcf-a842-6f7619edc377","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadService.java","startLine":1,"endLine":11,"content":"package com.gainsight.duct.service;\n\nimport com.gainsight.duct.beans.dh.IpaasBulkDownloadCallbackPayload;\nimport com.gainsight.duct.beans.error.CaasException;\n\npublic interface IpaasBulkFileDownloadService {\n    boolean processCallBackFromIpaas(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload);\n\n    void processCallBackFromDH(IpaasBulkDownloadCallbackPayload ipaasBulkDownloadCallbackPayload) throws CaasException;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da174209-8ac5-4172-bb95-9e6f3ba8bf3d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ZoomValidationDataSourceService.java","startLine":83,"endLine":91,"content":"contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if(!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78da8b89-a67d-4401-a45c-ac444ef346f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":289,"endLine":306,"content":"ect> properties = pnpConnectionsInfo.getProperties();\n        if (StringUtils.isBlank((String) properties.get(UCConstants.GSIntegration.COMPANY_IDENTIFIER)) || StringUtils.isBlank((String) properties.get(UCConstants.GSIntegration.COMPANY_PERSON_IDENTIFIER))) {\n            String externalAccountIdFieldName = \"HubspotAccountId_\" + pnpConnectionsInfo.getCrmId();\n            CollectionMasterV2 companyObject = collectionMasterService.findOneV2(new CollectionMasterQuery().standardObjectType(StandardObjectType.COMPANY), false, true, MetadataVersion.getLatestVersion());\n            Map<ColumnAdditionalKey, Object> prop = new HashMap<>();\n            prop.put(ColumnAdditionalKey.CRM_ID, pnpConnectionsInfo.getCrmId());\n            if (Objects.isNull(companyObject.getColumn(externalAccountIdFieldName))) {\n                Column column = new Column();\n                column.setFieldName(externalAccountIdFieldName);\n                column.setDisplayName(\"Hubspot Account ID_\" + portalId);\n                column.setDataType(DataType.STRING);\n                column.setFieldGroupType(FieldGroupType.STANDARD);\n                column.setFieldSchemaEditability(FieldSchemaEditabilityType.FIXED);\n                column.setFieldDataEditability(FieldDataEditabilityType.ALL);\n                column.setDescription(\"Stores Account ID from Hubspot Company\");\n                column.setProperties(prop);\n                companyObject.getAllColumns().add(column);\n                collectionMasterService.upda","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b7a3a3f-9e5a-4aac-a0b8-dcc12a314862","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1811,"endLine":1835,"content":"isResult()) {\n                    log.info(\"Deletion successful on data podium for connection: {}\", connectionId);\n                    log.debug(\"Response: {}\", responseObj.getData());\n                    result = true;\n                } else {\n                    log.error(\"Deletion Failed on data podium for connection: {}. {}. {}\", connectionId, responseObj.getErrorDesc(), responseObj.getData());\n                }\n            }\n        } catch (Exception ex) {\n            log.error(\"Error occurred while invoking data podium deletion with URL {}\", url, ex);\n        }\n        return result;\n    }\n\n    private PNPConnectionsInfo revokeConnectionAndUpdateStatusInJob(PNPConnectionsInfo pnpConnectionsInfo, boolean isSystem) {\n        if (pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED_AND_LINKED) || pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED)) {\n            pnpConnectionsInfo.setTokenDetail(null);\n            if (pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED)) {\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.REVOKED);\n            } else if (pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED_AND_LINKED)) {\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.REVOKED_AND_LINKED);\n            }\n            pnpConnectionsInfo = pnpConnectionInfoDao.update(pnpConnectionsInfo);\n        }\n        revokeUserAuthQuietly(pnpConnecti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"547d4478-2414-4b69-9ba8-4d553f753bfc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.Metad","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4a4ecaf1-1d4b-431b-bc7d-eaa83a8f1dfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCommonUtils.java","startLine":28,"endLine":61,"content":" org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.map.DeserializationConfig;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.map.SerializationConfig;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\nimport org.springframework.web.multipart.MultipartFile;\nimport utils.Constants;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.management.ManagementFactory;\nimport java.lang.management.RuntimeMXBean;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\n\n@Slf4j\npublic class DuctCommonUtils {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(DuctCommonUtils.class);\n\n  public static final char[] CHARSET = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n  private static final String DYNO = \"DYNO\";\n  private static final String INSTANCE_NAME_PROPERTY = \"instance.name\";\n  private static final DeploymentProperties DEPLOYMENT_PROPERTIES = DeploymentProperties.getDeploymentProperties();\n  private static final int MAX_SLEEP_TIME = 500;\n  private static final int SLEEP_TIME = 200;\n  private static final String THREAD_INTERRUPT_WARNING =\n      \"Just a warning, waking up and trying collection master creation\";\n  private static final String batchIdPattern = \"(?<=/[A-Z]{5,6}[_])","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b2fa7cd9-d542-4143-a577-ee8f780696aa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":249,"endLine":277,"content":"ErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Objects for a connection\", response = List.class)\n    @GetMapping(value = \"/{connectionId}/objects\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjects(@ApiParam(value = \"Connection Id to retrieve objects\", required = true) @PathVariable(\"connectionId\") String connectionId) {\n        try {\n            return new ResponseObj(true, ductService.getObject(connectionId));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @GetMapping(value = \"fetch/errors\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getErrors() {\n        return new ResponseObj(true, gsExternalSystemErrorMappingDao.findAll());\n    }\n\n    @ApiOperation(value = \"Fetch attributes of an object for a connection\", response = Map.class)\n    @GetMapping(value = \"/{connectionId}/{objectname}/attributes\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjectAttributes(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e0f2de4-3b4c-41eb-b351-ef923a63387d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/SuccessPlanLoadServiceImpl.java","startLine":39,"endLine":62,"content":"ride\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating payload for success plans\");\n            ExternalDataRequestDto requestDto = new ExternalDataRequestDto();\n            requestDto.setLookups(ductRequestDTO.getLookups());\n            requestDto.setRequests(Collections.singletonList(Collections.singletonMap(\"record\", ductRequestDTO.getRecords().get(0))));\n            GSDTOTransformer.transformExternalDataRequestDto(requestDto);\n            log.info(\"Payload for job {} is {}\", ductJobMapping.getJobId(), requestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n            //headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String spEndPoint = DeploymentProperties.getDeploymentProperties().getValue(\"success.plan.api.base.url\");\n            spEndPoint = spEndPoint + \"/v2/successPlan\";\n\n            HttpResponseWrapper<ResponseObj> response = null;\n            if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.INSERT) {\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83af2b0a-54f2-4017-bfd8-d5656b36f01b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":412,"endLine":453,"content":"finition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_NATIVE_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.native.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @SneakyThrows\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = null;\n        try {\n            attributesMap","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d9ad7e6-5d37-47df-b6ce-9952a9df61e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/PNPConnectionInfoDaoImpl.java","startLine":217,"endLine":238,"content":"findAllConnectionForConnectionType(ConnectorType connectorType) {\n    PNPConnectionsInfoQuery query = new PNPConnectionsInfoQuery().connectionType(connectorType);\n    query.addCriteria(Criteria.where(\"deleted\").is(false));\n    return getMongoTemplate().find(query,PNPConnectionsInfo.class);\n  }\n\n  @Override\n  public PNPConnectionsInfo findByQueueName(String queueName){\n    Query query = Query.query(Criteria.where(\"deleted\").is(false)).addCriteria(Criteria.where(\"properties.QUEUE_NAME\").is(queueName));\n    return getMongoTemplate().findOne(query,PNPConnectionsInfo.class);\n  }\n\n  @Override\n  public PNPConnectionsInfo populateIpaasStagingPostgresDetails() {\n    PNPConnectionsInfo pnpConnectionsInfo = new PNPConnectionsInfo();\n\n    RelationalDBConnectionDetail relationalDBConnectionDetail = new RelationalDBConnectionDetail();\n    relationalDBConnectionDetail.setType(\"POSTGRES\");\n    relationalDBConnectionDetail.setDataBaseName(CryptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.db\")).getValue());\n    relationalDBConnectionDetail.setHost(CryptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.host\")).getValue());\n    relationalDBConnectionDetail.setPort(CryptUtil.getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(\"uc.ipaas.staging.postgres.port\")).getValue());\n    relationalDBConnectionDetail.setUser(CryptUtil.getSimpleC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9fcfdc5a-8666-4d8b-939a-045430143a63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":93,"endLine":114,"content":"      return false;\n    }\n\n    @Override\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        HashMap<String, String> additionalDetails = new HashMap<>();\n        additionalDetails.put(DuctConstants.SFDC_API_VERSION, getSfdcApiVersion(pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId())));\n        return additionalDetails;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        Map externalSystemResponse;\n        int queryOutputSize = 0;\n        try {\n            int limit = Math.min(ductJobMapping.getLimit(), maxPageSize);\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SFDC);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> metaInfoDefinitionMap = getAttributesWithLookupFieldsIfPresent(service,ductJobMapping,pnpConnectionsInfo);\n            Map<String, Object> fieldNameToDataTypeMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            Ma","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c20414a3-eaae-4d6c-8452-ff6977ff628a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":121,"endLine":148,"content":")));\n    if (StringUtils.isBlank(gainsightDataType)) {\n      log.info(\"[Freshdesk] External DataType {} is not supported, hence skipping it\", DuctUtils.valueOf(fieldInfo.get(TYPE)));\n      return null;\n    }\n    fieldDefinition.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, gainsightDataType);\n    populateMetaForFieldInfo(fieldDefinition, fieldInfo, meta, connectorConfig);\n    processNestedFields(fieldInfo, DuctUtils.valueOf(fieldInfo.get(TYPE)), connectorConfig, objectDefinition, additionalFields);\n    return fieldDefinition;\n  }\n\n  /**\n   * @param fieldInfo        {@link Map}\n   * @param externalDatatype {@link String}\n   * @param connectorConfig  {@link CaasConnectorConfig}\n   * @param objectDefinition {@link Map}\n   * @param additionalFields {@link List}\n   *                         <p>\n   *                         nested_field datatype fields have fields listed inside them, flatten and add to describe fields\n   */\n  private void processNestedFields(Map<String, Object> fieldInfo, String externalDatatype,\n                                   CaasConnectorConfig connectorConfig, Map<String, Object> objectDefinition, List<Map<String, Object>> additionalFields) {\n    try {\n      if (\"nested_field\".equalsIgnoreCase(externalDatatype) && fieldInfo.containsKey(\"nested_ticket_fields\")) {\n        List<Map<String, Object>> nestedFields = (List<Map<String, Object>>) fieldInfo.get(\"nested_ticket_fields\");\n        if (CollectionUtils.isEmpty(nestedFields)) {\n          return;\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dacb65f4-2199-448a-b899-3f069bc2ff54","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":520,"endLine":544,"content":"c static Object getMSDynamicsAccessTokenFromCache(RedisCacheUtility redisCacheUtility, String connectionId) {\n        Object value = redisCacheUtility.getValue(DuctUtils.getMSDynamicsAccessCacheKey(connectionId));\n        Map cacheValue;\n        if (value != null) {\n            cacheValue = (Map) value;\n            if (cacheValue.containsKey(UCConstants.GSIntegration.ACCESS_TOKEN))\n                return cacheValue.get(UCConstants.GSIntegration.ACCESS_TOKEN);\n        }\n        return null;\n    }\n\n    public static GSFieldDefinition cloneGSFieldDefinition(GSFieldDefinition fieldDefinition) {\n        GSFieldDefinition gsFieldDefinition = new GSFieldDefinition(fieldDefinition.getFieldName(), fieldDefinition.getLabel(),\n                fieldDefinition.getDataType(), fieldDefinition.getObjectName(), fieldDefinition.getObjectLabel());\n        gsFieldDefinition.setDbName(fieldDefinition.getDbName());\n        gsFieldDefinition.setObjectDBName(fieldDefinition.getObjectDBName());\n        gsFieldDefinition.setOptions(fieldDefinition.getOptions());\n        gsFieldDefinition.setMeta(fieldDefinition.getMeta());\n        gsFieldDefinition.setConnectionId(fieldDefinition.getConnectionId());\n        gsFieldDefinition.setConnectionType(fieldDefinition.getConnectionType());\n        return gsFieldDefinition;\n    }\n\n    public static IntercomV2Region getRegion(PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> IPAAS_PROPERTIES = (Map<String, Object>) GainsightCollectionUtils.null","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3625f8c-8fe0-4ce7-a8df-3101e1ce6aaa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":452,"endLine":470,"content":"Provider.getTenantId()).status(MetadataJobStatus.INIT)\n              .encryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(\n                  JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded()).build();\n      MetadataGenerationDetails metadataGenerationDetailsDB = metadataGenerationDetailsDao.insert(metadataGenerationDetails);\n      queueMessage(metadataGenerationDetailsDB);\n      return MetadataGenerationResponse.builder().connectionId(metadataGenerationDetails.getConnectionId())\n          .connectorType(metadataGenerationDetails.getConnectorType()).objectName(metadataGenerationDetails.getObjectName()).status(metadataGenerationDetails.getStatus())\n          .jobId(metadataGenerationDetails.getJobId()).tenantId(metadataGenerationDetails.getTenantId()).build();\n    } catch (Exception e) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Exception occurred while trying to initiate metadata refresh : \" + e.getMessage()));\n    }\n  }\n\n  @Override\n  public MetadataGenerationResponse initiateMetadataRefresh(String connectionId, String objectName, String recordId) throws CaasException {\n    try {\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n      MetadataGenerationDetails metadataGenerationDetails =\n          MetadataGenerationDetails.builder().jobId(UUID.randomUUID().toString()).co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e6a0efa-0552-4301-a684-3e47df2861ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":432,"endLine":452,"content":"urrent = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private FilterRule createFilterRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap,CaasConnectorConfig caasConnectionConfig, String objectName) {\n        FilterRule filterRule = new FilterRule();\n        FieldInfo internalFieldInfo = new FieldInfo();\n        internalFieldInfo.setFieldType(FieldType.FIELD);\n        internalFieldInfo.setName(getNameForDHFilterRule(criteria.getFieldName(), objectName));\n\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || dataTypeMapping.getExternalDatatype().equals(\"DATE\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        String dateTimeFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"datetime\") || dataTypeMapping.getExternalDatatype().equals(\"DATETIME\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n\n        DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43f70c2f-6133-4445-b9f1-128dc4405490","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":478,"endLine":502,"content":"ile) throws CaasException {\n    List<String> headers;\n    try (CsvListReader csvReader = new CsvListReader(new FileReader(file), CsvPreference.STANDARD_PREFERENCE);) {\n      headers = csvReader.read();\n      return headers;\n    } catch (Exception e) {\n      log.error(\"Error in getHeaders\", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, ductJobMapping.getJobId()));\n    }\n  }\n\n  private File getFileFromS3(DuctJobMapping ductJobMapping) {\n    try {\n      log.info(\"downloaded file from location: {}\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n      File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n      log.info(\"downloaded file from location: {} succeeded\", ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n      return file;\n    } catch (Exception e) {\n      log.error(\"Error in downloading the file\");\n      throw e;\n    }\n  }\n\n  private void populateFileLocations(DuctStatus statusOfTheLoad, DuctResponse ductResponse, DuctJobMapping ductJobMapping, List<File> successfulFiles, List<File> failedFiles, AtomicReference<Long> failedRecords, Long totalRecords) {\n    File mergedFile = null;","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4bf86494-36f5-4cf8-b4d9-684b0f31317a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":86,"endLine":113,"content":"tedBy\", userId);\n    headers.put(\"mdaRequestId\", ucId);\n    headers.put(\"configSourceUrl\", configSourceUrl);\n    LOGGER.info(\"Submitting the job to perform tasks ucid:{} , jobId:{}. Submitted to: {} and configSourceUrl: {} \",\n            ucId, headers.get(\"jobName\"),submitJobURL, configSourceUrl);\n    ConnectorsDataHighwayResponseHandler<ResponseObj> postResponse = post(submitJobURL, headers, payload, ResponseObj.class);\n    LOGGER.info(\"Submitted the job to data-highway having ucid:{} , jobId:{} Payload : <{}>\",\n            ucId, headers.get(\"jobName\"), payload);\n    return postResponse;\n  }\n\n\n  @Override\n  public ConnectorsDataHighwayResponseHandler<ResponseObj> listOutputs(String jobId) {\n    String listOutputURL = String.format(\"%s%s?jobId=%s\", API_GATEWAY_URL_BASE, \"/output/list\", jobId).intern();\n//            listOutputURL = \"http://localhost:8080/api/v1.0/flow_manager/output/list?jobId=\"+jobId;\n    Map<String, String> headers = Maps.newHashMap();\n    headers.put(\"sharedSecret\", SHARED_SECRET);\n    LOGGER.debug(\"Submitting request for listOutputs to: {}, with headers: {}\", listOutputURL, headers);\n    return get(listOutputURL, headers, ResponseObj.class);\n  }\n\n  @Override\n  public ConnectorsDataHighwayResponseHandler<ResponseObj> getExecutionLogs(String jobId) {\n    try {\n      String executionLogsURL = String.format(\"%s%s?jobId=%s\", API_GATEWAY_URL_BASE, \"/execution/logs\", jobId).intern();\n      Map<String, String> headers = Maps.newHashMap();\n      headers.put(\"share","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"714f0339-db22-4ca0-bda3-76b25d3d4326","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":246,"endLine":262,"content":"(DuctJobMapping ductJobMapping) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n\n    Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n    //For Datasphere, we support writing to only one object at a time\n    GainsightPrecondition.assertTrue((Objects.nonNull(requestObjectLevelWritebackOperation) && requestObjectLevelWritebackOperation.size() == 1)\n            , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n    Map.Entry<String, Object> objectLevelOperation = requestObjectLevelWritebackOperation.entrySet().iterator().next();\n\n    CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n    Map<String, ObjectDefinition> objectAttributes = service.getObjectAttributes(objectLevelOperation.getKey(), pnpConnectionsInfo);\n\n    File inputDataFile = validateSapDatasphereWriteBackPayload(ductJobMapping, objectAttributes, objectLevelOperation);\n\n    if (ductJobMapping.isRules()) {\n      GainsightPrecondition.assertTrue((null != ductJobMapping.getCaasS3FileDetails() && StringUtils.isNotEmpty(ductJobMapping.getCaasS3FileDetails().getFilesDir()))\n              , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVA","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"600a94b2-35fb-4bf0-b204-44e3826b226c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelServiceImpl.java","startLine":29,"endLine":75,"content":"nsicApiKey;\n\n    public UCAptrinsicChannelServiceImpl(String aptrinsicApiKey) {\n        this.aptrinsicApiKey = aptrinsicApiKey;\n    }\n\n    @Override\n    public boolean authenticateAPIKeys(String baseEndPointUrl) {\n        try {\n            HttpURLConnection httpURLConnection = getHttpURLConnection(baseEndPointUrl+ACCOUNTS, OPTIONS);\n            httpURLConnection.getInputStream();\n            return !(httpURLConnection.getResponseCode() == 401) ;\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(),e);\n        }\n        return false;\n    }\n\n    @Override\n    public boolean authenticateAPIKeys() {\n        return authenticateAPIKeys(UCEnvSpecificConfigDetailUtil.getUCConnectPxApiUrl());\n    }\n\n    @Override\n    public InputStream getObjectDescription(PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws IOException {\n        InputStream response = null;\n        try {\n            response = getResponse(objectName, pnpConnectionsInfo);\n        }\n        catch(SystemException se)\n        {\n            throw se;\n        }\n        catch (Exception e) {\n            LOGGER.error(String.format(\"Error while getting Gainsight PX Object %s description\", objectName));\n            throw e;\n        }\n        return response;\n    }\n\n    @Override\n    public InputStream pullData(String objectType, String filterQuery) throws IOException{\n        return pullData(objectType, filterQuery, UCEnvSpecificConfigDetailUtil.getUCConnectPxApiUrl());\n    }\n\n    @Override\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b713bbcb-9a05-4cf4-8ebb-eaf64b94e81c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/event/DuctEventServiceImpl.java","startLine":47,"endLine":70,"content":"setEventPayload();\n                systemAssetEventPayload.setAssetType(\"CONNECTION\");\n                systemAssetEventPayload.setAssetId(pnpConnectionsInfo.getConnectionId());\n                systemAssetEventPayload.setTenantId(pnpConnectionsInfo.getTenantId());\n                systemAssetEventPayload.setRequestId(RequestContextProvider.getRequestId());\n                systemAssetEventPayload.setOperation(operation);\n\n                ResponseObj responseObj  = httpClientService.post(EVENTS_BASE_URL + PUBLISH_EVENT , headers, systemAssetEventPayload, MediaType.APPLICATION_JSON_TYPE, ResponseObj.class);\n                if (responseObj.isResult()) {\n                    LOGGER.info(\"ConnectionID {} : Published connection completion event:{} successfully and got response : {}\", pnpConnectionsInfo.getConnectionId() , systemAssetEventPayload, responseObj);\n                } else {\n                    LOGGER.info(\"ConnectionID  {}  : Failed to publish connection completion event:{} and got response : {}\", pnpConnectionsInfo.getConnectionId() , systemAssetEventPayload, responseObj);\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Error publishing connectionId {} system event with exception :: {}\" , pnpConnectionsInfo.getConnectionId() , e.getMessage(), e);\n            }\n        }\n\n}\n e);\n            }\n        }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"451ff145-376c-4b4c-8164-c80526259928","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":359,"endLine":378,"content":"pe());\n        CaasConnectorConfig caasConnectionConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n\n        String dateFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"date\") || dataTypeMapping.getExternalDatatype().equals(\"DATE\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n        String dateTimeFormate = caasConnectionConfig.getDataTypeMappings().stream().filter(dataTypeMapping -> (\n                dataTypeMapping.getExternalDatatype().equals(\"datetime\") || dataTypeMapping.getExternalDatatype().equals(\"DATETIME\"))\n                && dataTypeMapping.getFormat() != null).map(dataTypeMapping -> dataTypeMapping.getFormat()).findFirst().orElse(null);\n\n        FreeFormQueryInfo freeFormQueryInfo = new FreeFormQueryInfo();\n        List<FieldInfo> showFields = Lists.newArrayList();\n\n        Set<String> fieldsForFreeform = new HashSet<>();\n        fieldsForFreeform.addAll(ductJobMapping.getFields());\n        DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), fieldsForFreeform);\n        fieldsForFreeform.forEach(mapping -> {\n            FieldInfo fieldInfo = new FieldInfo();\n            fieldInfo.setName(getNameForDHFilterRule(mapping, ductJobMapping.getResourceName()));\n            fieldInfo.setFieldAlias(getNameForDHFilterRule(mapping, ductJo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63d97744-acc7-48e1-aed1-576e61be4b71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":525,"endLine":547,"content":"ctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE) ?\n                Integer.parseInt(caasConnectorConfig.getAdditionalProperties().get(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE).toString())\n                : 100;\n        ConnectorDataSourceService connectorDataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        DuctResponse ductResponse = null;\n        QueryAPIResponseBean queryAPIResponseBean;\n        if (isConfigDriven) {\n            ductResponse = engineCommonDataSourceService.fetchSynchronziedData(ductJobMapping,pageSize);\n            queryAPIResponseBean = engineCommonDataSourceService.createQueryApiResponse(ductResponse);\n        } else {\n            ductResponse = connectorDataSourceService.fetchSynchronziedData(ductJobMapping,pageSize);\n            queryAPIResponseBean = connectorDataSourceService.createQueryApiResponse(ductResponse);\n        }\n\n        //Transform response of each record by flattening nested json.\n        if (caasConnectorConfig.isFlattenExternalResponse()) {\n            for (Map<String, Object> dataRow : queryAPIResponseBean.getRecords()) {\n                Gson gson = new GsonBuilder().create();\n                JsonParser jsonParser = new JsonParser();\n                JsonObject jsonObject = (JsonObject) jsonParser.parse(gson.toJson(dataRow));\n                dataRow.clear();\n                try {\n                    data","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f981bc16-021f-4c49-b72c-a3226a9eb701","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":94,"endLine":114,"content":"objectDefinition = mockAttributesHubspotContact();\n            Map<String, String> objectLevelOperation = new HashMap<>();\n            objectLevelOperation.put(\"CONTACT\", \"UPSERT\");\n            when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(createConnectionInfo());\n            when(caasMetadataFactory.getService(ConnectorType.HUBSPOT,false)).thenReturn(hubspotCaasMetadataService);\n            when(hubspotCaasMetadataService.getObjectAttributes(any(String.class), any(PNPConnectionsInfo.class))).thenReturn(objectDefinition);\n            when(caasConnectorConfigService.getConnectorConfig(any(ConnectorType.class))).thenAnswer((Answer<CaasConnectorConfig>) invocation -> createConnectorConfig(invocation.getArgument(0)));\n\n            hubspotBulkWriteBackValidationService.validateHubspotWriteBackPayload(createDuctJobMapping(true, objectLevelOperation, new ArrayList<>(Arrays.asList(\"CONTACT\")), false));\n        } catch (CaasException ex) {\n            passed = false;\n            caex = ex;\n        } catch (Exception c) {\n            passed = true;\n        } finally {\n            assertFalse(\"Caas Exception did not occur which is not expected\", passed);\n            if (objectDefinition != null) {\n                ObjectDefinition resourceDefinition = objectDefinition.get(\"CONTACT\");\n                StringBuilder errorMessageBuilder = new StringBuilder().append(MANDATORY_REQUIRED_KEYS_NOT_PRESENT).append(\" : \")\n                        .append(\"CONTACT\" + \":\")\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"050f4df5-2f88-46d5-be6e-4bf68aa606f5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":25,"endLine":61,"content":"nsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport com.github.wnameless.json.flattener.JsonFlattener;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static com.gainsight.integration.bean.IPaasConstants.IPAAS_INSTANCE_ID;\nimport static com.gainsight.integration.bean.IPaasConstants.IPAAS_INSTANCE_TOKEN;\n\n@Order(12000)\n@Service\npublic class ServicenowConnectionService implements CaasConnectionService {\n\n    private static final Logger log = LoggerFactory.getLogger(ServicenowConnectionService.class);\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    private AuthService aut","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"731a7fed-eadc-4c59-8d6e-786a0b5f2262","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":346,"endLine":360,"content":"et(\"stages\");\n                for (Map<String, Object> hubspotOptions : hubspotOptionsMap) {\n                    Map<String, Object> picklistOption = new HashMap<>();\n                    picklistOption.put(LABEL, hubspotOptions.get(LABEL).toString());\n                    picklistOption.put(DISPLAY_ORDER, Integer.valueOf(String.valueOf(hubspotOptions.get(DISPLAY_ORDER))));\n                    picklistOption.put(VALUE, hubspotOptions.get(ID).toString());\n                    //TODO:: Need to be checked based on which property we can set active\n                    picklistOption.put(ACTIVE, true);\n                    picklistOptions.add(picklistOption);\n                }\n            }\n        }\n        gsFieldDefinition.put(OPTIONS, picklistOptions);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6cf66643-27a2-41de-97b1-d9fcd967a818","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/CaasFileInfo.java","startLine":1,"endLine":23,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class CaasFileInfo {\n    private String fileName;\n    private Character quoteChar;\n    private Character escapeChar;\n    private Character delimiter;\n    private String fileEncoding;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2e402df-3750-4195-bbfa-a1d29929efa8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":163,"endLine":197,"content":"NERATED_BY, UCConstants.REQUEST_SOURCE))\n                .append(UCConstants.AMP);\n        query.append(UCConstants.WITHDATA).append(UCConstants.EQUALS).append(true).append(UCConstants.AMP);\n        for (Map.Entry<String, Object> entry : queryMap.entrySet()) {\n            Object value = entry.getValue();\n            query.append(entry.getKey()).append(UCConstants.EQUALS).append(value).append(UCConstants.AMP);\n        }\n        query.deleteCharAt(query.length() - 1);\n        return query.toString();\n    }\n\n    private String getCommaSeparatedQueryParams(String... systemTags) {\n        StringBuilder builder = new StringBuilder();\n        for (String systemTag : systemTags) {\n            builder.append(systemTag).append(UCConstants.COMMA);\n        }\n        if (builder.length() > 0) {\n            builder.deleteCharAt(builder.length() - 1);\n        }\n        return builder.toString();\n    }\n\n    private boolean extractPOSTResponse(Response response) {\n        JsonNode jsonNode = getJsonNodeFromResponse(response);\n        if (null == jsonNode) {\n            return false;\n        }\n        int responseCode = response.getStatusInfo().getStatusCode();\n        boolean result = getResponseStatus(response);\n        if (result) {\n            result = true;\n            LOGGER.info(String.format(\"Received successful response code from Audit Service with response code %d\", responseCode));\n        } else {\n            result = false;\n            LOGGER.error(String.format(\"Received failure r","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f1a6a8a-657c-41ef-8fff-fe3a22859c26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataGenerationDetailsDaoImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic class MetadataGenerationDetailsDaoImpl extends AbstractEntityDaoImpl<MetadataGenerationDetails> implements MetadataGenerationDetailsDao {\n\n    @Autowired\n    public MetadataGenerationDetailsDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, MetadataGenerationDetails.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(MetadataGenerationDetails details, String s) {\n        details.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(MetadataGenerationDetails metadataGenerationDetails, String s) {\n        metadataGenerationDetails.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public MetadataGenerationDetails getDetailsById(Stri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5b7dacb-7c2a-40c4-9f07-7a8322dca84b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CTALoadServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.dto.ExternalDataRequestDto;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class CTALoadServiceImpl implements GainsightLoadService{\n    @Override\n    public GSModule getType() {\n        return GSModule.COCKPIT;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return  \"cta\".equalsIgnoreCase(resource);\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab16084e-71d8-446d-8dec-ba9d7fb7a5c6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":158,"endLine":182,"content":"kAttributesHubspotContact();\n                when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(createConnectionInfo());\n                when(caasMetadataFactory.getService(ConnectorType.HUBSPOT,false)).thenReturn(hubspotCaasMetadataService);\n                when(hubspotCaasMetadataService.getObjectAttributes(any(String.class), any(PNPConnectionsInfo.class))).thenReturn(objectDefinition);\n                when(caasConnectorConfigService.getConnectorConfig(any(ConnectorType.class))).thenAnswer((Answer<CaasConnectorConfig>) invocation -> createConnectorConfig(invocation.getArgument(0)));\n                addS3DetailsBasedOnStage(i, ductJobMapping);\n                hubspotBulkWriteBackValidationService.validateHubspotWriteBackPayload(ductJobMapping);\n            } catch (CaasException ex) {\n                passed = false;\n                caex = ex;\n            } catch (Exception c) {\n                passed = true;\n            } finally {\n                assertFalse(new StringBuilder().append(\"Caas Exception did not occur which is not expected at stage : \").append(i).toString(), passed);\n                assertEquals(DuctErrorConstants.INVALID_S3_FILE_DETAILS, caex.getGsExternalSystemErrorMapping().getMessage());\n            }\n        }\n    }\n\n    private void addS3DetailsBasedOnStage(int i, DuctJobMapping ductJobMapping) {\n        switch (i) {\n            case 1:\n                ductJobMapping.setCaasS3FileDetails(new CaasS3FileDetails());\n                break;\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5cb256e9-80c6-4efb-99fa-4d50d2e690f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":201,"endLine":219,"content":"getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.JIRA);\n        Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n        Criteria modifiedCriteria = modifyCriteria(clonedCriteria, ductJobMapping, fieldNameMetaMap, caasConnectorConfig);\n        if(modifiedCriteria == null)\n            return null;\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(modifiedCriteria, fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    /**\n     * Will take the input criteria and generate new criteria out of it which will be used for external system search\n     * At max, we will have 2 filter conditions for external system search on the fields which are externally filterable\n     * In general \"updated_at\" field is the only field which is externally filterable\n     * If we have more than 2 filter conditions, we will take the min value filter condition where operator is {@link FilterOperator#GT}\n     * If we don't have above criteria, we will fall back to default criteria accepted by the external system\n     *\n     * @param criteria            {@link Criteria}\n     * @param ductJobMapping      {@link DuctJobMapping}\n     * @param fieldNameMetaMap    {@link Map<String, GSF","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dfd68c33-007d-42d3-9150-75e2fa3d7be8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":78,"endLine":94,"content":" (field.get(DATA_TYPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(DATA_TYPE).asText()))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(DATA_TYPE).asText())).findFirst().get();\n                    fieldDefinition.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(ORIGINAL_DATA_TYPE, field.get(DATA_TYPE).asText());\n                    if (complexTypeMappings.containsKey(field.get(DATA_TYPE).asText()))\n                        metaProperties.put(COMPLEX_TYPE, complexTypeMappings.get(field.get(DATA_TYPE).asText()).getValue());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                } else {\n                    LOGGER.warn(\"Type not supported, hence skipping {}\", field.get(DATA_TYPE).asText());\n                    continue;\n                }\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9fe1abb-d1c2-458f-be7b-9c5dbd802735","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":104,"endLine":133,"content":"pnpConnectionsInfo.getAuthorizationType().name())).findFirst();\n    if (!authInfoOptional.isPresent())\n      throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n    AuthDetails authDetails = authInfoOptional.get();\n    AuthorizationUrl authorizationUrl = authDetails.getAuthorizationUrl();\n\n    OAuthDetail oAuthDetail;\n    IntercomV2Region region = DuctUtils.getRegion(pnpConnectionsInfo);\n    switch (region) {\n      case US:\n        oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2);\n        break;\n      case EU:\n        oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2_EU);\n        break;\n      case AU:\n        oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2_AU);\n        break;\n      default:\n        log.error(\"Invalid region: {}\", region);\n        throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT.getUserText()));\n    }\n\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(\"nativeEnabled\", true);\n    properties.put(\"accountType\", oAuthDetail.getAccountType().name());\n    properties.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n    String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n    Map<String, Object","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dd068b1-65d6-4a85-9c22-8b954189b0d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":287,"endLine":315,"content":", GSFieldDefinition> externalFilterableFieldsMap = new HashMap<>();\n        nullSafeMap(fieldNameMetaMap)\n                .entrySet()\n                .stream()\n                .filter(kv -> BooleanUtils.isTrue(kv.getValue().getMeta().isExternallyFilterable()))\n                .forEach(kv -> externalFilterableFieldsMap.put(kv.getValue().getFieldName(), kv.getValue()));\n        return externalFilterableFieldsMap;\n    }\n\n    private Criteria getSingleCriteriaForQueryBody(List<Criteria> flattenedCriteria, Map<String, GSFieldDefinition> dateTimeFieldsMap, Map<String, GSFieldDefinition> externalFilterableFieldsMap) {\n        Criteria requiredSingleCriteria;\n        nullSafeList(flattenedCriteria)\n                .stream()\n                .forEach(criteria -> modifyCriteriaValueIfApplicable(criteria, dateTimeFieldsMap));\n\n\n        requiredSingleCriteria = nullSafeList(flattenedCriteria)\n                .stream()\n                .filter(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    return externalFilterableFieldsMap.containsKey(fieldName);\n                })\n                .map(flatCriteria -> {\n                    String fieldName = flatCriteria.getFieldName();\n                    // Assuming \"field.\" is a prefix to remove\n                    if (fieldName.startsWith(\"fields.\")) {\n                        fieldName = fieldName.substring(\"fields.\".length());\n                    }\n                    flatCriteria.setFieldName","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7fd344b3-5299-4044-b897-dc03fad4dc2c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":162,"endLine":193,"content":"eatureToggleUtil.getSalesforceVersion(DeploymentProperties.getDeploymentProperties().getValue(\"uc.sfdc.api.version\", StringUtils.EMPTY));\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        Map<String, Object> externalSystemResponse = ductResponse.getExternalSystemResponse();\n        List<Map<String, Object>> records = DuctUtils.OBJECT_MAPPER.convertValue(externalSystemResponse.get(RECORDS_KEYWORD), new TypeReference<List<Map<String, Object>>>() {\n        });\n        return new QueryAPIResponseBean(records, ductResponse.getNextPageToken());\n    }\n\n\n    @Override\n    protected Map getAttributesWithLookupFieldsIfPresent(CaasMetadataService service, DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        Map<String, ObjectDefinition> baseAttributes = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n        Map<String, String> relationshipNameToObjectNameMap = createRelationshipNameToObjectNameMap(ductJobMapping, service, baseAttributes);\n        Set<St","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"af9bf17c-b0a2-4410-b686-5cfbb586f024","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":186,"endLine":209,"content":"\", required = true)\n                                          @RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.getSynchronizedDataFromExternalSystem(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (StringUtils.isNotEmpty(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(e.getGsExternalSystemErrorMapping().getMessage());\n                responseObj.setErrorDesc(e.getGsExternalSystemErrorMapping().getMessage());\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Data in Sync, Response in Query API format\", response = QueryAPIResponseBean.class)\n    @PostMapping(value = \"/query/sync/{recordId}\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getSyncronizedDataForSingleRecord(@PathVariable(\"recordId\") final String recordId,\n                                                         @ApiParam(value =","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78edd28f-7d7d-4e43-a753-adbf114f2581","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EcosystemDatasourceService.java","startLine":95,"endLine":114,"content":"AccessToken());\n\n        CaasMetadataService caasMetadataService = caasMetadataFactory.getService(ductJobMapping.getConnectorType(), pnpConnectionsInfo.isIpaasConnection());\n        ObjectDefinition objectDefinition = caasMetadataService.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo).get(ductJobMapping.getResourceName());\n\n        String limit = String.valueOf(Math.min(ductJobMapping.getLimit(), maxPageSize));\n        Map<String, String> queryParams = EcosystemHelper.constructQueryParams(ductJobMapping.getCriteria(), ductJobMapping, objectDefinition, limit);\n        HttpResponse httpResponse = gainsightEcosystemFetchProcessor.getSynchronizedData(ductJobMapping.getResourceName(),\n                Lists.newArrayList(), apiKey, queryParams);\n        Map<String, Object> externalSystemResponse = extractResponse(httpResponse);\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS)\n                .jobId(ductJobMapping.getJobId())\n                .projections(ductJobMapping.getFields())\n                .externalResourceName(ductJobMapping.getResourceName()).build();\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n        return ConnectorDataSourceService.super.fetchSynchron","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15032836-0fc5-4417-8363-d7dd3998fbff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/utils/HubspotBulkWriteBackValidationServiceTest.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.utils;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.CaasS3FileDetails;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.HubspotCaasMetadataServiceImpl;\nimport com.gainsight.duct.validation.HubspotBulkWriteBackValidationService;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.stubbing.Answer;\nimport org.springframework.core.io.ClassPathResource;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.co","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5829057-12c1-484a-bc6b-eff9c766457b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":1,"endLine":33,"content":"package com.gainsight.service;\n\nimport com.gainsight.bean.health.HealthStatus;\nimport com.gainsight.bean.health.HealthStatusResponse;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.executor.GainsightExecutorService;\nimport com.gainsight.executor.GainsightExecutorServiceImpl;\nimport com.gainsight.duct.repo.DuctDatabaseTemplateService;\nimport com.gainsight.utils.CoreUtils;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.net.InetAddress;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\n@Service\npublic class HealthServiceImpl implements HealthService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HealthServiceImpl.class);\n    private static final String APP_NAME = getApplicationName();\n    private final DatabaseTemplateService databaseTemplateService;\n    private final GainsightExecutorService gainsightExecutorService;\n    private final DuctDatabaseTemplateService ductDatabaseTemplateService;\n\n    @Autowired\n    public HealthServiceImpl(DatabaseTemplateService databaseTemplateService, DuctDatabaseTemplateService ductDatabaseTemplateService) {\n        this.databaseTemplateService = databaseTemplateService;\n        this.gainsightExecutorService = new GainsightExecutorServiceImpl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce334f88-b425-4e9b-ad9e-6a760c7562c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":259,"endLine":283,"content":"tJobMapping}\n   * @param fieldNameMetaMap    {@link Map<String, GSFieldDefinition>}\n   * @param caasConnectorConfig {@link CaasConnectorConfig\n   * @return {@link Criteria\n   */\n  private Criteria modifyCriteria(Criteria criteria, DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap, CaasConnectorConfig caasConnectorConfig) {\n    try {\n      log.info(\"We are creating criteria for search request, Original criteria received: {}\", GainsightUtils.convertObjectToJson(criteria));\n      if (Objects.isNull(criteria) || Objects.isNull(criteria.getFilters()) || (Objects.isNull(criteria.getFieldName()) && CollectionUtils.isEmpty(criteria.getFilters()))) {\n        return criteria;\n      }\n\n      Map<String, GSFieldDefinition> dateTimeFieldsMap = getDateTimeFieldsMap(fieldNameMetaMap);\n      Map<String, GSFieldDefinition> externalFilterableFieldsMap = getExternalFilterableFieldsMap(fieldNameMetaMap);\n      String dateTimeFormat = getDateTimeFormat(caasConnectorConfig);\n      Criteria modifiedCriteria = null;\n\n      Criteria clonedCriteria = DuctUtils.deepCopy(criteria, Criteria.class);\n\n      // flatten the criteria to get all the nested filters\n      List<Criteria> flattenedCriteria = flattenCriteria(clonedCriteria);\n\n      modifiedCriteria = getSingleCriteriaForRequest(flattenedCriteria, dateTimeFieldsMap, externalFilterableFieldsMap, dateTimeFormat);\n\n      log.info(\"Criteria being used for getting data: {}\", GainsightUtils.convertObjectToJson(modifiedCriteria","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4af1e6db-0f37-475d-be41-1cc2eef70688","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":131,"endLine":149,"content":"ion(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            ResourceConfig resourceConfig = first.get();\n            ApiConfigAttributes apiConfigAttributes = resourceConfig.getDataConfig().get(DataEnum.DATA_FETCH_SYNC);\n            PaginationDetails paginationDetails = apiConfigAttributes.getPaginationDetails();\n            Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n            Map<String, Object> paginationInfo = null;\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            Map<String, String> queryparam = new HashMap<>();\n            JsonNode jsonNode;\n            if (StringUtils.isNotEmpty(ductJobMapping.getNextPageToken())) {\n                paginationInfo = new HashMap<>();\n                if (paginationDetails.isUrl())\n                    paginationInfo.put(\"URL\", ductJobMapping.getNextPageToken());\n                else if (paginationDetails.isQueryParam())\n                    queryparam.put(paginationDetails.getRequestKey(), ductJobMapping.getNextPageToken());\n            }\n            queryparam.put(LIMIT, String.valueOf(maxPageSize));\n            HttpRequestBase httpClient = authService.getHttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInf","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7cc27c3e-187f-4778-9782-44e39e708fbf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":227,"endLine":247,"content":"tributes.put(relationBaseObject, getObjectAttributes(relationBaseObject, pnpConnectionsInfo, false).get(relationBaseObject));\n                    }\n\n                    List<GSFieldDefinition> fields = baseAttributes.get(ductJobMapping.getResourceName()).getFields();\n                    String finalRelationshipName = relationshipName;\n                    fields.addAll(baseAttributes.get(relationBaseObject).getFields().stream()\n                            .map(i -> {\n                                if (ductJobMapping.getFields().contains(finalRelationshipName + \".\" + i.getFieldName())) {\n                                    GSFieldDefinition gsFieldDefinition = DuctUtils.cloneGSFieldDefinition(i);\n                                    gsFieldDefinition.setFieldName(finalRelationshipName + \".\" + i.getFieldName());\n                                    gsFieldDefinition.setDbName(finalRelationshipName + \".\" + i.getDbName());\n                                    return gsFieldDefinition;\n                                }\n                                return null;\n                            }).filter(Objects::nonNull).collect(Collectors.toList()));\n                }\n                relationshipFieldsAlreadyAdded.add(relationshipName);\n            } else if (!loadToDynamicsEnabled && field.contains(\".\")) {\n                relationshipName = field.split(\"\\\\.\")[0];\n                if (!relationshipFieldsAlreadyAdded.contains(relationshipName)) {\n                    relationBaseObject = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e0ac727-55bb-4d28-a31c-3d007f7a8e3b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":210,"endLine":228,"content":"tAuthorizationType())) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, UNSUPPORTED_AUTH_TYPE));\n    }\n\n    Map<String, Object> properties = pnpConnectionsInfo.getProperties();\n    if (MapUtils.isEmpty(properties) || !properties.containsKey(IPaasConstants.IPAAS_PROPERTIES) || MapUtils.isEmpty((Map) properties.get(IPaasConstants.IPAAS_PROPERTIES))) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n    }\n    Map<String, Object> sapProperties = (Map<String, Object>) properties.get(IPaasConstants.IPAAS_PROPERTIES);\n\n    if (AuthorizationType.BASIC_AUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n      String userName = DuctUtils.valueOf(sapProperties.get(USER));\n      Object password = DuctUtils.valueOf(sapProperties.get(PASSWORD));\n      String schemaName = DuctUtils.valueOf(sapProperties.get(SCHEMA).toString());\n      String dbHost = DuctUtils.valueOf(sapProperties.get(HOST).toString());\n\n      if (StringUtils.isBlank(userName) || Objects.isNull(password) || StringUtils.isBlank(DuctUtils.valueOf(schemaName)) || StringUtils.isBlank(dbHost)) {\n        throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, PROPERTIES_MISSING_ERROR));\n ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71160c79-3a60-419c-b305-580201e8e6c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":202,"endLine":222,"content":"urn new ResponseObj(true, metadataDriver.getPreviewRawData(connectionId, objectName, jobId));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Promote metadata\", response = ObjectDefinition.class)\n    @PostMapping(value = \"/engine/{connectionId}/{objectname}/generated/attributes/promote\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj promoteFieldFromPromotionalStore(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                                        @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String ob","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f821327-a1ff-43ba-bd4f-fb8cff4b7221","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.OAuthV2TokenDetail;\nimport com.gainsight.duct.constants.DuctCommonConstants;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.VersionConstants;\nimport com.gainsight.duct.enums.AuthType;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.gsusers.core.bean.sso.AuthProject;\nimport com.gainsight.gsusers.core.bean.sso.InstanceMasterDetail;\nimport com.gainsight.integration.bean.db.common.InstanceDetail;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.common.InstanceType;\nimport com.gainsight.integration.bean.enums.common.SetupStatus;\nimport com.gainsight.integration.utils.FeatureToggleUtil;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.tenant.OrganizationInfo;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ae1cd83-4476-4753-85c7-309f24e50e48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":141,"endLine":153,"content":"lds.isEmpty()) {\n            log.error(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText() + \":\" + String.join(\",\", readOnlyFields));\n            DuctUtils.throwError(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getGsEventCode(),\n                    CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText() + \":\" + String.join(\",\", readOnlyFields),\n                    String.format(\"Fields not supported for writeback as it is read-only:%s\", String.join(\",\", readOnlyFields)));\n        }\n        if (DuctDataOperation.INSERT.equals(ductRequestDTO.getDuctDataOperation())) {\n            boolean requiredFieldsPresent = DuctUtils.handleValidationForExpression(objectDefinition.getExpressionForRequiredFields(), fieldsToWrite);\n            if (!requiredFieldsPresent) {\n                log.error(\"MANDATORY_REQUIRED_KEYS_NOT_PRESENT {}\", getDisplayNamesForFieldNameKeys(objectDefinition.getExpressionForRequiredFields(), objectDefinition));\n                DuctUtils.throwError(CaasValidationCode.REQUIRED_MAPPINGS_NOT_PRESENT.getGsEventCode(),\n                        String.format(\"Mandatory Mappings are not present or partially present. Mandatory mappings required : {%s}\", getDisplayNamesForFieldNameKeys(objectDefinition.getExpressionForRequiredFields(), objectDefinition)),\n                        String.format(\"Mandatory Mappings are not present or partially present. Mandatory mappings required : {%s}\", getDisplayNamesForFieldNameKeys(objectDefinition.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2576897-2d3d-40dd-ac65-52bccb286a82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObject.java","startLine":1,"endLine":35,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SObject implements Serializable {\n    private String name;\n    private String label;\n\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fe9374c-87c7-4cee-acfe-1a9c0c5fef76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/DuctProcessQueue.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.beans.dbqueue;\n\n\npublic enum DuctProcessQueue {\n  PROCESS_QUEUE(\"DUCT_PROCESS_QUEUE\", \"duct_process_queue\"),\n  IPAAS_BULK_DOWNLOAD_QUEUE(\"IPAAS_BULK_DOWNLOAD_QUEUE\",\"ipaas_bulk_download_queue\"),\n\n  WRITE_BACK_HUBSPOT_QUEUE(\"WRITE_BACK_HUBSPOT_QUEUE\",\"write_back_hubspot_queue\"),\n  WRITE_BACK_DYNAMICS_QUEUE(\"WRITE_BACK_DYNAMICS_QUEUE\",\"write_back_dynamics_queue\"),\n  METADATA_QUEUE(\"METADATA_QUEUE\",\"metadata_queue\"),\n  EXTERNAL_DB_SYS_WB_QUEUE(\"EXTERNAL_DB_SYS_WB_QUEUE\", \"external_database_sys_wb_queue\");\n  private final String queueName;\n  private final String tableName;\n\n  private DuctProcessQueue(String queueName, String tableName) {\n    this.queueName = queueName;\n    this.tableName = tableName;\n  }\n\n  public String getQueueName() {\n    return queueName;\n  }\n\n  public String getTableName() {\n    return tableName;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dffc779f-7dc8-48bc-b0fe-941248fa3d4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1760,"endLine":1790,"content":"DB = accessKeyDao.findOne(query);\n        GainsightPrecondition.assertNotNull(accessKeyInfoFromDB, CaasValidationCode.CONNECTIONS_NOT_FOUND);\n        AccountQuery accessKeyQuery = new AccountQuery();\n        accessKeyQuery.accountId(accessKeyInfoFromDB.getProjectId());\n        AccountDetail accountDetail = accountDAO.findOne(accessKeyQuery);\n\n        if (null == accountDetail) {\n            accessKeyInfoFromDB.setDeleted(true);\n        } else {\n            accessKeyInfoFromDB.setUcConnectionId(null);\n        }\n        accessKeyDao.update(accessKeyInfoFromDB);\n    }\n\n    private void revokeUserAuthQuietly(String crmId) {\n        try {\n            Map<String, Object> headers = new HashMap<>();\n            headers.put(\"secret\", getSimpleCryptor().encrypt(SECRET_KEY).getValue());\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n            headers.put(\"tenantId\", RequestContextProvider.getTenantId());\n\n            Map<String, Object> queryParams = new HashMap<>();\n            queryParams.put(\"crmId\", crmId);\n            queryParams.put(\"clearAll\", \"true\");\n\n            String apiEndpoint = BASE_URL + \"/api/user-auth/tokens\";\n            HttpResponse httpResponse = httpUrlConnection.delete(apiEndpoint, headers, queryParams);\n            if (httpResponse.getResponseCode() == HttpStatus.SC_NO_CONTENT) {\n                log.info(\"Successfully revoked user auth for the CRM connection {}\", crmId);\n            } else {\n                throw new CaasException(CaasVali","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"108f29c3-f5d5-4964-9be7-44eb5ff0a71f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":253,"endLine":284,"content":"Operator());\n                }\n            }\n        }\n        if(!valueToCriteriaMap.isEmpty())\n            return DataHighwayUtils.getFilterRuleFromCAASCriteria(valueToCriteriaMap.get(valueToCriteriaMap.firstKey()), fieldNameDataTypeMap, fieldNameMetaMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"total\") != null) {\n            return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n        }\n        return 0;\n    }\n\n    private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n        List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n        Chainr chainr = Chainr.fromSpec(spec);\n        List<Map<String, Object>> finalData = new ArrayList<>();\n        for (Map<String, Object> datum : data) {\n            finalData.add(OBJECT_MAPPER.convertValue(chainr.transform(datum), new TypeReference<Map<String, Object>>() {\n            }));\n        }\n        return finalData;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18c8d384-6700-451d-b1aa-bf8d665ce601","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":227,"endLine":247,"content":"ductJobMapping.getData().remove(DuctConstants.HS_OBJECT_ID);\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken()));\n            response = fetchService.updateSingleData(ductJobMapping.getResourceName(),\n                    accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken(),\n                    accessDetailsFromDB.getAccessToken(), ductJobMapping.getData(), id);\n            finalResponse = extractResponse(response);\n            if (response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201) {\n                finalResponse.remove(PROPERTIES);\n                finalResponse.remove(ARCHIVED_AT);\n            }\n            if (response.getStatusLine().getStatusCode() == 404) {\n                finalResponse.put(MESSAGE, DuctErrorConstants.RECORD_NOT_FOUND_IN_SOURCE);\n                throw new CaasException(getDuctResponse(ductJobMapping, response, finalResponse));\n            }\n            if (response.getStatusLine().getStatusCode() != 200 && response.getStatusLine().getStatusCode() != 201) {\n                throw new CaasException(getDuctResponse(ductJobMapping, response, finalResponse));\n            }\n        } catch (CaasException e) {\n            log.error(\"Exception in updateData \", e);\n            throw e;\n        } catch (Exce","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59812a8b-80b3-4a3e-b7ba-98289ee591f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.base.CharMatcher;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.CUSTOM_FIELD_PREFIX;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FORMAT;\n\npublic class DataHighwayUtils {\n\n    public static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe9868b1-1267-483e-abfc-61406e99cf54","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/QueryAPIResponseBean.java","startLine":1,"endLine":21,"content":"package com.gainsight.duct.beans;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class QueryAPIResponseBean {\n\n    private List<Map<String, Object>> records;\n    private String nextPageToken;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c036c462-cc9c-432c-b345-2108970e9eb0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":49,"endLine":84,"content":"ht.duct.validation.ValidationConnectorDataSourceFactory;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.queue.db.bean.MessageRequestDTO;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.producer.QueueProducer;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.enums.DHTaskType;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.ws.rs.NotSupportedException;\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Slf4j\n@","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2f54bef-6cd1-4a2a-9f17-7a9ea64cf033","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":439,"endLine":470,"content":"LASH + GainsightUtils.getRandomUUID() + \"_failure.csv\");\n                        FileMerger.mergeFiles(failedFiles, mergedFile);\n                        DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                                + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n                        ductResponse.setExternalErrorFileLocation(mergedFile.getName());\n                    }\n                    break;\n                default:\n                    break;\n            }\n        } catch (Exception e) {\n            log.error(\"Error while populating file locations\", e);\n        } finally {\n            for (File file : splitFiles) {\n                FileUtils.deleteQuietly(file);\n            }\n            for (File file : successfulFiles) {\n                FileUtils.deleteQuietly(file);\n            }\n            for (File file : failedFiles) {\n                FileUtils.deleteQuietly(file);\n            }\n            FileUtils.deleteQuietly(mergedFile);\n        }\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n        queryAPIResponseBean.setRecords(externalResultsList);\n        queryAPIResponseBea","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1fd23d67-f023-421f-b757-22682284345c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":301,"endLine":324,"content":"bel());\n                    picklistOption.put(DISPLAY_ORDER, option.getDisplayOrder());\n                    picklistOption.put(VALUE, option.getValue());\n                    picklistOption.put(ACTIVE, !option.isHidden());\n                    picklistOptions.add(picklistOption);\n                }\n                fieldDefinition.put(OPTIONS, picklistOptions);\n            }\n\n            if (PICKLIST_DATA_TYPE.contains(fieldDefinition.get(DATA_TYPE)) && !fieldDefinition.containsKey(OPTIONS))\n                gainsightHubspotFieldDescription.getModificationMetadata().setReadOnlyValue(true);\n\n            if (gainsightHubspotFieldDescription.getModificationMetadata() != null) {\n                meta.put(UPDATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                meta.put(READ_ONLY, gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                meta.put(CREATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyValue());\n                meta.put(ACCESSIBLE, !gainsightHubspotFieldDescription.isHidden());\n                meta.put(SCHEMA_UPDATEABLE, !gainsightHubspotFieldDescription.getModificationMetadata().isReadOnlyDefinition());\n            } else {\n                LOGGER.info(\"modification metadata not exist for {}\", gainsightHubspotFieldDescription.getName());\n            }\n\n            if (BooleanUtils.isTrue(gainsightHubspotFieldDescription.getMultiValued()))\n                met","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c24d082-1cad-4eb9-baa2-e953d56244b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":25,"endLine":55,"content":"ngine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\n\nimport java.util.*;\n\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Order(20000)\npublic class EngineCommonDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String ID = \"id\";\n    private static final String RESULTS = \"results\";\n    private static final String PROPERTIES = \"properties\";\n    private static final String CAAS_NATIVE_EXTRACT_TASK = \"CaasNativeExtract\";\n    private static final String DATA = \"data\";\n    private static final HashSet<ConnectorType> EXCLUDED_CONNECTORS_LIST = new HashSet<>(Arrays.asList(ConnectorType.ZENDESK, ConnectorType.SERVICENOW));\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngine","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5a311037-ed2a-40e3-b3cf-b29611e22620","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/common/aha/AhaCaasCriteriaBuilder.java","startLine":99,"endLine":131,"content":"blic static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<String, GSFieldDefinition> fieldNameToMetaMap) {\n        DataType dataType;\n\n        switch (fieldNameToMetaMap.get(fieldName).getDataType()) {\n            case \"STRING\":\n                dataType = DataType.STRING;\n                break;\n            case \"NUMBER\":\n                dataType = DataType.NUMBER;\n                break;\n            case \"BOOLEAN\":\n                dataType = DataType.BOOLEAN;\n                break;\n            case \"DATE\":\n                dataType = DataType.DATE;\n                fieldInfo.setDateTimeProperties(\n                        new DateTimeProperties(\"yyyy-MM-dd\", \"UTC\"));\n                break;\n            case \"DATETIME\":\n                dataType = DataType.DATETIME;\n                fieldInfo.setDateTimeProperties(\n                        new DateTimeProperties(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"UTC\"));\n                break;\n            case \"TIMESTAMP\":\n                dataType = DataType.TIMESTAMP;\n                break;\n            default:\n                dataType = DataType.STRING;\n        }\n        fieldInfo.setDataType(dataType);\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4699b747-3671-469c-843d-e390b796df94","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":80,"endLine":106,"content":"rn whereClause;\n    }\n\n    private static void handleDataTypeAndOperator(FilterRule rule, StringBuilder stringBuilder) {\n        List<String> values;\n        switch (rule.getOp()) {\n            case CONTAINS:\n            case DOES_NOT_CONTAINS:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(rule.getOp()));\n                stringBuilder.append(SINGLE_QUOTE).append(DuctConstants.PERCENTAGE).append(escapeSpecialCharLIKE(values.get(0))).append(DuctConstants.PERCENTAGE).append(SINGLE_QUOTE);\n                break;\n            case IS_NULL:\n                stringBuilder.append(SPACE).append(Operators.getExternaSystemOperator(FilterOperator.EQ)).append(SPACE).append(\"null\");\n                break;\n            case IS_NOT_NULL:\n                stringBuilder.append(SPACE).append(Operators.getExternaSystemOperator(FilterOperator.NE)).append(SPACE).append(\"null\");\n                break;\n            case STARTS_WITH:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(rule.getOp()));\n                stringBuilder.append(SINGLE_QUOTE).append(escapeSpecialCharLIKE(values.get(0))).append(DuctConstants.PERCENTAGE).append(SINGLE_QUOTE);\n                break;\n            case ENDS_WITH:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(rule.getOp()));\n                stringBui","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e329bad1-0473-44dd-8192-2a89edf5627f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/SoqlQueryBuilder.java","startLine":102,"endLine":131,"content":" break;\n            case ENDS_WITH:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(rule.getOp()));\n                stringBuilder.append(SINGLE_QUOTE).append(DuctConstants.PERCENTAGE).append(escapeSpecialCharLIKE(values.get(0))).append(SINGLE_QUOTE);\n                break;\n            case IN:\n            case INCLUDES:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(FilterOperator.IN));\n                if (NON_QUOTE_DATA_TYPES.contains(rule.getFieldInfo().getDataType())) {\n                    stringBuilder.append(\"(\");\n                    handleQuotes(stringBuilder, false, values);\n                    stringBuilder.append(\")\");\n                } else {\n                    stringBuilder.append(\"(\");\n                    handleQuotes(stringBuilder, true, values);\n                    stringBuilder.append(\")\");\n                }\n                break;\n            case NOT_IN:\n            case EXCLUDES:\n                values = getValues(rule);\n                appendOperator(stringBuilder, Operators.getExternaSystemOperator(FilterOperator.NOT_IN));\n                if (NON_QUOTE_DATA_TYPES.contains(rule.getFieldInfo().getDataType())) {\n                    stringBuilder.append(\"(\");\n                    handleQuotes(stringBuilder, false, values);\n                    stringBuilder.append(\")\");\n                } else {\n                   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e030cc16-1ff4-48f6-8f7a-cd6bb86e109a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/TenantUtility.java","startLine":64,"endLine":84,"content":"   } else {\n            UserAuthInfo userAuthInfo = new UserAuthInfo();\n            userAuthInfo.setUserId(GainsightUtils.valueOf(systemAdministrator.get(\"Gsid\")));\n            userAuthInfo.setDisplayName(GainsightUtils.valueOf(systemAdministrator.get(\"Name\")));\n            userAuthInfo.setUserEmail(GainsightUtils.valueOf(systemAdministrator.get(\"Email\")));\n            return userAuthInfo;\n        }\n    }\n\n    private static CachedTenantService getBaseTenantService() {\n        if(cachedTenantService == null) {\n            log.info(\"Initializing cached tenant service\");\n            cachedTenantService = SpringServiceLocatorFactory.getService(CachedTenantService.class);\n            log.info(\"Initialized cached tenant service {}\", cachedTenantService);\n        }\n        return cachedTenantService;\n    }\n\n    private TenantUtility() {\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87ff44b7-aa9c-4bc2-89ea-974627ea7214","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":225,"endLine":255,"content":"lly {\n                        resetContext();\n                        LOGGER.info(\"Context reset successful for tenant: {}\", tenantId);\n                    }\n                }\n            } else {\n                LOGGER.info(\"No tenantToObjectMap found\");\n                for (String tenantId : tenantIds) {\n                    try {\n                        initializeComparison(tenantId, icsvOutWriter, baseUrl, connectorType, objectNames, superClassInfo);\n                        successTenants.put(tenantId, \"Completed\");\n                    } catch (Exception e) {\n                        LOGGER.error(\"Error in modifying jobs \", e);\n                        writeOutData(icsvOutWriter, tenantId, RequestContextProvider.getTenantName(),\n                                RequestContextProvider.getTenantType(), null, null, \"Failed\", e.getMessage());\n                        failedTenants.put(tenantId, e.getMessage());\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n        } finally {\n            LOGGER.info(String.format(\"{unified connector} Successful Tenants are - {%s}\",\n                    successTenants));\n            LOGGER.info(String.format(\"{unified connector} Failed Tenants are - {%s}\",\n                    failedTenants));\n        }\n    }\n\n    private void readFilePopulateMap(String tenantToObjectMapFilePath, Map<String, List<String>> tenantToObjectMap) {\n        // Read the file and populate the","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b4e30dd-05bc-4cae-8383-c4c19f00e600","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":253,"endLine":271,"content":"UCConstants.GSIntegration.DYNAMICS_ORG_URI));\n            String storedDynamicsOrgId = (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DYNAMICS_ORG_ID);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n            pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n            Pair<String, String> orgIdAndDomain = verifyDynamics(resource, baseTokenDetail);\n            if (storedDynamicsOrgId != null) {\n                pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.IS_EXTERNAL_CRM_CHANGED,\n                        !orgIdAndDomain.getLeft().equals(storedDynamicsOrgId));\n            }\n            pnpConnectionsInfo.getProperties().put(UCConstants.GSIntegration.DYNAMICS_ORG_ID, orgIdAndDomain.getLeft());\n            pnpConnectionsInfo.setCrmId(ConnectorType.DYNAMICS + \"_\" + orgIdAndDomain.getLeft());\n            setupCompanyAndCompanyPersonMapping(pnpConnectionsInfo, orgIdAndDomain.getRight());\n            addToLinkedCRMs(pnpConnectionsInfo.getCrmId());\n        } else if (pnpConnectionsInfo.getConnectionType() == ConnectorType.HUBSPOT) {\n            LOGGER.info(\"Raw Token Response from HUBSPOT Connector {}\", token.getRawResponse());\n            BaseTokenDetail baseTokenDetail = getTokenDetailForHubspot(oAuthDetail, token.getRawResponse());\n            pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n            pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n            Integer stor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da8c21fd-8c9c-445b-8dfc-dc4ea9eeda7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasHelperService.java","startLine":33,"endLine":56,"content":"leUtility.getUserToken() + \",\" + ORG + IpaasFeatureToggleUtility.getOrgToken());\n        return headers;\n    }\n\n    public static Map<String, Object> getUserHeaders(IpaasAccountUserDetails ipaasAccountUserDetails) {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, APPLICATION_JSON);\n        String userToken = USER + ipaasAccountUserDetails.getUserToken().getString();\n        headers.put(IPaasConstants.AUTHORIZATION, userToken + \",\" + ORG + IpaasFeatureToggleUtility.getOrgToken());\n        return headers;\n    }\n\n    public static Map<String, Object> getConnectionSpecificHeaders(IpaasAccountUserDetails ipaasAccountUserDetails, PNPConnectionsInfo pnpConnectionsInfo){\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, APPLICATION_JSON);\n        String userTokenRequest = USER + ipaasAccountUserDetails.getUserToken().getString();\n        String elementToken = ELEMENT + CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties().get(IPAAS_PROPERTIES)).get(IPAAS_INSTANCE_TOKEN));\n        String orgTokenRequest = ORG + IpaasFeatureToggleUtility.getOrgToken();\n        headers.put(IPaasConstants.AUTHORIZATION, userTokenRequest + \",\" + orgTokenRequest + \",\" + elementToken);\n        headers.put(ELEMENTS_VERSION,HELIUM);\n        return headers;\n    }\n\n    public static Map<String, Object> getBulkFileDownloadHeaders(IpaasAccountUserDetails ipaasAccountUserDetails, PNPConnectionsInfo p","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"093c15fb-f0ab-4366-9687-ac56e81ae061","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":84,"endLine":104,"content":"         MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(pnpConnectionsInfo.getConnectionType());\n            Optional<ResourceConfig> optionalResourceConfig = connectorConfigByObjectName.getResources().stream()\n                    .filter(i -> ductJobMapping.getResourceName().equals(i.getResourceName())).findFirst();\n\n            ResourceConfig resourceConfig;\n            if (!optionalResourceConfig.isPresent()) {\n                Optional<ResourceConfig> optionalDefaultResourceConfig = connectorConfigByObjectName.getResources()\n                        .stream().filter(resource -> resource.isDefaultResource()).findFirst();\n                if (!optionalDefaultResourceConfig.isPresent() || !optionalDefaultResourceConfig.get().getResourceName().equals(\"{objectName}\")) {\n                    DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(),\n                            CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), ductJobMapping.getResourceName() + \" does not exist in source system\");\n                }\n                resourceConfig = optionalDefaultResourceConfig.get();\n                resourceConfig.setResourceName(ductJobMapping.getResourceName());\n            } else {\n                resourceConfig = optionalResourceConfig.get();\n            }\n\n            Map<String, Object> paginationInfo = new HashMap<>();\n            HashMap<String, String> queryparam = new HashMap<>();\n            String nextPageToken = StringUti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"372920db-44a6-4240-866f-9ff17729ca31","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":49,"endLine":72,"content":"eption;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.audit.AuditRecord;\nimport com.gainsight.integration.bean.common.BeanPropertyTracker;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.db.common.UnifiedConnectorRequest;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.ZendeskVersionConstants;\nimport com.gainsight.integration.bean.enums.audit.AuditEntityType;\nimport com.gainsight.integration.bean.enums.audit.AuditOperationType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.common.EventStatusEnum;\nimport com.gainsight.integration.bean.enums.common.SetupStatus;\nimport com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.AuthApiAttributes;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.connector.ecosystem.service.GainsightEcosystemChannelFactory;\nimport com","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79714ddf-80d1-4470-a004-c28fb4ec4b4f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":58,"endLine":110,"content":"l String OUTPUT_FILE_LOCATION = \"OutputFileLocation\";\n    private static String RESOURCE_NAME = \"ResourceName\";\n    private static final String CONNECTION_ID = \"ConnectionId\";\n    @Mock\n    DuctJobMappingDao ductJobMappingDao;\n\n    @Mock\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Mock\n    QueueProducer queueProducer;\n\n    @Mock\n    MessageInfo<DuctJobMapping> MESSAGE_INFO;\n\n    @Mock\n    MessageInfo<DuctJobMapping> WB_HUBSPOT_MESSAGE_INFO;\n\n    @Mock\n    HubspotDataSourceService hubspotDataSourceService;\n\n    @Mock\n    SalesforceDataSourceService salesforceDataSourceService;\n\n    @Mock\n    DuctValidationService ductValidationService;\n\n    @Mock\n    ConnectorDataSourceFactory connectorDataSourceFactory;\n    @Mock\n    CaasConnectorConfigService caasConnectorConfigService;\n\n    //    @Spy\n    @InjectMocks\n    private DuctJobMappingServiceImpl ductJobMappingService;\n\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void saveMapping_test_null_connection() {\n        boolean passed = false;\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = null;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any())).thenReturn(null);\n            ductJobMappingService.synchronousInsert(createDuctRequestDTO(true, new DateTime(), 5, false));\n        } catch (CaasException ex) {\n            gsExternalSystemErrorMapping = ex.getGsExternalSystemErrorMapping();\n            passed = true;\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02299de4-474c-45f3-89bd-7cdb552e4316","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":130,"endLine":145,"content":") {\n        return new StringBuilder().append(RequestContextProvider.getTenantId()).append(DuctConstants.FORWARD_SLASH).append(ductJobMapping.getConnectionId()).append(DuctConstants.FORWARD_SLASH).append(ductJobMapping.getJobId()).append(DuctConstants.FORWARD_SLASH).append(UUID.randomUUID().toString().replaceAll(DuctConstants.FILLER, \"\")).append(DuctConstants.CSV).toString();\n    }\n\n    public static void validateConnection(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        log.info(\"Validation of Connection in progress\");\n        // Value to be set as HUBSPOT,ZENDESK. Leading and trailing spaces and case sensitivity is taken care in below code\n        String enabledConnectors = DeploymentProperties.getDeploymentProperties().getValue(\"caas.enabled.connectors\", \"HUBSPOT\");\n        if (StringUtils.isEmpty(enabledConnectors))\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_CONNECTOR_TYPE.getGsEventCode(), CaasValidationCode.INVALID_CONNECTOR_TYPE.getUserText(), null, null, \"Connector Type is not Valid\"));\n        List<String> caasEnabledConnectors = Arrays.stream(enabledConnectors.split(\",\")).map(i -> i.trim().toUpperCase()).collect(Collectors.toList());\n\n        if (pnpConnectionsInfo == null)\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.NO_CONNECTION_FOUND.getGsEventCode(), CaasValidationCode.NO_CONNECTION_FOUND.getUserText(), null, null, \"No Connection Found\"));\n\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f33f5ef7-58dd-45e0-9f75-8d9c6b162696","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1005,"endLine":1024,"content":"                 pnpConnectionsInfoFromDB.setConnectionStatus(pnpConnectionInfoFromUI.getConnectionStatus());\n                    }\n                    break;\n                case PENDO:\n                    processPendoConnectionDetail(pnpConnectionInfoFromUI, pnpConnectionsInfoFromDB);\n                    break;\n                case PRODUCTBOARD:\n                    Map<String, Object> properties = pnpConnectionInfoFromUI.getProperties();\n                    ProductBoardChannelService productBoardChannelService = new ProductBoardChannelServiceImpl(properties.get(ACCESS_TOKEN).toString());\n                    assertTrue(productBoardChannelService.authenticateAccessToken(), CaasValidationCode.INVALID_INPUT, \"Unable to authenticate to \" + pnpConnectionsInfoFromDB.getConnectionType(), HttpStatus.SC_BAD_REQUEST);\n                    pnpConnectionsInfoFromDB\n                            .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(properties.get(ACCESS_TOKEN)\n                            ).trim(), pnpConnectionsInfoFromDB.getConnectionType()));\n                    pnpConnectionsInfoFromDB.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                    if (properties.containsKey(DuctCommonConstants.SUBDOMAIN)) {\n                        pnpConnectionsInfoFromDB.getProperties().put(DuctCommonConstants.SUBDOMAIN, properties.get(DuctCommonConstants.SUBDOMAIN));\n                    }\n                    break;\n                case AHA:\n                    Map<S","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf6cdec0-802c-491d-a159-4e9d29dbce1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":410,"endLine":434,"content":"   if (!isIdentifierPresent && ductColumnMapping.getIsKeyField()) {\n        isIdentifierPresent = true;\n      }\n    }\n\n    if (!fieldsNotPresent.isEmpty()) {\n      DuctUtils.throwError(CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getGsEventCode(), CaasValidationCode.GIVEN_INPUT_FIELDS_DOES_NOT_EXIST.getUserText(),\n              \"Some of the fields does not exist in the source system \" + String.join(\",\", fieldsNotPresent));\n    }\n\n    if (!isIdentifierPresent && (DuctDataOperation.UPDATE.equals(ductDataOperation) || DuctDataOperation.UPSERT.equals(ductDataOperation))) {\n      DuctUtils.throwError(CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getGsEventCode(), CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText(),\n              CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText());\n    }\n\n    if (!readOnlyFields.isEmpty()) {\n      DuctUtils.throwError(CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getGsEventCode(), CaasValidationCode.FIELDS_NOT_SUPPORTED_FOR_WRITEBACK.getUserText(),\n              \"Some of the fields not supported for writeback in the source system: \" + String.join(\",\", readOnlyFields));\n    }\n  }\n\n  private void validateS3Info(DuctJobMapping ductJobMapping) throws CaasException {\n    if (ductJobMapping.getCaasS3FileDetails() == null || ductJobMapping.getCaasS3FileDetails().getBucketName() == null ||\n            (ductJobMapping.getCaasS3FileDetails().getFilesDir() == null || ductJobMapping.getCaasFileInfo().getFileName() == null)) {\n      log.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ff6758c-ddaf-4711-acf7-1503597a25a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":143,"endLine":173,"content":"CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.NO_CONNECTION_FOUND.getGsEventCode(), CaasValidationCode.NO_CONNECTION_FOUND.getUserText(), null, null, \"No Connection Found\"));\n\n        if (!caasEnabledConnectors.contains(pnpConnectionsInfo.getConnectionType().getValue()))\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_CONNECTOR_TYPE.getGsEventCode(), CaasValidationCode.INVALID_CONNECTOR_TYPE.getUserText(), null, null, \"Connector Type is not Valid\"));\n        switch (pnpConnectionsInfo.getConnectionType()) {\n            case HUBSPOT:\n            case ZENDESK:\n            case BIGQUERY:\n            case FRESHDESK:\n            case SFDC:\n            case SNOWFLAKE:\n            case INTERCOM:\n            case SERVICENOW:\n            case ZUORA:\n            case ZUORAV2:\n            case ZOHO:\n            case PIPEDRIVE:\n            case JIRA:\n            case DYNAMICS:\n            case ECOSYSTEM:\n            case AHA:\n            case ZOOM:\n            case DATABRICKS:\n            case MSTEAMS:\n            case INTERCOMV2:\n            case PIPEDRIVEV2:\n            case ZOHOV2:\n            case SAP_DATASPHERE:\n                if (!ConnectionStatus.AUTHORIZED.equals(pnpConnectionsInfo.getConnectionStatus())\n                        && !ConnectionStatus.AUTHORIZED_AND_LINKED.equals(pnpConnectionsInfo.getConnectionStatus()))\n                    throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCod","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"578e999e-f569-4e47-839d-c0bb0bb5bfcb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DuctValidationServiceImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.validation;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Service\npublic class DuctValidationServiceImpl implements DuctValidationService {\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    ValidationConnectorDataSourceFactory validationConnectorDataSourceFactory;\n\n    @Autowired\n    GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n\n    @Autowired\n    CaasConnectorConfigService caasConnectorService;\n\n    @Autowired\n    CaasMetadataFactory caasMetadataFactory;\n\n    @Override\n    public boolean validateRequest(DuctRequestDTO ductRequestDTO) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        CaasMetadataService service = caasMetadataFactory.getService(pnpConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"97fea106-39bb-4fea-a5ab-d717571f92e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/UCValidationCode.java","startLine":147,"endLine":194,"content":" DATA_PREVIEW_IN_PROGRESS(19124),\n    JOB_IN_PROGRESS(19125),\n    ENHANCE_META_DATA_FEATURE_ERROR(19126),\n    ENHANCE_META_DATA_NO_DATA(19127),\n    FIELD_ALREADY_EXISTS(19128),\n    UC_JOB_DP_NOT_FOUND(19129),\n    MULTIPLE_PRIMARY_CONNECTIONS(19130),\n    PX_SUBSCRIPTION_ID_ALREADY_EXISTS(19131),\n    PRODUCTBOAORD_DATA_FETCH_ERROR(19132),\n    RTS_CONFIGURATION_IN_PROGRESS(19133),\n    PNP_INVALID_METADATA_CHANGE(1001),\n    PNP_NOT_NUMBER(1002),\n    PNP_MEETING_ID_IS_NULL(1003);\n\n    private static final Map<String, UCValidationCode> MAP = new HashMap<>();\n\n    static {\n        for (UCValidationCode UCValidationCode : values()) {\n            MAP.put(UCValidationCode.name().toLowerCase(), UCValidationCode);\n        }\n    }\n\n    private final int code;\n    /**\n     * Is this code used by outside or not\n     */\n    private final boolean codeConstant;\n    private final ExceptionType exceptionType;\n    private String className = getClass().getSimpleName();\n\n    UCValidationCode(int code) {\n        this(code, false, ExceptionType.DEFAULT);\n    }\n\n    UCValidationCode(int code, boolean codeConstant, ExceptionType exceptionType) {\n        this.code = code;\n        this.codeConstant = codeConstant;\n        this.exceptionType = exceptionType;\n    }\n\n    /**\n     * From value copilot validation code.\n     *\n     * @param value the value\n     * @return the copilot validation code\n     */\n    public static UCValidationCode fromValue(String value) {\n        if (StringUtils.isNotBlank(value)) {","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1df9922e-af1b-46bb-9099-5915a2588b6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":342,"endLine":363,"content":"t(LABEL, option.get(picklistNameKey));\n                picklistOption.put(VALUE, ObjectUtils.isNotEmpty(option.get(picklistValueKey)) ? option.get(picklistValueKey) : option.get(picklistNameKey));\n                picklistOptions.add(picklistOption);\n            }\n            fieldDefinition.put(OPTIONS, picklistOptions);\n        } else if (StringUtils.isNotEmpty(fallbackPicklistValuesPath) && ObjectUtils.isNotEmpty(field.get(fallbackPicklistValuesPath))) {\n            List<Map> picklistOptions = new ArrayList<>();\n            List<JsonNode> picklistValues = StreamSupport.stream(field.get(fallbackPicklistValuesPath).spliterator(), false).collect(Collectors.toList());\n            for (JsonNode option : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(LABEL, option.get(picklistNameKey));\n                picklistOption.put(VALUE, ObjectUtils.isNotEmpty(option.get(picklistValueKey)) ? option.get(picklistValueKey) : option.get(picklistNameKey));\n                picklistOptions.add(picklistOption);\n            }\n            fieldDefinition.put(OPTIONS, picklistOptions);\n        }\n    }\n\n    private List<Map<String, Object>> transformObjectList(List<Map<String, Object>> objectList, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n\n        CaasObjectConfig caasObjectConfig = caasObjectConfigDAO.getCaasObjectConfig(pnpConnectionsInfo.getConnectionType());\n        CaasObjectTenantConfig caasObjectTena","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c3fa630-494a-44c9-8004-ecd284a385f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/DuctProcessQueueInfo.java","startLine":1,"endLine":47,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n\n@Service\npublic class DuctProcessQueueInfo implements QueueInfo {\n  private static final DuctProcessQueue queue = DuctProcessQueue.PROCESS_QUEUE;\n\n  @Override\n  public String getQueueName() {\n    return queue.getQueueName();\n  }\n\n  @Override\n  public String getTableName() {\n    return queue.getTableName();\n  }\n\n  @Override\n  public Duration getDefaultLockTime() {\n    return Duration.ofHours(3);\n  }\n\n  @Override\n  public int getDefaultTenantLimit() {\n    return 5;\n  }\n\n  @Override\n  public QueueDbMessageSplitter getMessageSplitter() {\n    MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n    return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n  }\n\n  @Override\n  public boolean maintainMessageSequencing() {\n    return true;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b18a514-aae7-4e3a-8cd7-9498f3007bb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/DuctMessageProcessor.java","startLine":1,"endLine":38,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.MDCContext;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.duct.DuctService;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.dbqueue.DuctProcessMessage;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.utils.DuctCommonUtils;\nimport com.gainsight.duct.utils.InstrumentationUtil;\nimport com.gainsight.queue.db.bean.DbMessage;\nimport com.gainsight.queue.db.bean.MessageRequestVO;\nimport com.gainsight.queue.db.bean.MessageResponseVO;\nimport com.gainsight.queue.db.bean.MessageResultVO;\nimport com.gainsight.queue.db.enums.DbMessageStatus;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.processor.AbstractDbQueueMessageProcessor;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\n\n@Slf4j\n@Service\npublic class DuctMessageProcessor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d87efc82-78a5-4a08-8803-3002c22d58af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotBulkWriteBackValidationService.java","startLine":303,"endLine":332,"content":"olumnMapping.getHeaderName() == null || ductColumnMapping.getFieldName() == null) {\n                log.error(DuctErrorConstants.INVALID_MAPPINGS);\n                DuctUtils.populateAndInsertError(DuctErrorConstants.INVALID_MAPPINGS, ductJobMapping.getJobId());\n            }\n        }\n    }\n\n    private void validateObject(DuctJobMapping ductJobMapping) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n        List<String> supportedWriteBackObjects = connectorConfig.getSupportedWriteBackObjects();\n        Set<String> objects = new HashSet<>();\n        ductJobMapping.getColumnMappings().forEach(mapping -> objects.add(mapping.getObjectName()));\n        objects.removeAll(supportedWriteBackObjects);\n        if (objects.size() != 0) {\n            DuctUtils.populateAndInsertError(HUBSPOT_BULK_WRITE_BACK_NOT_SUPPORTED, ductJobMapping.getJobId());\n        }\n    }\n\n    private File getFileFromS3(DuctJobMapping ductJobMapping) {\n        try {\n            File file = DuctS3Utility.downloadFileFromS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + ductJobMapping.getCaasFileInfo().getFileName());\n            log.info(\"file name :{}\", file.getName());\n            return file;\n        } catch (Exception e) {\n            log.error(\"Error in downloading the file\");\n            throw e;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b99056f6-5534-49e2-b326-45c9fcb465a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":25,"endLine":61,"content":"gine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\n\nimport java.util.*;\n\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n@Service\n@Order(11000)\npublic class ZendeskNativeDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String CAAS_ZENDESK_EXTRACT = \"CaasZendeskExtract\";\n    private static final String DATA = \"data\";\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n\n    private AuthService authService = new AuthServiceImpl();\n\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boolean ca","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c53ced0c-8bf5-4573-9309-2d12f03d90ad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":266,"endLine":271,"content":"ers.entrySet().stream().forEach(entry -> httpRequestBase.addHeader(entry.getKey(), entry.getValue()));\n    }\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf4933cc-cbdb-4dfc-936e-bd5e2418343d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":24,"endLine":56,"content":"ymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.enums.DHTaskType;\nimport com.google.gson.JsonArray;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.StringJoiner;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.COMMA;\n\n@Service\n@Order(500)\n@Slf4j\npublic class BigQueryDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String BIGQUERY_EXTRACT_TASK = \"CaasBigQueryExtract\";\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String RESULTS = \"results\";\n    private static final String DATASET_ID = \"datasetId\";\n    private static final String DOT = \".\";\n    private static final String BACK_QUOTE = \"`\";\n    private static final String SELECT_QUERY_WITHOUT_WHERE_CLAUSE = \"SELECT %s FROM %s LIMIT %s OFFSET %s\";\n    private static final String FORMAT_TIMESTAMP = \"FORMAT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc7e78d2-1e67-4906-919d-15660d7bda40","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":272,"endLine":288,"content":"Mapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getFieldType())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            } else if (fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getType()))) {\n                dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(gainsightHubspotFieldDescription.getType())).findFirst().get();\n                fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n            } else {\n                fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                meta.put(FILTERABLE, true);\n                meta.put(EXTERNALLY_FILTERABLE, false);\n            }\n\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"600ec06e-28d7-4325-943d-4360d5301bae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":51,"endLine":82,"content":"mport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.wrapRoundBrackets;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeMap;\nimport static com.sforce.soap.metadata.BriefcaseFilterOperator.e;\n\n\n@Service\n@Order(200)\n@Slf4j\npublic class JiraDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    @Autowired\n    MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String ID = \"id\";\n    private static final String RESULTS = \"results\";\n    private static final String PROPERTIES = \"properties\";\n    private static final String CAAS_NATIVE_EXTRACT_TASK = \"CaasNativeExtract\";\n    private static final String CONNECTOR_TYPE = \"connectorType\";\n    private static final List<DataType> ENCLOSE_IN_SINGLE_QUOTE = Arrays.asList(DataType.STRING, DataType.DATE, DataType.DATETIME);\n    public static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd HH:mm:ss.SSS\";\n    public static final String DATE_FORMAT = \"YYY-MM-DD\";\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9cc020a-5df7-47ab-ac23-152e4083f725","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/UCMessageProperties.java","startLine":45,"endLine":72,"content":"(String key) {\n    return properties.getProperty(key);\n  }\n\n  private static void loadMessageProperties() {\n    InputStream inputStream = null;\n    try {\n      String filePath = ConfigFileUtil.existingFilePath(MESSAGES_EN_PROPERTIES);\n      File file = new File(filePath);\n      inputStream = new FileInputStream(file);\n      messageProperties = new Properties();\n      messageProperties.load(inputStream);\n    } catch (IOException e) {\n      LOGGER.error(e.getMessage(), e);\n      //Eating up the exception, as we want to process with others when properties is not loaded, will try again to load.\n    } finally {\n      IOUtils.closeQuietly(inputStream);\n    }\n  }\n\n  private static class PropertiesHolder {\n    private static final UCMessageProperties INSTANCE =\n        new UCMessageProperties(UCMessageProperties.getProperties());\n\n    private PropertiesHolder() {\n    }\n  }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"588665ed-432f-429b-b4fd-f7d57650cfd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/RunFrequency.java","startLine":1,"endLine":19,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\n/**\n * Created by: santa\n * Created Date: 23/6/14 6:04 PM.\n */\npublic enum RunFrequency {\n  HOURLY,\n  DAILY,\n  WEEKLY,\n  MONTHLY,\n  QUARTERLY,\n  YEARLY,\n  ;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"896e02ac-a93d-4d7c-be92-fafcef0f882c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":72,"endLine":94,"content":" throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    checkForFieldOperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String type = gsFieldDefinition.getMeta().getOriginalDataType();\n        String fieldType = (String) gsFieldDefinition.getMeta().getProperties().get(\"sourceComplexType\");\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataTypeMappings = caasConnectorConfig.getFallbackDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if (isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getEx","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24044bb9-d382-4249-8259-330621a0f4f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":848,"endLine":872,"content":"          return DuctStatus.PARTIAL_SUCCESS;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords() == 0) {\n                return DuctStatus.SUCCESS;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.COMPLETED && ductJobMapping.getSuccessRecords() == 0 && ductJobMapping.getFailedRecords() > 0) {\n                return DuctStatus.FAILED;\n            } else if (ductJobMapping.getDuctStatus() == DuctStatus.FAILED) {\n                return DuctStatus.FAILED;\n            }\n            return DuctStatus.IN_PROGRESS;\n        }\n        return ductJobMapping.getDuctStatus();\n    }\n\n    private DuctJobMapping createDuctJobMapping(BulkDataLoadRequest bulkDataLoadRequest) throws CaasException {\n        return DuctJobMapping.builder()\n                .jobId(UUID.randomUUID().toString())\n                .columnMappings(createColumnMappings(bulkDataLoadRequest))\n                .connectionId(bulkDataLoadRequest.getParams().get(\"connectionId\").toString())\n                .caasS3FileDetails(populateS3Details(bulkDataLoadRequest.getS3BucketDetails()))\n                .caasFileInfo(populateCaasFileInfo(bulkDataLoadRequest.getFileName(), bulkDataLoadRequest.getFileFormat()))\n                .properties(createPropertiesForRuleRequest(bulkDataLoadRequest))\n                .build();\n    }\n\n    private Map createPropertiesForRuleRequest(BulkDataLoadRequest bulkDataLoadRequest) th","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a4ec737-6f9b-443a-8536-3e1c65408558","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":279,"endLine":301,"content":");\n                columnMappings.add(hubspotColumnMapping);\n            }\n\n            FileImportPage fileImportPage = new FileImportPage(true, columnMappings);\n            if (ductJobMapping.isRules() || ductJobMapping.getCaasS3FileDetails().getFilesDir() != null) {\n                file = getFileFromS3(ductJobMapping);\n            } else {\n                file = getFile(UUID.randomUUID().toString(), ductJobMapping);\n            }\n            InternalBulkFileBean internalBulkFileBean = new InternalBulkFileBean(file.getName(), \"CSV\", fileImportPage);\n            internalBulkFileBeans.add(internalBulkFileBean);\n\n            HubspotBulkImportBean bulkImportBean;\n            Map<String, String> objectLevelOperationMap = (Map<String, String>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n            Map<String, Object> importOperationsMap = new HashMap<>();\n            String objectId;\n            for (Map.Entry<String, String> objectLevelOperation : objectLevelOperationMap.entrySet()) {\n                objectId = getObjectIdFromCache(pnpConnectionsInfo, service, objectLevelOperation.getKey(), ductJobMapping);\n                if (DuctDataOperation.valueOf(objectLevelOperation.getValue()) == DuctDataOperation.INSERT) {\n                    importOperationsMap.put(objectId, \"CREATE\");\n                } else if (DuctDataOperation.valueOf(objectLevelOperation.getValue()) == DuctDataOperation.UPDATE) {\n                    importOperationsMap.put(ob","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14b2917d-0dcf-4fa8-8bc9-7b4661710dfc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":272,"endLine":292,"content":"obMapping.getConnectorType(), false);\n            DuctResponse ductResponse = connectorDataSourceService.updateData(ductJobMapping, ductRequestDTO.getIdentifiers(), pnpConnectionsInfo,\n                    objectDefinitionMap.get(ductRequestDTO.getResourceName()));\n            return DuctResponseDTO.builder().externalSystemResponse(ductResponse.getExternalSystemResponse())\n                    .jobId(ductResponse.getJobId()).status(ductResponse.getDuctStatus()).connectionId(ductResponse.getConnectionId())\n                    .totalNumberOfRecords(ductResponse.getTotalNumberOfRecords()).build();\n        }\n    }\n\n    @Override\n    public DuctResponseDTO bulkFetch(DuctRequestDTO ductRequestDTO) throws CaasException {\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())) {\n            GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreErrorCode.INVALID_PARAMETER,\n                    \"Connection Id should be present\", \"Connection Id should be present\", 400);\n            validateMappings(ductRequestDTO);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            ductValidationService.validateRequest(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setConnectorType(pnpCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b31fa54-fbcf-4623-bfa9-c02e73d9c2bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/HubspotTokenDetails.java","startLine":1,"endLine":48,"content":"package com.gainsight.duct.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotTokenDetails implements Serializable {\n\n    private static final  Long serialVersionUID = -1L;\n\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public String getAccessToken() {\n        return accessToken;\n    }\n\n    public void setAccessToken(String accessToken) {\n        this.accessToken = accessToken;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f26a41f3-4742-4d89-9862-6b919f6bada5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/GsDuctWebApp.java","startLine":73,"endLine":84,"content":".addShutdownHook(waitForSometimeBeforeExitingVM);\n    }\n\n  @EventListener(ApplicationReadyEvent.class)\n  public void startup() {\n    applicationContext.getBeanDefinitionNames();\n    JobTracer.initialize(\n            GSInstrumentationConfigProvider.getInstrumentationConfig(DuctConstants.CAAS_WEB,\n                    ComponentCode.CAAS));\n    log.info(\"[STARTUP] Setting the base error config file location to =>\" + System.getProperty(\"error.message.loc\"));\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"031b757d-ea17-477b-b4bc-271697013aad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":135,"endLine":156,"content":"ionDetail();\n    CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SAP_DATASPHERE);\n    String objectName = ductJobMapping.getResourceName().replaceAll(\" \", \"_\");\n\n    if (ObjectUtils.isEmpty(objectDefinition)) {\n      CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n      Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n      objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n    }\n\n    Map<String, GSFieldDefinition> gsFieldsByNamesMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, Function.identity()));\n    String timeZone = StringUtils.defaultIfBlank(DuctUtils.valueOf(nullSafeMap(ductJobMapping.getProperties()).get(\"targetTimezone\")), \"UTC\");\n\n    List<FieldInfo> fieldInfos = new ArrayList<>();\n    for (String field : ductJobMapping.getFields()) {\n      GSFieldDefinition fieldDefinition = gsFieldsByNamesMap.get(field);\n      FieldInfo fieldInfo = new FieldInfo();\n      fieldInfo.setJsonPath(fieldDefinition.getFieldName());\n      fieldInfo.setName(fieldDefinition.getFieldName());\n      fieldInfo.setDisplayName(fieldDefinition.getLabel());\n      fieldInfo.setDataType(DataType.getDataType(fieldDefinition.getDataType()));\n      if (fieldDefinition.getDataType().equals(\"DATE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6850a104-98e6-4037-bc2d-b820ad526e82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":182,"endLine":211,"content":"                 if (CollectionUtils.isNotEmpty(data)) {\n                        Map jobData = GainsightCollectionUtils.nullSafeMap((Map) data.get(0));\n                        if (jobData.get(\"jobId\") != null) {\n                            LOGGER.info(\"Timeout exception occurred. Still job got submitted with jobId:{}.\", jobData.get(\"jobId\"));\n                            ResponseObj responseObj = new ResponseObj();\n                            responseObj.setData(jobData);\n                            return new ConnectorsDataHighwayResponseHandler<>(200, \"success\", responseObj);\n                        }\n                    }\n                }\n                if (n == RETRY_COUNT_WITH_BACKOFF) {\n                    throw e;\n                }\n                try {\n                    int waitTime = ((int) Math.round(Math.pow(5, n + 1)) * 1000);\n                    LOGGER.info(\"Retry {}: Waiting for {} millis before retrying\", n + 1, waitTime);\n                    Thread.sleep(waitTime);\n                } catch (InterruptedException ignored) { //NOSONAR\n                    // Ignoring interruptions in the Thread sleep so that\n                    // retries continue\n                }\n            }\n        }\n        return postResponse;\n    }\n*/\n\n  private static CloseableHttpClient getHttpClientWitRetry() {\n    HttpClientBuilder builder = HttpClient.getApacheHttpClientBuilder();\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(TIMEOUT).setSocketTimeout(TI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2535eccc-cf1f-4073-b86c-bd36fa3251e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/PipedriveV2ToOMDConverterServiceImpl.java","startLine":29,"endLine":57,"content":"ger(PipedriveV2ToOMDConverterServiceImpl.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String KEY = \"key\";\n    private static final String NAME = \"name\";\n    private static final String FIELD_TYPE = \"field_type\";\n    private static final String ID = \"id\";\n    private static final String CREATEABLE_FLAG = \"edit_flag\";\n    private static final String ACTIVE_FLAG = \"active_flag\";\n    private static final String DESCRIPTION = \"description\";\n    private static final String ADD_TIME = \"add_time\";\n    private static final String UPDATE_TIME = \"update_time\";\n    private static final String COLOR = \"color\";\n    private static final String EXCLUDE_FIELDS = \"excludeFields\";\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.PIPEDRIVEV2.equals(connectorType);\n    }\n\n    @Override\n    public void convertToOMDFormat(JsonNode fields, Map<String, Object> objectDefinition, PNPConnectionsInfo pnpConnectionsInfo, ApiConfigAttributes apiConfigAttributes) {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n\n        Map<String, ComplexType> complexTypeMappings = connectorConfig.getComplexTypeMappings();\n        List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n        List<DataTypeMappings> fallbackDataT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93547c8a-eaa9-44be-86e8-5f710c687f46","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.data;\n\nimport com.gainsight.bean.MSDynamicsAuthInfo;\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.CaasConnectorConfigService;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.*;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.i18n.AdapterEr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f9cecb10-fb13-43ec-9e22-070b7d66cffc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/DuctDaoUtils.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.dao;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport com.gainsight.gom.id.ObjectIDGenerator;\nimport com.gainsight.gom.id.RowIDGenerator;\nimport com.gainsight.utils.GainsightPrecondition;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.StringJoiner;\n\n\n@Slf4j\npublic class DuctDaoUtils {\n\n  public static final String GSID_COLUMN = \"gsid\";\n  public static final String CREATED_DATE_COLUMN = \"created_date\";\n  public static final String MODIFIED_DATE_COLUMN = \"modified_date\";\n  public static final String DELETED_COLUMN = \"deleted\";\n  public static final String JOB_TYPE = \"job_type\";\n  public static final String LAST_RUN_ID = \"last_run_id\";\n\n  public static final String SELECT_ALL_QRY = \"SELECT * from %s \";\n  private static final String INSERT_QUERY = \"INSERT INTO %s %s VALUES %s\";\n  private static final String UPDATE_QUERY = \"UPDATE %s SET %s WHERE %s\";\n\n  public static final String ORDER_BY = \" ORDER BY \";\n  public static final String LIMIT = \" LIMIT \";\n  public static final String OFFSET = \" OFFSET \";\n\n  public static String getNextRowId(Class<?> clazz) {\n    String schemaId = ObjectIDGenerator.buildInternalObjectSchemaID(clazz);\n    return RowIDGenerator.getGenerator(schemaId).next();\n  }\n\n  /**\n   * Generic insert query build","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11861034-5a65-44dd-a560-b418096a9a12","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/ServicenowConnectionService.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.connection;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.OAuthDetail;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.duct.authorization.GainsightAccountServiceFactory;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.config.CaasConnectorConfigDAO;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.enums.AccountType;\nimport com.gainsight.fasterxml.jackson.core.JsonProcessingException;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.AuthDetails;\nimport com.gainsight.integration.bean.metadata.engine.AuthorizationUrl;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3cbb2308-b993-45fb-9843-80a9c2369d0a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":98,"endLine":117,"content":"INVALID_RESOURCE_NAME.getUserText(), ductRequestDTO.getResourceName() + \" does not exist in source system\");\n            }\n            throw exception;\n        }\n        stopWatch.stop();\n        LOGGER.info(\"completed attributes fetch for object: {}, connection: {} in: {} MS\", ductRequestDTO.getResourceName(), pnpConnectionsInfo.getConnectionId(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DYNAMICS);\n\n        Map metadata = MSDynamicsObjectUtil.constructDynamicsObjectDefinition(extractedData, pnpConnectionsInfo, ductRequestDTO.isLookupFieldsFlattened(),\n                FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId()),\n                connectorConfig.getDataTypeMappings());\n        Map<String, ObjectDefinition> omdFormatMetadata = Collections.singletonMap(ductRequestDTO.getResourceName(), OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n        return omdFormatMetadata;\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo, boolean resolvePicklistOptions,\n                                                             DuctJobMapping ductJobMapping) throws CaasException {\n        LOGGER.info(\"Starting attributes fetch for object: {}, connection: {}\", objectName, pnpConnectionsInfo.getConnectionId());\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dad30c98-d94c-4b5b-91db-676ba01f7631","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":442,"endLine":457,"content":"evelWritebackOperation = new HashMap<>();\n        if (ductRequestDTO.getResourceName() != null && ductRequestDTO.getDuctDataOperation() != null) {\n            objectLevelWritebackOperation.put(ductRequestDTO.getResourceName(), ductRequestDTO.getDuctDataOperation());\n            properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelWritebackOperation);\n            validateAllowedOperation(objectLevelWritebackOperation);\n            return properties;\n        }\n        if (ductRequestDTO.getProperties() == null || !ductRequestDTO.getProperties().containsKey(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION))\n            DuctUtils.throwError(CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getGsEventCode(), CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText(), CaasValidationCode.WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED.getUserText());\n        Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) ductRequestDTO.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n        for (Map.Entry<String, Object> entry : requestObjectLevelWritebackOperation.entrySet()) {\n            validateOperation(entry);\n            objectLevelWritebackOperation.put(entry.getKey(), DuctDataOperation.valueOf(entry.getValue().toString()));\n        }\n        properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelWritebackOperation);\n        validateAllowedOperation(objectLevelWritebackOperation)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"26b77492-e476-4149-9be2-fa2b95d5afb2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":131,"endLine":147,"content":"ing filter = null;\n        String query = null;\n        List<String> fieldJsonPathList = fieldInfos.stream().map(FieldInfo::getJsonPath).collect(Collectors.toList());\n        int limit = Math.min(ductJobMapping.getLimit(), maxPageSize) + 1;\n        int offset = 0;\n        if (!ObjectUtils.isEmpty(ductJobMapping.getOffset()) && ductJobMapping.getOffset() > 0) {\n            offset = ductJobMapping.getOffset();\n        } else if (!ObjectUtils.isEmpty(ductJobMapping.getNextPageToken())) {\n            offset = Integer.parseInt(ductJobMapping.getNextPageToken());\n        }\n        Map propertie = pnpConnectionsInfo.getProperties().containsKey(\"IPAAS_PROPERTIES\") ? (Map) pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\") : pnpConnectionsInfo.getProperties();\n        if (!ObjectUtils.isEmpty(ductJobMapping.getCriteria())) {\n            Map<String, Object> fieldNameToDataTypeMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            FilterRule filterRule = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameToDataTypeMap, gsFieldsByNamesMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n            filter = DBConnectorsQueryBuilder.createQuery(filterRule, ConnectorType.SNOWFLAKE);\n            query = \"Select \" + fieldJsonPathList.stream().map(field -> \"\\\"\" + field + \"\\\" AS \" + \"\\\"\" + field + \"\\\"\").collect(Collectors.joining(\",\"))\n           ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"662a73a6-48c6-44ce-95eb-a1834c08df37","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/MSTeamsEventProcessorServiceImpl.java","startLine":34,"endLine":58,"content":"ventProcessorService{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MSTeamsEventProcessorServiceImpl.class);\n\n    private static String CLIENT_STATE = DeploymentProperties.getDeploymentProperties().getValue(\"msteams.event.validation.secret\");\n\n    private static final String SUBSCRIPTION_ID = \"subscriptionId\";\n    private static final String RESOURCE_DATA = \"resourceData\";\n    private static final String MSTEAMS_SUBSCRIPTION_ID = \"MSTEAMS_SUBSCRIPTION_ID\";\n    private static final String UUID = \"uuid\";\n    private static final String ID = \"id\";\n    private static final String WEBHOOK_EVENT_TOPIC_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.topic.name\");\n    private static final String MSTEAMS_WEBHOOK_EVENT_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.msteams.webhook.event.name\");\n    private static final String WEBHOOK_EVENT_VERSION = DeploymentProperties.getDeploymentProperties().getValue(\"events.framework.webhook.event.version\");\n    private static final List<String> MSTEAMS_TRANSCRIPT_EVENT_FIELDS = Arrays.asList(\"id\", \"type\");\n\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    public MSTeamsEventProcessorServiceImpl(PNPConnectionInfoDao pnpConnectionInfoDao) {\n        this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n    }\n\n    @Override\n    public Object handleEventFromExternalSystemForMSTeams(Object body, Map<String, String> headers) throws ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a0339c0-29bc-457c-ad3e-47b4057cdab3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":236,"endLine":245,"content":"          // createdby.<lookupfield> (field expanded from a lookup field is of type lookup),\n                        // name (field which is not expanded)\n                        if (objectToFieldDBNameToFieldDefinitionMap.get(request.getResourceName()).containsKey(fieldSplitted[0]) &&\n                                MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(objectToFieldDBNameToFieldDefinitionMap.get(request.getResourceName()).get(fieldSplitted[0]).getMeta().getOriginalDataType().toUpperCase())) {\n                            String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(request.getResourceName()).get(fieldSplitted[0]).getMeta()\n                                    .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                            if (!objectToFieldDBNameToFieldDefinitionMap.containsKey(lookedUpObjectName)) {\n                                Map<String, ObjectDefinition> expandedObjectMetaInfoDefinitionMap = service.getObjectAttributes(lookedUpObjectName, pnpConnectionsInfo, resolvePicklistOptions, request);\n                                objectToFieldDBNameToFieldDefinitionMap.put(lookedUpObjectName, expandedObjectMetaInfoDefinitionMap.get(lookedUpObjectName).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n                                objectToFieldDBNameToGSDataTypeMap.put(lookedUpObjectName, expandedObjectMetaInfoDefinitionMap.get(lookedUpObjectNa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1df25069-81c6-4a9d-b541-94473d230300","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":148,"endLine":168,"content":"                   auditDetails.setOperationType(AuditOperationType.UPDATE);\n                        if (AttributeAuditType.KEYS\n                                .equals(connectionAttributeTypeMap.get(beanPropertyTracker.getPropertyName()))) {\n                            setValues(unifiedConnectorRequest, beanPropertyTracker, auditDetails);\n                        } else {\n                            auditDetails.setOldValue(String.valueOf(beanPropertyTracker.getOldValue()));\n                            auditDetails.setNewValue(String.valueOf(beanPropertyTracker.getNewValue()));\n                        }\n                    }\n                    return auditDetails;\n                }).collect(Collectors.toList());\n        PNPConnectionsInfo pnpConnectionsInfo = (PNPConnectionsInfo) unifiedConnectorRequest.getRequestObject();\n        auditData.setAuditDetailsList(auditDetailsList);\n        auditRecord.setEventName(UCConstants.UPDATE_CONNECTION + pnpConnectionsInfo.getConnectionName());\n    }\n\n    private static void setValues(UnifiedConnectorRequest unifiedConnectorRequest,\n                                  BeanPropertyTracker beanPropertyTracker, AuditDetails auditDetails) {\n        PNPConnectionInput pConn = (PNPConnectionInput) unifiedConnectorRequest.getRequestObject();\n        if (pConn.getPnpConnectionsInfo().getConnectionType() == ConnectorType.GS_BULK_API) {\n            auditDetails.setOldValue(((BaseTokenDetail) (beanPropertyTracker.getOldValue())).getAccessKey().getSt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8cb240a5-9ff7-4735-a74b-ec8d4d4774e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":319,"endLine":353,"content":"           } else {\n                        evaluatedExpression.append(getFilterValue(rule));\n                    }\n                }\n                break;\n\n            case CONTAINS:\n                evaluatedExpression.append(\"contains\")\n                        .append(\"(\")\n                        .append(fieldName)\n                        .append(\",\")\n                        .append(\"'\");\n                if (isStringType(externalDataType) && !Objects.isNull(getFilterValue(rule))) {\n                    evaluatedExpression.append(escapeSql(String.valueOf(getFilterValue(rule))));\n                } else {\n                    evaluatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n                break;\n            case DOES_NOT_CONTAINS:\n                evaluatedExpression.append(\"not contains\")\n                        .append(\"(\")\n                        .append(fieldName)\n                        .append(\",\")\n                        .append(\"'\");\n                if (isStringType(externalDataType) && !Objects.isNull(getFilterValue(rule))) {\n                    evaluatedExpression.append(escapeSql(String.valueOf(getFilterValue(rule))));\n                } else {\n                    evaluatedExpression.append(getFilterValue(rule));\n                }\n                evaluatedExpression.append(\"'\")\n                        .append(\")\");\n                break;\n            case STARTS_WIT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cfade586-6937-4b15-8cdd-e5dfb6d11d04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/DataExtractionType.java","startLine":1,"endLine":10,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.enums;\n\npublic enum DataExtractionType {\n    BULK,\n    PAGINATED;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71e82e79-92e3-4ee4-815b-fb78751a2fd3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":145,"endLine":171,"content":"tMap);\n                LOGGER.info(\"population completed\");\n                if (null == tenantToObjectMap || tenantToObjectMap.isEmpty()) {\n                    throw new SystemException(\"Tenant to Object map is empty\");\n                }\n                LOGGER.info(\"population succeeded\");\n            } else if (cmd.hasOption(\"t\")) {\n                tenantIds.add(String.valueOf(cmd.getOptionValue(\"t\")));\n            } else if (cmd.hasOption(\"f\")) {\n                String filePath = String.valueOf(cmd.getOptionValue(\"f\"));\n                tenantIds = Files.readAllLines(Paths.get(filePath), StandardCharsets.UTF_8);\n            } else {\n                throw new SystemException(\"Incorrect Options.Please specify tenantId\");\n            }\n            if (!cmd.hasOption(\"b\"))\n                throw new SystemException(\"Please provide gs-integrations base url\");\n            if (!cmd.hasOption(\"c\"))\n                throw new SystemException(\"Please provide connector type\");\n\n            String baseUrl = String.valueOf(cmd.getOptionValue(\"b\"));\n            ConnectorType connectorType = ConnectorType.getConnectorType(String.valueOf(cmd.getOptionValue(\"c\")).toUpperCase());\n            LOGGER.info(\"connectorType: {}\", connectorType);\n            List<String> objectNames = null;\n            if (tenantToObjectMap != null && !tenantToObjectMap.isEmpty()) {\n                //Do nothing\n            } else if (!cmd.hasOption(\"o\")) {\n                if (ConnectorType.ZENDESK.equals(connectorType","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf937d9d-4005-4c20-b3e0-533e615b4e6f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":309,"endLine":332,"content":".getJobId())\n                    .fields(newDuctJobMapping.getFields())\n                    .connectionId(newDuctJobMapping.getConnectionId())\n                    .resourceName(newDuctJobMapping.getResourceName())\n                    .status(newDuctJobMapping.getDuctStatus())\n                    .build();\n        }\n    }\n\n    @Override\n    public DuctResponseDTO bulkWrite(DuctRequestDTO ductRequestDTO, File file) throws Exception {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n        basicRequestValidationForWriteback(ductRequestDTO);\n        DuctJobMapping ductJobMapping = createDuctJobMappingForBulkWrite(ductRequestDTO);\n        if (file != null) {\n            String fileName = ductJobMapping.getJobId() + \"_Input.csv\";\n            String s3UploadFilePath = \"caas\";\n            DuctS3Utility.uploadFileToS3(file, file.getName(), s3UploadFilePath + DuctConstants.FORWARD_SLASH + fileName, ductJobMapping.getJobId());\n            CaasS3FileDetails caasS3FileDetails = CaasS3FileDetails.builder().bucketName(CAAS_BUCKET_NAME).bucketRegion(AWS_REGION_NAME).filesDir(s3UploadFilePath).build();\n            CaasFileInfo caasFileInfo = CaasFileInfo.builder().fileName(fileName).fileEncoding(ENCODING).delimiter(DELIMITER).build();\n            ductJobMapping.setCaasS3FileDetails(caasS3FileDetails);\n            ductJobMapping.setCaasFileInfo(caasFileInfo);\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"62e4afbd-7813-4930-bf0b-62ab956eed2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":83,"endLine":102,"content":"ainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n        GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n\n        List<String> ignoreSystemFields = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n                .getValue(\"uc.databricks.system.fields\", \"# Partition Information,# col_name\").split(COMMA));\n        Set<Map<String, Object>> fields = gainsightDatabricksChannelService.listAllFields(objectName, ignoreSystemFields);\n\n        CaasConnectorConfig connectorConfig = caasConnectorConfigDAO.getConnectorConfig(ConnectorType.DATABRICKS);\n        List<Map<String, Object>> fieldList = fields.stream()\n                .map(field -> constructFieldMap(field, objectName, connectorConfig))\n                .filter(field -> Objects.nonNull(field))\n                .collect(Collectors.toList());\n\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectName);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(DuctConstants.DescribeMetaConstants.LABEL, objectName);\n        objectDefinition.put(DuctConstants.DescribeMetaConstants.FIELDS, fieldList);\n        List<CaasObjectAttributesConfig> config","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31079e68-f8fa-42e1-91bf-9723d13696e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesTenantConfigDAO.java","startLine":1,"endLine":14,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesTenantConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.List;\n\npublic interface CaasObjectAttributesTenantConfigDAO extends AbstractEntityDao<CaasObjectAttributesTenantConfig> {\n    List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String objectName, String tenantId);\n    List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String objectName, String tenantId, String connectionId);\n\n    List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String tenantId);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0b84388-c97e-43b7-92bb-6abd5fa19cf9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f3f7e5f-61dc-4a0d-b7c3-c4bcd6c0e1e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":390,"endLine":432,"content":"ons.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n    }\n\n    @Override\n    protected String getTaskName() {\n        return HUBSPOT_EXTRACT_TASK;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.hubspot.external.task.hubspot.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.hubspot.external.task.hubspot.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.hubspot.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping){\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    private String populateUpsertKeyForHubspot(com.gainsight.integration.bean.ColumnMapping ductColumnMapping) {\n        if (ductColumnMapping.getFieldName().equalsIgnoreCase(\"hs_object_id\")) {\n            return \"HUBSPOT_OBJECT_ID\";\n        }\n//        else if (ductColumnMapping.getIsKeyField()) {","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cb2187b-7eda-4967-b925-76185fd040e3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":260,"endLine":284,"content":"oken for project: {}\", authProjectId);\n                redisCacheUtility.clearCache(RequestContextProvider.getTenantId() + UCConstants.COLON + authProjectId);\n                redisCacheUtility.putValue(RequestContextProvider.getTenantId() + UCConstants.COLON + authProjectId, accessToken,\n                        DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.access.token.ttl.in.sec\", ACCESS_TOKEN_CACHE_EXPIRY_IN_SEC));\n            }\n        }\n        return accessToken;\n    }\n\n    private static String getAccessToken(String tenantId) {\n        GainsightPrecondition.assertTrue(StringUtils.isNotEmpty(tenantId), CaasValidationCode.INTERNAL_ERROR, CaasValidationCode.ERROR_FETCHING_ACCESS_TOKEN.getUserText());\n        String apiEndpoint = UCEnvSpecificConfigDetailUtil.getGSApiUrl() + \"/api/v1.0/b2b/token\";\n        try {\n            Map<String, String> headers = Maps.newHashMap();\n            headers.put(\"secret\", getSimpleCryptor().encrypt(GSNAP_SHARED_SECRET).getValue());\n            headers.put(\"tenantId\", tenantId);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n            return WebClient.makeRestCall(apiEndpoint, HttpMethod.GET, null, String.class, AuthenticationType.SECRET_KEY, headers);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to get AccessToken: {}\", e.getMessage(), e);\n        }\n        return null;\n    }\n\n    public static List<PNPConnectionInput> addNewSSOInstancesToConnectionList(List<InstanceMasterDetai","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7ea2095c-f97b-4dad-8a24-2eff32bd22f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":645,"endLine":668,"content":"lesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + errorFile.getName(), errorFile);\n            log.info(\"Upload completed for error file {}\", errorFile.getName());\n            ductResponse.setExternalErrorFileLocation(errorFile.getName());\n            String url = DuctS3Utility.getSignedURL(ductJobMapping.getCaasS3FileDetails().getBucketName(), 60 * 24 * 7, ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + errorFile.getName(), HttpMethod.GET).toString();\n            ductResponse.setExternalErrorFileLocationS3Link(url);\n\n            //for success file\n            log.info(\"Trying to upload success file {}\", successFile.getName());\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir() + \"/\" + successFile.getName(), successFile);\n            log.info(\"Upload completed for success file {}\", successFile.getName());\n            ductResponse.setExternalSuccessFileLocation(successFile.getName());\n        } catch (Exception e) {\n            log.error(\"Exception in writing and uploading the file\", e);\n        } finally {\n            FileUtils.deleteQuietly(errorFile);\n            FileUtils.deleteQuietly(successFile);\n\n        }\n\n    }\n\n    private Map<String, Object> getErrorDataFromHubspot(String connectionId, String fileId) {\n        try {\n            HubspotTokenDetails accessDetailsFromDB = extractAccessDet","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2500c690-3af5-4125-9edf-219984651cbd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/Zuorav2DataSourceService.java","startLine":127,"endLine":150,"content":"o);\n            ObjectDefinition objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n            Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n            Map<String, Object> fieldNameToDataTypeMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            FilterRule rules = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameToDataTypeMap, fieldNameToGsFieldDefinitionMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n            Zuorav2ChannelServiceImpl zuorav2ChannelService = new Zuorav2ChannelServiceImpl();\n            return String.format(\"SELECT %s FROM %s WHERE %s\", joiner, getZuraObjectName(ductJobMapping.getResourceName()), zuorav2ChannelService.getZuoraWhereClause(rules));\n        }\n    }\n\n    private Object getZuraObjectName(String resourceName) {\n        switch (resourceName){\n            case \"customers\":\n                return \"Account\";\n            case \"contacts\":\n                return \"Contact\";\n            case \"subscriptions\":\n                return \"Subscription\";\n            case \"invoices\":\n                return \"Invoice\";\n            case \"payments\":\n                return \"Payment\";\n            case \"products\":\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8828291-cb0c-4487-990f-ec84ae762054","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectionHelperUtils.java","startLine":73,"endLine":97,"content":"                         try {\n                                setRestAPIDecryptedBaseTokenDetail(pnpConnectionInput);\n                            } catch (Exception e) {\n                                throw e;\n                            }\n                        } else {\n                            if (pnpConnectionInput.getPnpConnectionsInfo().getConnectionType() == ConnectorType.GS_BULK_API) {\n                                boolean isTenantOauthEnabled = FeatureToggleUtil.evaluateBooleanFeature(DuctConstants.USER_OAUTH_ENABLEMENT, RequestContextProvider.getTenantId());\n                                if (!isTenantOauthEnabled || (null != pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail() && !ObjectUtils.isEmpty(pnpConnectionInput.getPnpConnectionsInfo().getTokenDetail()\n                                        .getAccessKey()))) {\n                                    setDecryptedBaseTokenDetail(pnpConnectionInput);\n                                }\n                            } else {\n                                setDecryptedBaseTokenDetail(pnpConnectionInput);\n                            }\n                        }\n                        if (Objects.equals(pnpConnectionInput.getPnpConnectionsInfo().getConnectionType(), ConnectorType.REST_API)) {\n                            setUIPropertiesForRestAPIConnections(pnpConnectionInput);\n                        }\n                        return pnpConnectionInput;\n                    }\n                });\n    }\n\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe40e826-d981-4e43-942e-74d729694607","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":331,"endLine":357,"content":"esponse.get(PARTICIPANTS_KEYWORD), new TypeReference<Map<String, Object>>() {});\n            if (ObjectUtils.isNotEmpty(participantsData.get(ORGANIZER_KEYWORD))) {\n                organizer = MAPPER.convertValue(participantsData.get(ORGANIZER_KEYWORD), new TypeReference<Map<String, Object>>() {});\n                organizer.put(HOST_KEYWORD, true);\n            }\n            if (ObjectUtils.isNotEmpty(participantsData.get(ATTENDEES_KEYWORD))) {\n                attendees = MAPPER.convertValue(participantsData.get(ATTENDEES_KEYWORD), new TypeReference<List<Map<String, Object>>>() {});\n                attendees.forEach(attendee -> attendee.put(HOST_KEYWORD, false));\n            }\n            participants.add(organizer);\n            participants.addAll(attendees);\n        }\n        externalSystemResponse.put(PARTICIPANTS_KEYWORD, participants);\n        return externalSystemResponse;\n    }\n\n    private String populateNextPageToken(Map<String, Object> externalSystemResponse) {\n        if (ObjectUtils.isNotEmpty(externalSystemResponse.get(NEXT_PAGE_URL))) {\n            String nextPageUrl = externalSystemResponse.get(NEXT_PAGE_URL).toString();\n            if (StringUtils.isNotEmpty(nextPageUrl) && nextPageUrl.contains(SKIP_TOKEN))\n                return nextPageUrl.substring(nextPageUrl.indexOf(SKIP_TOKEN));\n        }\n        return null;\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (ObjectUtils.isNotEmpty(externalSystemRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba02cae2-0790-4301-9c38-ab84de8768c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":251,"endLine":254,"content":"input values with offset to utc values\n        return zonedDateTime.format(dateTimeFormatter);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c6017b7-21f1-4024-aaeb-a7a2c5284495","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":412,"endLine":439,"content":"        filterRules.add(internalFilterRule);\n                continue;\n            }\n            internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n            filterRules.add(buildRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap,caasConnectionConfig, objectName));\n        }\n        if (baseCriteria.getDuctFilterCondition() != null)\n            filterRule.setCondition(baseCriteria.getDuctFilterCondition());\n        filterRule.setRules(filterRules);\n        return filterRule;\n    }\n\n    private FilterRule buildRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap,CaasConnectorConfig caasConnectorConfig, String objectName) {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            return createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap,caasConnectorConfig, objectName);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                childRulesList.add(buildRule(childCriteria, fieldNameDataTypeMap, fieldNameMetaMap,caasConnectorConfig, objectName));\n            }\n            FilterRule current = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private F","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e70fe885-8ffd-420a-a406-1550a9d7cb00","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GsObjectsLoadServiceImpl.java","startLine":61,"endLine":82,"content":"     headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String gsObjectsUrl =  DeploymentProperties.getDeploymentProperties().getValue(\"gs.object.base.url\"); // key change\n            String url = gsObjectsUrl + \"/v1/data/objects/Company\";\n            //check response\n            HttpResponseWrapper<ResponseObj> response = null;\n            if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                response = AdvancedHttpHelper.post(url, headers, JsonUtil.toJsonString(externalActivityRequestDto), ResponseObj.class);\n            } else if (ductJobMapping.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                url = url + \"?keys=\" + String.join(\",\", ductRequestDTO.getIdentifiers());\n                response = AdvancedHttpHelper.put(url, headers, JsonUtil.toJsonString(externalActivityRequestDto), ResponseObj.class);\n            }\n            log.info(\"Response from api call : {}, {}\", response.getStatusCode(), response.getResponseBody());\n            if (response.getStatusCode() != 200) {\n                throw new CaasException(\"Call to people service was not successful\", CaasValidationCode.CALL_TO_GAINSIGHT_MODULES_FAILED);\n            }\n            responseDTO.setData(response.getResponseBody().getData());\n        } catch (CaasException ce){\n            throw ce;\n        } catch (Exception e){\n            log.error(\"Exception occurred while writing data to Gsobjects : {}\", e);\n            throw new CaasException(\"F","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96648f49-5107-4314-acf9-03e4029ea656","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightOAuth20AccountServiceImpl.java","startLine":39,"endLine":71,"content":" LOGGER = LoggerFactory.getLogger(GainsightOAuth20AccountServiceImpl.class);\n\n    public static final CryptHandler CRYPT_HANDLER = CryptHandler.getInstance();\n\n    @Override\n    protected String getContext() {\n        return OAUTH2CALLBACK;\n    }\n\n    @Override\n    public OAuthType oauthType() {\n        return OAuthType.OAUTH_2_0;\n    }\n\n    @Override\n    public String authorizationURL(AccountType accountType, String hostUrl) {\n        OAuthDetail oAuthDetail = findOAuthDetail(accountType);\n        assertNotNull(oAuthDetail, CaasValidationCode.ACCOUNT_MISSING_APPLICATION_DETAILS, SC_BAD_REQUEST);\n        OAuthService service = accountType.getApi().createService(new OAuthConfig(CRYPT_HANDLER.decrypt(oAuthDetail.getClientId()),\n                CRYPT_HANDLER.decrypt(oAuthDetail.getClientSecret()), callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null));\n        return service.getAuthorizationUrl(null);\n    }\n\n    @Override\n    public String getAuthorizationURL(AccountType accountType, String hostUrl,String clientId, String clientSecret){\n        OAuthConfig oAuthConfig= new OAuthConfig(clientId,\n                clientSecret, callbackUrl(accountType, hostUrl), SignatureType.QueryString, null, null);\n        OAuthService service = accountType.getApi().createService(oAuthConfig);\n        return service.getAuthorizationUrl(null);\n    }\n    @Override\n    public String authorizationURL(AccountType accountType, String hostUrl, String scope) {\n        OAuthDetail oAut","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a1c42bf-62a6-4708-8d69-c76f34efa627","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":80,"endLine":102,"content":"ataEngineService;\n  private PNPConnectionInfoDao pnpConnectionInfoDao;\n  private MetadataEngineConfigDao metadataEngineConfigDao;\n  private SchemaGeneratorService schemaGeneratorService;\n  private OMDConverterFactory omdConverterFactory;\n  private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n  private CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO;\n  private AuthService authService;\n  private MetadataCacheDao metadataCacheDao;\n  private GeneratedMetadataCacheDao generatedMetadataCacheDao;\n  private MetadataGenerationDetailsDao metadataGenerationDetailsDao;\n  private final QueueProducer queueProducer;\n  private GsExternalSystemErrorMappingDao gsExternalSystemErrorMappingDao;\n  private static final String FILE_PATH = \"caas/emd\";\n  private static final String FORWARD_SLASH = \"/\";\n\n  @Autowired\n  public MetadataDriverImpl(PNPConnectionInfoDao pnpConnectionInfoDao, MetadataEngineConfigDao metadataEngineConfigDao,\n                            SchemaGeneratorService schemaGeneratorService,\n                            OMDConverterFactory omdConverterFactory, CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO,\n                            CaasObjectAttributesTenantConfigDAO caasObjectAttributesTenantConfigDAO,\n                            MetadataCacheDao metadataCacheDao, GeneratedMetadataCacheDao generatedMetadataCacheDao,\n                            MetadataGenerationDetailsDao metadataGenerationDetailsDao, QueueProducer queueProducer,","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa33d402-f68e-465e-8970-8bab86adaddd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":24,"endLine":67,"content":"integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * createdBy: snargana\n * date: 21/05/24\n */\n\n@Order(10000)\n@Service\npublic class IntercomV2ConnectionServiceImpl implements CaasConnectionService {\n\n  private static final Logger log = LoggerFactory.getLogger(IntercomV2ConnectionServiceImpl.class);\n  @Autowired\n  private MetadataEngineConfigDao metadataEngineConfigDao;\n  @Autowired\n  private OAuthClientService oAuthClientService;\n  @Autowired\n  private CaasConnectorConfigDAO caasConnectorConfigDAO;\n  @Autowired\n  private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n  private AuthService authService = new AuthServiceImpl();\n\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType) {\n    return ConnectorType.INTERCOMV2.equals(connectorType);\n  }\n\n  @Override\n  public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.getProper","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef3d5a35-7b04-402f-9a69-0a3a2a8c7056","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/AhaCaasMetadataServiceImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.metadata;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.config.CaasObjectAttributesConfig;\nimport com.gainsight.duct.dao.config.CaasObjectAttributesConfigDAO;\nimport com.gainsight.duct.utils.MetadataCommonUtil;\nimport com.gainsight.duct.processor.GainsightAhaFetchProcessor;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.aha.bean.GainsightAhaEntityDescription;\nimport com.gainsight.integration.connector.aha.bean.GainsightAhaFieldDescription;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\n\n/**\n * @author Aditya Agrawal\n * created on 22-May-2023\n * Metadata Fetch class for AHA Connector\n */\n@Order(100)\n@Service\npublic class AhaCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n\n    @Autowired\n    private GainsightAhaFetchProcessor gainsightAhaFetchProcessor;\n\n    @Autowired\n    private CaasObjectAttributesConfigDAO caasObjectAttributesCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4dd0d149-98cd-4a56-8b0f-90dff6324e30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":142,"endLine":159,"content":"fo\", HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.assertTrue((pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED) || pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED_AND_LINKED)), UCValidationCode.PNP_REVOKED_CONNECTION, \"Connection is not authorised to perform this operation !!\", HttpStatus.SC_BAD_REQUEST);\n        Map metadata = null;\n        SObjectDescription sObjectDescription;\n        try {\n            HttpResponse response = salesforceMetadataService.getSalesforceObjects(SFDCMetadataTypeEnum.OBJECT_DESCRIPTION, pnpConnectionsInfo, objectName);\n            if (null != response && response.getResponseCode() == HttpStatus.SC_OK) {\n                sObjectDescription = OBJECT_MAPPER.readValue(response.getRespMsg(), SObjectDescription.class);\n            } else {\n                LOGGER.error(\"Error occurred while fetching object description for tenant: {}\", RequestContextProvider.getTenantId());\n                if (null != response) {\n                    throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(response.getResponseCode()), String.valueOf(response.getErrorCode()), response.getRespMsg()));\n                } else {\n                    throw new CaasException(new GsExternalSystemErrorMapping(EXTERNAL_SYSTEM_ERROR_CODE_NULL, EXTERNAL_SYSTEM_ERROR_MESSAGE_NULL));\n                }\n            }\n            GainsightPrecondition.assertNotNull(sObjectDescription,\n                    UCVal","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1cefa302-3f24-4ff9-98c3-7a94310997b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":356,"endLine":381,"content":"alue = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, targetFieldName, value, fieldNameMetaMap, ignoreMetadataFieldNames, dateFormate, dateTimeFormate);\n                    value.setValue(val);\n                    fieldInfoValues.add(value);\n                }\n            } else {\n                FieldInfo value = new FieldInfo();\n                value.setFieldType(FieldType.VALUE);\n                DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, targetFieldName, value, fieldNameMetaMap, ignoreMetadataFieldNames, dateFormate, dateTimeFormate);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        filterRule.setFieldInfo(internalFieldInfo);\n        filterRule.setValues(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if (FilterOperator.INCLUDES.equals(criteria.getOperatorType()) || FilterOperator.EXCLUDES.equals(criteria.getOperatorType()))\n            filterRule.setOperatorInputs(new ArrayList<>());\n        return filterRule;\n    }\n\n    private static String createFieldNameForCriteria(String fieldName, String resourceName) {\n        if(ObjectUtils.isNotEmpty(resourceName) && fieldName.matches(\"^[0-9].*\")) { {\n                return resourceName + CUSTOM_FIEL","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc09ef7e-633c-4de0-a63b-e522dccf9604","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":148,"endLine":179,"content":"_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n    }\n\n    public static void uploadFileStreamOnS3(String key, String fileName, InputStream input, ObjectMetadata metadata, String jobId) {\n        uploadFileStreamOnS3(CAAS_BUCKET_NAME, fileName, key, input, metadata, jobId);\n    }\n\n    public static void uploadFileStreamOnS3(String bucketName, String fileName, String key, InputStream input, ObjectMetadata metadata, String jobId) {\n        try {\n            LOGGER.info(jobId, String.format(\"Uploading file on S3 @ path %s started\", key));\n            StopWatch stopWatch = new StopWatch();\n            stopWatch.start();\n            gainsightS3.write(bucketName, fileName, key, input, metadata);\n            stopWatch.stop();\n            LOGGER.info(String.format(\"Uploading file on S3 @ path %s completed in %s secs\", key, stopWatch.getTotalTimeSeconds()));\n        } finally {\n            IOUtils.closeQuietly(input);\n        }\n    }\n\n    public static InputStream downloadFileAsStreamFromS3(String key, String jobId) {\n        StopWatch stopWatch = new StopWatch();\n        LOGGER.info(String.format(\"Downloading file from S3 @ path %s started\", key));\n        stopWatch.start();\n        InputStream inputStream ;\n        if (key.contains(UCConstants.JSON) || key.contains(UCConstants.CSV)||key.contains(UCConstants.VM)) {\n            inputStream = gainsightS3.downloadFileStream(CAAS_BUCKET_NAME, key);\n        } else {\n            inpu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a154f10-e2af-4a36-85a0-e30683886621","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/HubspotCaasMetadataServiceImpl.java","startLine":25,"endLine":63,"content":"sight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.hubspot.bean.*;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang.WordUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_REQUIRED_FIELDS;\nimport static com.gainsight.duct.constants.DuctConstants.EXPRESSION_FOR_UPSERT_KEYS;\n\n/**\n * @author Aditya Agrawal\n * created on 22-May-2023\n * Metadata Fetch class for HUBSPOT Connector\n */\n\n@Order(700)\n@Service\npublic class HubspotCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotCaasMetadataServiceImpl.class);\n\n    private static final","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e178d23-15de-4ce0-8b57-bf6de830ab5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/WriteBackDynamicsQueueInfo.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n@Service\npublic class WriteBackDynamicsQueueInfo implements QueueInfo {\n    private static final DuctProcessQueue queue = DuctProcessQueue.WRITE_BACK_DYNAMICS_QUEUE;\n\n    @Override\n    public String getQueueName() {\n        return queue.getQueueName();\n    }\n\n    @Override\n    public String getTableName() {\n        return queue.getTableName();\n    }\n\n    @Override\n    public Duration getDefaultLockTime() {\n        return Duration.ofHours(3);\n    }\n\n    @Override\n    public int getDefaultTenantLimit() {\n        return 5;\n    }\n\n    @Override\n    public QueueDbMessageSplitter getMessageSplitter() {\n        MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n        return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n    }\n\n    @Override\n    public boolean maintainMessageSequencing() {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dee5832-956c-4028-85f6-e896265ad607","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":141,"endLine":162,"content":"tion gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(gsFieldDefinition.getMeta().getOriginalDataType()))) {\n\n            /*\n            For Dynamics connector all Filters are being applied on external system, hence we need to check for allowedExternalFilterOperators\n            */\n            supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping ->\n                            dataTypeMapping.getExternalDatatype().equalsIgnoreCase(gsFieldDefinition.getMeta().getOriginalDataType()))\n                    .findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n    private void validateFieldsWithSeperateLineI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77b4ef1e-b772-4192-ae7e-f4a2716b0aef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/BionicRulesDPIntegrationService.java","startLine":1,"endLine":19,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.bionicrules;\n\npublic interface BionicRulesDPIntegrationService {\n\n\n    /**\n     * Generate Encrypted MDA System Token. This token can be used to contact MDA back\n     * Uses SimpleCrypt {@link com.gainsight.cryptography.SimpleCryptor#encrypt(String)}\n     * Generates for {@link com.gainsight.enums.AuthTokenType#BIONIC_RULES_DP_SYSTEM_USER}\n     *\n     * @return {@link String} encrypted Token\n     */\n    String generateMDASystemToken();\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf0d6817-1172-4be8-a1b2-44dc8f63fdee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/ZoomEventProcessorService.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.processor;\n\nimport java.util.Map;\n\npublic interface ZoomEventProcessorService {\n    Object handleEventFromExternalSystemForZoom(Object body, Map<String, String> headers) throws Exception;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec437b86-9ee6-460b-9896-e5434ac13039","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SalesforceDataSourceService.java","startLine":138,"endLine":166,"content":"    }\n        return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(populateNextPageToken(ductJobMapping, queryOutputSize)).\n                tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId()).ductStatus(DuctStatus.SUCCESS).totalNumberOfRecords(Long.parseLong(externalSystemResponse.get(TOTAL_SIZE).toString()))\n                .jobId(ductJobMapping.getJobId()).build();\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    private String populateNextPageToken(DuctJobMapping ductJobMapping, int outputSize) {\n        if (outputSize < ductJobMapping.getLimit())\n            return null;\n        return null == ductJobMapping.getNextPageToken()\n                ? String.valueOf(ductJobMapping.getLimit())\n                : String.valueOf(ductJobMapping.getLimit() + Integer.parseInt(ductJobMapping.getNextPageToken()));\n    }\n\n\n    private String getSfdcApiVersion(PNPConnectionsInfo pnpConnectionsInfo) {\n        if (pnpConnectionsInfo.getProperties().containsKey(\"SFDC_API_VERSION\")) {\n            return pnpConnectionsInfo.getProperties().get(\"SFDC_API_VERSION\").toString();\n        } else\n            return FeatureToggleUtil.getSalesforceVersion(DeploymentProperties.getDeploymentProperties().getValue(\"uc.sfdc.api.version\", StringUtils.EMPTY));\n    }\n\n    @Override\n    public DuctResponse createData(DuctJo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c84176e-5b88-4b0e-aaf6-fd2d80a392dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":1,"endLine":31,"content":"package com.gainsight.duct;\n\n\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.MeetingDetailsRequestDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.DuctJobMappingDao;\nimport com.gainsight.duct.dao.GsExternalSystemErrorMappingDao;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.data.ConnectorDataSourceFactory;\nimport com.gainsight.duct.data.ConnectorDataSourceService;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.enums.UCValidationCode;\nimport com.gainsight.duct.metadata.CaasMetadataFactory;\nimport com.gainsight.duct.metadata.CaasMetadataService;\nimport com.gainsight.duct.proces","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3415fbf6-4d8c-4633-9b06-f7d010fbe42d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":51,"endLine":89,"content":"rt java.io.FileWriter;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils.GainsightUtils.DEPLOYMENT_PROPERTIES;\nimport static org.apache.calcite.avatica.remote.JsonService.MAPPER;\n\n@Service\n@Order(700)\n@Slf4j\npublic class HubspotDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String CARRIAGE_RETURN = \"\\n\";\n    private static final String HUBSPOT_PROPERTIES_KEYWORD_PREFIX = \"properties.\";\n    private static final String OWNER = \"OWNER\";\n    private static final String ASSOCIATIONS_PREFIX = \"associations.\";\n    private static final String HUBSPOT_EXTRACT_TASK = \"CaasHubspotExtract\";\n    private static final String RESULTS = \"results\";\n    private static final String PROPERTIES = \"properties\";\n    private static final String ARCHIVED_AT = \"archived\";\n    private static final String MESSAGE = \"message\";\n    private static final String ID = \"id\";\n\n    @Autowired\n    HubspotBulkWriteBackValidationService hubspotBulkWriteBackValidationService;\n\n    @Autowired\n    RedisCacheUtility redisCacheUtility;\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n        return connectorType == ConnectorType.HUBSPOT;\n    }\n\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        int limi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c8c5bf6-377d-4256-9936-753e2f9cfac3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":203,"endLine":234,"content":"        throw new SystemException(String.format(\"File not found on S3 @ path %s\", key));\n        }\n        return result;\n    }\n\n    public static File downloadFieldTrackingFileFromS3(String key) {\n        StopWatch stopWatch = new StopWatch();\n        LOGGER.info(\"Downloading file from S3 @ path {} started\", key);\n        File result = null;\n        stopWatch.start();\n        if (key.contains(UCConstants.JSON) || key.contains(UCConstants.CSV)) {\n            result = gainsightS3.downloadFile(DeploymentProperties.getDeploymentProperties().getValue(\"s3.field.tracking.bulk.events.bucket.name\"), key);\n        }\n        stopWatch.stop();\n        LOGGER.info(\"Downloading file on S3 @ path {} completed in {} secs\", key, stopWatch.getTotalTimeSeconds());\n        if (result == null || result.length() == 0) {\n            throw new SystemException(String.format(\"File not found on S3 @ path %s\", key));\n        }\n        return result;\n    }\n\n    public static void uploadFilesOnS3(String filePath, File file) {\n        uploadFilesOnS3(CAAS_BUCKET_NAME, filePath, file);\n    }\n\n    public static void uploadFilesOnS3(String bucketName, String filePath, File file) {\n        gainsightS3.uploadFileToS3(bucketName, filePath, file);\n    }\n\n    public static void uploadFileToS3(File convertedFile, String fileName, String s3FilePath, String jobId) throws CaasException {\n        try (FileInputStream fin = new FileInputStream(convertedFile)) {\n            uploadFileStreamOnS3V2(s3FilePath, fileName, f","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b9a519b-0e8b-4868-a399-c841ce04e8a6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZohoV2ToOMDConverterServiceImpl.java","startLine":113,"endLine":142,"content":"    populateValueIfPresent(field, MODIFIED_TIME, metaProperties, MODIFIED_TIME, String.class);\n\n                meta.put(PROPERTIES, metaProperties);\n\n                fieldDefinition.put(META, meta);\n\n                if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())) {\n                    DuctCollectionUtils.deepMerge((Map<String, Object>) fieldDefinition.get(META), dataTypeMappingsForField.getMeta());\n                }\n\n                fieldFromObjectDefinition.add(fieldDefinition);\n            }\n        } else\n            LOGGER.info(\"Fields is supposed to be an array\");\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n    }\n\n    private void populatePicklistOption(JsonNode field, Map<String, Object> fieldDefinition) {\n        if (field.get(PICKLIST_VALUES) != null) {\n            JsonNode picklistValues = field.get(PICKLIST_VALUES);\n            List<Map> picklistOptions = new ArrayList<>();\n            for (JsonNode option : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(VALUE, option.get(PICKLIST_VALUE).asText());\n                picklistOption.put(LABEL, option.get(PICKLIST_LABEL).asText());\n                if(ObjectUtils.isNotEmpty(option.get(PICKLIST_COLOR_CODE)))\n                    picklistOption.put(COLOR, option.get(PICKLIST_COLOR_CODE).asText());\n                picklistOptions.add(picklistOption);\n            }\n            fi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71ff00e3-82b9-4e2b-8d83-1afb2be6ebf6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/OMDConverterFactory.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.metadata.engine.converter;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@Slf4j\n@Component\n@RequiredArgsConstructor\npublic class OMDConverterFactory {\n    private final List<OMDConverterBaseService> converters;\n\n    public OMDConverterBaseService getService(ConnectorType connectorType) {\n        for (OMDConverterBaseService service : converters) {\n            if (service.canHandle(connectorType)) {\n                return service;\n            }\n        }\n        log.error(\"Not able to find service for {}\", connectorType);\n        throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b19bfd17-cede-4051-baa1-258a1971f7ca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":276,"endLine":300,"content":"s a breaking change or the JUnits aren't updated.\");\n            if (e instanceof SystemException) {\n                SystemException sysEx = (SystemException) e;\n                assertNotNull(sysEx, \"System Exception can't be null\");\n                assertEquals(\"Data or fields should be present\", sysEx.getMessage(), \"Incorrect Message in Exception\");\n                assertEquals(\"Data or fields should be present\", sysEx.getUiMessage(), \"Incorrect Message in Exception\");\n                assertEquals(400, sysEx.getHttpStatus(), \"Incorrect Http Status Code\");\n                assertEquals(CoreErrorCode.INVALID_PARAMETER, sysEx.getErrorCode(), \"Incorrect Error Code\");\n            }\n        }\n    }\n\n    @Test\n    public void saveMappping_sync_request() throws CaasException {\n        DateTime dateTime = new DateTime();\n        int limit = 5, totalNumberOfRecords = 5;\n        DuctRequestDTO ductRequestDTO = createDuctRequestDTO(true, dateTime, 5, false);\n        AtomicReference<DuctJobMapping> ductJobMappingAtomicReference = new AtomicReference<>(new DuctJobMapping());\n        boolean passed = false;\n        DuctResponseDTO ductResponseDTO = null;\n        PNPConnectionsInfo pnpConnectionsInfo = generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED);\n        try {\n            doReturn(pnpConnectionsInfo).when(pnpConnectionInfoDao).findByConnectionId(any());\n            doReturn(true).when(ductValidationService).validateRequest(any());\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9a7ef7a3-0576-479b-94c3-fe399c73c024","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":68,"endLine":101,"content":"tPath().equalsIgnoreCase(\"/error\")){\n            return true;\n        }\n        request.setAttribute(REQUEST_START_TIME_ATT, System.currentTimeMillis());\n        String requestId = request.getHeader(Constants.X_REQUEST_ID);\n        //Set the request-id for unauthenticated  requests too.\n        if (StringUtils.isNotBlank(requestId)) {\n            MDC.put(Constants.REQUEST_ID, requestId);\n        }\n\n        String secret = request.getHeader(\"secret\");\n        String secureCode = request.getHeader(\"security_code\");\n        boolean secretVerified = true;\n        if (StringUtils.isNotBlank(secret)) {\n            KeyPair kp = keystore.getHighestKey(KeyType.DEFAULT);\n            secret = CryptUtil.getSimpleCryptor().decrypt(kp, secret);\n            if (!SECRET.equals(secret)) {\n                String message =\n                        \"Provided shared secret is not valid. secret: \" + secret + \", IP: \" + getIPAddress(request);\n                return setErrorResponse(request, response, message);\n            }\n        } else if (StringUtils.isNotBlank(secureCode)) {\n            if (!secureCode.equals(SECURE_CODE)) {\n                String message =\n                        \"Provided shared secret is not valid. secret: \" + secret + \", IP: \" + getIPAddress(request);\n                return setErrorResponse(request, response, message);\n            }\n        } else {\n            secretVerified = false;\n        }\n\n        try {\n            RequestInfo requestInfo = null;\n            boolean e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec6930d3-aa2d-402e-9b3e-6743fd9d3761","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataCacheDao.java","startLine":1,"endLine":8,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\n\npublic interface MetadataCacheDao extends AbstractEntityDao<MetadataCache> {\n    MetadataCache getMetadataByConnectionIdAndObjectName(String connectionId, String objectName);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f5d03b2-e4c1-4260-a7cd-ac4c9a5fed70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":774,"endLine":797,"content":"tConnectionType());\n\n        return getSynchronizedQueryApiResponse(ductJobMapping, pnpConnectionsInfo, objectDefinitionMap.get(ductRequestDTO.getResourceName()), useEngine);\n    }\n\n    @Override\n    public QueryAPIResponseBean getSynchronizedDataFromExternalSystem(DuctRequestDTO ductRequestDTO) throws Exception {\n        return getSynchronizedDataFromExternalSystem(null, ductRequestDTO);\n    }\n\n    @Override\n    public QueryAPIResponseBean getSynchronizedDataFromExternalSystem(String recordId, DuctRequestDTO ductRequestDTO) throws\n            CaasException {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Missing Connectioninfo\", HttpStatus.SC_BAD_REQUEST);\n            ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            LOGGER.info(\"Received request for Sync Data Fetch for connectionId : {} , connectorType : {}\", pnpConnectionsInfo.getConnectionId(),\n                    pnpConnectionsInfo.getConnectionType());\n            validateMappings(ductRequestDTO);\n\n            DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"307275a4-754a-4f17-bfc0-5e7a6536f800","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":211,"endLine":249,"content":"e()).ductStatus(DuctStatus.SUCCESS)\n          .totalNumberOfRecords(populateTotalNumberOfRecords(res)).externalResourceName(ductJobMapping.getResourceName())\n          .jobId(ductJobMapping.getJobId()).build();\n    } catch (SQLException e) {\n      log.error(\"SQLException while fetching data\", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n    } catch (Exception e) {\n      log.error(\"Exception while fetch data\", e);\n      throw new CaasException(new GsExternalSystemErrorMapping(\"500\", \"INTERNAL_SERVER_ERROR\", e.getMessage()));\n    }\n  }\n\n  private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n    if (externalSystemResponse.get(\"total\") != null) {\n      return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n    }\n    return 0;\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n    return null;\n  }\n\n  @Override\n  public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n\n    Map<String, Object> r","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3e30585d-05e0-4636-bf63-e059032ca44e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/UCCommonAppConfiguration.java","startLine":1,"endLine":34,"content":"package com.gainsight.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.database.HAPostgresDatabaseTemplate;\nimport com.gainsight.database.HAPostgresDatabaseTemplateServiceImpl;\nimport com.gainsight.executor.GainsightExecutorService;\nimport com.gainsight.executor.GainsightExecutorServiceImpl;\nimport com.gainsight.duct.utils.UCJsonUtils;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.FilterType;\n\n@Configuration\n@ComponentScan(basePackages = {\"com.gainsight.duct\", \"com.gainsight.database\", \"com.gainsight.dao\", \"com.gainsight.message\",\n        \"com.gainsight.resiliency\", \"com.gainsight.file\", \"com.gainsight.service\", \"com.gainsight.dao.picklist\",\n        \"com.gainsight.account\", \"com.gainsight.web\", \"com.gainsight.message.dispatch\", \"com.gainsight.message.service\"},\n        excludeFilters = {@ComponentScan.Filter(type = FilterType.REGEX, pattern = {\"com.gainsight.web.filter.*\"})})\npublic class UCCommonAppConfiguration {\n\n\n    @Bean\n    public GainsightExecutorService gainsightExecutorService() {\n        return new GainsightExecutorServiceImpl();\n    }\n\n    @Bean\n    public SpringServiceLocatorFactory ucSpringServiceLocatorFactory() {\n        return new SpringServiceLocatorFactory();\n    }\n\n    @Bean\n    public HAPostgresD","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"875e9108-6810-4d02-83f3-27d74b757c32","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":1,"endLine":40,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.GSFieldMeta;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonNull;\nimport com.google.gson.JsonObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\n/**\n * @author puneetsaluja\n * @created 16/03/23\n */\n@Slf4j\npublic class DuctCollectionUtils {\n    public static void deepMerge(Map<String, Object> map1, Map<String, Object> map2) {\n        for (String key : map2.keySet()) {\n            Object value2 = map2.get(key);\n            if (map1.containsKey(key)) {\n                Object value1 = map1.get(key);\n                if (value1 instanceof Map && value2 instanceof Map)\n                    deepMerge((Map<String, Object>) value1, (Map<String, Object>) value2);\n                else if (value1 instanceof List && value2 instanceof List)\n                    map1.put(key, merge((List) value1, (List) value2));\n                else map1.put(key, value2);\n    ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f568aba3-aa0e-4b96-bafb-a02079e354e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":394,"endLine":410,"content":" = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        Map<String, ObjectDefinition> attributesMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n        ObjectDefinition objectDefinition = attributesMap.get(ductJobMapping.getResourceName());\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields();\n        Map<String, Object> fieldNameDataTypeMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n        Map<String, GSFieldDefinition> fieldNameMetaMap = fieldDefinitions.stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, fieldDefinition -> fieldDefinition));\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getCriteria())) {\n            validateIsExternalFilterable(ductJobMapping, fieldNameMetaMap);\n        }\n        ConnectorDataSourceService dataSourceService = connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n        caaSExtractDetails = dataSourceService.getExtractTask(ductJobMapping, fieldNameDataTypeMap, fieldNameMetaMap, ductRequestDTO.getFieldNameToFieldAlias());\n        InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n        return caaSExtractDetails;\n    }\n\n    @Override\n    public Map<String, Object> createExtractTaskWithJarDetails(DuctRequestDTO ductRequestDTO, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"41f699fa-d5c5-4348-815e-b72a4c2b5e8e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":358,"endLine":389,"content":"getConnectionId(connectionId);\n        DuctUtils.validateConnection(connectionsInfo);\n        List<Map<String, Object>> fileDetailsList = new ArrayList<>();\n\n        switch (connectionsInfo.getConnectionType()) {\n            case HUBSPOT:\n                GainsightHubspotFetchService gainsightHubspotFetchService = new GainsightHubspotFetchServiceImpl();\n\n                String clientId = connectionsInfo.getTokenDetail().getClientId().getString();\n                String clientSecret = connectionsInfo.getTokenDetail().getClientSecret().getString();\n                String refreshToken = CryptHandler.getInstance().decrypt(connectionsInfo.getTokenDetail().getRefreshToken());\n\n                fileIds.forEach(fileId -> {\n                    fileDetailsList.add(gainsightHubspotFetchService.getFileMetadata(clientId,\n                            clientSecret,\n                            refreshToken,\n                            fileId,\n                            signedUrl));\n                });\n                break;\n            default:\n                log.error(\"Unsupported connector type\");\n        }\n        return fileDetailsList;\n    }\n\n    @Override\n    public Object fetchMeetingDetails(MeetingDetailsRequestDTO meetingDetailsRequestDTO) throws Exception {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(meetingDetailsRequestDTO.getConnectionId());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n\n        GainsightPrecondition.assertN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7873a0ec-dcb2-4a2c-9629-63e7c150c2a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/MSTeamsValidationDataSourceService.java","startLine":30,"endLine":53,"content":"sException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilterOperations(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap = objectDefinition.getFields().stream().collect(Collectors.toMap(gsFieldDefinition -> gsFieldDefinition.getFieldName(), gsFieldDefinition -> gsFieldDefinition));\n        if (ductRequestDTO.getCriteria() != null) {\n            checkForFieldOperationSupported(ductRequestDTO.getCriteria(), fieldNameToGsFieldDefinitionMap, caasConnectorConfig, ductRequestDTO.getIsSynchronized());\n        }\n    }\n\n    public static void checkForFieldOperationSupported(Criteria criteria, Map<String, GSFieldDefinition> fieldNameToGsFieldDefinitionMap, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                fo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"175155ed-52ff-4389-a67a-666451ca0aaf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":471,"endLine":505,"content":" StopWatch stopWatch = new StopWatch();\n        log.info(\"Downloading file from S3 @ path {} started\", key);\n        File result = null;\n        stopWatch.start();\n        S3Object s3Object;\n        if (key.contains(UCConstants.JSON) || key.contains(UCConstants.CSV)) {\n            s3Object = amazonS3.getObject(PNP_BUCKET_NAME, key);\n        } else {\n            s3Object = amazonS3.getObject(PNP_BUCKET_NAME, key + UCConstants.JSON);\n        }\n        stopWatch.stop();\n        log.info(\"Downloading file on S3 @ path {} completed in {} secs\", key, stopWatch.getTotalTimeSeconds());\n        if (s3Object != null && s3Object.getObjectMetadata().getContentLength() > 0) {\n            try {\n                result = writeDataToLocalFile(s3Object.getObjectContent());\n            } catch (IOException e) {\n                log.error(String.format(\"Unable to download File from S3 @path : %s\", key), e);\n            } finally {\n                try {\n                    s3Object.close();\n                } catch (IOException e) {\n                    log.error(String.format(\"Unable to download File from S3 @path : %s\", key), e);\n                }\n            }\n        }\n        return result;\n    }\n\n    public static File writeDataToLocalFile(InputStream inputStream) throws IOException {\n        File localFile = File.createTempFile(UUID.randomUUID().toString(), \".segmentio.tmp\");\n        FileUtils.copyInputStreamToFile(inputStream, localFile);\n        return localFile;\n    }\n\n    private void val","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89103a9f-4850-466d-91b3-e4b3961ad5ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/common/aha/AhaCaasCriteriaBuilder.java","startLine":29,"endLine":54,"content":"ule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        for (Criteria criteria : baseCriteria.getFilters()) {\n            FilterRule internalFilterRule = new FilterRule();\n            if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n                //handle if there is only one filter\n                internalFilterRule = createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap);\n                filterRules.add(internalFilterRule);\n                continue;\n            }\n            internalFilterRule.setCondition(criteria.getDuctFilterCondition());\n            filterRules.add(buildRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap));\n        }\n        if (baseCriteria.getDuctFilterCondition() != null)\n            filterRule.setCondition(baseCriteria.getDuctFilterCondition());\n        filterRule.setRules(filterRules);\n        return filterRule;\n    }\n\n\n    public static FilterRule buildRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        if (Objects.isNull(criteria.getDuctFilterCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(criteria.getFilters())) {\n            return createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Cr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc8f75bc-1bc5-4bff-83be-e0586a93569d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/UCCommonAppConfiguration.java","startLine":25,"endLine":43,"content":"ecutorServiceImpl();\n    }\n\n    @Bean\n    public SpringServiceLocatorFactory ucSpringServiceLocatorFactory() {\n        return new SpringServiceLocatorFactory();\n    }\n\n    @Bean\n    public HAPostgresDatabaseTemplate haPostgresDatabaseTemplate() {\n        return new HAPostgresDatabaseTemplateServiceImpl();\n    }\n\n    @Bean\n    public UCJsonUtils jsonUtils(ObjectMapper mapper) {\n        return UCJsonUtils.getInstance(mapper);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bd6ac24-e00e-4b53-ac8a-9c825385ff8c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":424,"endLine":444,"content":"    public static boolean checkIfIpaasAndFTEnabled(PNPConnectionsInfo pnpConnectionsInfo) {\n        if (!IPAAS_CONNECTORS.contains(pnpConnectionsInfo.getConnectionType()))\n            return true;\n        String featureToggleName = pnpConnectionsInfo.getConnectionType().name() + \"_CAAS_NATIVE_ENABLED\";\n        return FeatureToggleUtil.evaluateBooleanFeature(featureToggleName, RequestContextProvider.getTenantId());\n    }\n\n    public static Map<String, Object> getFlattenConnectionInfoWithOAuthAndCallbackUrl(OAuthDetail oAuthDetail,\n                                                                                      CaasConnectorConfig caasConnectorConfig,\n                                                                                      PNPConnectionsInfo pnpConnectionsInfo,\n                                                                                      String code, String state) throws Exception {\n        Map<String, Object> flattenConnectionInfo = new HashMap<>();\n        flattenConnectionInfo.putAll(DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo));\n        if (oAuthDetail != null)\n            flattenConnectionInfo.putAll(DuctUtils.getFlattenedConnectionInfo(oAuthDetail));\n        if (code != null)\n            flattenConnectionInfo.put(\"code\", code);\n        flattenConnectionInfo.put(\"callBackUrl\", getCallbackAuthUrl(caasConnectorConfig, pnpConnectionsInfo));\n        if (state != null)\n            flattenConnectionInfo.put(\"state\", state);\n        return fl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48a2c1ca-dee4-4ea9-94b3-f5072767e496","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":74,"endLine":103,"content":"  }\n                    //no vds entries\n                    else {\n                        Map<String, Object> record = new HashMap<>();\n                        for (GSFieldDefinition fieldInfo : projections) {\n                            String[] path = fieldInfo.getDbName().split(\"\\\\.\");\n                            if (path[0].equalsIgnoreCase(VDS)) {\n                                continue;\n                            }\n                            insertOrAppend(fieldInfo, documentObject, path, record);\n                        }\n                        //parseDateTimeValues(record, projections); //todo : check this with more cases\n                        records.add(record);\n                    }\n                });\n            }\n        } catch (Exception e) {\n            log.error(\"Exception occurred while parsing Ecosystem JSON response to temp file : \", e);\n            throw new RuntimeException(\"Exception occurred while parsing Ecosystem JSON response to temp file : \", e);\n        }\n        ecosystemResponse.setTransformedRecords(records);\n        int totalCount = jsonObject.get(\"totalCount\").getAsJsonPrimitive().getAsInt();\n        int limit = jsonObject.get(\"limit\").getAsJsonPrimitive().getAsInt();\n        if (limit < totalCount) {\n            ecosystemResponse.setNextPageToken(String.valueOf(limit));\n        }\n        return ecosystemResponse;\n    }\n\n    private static void insertOrAppend(GSFieldDefinition fieldInfo, JsonObject documentObject, String[] path, Map<","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f5d3f10f-384f-4184-9f89-f9952e4c563d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PipedriveV2DataSourceService.java","startLine":148,"endLine":169,"content":"ttpClientForDataRequest(connectorConfigByObjectName,\n                    apiConfigAttributes, ductJobMapping.getResourceName(), pnpConnectionsInfo, ductJobMapping.getCriteria(), flattenedConnectionInfo, paginationInfo, queryparam);\n            jsonNode = metadataEngineService.executeApi(httpClient, null, connectorConfigByObjectName.getRateLimitDetails(), false);\n\n            JsonNode data = jsonNode.get(apiConfigAttributes.getResponseRootKey());\n\n            externalSystemResponse.put(DATA, data);\n\n            String nextPageToken = populatePaginationDetails(jsonNode, paginationDetails, paginationInfo);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).nextPageToken(nextPageToken).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasExce","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"feba208b-7e7e-43cd-a2c1-b9d874950a78","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CustomerGoalsLoadServiceImpl.java","startLine":40,"endLine":61,"content":"verride\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException {\n        DuctResponseDTO responseDTO = new DuctResponseDTO();\n        try {\n            log.info(\"Creating payload for customer goals\");\n            ExternalDataRequestDto requestDto = new ExternalDataRequestDto();\n            requestDto.setLookups(ductRequestDTO.getLookups());\n            requestDto.setRequests(Collections.singletonList(Collections.singletonMap(\"record\", ductRequestDTO.getRecords().get(0))));\n            GSDTOTransformer.transformExternalDataRequestDto(requestDto);\n            log.info(\"Payload for job {} is {}\", ductJobMapping.getJobId(), requestDto);\n\n            Map<String, String> headers = new HashMap<>();\n            String secret = getSimpleCryptor().encrypt(DeploymentProperties.getDeploymentProperties().getValue(DuctConstants.SECRET_KEY)).getValue();\n            headers.put(\"requestInfo\", RequestContextProvider.getEncryptedRequestInfo(true));\n           // headers.put(\"authToken\", getJwtToken());\n            headers.put(\"secret\", secret);\n            headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n\n            String endPoint = DeploymentProperties.getDeploymentProperties().getValue(\"csgoals.api.base.url\");\n            endPoint = endPoint + \"/csgoal/external/create\";\n\n            HttpResponseWrapper<ResponseObj> response = AdvancedHttpHelper.post(endPoint, headers, JsonUtil.toJsonString(requestDto), ResponseObj.class);\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82275f22-4649-4bba-8f63-f8259862267e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":112,"endLine":134,"content":"ructFieldMap(field, objectName, connectorConfig))\n        .filter(field -> Objects.nonNull(field))\n        .collect(Collectors.toList());\n\n    Map<String, Object> objectDefinition = new HashMap<>();\n    objectDefinition.put(OBJECT_ID, objectName);\n    objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n    objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n    objectDefinition.put(DuctConstants.DescribeMetaConstants.LABEL, objectName);\n    objectDefinition.put(DuctConstants.DescribeMetaConstants.FIELDS, fieldList);\n    List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n    MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, objectDefinition);\n    return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(objectDefinition, ObjectDefinition.class));\n  }\n\n  private Map<String, Object> constructFieldMap(Map<String, Object> fieldDetails, String objectName, CaasConnectorConfig connectorConfig) {\n    Map<String, Object> retMap = new HashMap<>();\n    Map<String, Object> meta = Maps.newHashMap();\n    Map<String, Object> metaProperties = new HashMap<>();\n    String fieldDataType = String.valueOf(fieldDetails.get(DATA_TYPE_NAME)).toLowerCase();\n    retMap.put(FIELD_NAME, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n    retMap.put(DB_NAME, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n    retMa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0f483f5-9a1e-4650-8368-0ca172a55a9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":77,"endLine":106,"content":"\n                break;\n            case \"datetime\":\n            case \"dateTime\":\n                dataType = DataType.DATETIME;\n                if (gsFieldMeta.getProperties() != null && gsFieldMeta.getProperties().containsKey(FORMAT))\n                    fieldInfo.setDateTimeProperties(\n                            new DateTimeProperties(gsFieldMeta.getProperties().get(FORMAT).toString(), \"UTC\"));\n                else{\n                    String dateTimeFormat = dateTimeFormate != null ? dateTimeFormate : \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n                    fieldInfo.setDateTimeProperties(\n                            new DateTimeProperties(dateTimeFormat, \"UTC\"));\n                }\n                break;\n            case \"timestamp\":\n                dataType = DataType.TIMESTAMP;\n                break;\n\n            default:\n                dataType = DataType.STRING;\n        }\n        fieldInfo.setDataType(dataType);\n    }\n\n    public static FilterRule getFilterRuleFromCAASCriteria(Criteria baseCriteria, Map<String, Object> fieldNameGSDataTypeMap,\n                                                           Map<String, GSFieldDefinition> fieldNameMetaMap, List<String> ignoreMetadataFieldNames,CaasConnectorConfig caasConnectorConfig, String objectName) {\n        FilterRule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        if (baseCriteria.getFilters() != null && !baseCriteria.getFilters().isEmpty()) {\n            for (Criteria cri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"904165cb-1984-4e02-a862-e2e5d461ec2a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":686,"endLine":698,"content":"360);\n        log.info(\"Poll count is {}, for prop {} \", count, propName);\n        return count;\n    }\n\n    protected int pollDelaySeconds() {\n        String propName = \"duct.hubspot.wb.poll.delay.seconds\";\n        int delay =\n                DEPLOYMENT_PROPERTIES.getIntegerValue(propName, 30);\n        log.info(\"Poll delay is {} seconds, for prop {} \", delay, propName);\n        return delay;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"316bee89-6ab8-42d6-98d6-413ac1a8e3c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":28,"endLine":65,"content":"import com.gainsight.duct.dh.ConnectorsDataHighwayResponseHandler;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.utils.DuctS3Utility;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.BaseTenantMasterService;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.google.common.collect.Maps;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVWriter;\nimport com.opencsv.ICSVParser;\nimport com.opencsv.ICSVWriter;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.joda.time.DateTime;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport static com.gainsight.duct.constants.DuctConstants.CUSTOM_FIELD_PREFIX;\n\n@Service\n@Slf4j\npublic class","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7d407b7c-f6e9-44d5-9bb5-9b8be13cf313","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":501,"endLine":525,"content":"oad, DuctResponse ductResponse, DuctJobMapping ductJobMapping, List<File> successfulFiles, List<File> failedFiles, AtomicReference<Long> failedRecords, Long totalRecords) {\n    File mergedFile = null;\n    try {\n      switch (statusOfTheLoad) {\n        case COMPLETED:\n          ductResponse.setExternalSuccessFileLocation(ductJobMapping.getCaasFileInfo().getFileName());\n          break;\n        case FAILED:\n          if ((failedFiles.size() == 1)) {\n            ductResponse.setExternalErrorFileLocation(ductJobMapping.getCaasFileInfo().getFileName());\n          } else if (failedFiles.size() > 0) {\n            mergedFile = new File(GainsightUtils.getRandomUUID() + \"_failure.csv\");\n            FileMerger.mergeFiles(failedFiles, mergedFile);\n            DuctS3Utility.uploadFilesOnS3(ductJobMapping.getCaasS3FileDetails().getBucketName(), ductJobMapping.getCaasS3FileDetails().getFilesDir()\n                    + UCConstants.FORWARD_SLASH + mergedFile.getName(), mergedFile);\n            ductResponse.setExternalErrorFileLocation(mergedFile.getName());\n            failedRecords.set(failedRecords.get() + UCFileUtility.getRecordCount(mergedFile));\n            totalRecords += failedRecords.get();\n          }\n          break;\n        case PARTIAL_SUCCESS:\n          if (successfulFiles.size() > 0) {\n            mergedFile = new File(GainsightUtils.getRandomUUID() + \"_success.csv\");\n            FileMerger.mergeFiles(successfulFiles, mergedFile);\n            DuctS3Utility.uploadFilesOnS3(ductJo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"849f81ab-7a8a-41a8-9433-fe5995a938b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":172,"endLine":192,"content":"           return false;\n                        } else {\n                            return true;\n                        }\n                    })\n                    .collect(Collectors.toList()));\n            metadata = constructSfdcObjectDefinition(objectDetails, objectName, pnpConnectionsInfo);\n            List<CaasObjectAttributesConfig> configAttributes = GainsightCollectionUtils.nullSafeList(caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName));\n            MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n        } catch (Exception e) {\n            LOGGER.error(\"Error while fetching sfdc fields\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, \"Error occurred while fetching attributes for tenant: {}\"));\n        }\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class));\n    }\n\n    private Map constructSfdcObjectDefinition(SfdcObjectDetails sfdcObjectDetails, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.SFDC);\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYP","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ebd7812-466e-4aa4-80f9-734992856d5f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":138,"endLine":160,"content":"\" + connectionStatus);\n                assertNull(gsExternalSystemErrorMapping.getExceptionStackTrace(), \"Stack trace should be null when connection status is \" + connectionStatus);\n                assertNull(gsExternalSystemErrorMapping.getJobId(), \"jobId should be null when connection status is \" + connectionStatus);\n                assertEquals(\"Connection is not authorized\", gsExternalSystemErrorMapping.getMessage(), \"Wrong message passed in exception when connection status is \" + connectionStatus);\n            }\n        }\n    }\n\n    @Test\n    public void saveMapping_test_invalid_connector_type() {\n        boolean passed = false;\n        GsExternalSystemErrorMapping gsExternalSystemErrorMapping = null;\n        ConnectorType connectorType = ConnectorType.SFDC;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(generatePNPConnectionsInfo(connectorType, \"Hubspot Test\", ConnectionStatus.REVOKED));\n            ductJobMappingService.synchronousInsert(createDuctRequestDTO(true, new DateTime(), 5, false));\n        } catch (CaasException ex) {\n            gsExternalSystemErrorMapping = ex.getGsExternalSystemErrorMapping();\n            passed = true;\n        } finally {\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n            assertEquals(CaasValidationCode.INVALID_CONNECTOR_TYPE.getGsEventCode(), gsExternalSystemErrorMapping.getGsErrorCode","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d6502a22-9cca-48fe-a3e1-e835f29340a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/VersionConstants.java","startLine":1,"endLine":17,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.constants;\n\n/**\n * Created by swatantra\n * on 04/09/14.\n */\npublic class VersionConstants {\n    public static final String NONE = \"None\";\n    public static final String V1_0 = \"v1.0\";\n    public static final String V2_0 = \"v2.0\";\n    public static final String V1 = \"v1\";\n    public static final String V2 = \"v2\";\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"025d0f2b-129f-4bc1-942b-e9784210eade","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DynamicsCaasMetadataServiceImpl.java","startLine":115,"endLine":135,"content":"           DuctJobMapping ductJobMapping) throws CaasException {\n        LOGGER.info(\"Starting attributes fetch for object: {}, connection: {}\", objectName, pnpConnectionsInfo.getConnectionId());\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Map<String, Object> extractedData;\n        try {\n            DynamicsGainsightUtils.setDynamicsCtx(pnpConnectionsInfo);\n            extractedData = msDynamicsSchemaService.extractMetadata(new MSDynamicsObjectQuery().logicalName(objectName), true,\n                    resolvePicklistOptions, ductJobMapping.getFields());\n            Map<String,Object> copiedExtractedData = deepCopy(extractedData);\n            GainsightCollectionUtils.nullSafeMap(ductJobMapping.getProperties()).putIfAbsent(DuctConstants.DYNAMICS_RAW_META_DATA, copiedExtractedData);\n        } catch (SystemException exception) {\n            if ((null != exception.getErrorCode()) && exception.getErrorCode().equals(DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND)) {\n                DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n            }\n            throw exception;\n        }\n        stopWatch.stop();\n        LOGGER.info(\"completed attributes fetch for object: {}, connection: {} in: {} MS\", objectName, pnpConnectionsInfo.getConnectionId(), stopWatch.getTime(TimeUnit.MILLISECONDS));\n\n        CaasConnector","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ef3c76f-839e-4113-b54d-94b9dd6c82b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/PipedriveV2ConnectionService.java","startLine":24,"endLine":61,"content":"com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.service.OAuthClientService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Order(11000)\n@Service\npublic class PipedriveV2ConnectionService implements CaasConnectionService {\n\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n    @Autowired\n    private OAuthClientService oAuthClientService;\n    @Autowired\n    private CaasConnectorConfigDAO caasConnectorConfigDAO;\n    @Autowired\n    private GainsightAccountServiceFactory gainsightAccountServiceFactory;\n    private AuthService authService = new AuthServiceImpl();\n    private static final Logger LOGGER = LoggerFactory.getLogger(ZendeskConnectionService.class);\n\n    @Override\n    public boolean canHandle(ConnectorType connectorType) {\n        return ConnectorType.PIPEDRIVEV2.equals(connectorType);\n    }\n\n    @Override\n    public PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        pnpConnectionsInfo.setProperties(pnpConnectionInput.getProperties());\n        pnpConnectionsInfo.setIpaasConnection(false);\n        pnpConnectionsInfo.setAuthorizationType(AuthorizationType.O","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d66c1730-604d-4823-84e7-c94007a1f610","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":250,"endLine":284,"content":"       failedTenants));\n        }\n    }\n\n    private void readFilePopulateMap(String tenantToObjectMapFilePath, Map<String, List<String>> tenantToObjectMap) {\n        // Read the file and populate the map\n        try (BufferedReader br = new BufferedReader(new FileReader(tenantToObjectMapFilePath))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                // Split the line into key and value parts\n                int colonIndex = line.indexOf(':');\n                if (colonIndex != -1) {\n                    String key = line.substring(0, colonIndex);\n                    String value = line.substring(colonIndex + 1);\n\n                    // Remove the brackets and split the value part\n                    value = value.replace(\"[\", \"\").replace(\"]\", \"\");\n                    String[] values = value.split(\",\");\n\n                    // Convert the array to a list\n                    List<String> valueList = new ArrayList<>();\n                    for (String v : values) {\n                        valueList.add(v.trim()); // Trim to remove extra spaces\n                    }\n\n                    // Put the key and list into the map\n                    tenantToObjectMap.put(key, valueList);\n                }\n            }\n        } catch (IOException ex) {\n            LOGGER.error(\"Exception occurred: {}\", ex.getMessage(), ex);\n        }\n    }\n\n    private void initializeComparison(String tenantId, ICSVWriter icsvOutWriter, String baseUrl, Connecto","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ee10afc1-2a4b-45be-9422-3ecc556caf28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":191,"endLine":211,"content":" = extractAccessDetails(ductJobMapping.getConnectionId());\n            GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken()));\n            response = fetchService.createSingleData(ductJobMapping.getResourceName(),\n                    accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken(),\n                    accessDetailsFromDB.getAccessToken(), ductJobMapping.getData());\n            finalResponse = extractResponse(response);\n            if (response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 201) {\n                finalResponse.remove(PROPERTIES);\n                finalResponse.remove(ARCHIVED_AT);\n            }\n            if (response.getStatusLine().getStatusCode() != 200 && response.getStatusLine().getStatusCode() != 201) {\n                throw new CaasException(getDuctResponse(ductJobMapping, response, finalResponse));\n            }\n        } catch (CaasException e) {\n            log.error(\"Exception in createData \", e);\n            throw e;\n        } catch (Exception e) {\n            log.error(\"Exception in createData \", e);\n  ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7c087a6-bc16-4ad1-8f22-5ea92eb80e59","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/CEQueryBuilder.java","startLine":32,"endLine":56,"content":"le, StringBuilder stringBuilder) throws UnsupportedEncodingException {\n        List<String> whereClauses = Lists.newArrayList();\n        for (FilterRule rule : filterRule.getRules()) {\n            whereClauses.addAll(buildRule(rule));\n        }\n        String joiner =\n                filterRule.getCondition() != null\n                        ? filterRule.getCondition().getFilterCondition() + URLEncoder.encode(SPACE, \"UTF-8\")\n                        : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses).replaceAll(\"\\\\+\", \"%20\");\n    }\n\n\n    private static List<String> buildRule(FilterRule rule) throws UnsupportedEncodingException {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(URLEncoder.encode(rule.getFieldInfo().getJsonPath(), \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(Operators.getExternaSystemOperator(rule.getOp()), \"UTF-8\"));\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            stringBuilder.append(\"'\");\n            stringBuilder.append(URLEncoder.encode(rule.getValues().get(0).getValue().toString(), \"UTF-8\"));\n            stringBuilder.append(\"'\");\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"))","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20f579da-2147-4b91-a720-efb695e2c87d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/transformer/ExternalToGsObjectDefinitionTransformer.java","startLine":55,"endLine":67,"content":"ts.CREATEABLE, false)) {\n                    objectDefinition.setCreateable(true);\n                }\n            }\n            if (Objects.nonNull(objectMap.get(DuctConstants.DescribeMetaConstants.SOURCE))) {\n                objectDefinition.setSource(objectMap.get(DuctConstants.DescribeMetaConstants.SOURCE).toString());\n            }\n\n            objectDefinitions.add(objectDefinition);\n        }\n        return objectDefinitions;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d2080e3-6b2e-4a49-91cd-f9d7e304cd50","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/PeopleLoadServiceImpl.java","startLine":1,"endLine":44,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.JsonUtil;\nimport com.gainsight.web.client.AdvancedHttpHelper;\nimport com.gainsight.web.client.HttpResponseWrapper;\nimport com.google.common.collect.Sets;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport utils.ResponseObj;\n\nimport javax.ws.rs.core.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static com.gainsight.cryptography.CryptUtil.getSimpleCryptor;\n\n@Service\n@Slf4j\npublic class PeopleLoadServiceImpl implements GainsightLoadService{\n\n    private static final Set<String> PERSON_ALLOWED_OBJECTS = Sets.newHashSet(\"person\",\n            \"company_person\", \"relationship_person\");\n    @Override\n    public GSModule getType() {\n        return GSModule.PEOPLE;\n    }\n\n    @Override\n    public boolean canHandle(String resource) {\n        return PERSON_ALLOWED_OBJECTS.contains(resource.toLowerCase());\n    }\n\n    @Override\n    public DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequest","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48f42c24-4aa7-46c2-9ca1-7290cbf9a19d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":123,"endLine":141,"content":"sumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                                               @ApiParam(value = \"Force refresh metadata\", required = false) @RequestParam(value = \"refresh\", required = false) boolean refreshMetadata) {\n        try {\n            GeneratedMetadataCache metadataByConnectionIdAndObjectName = generatedMetadataCacheDao.getMetadataByConnectionIdAndObjectName(connectionId, objectName);\n            if (refreshMetadata || metadataByConnectionIdAndObjectName == null) {\n                return new ResponseObj(true, metadataDriver.initiateMetadataRefresh(connectionId, objectName));\n            }\n            return new ResponseObj(true, metadataByConnectionIdAndObjectName.getGeneratedFields());\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            lo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f52c0548-3b61-43c1-ac24-13eb7b4320ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":531,"endLine":559,"content":"CREATE\");\n            return pnpConnectionInput;\n        } catch (CaasException caasException) {\n            String errorMessage = \"\";\n            errorMessage = caasException.getErrorMessage();\n            if (Objects.nonNull(caasException.getGsExternalSystemErrorMapping()) && StringUtils.isNotBlank(caasException.getGsExternalSystemErrorMapping().getMessage())) {\n                errorMessage = caasException.getGsExternalSystemErrorMapping().getMessage();\n            }\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE,\n                DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, caasException, null, errorMessage));\n        }\n        catch (Exception e) {\n            log.error(\"Error occured while creating connection\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE,\n                    DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n        } finally {\n            if (null != lockId) {\n                releaseLock(lockId);\n            }\n        }\n    }\n\n    @Override\n    public void delete(PNPConnectionInput pnpConnectionInput) {\n        PNPConnectionsInfo pnpConnectionsInfoFromDB = pnpConnectionInput.getPnpConnectionsInfo();\n\n        switch (pnpConnectionsInfoFromDB.getConnectionType()) {\n            case SFDC:\n                if (!pnpConnectionsInfoFromDB.getConnectionStatus().equals(ConnectionStatus.INIT) &","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c902f0a7-3da0-4fbe-a4e8-6c1272cda624","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":104,"endLine":141,"content":"ISSING_ERROR));\n   }\n   return;\n  }\n\n\n  /**\n   * @param accessToken        {@link String}\n   * @param pnpConnectionsInfo {@link PNPConnectionsInfo\n   * @return validate the given credentials by making a simple api call to freshdesk system, we don't need to check the response\n   * just check for 200 OK response to validate the connection\n   */\n  private Pair<Boolean, String> isConnectionValid(String accessToken, PNPConnectionsInfo pnpConnectionsInfo) {\n    try {\n      String base64AccessToken = GainsightUtils.encodeBase64(accessToken);\n      String domain = DuctUtils.valueOf(((Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).get(SUBDOMAIN));\n      String url = PREFIX_URL + domain + CONNECTION_VALIDATE_URL;\n      Map<String, Object> headers = Maps.newHashMap();\n\n      headers.put(AUTHORIZATION, \"Basic \" + base64AccessToken);\n      HttpResponse response = BionicRuleHttpHelper.get(url, headers, null);\n\n      if (response.getResponseCode() == 200) {\n        return Pair.of(true, \"Connection is valid\");\n      } else {\n        return Pair.of(false, CONNECTION_AUTHORIZATION_FAILURE);\n      }\n    } catch (Exception ex) {\n      log.error(\"Error while validating connection\", ex);\n      return Pair.of(false, ex.getMessage());\n    }\n  }\n\n\n  @SneakyThrows\n  @Override\n  public PNPConnectionsInfo updateConnection(PNPConnectionsInfo pnpConnectionsInfo, PNPConnectionInput pnpConnectionInput) {\n    pnpConnectionsInfo.setProperties(pnpConnectionInput.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63d3cea0-ed64-4809-98b7-b28d3a5abf08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/CTALoadServiceImpl.java","startLine":76,"endLine":80,"content":"asValidationCode.FAILED_TO_LOAD_TO_GAINSIGHT);\n        }\n        return responseDTO;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08fb526e-8762-41e3-b09d-4fc29035e27c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":305,"endLine":326,"content":"condition.assertTrue(ductRequestDTO.getConnectionId().equals(connectionId), UCValidationCode.PNP_INVALID_INPUT_DATA, HttpStatus.SC_BAD_REQUEST);\n            GainsightPrecondition.assertTrue(ductRequestDTO.getResourceName().equals(objectName), UCValidationCode.PNP_INVALID_INPUT_DATA, HttpStatus.SC_BAD_REQUEST);\n            return new ResponseObj(true, ductService.getObjectAttributes(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n            }\n            return responseObj;\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Writeback data to a System\", response = BulkActionResponse.class)\n    @PostMapping(value = \"/load/external\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj loadToExternalSystem(@ApiParam(value = \"Action P","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2052322-370e-4e36-9713-b7a5ebc20f26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctMetadataController.java","startLine":268,"endLine":276,"content":"apping.getExternalSystemErrorMessage());\n        response.setExternalSystemErrorCode(gsExternalSystemErrorMapping.getExternalSystemErrorCode());\n        response.setGsErrorCode(gsExternalSystemErrorMapping.getGsErrorCode());\n        response.setGsErrorMessage(gsExternalSystemErrorMapping.getGsErrorMessage());\n        response.setConnectorType(gsExternalSystemErrorMapping.getConnectorType());\n        response.setMessage(gsExternalSystemErrorMapping.getMessage());\n        return response;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3adb404e-6dd2-4c08-82df-06e2aed7add2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":243,"endLine":275,"content":"th(); i++) {\n                JSONObject obj = arr.getJSONObject(i);\n                resolvePicklist(dataExtractionRequest, obj);\n                resolveCurrencyField(dataExtractionRequest, obj);\n                convertDateTime(dataExtractionRequest, obj);\n                shouldContinue = verifyIfNextPaginationIsRequired(dataExtractionRequest, obj);\n                sanitizeData(dataExtractionRequest, obj);\n                br.write(obj.toString() + \"\\n\");\n            }\n            LOGGER.info(\"should do next pagination {} \", shouldContinue);\n            return shouldContinue;\n        } catch (Exception e) {\n            LOGGER.error(\"Error occured while trying to write data\", e);\n            throw new Exception(\"Error occured while trying to write data\", e);\n        } finally {\n            br.close();\n            fr.close();\n        }\n    }\n\n    private void sanitizeData(DataExtractionRequest dataExtractionRequest, JSONObject obj) throws Exception {\n        for (FieldInfo field : dataExtractionRequest.getFields()) {\n            String fieldValue = getFieldValue(obj, field.getJsonPath());\n            for (String excludedString : dataExtractionRequest.getExcludedStrings()) {\n                if (null != fieldValue) {\n                    fieldValue = fieldValue.replaceAll(excludedString, StringUtils.EMPTY);\n                }\n            }\n            updateFieldValue(obj, field.getJsonPath(), fieldValue);\n        }\n    }\n\n    private void convertDateTime(DataExtractionRequest dataEx","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0540d496-0b90-4375-a805-b4d3cb691303","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":318,"endLine":355,"content":"howOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        }\n\n        /*\n        Adding tenant level object\n         */\n        if (caasObjectTenantConfig != null) {\n            for (Map<String, Object> object : caasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        }\n\n        /*\n        Adding connection id level object\n         */\n        if (connectionIDSpecificCaasObjectTenantConfig != null) {\n            for (Map<String, Object> object : connectionIDSpecificCaasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing connection id object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (connectionIDSpecificCaasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.rem","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3248e0e9-94ff-4154-8bb0-c5a3c0c7f02e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/OAuthV2TokenDetail.java","startLine":37,"endLine":84,"content":"ntSecret(SecretData.fromValue(clientSecret));\n    }\n\n    public OAuthV2TokenDetail(String serviceProviderAccessTokenURI, String payloadContentType, String clientId,\n                              String clientSecret) {\n        this.serviceProviderAccessTokenURI = serviceProviderAccessTokenURI;\n        this.payloadContentType = payloadContentType;\n        this.setClientId(SecretData.fromValue(clientId));\n        this.setClientSecret(SecretData.fromValue(clientSecret));\n    }\n\n    public String getServiceProviderAuthorizationURI() {\n        return serviceProviderAuthorizationURI;\n    }\n\n    public void setServiceProviderAuthorizationURI(String serviceProviderAuthorizationURI) {\n        this.serviceProviderAuthorizationURI = serviceProviderAuthorizationURI;\n    }\n\n    public String getServiceProviderAccessTokenURI() {\n        return serviceProviderAccessTokenURI;\n    }\n\n    public void setServiceProviderAccessTokenURI(String serviceProviderAccessTokenURI) {\n        this.serviceProviderAccessTokenURI = serviceProviderAccessTokenURI;\n    }\n\n    public String getPayloadContentType() {\n        return payloadContentType;\n    }\n\n    public void setPayloadContentType(String payloadContentType) {\n        this.payloadContentType = payloadContentType;\n    }\n\n    public String getRedirectURI() {\n        return redirectURI;\n    }\n\n    public void setRedirectURI(String redirectURI) {\n        this.redirectURI = redirectURI;\n    }\n\n    public String getScope() {\n        return scope;\n    }\n\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d91ec59-5764-4eb6-bdce-afaa888186cd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataServiceImpl.java","startLine":142,"endLine":158,"content":"TA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n        } else if (ObjectUtils.isNotEmpty(fallbackDataTypeMappings) && fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(finalDataType))) {\n            dataTypeMappingsForField = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(finalDataType)).findFirst().get();\n            retMap.put(IPaasConstants.DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n        } else {\n            retMap.put(IPaasConstants.DATA_TYPE, DataType.STRING.name());\n            meta.put(FILTERABLE, true);\n            meta.put(EXTERNALLY_FILTERABLE, false);\n        }\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n            metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n        if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n            metaProper","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb9741e3-edcd-4ea4-9586-63fae1b149b5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectDescription.java","startLine":1,"endLine":55,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.sfdc;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n\npublic class SObjectDescription implements Serializable {\n    private String name;\n    private String label;\n    private List<SObjectField> fields;\n\n    private List<RecordTypeInfo> recordTypeInfos;\n\n    public List<SObjectField> getFields() {\n        return fields;\n    }\n\n    public void setFields(List<SObjectField> fields) {\n        this.fields = fields;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<RecordTypeInfo> getRecordTypeInfos() {\n        return recordTypeInfos;\n    }\n\n    public void setRecordTypeInfos(List<RecordTypeInfo> recordTypeInfos) {\n        this.recordTypeInfos = recordTypeInfos;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e7be2d4-e9b8-4d50-a314-b29c5ec40ef4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasConnectorConfigDAO.java","startLine":1,"endLine":11,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\npublic interface CaasConnectorConfigDAO extends AbstractEntityDao<CaasConnectorConfig> {\n    CaasConnectorConfig getConnectorConfig(ConnectorType connectorType);\n\n    void dropCollection();\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed33f6cc-d0c0-4c0b-bf25-d19776c0fac9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":25,"endLine":55,"content":"tils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.utils.IpaasHelperService;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.enums.TenantType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.ApiConfigAttributes;\nimport com.gainsight.integration.bean.metadata.engine.MetadataEngineConfig;\nimport com.gainsight.integration.bean.metadata.engine.ResourceConfig;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.BaseTenantMasterService;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.web.client.HttpClientService;\nimport com.opencsv.CSVWriter;\nimport com.opencsv.ICSVWriter;\nimport exception.SystemException;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a196ebd0-6e74-4ee7-aee4-f2297de81756","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":111,"endLine":132,"content":"onsInfo, Map<String, Object> map) throws CaasException {\n        boolean transformObjectList = true;\n        if (!map.isEmpty() && GainsightCollectionUtils.nullSafeMap(map).containsKey(TRANSFORM_OBJECT_LIST)) {\n            transformObjectList = (boolean) map.get(TRANSFORM_OBJECT_LIST);\n        }\n\n        Object cacheValue = transformObjectList ? redisCacheUtility.getValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()))\n                : redisCacheUtility.getValue(DuctUtils.getSourceWithOverriddenObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()));\n        List<Map<String, Object>> objectList = new ArrayList<>();\n\n        if (cacheValue == null) {\n            log.info(\"Objects not found in Cache, fetching again from source\");\n            HttpResponse response = null;\n            try {\n                MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n                Map<String, Object> flattenedConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n\n                ExternalUrlDetails externalUrlDetails = metadataEngineConfig.getBaseUrl();\n                Object valueFromConnectionInfo = flattenedConnectionInfo.get(externalUrlDetails.getReplaceByPath());\n                if (valueFromConnectionInfo == null)\n                    throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80615f02-d19f-473c-a9a1-2ea23488b6f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":1,"endLine":39,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dh;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.utils.UCCommonUtility;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.http.RetryHandler;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Maps;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.StatusLine;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport utils.Constants;\nimport utils.HttpClient;\nimport utils.ResponseObj;\n\nimport java.io.IOException;\nimport java.nio.charset.Standar","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61e86f61-f625-4fe7-ba55-d3da398e6117","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":1,"endLine":32,"content":"\n/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.PicklistOption;\nimport com.gainsight.duct.beans.dh.DataExtractionRequest;\nimport com.gainsight.duct.utils.ipaas.CEQueryBuilder;\nimport com.gainsight.duct.utils.ipaas.DuctSingleCEQueryBuilder;\nimport com.gainsight.duct.utils.ipaas.IpaasDataExtractionHelperService;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.beans.GsExternalSystemErrorMapping;\nimport com.gainsight.duct.utils.IpaasFeatureToggleUtility;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.utils.UCXMLUtility;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.joda.ti","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ebe29d4-6fd4-4c49-b2fc-e4740c7276ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/ZendeskToOMDConverterServiceImpl.java","startLine":75,"endLine":95,"content":"Mappings = connectorConfig.getFallbackDataTypeMappings();\n        DataTypeMappings dataTypeMappingsForField = null;\n\n        String customFieldSuffix = apiConfigAttributes.getProperties().get(PROPERTIES_KEY_FOR_CUSTOM_FIELD_SUFFIX).toString();\n\n        ArrayList fieldFromObjectDefinition = OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), ArrayList.class);\n        Map<String, Object> fieldDefinition;\n        if (fields.isArray()) {\n            for (JsonNode field : fields) {\n//                if (null == field.get(\"creator_user_id\") || field.get(\"creator_user_id\").asInt(-1) != -1) {\n                fieldDefinition = new HashMap();\n                Map<String, Object> meta = new HashMap<>();\n                Map<String, Object> metaProperties = new HashMap<>();\n                fieldDefinition.put(FIELD_NAME, apiConfigAttributes.getPrefixForMetadataFetch() + field.get(customFieldSuffix).asText());\n                fieldDefinition.put(DB_NAME, apiConfigAttributes.getPrefixForMetadataFetch() + field.get(customFieldSuffix).asText());\n                //For some fields CE does not give display name, setting field name as display name for those fields\n                fieldDefinition.put(LABEL, field.get(TITLE).asText());\n\n                //set datatype\n                if (field.get(TYPE) != null && dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(field.get(TYPE).asText()))) {\n                    dataTypeMappingsForField = dataType","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b02e213-a05a-4c34-baf0-bc499a1fc47f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":1,"endLine":39,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.integration.bean.audit.AuditData;\nimport com.gainsight.integration.bean.audit.AuditDetails;\nimport com.gainsight.integration.bean.audit.AuditRecord;\nimport com.gainsight.integration.bean.common.BeanPropertyTracker;\nimport com.gainsight.integration.bean.db.common.PNPConnectionInput;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.db.common.UnifiedConnectorRequest;\nimport com.gainsight.integration.bean.enums.audit.AttributeAuditType;\nimport com.gainsight.integration.bean.enums.audit.AuditEntityType;\nimport com.gainsight.integration.bean.enums.audit.AuditOperationType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.common.EventStatusEnum;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.jetbrains.annotations.NotNull;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n\npublic class AuditLogUtility {\n\n    private static final","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1621411-9cc0-4553-97a8-5be784c81c2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":415,"endLine":436,"content":"  dbNames.add(field.getDbName());\n            }\n        }\n        omdMetadata.get(objectName).setFields(uniqueFields);\n    }\n\n    private JsonNode getNativeMetadataFromCE(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            JsonNode fields = null;\n            IpaasAccountUserDetails ipaasAccountUserDetails = ipaasAccountUserDetailsDao.findByTenantId(pnpConnectionsInfo.getTenantId());\n            HttpUrlConnectionUtils httpUrlConnection = new HttpUrlConnectionUtils();\n            com.gainsight.integration.utils.HttpResponse httpResponse = httpUrlConnection.get(IpaasFeatureToggleUtility.getCEBaseURL()\n                            + CLOUD_API_BASE_URL + \"nativeMetadata\" + FORWARD_SLASH + objectName,\n                    IpaasHelperService.getConnectionSpecificHeaders(ipaasAccountUserDetails, pnpConnectionsInfo),\n                    TIMEOUT * 1000, false, null);\n            String respMsg = httpResponse.getRespMsg();\n            if (httpResponse.getResponseCode() == 404) {\n                LOGGER.error(\"{CAAS} Error in External System due to {}\", httpResponse.getRespMsg());\n                Map<String, Object> responseMap = MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getResponseCode()),\n                        String.valueOf(httpResponse.getErrorCode()),\n                        responseMap.get(DuctErrorConstants.MESSAGE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5c9fe18-f28c-45f6-abdf-12f001bb777d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":174,"endLine":196,"content":"   } else {\n        fieldJsonPathList.add(OPEN_QUOTE + fieldInfo.getJsonPath() + CLOSE_QUOTE + \" AS \" + fieldInfo.getJsonPath());\n      }\n    }\n\n    int limit = Math.min(ductJobMapping.getLimit(), maxPageSize) + 1;\n    int offset = 0;\n    if (!ObjectUtils.isEmpty(ductJobMapping.getOffset()) && ductJobMapping.getOffset() > 0) {\n      offset = ductJobMapping.getOffset();\n    } else if (!ObjectUtils.isEmpty(ductJobMapping.getNextPageToken())) {\n      offset = Integer.parseInt(ductJobMapping.getNextPageToken());\n    }\n\n    if (!ObjectUtils.isEmpty(ductJobMapping.getCriteria())) {\n      Map<String, Object> fieldNameToDataTypeMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n      FilterRule filterRule = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameToDataTypeMap, gsFieldsByNamesMap, null, caasConnectorConfig, ductJobMapping.getResourceName());\n      filter = DBConnectorsQueryBuilder.createQuery(filterRule, ConnectorType.SAP_DATASPHERE);\n      query = \"Select \" + fieldJsonPathList.stream().collect(Collectors.joining(\",\"))\n          + \" from \" + OPEN_QUOTE + sapDatasphereConnectionDetail.getSchema() + CLOSE_QUOTE + \".\" + OPEN_QUOTE + objectName + CLOSE_QUOTE + \" \"\n          + filter + \" limit \" + limit + \" offset \" + offset;\n    } else {\n      query = \"Select \" + fieldJsonPathList.stream().collect(Collectors.joining(\",\"))\n          + \" from \" + OPEN_QUOTE + s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f81cefc9-03ad-4426-8adc-399124cc2d46","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/SnowflakeDataSourceService.java","startLine":238,"endLine":254,"content":"eate temporary stage with desired file format\n            log.info(\"Started executing query to create temporary stage\");\n            preparedStatement = jdbcConnection.prepareStatement(\"create TEMPORARY stage \" + tempStageName + \" FILE_FORMAT = (TYPE = JSON)\");\n            resultSet = preparedStatement.executeQuery();\n            // Copy the data into created stage with single file`\n            String copyManagerQuery = \"copy into @\" + tempStageName + \"/\" + cleanTaskFileName +\n                    \" from (\" + query + \") \" +\n                    \"file_format = (type = 'JSON' NULL_IF = ('\\\\N', 'NULL', 'NUL', '') strip_outer_array = true STRIP_NULL_VALUES = TRUE DATE_FORMAT = 'YYYY-MM-DD'  \" +\n                    \"compression = 'NONE') \" +\n                    \" OVERWRITE = TRUE SINGLE = FALSE MAX_FILE_SIZE = \" + properties.get(\"snowflakeFileSize\");\n            preparedStatement = jdbcConnection.prepareStatement(copyManagerQuery);\n            log.info(\"Started executing query: {} with snowFlake copyManager\", copyManagerQuery);\n            resultSet = preparedStatement.executeQuery();\n            String getFileInLocalMachineQuery = \"get @\" + tempStageName + \"/\" + cleanTaskFileName + \" file://\" + System.getProperty(\"user.dir\") + \"/stagingFile\";\n            log.info(\"Started executing query: {} with snowFlake copyManager\", getFileInLocalMachineQuery);\n            preparedStatement = jdbcConnection.prepareStatement(getFileInLocalMachineQuery);\n            resultSet = preparedStatement.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01968d09-a04d-4fd6-835c-89e5176aacc3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":431,"endLine":454,"content":"tionAndUpdateStatus(CaasException ex, MetadataGenerationDetails metadataGenerationDetails) {\n    log.info(\"Writing error into DB\");\n    try {\n      gsExternalSystemErrorMappingDao.insert(ex.getGsExternalSystemErrorMapping());\n    } catch (Exception e) {\n      log.error(\"Error while writing into DB, hence skipping\", e);\n    }\n    String errorMessage = DuctUtils.getErrorMessageToPopulateFromException(ex);\n    metadataGenerationDetails.setStatus(MetadataJobStatus.FAILED);\n    metadataGenerationDetails.setErrorMessage(errorMessage);\n    metadataGenerationDetailsDao.update(metadataGenerationDetails);\n  }\n\n  @Override\n  public MetadataGenerationResponse initiateMetadataRefresh(String connectionId, String objectName) throws CaasException {\n    try {\n      PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(connectionId);\n      GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTIONS_NOT_FOUND, \"Connection not found\", SC_BAD_REQUEST);\n      MetadataGenerationDetails metadataGenerationDetails =\n          MetadataGenerationDetails.builder().jobId(UUID.randomUUID().toString()).connectionId(connectionId)\n              .objectName(objectName).connectorType(pnpConnectionsInfo.getConnectionType())\n              .tenantId(RequestContextProvider.getTenantId()).status(MetadataJobStatus.INIT)\n              .encryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(\n                  JsonUtil.toJsonString(RequestContextProvider.getReque","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4d24cb5-33bf-4a16-bee2-59d36cf252bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/EngineCommonDataSourceService.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.data;\n\nimport com.bazaarvoice.jolt.Chainr;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.dao.metadata.engine.MetadataEngineConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.duct.utils.Redis.RedisCacheUtility;\nimport com.gainsight.integration.auth.AuthService;\nimport com.gainsight.integration.auth.AuthServiceImpl;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimpor","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3abccb51-7f63-40e4-b667-52fb6937410b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":151,"endLine":181,"content":"          }\n            queryParams.put(filterName, val);\n        });\n        return queryParams;\n    }\n\n    private static List<Criteria> extractFilters(Criteria criteria, List<Criteria> filters) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filter : criteria.getFilters()) {\n                    extractFilters(filter, filters);\n                }\n            } else\n                filters.add(criteria);\n        }\n        return filters;\n    }\n\n    private static String getFilterableName(Criteria filter, Map<String, GSFieldDefinition> fieldDefinitionMap) {\n        String name = null;\n        GSFieldDefinition fieldDefinition = fieldDefinitionMap.get(filter.getFieldName());\n        if (fieldDefinition.getDataType().equalsIgnoreCase(com.gainsight.platform.metadata.DataType.DATE.getValue())) {\n            if (filter.getOperatorType() == FilterOperator.GTE) {\n                if (fieldDefinition.getFieldName().equalsIgnoreCase(\"updateHistory.createdAt\"))\n                    name = \"createDateStart\";\n                else if (fieldDefinition.getFieldName().equalsIgnoreCase(\"updateHistory.lastUpdatedAt\"))\n                    name = \"modifyDateStart\";\n            } else if (filter.getOperatorType() == FilterOperator.LTE) {\n                if (fieldDefinition.getFieldName().equalsIgnoreCase(\"updateHistory.createdAt\"))\n                    name = \"createDateEnd\";\n                else if (fieldDefinition.getFieldName().equal","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab91eaba-e679-4550-a058-223d89da2d0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":307,"endLine":332,"content":"nseCode() != 200) {\n                LOGGER.error(\"{CAAS} Error in External System \");\n                Map<String, Object> responseMap = OBJECT_MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getResponseCode()),\n                        String.valueOf(httpResponse.getErrorCode()),\n                        responseMap.get(DuctErrorConstants.MESSAGE)));\n            }\n            JsonNode objectsResp = OBJECT_MAPPER.readValue(respMsg, JsonNode.class);\n            List<JsonNode> objects = StreamSupport.stream(objectsResp.spliterator(), false).collect(Collectors.toList());\n            LOGGER.info(\"returnMap:{}\", objects.size());\n            return objects;\n        } catch (CaasException e) {\n            throw e;\n        } catch (Exception e) {\n            LOGGER.error(\"{CAAS} Error in Internal System\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private void populatePicklistValuesForField(JsonNode field, CaasConnectorConfig caasConnectorConfig, Map fieldDefinition) {\n        if (ObjectUtils.isEmpty(caasConnectorConfig.getMetadataTransformationConfig())) {\n            LOGGER.info(\"No meta transformation config found for picklist fields.\");\n            return;\n        }\n\n        String picklistValuesPath = (String) caasConnectorC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ea6188c-5aee-406b-aa1b-276244b07396","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":289,"endLine":312,"content":"onnectionsInfo);\n            ductValidationService.validateRequest(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        } else {\n            validateMappings(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.GAINSIGHT);\n            ductRequestDTO.setConnectorType(ConnectorType.GAINSIGHT);\n        }\n        ductRequestDTO.setDuctDataOperation(DuctDataOperation.READ);\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.GAINSIGHT) {\n            throw new NotSupportedException(\"Bulk Fetch from Gainsight is not supported yet\");\n        } else {\n            // bulk Extract Request from External System\n            DuctJobMapping newDuctJobMapping = ductJobMappingDao.save(ductJobMapping);\n            queueMessage(ductJobMapping);\n            InstrumentationUtil.completeJob(ductJobMapping, DuctConstants.CAAS_WEB);\n            return DuctResponseDTO.builder()\n                    .jobId(newDuctJobMapping.getJobId())\n                    .fields(newDuctJobMapping.getFields())\n                    .connectionId(newDuctJobMapping.getConnectionId())\n                    .resourceName(newDuctJobMapping.getRe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8e78b1f5-f825-4d38-86e4-f25eca2fba54","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingService.java","startLine":32,"endLine":48,"content":"ception;\n\n    BulkActionResponse getExternalLoadStatus(String jobId);\n\n    QueryAPIResponseBean getSynchronizedDataFromExternalSystem(DuctRequestDTO ductRequestDTO, boolean useEngine) throws Exception;\n\n    QueryAPIResponseBean getSynchronizedDataFromExternalSystem(DuctRequestDTO ductRequestDTO) throws Exception;\n\n    QueryAPIResponseBean getSynchronizedDataFromExternalSystem(String recordId, DuctRequestDTO ductRequestDTO) throws Exception;\n\n    CaaSExtractDetails createExtractTask(DuctRequestDTO ductRequestDTO) throws CaasException;\n\n    Map<String, Object> createExtractTaskWithJarDetails(DuctRequestDTO ductRequestDTO, String parentId) throws CaasException;\n\n    Object handleEventFromExternalSystem(Object body, ConnectorType connectorType, Map<String, String> headers) throws Exception;\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2407b6c-d685-410c-a239-d3f426dab420","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":96,"endLine":115,"content":"                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n                    meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n                } else {\n                    fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                    meta.put(FILTERABLE, true);\n                    meta.put(EXTERNALLY_FILTERABLE, false);\n                }\n\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getFormat()))\n                    metaProperties.put(FORMAT, dataTypeMappingsForField.getFormat());\n                if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                    metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n\n                meta.put(ORIGINAL_DATA_TYPE, gainsightHubspotFieldDescription.getType());\n                meta.put(GDM_FORMULA_COLUMN, gainsightHubspotFieldDescription.isCalculated());\n                meta.put(HIDDEN, gainsightHubspotFieldDescription.isHidden());\n                meta.put(HAS_LOOKUP, ObjectUtils.allNotNull(gainsightHubspotFieldDescription.getReferencedObjectType()));\n\n                if (ObjectUtils.isNotEmpty(gainsightHubspotFieldDescription.getOptions()) && !gainsightHubspotF","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fe41524-23a6-445e-acab-89ee866e4ec0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":81,"endLine":126,"content":"S_PICKLIST_FIELD = \"isPicklistField\";\n    private static final String IS_PRIMARY_KEY = \"isPrimaryKey\";\n    private static final String FILTERABLE_IN_INTERNAL_SYSTEM = \"filterableInInternalSystem\";\n    private static final String DATA_TYPE = \"dataType\";\n    private static final String LABEL = \"label\";\n    private static final String OBJECT_LABEL = \"objectLabel\";\n    private static final String OPTIONS = \"options\";\n    private static final String VALUE = \"value\";\n\n\n    private static final int TIMEOUT = 90;\n\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Autowired\n    private HttpClientService httpClientService;\n\n    @Autowired\n    private IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n\n    @Autowired\n    private OMDConverterFactory omdConverterFactory;\n\n    @Autowired\n    private MetadataDriver metadataDriver;\n\n    @Autowired\n    private MetadataEngineConfigDao metadataEngineConfigDao;\n\n    @Autowired\n    private BaseTenantMasterService baseTenantMasterService;\n\n    @Override\n    public String name() {\n        return \"CENativeComparisonClient\";\n    }\n\n    @Override\n    public Options requiredOptions() {\n        Options o = new Options();\n        o.addOption(\"f\", \"file\", true, \"File path of line separated TenantIds\");\n        o.addOption(\"t\", \"tenantId\", true, \"TenantId\");\n        o.addOption(\"b\", \"baseUrl\", true, \"Gs Integrations base url\");\n        o.addOption(\"o\", \"objects\", true, \"File path of line separated objects\");\n        o.addOptio","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c79a39df-f666-4523-a455-87663ad9eea7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":131,"endLine":156,"content":"rootTask = getRootTask();\n        DPWorkflowDagDetailsDTO dpWorkflowDagDetailsDTO = generateDag(rootTask,\n                ductJobMapping.getJobId(), systemToken);\n\n        getTasks(ductJobMapping, dpWorkflowDagDetailsDTO.getTasks(), rootTask.getTaskId(), rootTask.getChildrenTaskIds(), objectDefinition);\n\n        if (ductJobMapping.getCriteria() != null && generateFreeFormTask())\n            ductJobMapping.setFreeFormTaskId(dpWorkflowDagDetailsDTO.getTasks().get(2).getTaskId());\n        ductJobMapping.setExtractTaskId(dpWorkflowDagDetailsDTO.getTasks().get(1).getTaskId());\n        Map<String, Object> workflowJob = Maps.newHashMap();\n        workflowJob.put(\"workflowDetails\", dpWorkflowDagDetailsDTO);\n        try {\n            fetchRequestDTO.setWorkFlowStringifiedRep(MAPPER.writeValueAsString(workflowJob));\n        } catch (JsonProcessingException e) {\n            LOGGER.error(e.getMessage(), e);\n        }\n        LOGGER.info(\"{} Request Creation completed \", ductJobMapping.getConnectorType());\n        return fetchRequestDTO;\n    }\n\n    private DPWorkflowTaskDetailsDTO getRootTask() {\n        DPWorkflowTaskDetailsDTO dpWorkflowTaskDetailsDTO = new DPWorkflowTaskDetailsDTO();\n        dpWorkflowTaskDetailsDTO.setTaskId(\"rootTask\");\n        dpWorkflowTaskDetailsDTO.setTaskName(DataHighwayUtils.generateCleanTaskName(\"RootTask_\" + RandomStringUtils.randomAlphanumeric(10)));\n        dpWorkflowTaskDetailsDTO.setChildrenTaskIds(new ArrayList<>());//add children here\n        return dpW","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c66cbe87-0895-4e30-89db-ad4df06a2c63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasConnectorConfigDAOImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class CaasConnectorConfigDAOImpl extends AbstractEntityDaoImpl<CaasConnectorConfig> implements CaasConnectorConfigDAO{\n\n    @Autowired\n    public CaasConnectorConfigDAOImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, CaasConnectorConfig.class);\n    }\n    @Override\n    public CaasConnectorConfig getConnectorConfig(ConnectorType connectorType) {\n        Query query = Query.query(Criteria.where(CaasConnectorConfig.CONNECTOR_TYPE_PROP).is(connectorType));\n        return getMongoTemplate().findOne(query, CaasConnectorConfig.class);\n    }\n\n\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getGlobalMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasConnectorConfig caasConnectorConfig, String s) {\n        caasConnectorConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ecc9474-90f6-439c-8137-752840de04a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":118,"endLine":142,"content":"til.getSimpleCryptor().decrypt(kp, encryptedRequestInfo);\n                    requestInfo = GainsightUtils.OBJECT_MAPPER.readValue(decryptedRequestInfo, RequestInfo.class);\n                    eligibleToSwitch = true;\n                } else if (StringUtils.isNotEmpty(tenantId)) {\n                    Tenant tenant = service.findOne(tenantId);\n                    if (tenant != null) {\n                        log.info(\"Setting request info for tenant id {}\", tenant);\n                        requestInfo = new RequestInfo();\n                        TenantAuthInfo tenantInfo = TenantAuthInfo.fromTenant(tenant);\n                        UserAuthInfo userAuthInfo = new UserAuthInfo();\n                        requestInfo.setUserAuthInfo(userAuthInfo);\n                        requestInfo.setTenantAuthInfo(tenantInfo);\n                        eligibleToSwitch = true;\n                    }\n                }\n            }\n            if (requestInfo == null) {\n                return setErrorResponse(request, response, \"Invalid authentication credentials. Authentication failed.\");\n            }\n\n            if (StringUtils.isBlank(requestId)) {\n                requestId = StringUtils.isBlank(requestInfo.getRequestId()) ? UUID.randomUUID().toString() : requestInfo.getRequestId();\n                if (StringUtils.isBlank(requestInfo.getRequestId())) {\n                    log.warn(\"{} header is missing from {}. Request ID from requestInfo is '{}'.\",\n                            Constants.X_REQUE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5816396b-5410-4b2d-84d3-bacad70ec7c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AhaCaasCriteriaBuilder.java","startLine":95,"endLine":127,"content":"Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<String, GSFieldDefinition> fieldNameToMetaMap) {\n        DataType dataType;\n\n        switch (fieldNameToMetaMap.get(fieldName).getDataType()) {\n            case \"STRING\":\n                dataType = DataType.STRING;\n                break;\n            case \"NUMBER\":\n                dataType = DataType.NUMBER;\n                break;\n            case \"BOOLEAN\":\n                dataType = DataType.BOOLEAN;\n                break;\n            case \"DATE\":\n                dataType = DataType.DATE;\n                fieldInfo.setDateTimeProperties(\n                        new DateTimeProperties(\"yyyy-MM-dd\", \"UTC\"));\n                break;\n            case \"DATETIME\":\n                dataType = DataType.DATETIME;\n                fieldInfo.setDateTimeProperties(\n                        new DateTimeProperties(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"UTC\"));\n                break;\n            case \"TIMESTAMP\":\n                dataType = DataType.TIMESTAMP;\n                break;\n            default:\n                dataType = DataType.STRING;\n        }\n        fieldInfo.setDataType(dataType);\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5139e42-6280-4550-a40c-5505ac91fef7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":476,"endLine":495,"content":"ate DuctResponse pollWithJobId(HubspotTokenDetails accessDetailsFromDB, Map<String, Object> response, DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            int retryCount = pollCount();\n            long pollInterval = pollDelaySeconds();\n            DuctCommonUtils.sleepSeconds(pollInterval);\n            int iterator = 1;\n            HttpResponse httpResponse;\n            Map<String, Object> pollResponse;\n            while (iterator++ <= retryCount) {\n                GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                accessDetailsFromDB.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken()));\n\n                String jobImportId = response.get(\"id\").toString();\n                log.info(\"Polling for job Id : {}\", jobImportId);\n                httpResponse = fetchService.pollImportFileData(\n                        accessDetailsFromDB.getClientId(), accessDetailsFromDB.getClientSecret(), accessDetailsFromDB.getRefreshToken(),\n                        accessDetailsFromDB.getAccessToken(), jobImportId);\n                pollResponse = extractResponse(httpResponse);\n                if (httpResponse.getStatusLine().getStatusCode() != 200 && httpResponse.getStatusLine().getStatusC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93469298-fbed-4bd5-836e-26173ddaba61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AhaCaasCriteriaBuilder.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@Slf4j\npublic class AhaCaasCriteriaBuilder {\n\n    public static FilterRule getFilterFuleFromCAASRule(Criteria baseCriteria, Map<String, Object> fieldNameDataTypeMap,\n                                                       Map<String, GSFieldDefinition> fieldNameMetaMap){\n        FilterRule filterRule = new FilterRule();\n        List<FilterRule> filterRules = Lists.newArrayList();\n        for(Criteria criteria : baseCriteria.getFilters()){\n            FilterRule internalFilterRule = new FilterRule();\n            if (Objects.isNull(criteria.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca6f8cf1-1e17-47c4-8ee1-aec4cc75df64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":157,"endLine":179,"content":"      }\n                            Map<String, Object> retMap = new HashMap<>();\n                            retMap.put(OBJECT_ID, object.get(NAME));\n                            retMap.put(OBJECT_NAME, object.get(NAME));\n                            retMap.put(LABEL, object.get(NAME));\n                            retMap.put(SUPER_CLASS, object.get(SUPER_CLASS));\n                            objectList.add(retMap);\n                        }\n                    }\n                    objectList = transformObjectList(objectList, pnpConnectionsInfo, transformObjectList);\n                    if (transformObjectList) {\n                        redisCacheUtility.putValue(DuctUtils.getObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()), objectList,\n                                DeploymentProperties.getDeploymentProperties().getIntegerValue(\"caas.servicenow.objects.cache.expiry.in.seconds\", 3600));\n                    } else {\n                        redisCacheUtility.putValue(DuctUtils.getSourceWithOverriddenObjectsCallCacheKey(pnpConnectionsInfo.getConnectionId()), objectList,\n                                DeploymentProperties.getDeploymentProperties().getIntegerValue(\"caas.servicenow.objects.cache.expiry.in.seconds\", 3600));\n                    }\n                    return objectList;\n                }\n            } catch (Exception e) {\n                log.error(\"Exception occured at the time of servicenow objects {}\", e);\n                return null;\n            } finally ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d53b5f5-dc97-4fda-bca9-7d3177061d72","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":497,"endLine":532,"content":"lause = Operators.getJQSqlClause(rule.getOp());\n            clause = clause.replace(\"$left\", rule.getFieldInfo().getName());\n            clause = clause.replace(\"$right\", StringUtils.join(rule.getValues().stream().map(value -> {\n                Object val = value.getValue();\n                if (ENCLOSE_IN_SINGLE_QUOTE.contains(value.getDataType())) {\n                    val = \"'\" + val + \"'\";\n                }\n                val = handleValue(val, rule.getOp());\n                return val;\n            }).collect(Collectors.toList()), \",\"));\n            stringBuilder.append(clause);\n            whereClause.add(stringBuilder.toString());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            rule.getRules().forEach(childRule -> {\n                childRules.addAll(buildRule(childRule));\n            });\n            whereClause.add(wrapRoundBrackets(\n                    Joiner.on(rule.getCondition().getSpaceWrappedFilterCondition()).join(childRules)));\n        }\n        return whereClause;\n    }\n\n    private static Object handleValue(Object value, FilterOperator op) {\n        switch (op) {\n            case CONTAINS:\n            case STARTS_WITH:\n                value = value + \"*\";\n                return value;\n            default:\n                return value;\n        }\n    }\n\n    private List<Map<String, Object>> sanitizeData(List<Map<String, Object>> data, ResourceConfig resourceConfig) {\n        List spec = DuctUtils.OBJECT_MAPPER.convertValu","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b01e7ed0-cb9d-45ca-8580-9d8650b8092c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":32,"endLine":58,"content":" return connectorType == ConnectorType.HUBSPOT;\n    }\n\n    @Override\n    public boolean validate(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap, CaasConnectorConfig caasConnectorConfig) throws CaasException {\n        validateResourceName(ductRequestDTO, objectDefinitionMap);\n        validateFields(ductRequestDTO, objectDefinitionMap);\n        validateFilters(ductRequestDTO);\n        validateFilterOperations(ductRequestDTO, objectDefinitionMap, caasConnectorConfig);\n        if (null != ductRequestDTO.getDuctDataOperation())\n            validateWriteBack(ductRequestDTO, objectDefinitionMap);\n        return true;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    private void validateFilters(DuctRequestDTO ductRequestDTO) throws CaasException {\n        if (ductRequestDTO.getIsSynchronized() && ductRequestDTO.getCriteria() != null) {\n            if (ductRequestDTO.getCriteria().getFilters().size() > 1) {\n                DuctUtils.throwError(CaasValidationCode.ONLY_ONE_FILTER_IS_ALLOWED.getGsEventCode(), CaasValidationCode.ONLY_ONE_FILTER_IS_ALLOWED.getUserText(), null);\n            }\n            for (Criteria criteria : ductRequestDTO.getCriteria().getFilters()) {\n                if (criteria.getFilters() != null && criteria.getFilters().size() > 1) {\n                    DuctUtils.throwError(CaasValidationCode.ONLY_ONE_FILTE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ba0e023-a764-40ac-a15d-156543ecfa25","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/BigQueryDataSourceService.java","startLine":210,"endLine":219,"content":"nectorConfigService.getConnectorConfig(ConnectorType.BIGQUERY);\n        return DataHighwayUtils.getFilterRuleFromCAASCriteria(criteria,fieldNameDataTypeMap,fieldNameMetaMap,null,caasConnectorConfig, ductJobMapping.getResourceName());\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return false;\n    }\n\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43d61fab-0748-4ca8-a055-a925aea84496","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":174,"endLine":211,"content":"tSet.close();\n      }\n      if (preparedStatement != null) {\n        preparedStatement.close();\n      }\n      if (connection != null) {\n        connection.close();\n      }\n    } catch (Exception e) {\n      log.error(\"Error occurred while closing connection: \", e);\n    }\n  }\n\n\n  @SneakyThrows\n  public Connection createConnection(String connectionUrl, Properties properties) {\n    try {\n      String userName = properties.getProperty(USER);\n      String password = properties.getProperty(PASSWORD);\n      Connection connection = DriverManager.getConnection(connectionUrl, userName, password);\n      log.info(\"[SAP HANA] Connection Success\");\n      return connection;\n    } catch (SQLException e) {\n      log.error(\"[SAP HANA] Connection creation failed: \" + e.getMessage());\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n\n  }\n\n\n  @SneakyThrows\n  private void validateConnectionProperties(PNPConnectionsInfo pnpConnectionsInfo) {\n    if (Objects.isNull(pnpConnectionsInfo)) {\n      throw new CaasException(PROPERTIES_MISSING_ERROR, CaasValidationCode.INVALID_INPUT_DATA);\n    }\n\n    if (!SUPPORTED_AUTHORIZATION_TYPES.contains(pnpConnectionsInfo.getAuthorizationType())) {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, false, null, UNSUPPORTED_AUTH_T","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f5d0f5a5-cd1d-4b3a-820b-98ad52fa9832","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasFeatureToggleUtility.java","startLine":26,"endLine":47,"content":"inal Long TENANT_REGION_FEATURE_CONFIG_CACHE_EXPIRY = DeploymentProperties.getDeploymentProperties().getLongValue(\"tenant.region.feature.config.cache.expiry\", 60 * 60 * 1000);\n    private static final ExpiryCache<String, TenantRegion> TENANT_REGION_LIST = new ExpiryCache<>(TENANT_REGION_FEATURE_CONFIG_CACHE_EXPIRY);\n\n    public static String getCEBaseURL() {\n        String tenantRegion = getTenantRegion().getValue();\n        if (((CE_DETAILS__LIST.get(tenantRegion)) != null && (CE_DETAILS__LIST.get(tenantRegion)).containsKey(\"baseUrl\"))) {\n            return (CE_DETAILS__LIST.get(tenantRegion)).get(\"baseUrl\").toString();\n        }\n        String propertyValue = DeploymentProperties.getDeploymentProperties().getValue(tenantRegion.concat(\".\").concat(CE_BASE_URL_CONFIG_KEY));\n        String ceBaseURL = (null != propertyValue) ? propertyValue : DEFAULT_CE_BASE_URL;\n        Map<String, String> map = CE_DETAILS__LIST.get(tenantRegion) == null ? Maps.newHashMap() : CE_DETAILS__LIST.get(tenantRegion);\n        map.put(\"baseUrl\", ceBaseURL);\n        CE_DETAILS__LIST.put(tenantRegion, map);\n\n        return ceBaseURL;\n    }\n\n    public static String getUserToken() {\n        String tenantRegion = getTenantRegion().getValue();\n        if (((CE_DETAILS__LIST.get(tenantRegion)) != null && (CE_DETAILS__LIST.get(tenantRegion)).containsKey(\"userToken\"))) {\n        }\n        String propertyValue = DeploymentProperties.getDeploymentProperties().getValue(tenantRegion.concat(\".\").concat(CE_USER_TOK","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f81f1d05-358c-43c1-bb3b-737c72c5a0a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCFeatureConfigUtility.java","startLine":114,"endLine":119,"content":"error(\"Exception updating feature from feature toggle service\", e);\n            return false;\n        }\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a71bf0c-6aff-4c3d-bbe5-659b2048cf98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":613,"endLine":635,"content":"erationType.DELETE, new UnifiedConnectorRequest(pnpConnectionInput.getPnpConnectionsInfo()), null, EventStatusEnum.SUCCESS);\n    }\n\n    @Override\n    public void revokeRequest(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        if (pnpConnectionsInfo.isIpaasConnection()) {\n            DuctConnectorCalloutUtil.revoke(pnpConnectionsInfo);\n        } else {\n            PNPConnectionsInfo pnpConnectionsInfoFromDB = revokeConnectionAndUpdateStatusInJob(pnpConnectionsInfo, false);\n            ductEventService.publishConnectionEvent(pnpConnectionsInfo, \"DELETE\");\n        }\n    }\n\n    private PNPConnectionsInfo createConnection(PNPConnectionInput pnpConnectionInput) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        log.info(\"Connection creation request received for connection type: {}\", pnpConnectionsInfo.getConnectionType());\n        switch (pnpConnectionsInfo.getConnectionType()) {\n            case MIXPANEL:\n                assertTrue(GainsightPrecondition.scanAndNotBlank(pnpConnectionsInfo\n                        .getTimeZone(), true), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_TIMEZONE.getUserText());\n                assertTrue(GainsightPrecondition.scanAndNotBlank(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n              ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed30e2a1-7a8a-4bbd-a6c1-5db58b2142d0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":210,"endLine":243,"content":"FieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return CAAS_ZENDESK_EXTRACT;\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.zendesk.external.task.extract.use.latest\", \"true\");\n    }\n\n    @Override\n    protected String getVersion() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.zendesk.external.task.extract.version\");\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.zendesk.external.task.default.timeout\", \"240\");\n    }\n\n    @Override\n    protected FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductJobMapping.getConnectorType());\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.ZENDESK);\n        Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductJobMapping.getResourceName().equals(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf3bba3e-60a8-4f76-aaff-71fbfce53ec0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":572,"endLine":595,"content":"dCrmIdSet().remove(pnpConnectionsInfoFromDB.getCrmId());\n                    tenantMasterDAO.update(tenantMasterQuery, new TenantMasterUpdate(tenantFromDB));\n                }\n                break;\n            case GAINSIGHT_PX:\n                if (V2.equalsIgnoreCase(pnpConnectionsInfoFromDB.getVersion()) &&\n                        Objects.nonNull(pnpConnectionsInfoFromDB.getSetupStatus()) && SetupStatus.INIT != pnpConnectionsInfoFromDB.getSetupStatus()) {\n                    assertTrue(deleteDataPodiumConnection(pnpConnectionsInfoFromDB.getConnectionId()), CaasValidationCode.INTERNAL_ERROR);\n                }\n                break;\n            case CUSTOMER_COMMUNITY:\n            case CUSTOMER_EDUCATION:\n                if (Objects.nonNull(pnpConnectionsInfoFromDB.getSetupStatus()) && SetupStatus.INIT != pnpConnectionsInfoFromDB.getSetupStatus()) {\n                    assertTrue(deleteDataPodiumConnection(pnpConnectionsInfoFromDB.getConnectionId()), CaasValidationCode.INTERNAL_ERROR);\n                }\n                break;\n            default:\n                break;\n        }\n        pnpConnectionInfoDao.markDeleted(pnpConnectionsInfoFromDB.getConnectionId());// TODO we can call directly  call update on the object here only\n\n       /* if (ConnectorType.SFDC.equals(pnpConnectionsInfoFromDB.getConnectionType())) {\n           if (CollectionUtils.isEmpty(pnpConnectionInfoDao.findByConnectionType(ConnectorType.SFDC)) &&\n                    (!pnpConnectionsInfoFromDB.getProper","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc9211b0-5dc7-4382-922e-692968d83b07","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthService.java","startLine":1,"endLine":23,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.authorization;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n/**\n * Service for OAuth2 configuration for External Actions.\n */\npublic interface CallOutOAuthService {\n\n    Map getOAuthAccessToken(PNPConnectionsInfo pnpConnectionsInfo, String code, String grantType) throws IOException;\n\n\n    void getUpdatedPnpConnectionsInfoWithAccessToken(PNPConnectionsInfo pnpConnectionsInfo, Map oauthResponse);\n\n    String constructOAuthServiceProviderURI(PNPConnectionsInfo pnpConnectionsInfo, String redirectURI, String state);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab75040f-f910-4bba-a251-7b12fc688a79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/InstrumentationUtil.java","startLine":1,"endLine":29,"content":"package com.gainsight.duct.utils;\n\nimport com.gainsight.bean.RequestInfo;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.instrumentation.gsintegration.model.GSJob;\nimport com.gainsight.instrumentation.gsintegration.propagator.RequestInfoSetterGetter;\nimport com.gainsight.instrumentation.job.model.Job;\nimport com.gainsight.instrumentation.job.model.JobContext;\nimport com.gainsight.instrumentation.job.tracer.JobTracer;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.apache.commons.lang.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class InstrumentationUtil {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(InstrumentationUtil.class);\n    private static final String DUCT_INSTRUMENTATION_ENABLE = \"duct.instrumentation.enable\";\n\n    private static Job createJob(RequestInfo requestInfo, DuctJobMapping ductJobMapping, String appName) {\n        return GSJob.fromRequestInfo(requestInfo).assetId(ductJobMapping.getJobId()).assetName(ductJobMapping.getConnectorType().getValue()).\n                assetType(DuctConstants.DUCT).jobId(ductJobMapping.getJobId())\n                .jobName(DuctConstants.CAAS_JOB).tenantId(ductJobMapping.getTenantId()).source(appName).build();\n    }\n\n    private static Job createJob(RequestInfo ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d3e56857-f7c2-4649-be42-809060bfe063","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/config/MockSFAuthorizer.java","startLine":38,"endLine":76,"content":"CATION_ERROR);\n    }\n    UserAuthInfo userAuthInfo = new UserAuthInfo();\n    userAuthInfo.setUserId(userId);\n    userAuthInfo.setDisplayName(\"Test User\");\n    userAuthInfo.setUserEmail(\"test@gainsight.com\");\n    userAuthInfo.setQueryUrl(\"https://na31.salesforce.com/services/data/v34.0/query/\");\n    return userAuthInfo;\n  }\n\n  @Override\n  public boolean isApplicationInstalled(String userId, String orgId, String sessionId) {\n    validateSession(userId, orgId, sessionId, null);\n    return orgId.startsWith(\"valid\");\n  }\n\n  @Override\n  public RequestInfo getSessionInfo(String userId, String orgId, String sessionId) {\n    UserAuthInfo userAuthInfo = validateSession(userId, orgId, sessionId, null);\n\n    try {\n      TenantMasterQuery query = new TenantMasterQuery();\n      query.disabled(Boolean.FALSE);\n      query.externalTenantId(orgId);\n      final Tenant tenant = tenantMasterDAO.findOne(query);\n      if (tenant == null || StringUtils.isBlank(tenant.getTenantId())) {\n        throw new SystemException(\"Tenant doesn't exist\", PNP_TENANT_NON_EXISTENT);\n      }\n      RequestInfo requestInfo = new RequestInfo();\n\n      TenantAuthInfo tenantAuthInfo = TenantAuthInfo.fromTenant(tenant);\n      requestInfo.setCanonicalTenantAuthInfo(tenantAuthInfo);\n\n      requestInfo.setUserAuthInfo(userAuthInfo);\n      requestInfo.setAutheticatedBy(AuthenticationSource.SFDC.getAuthSource());\n\n      return requestInfo;\n    } catch (SystemException e) {\n      LOGGER.error(\"Could not fetch the tenant based o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4d1adb5-fd9b-400b-83f2-c6f3587d0474","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/hubspot/HubspotCaasSearchRequestCriteriaBuilder.java","startLine":71,"endLine":105,"content":"ue);\n                }\n                filterRule.setOperator(getHubspotSyncOperator(criteria.getOperatorType()));\n                filterRule.setPropertyName(criteria.getFieldName());\n                hubspotFilters.add(filterRule);\n                hubspotFilterGroup.setFilters(hubspotFilters);\n                filterGroups.add(hubspotFilterGroup);\n            }\n        }\n        return filterGroups;\n    }\n\n    private static Object convertTimeToEPOCH(Object values) throws CaasException {\n        checkForValidDate(values);\n        try {\n            DateTimeFormatter fmt = DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)\n                    .withZone(ZoneOffset.UTC);\n            return Instant.from(fmt.parse(values.toString())).toEpochMilli();\n        } catch (Exception e) {\n            log.error(\"Error in parsing the date\", e);\n            return fallBackToEpoch(values);\n        }\n    }\n\n    private static void checkForValidDate(Object values) throws CaasException {\n        if (ObjectUtils.isEmpty(values)) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, \"\", DuctErrorConstants.INVALID_VALUE + values.toString()));\n        }\n    }\n\n    private static Object fallBackToEpoch(Object values) throws CaasException {\n        try {\n            log.info(\"falling back  with EPOCH date\");\n            Calendar calendar = Calendar.getInstance();\n            calenda","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4633232c-ff8d-4f30-a94d-4c9db291f886","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":131,"endLine":161,"content":"     baseObjectPluralName, relationships, false);\n                        }\n                    }\n                }\n            } else {\n                log.error(\"field: {} not found\", rule.getFieldInfo().getJsonPath());\n                throw new SystemException(\"field: \" + rule.getFieldInfo().getJsonPath() + \" not found\", CoreErrorCode.SYSTEM_ERROR);\n            }\n\n            handleDataTypeAndOperator(canonicalName, rule, stringBuilder, originalDataType);\n            stringBuilder.append(SPACE);\n            whereClause.add(stringBuilder.toString());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            for (FilterRule childRule : rule.getRules()) {\n                childRules.addAll(buildRule(childRule, objectToFieldDBNameToFieldDefinitionMap, relationships, objectName,\n                        baseObjectPluralName, masterLookUpConfiguration, fieldsFlattened));\n            }\n            whereClause.add(\"(\" +\n                    Joiner.on(null == rule.getCondition() ?\n                            SPACE + FilterCondition.AND.getFilterCondition().toLowerCase()\n                            : SPACE + rule.getCondition().getFilterCondition().toLowerCase() + SPACE).join(childRules) + \")\");\n        }\n        return whereClause;\n    }\n\n    private static Object getFilterValue(FilterRule rule) {\n        if (GainsightCollectionUtils.nullSafeList(rule.getValues()).isEmpty()) {\n            return null;\n        }\n        FieldInfo fieldInfo = rule.getValue","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e81a064-528b-4402-8a77-3ccd09407462","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/SAPDatasphereConnectionServiceImpl.java","startLine":117,"endLine":147,"content":"ull || StringUtils.isBlank(oldValue.toString())) {\n      return true;\n    }\n    try {\n      byte[] decodedNewPassword = java.util.Base64.getDecoder().decode(newValue);\n      return !Arrays.equals(decodedNewPassword, (byte[]) oldValue);\n    } catch (IllegalArgumentException e) {\n      log.error(\"Not an encoded value {}\", e);\n      return true;\n    }\n  }\n\n  private Map<String,Object> getIpaasPropertiesFromDB(PNPConnectionsInfo pnpConnectionsInfo) {\n    return MAPPER.convertValue(pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES), new TypeReference<Map<String, Object>>() {});\n  }\n\n  @SneakyThrows\n  public boolean authenticate(PNPConnectionInput pnpConnectionInput) {\n    PreparedStatement preparedStatement = null;\n    ResultSet resultSet = null;\n    Connection connection = null;\n    try {\n      Properties properties = new Properties();\n      properties.put(USER, getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionInput.getPnpConnectionsInfo(), USER));\n      properties.put(PASSWORD, getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionInput.getPnpConnectionsInfo(), PASSWORD));\n\n      String connectionUrl = String.format(SAP_HANA_BASE_URL, getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionInput.getPnpConnectionsInfo(), HOST));\n      String schemaName = getPropertiesFromPNPConnectionsInfoProperties(pnpConnectionInput.getPnpConnectionsInfo(), SCHEMA);\n\n      connection = createConnection(connectionUrl, properties);\n      preparedStatement = ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"345ef762-ab2a-472f-a73d-dad35b8271ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":131,"endLine":155,"content":"Details.get(DATA_TYPE_NAME)).toLowerCase();\n    retMap.put(FIELD_NAME, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n    retMap.put(DB_NAME, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n    retMap.put(DuctConstants.DescribeMetaConstants.LABEL, String.valueOf(fieldDetails.get(COLUMN_NAME)));\n    retMap.put(OBJECT_LABEL, objectName);\n    retMap.put(OBJECT_DBNAME, objectName);\n\n    DataTypeMappings dataTypeMappingsForField = getDataTypeMappingFromExternalSourceDataType(connectorConfig, fieldDataType);\n\n    if (Objects.isNull(dataTypeMappingsForField) || StringUtils.isBlank(dataTypeMappingsForField.getGainsightDatatype().name())) {\n      log.info(\"[SAP HANA] External DataType {} is not supported, hence skipping it\", DuctUtils.valueOf(fieldDataType));\n      return null;\n    }\n\n    String gainsightDataType = dataTypeMappingsForField.getGainsightDatatype().name();\n    retMap.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, gainsightDataType);\n\n    if (null != fieldDetails.get(LENGTH) && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMeta())\n            && dataTypeMappingsForField.getMeta().containsKey(SUPPORT_LENGTH)\n            && Boolean.TRUE.equals(Boolean.valueOf(dataTypeMappingsForField.getMeta().get(SUPPORT_LENGTH).toString()))) {\n      metaProperties.put(SUPPORT_LENGTH, true);\n      metaProperties.put(LENGTH, Integer.valueOf(fieldDetails.get(LENGTH).toString()));\n    }\n\n    if (null != fieldDetails.get(SCALE) && ObjectUtils.isNotEmpty(dataTypeMappingsForField.getMe","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c1d2a450-0ecc-45dd-a5f3-994d28a1ba3a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":61,"endLine":89,"content":"aServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasCaasMetadataServiceImpl.class);\n\n    /*  ipaas constants attributes api */\n    private static final String VENDOR_DISPLAY_NAME = \"vendorDisplayName\";\n    private static final String NULLABLE = \"nullable\";\n    private static final String PATH = \"path\";\n    private static final String VENDOR_NATIVE_TYPE = \"vendorNativeType\";\n    private static final String VENDOR_PATH = \"vendorPath\";\n    private static final String PICKLIST_VALUES = \"picklistValues\";\n    private static final String CHOICES = \"choices\";\n    private static final String NAME = \"name\";\n    private static final String TYPE = \"type\";\n    private static final String CE_TYPE = \"CE_TYPE\";\n    private static final String OBJECTS = \"objects\";\n    private static final String METADATA = \"metadata\";\n    private static final String VENDOR_READ_ONLY = \"vendorReadOnly\";\n    protected static final int TIMEOUT = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"gs.integration.api.metadata.timeout.issue\", 90000);\n    private static final String VENDOR = \"vendor\";\n    private static final String MASK = \"mask\";\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    @Autowired\n    private IpaasAccountUserDetailsDao ipaasAccountUserDetailsDao;\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n    @Autowired\n    private CaasConnectorConfigService caasConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0702b4ee-fc2f-461e-adbf-13390e798269","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectTenantConfigDAO.java","startLine":1,"endLine":12,"content":"package com.gainsight.duct.dao.config;\n\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.duct.beans.config.CaasObjectTenantConfig;\n\npublic interface CaasObjectTenantConfigDAO {\n  CaasObjectTenantConfig getTenantSpecificObjectConfigs(ConnectorType connectorType, String tenantId) throws CaasException;\n  CaasObjectTenantConfig getConnectionIdSpecificObjectConfigs(ConnectorType connectorType, String tenantId,\n                                                                    String connectionId) throws CaasException;\n  CaasObjectTenantConfig upsertConfigs(CaasObjectTenantConfig objectListConfig);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"779875cf-fd6f-424f-84d5-2caba0b4d2d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/CallOutOAuthServiceImpl.java","startLine":37,"endLine":55,"content":"vate static final String PAYLOAD_CONTENT_TYPE = \"payloadContentType\";\n    private static final String SERVICE_PROVIDER_AUTHORIZATION_URI = \"serviceProviderAuthorizationURI\";\n    private static final String SERVICE_PROVIDER_ACCESS_TOKEN_URI = \"serviceProviderAccessTokenURI\";\n    private static final String AUTHORIZATION_CODE = \"authorization_code\";\n    private static final String REFRESH_TOKEN = \"refresh_token\";\n    public static final String CLIENT_CREDENTIALS = \"client_credentials\";\n\n    @Override\n    public Map getOAuthAccessToken(PNPConnectionsInfo pnpConnectionsInfo, String code, String grantType) throws IOException {\n        if (!(pnpConnectionsInfo.getTokenDetail() instanceof OAuthV2TokenDetail)) {\n            throw new SystemException(\"Invalid token detail for oauth connection: \" + pnpConnectionsInfo.getTokenDetail().getClass().getSimpleName());\n        }\n        OAuthV2TokenDetail oAuthV2TokenDetail = (OAuthV2TokenDetail) pnpConnectionsInfo.getTokenDetail();\n        String serviceProviderAccessTokenURI = oAuthV2TokenDetail.getServiceProviderAccessTokenURI();\n        String payloadContentType = oAuthV2TokenDetail.getPayloadContentType();\n        payloadContentType = StringUtils.isNotBlank(payloadContentType) ? payloadContentType : MediaType.APPLICATION_JSON_VALUE;\n        String payload = getOAuthAccessTokenRequestPayload(payloadContentType, oAuthV2TokenDetail, code, grantType);\n        Map<String, String> headers = new HashMap<>();\n        headers.put(\"Content-Type\", ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bb96b29-b719-4702-9c23-69810f8ca14c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":116,"endLine":136,"content":"cket, String sourceFilePath, String targetBucket, String destinationFilePath) {\n        try {\n            if(targetBucket.equals(sourceBucket) && destinationFilePath.equals(sourceFilePath)) {\n                return;\n            }\n            gainsightS3.copyObject(sourceBucket,sourceFilePath,targetBucket,destinationFilePath);\n            LOGGER.error(String.format(\" Successfully copy File at S3 @path : %s\",destinationFilePath));\n        } catch (AmazonS3Exception exception) {\n            LOGGER.error(String.format(\"Unable to copy file from bucket: %s with path: %s to bucket:%s with path: %s\",sourceBucket, sourceFilePath, targetBucket, destinationFilePath), exception);\n        } catch (Exception e) {\n            LOGGER.error(String.format(\"Some Exception occurred while copying file from bucket: %s with path: %s to bucket:%s with path: %s\",sourceBucket, sourceFilePath, targetBucket, destinationFilePath),e);\n        }\n    }\n\n    public static void uploadFileStreamOnS3V2(String key, String fileName, InputStream inputStream, long length, String jobId) throws CaasException {\n        try {\n            StopWatch stopWatch = new StopWatch();\n            LOGGER.info(\"Uploading file on S3 @ path {} started\",  key);\n            stopWatch.start();\n            if (length > DeploymentProperties.getDeploymentProperties().getLongValue(\"s3.max.file.upload.size\", MAX_CONTENT_LENGTH) &&\n                    !Boolean.valueOf(DebugFeatureConfigUtil.getFeatureCacheEvaluateService(RequestContextProvi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b5f965d9-6dd4-47c4-8532-b3b64bed9f91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/ConfigLoader.java","startLine":62,"endLine":96,"content":"urceArgs().toString(), args.toString());\n        Boolean loadConfigs = DeploymentProperties.getDeploymentProperties().getBooleanValue(\"caas.config.refresh\",false);\n        if (args.getNonOptionArgs().contains(\"-loadConfigs\") && loadConfigs) {\n            loadConfigsOnStartUp();\n        } else {\n            LOGGER.warn(\"Skipping config refresh\");\n        }\n    }\n\n    private void loadConfigsOnStartUp() {\n        LOGGER.info(\"Loading configs to global DB on server startup!!!\");\n        try {\n            loadCaasObjectAttributeConfigs();\n            loadCaasObjectConfigs();\n            loadCaasConnectorConfigs();\n            loadCaasObjectApiConfigs();\n            loadMetadataTransformationConfig();\n            loadCaasMetadataEngineConfigs();\n        } catch (IOException ex) {\n            LOGGER.error(\"Exception occurred while loading connection configs. {}\", ex.getMessage(), ex);\n        }\n    }\n\n    private boolean loadCaasObjectAttributeConfigs() throws IOException {\n        ClassPathResource r = new ClassPathResource(CAAS_OBJECT_ATTRIBUTES_CONFIG);\n        try (InputStream in = r.getInputStream()) {\n            List<CaasObjectAttributesConfig> caasObjectAttributesConfigs = new ObjectMapper().readValue(in, new TypeReference<List<CaasObjectAttributesConfig>>() {\n            });\n            caasObjectAttributesConfigDAO.dropCollection();\n            caasObjectAttributesConfigDAO.insertAll(caasObjectAttributesConfigs);\n        }\n        return true;\n    }\n\n    private boolean l","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05b9bfbd-0fac-42e1-9d7b-8fddf0b359d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":33,"endLine":56,"content":" {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DuctConnectorCalloutUtil.class);\n    private static final String CONNECTOR_BASE_URL = \"connector.base.url\";\n\n    public static PNPConnectionInput createConnection(PNPConnectionInput pnpConnectionInput) throws CaasException {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(CONNECTOR_BASE_URL) + \"/v1.0/connector/ipaas/connection\";\n        Map<String, String> headers = getHeaders();\n        HttpResponseWrapper<ResponseObj> response = null;\n        try {\n            LOGGER.info(\"Invoking create connection : {}\", url);\n            response = AdvancedHttpHelper.post(url, headers, GainsightUtils.convertObjectToJson(pnpConnectionInput), ResponseObj.class);\n            if (response.getResponseBody() != null) {\n                LOGGER.info(\"Response of create connection to {}, is {}\", url, JsonUtil.toJsonString(response.getResponseBody()));\n                ResponseObj responseObj = response.getResponseBody();\n                if (responseObj.isResult()) {\n                    return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), PNPConnectionInput.class);\n                } else if (responseObj.getErrorDesc() != null) {\n                    throw new SystemException(responseObj.getErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n                }\n            }\n            return null;\n        } catch (Exception e) {\n            if (response != null && respon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b699c683-6b6c-4a7b-a9d9-25d776b90223","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":167,"endLine":187,"content":" if (pConn.getPnpConnectionsInfo().getConnectionType() == ConnectorType.GS_BULK_API) {\n            auditDetails.setOldValue(((BaseTokenDetail) (beanPropertyTracker.getOldValue())).getAccessKey().getString());\n            auditDetails.setNewValue(((BaseTokenDetail) (beanPropertyTracker.getNewValue())).getAccessKey().getString());\n        } else {\n            auditDetails.setOldValue(((BaseTokenDetail) (beanPropertyTracker.getOldValue())).getAccessSecret().getString());\n            auditDetails.setNewValue(((BaseTokenDetail) (beanPropertyTracker.getNewValue())).getAccessSecret().getString());\n        }\n    }\n\n    private static AuditRecord generateDeleteAuditLogs(AuditEntityType auditEntityType, UnifiedConnectorRequest unifiedConnectorRequest, EventStatusEnum eventStatusEnum) {\n        AuditRecord auditRecord = getBasicAuditRecordObject(auditEntityType, unifiedConnectorRequest, eventStatusEnum);\n        AuditDetails auditDetails = new AuditDetails();\n        List<AuditDetails> auditDetailsList = Lists.newArrayList();\n        auditDetails.setOperationType(AuditOperationType.DELETE);\n        auditRecord.getData().setAuditDetailsList(auditDetailsList);\n        switch (auditEntityType) {\n            case CONNECTION:\n                auditRecord.setEventName(UCConstants.DELETE_CONNECTION + ((PNPConnectionsInfo) unifiedConnectorRequest.getRequestObject()).getConnectionName());\n                auditDetails.setAdditionalInfo(\"Connection Deleted\");\n                break;\n            case","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a72ea3da-8c8a-4790-8666-2050cf72efdb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":172,"endLine":182,"content":"potOptions.get(ID).toString());\n                    //TODO:: Need to be checked based on which property we can set active\n                    picklistOption.put(ACTIVE, true);\n                    picklistOptions.add(picklistOption);\n                }\n            }\n        }\n        gsFieldDefinition.put(OPTIONS, picklistOptions);\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1376177-c982-40f6-a350-4e833e01734a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasConnectorConfig.java","startLine":37,"endLine":59,"content":"ate String sourceVersion;\n    private String primaryDomain;\n    private boolean flattenExternalResponse = true;\n    private boolean validateObjectForMetadata = true;\n    private List<String> secondaryDomains;\n    private List<AuthInfo> authInfo;\n    private Map<String,Object> properties = new HashMap<>();\n    private List<DataTypeMappings> dataTypeMappings;\n    private List<DataTypeMappings> fallbackDataTypeMappings;\n    private Map<String, ComplexType> complexTypeMappings;\n    private Map<String, Object> objectLevelFieldsExpression;\n    private List<String> supportedWriteBackObjects;\n    private List<DuctDataOperation> supportedWriteBackOperations;\n    private List<String> unsupportedObjects = new ArrayList<>();\n    private Map externalJarAdditionalProperties;\n    private Map metadataTransformationConfig;\n    private Map<String, Object> writebackConfig;\n    private Map<String, Object> additionalProperties = new HashMap<>();\n\n    public AuthInfo getAuthInfo(AuthorizationType authorizationType){\n        return authInfo.stream().filter(i->i.getAuthType().equals(authorizationType)).findAny().orElse(null);\n    }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57a511a5-a6be-4761-94cf-ed3de6f26f75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1428,"endLine":1448,"content":"onDetail.getIntegrationKey(), CaasValidationCode.INVALID_CLIENT_INPUT, \"integrationKey can't be null\");\n        PendoConnectionDetail processedPendoConnectionDetail = new PendoConnectionDetail();\n        processedPendoConnectionDetail.setIntegrationKey(cryptUtil.encrypt(pendoConnectionDetail.getIntegrationKey()).getValue());\n        if (MapUtils.isNotEmpty(pendoConnectionDetail.getProperties())) {\n            Map<String, Object> processedPropertyMap = new HashMap<>();\n            for (Map.Entry<String, Object> property : pendoConnectionDetail.getProperties().entrySet()) {\n                if (null != property.getKey()) {\n                    processedPropertyMap.put(property.getKey(), cryptUtil.encrypt(GainsightUtils.valueOf(property.getValue())).getValue());\n                }\n            }\n            processedPendoConnectionDetail.setProperties(processedPropertyMap);\n        }\n        return processedPendoConnectionDetail;\n    }\n\n    private void authorizeServiceAccountDetail(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            log.info(\"Authorizing Connection\");\n            GainsightBigQueryChannelFactory gainsightBigQueryChannelFactory = new GainsightBigQueryChannelFactory();\n            String serviceAccountJson = GainsightUtils.decodeBase64((String) ((Map) pnpConnectionsInfo.getProperties()).get(\"serviceAccountConfiguration\"));\n            GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"46ccb3cb-8e63-4698-b083-6ecd384aa302","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/DatabricksCaasMetadataServiceImpl.java","startLine":157,"endLine":182,"content":"rted()) {\n                return null;\n            }\n            meta.putIfAbsent(ORIGINAL_DATA_TYPE, DuctConstants.ARRAY.toLowerCase());\n        } else if (DuctUtils.isMapType(fieldDataType)) {\n            dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype()\n                    .equalsIgnoreCase(DuctConstants.MAP)).findFirst().get();\n            if (!dataTypeMappingsForField.isSupported()) {\n                return null;\n            }\n            meta.putIfAbsent(ORIGINAL_DATA_TYPE, DuctConstants.MAP.toLowerCase());\n        } else {\n            retMap.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, DataType.STRING.name());\n            meta.put(FILTERABLE, false);\n            meta.put(EXTERNALLY_FILTERABLE, false);\n        }\n\n        if (null != dataTypeMappingsForField) {\n            retMap.put(DuctConstants.DescribeMetaConstants.DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n            meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedFilterOperators().isEmpty());\n            meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n\n            /*TODO:\n            For Unity Catalog below properties should be read from INFORMATION_SCHEMA\n            Below is valid for only Hive_Metastore, as it doesn't have access to INFORMATION_SCHEMA.*/\n            meta.put(CREATEABLE, GainsightCollectionUtils.nullSafeMap(dataTypeMappingsForField.g","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f8683fad-bb01-4196-9c20-3644c93e4e05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":205,"endLine":232,"content":"eData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = new ArrayList<>();\n\n        List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(ConnectorType.MSTEAMS);\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(ductResponse.getExternalResourceName())).findFirst();\n        if (caasObjectApiConfig.isPresent() && null != caasObjectApiConfig.get().getAdditionalProperties().get(RESPONSE_KEY))\n            externalResultsList = MAPPER.convertValue(ductResponse.getExternalSystemResponse().get(caasObjectApiConfig.get().getAdditionalProperties().get(RESPONSE_KEY)), new TypeReference<List<Map<String, Object>>>() {\n            });\n        else\n            externalResultsList.add(ductResponse.getExternalSystemResponse());\n        queryAPIResponseBean.setNextPageToken(ductResponse.getNextPageToken());\n        queryAPIResponseBean.setRecords(e","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82a979a8-d68d-47c6-b2bc-c22759a1ae0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ZoomCaasMetadataServiceImpl.java","startLine":94,"endLine":103,"content":"tion(List<GainsightZoomFieldDescription> gainsightZoomFieldDescription, String objectLabel, PNPConnectionsInfo pnpConnectionsInfo) {\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectLabel);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectLabel);\n        objectDefinition.put(FIELDS, gainsightZoomFieldDescription);\n        return objectDefinition;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"884ab8ab-4255-4e47-b4e5-52b20ca78717","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":374,"endLine":385,"content":"ALUE), new TypeReference<List<Map<String, Object>>>() {});\n                if (ObjectUtils.isNotEmpty(records)) {\n                    meetingId = records.get(0).get(ID).toString();\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error in fetching meeting id for recordings and transcripts\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n        return meetingId;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5680c9a0-9321-4af0-ae89-420760858b76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/BigqueryCaasMetadatServiceImpl.java","startLine":80,"endLine":98,"content":"tory = new GainsightBigQueryChannelFactory();\n        GainsightBigQueryChannelService gainsightBigQueryChannelService = gainsightBigQueryChannelFactory.getChannelService(pnpConnectionsInfo);\n\n        GainsightBigQueryEntityDescription response = gainsightBigQueryChannelService.getMetaData(objectName);\n\n        List<GainsightBiqQueryFieldDescription> fields = nullSafeList(response.getGainsightBigQueryFieldDescriptions());\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.BIGQUERY);\n        List<Map> fieldList = fields.stream()\n                .map(field -> constructFieldMap(field, objectName, connectorConfig))\n                .collect(Collectors.toList());\n        Map<String, Object> objectDefinition = new HashMap<>();\n        objectDefinition.put(OBJECT_ID, objectName);\n        objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n        objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        objectDefinition.put(LABEL, objectName);\n        objectDefinition.put(DuctConstants.DescribeMetaConstants.FIELDS, fieldList);\n        List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n        MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, objectDefinition);\n        return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(objectDefinit","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b73b140a-785e-4a48-8897-a4f4a7145c6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":632,"endLine":653,"content":"omer_account\", Arrays.asList(\"core_company\"));\n        superClassInfo.put(\"customer_contact\", Arrays.asList(\"sys_user\"));\n        superClassInfo.put(\"incident\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"sc_req_item\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"sc_request\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"service_entitlement\", new ArrayList<>());\n        superClassInfo.put(\"sn_customerservice_case\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"sn_install_base_item\", new ArrayList<>());\n        superClassInfo.put(\"sys_m2m\", Arrays.asList(\"sys_metadata\"));\n        superClassInfo.put(\"sys_user\", new ArrayList<>());\n        superClassInfo.put(\"task_sla\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_model\", new ArrayList<>());\n        superClassInfo.put(\"sn_customerservice_escalation\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"u_customer_services\", Arrays.asList(\"sys_import_set_row\"));\n        superClassInfo.put(\"sys_user_group\", new ArrayList<>());\n        superClassInfo.put(\"problem\", Arrays.asList(\"task\"));\n        superClassInfo.put(\"cmdb_ci_outage\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci_service\", Arrays.asList(\"cmdb_ci\", \"cmdb\"));\n        superClassInfo.put(\"cmdb_ci_appl\", Arrays.asList(\"cmdb_ci\", \"cmdb\"));\n        superClassInfo.put(\"cmdb_rel_ci\", new ArrayList<>());\n        superClassInfo.put(\"cmdb_ci\", Arrays.asList(\"cmdb\"));\n        superClassInfo.put(\"sn_install_base_m2m_affected_install_base","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54ddf211-5405-4b31-8207-dc63c8bccfbf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/IntercomV2ConnectionServiceImpl.java","startLine":131,"endLine":156,"content":"tegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n    String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n    Map<String, Object> flattenConnectionInfoWithOAuthAndCallbackUrl = null;\n    String authUrl = null;\n    try {\n      flattenConnectionInfoWithOAuthAndCallbackUrl = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n      authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n    } catch (Exception e) {\n      log.error(\"Exception occurred while getting authorization url\",e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, null, null, \"Error occurred while trying to generate authorization url\"));\n    }\n    return authUrl;\n  }\n\n\n\n  @Override\n  public PNPConnectionsInfo revokeAuthorization() {\n    return null;\n  }\n\n  @Override\n  public PNPConnectionsInfo deleteConnection() {\n    return null;\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dad4acfc-0c3b-42f0-9680-f0a9641100e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":406,"endLine":436,"content":"if (!isPicklistPresent)\n                        pickListLabel += (\",\\\"\" + value + \"\\\"\");\n                }\n                pickListLabel = pickListLabel.substring(1);\n                if (picklistFieldValue.startsWith(\"[\")) {\n                    pickListLabel = \"[\" + pickListLabel + \"]\";\n                }\n            } else {\n                for (PicklistOption option : picklistOptions) {\n                    if (picklistFieldValue.equals(option.getPicklistValue())) {\n                        pickListLabel = option.getPicklistLabel();\n                        break;\n                    }\n                }\n            }\n            if (StringUtils.isNotEmpty(pickListLabel)) {\n                picklistObj.put(picklistField, pickListLabel);\n            }\n        }\n    }\n\n    private Map<String, Object> createQueryParams(DataExtractionRequest dataExtractionRequest, String nextPage) throws\n            Exception {\n        Map<String, Object> queryParams = Maps.newHashMap();\n        try {\n            if (null != dataExtractionRequest.getFilterRule()) {\n                if (CollectionUtils.isNotEmpty(dataExtractionRequest.getFilterRule().getRules())) {\n                    if(dataExtractionRequest.isDuct()){\n                        queryParams.put(IPaasConstants.WHERE, DuctSingleCEQueryBuilder.createQuery(dataExtractionRequest.getFilterRule()));\n                    }else{\n                        queryParams.put(IPaasConstants.WHERE, CEQueryBuilder.createQuery(dataExtractionRequest.getFilter","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc300f70-261d-46f3-833d-8e14381811b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ServicenowNativeDataSourceService.java","startLine":294,"endLine":317,"content":"ist();\n            rule.getRules().forEach(childRule -> childRules.addAll(buildRule(childRule)));\n            whereClause.add(Joiner.on(UCConstants.SPACE + getServicenowConditionalOperator(rule.getCondition()) + UCConstants.SPACE).join(childRules));\n        }\n        log.info(\"Built Servicenow query: {}\", whereClause);\n        return whereClause;\n    }\n\n    private static String getServicenowConditionalOperator(FilterCondition filterCondition) {\n        String conditionalOperator;\n        switch (filterCondition) {\n            case AND:\n                conditionalOperator = SNOW_AND;\n                break;\n            case OR:\n                conditionalOperator = SNOW_OR;\n                break;\n            default:\n                throw new RuntimeException(\"Invalid filter condition\");\n        }\n        return conditionalOperator;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"df28e6f5-b85c-4b09-b0cf-1f91017e0d35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/DuctRequestDTO.java","startLine":1,"endLine":41,"content":"package com.gainsight.duct.beans.dto;\n\nimport com.gainsight.commons.gsobjects.ImportLookupLite;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.joda.time.DateTime;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class DuctRequestDTO {\n\n    private String connectionId;\n    private String resourceName;\n    private List<String> fields = new ArrayList<>(); // todo should it be mappings\n    private Map<String, Object> data; //should be a list of map\n    private List<Map<String, Object>> records; //list of map\n    private String callbackUrl;\n    private Map<String, Object> properties;\n    private String filteredDateField;\n    private String from;\n    private String to;\n    private Boolean isSynchronized = false;\n    private boolean resolvePickListOptions = false;\n    private boolea","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"087e7e97-e8c9-42cf-8aaa-b6c6d5c28bb9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":177,"endLine":197,"content":"impleCryptor();\n    public static final String AUTH_SCOPE = \"AUTH_SCOPE\";\n    private static final String BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"callback_base_url\");\n    private static final String SECRET_KEY = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n    public static final char[] CHARSET = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\n    public static final String CLIENT_CREDENTIALS = \"client_credentials\";\n    public static final String V2 = \"v2\";\n    private static final HttpUrlConnectionUtils httpUrlConnection = new HttpUrlConnectionUtils();\n    private static final String DATA_PODIUM_BASE_URL = DeploymentProperties.getDeploymentProperties().getValue(\"data.podium.base.url\");\n\n    private static final String DATA_PODIUM_DELETION_URL = DATA_PODIUM_BASE_URL + \"/v1/gs/data-podium/%s\";\n    private static final String IPAAS_CONNECTION = \"ipaasConnection\";\n    private MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n\n\n    @Override\n    public Object refreshAccessToken(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            AuthService authService = new AuthServiceImpl(pnpConnectionInfoDao);\n            MetadataEngineConfig metadataEngineConfig = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(pnpConnectionsInfo.getConnectionType());\n            List<A","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9a6004cb-fb96-4bdc-a3e6-96ed61d0867a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/FreshdeskDataSourceService.java","startLine":26,"endLine":54,"content":"nums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.integration.utils.CommonUtils;\nimport com.gainsight.platform.metadata.DataType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightUtils;\nimport com.github.wnameless.json.flattener.JsonFlattener;\nimport com.github.wnameless.json.unflattener.JsonUnflattener;\nimport com.google.common.collect.Lists;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stre","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e8b716ba-9659-4f66-b1c2-2e603d515ad9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataCacheDaoImpl.java","startLine":1,"endLine":39,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDaoImpl;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.database.GainsightMongoConverter;\nimport com.gainsight.integration.bean.metadata.engine.MetadataCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic class MetadataCacheDaoImpl extends AbstractEntityDaoImpl<MetadataCache> implements MetadataCacheDao {\n    @Autowired\n    public MetadataCacheDaoImpl(DatabaseTemplateService databaseTemplateService) {\n        super(databaseTemplateService, MetadataCache.class);\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        //added to handel (.) while insert or update\n        MongoTemplate mongoTemplate = getSchemaMongoTemplate();\n        GainsightMongoConverter.setKeyDotReplacement(mongoTemplate);\n        return mongoTemplate;\n    }\n\n    @Override\n    protected void setEntityId(MetadataCache metadataCache, String s) {\n        metadataCache.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(MetadataCache metadataCache, String s) {\n        metadataCache.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ee15d58-d602-4d15-9131-d205d0a6efc8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":361,"endLine":395,"content":"(fieldCriteria));\n        return criteria;\n    }\n\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        if (ConnectorType.HUBSPOT.equals(ductResponse.getConnectorType())) {\n            List<Map<String, Object>> externalResultsList = (List<Map<String, Object>>) ductResponse.getExternalSystemResponse().get(RESULTS);\n            for (Map<String, Object> internalResultsMap : externalResultsList) {\n                Map<String, Object> propertiesMap = (Map<String, Object>) internalResultsMap.get(PROPERTIES);\n                if (internalResultsMap.containsKey(ID))\n                    propertiesMap.put(ID, internalResultsMap.get(ID));\n                responseList.add(propertiesMap);\n            }\n        } else {\n            Optional<ResourceConfig> first = connectorCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca64b3e0-2ebc-41a3-b468-bed4fee404f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":1,"endLine":27,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.duct.beans.*;\nimport com.gainsight.duct.beans.config.CaasObjectApiConfig;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.constants.DuctConstants;\nimport com.gainsight.duct.constants.DuctErrorConstants;\nimport com.gainsight.duct.dao.config.CaasObjectApiConfigDao;\nimport com.gainsight.duct.dh.DataHighwayInteractionServiceBase;\nimport com.gainsight.duct.enums.CaasValidationCode;\nimport com.gainsight.duct.utils.DuctUtils;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.integration.connector.zoom.service.GainsightZoomChannelFactory;\nimport com.gainsight.integration.connector.zoom.service.GainsightZoomFetchService;\nimport com.gainsight.integration.connector.zoom.service.GainsightZoomFetchServiceImpl;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c8102cd-7ce2-4917-b7dc-57979f19d64d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":59,"endLine":89,"content":" eventStatusEnum) {\n        AuditRecord auditRecord = null;\n        switch (auditOperationType) {\n            case CREATE:\n                auditRecord = generateCreateAuditLogs(auditEntityType, unifiedConnectorRequest, eventStatusEnum);\n                break;\n\n            case UPDATE:\n                auditRecord = generateUpdateAuditLogs(auditEntityType, unifiedConnectorRequest, eventStatusEnum, propertyTrackerLists);\n                break;\n\n            case DELETE:\n                auditRecord = generateDeleteAuditLogs(auditEntityType, unifiedConnectorRequest, eventStatusEnum);\n                break;\n\n            default:\n                LOGGER.error(\"Invalid Audit Logging Operation\");\n        }\n        return auditRecord;\n    }\n\n    private static AuditRecord generateCreateAuditLogs(AuditEntityType auditEntityType, UnifiedConnectorRequest unifiedConnectorRequest, EventStatusEnum eventStatusEnum) {\n        AuditRecord auditRecord = getBasicAuditRecordObject(auditEntityType, unifiedConnectorRequest, eventStatusEnum);\n        auditRecord.setEventType(AuditOperationType.CREATE);\n        AuditDetails auditDetails = new AuditDetails();\n        List<AuditDetails> auditDetailsList = Lists.newArrayList();\n        auditDetailsList.add(auditDetails);\n        auditDetails.setOperationType(AuditOperationType.CREATE);\n        switch (auditEntityType) {\n            case CONNECTION:\n                auditRecord.setEventName(UCConstants.CREATE_CONNECTION + ((PNPConnectionsInfo) unifiedConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18e5c4d6-2b46-4f0c-9ecc-c818cff0a491","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":115,"endLine":136,"content":"            baseObjectPluralName, relationships, true);\n                    } else {\n                        log.error(\"Invalid case for the field: {}\", canonicalName);\n                        throw new SystemException(\"Invalid field: \" + canonicalName, CoreErrorCode.SYSTEM_ERROR);\n                    }\n                } else {\n                    if (canonicalName.contains(UCConstants.PERIOD)) {\n                        /*Case for field inside a lookup field.\n                        Example: createdby.systemuser.firstname*/\n                        if (fieldsFlattened) {\n                            canonicalName = computeCanonicalNameForFilter(masterLookUpConfiguration, fieldNameSplitted[0], fieldNameSplitted[1], fieldNameSplitted[2],\n                                    baseObjectPluralName, relationships, false);\n                        } else {\n                            String lookedUpObjectName = objectToFieldDBNameToFieldDefinitionMap.get(objectName).get(fieldNameSplitted[0]).getMeta()\n                                    .getLookupDetail().getLookupObjects().get(0).getObjectName();\n                            canonicalName = computeCanonicalNameForFilter(masterLookUpConfiguration, fieldNameSplitted[0], lookedUpObjectName, fieldNameSplitted[1],\n                                    baseObjectPluralName, relationships, false);\n                        }\n                    }\n                }\n            } else {\n                log.error(\"field: {} not found\", rule.getFieldI","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37abd906-1d16-42c3-8b78-32af884f7e9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dto/ErrorObject.java","startLine":1,"endLine":7,"content":"package com.gainsight.duct.beans.dto;\n\n\npublic class ErrorObject {\n    private String errorCode;\n    private String message;\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2140160-f899-4b25-bccc-f2f753547094","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":38,"endLine":80,"content":"dling\npublic class BionicRuleHttpHelper {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(BionicRuleHttpHelper.class);\n  private static final int TIMEOUT = 60000;\n  private static final String BR_DP_SYS_HTTP_RETRY_COUNT = \"bionic.rules.dp.system.http.retrycount\";\n\n\n  private BionicRuleHttpHelper() {\n  }\n\n  private static final int RETRY_COUNT = DeploymentProperties.getDeploymentProperties()\n          .getIntegerValue(BR_DP_SYS_HTTP_RETRY_COUNT, 1);\n\n  /**\n   * Generic HTTP GET executor which evaluates response body to the specified type\n   * and send back BionicRuleHttpResponseWrapper\n   *\n   * @param uri\n   * @param clazz\n   * @param <T>\n   * @return BionicRuleHttpResponseWrapper\n   * @throws IOException\n   */\n  public static <T> BionicRuleHttpResponseWrapper<T> get(String uri, Map<String, String> headers, Class<T> clazz)\n          throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClientWitRetry(uri);\n      HttpGet httpGet = new HttpGet(uri);\n\n      addHeaders(httpGet, headers);\n      closeableHttpResponse = httpClient.execute(httpGet);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static HttpResponse get(String uri, Map<String, Object> headers, Map<String, Object> queryParams)\n          throws Excep","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cf35ee9-d87d-4663-bf2f-88ff88f03da3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/GainsightAhaFetchProcessor.java","startLine":1,"endLine":30,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.GSIntegrationResponse;\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.util.List;\n\n/**\n * @author puneetsaluja\n * @created 10/03/23\n */\npublic interface GainsightAhaFetchProcessor {\n\n    /**\n     *\n     * @param connectionId\n     * @param objectName\n     * @return\n     */\n    GSIntegrationResponse getEntityDescription(String connectionId, String objectName) throws CaasException;\n\n    /**\n     *\n     * @param connection\n     * @return\n     */\n    List<ObjectDefinition> getListOfAvailableEntities(String connection);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de0481fb-ad2c-42d0-a8da-7a806ed8c0da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":157,"endLine":179,"content":"pported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n    private void validateFieldsWithSeperateLineItem(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> notAvailableFields = new HashSet<>();\n        Set<String> lookupFields = new HashSet<>();\n        Optional<GSFieldDefinition> fieldDefinitionOptional;\n\n        for (String field : ductRequestDTO.getFields()) {\n            fieldDefinitionOptional = objectDefinition.getFields().stream()\n                    .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(field)).findFirst();\n            if (!fieldDefinitionOptional.isPresent()) {\n                String[] sourceFieldNameList = field.split(\"\\\\.\");\n                if (sourceFieldNameList.length == 3 || sourceFieldNameList.length == 4) {\n                    fieldDefinitionOptional = objectDefinition.getFields().stream()\n                            .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(sourceFieldNameList[0] + UCConstants.PERIOD + sourceFieldNameList[1])).findFirst();\n\n                    if (fieldDefinitionOptional.isPresent()) {\n                        GSFieldDefinition gsFieldDefinition = fieldDefinitionOptional.get();\n                       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a0eab5a-3906-4627-9f42-9e38dbf8a3e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":59,"endLine":92,"content":"atic final String SCALE = \"SCALE\";\n  private static final String IS_NULLABLE = \"IS_NULLABLE\";\n\n  @Autowired\n  private CaasObjectAttributesConfigDAO caasObjectAttributesConfigDAO;\n\n  @Autowired\n  private CaasConnectorConfigDAO caasConnectorConfigDAO;\n\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return ConnectorType.SAP_DATASPHERE.equals(connectorType);\n  }\n\n  @Override\n  public List<Map<String, Object>> getObjects(PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> map) throws CaasException {\n    GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n    GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromProperties(pnpConnectionsInfo, true, pnpConnectionsInfo.getAuthorizationType());\n\n\n    List<Map<String, Object>> objects = gainsightSAPDatasphereChannelService.listAllObjects();\n    List<Map<String, Object>> returnObj = new ArrayList<>(objects.size());\n    for (Map<String, Object> object : objects) {\n      String objectName;\n      Map<String, Object> retMap = new HashMap<>();\n      if (object.containsKey(TABLE_NAME)) {\n        objectName = object.get(TABLE_NAME).toString();\n        retMap.put(UPDATEABLE, true);\n        retMap.put(CREATEABLE, true);\n        retMap.put(SOURCE, TABLE);\n      } else {\n        objectName = object.get(VIEW_NAME).toString();\n        retMap.put(SOURCE, VIEW);","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8522e86b-757d-4f13-8edb-2efea2ccfb7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":111,"endLine":142,"content":"ream()\n                .filter(object -> null != object.get(TYPE) && object.get(TYPE).asText().equalsIgnoreCase(VENDOR)).collect(Collectors.toList());\n\n        List<Map<String, Object>> objectList = new ArrayList<>(ipaasVendorObjects.size());\n        for (JsonNode ipaasVendorObject : ipaasVendorObjects) {\n            Map<String, Object> retMap = new HashMap<>();\n            retMap.put(OBJECT_ID, ipaasVendorObject.get(NAME).asText());\n            retMap.put(OBJECT_NAME, ipaasVendorObject.get(NAME).asText());\n            retMap.put(LABEL, ipaasVendorObject.get(NAME).asText());\n            objectList.add(retMap);\n        }\n\n        /*\n        Global Overrides\n         */\n        return transformObjectList(objectList, pnpConnectionsInfo);\n\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        try {\n            Map<String, Object> metadata;\n            List<JsonNode> ipaasMetadata = getIpaasMetadata(objectName, pnpConnectionsInfo);\n            metadata = convertIpaasMetaToDescribeMeta(ipaasMetadata, objectName, pnpConnectionsInfo);\n            /*\n            Global overrides\n             */\n            List<CaasObjectAttributesConfig> configAttributes = caasObjectAttributesConfigDAO.getConfigAttributes(pnpConnectionsInfo.getConnectionType(), objectName);\n            MetadataCommonUtil.overrideAttributesFromConfig(configAttributes, metadata);\n            /*\n         ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"17b45eee-ba41-41b2-a965-0fde9e008472","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":329,"endLine":344,"content":"ect Connection Id\");\n            assertEquals(ductRequestDTO.getResourceName(), ductJobMapping.getResourceName(), \"Incorrect Resource Name\");\n            assertNotNull(ductJobMapping.getFields(), \"Fields should not be null\");\n            assertNotNull(ductJobMapping.getFilterRule(), \"Filter Rule should not be null\");\n            assertEquals(ductRequestDTO.getFilteredDateField(), ductJobMapping.getFilteredDateField(), \"Incorrect Filtered Date field\");\n            assertEquals(dateTime, ductJobMapping.getEndTime(), \"Incorrect end time value\");\n            assertEquals(dateTime, ductJobMapping.getStartTime(), \"Incorrect start time value\");\n            assertNotNull(ductJobMapping.getDuctStatus(), \"Duct Status should not be null\");\n            assertEquals(ductRequestDTO.getCriteria(), ductJobMapping.getCriteria(), \"Incorrect criteria value\");\n            assertEquals(ductRequestDTO.getNextPageToken(), ductJobMapping.getNextPageToken(), \"Incorrect Next page token\");\n\n            assertNotNull(ductResponseDTO, \"Duct Response Should not be null\");\n            assertEquals(SUCCESS_FILE_PATH, ductResponseDTO.getSuccessFilePath(), \"Incorrect SuccessFilePath\");\n            assertEquals(ductRequestDTO.getConnectionId(), ductResponseDTO.getConnectionId(), \"Incorrect Connection Id\");\n            assertEquals(ductRequestDTO.getResourceName(), ductResponseDTO.getResourceName(), \"Incorrect Resource Name\");\n            assertNotNull(ductResponseDTO.getFields(), \"Fields should not be null\");\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"172dabb9-8a33-49a1-ab6b-1305892577a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":217,"endLine":236,"content":"System() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())) {\n            GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreErrorCode.INVALID_PARAMETER,\n                    \"Connection Id should be present\", \"Connection Id should be present\", 400);\n            pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            ductValidationService.validateRequest(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        } else {\n            ductRequestDTO.setTargetSystem(TargetSystem.GAINSIGHT);\n        }\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.GAINSIGHT) {\n            return loadToGainsight(ductJobMapping, ductRequestDTO);\n        } else {\n            ConnectorDataSourceService connectorDataSourceService = connectorDataSourceFactory.getService(ductJobMapping.getConnectorType(), false);\n            DuctResponse ductResponse = connectorDataSourceService.createData(ductJobMapping, pnpConnectionsInfo);\n            return DuctResponse","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"52d303b7-fbc2-4ffc-b146-d54f619ab34a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AhaCaasCriteriaBuilder.java","startLine":47,"endLine":74,"content":"ldNameDataTypeMap, fieldNameMetaMap);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                childRulesList.add(buildRule(childCriteria, fieldNameDataTypeMap, fieldNameMetaMap));\n            }\n            FilterRule current = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private static FilterRule createFilterRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        FilterRule filterRule = new FilterRule() ;\n        FieldInfo internalFieldInfo = new FieldInfo();\n        internalFieldInfo.setFieldType(FieldType.FIELD);\n        internalFieldInfo.setName(criteria.getFieldName().replaceAll(\"[^a-zA-Z0-9_]+\",\"\"));\n        setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), internalFieldInfo,fieldNameMetaMap);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if(ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not null, null the values can be empty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    setDa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e9c3e2a7-0d46-4bcb-b5ca-aecc6f2e88c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/ExternalDatabaseWBMessageProcessor.java","startLine":60,"endLine":80,"content":"O.getMId(), messageRequestVO.getTenantId());\n                MessageInfo<DuctJobMapping> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                DuctJobMapping payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                log.info(\"Received payload for ExternalDatabaseWBMessageProcessor: {}\", payload);\n                DuctCommonUtils.setContext(JsonUtil.readObject(CryptUtil.getSimpleCryptor().decrypt(payload.getEncryptedRequestInfo()), RequestInfo.class));\n                MDCContext.put(\"jobId\", payload.getJobId());\n                MDCContext.put(\"connectorType\", payload.getConnectorType().getValue());\n                if (payload.isBulk()) {\n                    ductService.uploadBulkData(payload);\n                }\n                if (!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.INSERT) {\n                    ductService.createSingleData(payload);\n                } else if (!payload.isBulk() && payload.getDuctDataOperation() == DuctDataOperation.UPDATE) {\n                    ductService.updateSingleData(payload);\n                }\n                log.info(\"DuctMessageProcessor Completed\");\n                resultVO.setDbMessageStatus(DbMessageStatus.COMPLETED);\n            } catch (Exception exception) {\n                log.error(\"Error while processing ExternalDatabaseWBMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDb","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ff2e840-e621-4046-83cf-23eb3812ded4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":779,"endLine":802,"content":"                     ).trim(), pnpConnectionsInfo.getConnectionType()));\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                if (ahaConnectionProperties.containsKey(DuctCommonConstants.SUBDOMAIN)) {\n                    pnpConnectionsInfo.getProperties().put(DuctCommonConstants.SUBDOMAIN, ahaConnectionProperties.get(DuctCommonConstants.SUBDOMAIN));\n                }\n                break;\n            case ECOSYSTEM:\n                assertTrue(testEcosystemsConnection(pnpConnectionsInfo), CaasValidationCode.INVALID_INPUT, \"Unable to authenticate to \" + pnpConnectionsInfo.getConnectionType(), HttpStatus.SC_BAD_REQUEST);\n                pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                Map<String, Object> ecosystemProperties = pnpConnectionsInfo.getProperties();\n                pnpConnectionsInfo\n                        .setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(ecosystemProperties.get(ACCESS_TOKEN)\n                        ).trim(), pnpConnectionsInfo.getConnectionType()));\n                pnpConnectionsInfo.getProperties().put(GENERATE_OOB_JOBS, true);\n                break;\n            case ZENDESK:\n            case JIRA:\n            case ZUORAV2:\n            case INTERCOMV2:\n            case PIPEDRIVEV2:\n            case ZOHOV2:\n            case SERVICENOW:\n                pnpConnectionsInfo.setAuthorizationType(AuthorizationType.OAUTH);\n                CaasConnectionSer","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"981021be-b05a-4498-a911-aff2ae8c2b0d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":483,"endLine":511,"content":"      case PRODUCTBOARD:\n            case SERVICENOW:\n                log.info(\"As of now write back not supported , do nothing\");\n                break;\n            case HUBSPOT:\n                log.info(\"Pushing to Write back Queue for Hubspot\");\n                wbQueueMessage(ductJobMapping, WB_HUBSPOT_MESSAGE_INFO.getSupportedType());\n                break;\n            case DYNAMICS:\n                log.info(\"Pushing to Write back Queue for Dynamics\");\n                wbQueueMessage(ductJobMapping, WB_DYNAMICS_MESSAGE_INFO.getSupportedType());\n                break;\n            case DATABRICKS:\n            case SAP_DATASPHERE:\n                log.info(\"Pushing to Write back Queue for {}\", ductJobMapping.getConnectorType());\n                wbQueueMessage(ductJobMapping, EXT_DB_SYS_WB_MESSAGE_INFO.getSupportedType());\n                break;\n            default:\n                log.info(\"Invalid connector\");\n                break;\n        }\n    }\n\n    private DuctResponse getSynchronizedDuctResponse(DuctJobMapping ductJobMapping, PNPConnectionsInfo\n            pnpConnectionsInfo) throws CaasException {\n        try {\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n            int pageSize = caasConnectorConfig.getAdditionalProperties().containsKey(DuctConstants.ConnectorConfigConstants.SYNC_REQUEST_MAX_PAGE_SIZE) ?\n                    Integer.parseInt(caasConnectorConfig.getAdditiona","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e894a0e4-faf8-43fb-aeb3-2cc576cc92bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/SchedulerDetails.java","startLine":62,"endLine":136,"content":"blic void setPeriod(RunFrequency period) {\n    this.period = period;\n  }\n\n  public String getPeriodValue() {\n    return periodValue;\n  }\n\n  public void setPeriodValue(String periodValue) {\n    this.periodValue = periodValue;\n  }\n\n  public boolean isRecursive() {\n    return isRecursive;\n  }\n\n  public void setRecursive(boolean isRecursive) {\n    this.isRecursive = isRecursive;\n  }\n\n  public String getMonth() {\n    return month;\n  }\n\n  public void setMonth(String month) {\n    this.month = month;\n  }\n\n  public String getDayOfMonth() {\n    return dayOfMonth;\n  }\n\n  public void setDayOfMonth(String dayOfMonth) {\n    this.dayOfMonth = dayOfMonth;\n  }\n\n  public String getDayOfWeek() {\n    return dayOfWeek;\n  }\n\n  public void setDayOfWeek(String dayOfWeek) {\n    this.dayOfWeek = dayOfWeek;\n  }\n\n  public String getCronExpression() {\n    return cronExpression;\n  }\n\n  public void setCronExpression(String cronExpression) {\n    this.cronExpression = cronExpression;\n  }\n\n  public String getTimeZoneName() {\n    return timeZoneName;\n  }\n\n  public void setTimeZoneName(String timeZoneName) {\n    this.timeZoneName = timeZoneName;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    SchedulerDetails that = (SchedulerDetails) o;\n\n    if (isRecursive != that.isRecursive) {\n      return false;\n    }\n    if (cronExpression != null ? !cronExpression.equals(that.cronExpression","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2bf3b105-a167-4bf3-b736-d2fbcd319f5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/GSIntegrationResponse.java","startLine":57,"endLine":95,"content":"his.additionalMessage = additionalMessage;\n    }\n\n    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }\n\n    public void setHttpStatusCode(int httpStatusCode) {\n        this.httpStatusCode = httpStatusCode;\n    }\n\n    public String getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(String errorCode) {\n        this.errorCode = errorCode;\n    }\n\n    public String getErrorMessage() {\n        return errorMessage;\n    }\n\n    public void setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    @Override\n    public String toString() {\n        return \"GSIntegrationResponse{\" +\n                \"isSuccessful=\" + isSuccessful +\n                \", result=\" + result +\n                \", additionalMessage='\" + additionalMessage + '\\'' +\n                \", httpStatusCode=\" + httpStatusCode +\n                \", errorCode='\" + errorCode + '\\'' +\n                \", errorMessage='\" + errorMessage + '\\'' +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8309b70c-c4bf-4bd3-ac2a-7ff641d4fce5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/DataExtractionRequest.java","startLine":35,"endLine":96,"content":"eOnFail;\n    private int maxNoOfRetries;\n    private String queryParamForDataFetch;\n\n    private List<String> ductFields;\n    private String filterQeueryParams;\n    private boolean isDuct;\n\n    public List<String> getDuctFields() {\n        return ductFields;\n    }\n\n    public void setDuctFields(List<String> ductFields) {\n        this.ductFields = ductFields;\n    }\n\n    public String getFilterQeueryParams() {\n        return filterQeueryParams;\n    }\n\n    public void setFilterQeueryParams(String filterQeueryParams) {\n        this.filterQeueryParams = filterQeueryParams;\n    }\n\n    public boolean isDuct() {\n        return isDuct;\n    }\n\n    public void setDuct(boolean duct) {\n        isDuct = duct;\n    }\n\n    public String getPrimaryField() {\n        return primaryField;\n    }\n\n    public void setPrimaryField(String primaryField) {\n        this.primaryField = primaryField;\n    }\n\n    private String primaryField;\n\n    public List<String> getIgnorableErrorMessages() {\n        return ignorableErrorMessages;\n    }\n\n    public void setIgnorableErrorMessages(List<String> ignorableErrorMessages) {\n        this.ignorableErrorMessages = ignorableErrorMessages;\n    }\n\n    private List<String> ignorableErrorMessages= Lists.newArrayList();\n\n    public int getMaxNoOfRetries() {\n        return maxNoOfRetries;\n    }\n\n    public void setMaxNoOfRetries(int maxNoOfRetries) {\n        this.maxNoOfRetries = maxNoOfRetries;\n    }\n\n    public boolean isDateTimeConversionRequired() {\n        return dat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c7659453-7a7c-4b38-96b1-e1199a0b9071","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/MSTeamsDataSourceService.java","startLine":22,"endLine":56,"content":"er.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\n\nimport static org.apache.calcite.avatica.remote.JsonService.MAPPER;\n\n@Service\n@Slf4j\n@Order(1200)\npublic class MSTeamsDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String ID = \"id\";\n    @Autowired\n    private CaasObjectApiConfigDao caasObjectApiConfigDao;\n    private static final String MSTEAMS_EXTRACT_TASK = \"CaasMSTeamsExtract\";\n    private static final String ACCESS_TOKEN = \"access_token\";\n    private static final String REFRESH_TOKEN = \"refresh_token\";\n    private static final String NEXT_PAGE_URL = \"@odata.nextLink\";\n    private static final String SKIP_TOKEN = \"&$skiptoken=\";\n    private static final String VALUE = \"value\";\n    private static final String MSTEAMS_USER_ID = \"MSTEAMS_USER_ID\";\n    private static final String SINGLE_RECORD_FETCH_SUPPORTED = \"isSingleRecordFetchSupported\";\n    private static final String MULTI_RECORD_FETCH_SUPPORTED = \"isMultiRecordFetchSupported\";\n\n    private s","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2011fc2-8f9e-4331-ba51-5acaa4e90921","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/CaasConnectorConfigService.java","startLine":1,"endLine":10,"content":"package com.gainsight.duct;\n\nimport com.gainsight.duct.beans.config.CaasConnectorConfig;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\npublic interface CaasConnectorConfigService {\n\n    CaasConnectorConfig getConnectorConfig(ConnectorType connectorType);\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4884c0b9-f599-4ffe-a38b-711f745fcc1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctS3Utility.java","startLine":232,"endLine":250,"content":"ng fileName, String s3FilePath, String jobId) throws CaasException {\n        try (FileInputStream fin = new FileInputStream(convertedFile)) {\n            uploadFileStreamOnS3V2(s3FilePath, fileName, fin, convertedFile.length(), jobId);\n        } catch (IOException e) {\n            LOGGER.error(\"Exception occurred while trying to upload file to S3 : {0}\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        } finally {\n            FileUtils.deleteQuietly(convertedFile);\n        }\n    }\n\n    public static void multiPartFileUploadOnS3(String key,String filePath) {\n        gainsightS3.multiPartFileUploadOnS3(CAAS_BUCKET_NAME, key, filePath, PART_SIZE);\n    }\n\n    private static List<S3ObjectSummary> listFiles(String folderPath) {\n        return gainsightS3.listFiles(CAAS_BUCKET_NAME, folderPath);\n    }\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37ec7f25-269c-43b0-a44e-90b3ec8ba007","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctCollectionUtils.java","startLine":36,"endLine":63,"content":"e2);\n                else if (value1 instanceof List && value2 instanceof List)\n                    map1.put(key, merge((List) value1, (List) value2));\n                else map1.put(key, value2);\n            } else map1.put(key, value2);\n        }\n    }\n\n    private static List merge(List list1, List list2) {\n        list2.removeAll(list1);\n        list1.addAll(list2);\n        return list1;\n    }\n\n    public static Map<String, Object> convertJSONToRecordValue(JsonObject jsonObject, List<String> fields, ObjectDefinition objectDefinition) throws CaasException {\n        Map<String, Object> record = new HashMap<>();\n        Map<String, GSFieldMeta> fieldNameToMetaMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getMeta));\n        for (String fieldInfo : fields) {\n            boolean isMultivalued = fieldNameToMetaMap.containsKey(fieldInfo) && !ObjectUtils.isEmpty(fieldNameToMetaMap.get(fieldInfo).isMultiValued()) ? fieldNameToMetaMap.get(fieldInfo).isMultiValued() : false;\n            String recordValue = getFieldValue(jsonObject, fieldInfo, isMultivalued);\n            record.put(fieldInfo, recordValue);\n        }\n        return record;\n    }\n\n    private static String getFieldValue(JsonObject object, String fieldInfo, boolean isMultiValued) throws CaasException {\n        try {\n            Pattern pattern = Pattern.compile(\"\\\\[.*?\\\\]\"); //earlier we were just expecting a digit here. Now this regex will take a","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7d85ed53-4f4b-4aa3-971f-d6478bcb5c91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/IpaasDataExtractionHelperService.java","startLine":1,"endLine":32,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils.ipaas;\n\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.google.common.collect.Maps;\n\nimport java.util.Map;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.APPLICATION_JSON;\n\npublic class IpaasDataExtractionHelperService {\n\n    private static final String USER = \"User \";\n    private static final String ELEMENT = \"Element \";\n    private static final String ORG = \"Organization \";\n    private static final String CONTENT_TYPE = \"content-type\";\n    private static final String ACCEPT = \"accept\";\n\n    public static Map<String, Object> getElementHeaders(String userToken, Object instanceToken, String orgToken) {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, APPLICATION_JSON);\n        headers.put(ACCEPT, APPLICATION_JSON);\n        String userTokenRequest = USER + userToken;\n        String elementToken = ELEMENT + instanceToken;\n        String orgTokenRequest = ORG + orgToken;\n        headers.put(IPaasConstants.AUTHORIZATION, userTokenRequest + \",\" + orgTokenRequest + \",\" + elementToken);\n        return headers;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a65ce06b-f0f6-4ff2-90ea-8a74716819ad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesTenantConfigDAOImpl.java","startLine":67,"endLine":86,"content":"\n        return caasObjectAttributesConfigsTenantLevel;\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        return databaseTemplateService.getTenantSchemaMongoTemplate();\n    }\n\n    @Override\n    protected void setEntityId(CaasObjectAttributesTenantConfig caasObjectAttributesTenantConfig, String s) {\n        caasObjectAttributesTenantConfig.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(CaasObjectAttributesTenantConfig caasObjectAttributesConfig, String s) {\n        caasObjectAttributesConfig.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce46492c-4b14-411c-9b7c-dc154a38a9a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":111,"endLine":133,"content":"OperationSupported(filterCriteria, fieldNameToGsFieldDefinitionMap, caasConnectorConfig, isSync);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                isFilterOperatorSupportedForField(criteria, fieldNameToGsFieldDefinitionMap.get(criteria.getFieldName()), caasConnectorConfig, isSync);\n            }\n        }\n    }\n\n    private static boolean isFilterOperatorSupportedForField(Criteria criteria, GSFieldDefinition gsFieldDefinition, CaasConnectorConfig caasConnectorConfig, boolean isSync) throws CaasException {\n        String fieldType = gsFieldDefinition.getMeta().getOriginalDataType();\n\n        boolean isOperatorSupported = false;\n        List<DataTypeMappings> dataTypeMappings = caasConnectorConfig.getDataTypeMappings();\n        List<String> supportedOperators;\n        if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(fieldType))) {\n            supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(fieldType))\n                    .findFirst().get().getAllowedExternalFilterOperators();\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09106413-5695-4ec1-9632-1dba1d484d5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/service/HealthServiceImpl.java","startLine":173,"endLine":182,"content":"\n\n        if (builder.length() <= 0) {\n            builder.append(\"Unknown\");\n        }\n\n        return builder.toString();\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a720aadd-1130-4637-a326-3c3e6d0ff308","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":166,"endLine":189,"content":"S, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj bulkWriteCaas(@RequestParam(value = \"file\", required = false) MultipartFile inputCSVFile, @RequestParam String request) {\n        try {\n            DuctRequestDTO ductRequestDTO = new ObjectMapper().readValue(request, DuctRequestDTO.class);\n            File file = null;\n            if (inputCSVFile != null)\n                file = DuctUtils.convertToFile(inputCSVFile);\n            return new ResponseObj(true, ductJobMappingService.bulkWrite(ductRequestDTO, file));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Fetch Data in Sync, Response in Query API format\", response = QueryAPIResponseBean.class)\n    @PostMapping(value = \"/query/sync\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getSyncronizedData(@ApiParam(value = \"Request Structure to retrieve data\", required = true)\n                                          @RequestBody final DuctRequestDTO ductRequestDTO) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.getSynchr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7263c603-089c-4f44-bcfb-f2bf31450a10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":118,"endLine":144,"content":"e) @RequestBody final DuctRequestDTO ductRequestDTO,\n            @RequestParam(value = \"isUpsert\", required = false) boolean isUpsert) {\n        try {\n            if (isUpsert) {\n                return new ResponseObj(true, ductJobMappingService.synchronousUpsert(ductRequestDTO));\n            } else {\n            return new ResponseObj(true, ductJobMappingService.synchronousInsert(ductRequestDTO));\n            }\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            return new ResponseObj(false, prepareErrorResponseForException(e.getGsExternalSystemErrorMapping()));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @ApiOperation(value = \"Update Data Sync\", response = DuctResponseDTO.class)\n    @PutMapping(value = \"/data\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj updateDataSynchronous(@RequestBody final DuctRequestDTO ductRequestDTO, @RequestParam(value = \"identifier\", required = false) String identifier) {\n        try {\n            //ductRequestDTO.setIdentifiers(Collections.singletonList(identifier));\n            return new ResponseObj(true, ductJobMappingService.synchronousUpdate(ductRequestDTO));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0a4c90d-c227-452a-aa75-068efe790c52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1706,"endLine":1723,"content":" connections per Connector\n        if (connectionConfig.getProperties().containsKey(ALLOWED_CONNECTIONS)) {\n            int allowedConnections = Integer.valueOf(connectionConfig.getProperties().get(ALLOWED_CONNECTIONS).toString());\n            List<PNPConnectionsInfo> pnpConnectionsInfos = pnpConnectionInfoDao.findByConnectionType(pnpConnectionsInfo.getConnectionType());\n            log.info(\"Connections already present {} and allowed connections {}\", pnpConnectionsInfos.size(), allowedConnections);\n            assertTrue(pnpConnectionsInfos.size() < allowedConnections, CaasValidationCode.TOO_MANY_CONNECTIONS, HttpStatus.SC_BAD_REQUEST);\n        }\n\n        //validating allowed number of connections per area(removed)\n\n        if (SFDC.equals(pnpConnectionsInfo.getConnectionType()) && !RequestContextProvider.isPureNativeTenant() && !RequestContextProvider.isHybridTenant() &&\n                !pnpConnectionInfoDao.findByConnectionType(SFDC).isEmpty()) {\n            throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.TOO_MANY_CONNECTIONS.getUserText(), HttpStatus.SC_BAD_REQUEST));\n        }\n\n        try {\n            GainsightPrecondition.assertNotNull(pnpConnectionsInfo.getConnectionName(), CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_CONNECTION_NAME.getUserText(), HttpStatus.SC_PRECONDITION_FAILED);\n            assertTrue(GainsightPrecondition.scanAndNotBlank(pnpConnectionsInfo.getConnectionName().trim(), true), CaasValidationCode.I","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d104a003-d599-4f91-a0eb-8e7e7182ca27","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":216,"endLine":247,"content":"est, String respMsg, int secondsToWaitForRetry){\n        try {\n            switch (dataExtractionRequest.getConnectorType()) {\n                case ZENDESK:\n                    JsonNode jsonNode = OBJECT_MAPPER.readTree(respMsg);\n                    if (jsonNode != null && !jsonNode.isArray()) {\n                        JsonNode providerMessage = jsonNode.get(\"providerMessage\");\n                        if (providerMessage != null && StringUtils.isNotEmpty(providerMessage.asText())\n                                && providerMessage.asText().equalsIgnoreCase(\"Number of allowed incremental export API requests per minute exceeded\")) {\n                            secondsToWaitForRetry = 125;\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }catch(Exception e){\n            LOGGER.error(\"Failed to calculate wait time for {} due to {}\", respMsg, e);\n        }\n        return secondsToWaitForRetry;\n    }\n\n    private boolean writeJsonArrayToFile(DataExtractionRequest dataExtractionRequest, JSONArray arr, FileWriter fr) throws\n            Exception {\n        BufferedWriter br = new BufferedWriter(fr);\n        boolean shouldContinue = true;\n        try {\n            for (int i = 0; i < arr.length(); i++) {\n                JSONObject obj = arr.getJSONObject(i);\n                resolvePicklist(dataExtractionRequest, obj);\n                resolveCurrencyField(dataExtractionRequest, obj);\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66c839e3-04f0-4fc1-a181-dcb9dff162d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":569,"endLine":589,"content":"jectName + \"_\" + metadataGenerationDetails.getJobId() + \".json\";\n        DuctS3Utility.uploadFilesOnS3(filePath, file);\n        metadataGenerationDetails.setDataFilePath(filePath);\n        generatedFieldDefinitions.addAll(schemaGeneratorService.generateSchemaFromData(metadataGenerationDetails, resultData, objectDefinition, fieldPrefix));\n      }\n\n      return generatedFieldDefinitions;\n    } catch (com.gainsight.fasterxml.jackson.core.JsonProcessingException jex) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", jex.getMessage(), jex);\n      DuctUtils.populateAndInsertError(CaasValidationCode.FAILED_WHILE_FLATTENING_CONNECTION_DETAILS.getUserText(), null);\n    } catch (Exception e) {\n      LOGGER.error(\"Exception occurred while trying to fetch metadata from external System : {}\", e.getMessage(), e);\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e, null, e.getMessage()));\n    }\n    return null;\n  }\n\n  private List<ApiConfigAttributes> getApiConfigAttributes(DataEnum dataEnum, Map<DataEnum, List<ApiConfigAttributes>> dataApiForMetadataGeneration,\n                                                           String recordId, String objectName) {\n    if (DataEnum.DATA_FETCH_BY_ID.equals(dataEnum)) {\n      List<ApiConfigAttributes> apiConfigAttributes = GainsightCollectionUtils.nullSafeList(dataApiForMetadataGeneration.get","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"246ac556-7356-4710-baae-3f09bf5bf562","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":167,"endLine":199,"content":"       log.error(\"Exception in estimating the decimal places\", e);\n                    }\n                }\n            } else if (value instanceof Boolean) {\n                dataType = \"BOOLEAN\";\n            } else if ((value instanceof JSONArray)) {\n                dataType = \"ARRAY\";\n            } else if (value instanceof String) {\n                dataType = \"STRING\";\n            } else {\n                log.info(\"new type value found: {}\", value);\n            }\n        } catch (Exception e) {\n            log.error(\"Exception in estimating the dataType\", e);\n        }\n        if (dataTypePriorityMap.getOrDefault(dataType, 0) < dataTypePriorityMap.getOrDefault(type, 0)) {\n            dataType = type;\n            gsFieldDefinition = deepCopyGSFieldDefinition(tempGSFieldDefinition);\n        }\n        return dataType;\n    }\n\n    private GSFieldDefinition deepCopyGSFieldDefinition(GSFieldDefinition tempGSFieldDefinition) {\n        try {\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            ObjectOutputStream outputStrm = new ObjectOutputStream(outputStream);\n            outputStrm.writeObject(tempGSFieldDefinition);\n            ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n            ObjectInputStream objInputStream = new ObjectInputStream(inputStream);\n            return (GSFieldDefinition) objInputStream.readObject();\n        }\n        catch (Exception e) {\n            log.error(\"Exception in deep","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be7cf0f8-4a50-4c91-94dc-01088aef660b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":226,"endLine":250,"content":"DTO = new DuctRequestDTO();\n        Exception e = null;\n        boolean passed = false;\n        try {\n            when(pnpConnectionInfoDao.findByConnectionId(any()))\n                    .thenReturn(generatePNPConnectionsInfo(ConnectorType.HUBSPOT, \"Hubspot Test\", ConnectionStatus.AUTHORIZED));\n            ductRequestDTO.setResourceName(\"Resource Name\");\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setFields(new ArrayList<>(Arrays.asList(\"fields\")));\n            ductJobMappingService.synchronousInsert(ductRequestDTO);\n        } catch (SystemException ex) {\n            e = ex;\n            passed = true;\n        } catch (Exception exc) {\n            e = exc;\n        } finally {\n            assertNotNull(e, \"Exception should not be null\");\n            assertTrue(passed, \"Hmm... I failed, Either the current change is a breaking change or the JUnits aren't updated.\");\n            if (e instanceof SystemException) {\n                SystemException sysEx = (SystemException) e;\n                assertNotNull(sysEx, \"System Exception can't be null\");\n                assertEquals(\"Connection Id should be present\", sysEx.getMessage(), \"Incorrect Message in Exception\");\n                assertEquals(\"Connection Id should be present\", sysEx.getUiMessage(), \"Incorrect Message in Exception\");\n                assertEquals(400, sysEx.getHttpStatus(), \"Incorrect Http Status Code\");\n                assertEquals(CoreErrorCode.INVALID_PARAMETER, sysE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b56ebf8-5896-4999-bbc0-2c0d9097b24c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":946,"endLine":971,"content":"eIsExternalFilterable(DuctJobMapping ductJobMapping, Map<String, GSFieldDefinition> fieldNameMetaMap) throws CaasException {\n        List<String> isExternalFilterable = new ArrayList<>();\n        fieldNameMetaMap.entrySet().forEach(field -> {\n            if (field.getValue().getMeta().isExternallyFilterable() !=null && field.getValue().getMeta().isExternallyFilterable())\n                isExternalFilterable.add(field.getKey());\n        });\n        isExternalFilterable(ductJobMapping.getCriteria(), isExternalFilterable);\n    }\n\n    private void isExternalFilterable(Criteria criteria, List<String> externalFilterable) throws CaasException {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filterCriteria : criteria.getFilters()) {\n                    isExternalFilterable(filterCriteria, externalFilterable);\n                }\n            }\n            if (criteria.getFieldName() != null) {\n                if (!externalFilterable.contains(criteria.getFieldName()))\n                    DuctUtils.throwError(CaasValidationCode.EXTERNAL_FILTER_NOT_ALLOWED.getGsEventCode(), CaasValidationCode.EXTERNAL_FILTER_NOT_ALLOWED.getUserText(), \"Invalid Input\");\n            }\n        }\n    }\n\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84df002a-e5f8-4c2d-ad0b-9b24df47b7d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataGenerationDetailsDaoImpl.java","startLine":34,"endLine":50,"content":"etadataGenerationDetails, String s) {\n        metadataGenerationDetails.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public MetadataGenerationDetails getDetailsById(String jobId) {\n        Query query = Query.query(Criteria.where(MetadataGenerationDetails.JOB_ID_PROP).is(jobId));\n        return findOne(query);\n    }\n\n    @Override\n    public List<MetadataGenerationDetails> getDetailsByConnectionIdAndObjectName(String connectionId, String objectName) {\n        Query query = Query.query(Criteria.where(MetadataGenerationDetails.CONNECTION_ID_PROP).is(connectionId));\n        query.addCriteria(Criteria.where(MetadataGenerationDetails.OBJECT_NAME_PROP).is(objectName));\n        return find(query);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d4dbe04a-c483-42bb-a86b-6da9fa03d4c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SAPDatasphereCaasMetadataServiceImpl.java","startLine":203,"endLine":226,"content":");\n    return retMap;\n  }\n\n  @Nullable\n  private static DataTypeMappings getDataTypeMappingFromExternalSourceDataType(CaasConnectorConfig connectorConfig, String externalSourceDataType) {\n\n    if (org.apache.commons.lang.StringUtils.isBlank(externalSourceDataType)) {\n      return null;\n    }\n    List<DataTypeMappings> dataTypeMappings = connectorConfig.getDataTypeMappings();\n    DataTypeMappings requiredDataTypeMapping = dataTypeMappings\n        .stream()\n        .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(externalSourceDataType) && dataTypeMapping.isSupported())\n        .findFirst()\n        .orElse(null);\n\n    if (Objects.isNull(requiredDataTypeMapping)) {\n      return null;\n    }\n    return requiredDataTypeMapping;\n  }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"272bbb79-b622-4bdb-8339-f9731377fdd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/filter/DuctWebB2BInterceptor.java","startLine":1,"endLine":43,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.filter;\n\nimport com.gainsight.bean.*;\nimport com.gainsight.context.GainsightContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.keystore.KeyManagementStore;\nimport com.gainsight.cryptography.keystore.KeyPair;\nimport com.gainsight.cryptography.keystore.KeyType;\nimport com.gainsight.database.DatabaseTemplateService;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.service.BaseTenantMasterService;\nimport com.gainsight.service.TenantUserRoleTypeService;\nimport com.gainsight.utils.GainsightUtils;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.MDC;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.servlet.ModelAndView;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.UUID;\n\n/**\n * Author: Santa Thounaojam\n * Date  : 06/10/16\n * Time  : 11:06 AM\n * <p>\n * This i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f36f23dc-55a8-442c-9510-415322d1edae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/CaasNativeMetadataServiceImpl.java","startLine":85,"endLine":121,"content":"*/\n            for (Map<String, Object> object : objectList) {\n                if (caasObjectConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n\n        /*\n        Adding tenant level object\n         */\n        if (caasObjectTenantConfig != null) {\n            for (Map<String, Object> object : caasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing tenant level object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (caasObjectTenantConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n\n        /*\n        Adding connection id level object\n         */\n        if (connectionIDSpecificCaasObjectTenantConfig != null) {\n            for (Map<String, Object> object : connectionIDSpecificCaasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(o","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0d5ac57-dd45-4c6b-8ef3-4c02bd47a507","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":634,"endLine":649,"content":"pe)));\n                objectToFieldDBNameToFieldDefinitionMap.put(ductJobMapping.getResourceName(), metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n\n                List<String> ignoreMetadataFields = GainsightCollectionUtils.nullSafeList(ductJobMapping.getFields().stream().filter(field -> field.contains(\".\")).collect(Collectors.toList()));\n                Set<String> filterFields = new HashSet<>();\n                DuctUtils.getFieldsFromFilter(ductJobMapping.getCriteria(), filterFields);\n\n                boolean fieldsFlattened = false;\n                for (String field : filterFields) {\n                    String[] fieldSplitted = field.split(\"\\\\.\");\n                    if ((Boolean) GainsightCollectionUtils.nullSafeMap(ductJobMapping.getProperties()).getOrDefault(LOOKUP_FIELDS_FLATTENED, true)\n                            && FeatureToggleUtil.evaluateBooleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId())) {\n                        fieldsFlattened = true;\n                        if (fieldSplitted.length == 3 || fieldSplitted.length == 4) {\n                            if (!objectToFieldDBNameToFieldDefinitionMap.containsKey(fieldSplitted[1])) {\n                                Map<String, ObjectDefinition> expandedObjectMetaInfoDefinitionMap = service.getObjectAttributes(fieldSplitted[1], pnpConnectionsInfo, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3723e991-d162-4b1a-b754-3d87d6ea0dfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/CaasValidationCode.java","startLine":40,"endLine":83,"content":",\n    API_CONFIG_NOT_FOUND(2027),\n    MAX_NUMBER_OF_RETRIES_EXHAUSTED(2028),\n    WRITEBACK_OBJECT_OR_OPERATION_NOT_DEFINED(2029),\n    INVALID_WRITEBACK_OPERATION(2030),\n    EXTERNAL_FILTER_NOT_ALLOWED(2031),\n    INVALID_INPUT(2032),\n    ERROR_AUTHORIZING_CONNECTION(2033),\n    EVENT_TYPE_NOT_SUPPORTED(2034),\n    ZOOM_EVENT_SIGNATURE_VERIFICATION_FAILED(2035),\n    FAILED_WHILE_FLATTENING_CONNECTION_DETAILS(2036),\n    INVALID_AUTH_TYPE(2037),\n    ZOOM_CREDENTIALS_EXPIRED(2038),\n    INVALID_TOKEN_DETAIL(2039),\n    ERROR_FETCHING_ACCESS_TOKEN(2040),\n    MSTEAMS_USER_ID_NOT_FOUND(2041),\n    SINGLE_RECORD_FETCH_NOT_SUPPORTED(2042),\n    MULTI_RECORD_FETCH_NOT_SUPPORTED(2043),\n    MS_TEAMS_INVALID_CREDENTIALS(2044),\n\n    FAILED_TO_LOAD_TO_GAINSIGHT(3001),\n    CALL_TO_GAINSIGHT_MODULES_FAILED(3002),\n    FAILED_TO_FETCH_GAINSIGHT_OBJECTS(3003),\n\n\n    DUPLICATE_DOCUMENTS_FOUND_CONFIG(4001),\n\n    FIELD_ALREADY_PRESENT(5001),\n    FIELD_DOESNOT_EXIST(5002),\n    FAILED_TO_AUTHENTICATE_WITH_PROVIDER(5003),\n    DB_VALIDATION_ERROR(5004),\n    INVALID_AUTHENTICATION_FILE(5005),\n    ERROR_UPDATING_CONNECTION(5006),\n    ERROR_GETTING_AUTH_URL(5007),\n    REQUIRED_FIELD_MISSING(5008),\n    ERROR_REVOKING_CONNECTION(5009),\n    INVALID_CLIENT_INPUT(5010),\n    CONNECTION_NAME_ALREADY_EXISTS(5011),\n    CONNECTOR_CONNECTION_INFO_NULL(5012),\n    CONNECTION_INFO_NOT_EXIST(5013),\n    INVALID_TIMEZONE(5014),\n    INVALID_SECRET_KEY(5015),\n    ACCESS_KEY_NOT_PROVIDED(5016),\n    INVALID_LENGTH_ACCESS_KEY(5017),\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2e92d0b-d1b0-411d-ad59-eed3f240285a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":383,"endLine":416,"content":"ns(object.get(OBJECT_ID).toString())) {\n                        filteredAndEnhancedObjectList.remove(object);\n                        objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                    }\n                }\n            }\n\n            for (Map<String, Object> object : caasObjectConfig.getAddedObjects()) {\n                if ((!objectIdsSet.contains(object.get(OBJECT_ID).toString()))\n                        && caasObjectConfig.getShowOnlyIncludedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toString());\n                }\n            }\n\n        /*\n        Removing global object\n         */\n            for (Map<String, Object> object : objectList) {\n                if (caasObjectConfig.getNotSupportedObjects().contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.remove(object);\n                    objectIdsSet.remove(object.get(OBJECT_ID).toString());\n                }\n            }\n        }\n\n        /*\n        Adding tenant level object\n         */\n        if (caasObjectTenantConfig != null) {\n            for (Map<String, Object> object : caasObjectTenantConfig.getAddedObjects()) {\n                if (!objectIdsSet.contains(object.get(OBJECT_ID).toString())) {\n                    filteredAndEnhancedObjectList.add(object);\n                    objectIdsSet.add(object.get(OBJECT_ID).toSt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de043331-da55-4e54-b661-a3d435a8042d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":593,"endLine":617,"content":"ionsInfoFromDB.getConnectionType())) {\n           if (CollectionUtils.isEmpty(pnpConnectionInfoDao.findByConnectionType(ConnectorType.SFDC)) &&\n                    (!pnpConnectionsInfoFromDB.getProperties().containsKey(UCCommonConstants.MULTI_CONNECTION) ||\n                            !(Boolean) pnpConnectionsInfoFromDB.getProperties().get(UCCommonConstants.MULTI_CONNECTION))) {\n                log.info(\"Removing entry of uc_tenant_connection for tenant: {} on deleting connection: {}\", pnpConnectionsInfoFromDB.getTenantId(), pnpConnectionsInfoFromDB.getConnectionId());\n                AbstractEntityDao<E> tenantConnectionService;\n                tenantConnectionService.remove(pnpConnectionsInfoFromDB.getTenantId()); (to do)\n                return;\n            }\n            updateConnection(false, pnpConnectionsInfoFromDB);\n        }*/\n\n        if (StringUtils.isNotEmpty(pnpConnectionsInfoFromDB.getCrmId())) {\n            revokeUserAuthQuietly(pnpConnectionsInfoFromDB.getCrmId());\n        }\n\n        if (pnpConnectionsInfoFromDB.getConnectionType().equals(ConnectorType.SEGMENT_IO)) {\n            softDeleteAccesskey(pnpConnectionsInfoFromDB.getConnectionId());\n        }\n        ductEventService.publishConnectionEvent(pnpConnectionsInfoFromDB, \"DELETE\");\n        pushAuditLogs(AuditOperationType.DELETE, new UnifiedConnectorRequest(pnpConnectionInput.getPnpConnectionsInfo()), null, EventStatusEnum.SUCCESS);\n    }\n\n    @Override\n    public void revokeRequest(PNPConnectionsInfo pnpCo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bdb6a3ab-4c0e-49bb-ba2f-212544203858","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":343,"endLine":362,"content":"s.isNotEmpty(ductJobMapping.getCriteria()) && ObjectUtils.isNotEmpty(getWhereClause(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, ductJobMapping)))\n            fetchTaskDetails.setWhereClause(getWhereClause(ductJobMapping.getCriteria(), fieldNameDataTypeMap, fieldNameMetaMap, ductJobMapping));\n\n        CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n        fetchTaskDetails.setAdditionalDetails(getAdditionalDetails(connectorConfig, ductJobMapping));\n        if (ObjectUtils.isNotEmpty(ductJobMapping.getQuery())) {\n            Map<String, Object> custom = new HashMap<>();\n            custom.put(CUSTOM_QUERY, ductJobMapping.getQuery());\n            fetchTaskDetails.getAdditionalDetails().putAll(custom);\n        }\n        LOGGER.info(\"{} extract task creation payload for DH completed\", ductJobMapping.getConnectorType());\n        return fetchTaskDetails;\n    }\n\n    private FreeFormQueryInfo getFreeFormQueryInfoTask(DuctJobMapping ductJobMapping, Map<String, Object> fieldNameDataTypeMap,\n                                                       Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        LOGGER.info(\"{} freeform task creation payload for DH started\", ductJobMapping.getConnectorType());\n        CaasConnectorConfig caasConnectionConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n\n        String dateFormate = caasConnectionConfig.getDataTy","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"46ddc9a1-3d50-4709-9996-11671e531c95","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/bionicrules/helper/BionicRuleHttpHelper.java","startLine":106,"endLine":141,"content":"                                          Class<T> clazz) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpPatch httpPatch = new HttpPatch(uri);\n\n      addHeaders(httpPatch, headers);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpPatch.setEntity(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpPatch);\n      LOGGER.info(\"Post call to uri: {} is complete.\", uri);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHttpResponse);\n      HttpClientUtils.closeQuietly(httpClient);\n    }\n  }\n\n  public static <T> BionicRuleHttpResponseWrapper<T> put(String uri, Map<String, String> headers, String payload,\n                                                         Class<T> clazz) throws IOException {\n    CloseableHttpClient httpClient = null;\n    CloseableHttpResponse closeableHttpResponse = null;\n    try {\n      httpClient = getHttpClient(uri);\n      HttpPut httpPut = new HttpPut(uri);\n\n      addHeaders(httpPut, headers);\n      StringEntity stringEntity = new StringEntity(payload, StandardCharsets.UTF_8);\n      httpPut.setEntity(stringEntity);\n\n      closeableHttpResponse = httpClient.execute(httpPut);\n      return generateResponse(closeableHttpResponse, clazz);\n    } finally {\n      HttpClientUtils.closeQuietly(closeableHt","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eca7069a-cf93-4a42-b02c-242c4595cb8e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/AccountGlobalMapping.java","startLine":90,"endLine":143,"content":"public void setAccountIdentifier(PrimaryIdentifierDetail accountIdentifier) {\n    this.accountIdentifier = accountIdentifier;\n  }\n\n  public PrimaryIdentifierDetail getUserIdentifier() {\n    return userIdentifier;\n  }\n\n  public void setUserIdentifier(PrimaryIdentifierDetail userIdentifier) {\n    this.userIdentifier = userIdentifier;\n  }\n\n  public PrimaryIdentifierDetail getEventIdentifier() {\n    return eventIdentifier;\n  }\n\n  public void setEventIdentifier(PrimaryIdentifierDetail eventIdentifier) {\n    this.eventIdentifier = eventIdentifier;\n  }\n\n  public PrimaryIdentifierDetail getInstanceIdentifier() {\n    return instanceIdentifier;\n  }\n\n  public void setInstanceIdentifier(PrimaryIdentifierDetail instanceIdentifier) {\n    this.instanceIdentifier = instanceIdentifier;\n  }\n\n  public PrimaryIdentifierDetail getTimestampIdentifier() {\n    return timestampIdentifier;\n  }\n\n  public void setTimestampIdentifier(PrimaryIdentifierDetail timestampIdentifier) {\n    this.timestampIdentifier = timestampIdentifier;\n  }\n\n  public List<AccountFieldMapping> getMeasures() {\n    return measures;\n  }\n\n  public void setMeasures(List<AccountFieldMapping> measures) {\n    this.measures = measures;\n  }\n\n  public List<AccountEventMeasureMapping> getEventMeasureMappings() {\n    return eventMeasureMappings;\n  }\n\n  public void setEventMeasureMappings(List<AccountEventMeasureMapping> eventMeasureMappings) {\n    this.eventMeasureMappings = eventMeasureMappings;\n  }\n\n  @Override\n  public String toString() ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9430c8ec-d056-4669-8dd1-6fe6baa3e919","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/test/java/com/gainsight/duct/service/DuctJobMappingServiceImplTest.java","startLine":296,"endLine":317,"content":");\n        try {\n            doReturn(pnpConnectionsInfo).when(pnpConnectionInfoDao).findByConnectionId(any());\n            doReturn(true).when(ductValidationService).validateRequest(any());\n            when(hubspotDataSourceService.fetchSynchronziedData(any(DuctJobMapping.class), anyInt())).thenAnswer((Answer<DuctResponse>) invocation -> {\n                ductJobMappingAtomicReference.set(invocation.getArgument(0));\n                return DuctResponse.builder()\n                        .s3FilePath(SUCCESS_FILE_PATH)\n                        .outputFileLocation(OUTPUT_FILE_LOCATION)\n                        .nextPageToken(ductRequestDTO.getNextPageToken())\n                        .externalSystemResponse(new HashMap<>())\n                        .totalNumberOfRecords(totalNumberOfRecords).build();\n            });\n\n            CaasConnectorConfig caasConnectorConfig = new CaasConnectorConfig();\n            doReturn(caasConnectorConfig).when(caasConnectorConfigService).getConnectorConfig(any());\n            doReturn(hubspotDataSourceService).when(connectorDataSourceFactory).getService(any(ConnectorType.class), anyBoolean());\n//            when(ductJobMappingDao.findByJobId(any())).thenAnswer((Answer<DuctJobMapping>) invocation -> ductJobMappingAtomicReference.get());\n//            when(ductJobMappingDao.update(any())).thenReturn(ductJobMappingAtomicReference.get());\n            ductResponseDTO = ductJobMappingService.synchronousFetch(ductRequestDTO);\n            passed = true;\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84e1f5b2-cf45-4b04-aeb9-94c8ef10bbd5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/constants/DuctConstants.java","startLine":83,"endLine":105,"content":"ublic static final String READ_ONLY = \"readOnly\";\n        public static final String ACCESSIBLE = \"accessible\";\n        public static final String SCHEMA_UPDATEABLE = \"schemaUpdateable\";\n        public static final String CREATEABLE = \"createable\";\n        public static final String COMPLEX_TYPE = \"complexType\";\n        public static final String PROPERTIES = \"properties\";\n        public static final String META = \"meta\";\n        public static final String DECIMAL_PLACES = \"decimalPlaces\";\n        public static final String ORIGINAL_DATA_TYPE = \"originalDataType\";\n        public static final String EXTERNALLY_FILTERABLE = \"externallyFilterable\";\n        public static final String GDM_FORMULA_COLUMN = \"gdmFormulaColumn\";\n        public static final String HIDDEN = \"hidden\";\n        public static final String HAS_LOOKUP = \"hasLookup\";\n        public static final String DISPLAY_ORDER = \"displayOrder\";\n        public static final String ACTIVE = \"active\";\n        public static final String SOURCE_COMPLEX_TYPE = \"sourceComplexType\";\n        public static final String OBJECT_NAME = \"objectName\";\n        public static final String FIELDS = \"fields\";\n        public static final String MULTI_VALUED = \"multiValued\";\n        public static final String NILLABLE = \"nillable\";\n        public static final String DATA_PREVIEW_AVAILABLE = \"dataPreviewAvailable\";\n        public static final String DATA_PREVIEW_AVAILABLE_FOR_LOOKUP_FIELDS = \"dataPreviewAvailableForLookUpFields\";\n        public ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"934866f2-87ee-454b-8468-b8140d5f469c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/ConnectorsDataHighwayInteractionServiceImpl.java","startLine":209,"endLine":239,"content":"tHttpClientWitRetry() {\n    HttpClientBuilder builder = HttpClient.getApacheHttpClientBuilder();\n    RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(TIMEOUT).setSocketTimeout(TIMEOUT).build();\n    builder.setDefaultRequestConfig(requestConfig);\n    builder.setRetryHandler(new RetryHandler(3));\n    return builder.build();\n  }\n\n  private static void addHeaders(HttpRequestBase httpRequestBase, Map<String, String> headers) {\n    if (MapUtils.isNotEmpty(headers)) {\n      headers.entrySet().stream().forEach(entry -> httpRequestBase.addHeader(entry.getKey(), entry.getValue()));\n    }\n  }\n\n  private static <T> ConnectorsDataHighwayResponseHandler<T> getResult(CloseableHttpResponse closeableHttpResponse, Class<T> clazz) throws IOException {\n    ConnectorsDataHighwayResponseHandler<T> response;\n    HttpEntity entity = null;\n    try {\n      StatusLine statusLine = closeableHttpResponse.getStatusLine();\n      entity = closeableHttpResponse.getEntity();\n      int statusCode = statusLine.getStatusCode();\n      if (entity == null) {\n        throw new ClientProtocolException(\"Response contains no content\");\n      }\n      String responsePayload = EntityUtils.toString(entity);\n      if (statusCode != 200) {\n        LOGGER.info(\"Failed Reason: \" + StringEscapeUtils.escapeJson(responsePayload));\n      }\n      T responsePayloadObj = null;\n      if (!clazz.getName().equals(\"java.lang.String\")) {\n        responsePayloadObj = GainsightUtils.convertJsonToObject(responsePayload,","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2f4212e2-617b-42c2-9143-6cd5e24fcecb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":264,"endLine":287,"content":"e));\n            try {\n                CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n                List<Map<String, Object>> objectList = service.getObjects(pnpConnectionsInfo, queryParams);\n                CaasConnectorConfig connectorConfig = caasConnectorConfigService.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n                return ExternalToGsObjectDefinitionTransformer.transformExternalToObjectDefinition(objectList, pnpConnectionsInfo, connectorConfig);\n            } catch (Exception ex) {\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, ex));\n            }\n        } else{\n            CaasMetadataService service = caasMetadataFactory.getService(ConnectorType.GAINSIGHT, false);\n            List<Map<String, Object>> objectList = service.getObjects(null,null);\n            return transformToObjectDefinition(objectList);\n        }\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(String objectName, String connectionId) throws CaasException {\n        return getObjectAttributes(objectName, connectionId, null, false);\n    }\n\n    @Override\n    public Map<String, ObjectDefinition> getObjectAttributes(DuctRequestDTO ductRequestDTO) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27af8a46-9efb-486e-8e9a-4c09d5c97769","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":175,"endLine":189,"content":"ectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n            FilterRule filterRule = DataHighwayUtils.getFilterRuleFromCAASCriteria(ductJobMapping.getCriteria(), fieldNameToDataTypeMap, gsFieldsByNamesMap, null,caasConnectorConfig, ductJobMapping.getResourceName());\n            filter = DBConnectorsQueryBuilder.createQuery(filterRule, ConnectorType.DATABRICKS);\n            query = \"Select \" + fieldJsonPathList.stream().collect(Collectors.joining(\",\"))\n                    + \" from `\" + propertie.get(UCConstants.GSIntegration.SCHEMA_NAME).toString() + \"`.`\" + propertie.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + \"`.`\" + objectName + \"`\"\n                    + filter + \" limit \" + limit + \" offset \" + offset;\n        } else {\n            query = \"Select \" + fieldJsonPathList.stream().collect(Collectors.joining(\",\"))\n                    + \" from `\" + propertie.get(UCConstants.GSIntegration.SCHEMA_NAME).toString() + \"`.`\" + propertie.get(UCConstants.GSIntegration.DATABASE_NAME).toString() + \"`.`\" + objectName + \"`\"\n                    + \" limit \" + limit + \" offset \" + offset;\n        }\n        try {\n            GainsightDatabricksChannelFactory gainsightDatabricksChannelFactory = new GainsightDatabricksChannelFactory();\n            GainsightDatabricksChannelService gainsightDatabricksChannelService = gainsightDatabricksChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n            List<Map<String, Object>> data = gainsi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d50c402d-4179-44c7-b1c6-715cc2edcb26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":565,"endLine":598,"content":"onPath, e);\n                return jsonObject.opt(jsonPath);\n            }\n\n        }\n        return StringUtils.EMPTY;\n    }\n\n    public DuctResponseDTO extractSyncData(DataExtractionRequest dataExtractionRequest) throws Exception {\n        httpUrlConnectionUtils.setEscapeQueryParams(false);\n        String apiUrl;\n\n        int timeoutInMilliSecs = 60000;\n        if (dataExtractionRequest.getProperties().containsKey(\"ceTimeOut\")) {\n            timeoutInMilliSecs = (int) dataExtractionRequest.getProperties().get(\"ceTimeOut\");\n        }\n\n        if (StringUtils.isNotEmpty(dataExtractionRequest.getQueryParamForDataFetch())) {\n            apiUrl = dataExtractionRequest.getCloudElementsBaseUrl() + FORWARD_SLASH + CLOUD_API_BASE_URL + FORWARD_SLASH + dataExtractionRequest.getObjectName() + \"?\" + dataExtractionRequest.getQueryParamForDataFetch();\n        } else {\n            apiUrl = dataExtractionRequest.getCloudElementsBaseUrl() + FORWARD_SLASH + CLOUD_API_BASE_URL + FORWARD_SLASH + dataExtractionRequest.getObjectName();\n        }\n\n        boolean shouldContinue = true;\n        int maxNoOfRetries = dataExtractionRequest.getMaxNoOfRetries();\n        int retryCounter = 0;\n        HttpResponse httpResponse = new HttpResponse();\n        String elementsNextPageToken = null;\n        List arr = null;\n        LOGGER.info(\"CE connection/read timeout in milli secs {}\", timeoutInMilliSecs);\n\n        while(shouldContinue) {\n            try {\n                Map<String, Object> queryParams = c","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a2c5c0e-60cc-4985-9d32-41f2849b2879","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/common/aha/AhaCaasCriteriaBuilder.java","startLine":50,"endLine":77,"content":"lters())) {\n            return createFilterRule(criteria, fieldNameDataTypeMap, fieldNameMetaMap);\n        } else {\n            List<FilterRule> childRulesList = new ArrayList<>();\n            for (Criteria childCriteria : criteria.getFilters()) {\n                childRulesList.add(buildRule(childCriteria, fieldNameDataTypeMap, fieldNameMetaMap));\n            }\n            FilterRule current = new FilterRule();\n            current.setRules(childRulesList);\n            current.setCondition(criteria.getDuctFilterCondition());\n            return current;\n        }\n    }\n\n    private static FilterRule createFilterRule(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap) {\n        FilterRule filterRule = new FilterRule();\n        FieldInfo internalFieldInfo = new FieldInfo();\n        internalFieldInfo.setFieldType(FieldType.FIELD);\n        internalFieldInfo.setName(criteria.getFieldName().replaceAll(\"[^a-zA-Z0-9_]+\", \"\"));\n        setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), internalFieldInfo, fieldNameMetaMap);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not null, null the values can be empty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99e6e0a0-120a-432a-a1e1-05af9d8d893e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/account/PrimaryIdentifierDetail.java","startLine":1,"endLine":71,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans.account;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * User: santa\n * Date: 17/6/14\n * Time: 9:29 PM\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class PrimaryIdentifierDetail implements Serializable {\n  private static final long serialVersionUID = -1L;\n  private Field source;\n  private Field target;\n  private boolean lookup = true;\n  private boolean directLookup = true;\n  private Map<String, Object> properties;\n  private boolean digitConversionEnable;\n\n  public Field getSource() {\n    return source;\n  }\n\n  public void setSource(Field source) {\n    this.source = source;\n  }\n\n  public Field getTarget() {\n    return target;\n  }\n\n  public void setTarget(Field target) {\n    this.target = target;\n  }\n\n  public boolean isDirectLookup() {\n    return directLookup;\n  }\n\n  public void setDirectLookup(boolean directLookup) {\n    this.directLookup = directLookup;\n  }\n\n  public Map<String, Object> getProperties() {\n    return properties;\n  }\n\n  public void setProperties(Map<String, Object> properties) {\n    this.properties = properties;\n  }\n\n  /**\n   * This field specifies whether the looup for this identifier is to be performed or not\n   * @return @{link boolean}\n   */\n  public boolean isLookup() {\n    return lookup;\n  }\n\n  public void setLookup(boolean lookup) {\n    this.lookup = lookup;\n  }\n\n  public boolean isDig","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5aa98122-ed16-482b-b081-1265085e3a24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataGenerationDetailsDao.java","startLine":1,"endLine":12,"content":"package com.gainsight.duct.metadata.engine.service;\n\nimport com.gainsight.common.dao.AbstractEntityDao;\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\n\nimport java.util.List;\n\npublic interface MetadataGenerationDetailsDao extends AbstractEntityDao<MetadataGenerationDetails> {\n    MetadataGenerationDetails getDetailsById(String jobId);\n\n    List<MetadataGenerationDetails> getDetailsByConnectionIdAndObjectName(String connectionId, String objectName);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22221851-1c81-48ca-b872-fee21550481d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":647,"endLine":668,"content":"cessKeyHashed(GainsightUtils\n                        .encryptToCSV(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(ACCESS_SECRET)).trim()));\n                break;\n            case GS_BULK_API:\n                validateForBulkAPIAccessKey(pnpConnectionsInfo);\n                assertEqual(0, pnpConnectionInfoDao.findByConnectionType(ConnectorType.GS_BULK_API).size(), CaasValidationCode.CONNECTION_NAME_ALREADY_EXISTS);\n                pnpConnectionsInfo.setTokenDetail(getEncryptedBaseTokenDetail(ObjectUtils.firstNonNull(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties()\n                        .get(DATALOAD_ACCESSKEY)), StringUtils.EMPTY), pnpConnectionsInfo.getConnectionType()));\n                break;\n\n            case S3:\n                BaseTokenDetail baseTokenDetail = prepareS3TokenDetails(pnpConnectionsInfo);\n                pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n                break;\n\n            case GOOGLE_ANALYTICS:\n                break;\n            case SFDC:\n                if (!FeatureToggleUtil.evaluateBooleanFeature(IPaasConstants.IPAAS_CONNECTORS_ENABLED, RequestContextProvider.getTenantId())) {\n                    List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.getAllConnectionByConnectorType(pnpConnectionsInfo.getConnectionType());\n                    if (!GainsightCollectionUtils.nullSafeList(pnpConnectionsInfoList).isEmpty()) {\n                        throw new CaasException(new GsExternalSystemErrorM","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b3f276e-81f2-4a0f-b59b-acb630391a33","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ipaas/CEQueryBuilder.java","startLine":54,"endLine":68,"content":"ingBuilder.append(URLEncoder.encode(rule.getValues().get(0).getValue().toString(), \"UTF-8\"));\n            stringBuilder.append(\"'\");\n            stringBuilder.append(URLEncoder.encode(SPACE, \"UTF-8\"));\n            whereClause.add(stringBuilder.toString().replaceAll(\"\\\\+\", \"%20\"));\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            for (FilterRule childRule : rule.getRules()) {\n                childRules.addAll(buildRule(childRule));\n            }\n            whereClause.add(\n                    Joiner.on(null == rule.getCondition() ? FilterCondition.AND.getFilterCondition() : rule.getCondition() + URLEncoder.encode(SPACE, \"UTF-8\")).join(childRules));\n        }\n        return whereClause;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"835577de-1dcc-46f1-ba0d-0dc003ea7d8e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/WriteBackDBQueueInfo.java","startLine":1,"endLine":46,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.queue.db.message.MessageInfoFactory;\nimport com.gainsight.queue.db.message.splitter.QueueDbMessageSplitter;\nimport com.gainsight.queue.db.message.splitter.TenantAndMessageTypeBasedSplitter;\nimport com.gainsight.queue.db.queue.QueueInfo;\nimport com.gainsight.spring.SpringServiceLocatorFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.time.Duration;\n\n@Service\npublic class WriteBackDBQueueInfo implements QueueInfo {\n    private static final DuctProcessQueue queue = DuctProcessQueue.EXTERNAL_DB_SYS_WB_QUEUE;\n\n    @Override\n    public String getQueueName() {\n        return queue.getQueueName();\n    }\n\n    @Override\n    public String getTableName() {\n        return queue.getTableName();\n    }\n\n    @Override\n    public Duration getDefaultLockTime() {\n        return Duration.ofHours(3);\n    }\n\n    @Override\n    public int getDefaultTenantLimit() {\n        return 5;\n    }\n\n    @Override\n    public QueueDbMessageSplitter getMessageSplitter() {\n        MessageInfoFactory messageInfoFactory = SpringServiceLocatorFactory.getService(MessageInfoFactory.class);\n        return new TenantAndMessageTypeBasedSplitter(messageInfoFactory);\n    }\n\n    @Override\n    public boolean maintainMessageSequencing() {\n        return true;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5d15208-4cba-426f-8962-7612969c0681","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":278,"endLine":306,"content":"globalObjectExcludeAttributes);\n    MetadataCommonUtil.excludeAttributesFromConfig(Arrays.asList(caasObjectExcludeAttributesConfig), ObjectDefinitionAsMap);\n\n    MetadataCommonUtil.overrideAttributesFromConfigAtTenantLevel(tenantConfigAttributes, ObjectDefinitionAsMap);\n    return Collections.singletonMap(objectName, OBJECT_MAPPER.convertValue(ObjectDefinitionAsMap, ObjectDefinition.class));\n  }\n\n  private JsonNode sanitizeData(JsonNode resultData, ResourceConfig resourceConfig) {\n    List spec = DuctUtils.OBJECT_MAPPER.convertValue(resourceConfig.getMetadataTransformationConfig().get(\"spec\"), List.class);\n    Chainr chainr = Chainr.fromSpec(spec);\n    ArrayNode data = OBJECT_MAPPER.createArrayNode();\n    if (resultData.isArray()) {\n      for (JsonNode resultDatum : resultData) {\n        Map<String, Object> o = OBJECT_MAPPER.convertValue(resultDatum, new TypeReference<Map<String, Object>>() {\n        });\n        data.add(OBJECT_MAPPER.convertValue(chainr.transform(o), JsonNode.class));\n      }\n    } else {\n      Map<String, Object> o = OBJECT_MAPPER.convertValue(resultData, new TypeReference<Map<String, Object>>() {\n      });\n      data.add(OBJECT_MAPPER.convertValue(chainr.transform(o), JsonNode.class));\n    }\n    return data;\n  }\n\n  private Map<String, Object> fetchMetadataFromSource(MetadataEngineConfig metadataEngineConfig,\n                                                      PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws CaasException {\n    try {\n     ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14c015b9-6a4a-49dd-a3f8-148cd3a4904f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/redis/GainsightRedisTemplateImpl.java","startLine":32,"endLine":76,"content":"sTemplate<String, T> getRedisTemplate() {\n    RedisTemplate<String, T> redisTemplate = new RedisTemplate<>();\n    redisTemplate = LoggingInterceptor.intercept(\"RedisCache\", redisTemplate);\n    redisTemplate.setConnectionFactory(getJedisConnectionFactory());\n    redisTemplate.afterPropertiesSet();\n    return redisTemplate;\n  }\n\n  private JedisConnectionFactory getJedisConnectionFactory() {\n    if (jedisConnectionFactory == null) {\n      synchronized (LOCK) {\n        if (jedisConnectionFactory == null) {\n          JedisShardInfo shardInfo = new JedisShardInfo(HOST, PORT);\n          shardInfo.setPassword(PASSWORD);\n          shardInfo.setTimeout(REDIS_TIMEOUT);\n          JedisConnectionFactory factory = new JedisConnectionFactory(shardInfo);\n          factory.setHostName(HOST);\n          factory.setPort(PORT);\n          factory.setPassword(PASSWORD);\n          factory.setTimeout(REDIS_TIMEOUT);\n          factory.setUsePool(true);\n          factory.afterPropertiesSet();\n          addShutdownHook(factory);\n          jedisConnectionFactory = factory;\n        }\n      }\n    }\n    return jedisConnectionFactory;\n  }\n\n  private void addShutdownHook(final JedisConnectionFactory factory) {\n    Runtime.getRuntime().addShutdownHook(new Thread() {\n      @Override\n      public void run() {\n        if (factory != null) {\n          try {\n            factory.destroy();\n          } catch (Exception e) {\n            LOGGER.warn(REDIS_ERROR, e);\n          }\n        }\n      }\n    });\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ea940b3-e7cf-428e-944b-25ea32fe36e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":497,"endLine":520,"content":"getVersion();\n\n    protected abstract String getTaskTimeoutMins();\n\n    public List<String> getIgnoreMetadataFieldNames() {\n        return null;\n    }\n\n    protected abstract FilterRule getWhereClause(Criteria criteria, Map<String, Object> fieldNameDataTypeMap, Map<String, GSFieldDefinition> fieldNameMetaMap, DuctJobMapping ductJobMapping) throws CaasException;\n\n    protected abstract Boolean generateFreeFormTask();\n\n    protected Map getAdditionalDetails(CaasConnectorConfig connectorConfig, DuctJobMapping ductJobMapping) {\n        return connectorConfig.getExternalJarAdditionalProperties();\n    }\n\n    protected Map getAttributesWithLookupFieldsIfPresent(CaasMetadataService service, DuctJobMapping ductJobMapping, PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        return service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n    }\n\n    protected String getNameForDHFilterRule(String mapping, String resourceName) {\n        return mapping.replaceAll(\"[^a-zA-Z0-9_]+\", \"\");\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa97d6f7-0143-4c9f-8e3a-ad7ced421266","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/AbstractCaasDao.java","startLine":73,"endLine":104,"content":"o.getGSidAsString(), CoreErrorCode.SYSTEM_ERROR, 500);\n    log.info(\"Update entity {} with gsid {}, {}\", entityClass.getSimpleName(), o.getGSidAsString(), o);\n    Map<String, Object> valueMap = columnValueMap(o);\n    valueMap.put(DuctDaoUtils.DELETED_COLUMN, o.getDeleted());\n    valueMap.put(DuctDaoUtils.MODIFIED_DATE_COLUMN, new Timestamp(System.currentTimeMillis()));\n    String updateQuery = DuctDaoUtils.updateQuery(tableName, valueMap, Collections.singletonMap(DuctDaoUtils.GSID_COLUMN, o.getGSidAsString()));\n    valueMap.put(DuctDaoUtils.GSID_COLUMN, o.getGSidAsString());\n    namedParameterJdbcTemplate().execute(updateQuery, valueMap, PreparedStatement::executeUpdate);\n    return o;\n  }\n\n  @Override\n  public Optional<T> findOne(String gsid) {\n    String query = String.format(\"SELECT * FROM %s WHERE gsid = :gsid\", tableName);\n    return Optional.ofNullable(DataAccessUtils.singleResult(namedParameterJdbcTemplate().query(query,\n        Collections.singletonMap(DuctDaoUtils.GSID_COLUMN, gsid), rowMapper)));\n  }\n\n  @Override\n  public T findOneOrThrow(String gsid) {\n    return findOne(gsid).orElseThrow(() -> new SystemException(CoreErrorCode.INVALID_REQUEST, 404));\n  }\n\n  @Override\n  public List<T> find(Pageable pageable) {\n    String query = DuctDaoUtils.getSelectQueryWithPageable(DuctDaoUtils.SELECT_ALL_QRY, tableName, pageable, getAllowedSortingColumns());\n    return namedParameterJdbcTemplate().query(query, rowMapper);\n  }\n\n  @Override\n  public void remove(T entity) {\n    lo","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05deb244-5753-480f-8b7e-f36d238a7456","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":261,"endLine":278,"content":"ue((null != ductJobMapping.getCaasS3FileDetails() && StringUtils.isNotEmpty(ductJobMapping.getCaasS3FileDetails().getFilesDir()))\n              , CoreErrorCode.INVALID_REQUEST, CaasValidationCode.INVALID_INPUT.getUserText(), CaasValidationCode.INVALID_INPUT.getUserText(), 500);\n    }\n\n    int batchSize = FeatureToggleUtil.evaluateFeature(SAP_DATAPSHERE_WRITEBACK_BATCH_SIZE, RequestContextProvider.getTenantId(), 1000);\n\n    //construct columnName to columnType map\n    Map<String, String> colNameToDataType = new HashMap<>();\n    try {\n      GainsightSAPDatasphereChannelFactory gainsightSAPDatasphereChannelFactory = new GainsightSAPDatasphereChannelFactory();\n      GainsightSAPDatasphereChannelService gainsightSAPDatasphereChannelService = gainsightSAPDatasphereChannelFactory.getChannelFromPnpConnectionInfo(pnpConnectionsInfo);\n      List<String> ignoreSystemFields = new ArrayList<>();\n//              Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n//              .getValue(\"uc.sap.datasphere.system.fields\", \"# Partition Information,# col_name\").split(COMMA));\n      List<String> dataTypesSupportingLength = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n          .getValue(\"datasphere.supported.dt.length\", \"NVARCHAR,VARCHAR,CHAR\").split(COMMA));\n      List<String> dataTypesSupportingLengthAndScale = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n          .getValue(\"datasphere.supported.dt.length.scale\", \"DECIMAL\").split(COM","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a385624b-9819-418d-ab1d-13822733f4e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":92,"endLine":117,"content":"ap, DuctJobMapping ductJobMapping) {\n        return null;\n    }\n\n    @Override\n    protected Boolean generateFreeFormTask() {\n        return true;\n    }\n\n    @Override\n    protected String getTaskTimeoutMins() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.external.task.ipaas.default.timeout\", \"240\");\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        try {\n            CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ductJobMapping.getConnectorType());\n            int limit = Math.min(ductJobMapping.getLimit(), maxPageSize);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n            IpaasAccountUserDetails ipaasAccountUserDetails = ipaasAccountUserDetailsDao.findByTenantId(ductJobMapping.getTenantId());\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> metaInfoDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n\n            Map<String, Object> fieldNameDataTypeMap = metaInfoDefinitionMap.get(ductJobMapping.getResourceName()).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, GSFieldDefinition::getDataType));\n      ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38119af2-8750-43ff-8e48-37aa05ccaa61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":386,"endLine":407,"content":"pConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(meetingDetailsRequestDTO.getConnectionId());\n        DuctUtils.validateConnection(pnpConnectionsInfo);\n\n        GainsightPrecondition.assertNotNull(meetingDetailsRequestDTO.getMeetingId(), UCValidationCode.PNP_INVALID_INPUT, \"Meeting Id not present in the request\", HttpStatus.SC_BAD_REQUEST);\n\n        switch (pnpConnectionsInfo.getConnectionType()) {\n            case ZOOM:\n                List<Map<String, Object>> meetingDetails = fetchSynchronisedDataFromZoom(pnpConnectionsInfo, MEETINGS_OBJECT_NAME, meetingDetailsRequestDTO);\n                List<Map<String, Object>> meetingRecordings = fetchSynchronisedDataFromZoom(pnpConnectionsInfo, RECORDINGS_OBJECT_NAME, meetingDetailsRequestDTO);\n                List<Map<String, Object>> meetingParticipants = fetchSynchronisedDataFromZoom(pnpConnectionsInfo, PARTICIPANTS_OBJECT_NAME, meetingDetailsRequestDTO);\n\n                Map<String, Object> meetingDetailsMap = meetingDetails.get(0);\n                meetingDetailsMap.put(RECORDING_FILES_KEYWORD, meetingRecordings);\n                meetingDetailsMap.put(PARTICIPANTS_OBJECT_NAME, meetingParticipants);\n                return meetingDetailsMap;\n\n            default:\n                throw new Exception(\"Unsupported connector type\");\n        }\n    }\n\n    private List<Map<String, Object>> fetchSynchronisedDataFromZoom(PNPConnectionsInfo pnpConnectionsInfo, String objectName, MeetingDetailsRequestDTO meetingDetailsRequestDTO) thr","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c152d5b-7fbb-41b4-b32c-d600841578b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1577,"endLine":1587,"content":"Type().equals(pnpConnectionsInfoFromDB.getAuthorizationType())) {\n            caasConnectorConfig.getAuthInfo(pnpConnectionInfo.getAuthorizationType()).getFieldsInfoList().stream().filter(requiredFieldsInfo -> requiredFieldsInfo.isRequiredForAuthorization()).forEach(requiredFieldsInfo -> {\n                if (requiredFieldsInfo.getProperties().containsKey(IPaasConstants.STORE_IN_DB) && (Boolean) requiredFieldsInfo.getProperties().get(IPaasConstants.STORE_IN_DB) &&\n                        requiredFieldsInfo.getProperties().containsKey(IPaasConstants.IS_SECRET_KEY) && (Boolean) requiredFieldsInfo.getProperties().get(IPaasConstants.IS_SECRET_KEY)) {\n                    if (!(requiredFieldsInfo.getProperties().containsKey(IPaasConstants.IS_VIEWABLE) && (Boolean) requiredFieldsInfo.getProperties().get(IPaasConstants.IS_VIEWABLE))\n                            && ((Map) pnpConnectionInfo.getProperties()).get(requiredFieldsInfo.getFieldName()).equals(Constants.SECRET_STRING)) {\n                        ((Map) pnpConnectionsInfoFromDB.getProperties())\n                                .put(requiredFieldsInfo.getFieldName(), ((Map) pnpConnectionsInfoFromDB.getProperties()).get(requiredFieldsInfo.getFieldName()));\n                    } else {\n                        ((Map) pnpConnectionsInfoFromDB.getProperties()).put(requiredFieldsInfo.getFieldName(),\n                                SecretData.fromValue((String) ((Map) pnpConnectionInfo.getProperties()).get(requiredFieldsInfo.getFieldName(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7dcf63aa-5516-4ee6-a86d-729a147d5754","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1242,"endLine":1267,"content":"ak;\n            case GS_BULK_API:\n            case GAINSIGHT_PX:\n            case SAP_MKT:\n                baseTokenDetail.setAccessKey(SecretData.fromValue(accessSecret));\n                break;\n            case PRODUCTBOARD:\n            case AHA:\n            case ECOSYSTEM:\n                baseTokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(accessSecret));\n                break;\n        }\n        return baseTokenDetail;\n    }\n\n    private void isCrmConnectedOrDisabled(ConnectorType connectorType) throws CaasException {\n        if (!FeatureToggleUtil.evaluateBooleanFeature(IPaasConstants.IPAAS_CONNECTORS_ENABLED, RequestContextProvider.getTenantId())) {\n            List<PNPConnectionsInfo> pnpConnectionsInfoList = pnpConnectionInfoDao.getAllConnectionByConnectorType(connectorType);\n            if (!GainsightCollectionUtils.nullSafeList(pnpConnectionsInfoList).isEmpty()) {\n                throw new CaasException(new GsExternalSystemErrorMapping(String.format(CaasValidationCode.MULTIPLE_CONNECTION_NOT_ALLOWED.getUserText() + connectorType)));\n            }\n        }\n        boolean isConnectorEnabled = DYNAMICS.equals(connectorType) ? getFeatureEnabled(DYNAMICS_FEATURE_NAME, Boolean.FALSE) : true;\n        log.info(String.format(\"From feature toggle framework ConnectorEnabled is %s for connector %s \", isConnectorEnabled, connectorType));\n        if (!isConnectorEnabled) {\n            throw new CaasException(new GsExternalSystemErrorMapping(String.format(CaasValida","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ae04bdf-7281-4e40-8b5c-3dec5d0056b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":400,"endLine":425,"content":"AsString = includeValues.stream().map(value -> \"'\" + value + \"'\").collect(Collectors.toList());\n                    if (isPicklist(externalDataType)) {\n                        evaluatedExpression.append(\"Microsoft.Dynamics.CRM.In(PropertyName='\")\n                                .append(fieldName)\n                                .append(\"'\")\n                                .append(\",\")\n                                .append(\"PropertyValues=\")\n                                .append(includeValuesAsString)\n                                .append(\")\");\n                    } else if (isMultiSelectPicklist(externalDataType)) {\n                        evaluatedExpression.append(\"Microsoft.Dynamics.CRM.ContainValues(PropertyName='\")\n                                .append(fieldName)\n                                .append(\"'\")\n                                .append(\",\")\n                                .append(\"PropertyValues=\")\n                                .append(includeValuesAsString)\n                                .append(\")\");\n                    }\n                }\n                break;\n            case EXCLUDES:\n                List<Object> excludeValues = new ArrayList<>();\n                if (rule.getValues() instanceof List) {\n                    for (FieldInfo fieldInfo : rule.getValues()) {\n                        if (isStringType(externalDataType) && !Objects.isNull(fieldInfo.getValue())) {\n                            excludeValues.add(escapeSql(String.valueOf(fiel","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60f69cb3-f095-461c-90d5-3294c3ce165c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZendeskNativeDataSourceService.java","startLine":146,"endLine":166,"content":"nseType()) && apiConfigAttributes.getResponseType().equals(ResponseType.XML);\n            JsonNode jsonNode = metadataEngineService.executeApi(httpClient, apiConfigAttributes.getResponseRootKey(), connectorConfigByObjectName.getRateLimitDetails(),isXmlResponse);\n            Map<String, Object> externalSystemResponse = new HashMap<>();\n            List dataList = new ArrayList();\n            Map<String, Object> jsonMap = new ObjectMapper().convertValue(jsonNode, new TypeReference<Map<String, Object>>() {\n            });\n            dataList.add(jsonMap);\n            externalSystemResponse.put(DATA, dataList);\n\n            return DuctResponse.builder().externalSystemResponse(externalSystemResponse).\n                    tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .connectorType(pnpConnectionsInfo.getConnectionType()).ductStatus(DuctStatus.SUCCESS)\n                    .totalNumberOfRecords(populateTotalNumberOfRecords(externalSystemResponse)).externalResourceName(ductJobMapping.getResourceName())\n                    .jobId(ductJobMapping.getJobId()).build();\n        } catch (Exception e) {\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataCon","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3c4a323-0e13-4ddc-b825-f71faf1f38fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":434,"endLine":459,"content":"stemErrorMapping(String.valueOf(httpResponse.getResponseCode()),\n                        String.valueOf(httpResponse.getErrorCode()),\n                        responseMap.get(DuctErrorConstants.MESSAGE)));\n            } else if (httpResponse.getResponseCode() != 200) {\n                LOGGER.error(\"{CAAS} Error in External System \");\n                Map<String, Object> responseMap = MAPPER.readValue(httpResponse.getRespMsg(), Map.class);\n                throw new CaasException(new GsExternalSystemErrorMapping(String.valueOf(httpResponse.getResponseCode()),\n                        String.valueOf(httpResponse.getErrorCode()),\n                        responseMap.get(DuctErrorConstants.MESSAGE)));\n            } else {\n                fields = MAPPER.readValue(respMsg, JsonNode.class);\n            }\n\n            String directoryPath = Paths.get(\"\").toAbsolutePath() + \"/\" + RequestContextProvider.getTenantId();\n            createDirectory(directoryPath);\n            directoryPath = directoryPath + \"/\" + \"NATIVE\";\n            createDirectory(directoryPath);\n            directoryPath = directoryPath + \"/\" + \"RAW\";\n            createDirectory(directoryPath);\n            logResponse(directoryPath, objectName, fields);\n            return fields;\n        } catch (CaasException e) {\n            throw e;\n        } catch (Exception e) {\n            LOGGER.error(\"{CAAS} Error in Internal System\", e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTER","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fefa2d7-2929-4885-b9d1-80efa8cc7601","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/PipedriveV2ConnectionService.java","startLine":78,"endLine":94,"content":"alSystemErrorMapping(CaasValidationCode.INVALID_AUTH_TYPE.getUserText()));\n        AuthDetails authDetails = authInfoOptional.get();\n        AuthorizationUrl authorizationUrl = authDetails.getAuthorizationUrl();\n        OAuthDetail oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigDAO.getConnectorConfig(pnpConnectionsInfo.getConnectionType());\n        Map<String, Object> properties = new HashMap<>();\n        properties.put(\"nativeEnabled\", true);\n        properties.put(UCConstants.GSIntegration.PNP_CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        String state = gainsightAccountServiceFactory.getState(pnpConnectionsInfo.getConnectionId(), properties);\n        Map<String, Object> flattenConnectionInfoWithOAuthAndCallbackUrl = null;\n        String authUrl = null;\n        try {\n            flattenConnectionInfoWithOAuthAndCallbackUrl = DuctUtils.getFlattenConnectionInfoWithOAuthAndCallbackUrl(oAuthDetail, caasConnectorConfig, pnpConnectionsInfo, null, state);\n            authUrl = authService.getAuthorizationUrl(metadataEngineConfigByConnectorType, authorizationUrl, flattenConnectionInfoWithOAuthAndCallbackUrl, pnpConnectionsInfo);\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to get auth url for Pipedrive : {0}\",e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConsta","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c456ec6-2a52-4c2e-b901-590978a613b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctUtils.java","startLine":288,"endLine":330,"content":" childRules.addAll(getFieldListFromCriteria(childRule));\n            });\n            fields.addAll(childRules);\n        }\n        return fields;\n    }\n\n    public static boolean isDecimalType(String dataType) {\n        Matcher matcher = Pattern.compile(DECIMAL_TYPE_REGEX).matcher(dataType);\n        return matcher.find();\n    }\n\n    public static boolean isStructType(String dataType) {\n        Matcher matcher = Pattern.compile(STRUCT_TYPE_REGEX).matcher(dataType);\n        return matcher.find();\n    }\n\n    public static boolean isArrayType(String dataType) {\n        Matcher matcher = Pattern.compile(ARRAY_TYPE_REGEX).matcher(dataType);\n        return matcher.find();\n    }\n\n    public static boolean isMapType(String dataType) {\n        Matcher matcher = Pattern.compile(MAP_TYPE_REGEX).matcher(dataType);\n        return matcher.find();\n    }\n\n    public static Integer extractScaleFromDecimal(String value) {\n        Matcher matcher = Pattern.compile(DECIMAL_TYPE_REGEX).matcher(value);\n        if (matcher.matches()) {\n            //int precision = Integer.parseInt(matcher.group(1));\n            int scale = Integer.parseInt(matcher.group(2));\n            return scale;\n        }\n        return null;\n    }\n\n    public static File convertToFile(MultipartFile inputCSVFile) {\n        File file = null;\n        try {\n            file = File.createTempFile(\n                    RequestContextProvider.getTenantId() + \"_\" + UUID.randomUUID(), UCConstants.CSV);\n            inputCSVFile.transferT","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a1a2e77-ba3b-4f2a-a689-e34fe4c58043","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":46,"endLine":88,"content":"ework.stereotype.Service;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.util.StopWatch;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.prefs.CsvPreference;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.nio.charset.StandardCharsets;\nimport java.sql.SQLException;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FORMAT;\nimport static com.gainsight.duct.constants.DuctErrorConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.COMMA;\n\n@Service\n@Order(1000)\n@Slf4j\npublic class DatabricksDataSourceService extends DataHighwayInteractionServiceBase implements ConnectorDataSourceService {\n\n    private static final String RESULTS = \"results\";\n\n    @Override\n    protected void setJsonPath(FieldInfo internalFieldInfo, String fieldName, String objectName, Map<String, GSFieldDefinition> fieldNameToGSDefinitionMap) {\n        internalFieldInfo.setJsonPath(fieldNameToGSDefinitionMap.get(fieldName).getDbName());\n    }\n\n    @Override\n    protected String getTaskName() {\n        return \"CaasDatabricksExtract\";\n    }\n\n    @Override\n    protected String getTeamName() {\n        return DuctConstants.CONNECTORS;\n    }\n\n    @Override\n    protected String getUseLatest() {\n        return DeploymentProperties.getDeploymentProperties().getValue(\"uc.caas.databricks.external.task.databricks.extract.use.latest\", \"t","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad9db3e5-95db-4315-a336-2d09e3bc2b6f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctPXExtractService.java","startLine":1,"endLine":43,"content":"package com.gainsight.duct.data;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.DuctResponse;\nimport com.gainsight.duct.beans.QueryAPIResponseBean;\nimport com.gainsight.duct.beans.dh.CaaSExtractDetails;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.processor.GainsightPXFetchService;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.enums.DHTaskType;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Map;\n\n@Service\n@Order(300)\n@Slf4j\npublic class DuctPXExtractService implements ConnectorDataSourceService {\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private static final int MAX_INPUT_COUNT = 10000;\n\n    @Autowired\n    GainsightPXFetchService gainsightPXFetchService;\n\n    @Autowired\n    PNPConnectionInfoDao pnpConnectionInfoDao;\n\n    @Override\n    public DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMappin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e4562d8-28fe-446d-a229-55ec9a3fb89b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":154,"endLine":174,"content":"(DuctRequestDTO ductRequestDTO) throws CaasException {\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.EXTERNAL\n                || StringUtils.isNotEmpty(ductRequestDTO.getConnectionId())) {\n            GainsightPrecondition.assertNotNull(ductRequestDTO.getConnectionId(), CoreErrorCode.INVALID_PARAMETER,\n                    \"Connection Id should be present\", \"Connection Id should be present\", 400);\n            validateMappings(ductRequestDTO);\n            PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductRequestDTO.getConnectionId());\n            DuctUtils.validateConnection(pnpConnectionsInfo);\n            ductValidationService.validateRequest(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.EXTERNAL);\n            ductRequestDTO.setConnectorType(pnpConnectionsInfo.getConnectionType());\n        } else {\n            validateMappings(ductRequestDTO);\n            ductRequestDTO.setTargetSystem(TargetSystem.GAINSIGHT);\n        }\n        ductRequestDTO.setDuctDataOperation(DuctDataOperation.READ);\n        DuctJobMapping ductJobMapping = createDuctJobMapping(ductRequestDTO);\n        ductJobMapping.setEncryptedRequestInfo(CryptUtil.getSimpleCryptor().encrypt(JsonUtil.toJsonString(RequestContextProvider.getRequestInfo())).encoded());\n        if (ductRequestDTO.getTargetSystem() == TargetSystem.GAINSIGHT) {\n            throw new NotSupportedException(\"Synchronous Fetch from Gainsight is not supported yet\");\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3995da8a-d396-44d5-9f6a-be918ac78e6c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":424,"endLine":451,"content":"responseBean.getNextPageToken());\n            responseBean = ductJobMappingService.getSynchronizedDataFromExternalSystem(meetingDetailsRequestDTO.getMeetingId(), ductRequestDTO);\n            records.addAll(responseBean.getRecords());\n        }\n        return records;\n    }\n\n    @Override\n    public Map<String, Object> uploadFile(String connectionId, File file, Map<String, Object> options, String folderId) {\n        PNPConnectionsInfo connectionsInfo = getConnectionId(connectionId);\n        GainsightPrecondition.assertNotNull(connectionsInfo, UCValidationCode.PNP_CONNECTOR_PROJECT_INFO_NULL, HttpStatus.SC_BAD_REQUEST);\n\n        Map<String, Object> uploadResponse = new HashMap<>();\n        switch (connectionsInfo.getConnectionType()) {\n            case HUBSPOT:\n                GainsightHubspotFetchService gainsightHubspotFetchService = new GainsightHubspotFetchServiceImpl();\n\n                String clientId = connectionsInfo.getTokenDetail().getClientId().getString();\n                String clientSecret = connectionsInfo.getTokenDetail().getClientSecret().getString();\n                String refreshToken = CryptHandler.getInstance().decrypt(connectionsInfo.getTokenDetail().getRefreshToken());\n\n                uploadResponse = gainsightHubspotFetchService.uploadFile(clientId,\n                        clientSecret, refreshToken, file, options, folderId);\n                break;\n            default:\n                log.error(\"Unsupported connector type\");\n        }\n        return upl","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96dfc7f4-0659-47c9-b247-4eee5a3a3a03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/UCXMLUtility.java","startLine":50,"endLine":75,"content":"\tif (!s.isEmpty()) {\n\t\t\treturn s.get(0);\n\t\t} else {\n\t\t\treturn StringUtils.EMPTY;\n\t\t}\n\t}\n\n\tpublic static List<String> getElementValuesById(Document doc, String id) {\n\t\tif (doc == null) {\n\t\t\tthrow new SystemException(\"Document cannot be null\", 500);\n\t\t}\n\t\tList<String> resultIds = Lists.newArrayList();\n\t\tdoc.getDocumentElement().normalize();\n\t\tNodeList nList = doc.getElementsByTagName(id);\n\t\tfor (int i = 0; i < nList.getLength(); i++) {\n\t\t\tNode node = nList.item(i);\n\t\t\tif (null != node) {\n\t\t\t\tresultIds.add(nList.item(i).getTextContent());\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresultIds.add(StringUtils.EMPTY);\n\t\t\t}\n\t\t}\n\t\treturn resultIds;\n\t}\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2b16097-f8ba-49f6-950a-88706871df06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/ConnectionAccountDAOImpl.java","startLine":35,"endLine":80,"content":"tenantId\");\n    }\n\n    @Override\n    protected MongoTemplate getMongoTemplate() {\n        MongoTemplate mongoTemplate = getSchemaMongoTemplate();\n        GainsightMongoConverter.setKeyDotReplacement(mongoTemplate);\n        return mongoTemplate;\n    }\n\n    @Override\n    protected void setEntityId(AccountDetail entity, String entityId) {\n        entity.setAccountId(entityId);\n        if (entity.getAccountType() == AccountType.SEGMENT_IO || entity.getAccountType() == AccountType.DATA_API || entity.getAccountType() == AccountType.S3CONNECTOR) {\n            entity.setSnId(entityId);\n        }\n    }\n\n    @Override\n    protected void setTenantId(AccountDetail entity, String tenantId) {\n        entity.setTenantId(tenantId);\n    }\n\n    @Override\n    public AccountDetail insert(AccountDetail entity) {\n        setNotificationProperties(entity);\n        return super.insert(entity);\n    }\n\n    @Override\n    public List<AccountDetail> insertAll(List<AccountDetail> entities) {\n        setNotificationProperties(entities);\n        return super.insertAll(entities);\n    }\n\n    private void setNotificationProperties(List<AccountDetail> entities) {\n        for (AccountDetail entity : entities) {\n            setNotificationProperties(entity);\n        }\n    }\n\n    private void setNotificationProperties(AccountDetail entity) {\n        Map<String, Object> properties = entity.getProperties();\n        if (properties == null) {\n            properties = Maps.newHashMap();\n            entity.setProperties","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4352534-2302-4dbf-9764-5ec4fdfd0bc9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":961,"endLine":977,"content":"ctionsInfoFromDB.setTokenDetail(getEncryptedBaseTokenDetail(GainsightUtils.valueOf(pnpConnectionInfoFromUI.getProperties()\n                            .get(\"API_KEY\")), ConnectorType.GAINSIGHT_PX));\n                    assertNotNull(pnpConnectionInfoFromUI.getProperties().get(DuctCommonConstants.PX_URL), CaasValidationCode.INVALID_INPUT);\n                    UrlValidator.getInstance().isValid(pnpConnectionInfoFromUI.getProperties().get(DuctCommonConstants.PX_URL).toString());\n                    assertTrue(UrlValidator.getInstance().isValid(pnpConnectionInfoFromUI.getProperties().get(DuctCommonConstants.PX_URL).toString()), CaasValidationCode.INVALID_URL);\n                    pnpConnectionsInfoFromDB.getProperties().put(DuctCommonConstants.PX_URL, pnpConnectionInfoFromUI.getProperties().get(DuctCommonConstants.PX_URL));\n                    pnpConnectionsInfoFromDB = insertPxMultiInstance(pnpConnectionInfoFromUI);\n                    getPxSubscription(pnpConnectionsInfoFromDB);\n                    pnpConnectionsInfoFromDB.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n                    break;\n                case REST_API:\n                    pnpConnectionsInfoFromDB = processCustomConnectionDetails(pnpConnectionInfoFromUI);\n                    break;\n                case SNOWFLAKE:\n                    try {\n                        if (isPasswordChanged(pnpConnectionInfoFromUI.getProperties().getOrDefault(PASSWORD, StringUtils.EMPTY).toString(),\n                          ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd1ca692-d29c-47f8-a3f8-3ce9c0b65347","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1857,"endLine":1862,"content":"T.getUserText()));\n        }\n        return oAuthDetail;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a4559ba-0c38-47a0-aa5e-d7b5323925a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/SnowflakeMetadataService.java","startLine":1,"endLine":18,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @Author Manas Ranjan Sur\n * @Date 31st March 2022\n * @Description Metadata Interface for Snowflake\n */\npublic interface SnowflakeMetadataService {\n    List<Map<String, Object>> listAllObjects(PNPConnectionsInfo pnpConnectionsInfo) ;\n\n    List<Map> getObjectAttributes(PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws CaasException;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a81ab302-34e4-42fb-a987-611ead8322bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":62,"endLine":92,"content":"n String from AuditRecord\", e);\n            return false;\n        }\n        Response response = httpClientService.post(AUDIT_SERVICE_END_POINT, params, requestBodyJson, MediaType.APPLICATION_JSON_TYPE);\n        return extractPOSTResponse(response);\n    }\n\n    @Override\n    public AuditRecord getAuditRecordByUCRequestId(String ucRequestId) {\n        if (null == ucRequestId) {\n            return null;\n        }\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(AUDIT_SERVICE_AUDIT_TOKEN, AUDIT_SERVICE_AUDIT_TOKEN_VALUE);\n        String auditServiceGetURL;\n        Response response;\n        Map<String, Object> queryMap = Maps.newHashMap();\n        queryMap.put(UCConstants.SYSTEM_TAGS, ucRequestId);\n        try {\n            auditServiceGetURL = AUDIT_SERVICE_END_POINT + UCConstants.QUESTION_MARK + getQueryParams(queryMap);\n            response = httpClientService.get(auditServiceGetURL, headers);\n        } catch (Exception e) {\n            LOGGER.error(String.format(\"Unable to get Audit Records for ucRequestId %s from Audit Service\", ucRequestId), e);\n            return null;\n        }\n        List<AuditRecord> auditDataList = extractGETResponse(response);\n        if (auditDataList.isEmpty()) {\n            LOGGER.error(String.format(\"No Audit Records found for %s ucRequestId. Returning back first record\", ucRequestId));\n            return null;\n        } else if (auditDataList.size() > 1) {\n            LOGGER.error(String.format(\"Found Multiple Audit Re","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"897dbb0e-8208-4f5f-85a9-0e247c722a4f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/sfdc/SObjectField.java","startLine":330,"endLine":390,"content":"tedFormula) {\n        this.calculatedFormula = calculatedFormula;\n    }\n\n    public List<PickListValue> getPicklistValues() {\n        return picklistValues;\n    }\n\n    public void setPicklistValues(List<PickListValue> picklistValues) {\n        this.picklistValues = picklistValues;\n    }\n\n    public Boolean getDependentPicklist() {\n        return dependentPicklist;\n    }\n\n    public void setDependentPicklist(Boolean dependentPicklist) {\n        this.dependentPicklist = dependentPicklist;\n    }\n\n    public List<String> getReferenceTo() {\n        return referenceTo;\n    }\n\n    public void setReferenceTo(List<String> referenceTo) {\n        this.referenceTo = referenceTo;\n    }\n\n    public String getRelationshipName() {\n        return relationshipName;\n    }\n\n    public void setRelationshipName(String relationshipName) {\n        this.relationshipName = relationshipName;\n    }\n\n    public String getRelationshipOrder() {\n        return relationshipOrder;\n    }\n\n    public void setRelationshipOrder(String relationshipOrder) {\n        this.relationshipOrder = relationshipOrder;\n    }\n\n    public Boolean getCascadeDelete() {\n        return cascadeDelete;\n    }\n\n    public void setCascadeDelete(Boolean cascadeDelete) {\n        this.cascadeDelete = cascadeDelete;\n    }\n\n    public Boolean getRestrictedDelete() {\n        return restrictedDelete;\n    }\n\n    public void setRestrictedDelete(Boolean restrictedDelete) {\n        this.restrictedDelete = restrictedDelete;\n    }\n\n    public String","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"40eb5b2b-b6ec-457b-998f-58867f841e4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":275,"endLine":289,"content":")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.READ)\n    public ResponseObj getObjectAttributes(@ApiParam(value = \"Connection Id for fetching attributes\", required = true) @PathVariable(\"connectionId\") String connectionId,\n                                           @ApiParam(value = \"Object to fetch attributes for\", required = true) @PathVariable(\"objectname\") String objectName,\n                                           @ApiParam(value = \"Consumer using the API\", required = false) @RequestParam(value = \"consumer\", required = false) String consumer,\n                                           @ApiParam(value = \"Resolve option sets for Picklist\", required = false) @RequestParam(value = \"includePicklistOptions\", required = false) boolean includePicklistOptions) {\n        try {\n            return new ResponseObj(true, ductService.getObjectAttributes(objectName, connectionId, consumer, includePicklistOptions));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            Object responseData = prepareErrorResponseForException(e.getGsExternalSystemErrorMapping());\n            ResponseObj responseObj = new ResponseObj(false, responseData);\n            if (DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE.equals(e.getGsExternalSystemErrorMapping().getMessage())) {\n                responseObj.setMessage(DuctErrorConstants.PERMISSION_NOT_AVAILABLE_TO_ACCESS_RESOURCE);\n                responseObj.setErrorDesc(DuctError","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"851edf13-72cc-41e7-9750-c988e702a2f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dbqueue/MetadataGenerationMessageInfo.java","startLine":1,"endLine":35,"content":"package com.gainsight.duct.beans.dbqueue;\n\nimport com.gainsight.integration.bean.metadata.engine.MetadataGenerationDetails;\nimport com.gainsight.queue.db.message.DefaultMessagePayloadTransformer;\nimport com.gainsight.queue.db.message.MessageInfo;\nimport com.gainsight.queue.db.message.MessagePayloadTransformer;\nimport com.gainsight.queue.db.message.splitter.BatchedMessageTypeSplitter;\nimport com.gainsight.queue.db.message.splitter.MessageTypeDbMessageSplitter;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MetadataGenerationMessageInfo implements MessageInfo<MetadataGenerationDetails> {\n    private static final DuctProcessMessage messageType = DuctProcessMessage.METADATA_GENERATION_TASK;\n    private static final MessagePayloadTransformer<MetadataGenerationDetails> transformer = new DefaultMessagePayloadTransformer<>(MetadataGenerationDetails.class);\n\n    @Override\n    public String getSupportedType() {\n        return messageType.getName();\n    }\n\n    @Override\n    public String getQueueName() {\n        return messageType.getQueueName();\n    }\n\n    @Override\n    public MessagePayloadTransformer<MetadataGenerationDetails> getPayloadTransformer() {\n        return transformer;\n    }\n\n    @Override\n    public MessageTypeDbMessageSplitter getMessageSplitter() {\n        return new BatchedMessageTypeSplitter(1);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ce908f4-4976-4479-b8bf-464e59dfc302","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/SnowflakeDaoImpl.java","startLine":37,"endLine":61,"content":"tatic final String CONNECTION_FAILED_MESSAGE = \"Failed to connect to Snowflake\";\n    private static final String QUOTES = \"\\\"\";\n    private static final String DOT = \".\";\n\n    public SnowflakeDaoImpl(PNPConnectionsInfo pnpConnectionsInfo) {\n        this.connectionDetail = (SnowFlakeConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        this.pnpConnectionsInfo = pnpConnectionsInfo;\n        setConnection(pnpConnectionsInfo);\n    }\n\n    @Override\n    public List<Map<String, Object>> listAllObjects()  {\n        Map ipaasProperties = (Map)pnpConnectionsInfo.getProperties().get(\"IPAAS_PROPERTIES\");\n        String db = ipaasProperties.get(\"databaseName\").toString();\n        String schema = ipaasProperties.get(\"datasetId\").toString();\n        List<Map<String, Object>> tables;\n        String queryParam = QUOTES + db + QUOTES + DOT + QUOTES + schema + QUOTES;\n        try (PreparedStatement preparedStatementTables = connection.prepareStatement(\"show tables in identifier(?)\");\n             PreparedStatement preparedStatementViews = connection.prepareStatement(\"show views in identifier(?)\");) {\n            preparedStatementTables.setString(1, queryParam);\n            tables = nullSafeList(executeWithMapListHandler(preparedStatementTables));\n            preparedStatementViews.setString(1, queryParam);\n            List<Map<String, Object>> views = nullSafeList(executeWithMapListHandler(preparedStatementViews));\n            tables.addAll(views);\n        } catch (SQLException sql","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30ca5599-c49d-4acd-9077-77e9ba33ff78","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/DuctOperatorType.java","startLine":27,"endLine":76,"content":"andType.BINARY),\n  //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n  INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", DuctOperandType.BINARY),\n  EXCLUDES(\"Excludes\", \"excludes\", \"excludes\", \"$left NOT IN ($right)\", DuctOperandType.BINARY),\n  IS_NULL(\"Is Null\", \"isNull\", \"isNull\", \"isNull\", DuctOperandType.UNARY),\n  IS_NOT_NULL(\"Is Not Null\", \"isNotNull\", \"isNotNull\", \"isNotNull\", DuctOperandType.UNARY);\n\n  private static final Map<String, DuctOperatorType> MAP = new HashMap<>();\n\n    static {\n        for (DuctOperatorType type : values()) {\n            MAP.put(type.alias.toLowerCase(), type);\n        }\n    }\n\n    private String display;\n    private String symbol;\n    private String alias;\n    private String sql;\n    private DuctOperandType ductOperandType;\n\n    DuctOperatorType(String display, String symbol, String alias, String sql, DuctOperandType ductOperandType) {\n        this.display = display;\n        this.symbol = symbol;\n        this.alias = alias;\n        this.sql = sql;\n        this.ductOperandType = ductOperandType;\n    }\n\n    public String getDisplay() {\n        return display;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    public String getPostgresSql() {\n        return sql;\n    }\n\n    public String getAlias() {\n        return alias;\n    }\n\n    public DuctOperandType getOperandType() {\n        return ductOperandType;\n    }\n\n    public String replace(String sql, String with, boolean l","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b259b5c-a672-47c4-bfcf-7e88782c8236","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DynamicsValidationDataSourceService.java","startLine":55,"endLine":77,"content":"onnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n    public void validateFields(DuctRequestDTO ductRequestDTO, Map<String, ObjectDefinition> objectDefinitionMap) throws CaasException {\n        ObjectDefinition objectDefinition = objectDefinitionMap.get(ductRequestDTO.getResourceName());\n        Set<String> notAvailableFields = new HashSet<>();\n        Set<String> lookupFields = new HashSet<>();\n        Optional<GSFieldDefinition> fieldDefinitionOptional;\n\n        for (String field : ductRequestDTO.getFields()) {\n            fieldDefinitionOptional = objectDefinition.getFields().stream()\n                    .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(field)).findFirst();\n            if (!fieldDefinitionOptional.isPresent()) {\n                String[] sourceFieldNameList = field.split(\"\\\\.\");\n                if (sourceFieldNameList.length == 2) {\n                    fieldDefinitionOptional = objectDefinition.getFields().stream()\n                            .filter(gsFieldDefinition -> gsFieldDefinition.getDbName().equalsIgnoreCase(sourceFieldNameList[0])).findFirst();\n\n                    if (fieldDefinitionOptional.isPresent()) {\n                        GSFieldDefinition gsFieldDefinition = fieldDefinitionOptional.get();\n                        if ((null != gsFieldDefinition.getMeta())\n                                && MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(gsFieldDefinition.getMeta().getOri","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"58045d0f-fa87-4a6b-8218-16c91983d90d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ODataQueryBuilder.java","startLine":423,"endLine":449,"content":": rule.getValues()) {\n                        if (isStringType(externalDataType) && !Objects.isNull(fieldInfo.getValue())) {\n                            excludeValues.add(escapeSql(String.valueOf(fieldInfo.getValue())));\n                        } else {\n                            excludeValues.add(fieldInfo.getValue());\n                        }\n                    }\n                } else {\n                    FieldInfo fieldInfo = rule.getValues().get(0);\n                    if (isStringType(externalDataType) && !Objects.isNull(fieldInfo.getValue())) {\n                        excludeValues.add(escapeSql(String.valueOf(fieldInfo.getValue())));\n                    } else {\n                        excludeValues.add(fieldInfo.getValue());\n                    }\n                }\n\n                if (CollectionUtils.isNotEmpty(excludeValues)) {\n                    List<String> valuesAsString = excludeValues.stream().map(value -> \"'\" + value + \"'\").collect(Collectors.toList());\n                    if (isPicklist(externalDataType)) {\n                        evaluatedExpression.append(\"Microsoft.Dynamics.CRM.NotIn(PropertyName='\")\n                                .append(fieldName)\n                                .append(\"'\")\n                                .append(\",\")\n                                .append(\"PropertyValues=\")\n                                .append(valuesAsString)\n                                .append(\")\");\n                    } else if (isMultiSelectPicklist(ex","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b219f14-b38d-41c2-acb3-e746270894b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":259,"endLine":288,"content":").asText());\n\n            if (dataTypeMappingsForField != null && !StringUtils.isEmpty(dataTypeMappingsForField.getWritebackFormat()))\n                metaProperties.put(WRITEBACK_FORMAT, dataTypeMappingsForField.getWritebackFormat());\n            if (dataTypeMappingsForField != null && dataTypeMappingsForField.getDecimalPlaces() != null)\n                meta.put(DECIMAL_PLACES, dataTypeMappingsForField.getDecimalPlaces());\n\n            populatePicklistValuesForField(field, connectorConfig, fieldDefinition);\n\n            if (field.get(CREATEABLE) != null) {\n                meta.put(CREATEABLE, field.get(CREATEABLE).asBoolean());\n            }\n            if (field.get(UPDATEABLE) != null) {\n                meta.put(UPDATEABLE, field.get(UPDATEABLE).asBoolean());\n            }\n            if (field.get(NULLABLE) != null) {\n                meta.put(NILLABLE, field.get(NULLABLE).asBoolean());\n            }\n            if (field.get(VENDOR_READ_ONLY) != null) {\n                meta.put(READ_ONLY, field.get(VENDOR_READ_ONLY).asBoolean());\n            }\n            //No property to identify hidden field marking accessible as true by default for all fetched fields\n            meta.put(ACCESSIBLE, true);\n\n            meta.put(PROPERTIES, metaProperties);\n\n            fieldDefinition.put(META, meta);\n\n            //override meta on datatype level if required based on datatype config.\n            if (dataTypeMappingsForField != null && ObjectUtils.isNotEmpty(dataTypeMappingsForField.ge","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8aa45b7f-564b-4d92-8ff3-65b7e56755f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":327,"endLine":344,"content":"ansformationConfig())) {\n            LOGGER.info(\"No meta transformation config found for picklist fields.\");\n            return;\n        }\n\n        String picklistValuesPath = (String) caasConnectorConfig.getMetadataTransformationConfig().get(DuctConstants.ConnectorConfigConstants.PICKLIST_VALUES_PATH);\n        String fallbackPicklistValuesPath = (String) caasConnectorConfig.getMetadataTransformationConfig().get(DuctConstants.ConnectorConfigConstants.FALLBACK_PICKLIST_VALUES_PATH);\n        String picklistNameKey = (String) caasConnectorConfig.getMetadataTransformationConfig().get(DuctConstants.ConnectorConfigConstants.PICKLIST_NAME_IDENTIFIER);\n        String picklistValueKey = (String) caasConnectorConfig.getMetadataTransformationConfig().get(DuctConstants.ConnectorConfigConstants.PICKLIST_VALUE_IDENTIFIER);\n\n        if (StringUtils.isNotEmpty(picklistValuesPath) && ObjectUtils.isNotEmpty(field.get(picklistValuesPath))) {\n            List<Map> picklistOptions = new ArrayList<>();\n            List<JsonNode> picklistValues = StreamSupport.stream(field.get(picklistValuesPath).spliterator(), false).collect(Collectors.toList());\n            for (JsonNode option : picklistValues) {\n                Map<String, Object> picklistOption = new HashMap<>();\n                picklistOption.put(LABEL, option.get(picklistNameKey));\n                picklistOption.put(VALUE, ObjectUtils.isNotEmpty(option.get(picklistValueKey)) ? option.get(picklistValueKey) : option.get(picklistNameKey));\n   ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50c01eb7-63f0-4b1c-ab71-59f18918ab6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/generator/SchemaGeneratorServiceImpl.java","startLine":35,"endLine":60,"content":"ivate MetadataGenerationDetailsDao metadataGenerationDetailsDao;\n\n    private static final String FORMAT = DeploymentProperties.getDeploymentProperties().getValue(\"supported.dateTime.format\",\n            \"yyyy-MM-dd,yyyy-MM-dd,yyyy-MM-dd'T'HH:mm:ss.SSSZZ,yyyy-MM-dd'T'HH:mm:ss.SSSz,yyyy-MM-dd'T'HH:mm:ss.SSSXXX,yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n\n    private static final List<String> SUPPORTED_FORMAT = Arrays.stream(FORMAT.split(\",\")).collect(Collectors.toList());\n\n    private static final Map<String, Integer> dataTypePriorityMap;\n\n    static {\n        dataTypePriorityMap = new HashMap<>();\n        dataTypePriorityMap.put(\"STRING\", 6);\n        dataTypePriorityMap.put(\"DATETIME\", 5);\n        dataTypePriorityMap.put(\"DATE\", 4);\n        dataTypePriorityMap.put(\"NUMBER\", 3);\n        dataTypePriorityMap.put(\"BOOLEAN\", 2);\n        dataTypePriorityMap.put(\"ARRAY\", 1);\n    }\n\n    @Override\n    public List<GSFieldDefinition> generateSchemaFromData(MetadataGenerationDetails metadataGenerationDetails,\n                                                          JsonNode data, Map<String, Object> objectDefinition, String fieldNamePrefix) {\n        List<GSFieldDefinition> gsFieldDefinitions = DuctUtils.OBJECT_MAPPER.convertValue(objectDefinition.get(FIELDS), new TypeReference<List<GSFieldDefinition>>() {\n        });\n        Set<String> fieldNames = gsFieldDefinitions.stream().map(GSFieldDefinition::getFieldName).collect(Collectors.toSet());\n        Map<String, GSFieldDefinition> generatedFieldDefin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8ef8fc4-3fc6-47c7-93db-03d74f89f7a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DataHighwayUtils.java","startLine":301,"endLine":326,"content":"tadataFieldNames,dateFormate,dateTimeFormate);\n\n        List<FieldInfo> fieldInfoValues = new ArrayList<>();\n        if (ObjectUtils.isNotEmpty(criteria.getValues())) {\n            //because is not null, null the values can be empty\n            if (criteria.getValues() instanceof List) {\n                for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap, ignoreMetadataFieldNames,dateFormate,dateTimeFormate);\n                    value.setValue(val);\n                    fieldInfoValues.add(value);\n                }\n            } else {\n                FieldInfo value = new FieldInfo();\n                value.setFieldType(FieldType.VALUE);\n                DataHighwayUtils.setDataHighwayDataTypeForGivenType(fieldNameGSDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap, ignoreMetadataFieldNames,dateFormate,dateTimeFormate);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        filterRule.setFieldInfo(internalFieldInfo);\n        filterRule.setValues(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if (FilterOperator.INCLUDES.equals(criteria.getOper","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f13c43fc-4c1a-4112-bbd6-348f016f1232","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctService.java","startLine":34,"endLine":41,"content":"ObjectDefinition> getObjectAttributesUsingEngine(String objectName, String connectionId, String consumer) throws CaasException;\n\n    List<Map<String, Object>> getFileDetails(String connectionId, Set<String> fileIds, boolean signedUrl) throws CaasException;\n\n    Map<String, Object> uploadFile(String connectionId, File file, Map<String, Object> options, String folderId);\n\n    Object fetchMeetingDetails(MeetingDetailsRequestDTO meetingDetailsRequestDTO) throws Exception;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a800ef36-4e32-4503-ac71-80331f634f09","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/service/IpaasBulkFileDownloadServiceImpl.java","startLine":278,"endLine":305,"content":"ength());\n            DuctS3Utility.uploadFileStreamOnS3(PNP_BUCKET_NAME, s3FileName, s3FilePath, fi, objectMetadata, jobId);\n            log.info(\"s3 load of file complete s3FilePath:{} size:{}\", s3FilePath, jobId);\n        } catch (Exception e) {\n            log.error(\"Exception in uploading\", e);\n        }\n        return s3FilePath;\n    }\n\n    public File updateFileHeaders(File file, DuctJobMapping ductJobMapping, char quoteChar,\n                                  char escapeChar) throws CaasException {\n        try {\n            List<String> fieldNames = getFieldFromJobMapping(ductJobMapping);\n            File outputFile = File.createTempFile(file.getAbsolutePath() + \"_headers\", \".csv\");\n            try (CSVReader csvReader = new CSVReader(new FileReader(file), ICSVParser.DEFAULT_SEPARATOR,\n                    ICSVParser.DEFAULT_QUOTE_CHARACTER,\n                    '\\0');\n                 CSVWriter csvWriter = new CSVWriter(new FileWriter(outputFile), ',',\n                         quoteChar,\n                         escapeChar,\n                         ICSVWriter.DEFAULT_LINE_END)) {\n\n                List<String> headers = Arrays.asList(csvReader.readNext());\n                String[] newHeaders = getHeaders(fieldNames, headers, ductJobMapping.getResourceName());\n                csvWriter.writeNext(newHeaders);\n                Iterator<String[]> iterator = csvReader.iterator();\n                while (iterator.hasNext()) {\n                    csvWriter.writeNext(iterator.next","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0231cd15-9574-4563-a7ce-066016b7a2bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/PicklistOption.java","startLine":1,"endLine":38,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport java.io.Serializable;\n\npublic class PicklistOption implements Serializable {\n        private static final long serialVersionUID = 1L;\n        private String picklistIdentifier;\n        private String picklistLabel;\n        private String picklistValue;\n\n        public String getPicklistIdentifier() {\n            return picklistIdentifier;\n        }\n\n        public void setPicklistIdentifier(String picklistIdentifier) {\n            this.picklistIdentifier = picklistIdentifier;\n        }\n\n        public String getPicklistLabel() {\n            return picklistLabel;\n        }\n\n        public void setPicklistLabel(String picklistLabel) {\n            this.picklistLabel = picklistLabel;\n        }\n\n        public String getPicklistValue() {\n            return picklistValue;\n        }\n\n        public void setPicklistValue(String picklistValue) {\n            this.picklistValue = picklistValue;\n        }\n    }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f6d9161-4b27-4f06-a049-800e58945168","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientService.java","startLine":1,"endLine":35,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.audit;\n\nimport com.gainsight.integration.bean.audit.AuditRecord;\nimport com.gainsight.integration.bean.enums.audit.AuditEntityType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport java.util.List;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 12:47\n */\npublic interface DuctAuditLogClientService {\n\n    /**\n     * @param auditRecord The record to send to Audit Service.\n     */\n    boolean postAuditRecord(AuditRecord auditRecord);\n\n    /**\n     * @param ucRequestId systemId for which we need to get the Audit Record.\n     */\n    AuditRecord getAuditRecordByUCRequestId(String ucRequestId);\n\n    /**\n     * @param limit no of records to be returned\n     * @return the List of Audit Records.\n     */\n    List<AuditRecord> getConnectionTopAuditLogs(ConnectorType connectorType, AuditEntityType auditEntityType, int limit,\n                                                int offset);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"94fce7fd-92fc-4edf-940d-b6ee4c62106d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AuditLogUtility.java","startLine":28,"endLine":63,"content":";\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n\npublic class AuditLogUtility {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AuditLogUtility.class);\n\n    private static final Map<String, AttributeAuditType> jobAttributeTypeMap = Maps.newHashMap();\n    private static final Map<String, AttributeAuditType> connectionAttributeTypeMap = Maps.newHashMap();\n\n    private static final String TASK_INFO_DELETE = \"Task Info_Delete\";\n    public static final String UTC_DATETIME_FORMAT = \"yyyy-MM-dd'T'HH:mm:ss\";\n\n\n    static {\n\n        jobAttributeTypeMap.put(UCConstants.JOB_NAME, AttributeAuditType.NAME);\n\n        connectionAttributeTypeMap.put(\"connectionName\", AttributeAuditType.NAME);\n        connectionAttributeTypeMap.put(\"timeZone\", AttributeAuditType.TIMEZONE);\n        connectionAttributeTypeMap.put(\"tokenDetail\", AttributeAuditType.KEYS);\n        connectionAttributeTypeMap.put(\"connectionSetupStatus\", AttributeAuditType.CONNECTION_STATUS);\n    }\n\n\n    public static AuditRecord createAuditLog(AuditOperationType auditOperationType, AuditEntityType auditEntityType, UnifiedConnectorRequest unifiedConnectorRequest, List<BeanPropertyTracker> propertyTrackerLists, EventStatusEnum eventStatusEnum) {\n        AuditRecord auditRecord = null;\n        switch (auditOperationType) {\n            case CREATE:\n                auditRecord = generateCreateAuditLogs(auditEntityType, unifie","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"851778a6-0c99-47db-afd5-c159090c58e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/EcosystemsMetadataService.java","startLine":1,"endLine":11,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface EcosystemsMetadataService {\n\n  List<Map<String, Object>> listAllObjects(PNPConnectionsInfo pnpConnectionsInfo);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31eab6ed-a493-41e9-9a4d-7541a28be553","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":327,"endLine":358,"content":"tus.NO_DATA_FOUND);\n        } else {\n            ductResponse.setDuctStatus(DuctStatus.SUCCESS);\n        }\n        return ductResponse;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(String recordId, DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        log.info(\"Loading bulk data to dynamics started for the job: {}\", ductJobMapping.getJobId());\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, UCValidationCode.PNP_CONNECTOR_PROJECT_INFO_NULL, HttpStatus.SC_BAD_REQUEST);\n        Map<String, Object> requestObjectLevelWritebackOperation = (Map<String, Object>) ductJobMapping.getProperties().get(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION);\n\n        //For Dynamics, we support writing to only one object at a time\n        GainsightPrecondition.assertTrue((Objects.nonNull(requestObjectLevelWritebackOperation) && requestObjectLevelWritebackOperation.size() == 1)\n                , CoreErrorCode.INVALID_REQUEST, CaasValidationCode","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34934773-36b1-4f1c-9f12-9a5ae8d39059","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/enhance/metadata/EnhanceMetadataServiceImpl.java","startLine":214,"endLine":236,"content":"(Map<String, Object> fieldInfo, FieldSaveType saveType) {\n        Map overrideAttribute = Maps.newHashMap();\n        overrideAttribute.put(MetadataCommonUtil.OVERRIDE_KEY, PATH);\n        overrideAttribute.put(MetadataCommonUtil.OVERRIDE_KEY_VALUE, fieldInfo.get(FIELD_NAME));\n        overrideAttribute.put(SAVE_TYPE, saveType);\n        overrideAttribute.put(VENDOR_NATIVE_TYPE, fieldInfo.get(DATA_TYPE));\n        overrideAttribute.put(VENDOR_DISPLAY_NAME, fieldInfo.get(LABEL));\n        overrideAttribute.put(META, fieldInfo.get(META));\n        overrideAttribute.put(LAST_MODIFIED_DATE, GainsightUtils.getCurrentUTCDate());\n        return overrideAttribute;\n\n    }\n\n    private List<EnhancedGSFieldDefinition> transformMapToDefaultEnhancedGSFieldDefinition (List<Map<String, Object>> fieldInfo,\n                                                                                             FieldSaveType saveType){\n        List<EnhancedGSFieldDefinition> enhancedGSFieldDefinitions = Lists.newArrayList();\n        fieldInfo.stream().forEach(field -> {\n            EnhancedGSFieldDefinition gsFieldDefinition = new EnhancedGSFieldDefinition();\n            gsFieldDefinition.setFieldName(String.valueOf(field.get(FIELD_NAME)));\n            gsFieldDefinition.setLabel(String.valueOf(field.get(LABEL)));\n            gsFieldDefinition.setDataType(String.valueOf(field.get(DATA_TYPE)));\n            gsFieldDefinition.setDbName(String.valueOf(field.get(DB_NAME)));\n            GSFieldMeta fieldMeta = gson.fro","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f629778b-8f14-4bc0-848d-34cbd043ac51","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":175,"endLine":193,"content":"vice.getAuthorizationURL(accountType, hostUrl, CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties()).get(\"oauthClientId\")), CryptHandler.getInstance().decrypt((byte[]) ((Map) pnpConnectionsInfo.getProperties()).get(\"oauthClientSecret\"))) +\n                    SCOPE + BigQueryUrlUtil.getScope()\n                    + STATE + getState(pnpConnectionsInfo.getConnectionId(), additionalState);\n        } else if (AccountType.JIRA == accountType) {\n            LOGGER.info(\"Jira Autorization url fetch\");\n            return gainsightAccountService.authorizationURL(accountType, hostUrl)\n                    + STATE + getState(pnpConnectionsInfo.getConnectionId(), additionalState);\n        } else {\n            List<String> scopesList = pnpConnectionsInfo.getProperties() != null && pnpConnectionsInfo.getProperties().containsKey(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY)\n                    ? OBJECT_MAPPER.convertValue(pnpConnectionsInfo.getProperties().get(DuctCommonConstants.AUTHORIZATION_SCOPE_KEY), new TypeReference<List<String>>() {\n            })\n                    : null;\n            String scope = scopesList != null ? StringUtils.join(scopesList, \" \") : null;\n            return gainsightAccountService.authorizationURL(accountType, hostUrl, scope) + consentStr + \"&state=\" + getState(pnpConnectionsInfo.getConnectionId(), additionalState);\n        }\n    }\n\n    @Override\n    public void accessTokenAuthorization(AccountType accountType, String code, Str","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"894f3594-3c10-42ef-b120-c83c57bd251a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/Operators.java","startLine":62,"endLine":77,"content":"g getSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatus.SC_BAD_REQUEST)).sqlOperator;\n    }\n\n    public static String getBQSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatus.SC_BAD_REQUEST)).bqSQLOperator;\n    }\n\n    public static String getSAPSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatus.SC_BAD_REQUEST)).sapSQLOperator;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32bdff84-ce04-456f-8fda-dc2b9cb1f0ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":217,"endLine":247,"content":"ExternalSystemErrorMapping(AdapterErrorMessages.FAILED_WHILE_FETCHING_OBJECT.getTranslatedMessage())));\n                } else {\n                    objectMap = null;\n                }\n            } else {\n                objectMap = null;\n            }\n        }\n\n        superClassObjects.remove(objectName);\n        Map<String, ObjectDefinition> objectDefinitionMap = metadataDriver.getMetadataUsingEngine(pnpConnectionsInfo.getConnectionId(), superClassObjects, objectName, true);\n        return objectDefinitionMap;\n    }\n\n    private String fetchSuperClaas(String objectName, PNPConnectionsInfo pnpConnectionsInfo, Map<String, String> superClassMap) {\n        Object objectsCacheValue = redisCacheUtility.getValue(DuctUtils.getObjectsSuperclassCacheKey(pnpConnectionsInfo.getConnectionId()));\n        Map<String, String> cachedSuperClass = new HashMap<>();\n        if (null != objectsCacheValue) {\n            cachedSuperClass = (Map) objectsCacheValue;\n            if (cachedSuperClass.containsKey(objectName)) {\n                return cachedSuperClass.get(objectName);\n            }\n        }\n\n        log.info(\"Fetching super_class information for object: {}\", objectName);\n        HttpResponse response = null;\n        try {\n            HttpGet httpGet = new HttpGet();\n            HttpClient httpClient = HttpClients.createDefault();\n            URIBuilder uriBuilder = new URIBuilder(String.format(SUPERCLASS_INFO_URL, superClassMap.get(LINK)));\n            MetadataEngineConfig metadataE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a07555f7-91b3-4d0e-8485-4bc6f05d64af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/processor/UCAptrinsicChannelService.java","startLine":1,"endLine":25,"content":"package com.gainsight.duct.processor;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.duct.beans.error.CaasException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic interface UCAptrinsicChannelService {\n    /**\n     * This method is used to validate the given secret keys by the user.\n     * @return @boolean depending on validity of keys\n     */\n    boolean authenticateAPIKeys(String baseEndPointUrl);\n\n    boolean authenticateAPIKeys();\n\n    InputStream getObjectDescription(PNPConnectionsInfo pnpConnectionsInfo, String objectName) throws IOException;\n\n    InputStream pullData(String objectType, String filterQuer ,String baseEndPointUrl) throws IOException;\n\n    InputStream pullData(String objectType, String filterQuer) throws IOException;\n\n    InputStream getSubscriberResponse( PNPConnectionsInfo pnpConnectionsInfo) throws IOException;\n}\n\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d959f7e4-90db-4f18-8aea-b34c1c657415","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/repo/DuctDatabaseTemplateServiceImpl.java","startLine":61,"endLine":75,"content":" return appNamedParameterJdbcTemplate;\n  }\n\n  @Override\n  public DataSource getApplicationDataSource() {\n    return applicationDataSource;\n  }\n\n  @PostConstruct\n  private void init() {\n    HAJdbcTemplateCreator creator = HAJdbcTemplateCreator.getJdbcTemplateCreatorInstance();\n    this.jdbcTemplate = creator.getJdbcTemplateInstance(true, applicationDataSource);\n    this.appNamedParameterJdbcTemplate = creator.getNamedParameterJdbcTemplateInstance(true, applicationDataSource);\n  }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"114f644f-7fe6-4cc1-8f04-89b1d13040e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/ecosystem/EcosystemHelper.java","startLine":229,"endLine":255,"content":"alsIgnoreCase(\"double\"))\n                        val = num.doubleValue();\n                    else if (originalDataType.equalsIgnoreCase(\"float\"))\n                        val = num.floatValue();\n                    else if (originalDataType.equalsIgnoreCase(\"short\"))\n                        val = num.shortValue();\n                } else\n                    val = jsonObject.getAsJsonPrimitive().getAsString();\n            } else if (fieldInfo.getDataType().equalsIgnoreCase(\"datetime\")) {\n                String dateTimeValue = jsonObject.getAsJsonPrimitive().getAsString();\n                val = parseDateTimeValues(dateTimeValue, fieldInfo);\n            } else\n                val = jsonObject.getAsJsonPrimitive().getAsString();\n        } else {\n            val = jsonObject.toString();\n        }\n        return val;\n    }\n\n    private static String parseDateTimeValues(String dateTimeValue, GSFieldDefinition fieldDefinition) {\n        String format = StringUtils.defaultIfEmpty((String) fieldDefinition.getMeta().getProperties().get(\"format\"), DEFAULT_DATE_TIME_FORMAT);\n        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n        ZonedDateTime zonedDateTime = ZonedDateTime.parse(dateTimeValue)\n                .withZoneSameInstant(ZoneId.of(\"UTC\")); //convert input values with offset to utc values\n        return zonedDateTime.format(dateTimeFormatter);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"10155fb1-ea6d-4516-b4ac-a5d719a22f71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":224,"endLine":238,"content":"oleanFeature(UCConstants.LOAD_TO_DYNAMICS_ACTION_ENABLED, RequestContextProvider.getTenantId())) {\n                        fieldsFlattened = true;\n                        if (fieldSplitted.length == 3 || fieldSplitted.length == 4) {\n                            if (!objectToFieldDBNameToFieldDefinitionMap.containsKey(fieldSplitted[1])) {\n                                Map<String, ObjectDefinition> expandedObjectMetaInfoDefinitionMap = service.getObjectAttributes(fieldSplitted[1], pnpConnectionsInfo, resolvePicklistOptions);\n                                objectToFieldDBNameToFieldDefinitionMap.put(fieldSplitted[1], expandedObjectMetaInfoDefinitionMap.get(fieldSplitted[1]).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, fieldDefinition -> fieldDefinition)));\n                                objectToFieldDBNameToGSDataTypeMap.put(fieldSplitted[1], expandedObjectMetaInfoDefinitionMap.get(fieldSplitted[1]).getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getDbName, GSFieldDefinition::getDataType)));\n                            }\n                        }\n                    } else {\n                        // Example: createdby(lookup field),\n                        // createdby.firstname (field expanded from a lookup field),\n                        // createdby.<lookupfield> (field expanded from a lookup field is of type lookup),\n                        // name (field which is not expanded)\n                        if (objectToFieldDBNa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6123952a-2dcf-4823-a92b-f3fe2a10e14a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZoomDataSourceService.java","startLine":153,"endLine":190,"content":"TEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            }\n\n        } else {\n            DuctUtils.throwError(CaasValidationCode.API_CONFIG_NOT_FOUND.getGsEventCode(), CaasValidationCode.API_CONFIG_NOT_FOUND.getUserText(), resourceName + \" API Config not found\");\n            return null;\n        }\n    }\n\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int pageSize) throws CaasException {\n        return fetchSynchronziedData(\"\", ductJobMapping);\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) {\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> externalResultsList = new ArrayList<>();\n\n        List<CaasObjectApiConfig> connectorConfigs = caasObjectApiConfigDao.getConnectorConfigs(ConnectorType.ZOOM);\n        Optional<CaasObjectApiConfig> caasObjectApiConfig = connectorConfigs.stream().filter(config -> config.getObjectName().equalsIgnoreCase(ductResponse.getExternalResourceName())).findFirst();\n        i","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18047b8b-e470-4329-abe6-1961b0c06fba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctMdaCalloutUtils.java","startLine":77,"endLine":107,"content":"ring uri, Map<String, String> queryParams, Class<T> clazz) {\n    return getGsAppV1(uri, queryParams, Collections.emptyMap(), clazz);\n  }\n\n  public static <T> T getGsAppV1(String uri, Map<String, String> queryParams, Map<String, String> additionalHeaders, Class<T> clazz) {\n    String url = constructGsAppV1Url(uri, queryParams);\n    Map<String, String> headers = headers(additionalHeaders);\n    HttpResponseWrapper<ResponseObj> response = null;\n    try {\n      LOGGER.info(\"Invoking mda GET : {}\", url);\n      response = AdvancedHttpHelper.get(url, headers, ResponseObj.class);\n      if (response.getResponseBody() != null) {\n        LOGGER.info(\"Response of mda to {}, is {}\", uri, JsonUtil.toJsonString(response.getResponseBody()));\n        ResponseObj responseObj = response.getResponseBody();\n        if (responseObj.isResult()) {\n          return GainsightUtils.OBJECT_MAPPER.convertValue(responseObj.getData(), clazz);\n        } else if (responseObj.getErrorDesc() != null) {\n          throw new SystemException(responseObj.getErrorDesc(), CoreErrorCode.SYSTEM_ERROR, response.getStatusCode());\n        }\n      }\n      return null;\n    } catch (Exception e) {\n      if (response != null && response.getReasonPhrase() != null) {\n        throw new SystemException(response.getReasonPhrase(), e, CoreErrorCode.SYSTEM_ERROR, 500);\n      } else {\n        throw new SystemException(\"Error occured while invoking : \" + url, e, CoreErrorCode.SYSTEM_ERROR, 500);\n      }\n    }\n  }\n\n  public static <T> T","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"800b81dc-4689-437e-b538-1e3775632478","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/PaginatedDataExtractionService.java","startLine":191,"endLine":220,"content":".error(\"Could not find provider message on failure \", e1);\n                        }\n                        LOGGER.error(\"Could not find provider message on failure \", ex);\n                    }\n                    shouldContinue = !ignoreError.get();\n\n                }\n                if (shouldContinue) {\n                    if (retryCounter >= maxNoOfRetries) {\n                        if (StringUtils.isNotEmpty(respMsg)) {\n                            throw new Exception(String.format(\"Error occurred while trying to extract data %s\", respMsg.replaceAll(\"\\\"\", \"\")));\n                        } else {\n                            throw new Exception(String.format(\"Error occurred while trying to extract data %s\", respMsg));\n                        }\n                    }\n                    retryCounter++;\n                    shouldContinue = true;\n                    long sleepOnFail = dataExtractionRequest.getDefaultSleepTimeOnFail() == 0 ? retryCounter * secondsToWaitForRetry : dataExtractionRequest.getDefaultSleepTimeOnFail() * secondsToWaitForRetry;\n                    Thread.sleep((sleepOnFail * 1000));\n                }\n            }\n        }\n        return Collections.singletonList(file);\n    }\n\n    private int calculateRetryWaitTime(DataExtractionRequest dataExtractionRequest, String respMsg, int secondsToWaitForRetry){\n        try {\n            switch (dataExtractionRequest.getConnectorType()) {\n                case ZENDESK:\n                    JsonNode jsonNode = OBJ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"62732300-2664-4b39-89bd-282773204285","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/authorization/GainsightAccountServiceFactoryImpl.java","startLine":511,"endLine":526,"content":"vice.get(pnpConnectionProperties.get(UCConstants.GSIntegration.SFDC_TOKEN_ID).toString(), headers);\n            if (response.getStatus() != HttpStatus.SC_OK) {\n                LOGGER.error(String.format(\"Unable to fetch salesforce profile with error code %s\", response.getStatus()), response.readEntity(String.class));\n                throw new SystemException(CaasValidationCode.UNABLE_FETCH_SALESFORCE_PROFILE.getUserText(), response.getStatus());\n            }\n            SFDCProfile sfdcProfile =\n                    GainsightUtils.OBJECT_MAPPER.readValue(response.readEntity(String.class), SFDCProfile.class);\n            if (!RequestContextProvider.isPureNativeTenant() && !sfdcProfile.getOrgId().equals(RequestContextProvider.getOrgId())) {\n                throw new SystemException(String.format(INVALID_USER_MESSAGE, sfdcProfile.getUserName(), sfdcProfile\n                        .getUserName()), CaasValidationCode.OAUTH_ACCOUNT_AND_CURRENT_ACCOUNT_MISMATCH, SC_BAD_REQUEST);\n            }\n            String sfdcOrgId = sfdcProfile.getOrgId();\n            GainsightPrecondition.assertNotNull(sfdcOrgId, CaasValidationCode.INVALID_CLIENT_INPUT, CaasValidationCode.INVALID_SFDC_ORG_ID.getUserText());\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_ORG_ID, sfdcOrgId.length() == 18 ? sfdcOrgId : SalesforceUtils.convert15To18(sfdcOrgId));\n            pnpConnectionProperties.put(UCConstants.GSIntegration.SFDC_USER_ID, sfdcProfile.getUserId());\n            pnpConnect","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3befa4a4-dee5-47f3-bf11-d4e604084432","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/AhaCaasCriteriaBuilder.java","startLine":71,"endLine":97,"content":"            for (Object val : ((List) criteria.getValues())) {\n                    FieldInfo value = new FieldInfo();\n                    value.setFieldType(FieldType.VALUE);\n                    setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap);\n                    value.setValue(val);\n                    fieldInfoValues.add(value);\n                }\n            } else {\n                FieldInfo value = new FieldInfo();\n                value.setFieldType(FieldType.VALUE);\n                setDataHighwayDataTypeForGivenType(fieldNameDataTypeMap, criteria.getFieldName(), value, fieldNameMetaMap);\n                value.setValue(criteria.getValues());\n                fieldInfoValues.add(value);\n            }\n        }\n        filterRule.setFieldInfo(internalFieldInfo);\n        filterRule.setValues(fieldInfoValues);\n        filterRule.setCondition(criteria.getDuctFilterCondition());\n        filterRule.setOp(criteria.getOperatorType());\n        if(FilterOperator.INCLUDES.equals(criteria.getOperatorType()) || FilterOperator.EXCLUDES.equals(criteria.getOperatorType()))\n            filterRule.setOperatorInputs(new ArrayList<>());\n        return filterRule;\n    }\n\n    public static void setDataHighwayDataTypeForGivenType(Map<String, Object> fieldNameDataTypeMap, String fieldName,\n                                                          FieldInfo fieldInfo, Map<String, GSFieldDefinition> fieldNameToMetaMap) {\n        DataType dat","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f74c947-aeab-4cc9-9b4b-8323bf9ca382","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":113,"endLine":135,"content":"ccess for job id {}\", ductJobMapping.getConnectorType(), ductJobMapping.getJobId());\n            return DuctResponse.builder().tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .ductStatus(DuctStatus.SUBMITTED_TO_DH)\n                    .jobId(ductJobMapping.getJobId()).build();\n\n        } else {\n            LOGGER.error(\"Request was not processed by DH flow manager, Response code-{}, Response-message - {}\", response.getStatusCode(),\n                    response.getResponseBody());\n            LOGGER.info(\"Completed Extract for {} wit status Failed for job id {}\", ductJobMapping.getConnectorType(), ductJobMapping.getJobId());\n            return DuctResponse.builder().tenantId(ductJobMapping.getTenantId()).connectionId(ductJobMapping.getConnectionId())\n                    .ductStatus(DuctStatus.FAILED)\n                    .jobId(ductJobMapping.getJobId()).build();\n        }\n    }\n\n    private DuctFetchRequestDTO initiateRequest(DuctJobMapping ductJobMapping, String systemToken, ObjectDefinition objectDefinition) throws CaasException {\n        LOGGER.info(\"{} Request Creation started \", ductJobMapping.getConnectorType());\n        DuctFetchRequestDTO fetchRequestDTO = new DuctFetchRequestDTO();\n        DPWorkflowTaskDetailsDTO rootTask = getRootTask();\n        DPWorkflowDagDetailsDTO dpWorkflowDagDetailsDTO = generateDag(rootTask,\n                ductJobMapping.getJobId(), systemToken);\n\n        getTasks(ductJobMapping, dpW","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"df9a5bbb-2c0a-4095-a07d-4de61ef5baca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctExternalSystemInteractionController.java","startLine":33,"endLine":45,"content":"\n\n    @PostMapping(value = \"/notification/{connectorType}\", consumes = MediaType.TEXT_PLAIN_VALUE)\n    @ResponseBody\n    public ResponseEntity<String> handleUrlValidation(@RequestParam(value = \"validationToken\") final String validationToken, @PathVariable(\"connectorType\") ConnectorType connectorType) {\n        switch (connectorType) {\n            case MSTEAMS:\n                return ResponseEntity.ok().contentType(MediaType.TEXT_PLAIN).body(validationToken);\n            default:\n                return ResponseEntity.badRequest().body(\"Connector Type Not Supported\");\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f78c7a35-73b5-4751-abce-c677994cad57","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/IpaasHelperService.java","startLine":1,"endLine":37,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.utils;\n\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.collect.Maps;\n\nimport java.util.Map;\n\nimport static com.gainsight.integration.bean.IPaasConstants.IPAAS_INSTANCE_TOKEN;\nimport static com.gainsight.integration.bean.IPaasConstants.IPAAS_PROPERTIES;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.APPLICATION_JSON;\n\npublic class IpaasHelperService {\n\n    private static final String USER = \"User \";\n    private static final String ORG = \"Organization \";\n    private static final String ELEMENT = \"Element \";\n    private static final String CONTENT_TYPE = \"content-type\";\n    private static final String ACCEPT = \"accept\";\n    private static final String ELEMENTS_VERSION = \"Elements-Version\";\n    private static final String HELIUM = \"Helium\";\n\n\n    public static Map<String, Object> getHeaders() {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, APPLICATION_JSON);\n        headers.put(IPaasConstants.AUTHORIZATION, USER + IpaasFeatureToggleUtility.getUserToken() + \",\" + ORG + IpaasFeatureToggleUtility.getOrgToken());\n        return headers;\n    }\n\n    public static Map<String, Object> getUserHeaders(IpaasAccountUserDetails ipaasAccoun","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8e508d89-6d25-434b-8c05-ef8229801fe5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctJobMappingServiceImpl.java","startLine":454,"endLine":488,"content":"etValue().toString()));\n        }\n        properties.put(DuctConstants.OBJECT_LEVEL_WRITEBACK_OPERATION, objectLevelWritebackOperation);\n        validateAllowedOperation(objectLevelWritebackOperation);\n        return properties;\n    }\n\n    private void validateAllowedOperation(Map<String, DuctDataOperation> objectLevelWritebackOperation) {\n        Optional<DuctDataOperation> invalidOperation = objectLevelWritebackOperation.values().stream()\n                .filter(i -> !DuctDataOperation.UPDATE.equals(i)\n                        && !DuctDataOperation.INSERT.equals(i)\n                        && !DuctDataOperation.UPSERT.equals(i)).findFirst();\n        GainsightPrecondition.assertFalse(invalidOperation.isPresent(), CoreErrorCode.INVALID_PARAMETER,\n                DuctErrorConstants.INVALID_OPERTION_FOR_BULK_WRITE, DuctErrorConstants.INVALID_OPERTION_FOR_BULK_WRITE, 400);\n    }\n\n    private void wbQueueMessage(DuctJobMapping ductJobMapping) {\n        switch (ductJobMapping.getConnectorType()) {\n            case SNOWFLAKE:\n            case PIPEDRIVE:\n            case ZOHO:\n            case JIRA:\n            case INTERCOM:\n            case FRESHDESK:\n            case ZENDESK:\n            case ZUORA:\n            case BIGQUERY:\n            case SFDC:\n            case GAINSIGHT_PX:\n            case PRODUCTBOARD:\n            case SERVICENOW:\n                log.info(\"As of now write back not supported , do nothing\");\n                break;\n            case HUBSPOT:\n                log.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c3c2e15-cb1a-4381-a4be-02388a732700","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/gsload/GainsightLoadService.java","startLine":1,"endLine":28,"content":"package com.gainsight.duct.gsload;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.cryptography.keystore.KeyManagementStore;\nimport com.gainsight.cryptography.keystore.KeyType;\nimport com.gainsight.duct.utils.DuctMdaCalloutUtils;\nimport com.gainsight.duct.beans.DuctJobMapping;\nimport com.gainsight.duct.beans.dto.DuctRequestDTO;\nimport com.gainsight.duct.beans.dto.DuctResponseDTO;\nimport com.gainsight.duct.beans.error.CaasException;\nimport com.gainsight.duct.enums.GSModule;\nimport com.gainsight.properties.DeploymentProperties;\n\nimport java.util.Map;\n\npublic interface GainsightLoadService {\n    GSModule getType();\n    boolean canHandle(String resource);\n    DuctResponseDTO load(DuctJobMapping ductJobMapping, DuctRequestDTO ductRequestDTO) throws CaasException;\n\n    default String getJwtToken() {\n        Map<String, Object> gsAppV1 = DuctMdaCalloutUtils.getGsAppV1(\"datahighway/permission/jwt/systemuser\", Map.class);\n        RequestContextProvider.getRequestInfo().setJwtToken(CryptUtil.getSimpleCryptor().decrypt(KeyManagementStore.getDefaultKeyStore(DeploymentProperties.getProperties())\n                .getHighestKey(KeyType.DEFAULT), gsAppV1.get(\"value\").toString()));\n        return RequestContextProvider.getEncryptedJwtToken(true);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e430d6e8-afb3-4023-a5ed-03453c2ad0bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/HubspotToOMDConverterServiceImpl.java","startLine":149,"endLine":175,"content":"RCE, FieldSaveType.METADATA_API);\n                meta.put(PROPERTIES, metaProperties);\n\n\n                fieldDefinition.put(META, meta);\n                fieldFromObjectDefinition.add(fieldDefinition);\n            }\n            objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n        } else\n            LOGGER.info(\"Fields is supposed to be an array\");\n        objectDefinition.put(FIELDS, fieldFromObjectDefinition);\n    }\n\n    private static void handleSpecialHandlingForPickList(Map gsFieldDefinition, List<Object> pipelineValues) {\n        List<Map> picklistOptions = new ArrayList<>();\n        for (Object obj : pipelineValues) {\n            Map<String, Object> actualValues = (Map<String, Object>) obj;\n            if (actualValues.containsKey(STAGES)) {\n                List<Map<String, Object>> hubspotOptionsMap = (List<Map<String, Object>>) actualValues.get(\"stages\");\n                for (Map<String, Object> hubspotOptions : hubspotOptionsMap) {\n                    Map<String, Object> picklistOption = new HashMap<>();\n                    picklistOption.put(LABEL, hubspotOptions.get(LABEL).toString());\n                    picklistOption.put(DISPLAY_ORDER, Integer.valueOf(String.valueOf(hubspotOptions.get(DISPLAY_ORDER))));\n                    picklistOption.put(VALUE, hubspotOptions.get(ID).toString());\n                    //TODO:: Need to be checked based on which property we can set active\n                    picklistOption.put(ACTIVE, true);\n                    pick","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b47ac8cc-806e-4dae-80f7-c56bb5968a99","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/DatabricksDataValidationSourceService.java","startLine":130,"endLine":143,"content":"  }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), CaasValidationCode.OPERATOR_NOT_SUPPORTED.getUserText(),\n                    String.format(\"Filter operator: %s is not supported for field: %s\", criteria.getOperatorType().getFilterOperator(), criteria.getFieldName()));\n        }\n        return isOperatorSupported;\n    }\n\n    @Override\n    public boolean validateConnection(PNPConnectionsInfo pnpConnectionsInfo, FieldsInfo fieldInfo) throws CaasException {\n        return true;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d0323b56-74b9-4147-848c-db0bdf2b4879","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-client/src/main/java/com/gainsight/duct/clients/CENativeComparisonClient.java","startLine":373,"endLine":391,"content":"eMetadataFromCESuperClassObject.get(apiConfigAttribute.getResponseRootKey());\n                            }\n                            omdConverterFactoryService.convertToOMDFormat(nativeMetadataFromCESuperClassObject, objectDefinitionCurrentSuperClassObject, pnpConnectionsInfo, apiConfigAttribute);\n                        }\n                        Map<String, ObjectDefinition> omdMetadataSuperClassObject = Collections.singletonMap(currentSuperClassObject, DuctUtils.OBJECT_MAPPER.convertValue(objectDefinitionCurrentSuperClassObject, ObjectDefinition.class));\n                        removeDuplicateFieldsIfPresent(omdMetadataSuperClassObject, currentSuperClassObject);\n                        fieldsSet.addAll(omdMetadataSuperClassObject.get(currentSuperClassObject).getFields());\n                    }\n                    omdMetadata.get(objectName).getFields().addAll(fieldsSet);\n                }\n                removeDuplicateFieldsIfPresent(omdMetadata, objectName);\n                Map<String, ObjectDefinition> result = metadataDriver.applyGlobalAndTenantOverrides(omdMetadata, pnpConnectionsInfo, objectName);\n\n                //create a folder in the name of tenant in the current directory\n                String directoryPath = Paths.get(\"\").toAbsolutePath() + \"/\" + RequestContextProvider.getTenantId();\n                createDirectory(directoryPath);\n                directoryPath = directoryPath + \"/\" + \"NATIVE\";\n                createDirectory(directoryPath);\n                ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c580953-46e4-4bf9-b851-5550295e20f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":859,"endLine":872,"content":"(String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL),\n                    SalesforceOrgType.forValue((String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ORG_TYPE)));\n        } else if (ConnectorType.DYNAMICS.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.MDA_AREA, UCConstants.GSIntegration.DYNAMICS);\n            additionalState.put(UCConstants.GSIntegration.TENANT_ID, RequestContextProvider.getTenantId());\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.DYNAMICS, request, pnpConnectionsInfo, additionalState);\n        } else if (HUBSPOT.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.TENANT_ID, RequestContextProvider.getTenantId());\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.HUBSPOT, request, pnpConnectionsInfo, additionalState);\n        } else if (ConnectorType.GONG_IO.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.TENANT_ID, RequestContextProvider.getTenantId());\n            authorizationUrl = gainsightAccountServiceFactory.authorizationUrl(AccountType.GONG_IO, request, pnpConnectionsInfo, additionalState);\n        } else if (BIGQUERY.equals(pnpConnectionsInfo.getConnectionType())) {\n            additionalState.put(UCConstants.GSIntegration.TENAN","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55aab530-9bd9-4a02-bdba-69b29dd0176d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/DataHighwayInteractionServiceBase.java","startLine":26,"endLine":51,"content":"b.common.PNPConnectionsInfo;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.DHHttpMethod;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.FreeFormQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.enums.DHTaskType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.notifications.WorkflowWebhookJobKeys;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.notifications.WorkflowWebhookTaskKeys;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.workflow.*;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport utils.Constants;\nimport utils.ResponseObj;\n\nimport java.util.*;\nimport ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1309ad04-c9d5-415b-924f-a7b2c38558ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":256,"endLine":272,"content":"EngineConfig,authApiAttributes.get(), pnpConnectionsInfo,flattenedConnectionInfo)));\n            httpGet.setURI(uriBuilder.build());\n            response = httpClient.execute(httpGet);\n\n            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                log.error(\"Error occurred at the time of fetching super_class information for object: {} connectionId: {} response: {}\"\n                        , objectName, pnpConnectionsInfo.getConnectionId(), response);\n                throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n            } else {\n                log.info(\"Successfully fetched super_class information for object: {}\", objectName);\n                String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                JsonNode resultData = MAPPER.readTree(jsonDataResponse);\n                if (resultData.has(UCConstants.GSIntegration.RESULT) && resultData.get(UCConstants.GSIntegration.RESULT).has(NAME)) {\n                    String superClassObject = resultData.get(UCConstants.GSIntegration.RESULT).get(NAME).asText();\n                    cachedSuperClass.put(objectName, superClassObject);\n                    redisCacheUtility.putValue(DuctUtils.getObjectsSuperclassCacheKey(pnpConnectionsInfo.getConnectionId()), cachedSuperClass,\n                            DeploymentProperties.getDeploymentProperties(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"49e06d19-e65c-42e8-8833-7df7979c462e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/IpaasCaasMetadataServiceImpl.java","startLine":28,"endLine":66,"content":"n.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsSchemaService;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.platform.metadata.ComplexType;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\nimport static com.gainsight.duct.constants.DuctConstants.CLOUD_API_BASE_URL;\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.*;\nimport static com.gainsight.duct.constants.DuctConstants.FORWARD_SLASH;\n\n/**\n * @author Aditya Agrawal\n * created on 22-May-2023\n * Metadata Fetch class for IPAAS Connectors\n */\n\n@Order(10000)\n@Service\npublic class IpaasCaasMetadataServiceImpl implements CaasMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasCaasMetadataServiceImpl.class);\n\n    /*  ipaas constants attributes api */\n    priv","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2abea2df-e320-47fb-8773-922bb3dc14b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-sdk/src/main/java/com/gainsight/duct/sdk/client/DuctFrameworkClientImpl.java","startLine":65,"endLine":97,"content":"ientService;\n    }\n\n    @Override\n    public DuctResponseDTO saveMapping(DuctRequestDTO ductRequestDTO) {\n        Map<String, Object> headers = getB2BHeaders();\n        String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + DUCT_FETCH_DATA_ENDPOINT;\n        DuctResponseDTO ductResponseDTO = null;\n        try {\n            Response response = httpClientService.post(url, headers,\n                    ductRequestDTO,\n                    APPLICATION_JSON_TYPE);\n            ductResponseDTO = response.readEntity(DuctResponseDTO.class);\n            log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n        } catch (Exception e) {\n            log.error(\"Error occurred  \", e);\n        }\n        return ductResponseDTO;\n    }\n\n    @Override\n    public DuctResponseDTO getJob(String jobId) {\n        {\n            Map<String, Object> headers = getB2BHeaders();\n            String url = ductClientConfig.baseUrl() + DUCT_GENERIC_ENDPOINT + DUCT_FETCH_DATA_ENDPOINT + SLASH + jobId;\n            try {\n                Response response = httpClientService.get(url, headers);\n                ResponseObj responseObj = response.readEntity(ResponseObj.class);\n                log.info(\"Response status received from Duct Framework --> {}\", response.getStatus());\n                if (responseObj.isResult()) {\n                    return OBJECT_MAPPER.convertValue(responseObj.getData(), DuctResponseDTO.class);\n                }\n            } catch (Exception e) ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35f30983-1b01-4a4c-ab35-06666df8bdde","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/config/CaasObjectAttributesTenantConfigDAOImpl.java","startLine":29,"endLine":51,"content":"abaseTemplateService) {\n        super(databaseTemplateService, CaasObjectAttributesTenantConfig.class);\n    }\n\n    @Override\n    public List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String objectName, String tenantId) {\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType).and(\"objectName\")\n                .is(objectName).and(\"tenantId\").is(tenantId).and(\"connectionId\").exists(false));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectAttributesTenantConfig> caasObjectAttributesConfigsTenantLevel = getMongoTemplate().find(query, CaasObjectAttributesTenantConfig.class);\n        if (CollectionUtils.isEmpty(caasObjectAttributesConfigsTenantLevel)) {\n            LOGGER.warn(\"CaasObjectAttributesConfigs at tenant level found is null \");\n            return Lists.newArrayList();\n        }\n        return caasObjectAttributesConfigsTenantLevel;\n    }\n\n    @Override\n    public List<CaasObjectAttributesTenantConfig> getConfigAttributes(ConnectorType connectorType, String objectName, String tenantId, String connectionId) {\n        Query query = Query.query(Criteria.where(CaasObjectConfig.CONNECTOR_TYPE_PROP).is(connectorType).and(\"objectName\")\n                .is(objectName).and(\"tenantId\").is(tenantId).and(\"connectionId\").is(connectionId));\n        query.with(new Sort(Sort.Direction.ASC, \"order\"));\n        List<CaasObjectAttributesTenantConfig> caasObjectAttribute","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e8a4b503-7444-440f-80e6-2d8f6384375e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctConnectionServiceImpl.java","startLine":1831,"endLine":1863,"content":"nnectionStatus(ConnectionStatus.REVOKED_AND_LINKED);\n            }\n            pnpConnectionsInfo = pnpConnectionInfoDao.update(pnpConnectionsInfo);\n        }\n        revokeUserAuthQuietly(pnpConnectionsInfo.getCrmId());\n        return pnpConnectionsInfo;\n    }\n\n    private OAuthDetail getOAuthDetail(PNPConnectionsInfo pnpConnectionsInfo) throws CaasException {\n        OAuthDetail oAuthDetail;\n        if (!ConnectorType.INTERCOMV2.equals(pnpConnectionsInfo.getConnectionType())) {\n            oAuthDetail = oAuthClientService.find(AccountType.valueOf(pnpConnectionsInfo.getConnectionType().getValue()));\n            return oAuthDetail;\n        }\n\n        switch (DuctUtils.getRegion(pnpConnectionsInfo)) {\n            case US:\n                oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2);\n                break;\n            case EU:\n                oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2_EU);\n                break;\n            case AU:\n                oAuthDetail = oAuthClientService.find(AccountType.INTERCOMV2_AU);\n                break;\n            default:\n                log.error(\"Invalid Region: {}\", DuctUtils.getRegion(pnpConnectionsInfo));\n                throw new CaasException(new GsExternalSystemErrorMapping(CaasValidationCode.INVALID_INPUT.getUserText()));\n        }\n        return oAuthDetail;\n    }\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"590fdaf3-e3b9-499c-ab32-c6e9869b1b5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataDriverImpl.java","startLine":358,"endLine":376,"content":"nfig, PNPConnectionsInfo pnpConnectionsInfo, String objectName, Map<String, ObjectDefinition> objectDefinitionMap) {\n    try {\n      Optional<ResourceConfig> optionalResourceConfig = metadataEngineConfig.getResources().stream().filter(i -> objectName.equals(i.getResourceName())).findFirst();\n      if (!optionalResourceConfig.isPresent())\n        DuctUtils.throwError(CaasValidationCode.INVALID_RESOURCE_NAME.getGsEventCode(), CaasValidationCode.INVALID_RESOURCE_NAME.getUserText(), objectName + \" does not exist in source system\");\n      ResourceConfig resourceConfig = optionalResourceConfig.get();\n      List<ApiConfigAttributes> apiConfigAttributes = GainsightCollectionUtils.nullSafeList(resourceConfig.getMetadataConfig().getMetadataApi());\n      JsonNode resultData = null;\n      OMDConverterBaseService omdConverterFactoryService = omdConverterFactory.getService(pnpConnectionsInfo.getConnectionType());\n\n      if (BooleanUtils.isNotTrue(omdConverterFactoryService.postProcessingFieldsRequired())) {\n        return;\n      }\n\n      Map<String, Object> flattenConnectionInfo = DuctUtils.getFlattenedConnectionInfo(pnpConnectionsInfo);\n      for (ApiConfigAttributes apiConfigAttribute : apiConfigAttributes) {\n        HttpRequestBase httpClientForApiCall = authService.getHttpClientForMetadataRequest(metadataEngineConfig,\n            apiConfigAttribute, objectName, pnpConnectionsInfo, flattenConnectionInfo, null);\n        resultData = metadataEngineService.executeApi(httpClientForApiCall, ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a96ebb7f-9dd5-4743-8642-7fab075e99ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/connection/FreshdeskConnectionServiceImpl.java","startLine":63,"endLine":90,"content":"nsInfo.setProperties(pnpConnectionInput.getProperties());\n    validateConnectionProperties(pnpConnectionsInfo);\n    pnpConnectionsInfo.setIpaasConnection(false);\n    pnpConnectionsInfo.setAuthorizationType(AuthorizationType.ACCESS_KEY);\n    BaseTokenDetail tokenDetail = new BaseTokenDetail();\n    String accessToken = DuctUtils.valueOf(((Map<String, Object>) pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).get(USERNAME) + \":X\");\n    tokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(accessToken));\n    pnpConnectionsInfo.setTokenDetail(tokenDetail);\n    setOOBJobsProperties(pnpConnectionsInfo);\n    Pair<Boolean, String> isConnectionValid = isConnectionValid(accessToken, pnpConnectionsInfo);\n    if (BooleanUtils.isTrue(isConnectionValid.getLeft())) {\n      pnpConnectionsInfo.setConnectionStatus(ConnectionStatus.AUTHORIZED);\n      return pnpConnectionsInfo;\n    } else {\n      throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INVALID_INPUT, isConnectionValid.getRight(), null, CONNECTION_AUTHORIZATION_FAILURE));\n    }\n\n  }\n\n  private void setOOBJobsProperties(PNPConnectionsInfo pnpConnectionsInfo) {\n    pnpConnectionsInfo.getProperties().put(GENERATE_OOB_JOBS, true);\n  }\n\n  @SneakyThrows\n  private void validateConnectionProperties(PNPConnectionsInfo pnpConnectionsInfo) {\n\n    if(Objects.isNull(pnpConnectionsInfo)){\n      throw new CaasException(PROPERTIES_MISSING_ERROR, CaasV","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8feaa4b-a248-4c07-9949-9b084addd60e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":220,"endLine":248,"content":"ption occurred: {}\", e.getMessage(), e);\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse updateData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse uploadBulkData(DuctJobMapping ductJobMapping) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public QueryAPIResponseBean createQueryApiResponse(DuctResponse ductResponse) throws CaasException {\n        MetadataEngineConfig connectorConfigByObjectName = getMetadataConfig(ductResponse.getConnectorType());\n        QueryAPIResponseBean queryAPIResponseBean = new QueryAPIResponseBean();\n        List<Map<String, Object>> responseList = new ArrayList<>();\n        Optional<ResourceConfig> first = connectorConfigByObjectName.getResources().stream().filter(i -> ductResponse.getExternalResourceName().equals(i.getResourceName())).findFirst();\n        if (!first.isPresent())\n            throw new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        List<Map<String, Object>> data = OBJECT_MAPPER.convertValue(ductResponse.getExternalSystemResponse(","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a7036a9-fcf5-4499-a9fa-776bcd0906de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/DuctServiceImpl.java","startLine":119,"endLine":142,"content":"nal String AWS_REGION_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"aws.region.name\", \"us-east-1\");\n\n    static {\n        amazonS3 = AmazonS3ClientBuilder.standard()\n                .withRegion(AWS_REGION_NAME)\n                .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(PNP_ACCESS_KEY, PNP_SECRET_KEY))).build();\n    }\n\n    @Override\n    public DuctResponse fetchDataViaDH(DuctJobMapping ductJobMapping) throws CaasException {\n        try {\n            PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(ductJobMapping.getConnectionId());\n            ConnectorDataSourceService dataSourceService =\n                    connectorDataSourceFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            DuctResponse ductResponse = dataSourceService.fetchDataViaDH(ductJobMapping);\n            updateDuctJobMappingStatus(ductJobMapping.getJobId(), ductResponse);\n            return ductResponse;\n        } catch (CaasException se) {\n            catchExceptionAndUpdateStatus(se,ductJobMapping.getJobId());\n            InstrumentationUtil.recordException(ductJobMapping,DuctConstants.CAAS_WEB,se.getErrorMessage());\n            throw se;\n        } catch (Exception e) {\n            log.error(\"exception \", e);\n            CaasException caasException = new CaasException(new GsExternalSystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e)","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"27cc65b8-5c0c-420d-945c-6aade1e84301","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/ZoomValidationDataSourceService.java","startLine":70,"endLine":86,"content":"s.stream().anyMatch(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if(isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }else if(fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping-> dataTypeMapping.getExternalDatatype().equals(type))) {\n            if(isSync) {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping->dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if(!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SUPPORTED.getGsEventCode(), Caas","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0406c565-5aa4-4ff8-ac27-f941f01cedcf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IpaasDataSourceService.java","startLine":199,"endLine":210,"content":"\").append(value.get(0)).append(\"'\").append(\",\");\n\n                }\n            }\n            filterBuilder.deleteCharAt(filterBuilder.length() - 1);\n            return URLEncoder.encode(filterBuilder.toString(), \"UTF-8\");\n        }\n        return \"\";\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a064d4b6-c2ff-4bdd-a9eb-04112d1b7d42","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/DataTypeConversion.java","startLine":26,"endLine":48,"content":"     for (DataTypeConversion type : DataTypeConversion.values()) {\n            for (String connectorType : type.connectorTypes) {\n                CONNECTOR_TYPE_TO_DATA_TYPE_MAP.put(connectorType, type.dataType);\n            }\n        }\n    }\n\n    private final DataType dataType;\n    private final List<String> connectorTypes;\n\n    DataTypeConversion(DataType dataType, List<String> connectorTypes) {\n        this.dataType = dataType;\n        this.connectorTypes = connectorTypes;\n    }\n\n    public static DataType getDataType(String connectorDataType) {\n        if (StringUtils.isBlank(connectorDataType)) {\n            return DataType.STRING;\n        }\n\n        return CONNECTOR_TYPE_TO_DATA_TYPE_MAP.getOrDefault(connectorDataType, DataType.STRING);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2f577f9-4cde-45d4-bbef-b6ad34d89a4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/enums/AuthType.java","startLine":1,"endLine":14,"content":"package com.gainsight.duct.enums;\n\npublic enum AuthType {\n  // Basic mean authenticating with username and password\n  BASIC,\n  // Api_key authentication means passing authentication information in headers.\n  API_KEY,\n  // NONE as authType added as a few services won't have standard authentication supports.\n  // its like their URL itself has authenticated info.\n  NONE,\n  // OAUTH_v2 as authType would fetch the OAUTH access token and add it in the headers.\n  OAUTH_v2,\n  TWO_LEGGED_OAUTH_v2\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2372a27-87d3-4887-83cc-83a05d97394a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/IpaasBulkFileDownloadMessageProcessor.java","startLine":32,"endLine":62,"content":"public class IpaasBulkFileDownloadMessageProcessor extends AbstractDbQueueMessageProcessor {\n\n    private final MessageInfoFactory messageInfoFactory;\n\n    @Autowired\n    private IpaasBulkFileDownloadService ipaasBulkFileDownloadService;\n\n    @Autowired\n    public IpaasBulkFileDownloadMessageProcessor(MessageInfoFactory messageInfoFactory) {\n        this.messageInfoFactory = messageInfoFactory;\n    }\n\n\n    @Override\n    protected MessageResponseVO startProcess(MessageRequestVO messageRequestVO) {\n        DbMessage dbMessage = GainsightCollectionUtils.getFirstNonNull(messageRequestVO.getDbMessages());\n        MessageResponseVO messageResponseVO = MessageResponseVO.builder().build();\n        List<MessageResultVO> messageResultVOS = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(messageRequestVO.getDbMessages())) {\n            MessageResultVO resultVO = MessageResultVO.builder().build();\n            resultVO.setDbMessage(dbMessage);\n\n            try {\n                String payloadString = dbMessage.getPayload();\n                if (StringUtils.isBlank(payloadString)) {\n                    throw new SystemException(\"payload not found.\");\n                }\n                MessageInfo<IpaasBulkDownloadCallbackPayload> messageInfo = messageInfoFactory.\n                        getMessageInfo(messageRequestVO.getMessageType());\n                IpaasBulkDownloadCallbackPayload payload = messageInfo.getPayloadTransformer().toObject(payloadString);\n                RequestC","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e849d42-07d7-40c0-ac2f-267c16e91c10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DuctMSDynamicsExtractService.java","startLine":443,"endLine":461,"content":"().getIntegerValue(\"uc.dynamics.max.access.token.generation\", 4);\n            int currentRetryCount = 1;\n\n            ductResponse.setTenantId(ductJobMapping.getTenantId());\n            ductResponse.setConnectionId(ductJobMapping.getConnectionId());\n            ductResponse.setJobId(ductJobMapping.getJobId());\n            while ((nextRecord = csvReader.readNext()) != null) {\n                try {\n                    ++totalRecords;\n                    result = msDynamicsDataService.loadSingleRecord(DuctDataOperation.valueOf(objectLevelOperation.getValue().toString()), targetObject, ductJobMapping.getColumnMappings(),\n                            headers, nextRecord, objectAttributes, accessToken, lookupProjectionToNavigationProperty, entityLogicalNameToPluralName);\n\n                    if (ACCESS_TOKEN_EXPIRED.equalsIgnoreCase(String.valueOf(result.getOrDefault(ERROR_MESSAGE, EMPTY_STRING)))) {\n                        redisCacheUtility.putValue(DuctUtils.getMSDynamicsAccessCacheKey(pnpConnectionsInfo.getConnectionId()), null, 0l);\n                        if (currentRetryCount <= maxRetryCount) {\n                            //Re-generate the access_token as it's expired and re-try the record.\n                            log.warn(\"Re-generating access token for {} time\", currentRetryCount);\n                            accessToken = getAccessToken(pnpConnectionsInfo, true);\n                            result = msDynamicsDataService.loadSingleRecord(DuctDataOperation.valueOf(objec","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d985f871-403a-4960-9785-fb03b89a1c6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/audit/DuctAuditLogClientServiceImpl.java","startLine":113,"endLine":144,"content":"L, headers);\n        } catch (Exception e) {\n            LOGGER.error(\"Unable to get Connection Audit Records for from Audit Service\", e);\n            return Lists.newArrayList();\n        }\n        return extractGETResponse(response);\n    }\n\n\n    private List<AuditRecord> extractGETResponse(Response response) {\n        List<AuditRecord> auditRecordList = Lists.newArrayList();\n        JsonNode jsonNode = getJsonNodeFromResponse(response);\n        int responseCode = response.getStatusInfo().getStatusCode();\n        boolean result = getResponseStatus(response);\n        if (result) {\n            LOGGER.info(\"Received successful response code from Audit Service with response code %d\", responseCode);\n            if (jsonNode.get(\"data\") != null) {\n                ArrayNode arrayNode = (ArrayNode) jsonNode.get(\"data\");\n                if (arrayNode.size() == 0) {\n                    return auditRecordList;\n                }\n                for (int i = 0; i < arrayNode.size(); i++) {\n                    JsonNode auditRecord = arrayNode.get(i);\n                    AuditRecord auditRecordObject;\n                    try {\n                        auditRecordObject = objectMapper.readValue(auditRecord, AuditRecord.class);\n                    } catch (IOException e) {\n                        LOGGER.error(\"Unable to Read Audit Record From Audit Service\", e);\n                        continue;\n                    }\n                    auditRecordList.add(auditRecordObject);\n                }","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e03c08b4-2b81-43d6-ba2f-b293aa75ea2a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/dh/CaasFieldInfo.java","startLine":1,"endLine":20,"content":"package com.gainsight.duct.beans.dh;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class CaasFieldInfo extends FieldInfo implements Serializable {\n  private static final long serialVersionUID = -9192723249125322725L;\n\n  private Map<String, Object> meta;\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef8547f0-7070-49f0-9034-5ad3696ccddb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/SalesforceCaasMetadataServiceImpl.java","startLine":310,"endLine":325,"content":";\n        }\n        lookupDetails.setLookupObjects(lookupObjects);\n        return lookupDetails;\n    }\n\n    private static String getLookupFieldLabel(List<String> references) {\n        String fieldLabel = \"Record Id\";\n        if (CollectionUtils.isNotEmpty(references) && references.size() == 1) {\n            if (!references.get(0).endsWith(\"__c\")) {\n                fieldLabel = references.get(0) + \" Id\";\n            }\n        }\n        return fieldLabel;\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"148d515d-2278-4e69-8f99-3721478a1b53","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/DatabricksDataSourceService.java","startLine":114,"endLine":137,"content":"nnectorType == ConnectorType.DATABRICKS;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n        return null;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws CaasException {\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n        CaasConnectorConfig caasConnectorConfig = caasConnectorConfigService.getConnectorConfig(ConnectorType.DATABRICKS);\n        String objectName = ductJobMapping.getResourceName().replaceAll(\" \", \"_\");\n\n        if (org.apache.commons.lang3.ObjectUtils.isEmpty(objectDefinition)) {\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo);\n            objectDefinition = objectDefinitionMap.get(ductJobMapping.getResourceName());\n        }\n\n        Map<String, GSFieldDefinition> gsFieldsByNamesMap = objectDefinition.getFields().stream().collect(Collectors.toMap(GSFieldDefinition::getFieldName, Function.identity()));\n        List<FieldInfo> fieldInfos = new ArrayList<>();\n        for (String field : ductJobMapping.getFields()) {\n            GSFieldDefin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5981f794-449a-4c63-bb08-f0f160909bda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/dh/SAPDatasphereDataSourceService.java","startLine":24,"endLine":55,"content":"tasphereChannelService;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.integration.utils.file.FileMerger;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.collect.Lists;\nimport exception.CoreErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StopWatch;\nimport org.supercsv.io.CsvListReader;\nimport org.supercsv.prefs.CsvPreference;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.sql.SQLException;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.duct.constants.DuctConstants.DescribeMetaConstants.FORMAT;\nimport static com.gainsight.duct.constants.DuctErrorConstants.","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1671c13d-7fee-4504-a580-b1d4091be560","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/converter/FreshdeskToOMDConverterServiceImpl.java","startLine":176,"endLine":215,"content":"    //        ]\n      List<String> choicesList = (List<String>) choices;\n      for (String choice : choicesList) {\n        Map<String, Object> picklistOption = Maps.newHashMap();\n        picklistOption.put(VALUE, choice);\n        picklistOption.put(LABEL, choice);\n        picklistOptions.add(picklistOption);\n      }\n    } else if (choices instanceof Map) {\n      Map<String, Object> choicesMap = (Map<String, Object>) choices;\n      for (Map.Entry<String, Object> entry : choicesMap.entrySet()) {\n        Map<String, Object> picklistOption = Maps.newHashMap();\n\n        // \"choices\": {\n        //            \"2\": [\n        //                \"Open\",\n        //                \"Being Processed\"\n        //            ]},\n        if (entry.getValue() instanceof List) {\n          List<Object> choiceList = (List<Object>) entry.getValue();\n          picklistOption.put(VALUE, entry.getKey());\n          picklistOption.put(LABEL, DuctUtils.valueOf(choiceList));\n          picklistOptions.add(picklistOption);\n        } else if (entry.getValue() instanceof Map) {\n        /*  \"choices\":{\n            \"C1\":{\n              \"SC1\": [\n              \"i1\",\n              \"i2\"\n                ],\n              \"SC2\": [\n              \"i1\",\n                  \"i2\"\n                ]\n            }\n          }*/\n          Map choiceList = (Map) entry.getValue();\n          picklistOption.put(LABEL, entry.getKey());\n          picklistOption.put(VALUE, DuctUtils.valueOf(choiceList));\n          picklistOptions.add(pi","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05c5423a-14f4-4b9a-8c28-5c779960a1b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/engine/service/MetadataCacheDaoImpl.java","startLine":31,"endLine":46,"content":"metadataCache.setId(s);\n    }\n\n    @Override\n    protected void setTenantId(MetadataCache metadataCache, String s) {\n        metadataCache.setTenantId(RequestContextProvider.getTenantId());\n    }\n\n    @Override\n    public MetadataCache getMetadataByConnectionIdAndObjectName(String connectionId, String objectName) {\n        Query query = Query.query(Criteria.where(MetadataCache.CONNECTION_ID_PROP).is(connectionId))\n                .addCriteria(Criteria.where(MetadataCache.OBJECT_NAME_PROP).is(objectName))\n                .addCriteria(Criteria.where(MetadataCache.TENANT_ID_PROP).is(RequestContextProvider.getTenantId()));\n        return getMongoTemplate().findOne(query, MetadataCache.class);\n    }\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"489f4bc4-da2a-46b7-91cd-ba81e0e0fc15","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-common/src/main/java/com/gainsight/duct/utils/DuctConnectorCalloutUtil.java","startLine":208,"endLine":218,"content":"for (Map.Entry<String, String> header : headers.entrySet()) {\n                httpDelete.setHeader(header.getKey(), header.getValue());\n            }\n            httpClient.execute(httpDelete);\n        } catch (Exception e) {\n            LOGGER.info(\"Intentionally set the timeout to 1 sec, to not wait for the api response. Won't hamper the flow Exception : {0}\", e);\n        }\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"88990f70-e92f-44cb-91f9-07f6f5309e94","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/HubspotDataSourceService.java","startLine":170,"endLine":193,"content":"eFilterGroups(DuctJobMapping ductJobMapping, Map<String, String> fieldNameDataTypeMap) throws CaasException {\n        if (ductJobMapping.getCriteria() != null)\n            return HubspotCaasSearchRequestCriteriaBuilder.getFilterFuleFromCAASRule(ductJobMapping.getCriteria(), fieldNameDataTypeMap);\n        return null;\n    }\n\n    private HubspotTokenDetails extractAccessDetails(String connectionId) {\n        PNPConnectionsInfo pnpConnectionsInfo = getConnectionId(connectionId);\n        HubspotTokenDetails accessDetails = new HubspotTokenDetails();\n        accessDetails.setClientId(pnpConnectionsInfo.getTokenDetail().getClientId().getString());\n        accessDetails.setClientSecret(pnpConnectionsInfo.getTokenDetail().getClientSecret().getString());\n        accessDetails.setAccessToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken()));\n        accessDetails.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        return accessDetails;\n    }\n\n    @Override\n    public DuctResponse createData(DuctJobMapping ductJobMapping) throws CaasException {\n        HttpResponse response = null;\n        Map<String, Object> finalResponse;\n        try {\n            HubspotTokenDetails accessDetailsFromDB = extractAccessDetails(ductJobMapping.getConnectionId());\n            GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n            GainsightHubspotChannelFactory ga","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1699869c-d322-447d-8128-6733c0a93b18","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/config/CaasObjectTenantConfig.java","startLine":34,"endLine":102,"content":"bjects;\n  }\n\n  public void setShowOnlyIncludedObjects(Set<String> showOnlyIncludedObjects) {\n    this.showOnlyIncludedObjects = showOnlyIncludedObjects;\n  }\n\n  public int getOrder() {\n    return order;\n  }\n\n  public void setOrder(int order) {\n    this.order = order;\n  }\n\n  public String getObjectName() {\n    return objectName;\n  }\n\n  public void setObjectName(String objectName) {\n    this.objectName = objectName;\n  }\n\n  public ConnectorType getConnectorType() {\n    return connectorType;\n  }\n\n  public void setConnectorType(ConnectorType connectorType) {\n    this.connectorType = connectorType;\n  }\n\n  public String getTenantId() {\n    return tenantId;\n  }\n\n  public void setTenantId(String tenantId) {\n    this.tenantId = tenantId;\n  }\n\n  public List<Map<String, Object>> getAddedObjects() {\n    return addedObjects;\n  }\n\n  public void setAddedObjects(List<Map<String, Object>> addedObjects) {\n    this.addedObjects = addedObjects;\n  }\n\n  public Set<String> getNotSupportedObjects() {\n    return notSupportedObjects;\n  }\n\n  public void setNotSupportedObjects(Set<String> notSupportedObjects) {\n    this.notSupportedObjects = notSupportedObjects;\n  }\n\n  public String getConnectionId() {\n    return connectionId;\n  }\n\n  public void setConnectionId(String connectionId) {\n    this.connectionId = connectionId;\n  }\n\n  @Override\n  public String toString() {\n    return \"CaasObjectTenantConfig{\" +\n            \"connectorType=\" + connectorType +\n            \", addedObjects=\" + addedObjects +\n        ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6aa086de-7da0-41a9-8011-b3846dea2357","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/metadata/ServicenowCaasMetadataServiceImpl.java","startLine":143,"endLine":160,"content":";\n                httpGet.addHeader(UCConstants.AUTHORIZATION, String.format(\"Bearer %s\", authService.constructValueFromConfig(metadataEngineConfig,authApiAttributes.get(), pnpConnectionsInfo,flattenedConnectionInfo)));\n                httpGet.setURI(uriBuilder.build());\n                response = httpClient.execute(httpGet);\n                String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n                if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                    log.error(\"Error occurred at the time of fetching servicenow objects {}\", responseMap);\n                } else {\n                    if (ObjectUtils.isNotEmpty(responseMap.get(UCConstants.GSIntegration.RESULT))) {\n                        for (Map<String, Object> object : (List<Map<String, Object>>) responseMap.get(UCConstants.GSIntegration.RESULT)) {\n                            if (!object.containsKey(NAME) || Objects.isNull(object.get(NAME))) {\n                                log.warn(\"Object doesn't have name field hence skipping. sys_id: {}\", object.getOrDefault(\"sys_id\", StringUtils.EMPTY));\n                                continue;\n                            }\n                            Map<String, Object> retMap = new HashMap<>();\n                            retMap.put(OBJECT_ID, object.get(NAME));\n                            retMap.put(OBJECT_NAM","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5234f4d-4af2-4485-9f12-cc64879502f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dao-layer/src/main/java/com/gainsight/duct/dao/IpaasAccountUserDetailsDao.java","startLine":1,"endLine":31,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.dao;\n\nimport com.gainsight.dao.mapper.MongoBaseFieldMapper;\nimport com.gainsight.duct.beans.IpaasAccountUserDetails;\nimport org.springframework.data.mongodb.InvalidMongoDbApiUsageException;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\n\npublic interface IpaasAccountUserDetailsDao {\n    default Query addDeletedCriterion(Query query) {\n        try {\n            query.addCriteria(Criteria.where(MongoBaseFieldMapper.DELETED).is(false));\n        } catch (InvalidMongoDbApiUsageException e) {\n            String message = e.getMessage();\n            if (!message.contains(\"false\")) {\n                throw e;\n            }\n        }\n        return query;\n    }\n\n    IpaasAccountUserDetails findByTenantId(String tenantId);\n\n    IpaasAccountUserDetails save(IpaasAccountUserDetails ipaasAccountUserDetails);\n\n    IpaasAccountUserDetails softDelete(String tenantId);\n}\n","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4a005c6b-1771-4985-a1c4-9470e8c6c355","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/JiraDataSourceService.java","startLine":130,"endLine":157,"content":"ystemErrorMapping(DuctErrorConstants.INTERNAL_SYSTEM_ERROR_CODE, DuctErrorConstants.INTERNAL_SYSTEM_ERROR_MESSAGE, e));\n        }\n\n    }\n\n    private int populateTotalNumberOfRecords(Map<String, Object> externalSystemResponse) {\n        if (externalSystemResponse.get(\"total\") != null) {\n            return Integer.parseInt(externalSystemResponse.get(\"total\").toString());\n        }\n        return 0;\n    }\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        return null != paginationValueFromResponse ? paginationValueFromResponse.toString() : null;\n    }\n\n    private MetadataEngineConfig getMetadataConfig(ConnectorType connectorType) {\n        Object metadataConfigfromCache = DuctUtils.getMetadataConfigfromCache(redisCacheUtility, connectorType.getValue());\n        if (metadataConfigfromCache != null)\n            return OBJECT_MAPPER.convertValue(metadataConfigfromCache, MetadataEngineConfig.class);\n        MetadataEngineConfig connectorConfigByObjectName = metadataEngineConfigDao.getMetadataEngineConfigByConnectorType(connectorType);\n        redisCacheUtility.putValue(DuctConstants.METADATA_CONFIG_CACHE_KEY + connectorType.getValue(), connectorConfigByObjectName);\n        return connectorConfigByObjectName;\n    }\n\n    @Override\n    public DuctResponse fetchSynchronzied","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85bdc156-279a-4b6e-a1d0-10086e3684af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/HubspotValidationDataSourceService.java","startLine":152,"endLine":168,"content":"tDefinition)),\n                        String.format(\"Mandatory Mappings are not present or partially present. Mandatory mappings required : {%s}\", getDisplayNamesForFieldNameKeys(objectDefinition.getExpressionForRequiredFields(), objectDefinition)));\n            }\n        }\n        if (DuctDataOperation.UPDATE.equals(ductRequestDTO.getDuctDataOperation())) {\n            if (!ductRequestDTO.getData().containsKey(DuctConstants.HS_OBJECT_ID))\n                DuctUtils.throwError(CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getGsEventCode(),\n                        CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText() + \": \" + DuctConstants.HS_OBJECT_ID,\n                        CaasValidationCode.UPSERT_KEYS_NOT_PRESENT.getUserText() + \": \" + DuctConstants.HS_OBJECT_ID);\n            if (StringUtils.isEmpty(ductRequestDTO.getData().get(DuctConstants.HS_OBJECT_ID).toString()))\n                DuctUtils.throwError(CaasValidationCode.INVALID_VALUE_FOR_REQUIRED_KEYS.getGsEventCode(),\n                        String.format(\"%s, field : %s , value : %s \", CaasValidationCode.INVALID_VALUE_FOR_REQUIRED_KEYS.getUserText(), DuctConstants.HS_OBJECT_ID, ductRequestDTO.getData().get(DuctConstants.HS_OBJECT_ID)),\n                        String.format(\"%s, field : %s , value : %s \", CaasValidationCode.INVALID_VALUE_FOR_REQUIRED_KEYS.getUserText(), DuctConstants.HS_OBJECT_ID, ductRequestDTO.getData().get(DuctConstants.HS_OBJECT_ID)));\n        }\n    }\n\n    private String getDisplayNamesForFieldNa","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c6b1592-0c29-49c6-b6aa-f1ca02324916","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/validation/MSTeamsValidationDataSourceService.java","startLine":70,"endLine":86,"content":"ataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType))) {\n            if (isSync) {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(fieldType)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        } else if (fallbackDataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type))) {\n            if (isSync) {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedExternalFilterOperators();\n            } else {\n                supportedOperators = fallbackDataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equals(type)).findFirst().get().getAllowedFilterOperators();\n            }\n            isOperatorSupported = supportedOperators.contains(criteria.getOperatorType().getFilterOperator());\n        }\n        if (!isOperatorSupported) {\n            DuctUtils.throwError(CaasValidationCode.OPERATOR_NOT_SU","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2aa38ec2-cc6b-4958-85ce-55d72c4b1ce7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/ZohoV2DataSourceService.java","startLine":266,"endLine":285,"content":" {\n            CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n            Map<String, ObjectDefinition> objectDefinitionMap = null;\n            objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo,\n                    false, ductJobMapping);\n            return objectDefinitionMap.get(ductJobMapping.getResourceName());\n        } catch (CaasException cex) {\n            throw cex;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred: {}\", e.getMessage(), e);\n            DuctUtils.throwError(CaasValidationCode.EXTERNAL_SYSTEM_METADATA_NOT_FOUND.getGsEventCode(), CaasValidationCode.EXTERNAL_SYSTEM_METADATA_NOT_FOUND.getUserText(), e.getMessage());\n        }\n        return null;\n    }\n\n    private static String populatePaginationDetails(JsonNode apiResponse, PaginationDetails paginationDetails, Map<String, Object> paginationInfo) {\n        Object paginationValueFromResponse = paginationDetails.getPaginationValueFromResponse(apiResponse);\n        if(ObjectUtils.isNotEmpty(apiResponse.get(INFO_KEYWORD)) && ObjectUtils.isNotEmpty(apiResponse.get(INFO_KEYWORD).get(MORE_RECORDS_KEYWORD)) && apiResponse.get(INFO_KEYWORD).get(MORE_RECORDS_KEYWORD).asBoolean())\n            return ObjectUtils.isNotEmpty(paginationValueFromResponse) ? String.valueOf(Integer.parseInt(paginationValueFromResponse.toString()) + 1) : null;\n       ","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa537d18-2d45-48f6-86f8-2a5506a0a24a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-web/src/main/java/com/gainsight/duct/DuctController.java","startLine":323,"endLine":351,"content":"ss)\n    @PostMapping(value = \"/load/external\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj loadToExternalSystem(@ApiParam(value = \"Action Payload for Write back\", required = true) @RequestBody final BulkDataLoadRequest bulkDataLoadRequest) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.loadtoExternalSystemViaBulk(bulkDataLoadRequest));\n        } catch (CaasException e) {\n            log.error(e.getMessage(), e);\n            BulkActionResponse bulkActionResponse = prepareErrorResponseForActionException(e.getGsExternalSystemErrorMapping());\n            log.info(\"Return response to Rules from CAAS {}\", bulkActionResponse);\n            return new ResponseObj(false, bulkActionResponse);\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    @GetMapping(value = \"/load/external/{jobId}\")\n    @APIScope(component = ComponentCode.CAAS, level = AuthorizationLevel.EXECUTE)\n    public ResponseObj getStatusExternalLoad(@PathVariable(\"jobId\") String jobId) {\n        try {\n            return new ResponseObj(true, ductJobMappingService.getExternalLoadStatus(jobId));\n        } catch (Exception ex) {\n            log.error(ex.getMessage(), ex);\n            return new ResponseObj(false, ex.getMessage());\n        }\n    }\n\n    private Object prepareErrorResponseForException(GsExternalSystemErrorMapping gsE","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3801dfd0-c55c-46f2-b2d4-9049b6b3f416","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-service/src/main/java/com/gainsight/duct/data/IntercomV2DataSourceService.java","startLine":84,"endLine":119,"content":"RTING_AFTER = \"starting_after\";\n\n  private static final String PAGINATION = \"pagination\";\n\n  private static final String PROPERTIES = \"properties\";\n\n  private static final String FIELD = \"field\";\n  private static final String OPERATOR = \"operator\";\n\n  private static final String URL = \"URL\";\n\n  @Autowired\n  RedisCacheUtility redisCacheUtility;\n  @Autowired\n  MetadataEngineConfigDao metadataEngineConfigDao;\n  @Autowired\n  PNPConnectionInfoDao pnpConnectionInfoDao;\n\n  @Autowired\n  CaasMetadataFactory caasMetadataFactory;\n\n  @Override\n  public boolean canHandle(ConnectorType connectorType, boolean isIpaas) {\n    return connectorType == ConnectorType.INTERCOMV2;\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, int maxPageSize) throws CaasException {\n    PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInfoDao.findByConnectionId(ductJobMapping.getConnectionId());\n    CaasMetadataService service = caasMetadataFactory.getService(pnpConnectionsInfo.getConnectionType(), pnpConnectionsInfo.isIpaasConnection());\n    Map<String, ObjectDefinition> objectDefinitionMap = service.getObjectAttributes(ductJobMapping.getResourceName(), pnpConnectionsInfo, false, ductJobMapping);\n    return fetchSynchronziedData(ductJobMapping, objectDefinitionMap.get(ductJobMapping.getResourceName()), maxPageSize);\n  }\n\n  @Override\n  public DuctResponse fetchSynchronziedData(DuctJobMapping ductJobMapping, ObjectDefinition objectDefinition, int maxPageSize) throws C","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbf964ff-01f5-4f79-a846-4014b94950e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-dbq-worker/src/main/java/com/gainsight/duct/processor/WriteBackDynamicsMessageProcessor.java","startLine":78,"endLine":94,"content":".COMPLETED);\n            } catch (Exception exception) {\n                log.error(\"Error while processing WriteBackDynamicsMessageProcessor {}\", exception.getMessage(), exception);\n                resultVO.setDbMessageStatus(DbMessageStatus.FAILED);\n                resultVO.setMessage(exception.getMessage());\n            }\n            messageResultVOS.add(resultVO);\n        }\n        messageResponseVO.setMessageResults(messageResultVOS);\n        return messageResponseVO;\n    }\n\n    @Override\n    public Collection<String> getSupportedMessageTypes() {\n        return Collections.singletonList(DuctProcessMessage.WRITE_BACK_DYNAMICS_DATA.getName());\n    }\n}","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e57fd25-930a-4615-bd31-19847413680c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gs-duct/duct-beans/src/main/java/com/gainsight/duct/beans/UCMessageProperties.java","startLine":1,"endLine":52,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.duct.beans;\n\nimport com.gainsight.properties.ConfigFileUtil;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class UCMessageProperties {\n  private static final Logger LOGGER = LoggerFactory.getLogger(UCMessageProperties.class);\n  private static Properties messageProperties = null;\n  private static final String MESSAGES_EN_PROPERTIES = \"messages_en.properties\";\n  private final Properties properties;\n\n  private UCMessageProperties(Properties properties) {\n    this.properties = properties;\n  }\n\n  public static Properties getProperties() {\n    if (messageProperties == null) {\n      loadMessageProperties();\n    }\n    return messageProperties;\n  }\n\n  public static UCMessageProperties getMessageProperties() {\n    return PropertiesHolder.INSTANCE;\n  }\n\n  /**\n   * Method return the corresponding value for the key. If key is not present it will return null\n   *\n   * @param key {@link String} - The key for which value need to be found\n   * @return {@link String} - The value for the input key\n   */\n  public String getValue(String key) {\n    return properties.getProperty(key);\n  }\n\n  private static void loadMessageProperties() {\n    InputStream inputStream = null;\n    try {\n      String filePath = ConfigFileUtil.existin","language":"java","repositoryNamespace":"gs-duct","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null}]