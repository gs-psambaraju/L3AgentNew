[{"source":"92747732-de5a-4d01-a4ff-57607a1964fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":79,"endLine":132,"content":"     }\n            } catch (final IOException ioe) {\n                try {\n                    close();\n                } catch (final IOException e) {\n                    ioe.addSuppressed(e);\n                }\n                throw new IllegalStateException(ioe);\n            }\n        }\n    }\n\n    public List<String> readAll() throws IOException {\n        List<String> allElements = new ArrayList<>();\n\n        while (hasNext()) {\n            String nextLineAsTokens = next();\n            if (nextLineAsTokens != null) {\n                allElements.add(nextLineAsTokens);\n            }\n            cachedLine = null;\n        }\n\n        return allElements;\n    }\n\n    public String readLine() throws IOException {\n        String line = this.bufferedReader.readLine();\n        if (line == null) {\n            return null;\n        }\n        while (isComment(line)) {\n            line = this.bufferedReader.readLine();\n            if (line == null) {\n                return null;\n            }\n        }\n        line = applyRecordSeparatorPolicy(line);\n        return line;\n    }\n\n    private boolean isComment(String line) {\n        for (String prefix : comments) {\n            if (line.startsWith(prefix)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private String applyRecordSeparatorPolicy(String line) throws IOException {\n        String record = line;\n        while (line != null && !recordSeparatorPolicy.isEndOfRecord(record)) {\n            if (Thr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"617d4517-0b9e-4505-a00a-aea9015c9a81","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPDatasphereChannelService.java","startLine":1,"endLine":28,"content":"package com.gainsight.integration.connector.sapHana;\n\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\n\nimport java.io.File;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * createdBy: snargana\n * date: 01/09/24\n */\npublic interface GainsightSAPDatasphereChannelService {\n\n  List<Map<String, Object>> listAllObjects();\n  Set<Map<String, Object>> listAllFields(String objectName, List<String> ignorableSystemFields);\n  List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException;\n  List<File> fetchData(String fileDir, String jobId, String selectQuery, List<FieldInfo> fieldInfos,\n                       int maxRecordsPerBatch, double maxFileSizeInMB) throws SQLException;\n  Map<String, Object> loadBulkData(DuctDataOperation ductDataOperation, File inputDataFile, List<File> successFiles, List<File> failureFiles,\n                                   String targetObject, List<ColumnMapping> columnMappings, Map<String, String> colNameToDataType, int batchSize) throws Exception;\n  void authenticate();\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"344ef3fc-2f0d-4fac-a6d8-a634c25532d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthService.java","startLine":19,"endLine":35,"content":") throws Exception;\n\n    HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                PNPConnectionsInfo pnpConnectionsInfo, Criteria criteria,\n                                                Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam, Map<String, Object> generatedRequestBody) throws Exception;\n\n    HttpRequestBase getHttpClientForPostAuthorization(MetadataEngineConfig metadataEngineConfig,\n                                                      PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> flattenConnectionInfo,\n                                                      Map<String, Object> paginationInfo) throws Exception;\n\n    Object getAccessDeatils(AuthDetails tokenGenerationDetails, PNPConnectionsInfo pnpConnectionsInfo, MetadataEngineConfig metadataEngineConfig, Map<String, Object> flattenConnectionInfo, String responceKey) throws Exception;\n\n    HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                PNPConnectionsInfo pnpConnectionsInfo, FilterRule criteria,\n                                                Map<String, O","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e34b043b-ccb9-4bbc-b222-9fa80260bea7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":223,"endLine":250,"content":"           if (response.getResponseCode() == HttpStatus.SC_OK) {\n                    batchState = UCXMLUtility.getElementValueById(batchDetails, \"state\");\n                    LOGGER.info(\"Current batch state {} on count {}\", batchState, count);\n                } else {\n                    String errorMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                    String errorCode = SFDCExceptionUtility.errorCodeExtraction(errorMessage);\n                    LOGGER.info(\"Exception occurred while polling for batch : {}, ErrorCode : {}\", errorMessage, errorCode);\n                    throw new Exception(errorMessage);\n                }\n                ++count;\n                Thread.sleep(1000);\n            } while (!(batchState.equals(SalesforceBatchStatus.FAILED.batchState()) || batchState.equals(SalesforceBatchStatus.COMPLETED.batchState())));\n\n            return batchDetails;\n        } catch (SystemException e) {\n            if (retryCount < RETRY_COUNT) {\n                return pollForBatchToComplete(pnpConnectionsInfo, clientId, clientSecret, refreshToken, jobId, ++retryCount, sfdcApiVersion);\n            }\n            throw e;\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return pollForBatchToComplete(pnpConnectionsInfo, clientId, clientSecret, refreshToken, jobId, ++retryCount, sfdcApiVersion);\n            }\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    priv","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f97aaf4-0fcc-4714-8c66-eae8e3a19f9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":247,"endLine":267,"content":"m entityEnum = GSHubSpotEntityEnum.getInstance(entityName);\n        URIBuilder uriBuilder = getUriForEntity(entityName, false);\n        if (pageNumber != Long.MIN_VALUE) {\n            String offsetKeyWord = GSHubSpotEntityEnum.getQueryOffsetKeyWord(entityEnum);\n            uriBuilder.addParameter(offsetKeyWord, String.valueOf(pageNumber));\n        }\n        projections.stream().filter(s -> GSHubSpotEntityEnum.getQueryProjectionKeyWord(entityEnum, null) != null).forEach(s -> uriBuilder.addParameter(GSHubSpotEntityEnum.getQueryProjectionKeyWord(entityEnum, null), s));\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = null;\n        int retryCount = 2;\n        while (retryCount-- > -1) {\n            response = this.httpclient.execute(httpGet);\n            if (response.getStatusLine().getStatusCode() == 200) {\n                break;\n            } else if (retryCount <= -1) {\n                LOGGER.error(\"[HUBSPOT] The api call to source failed for retry count : {} due to status: {} , code :{}\", 2 - retryCount,\n                        response.getStatusLine(), response.getStatusLine().getStatusCode());\n                throw new Exception(AdapterErrorMessages.HUBSPOT_API_FETCH_FAILED.getTranslatedMessage() + response.getStatusLine());\n            } else {\n                LOGGER.error(\"[HUBSPOT] Sleeping for 15 secs as the api call to source failed for retry count : {} due to : {}, code :{}\",\n                        2 - retryCount, response.getStatusLin","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"155d0fad-8ecc-4679-8948-8630e4791453","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/DataEnum.java","startLine":1,"endLine":10,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum DataEnum {\n    DATA_FETCH_ASYNC,\n    DATA_FETCH_SYNC,\n    ADDITIONAL_DATA_FETCH,\n    DATA_UPDATE,\n    DATA_WRITE,\n    DATA_FETCH_BY_ID;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac11e24c-8feb-4431-a4fa-2b6d506a0c96","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":201,"endLine":220,"content":"Map<String, Object>> recordValues = Lists.newArrayList();\n        Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getJsonPath, field -> field));\n        stat = this.connection.createStatement();\n        LOGGER.info(\"Executing query : {} \", query);\n        ResultSet resultSet = stat.executeQuery(query);\n\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            Map<String, Object> map = new HashMap<>();\n\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                FieldInfo field = fieldNameToFieldInfoMap.get(resultSet.getMetaData().getColumnLabel(i + 1));\n                if (object instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                    LocalDateTime localDateTime = LocalDateTime.parse(object.toString(), defaultSrcFormatter);\n                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\")).format(dtf));\n                } else if (object instanceof Date && Objects.nonNull(field.getDateTimeProperties())) {\n                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                    LocalDate localDate = LocalDate.parse(object.to","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78291a51-a09b-495e-9781-fd852c965268","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/constants/MSDynamicsConstants.java","startLine":1,"endLine":12,"content":"package com.gainsight.integration.connector.dynamics.constants;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MSDynamicsConstants {\n\n    public static final String MICROSOFT_NAMESPACE = \"Microsoft.Dynamics.CRM\";\n    public static final String OPTION_SET_PROPERTY = \"optionSet\";\n    public static final List<String> EXPANSION_ALLOWED_TYPES = Arrays.asList(\"LOOKUP\", \"CUSTOMER\", \"OWNER\");\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f9c149f-cdbc-4dc7-afb7-ee5023b406ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":49,"endLine":68,"content":"s.get(DATABASE_NAME), AdapterErrorMessages.DATABASE_NAME_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(USERNAME), AdapterErrorMessages.USERNAME_NULL.getTranslatedMessage());\n        if(ObjectUtils.isEmpty(properties.get(PASSWORD))) {\n            Objects.requireNonNull(properties.get(CLIENT_ID), AdapterErrorMessages.CLIENT_ID_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(CLIENT_SECRET), AdapterErrorMessages.CLIENT_SECRET_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(REFRESH_TOKEN), AdapterErrorMessages.REFRESH_TOKEN_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(ACCESS_TOKEN), AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n            return new GainsightSnowflakeChannelServiceImpl(properties, AuthorizationType.OAUTH);\n        }\n        Objects.requireNonNull(properties.get(PASSWORD), AdapterErrorMessages.PASSWORD_NULL.getTranslatedMessage());\n        return new GainsightSnowflakeChannelServiceImpl(properties, AuthorizationType.BASIC_AUTH);\n    }\n\n    public static Map getAccessToken(String host, String clientId, String clientSecret, String refreshToken) throws Exception {\n        Map<String, Object> accountMap = new HashMap<>();\n        try {\n            CloseableHttpClient httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new HttpPost(String.format(ACCESS_TOKEN_ENDPOINT, host));\n\n            httpPost.setHe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"beb5068e-26cf-4c3c-8388-5d37a11ad4bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditRecord.java","startLine":258,"endLine":271,"content":"ratedBy='\" + generatedBy + '\\'' +\n        \", eventName='\" + eventName + '\\'' +\n        \", eventType=\" + eventType +\n        \", eventStatus=\" + eventStatus +\n        \", userId='\" + userId + '\\'' +\n        \", userName='\" + userName + '\\'' +\n        \", tenantId='\" + tenantId + '\\'' +\n        \", systemTags=\" + systemTags +\n        \", requestSource='\" + requestSource + '\\'' +\n        \", data=\" + data +\n        \", properties=\" + properties +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9cbfd5d-a2d5-4179-8fff-518fcd3e8565","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditData.java","startLine":57,"endLine":117,"content":"rn entityName;\n  }\n\n  /**\n   * @param entityName name of the entity for which Audit is done. For Example jobName, ConnectionName\n   */\n  public void setEntityName(String entityName) {\n    this.entityName = entityName;\n  }\n\n  /**\n   * @return {@code AuditLogEntityType}\n   */\n  public AuditEntityType getAuditEntityType() {\n    return auditEntityType;\n  }\n\n  /**\n   * @param auditEntityType Audit Entity Type associated with entity\n   */\n  public void setAuditEntityType(AuditEntityType auditEntityType) {\n    this.auditEntityType = auditEntityType;\n  }\n\n  /**\n   * @return {@code Connector}\n   */\n  public ConnectorType getConnectorType() {\n    return connectorType;\n  }\n\n  /**\n   * @param connectorType Connector Type associated with entity\n   */\n\n  public void setConnectorType(ConnectorType connectorType) {\n    this.connectorType = connectorType;\n  }\n\n  /**\n   * This method returns the list of Audit Changes made to entity\n   * @return List of {@code AuditDetails}\n   */\n  public List<AuditDetails> getAuditDetailsList() {\n    return auditDetailsList;\n  }\n\n  /**\n   * @param auditDetailsList List of AuditDetails\n   */\n  public void setAuditDetailsList(List<AuditDetails> auditDetailsList) {\n    this.auditDetailsList = auditDetailsList;\n  }\n\n  @Override\n  public String toString() {\n    return \"AuditData{\" +\n        \"entityID='\" + entityID + '\\'' +\n        \", entityName='\" + entityName + '\\'' +\n        \", auditLogEntityType=\" + auditEntityType +\n        \", connectorType=\" + connectorType +\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2957a83f-3a73-45ec-80b7-ca8c73bbb1c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":152,"endLine":180,"content":"Retries Exhausted.\",\n                            response.getStatusLine().getStatusCode(), objectType, response.getStatusLine().getReasonPhrase());\n                    LOGGER.error(errorMsg);\n                    throw new SystemException(errorMsg, ProductBoardErrorCode.PRODUCTBOAORD_DATA_FETCH_ERROR);\n                }\n            } while (shouldContinue);\n        }catch (SystemException ex) {\n            throw ex;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while trying to pull data for notes from ProductBoard :{} . Response received : {} \", ex, response);\n            int statusCode = (response != null) ? response.getStatusLine().getStatusCode() : 500;\n            if (ex.getMessage().contains(\"response code: 401\"))\n                throw new SystemException(\"Incorrect Access Key\", ex, ProductBoardErrorCode.INVALID_ACCESS_KEY, 401);\n            else\n                throw new SystemException(\"Error in connecting and pulling data\", ex, ProductBoardErrorCode.PRODUCTBOAORD_DATA_FETCH_ERROR, statusCode);\n        }\n        return data;\n    }\n\n    private void populateNotesData(List<JsonNode> data, HttpResponse response) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode jsonNode = mapper.readTree(response.getEntity().getContent());\n        Iterator<JsonNode> it = jsonNode.iterator();\n        while (it.hasNext()) {\n            data.add(it.next());\n        }\n    }\n\n    private String getUriAndPopulateData(List<Json","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fcb50e03-5809-4e81-bfbc-e689a93f4b7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/test/java/com/gainsight/integration/connector/dynamics/MSDynamicsServiceImplTest.java","startLine":65,"endLine":94,"content":"categoryincidentid\", \"new_cdcategoryincidentid.title\",\"createdonbehalfby\"))\n            .withOutputMode(OutputMode.FILE);\n        RecordsResponse records = msDynamicsDataService.getRecords(gsreGetRecordsRequest,MASTER_LOOKUP_CONFIGURATION);\n        System.out.println(records.getCsvFile());\n        System.out.println(records.getRecords());\n    }\n\n    @Test\n    public void testFetchDataOp1() {\n        GetRecordsRequest gsreGetRecordsRequest\n            = new GetRecordsRequest(\"opportunities\");\n        //gsreGetRecordsRequest.withOutputMode(OutputMode.FILE);\n\n        gsreGetRecordsRequest.withProjections(Sets.newHashSet(\"createdon\", \"new_dateonly1\"))\n            .withOutputMode(OutputMode.FILE);\n        RecordsResponse records = msDynamicsDataService.getRecords(gsreGetRecordsRequest,MASTER_LOOKUP_CONFIGURATION);\n        System.out.println(records.getCsvFile());\n        //System.out.println(records.getRecords());\n    }\n\n    @Test\n    public void testFetchData1() {\n        GetRecordsRequest gsreGetRecordsRequest\n            = new GetRecordsRequest(\"incidents\");\n        //gsreGetRecordsRequest.withOutputMode(OutputMode.FILE);\n      MASTER_LOOKUP_CONFIGURATION.put(\"incidents@@accountid\",\"customerid_account\");\n        gsreGetRecordsRequest.withProjections(Sets.newHashSet(\"accountid.accountnumber\"))\n            .withOutputMode(OutputMode.FILE);\n        RecordsResponse records = msDynamicsDataService.getRecords(gsreGetRecordsRequest,MASTER_LOOKUP_CONFIGURATION);\n        System.out.prin","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"614a5c87-3acf-4f0c-a594-da4993b65305","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":161,"endLine":188,"content":"tUtils.valueOf(msDynamicsObject.get(\"LogicalName\")));\n        objectDefinition.put(LABEL, DynamicsGainsightUtils.valueOf(MSDynamicsObjectUtil.parseDisplayName(msDynamicsObject,\n                DynamicsGainsightUtils.valueOf(msDynamicsObject.get(\"LogicalName\")))));\n\n        // Set the primaryId of the object\n        if (null != msDynamicsObject.get(\"PrimaryIdAttribute\")) {\n            objectDefinition.putIfAbsent(EXPRESSION_FOR_UPSERT_KEYS, msDynamicsObject.get(\"PrimaryIdAttribute\"));\n        }\n\n        if (null != pnpConnectionsInfo) {\n            objectDefinition.put(CONNECTION_TYPE, pnpConnectionsInfo.getConnectionType().getValue());\n            objectDefinition.put(CONNECTION_ID, pnpConnectionsInfo.getConnectionId());\n        }\n\n        List<Map<String, Object>> attributes;\n        if (!Objects.isNull(msDynamicsObject) && !CollectionUtils.isEmpty(attributes = (List) msDynamicsObject.get(\"Attributes\"))) {\n            DataTypeMappings dataTypeMappingsForField;\n            for (Map<String, Object> attribute : attributes) {\n                if (!attribute.get(\"LogicalName\").equals(\"entityimage_url\") &&\n                        (isChildAttribute(attribute) || isNotReadable(attribute))) {\n                    continue;\n                }\n\n                fieldDefinition = new HashMap();\n                Map<String, Object> meta = new HashMap<>();\n\n                fieldDefinition.put(FIELD_NAME, attribute.get(\"LogicalName\"));\n                fieldDefinition.put(LABEL, poll(attribute, ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"acff9029-4d83-4b9e-a0bc-9e64343d698f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":1,"endLine":38,"content":"package com.gainsight.integration.utils;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.gainsight.duct.beans.PicklistOption;\nimport com.gainsight.integration.bean.metadata.engine.Criteria;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class CommonUtils {\n\n    public static final Logger LOGGER = LoggerFactory.getLogger(CommonUtils.class);\n\n    public static void getValuesFromFilter(Criteria criteria, Set<String> values, String fieldName) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filter : criteria.getFilters()) {\n                    getValuesFromFilter(filter, values, fieldName);\n                }\n                return;\n            }\n            if (criteria.getFieldName().equalsIgnoreCase(fieldName))\n                values.add(criteria.getValues().toString());\n        }\n    }\n\n    public static void getValuesFromFilter(Criteria criteria, Set<String> values, String fieldName, FilterOperator operatorType) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5acbf57e-e35f-4475-b279-eca1172fa804","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescription.java","startLine":100,"endLine":153,"content":"erencedObjectType() {\n        return referencedObjectType;\n    }\n\n    public void setReferencedObjectType(String referencedObjectType) {\n        this.referencedObjectType = referencedObjectType;\n    }\n\n    public String getCanonicalName() {\n        return canonicalName;\n    }\n\n    public void setCanonicalName(String canonicalName) {\n        this.canonicalName = canonicalName;\n    }\n\n    public String getApiName() {\n        return apiName;\n    }\n\n    public void setApiName(String apiName) {\n        this.apiName = apiName;\n    }\n\n    public List<Options> getOptions() {\n        return options;\n    }\n\n    public void setOptions(List<Options> options) {\n        this.options = options;\n    }\n\n    @Override\n    public String toString() {\n        return \"GainsightHubspotFieldDescription{\" +\n                \"name='\" + name + '\\'' +\n                \", label='\" + label + '\\'' +\n                \", canonicalName='\" + canonicalName + '\\'' +\n                \", apiName='\" + apiName + '\\'' +\n                \", type='\" + type + '\\'' +\n                \", fieldType='\" + fieldType + '\\'' +\n                \", hubspotDefined=\" + hubspotDefined + '\\'' +\n                \", options=\" + options + '\\'' +\n                \", referencedObjectType='\" + referencedObjectType + '\\'' +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        GainsightHubspotFieldDescription tha","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51a3ff06-23bd-4f51-952d-064fab55c775","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/ZendeskVersionConstants.java","startLine":1,"endLine":16,"content":"package com.gainsight.integration.bean.enums;\n\npublic enum ZendeskVersionConstants {\n    ZENDESK_V1(\"v1.0\"),\n    ZENDESK_V2(\"v2.0\");\n\n    private String version;\n\n    ZendeskVersionConstants(String version) {\n        this.version = version;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad7cd80d-5e48-482d-8fb5-24aacafd689c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":24,"endLine":59,"content":"ns4.CollectionUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.ObjectUtils;\n\nimport java.io.*;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.bean.IPaasConstants.NEXT_PAGE;\nimport static com.gainsight.integration.bean.IPaasConstants.PAGE_SIZE;\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.wrapRoundBrackets;\n\n\npublic class GainsightBigQueryChannelServiceImpl implements GainsightBigQueryChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightBi","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9dc55f1-8d6f-4c2c-82cb-3c9f8a2598f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":600,"endLine":633,"content":"HashMap<>();\n        try {\n            String url = String.format(BASE_API_URL + FILE_METADATA_END_POINT, fileId);\n            if (signedUrl) {\n                url = String.format(BASE_API_URL + FILE_METADATA_SIGNED_URL_END_POINT, fileId);\n            }\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpGet.setURI(uriBuilder.build());\n\n            response = this.httpclient.execute(httpGet);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n            metadata = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n            metadata.putIfAbsent(\"id\", fileId);\n        } catch (Exception ex) {\n            LOGGER.error(\"[HUBSPOT] error while fetching file metadata for fileId : {}\", fileId, ex);\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n        return metadata;\n    }\n\n    @Override\n    public Map<String, Object> uploadFile(File file, Map<String, Object> options, String folderId) {\n        HttpResponse response = null;\n        Map<String, Object> metadata = new HashMap<>();\n        try {\n            String url = String.format(BASE_API_URL + FILES_END_POINT);\n            URIBuilder uriBuilder = new URIBuilder(url);\n\n            HttpPost post = new HttpPost();\n            post.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n            String boundary = \"--\" + UUID.randomUUID();\n            post.addHeader","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b95477ef-2e2e-4ec3-a204-33ea2869b752","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/bean/UCChannel.java","startLine":1,"endLine":47,"content":"package com.gainsight.integration.rts.bean;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.rts.enums.UCChannelStatus;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\n@ToString(callSuper = true)\npublic class UCChannel extends BaseGSEntity {\n\n    public static final String PROP_EXTERNAL_ID = \"externalId\";\n\n    /**\n     * how many times we  tried opening channel and failed.\n     */\n    public static final String PROP_RETRY_COUNT = \"retryCount\";\n    public static final String PROP_MESSAGE = \"message\";\n    public static final String LIMIT_REACHED = \"limitReached\";\n    public static final String WB_LIMIT_REACHED = \"wbLimitReached\";\n    public static final String CONN_AUTH_REVOKED = \"authorisationRevoked\";\n    public static final String TOKEN_EXPIRED = \"tokenExpired\";\n\n    private String name;\n    private String tenantId;\n    private ConnectorType connectorType;\n    private String connectionId;\n    private int indexNo;\n    private String topicName;\n    private long lastReplayId;\n    private Date lastReplayDate;\n    private UCChannelStatus status;\n    private Date processAfter;\n\n    /**\n     * Nullable instance id which is listening to this channel. null represents noone is listening.\n     */\n    private String insta","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa9d45a1-42b1-4ae8-8e44-b1544c2f3599","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/bean/GainsightBigQueryEntityDescription.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n\npublic class GainsightBigQueryEntityDescription implements Serializable {\n    private String entityName;\n    private String entityId;\n    private static final long serialVersionUID = 2515297231044187332L;\n\n    private List<GainsightBiqQueryFieldDescription> gainsightBiqQueryFieldDescriptions;\n\n    public GainsightBigQueryEntityDescription(String entityName, List<GainsightBiqQueryFieldDescription> gainsightBiqQueryFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightBiqQueryFieldDescriptions = gainsightBiqQueryFieldDescriptions;\n    }\n\n    public String getEntityName() { return entityName; }\n\n    public void setEntityName(String entityName) { this.entityName = entityName; }\n\n    public String getEntityId() { return entityId; }\n\n    public void setEntityId(String entityId) { this.entityId = entityId; }\n\n    public List<GainsightBiqQueryFieldDescription> getGainsightBigQueryFieldDescriptions() { return gainsightBiqQueryFieldDescriptions; }\n\n    public void setGainsightBiqQueryFieldDescriptions(List<GainsightBiqQueryFieldDescription> gainsightAhaFieldDescriptions) { this.gainsightBiqQueryFieldDescriptions = gainsightAhaFieldDescriptions; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4093c692-2559-4204-a641-ff92b6c4a551","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomFetchServiceImpl.java","startLine":31,"endLine":53,"content":"Secret, String refreshToken, String accessToken, String nextPageUrl, String api) throws Exception {\n        try {\n            GainsightZoomChannelService gainsightZoomChannelService =\n                    gainsightZoomChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightZoomChannelService.getPaginatedEntityData(entityName, projectionList, nextPageUrl, api);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw e;\n        }\n    }\n\n    @Override\n    public Map<String, Object> getZoomAccountDetails(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        try {\n            GainsightZoomChannelService gainsightZoomChannelService =\n                    gainsightZoomChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightZoomChannelService.getZoomAccountDetails();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"767d3877-11fc-450a-8c44-a3550da27a8f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/RecordResponseGenerator.java","startLine":37,"endLine":92,"content":"== OutputMode.FILE) {\n        headers = getRecordsRequest.getProjections().toArray(new String[0]);\n        csvFile = File.createTempFile(\"dynamics\", \".csv\");\n\n        FileOutputStream fos = new FileOutputStream(csvFile);\n        OutputStreamWriter bos = new OutputStreamWriter(fos, StandardCharsets.UTF_8);\n\n        CSVWriterBuilder writerBuilder = new CSVWriterBuilder(bos);\n        writerBuilder.withEscapeChar('\"').withQuoteChar('\"').withSeparator(',');\n        icsvWriter = writerBuilder.build();\n        prepareHeader(headers);\n        records = null;\n      } else {\n        records = Lists.newArrayList();\n      }\n    } catch (Exception exception) {\n      throw new SystemException(exception, CoreErrorCode.SYSTEM_ERROR);\n    }\n  }\n\n  public List<Map<String, Object>> getRecords() {\n    return records;\n  }\n\n  public void addRecords(Map<String, Object> record) {\n    if (outputMode == OutputMode.FILE) {\n      prepareRecord(record);\n    } else {\n      this.records.add(record);\n    }\n    recordsPulled++;\n  }\n\n  public void addRecordsForParquetFile(Map<String, Object> record) {\n    if (outputMode == OutputMode.FILE) {\n      prepareRecordForParquetFile(record);\n    } else {\n      this.records.add(record);\n    }\n    recordsPulled++;\n  }\n\n  public int getRecordsPulled() {\n    return this.recordsPulled;\n  }\n\n  public File getCsvFile() {\n    if (icsvWriter != null) {\n      IOUtils.closeQuietly(icsvWriter);\n    }\n\n    return csvFile;\n  }\n\n  public String getBatchQuery() {\n    return batchQue","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d928f64d-8aef-4fca-9948-de08188a6fab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":404,"endLine":423,"content":"tionOptional;\n                    if (modifiedExpandToOriginalFieldName.containsKey(projection)) {\n                        gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(\n                                fieldDefinition -> fieldDefinition.getFieldName().equals(modifiedExpandToOriginalFieldName.get(projection))\n                        ).findFirst();\n                    } else {\n                        gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(\n                                fieldDefinition -> fieldDefinition.getFieldName().equals(mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1])\n                        ).findFirst();\n                    }\n\n                    Optional<Relationship> relationshipOptional = Optional.empty();\n                    if (gsFieldDefinitionOptional.isPresent()) {\n                        String targetObjectOfLookupField = gsFieldDefinitionOptional.get().getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();\n                        String referencingAttribute = DynamicsGainsightUtils.getReferencingAttribute(sourceLookupField, targetObjectOfLookupField);\n                        relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n               ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"af92fffe-2c8f-4799-81e4-dbf9c6e26251","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":468,"endLine":485,"content":" {\n                Column lookupColumn = msDynamicsObject.getColumn(projection.split(\"\\\\.\")[0]);\n                if (!logicalNameToObject.containsKey(lookupColumn.getTargetObject())) {\n                    logicalNameToObject.put(lookupColumn.getTargetObject(), msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().logicalName(lookupColumn.getTargetObject()), true, false));\n                }\n                MSDynamicsObject targetObject = logicalNameToObject.get(lookupColumn.getTargetObject());\n                Column targetColumn = targetObject.getColumn(projection.split(\"\\\\.\")[1]);\n\n                if (targetColumn.getExternalType() == ExternalDataType.MULTISELECTPICKLIST) {\n                    multiPicklistColumns.add(projection);\n                }\n\n                if (Objects.nonNull(targetColumn) && (targetColumn.getExternalType() == ExternalDataType.LOOKUP ||\n                        targetColumn.getExternalType() == ExternalDataType.CUSTOMER ||\n                        targetColumn.getExternalType() == ExternalDataType.OWNER)) {\n                    expandGroup.add(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\").add(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99b4fd19-b6d5-4e3d-9bab-086cdf21c94f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SFDCExceptionUtility.java","startLine":1,"endLine":36,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils;\n\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SFDCExceptionUtility {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SFDCExceptionUtility.class);\n\n    public static String errorCodeExtraction(String errorMessage) {\n        JSONObject jsonObject = null;\n        try {\n            jsonObject = new JSONObject(errorMessage);\n            return jsonObject.get(\"error\").toString();\n        } catch (JSONException e) {\n            try {\n                LOGGER.error(\"Exception in errorCodeExtraction\", e);\n                return jsonObject.get(\"exceptionCode\").toString();\n            } catch (JSONException exception) {\n                LOGGER.error(\"Exception in errorCodeExtraction\", exception);\n            }\n        }\n        return null;\n    }\n\n    public static String errorMessageExtraction(HttpResponse response) {\n        return response.getErrMsg();\n    }\n\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b130b87-f1fd-41f2-844a-b1e58bbee15b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":109,"endLine":140,"content":"private HttpPost httpPost;\n    private HttpPatch httpPatch;\n    private String projectId;\n    private String datasetId;\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String serviceAccountJson;\n    private String authorizationType;\n    private String accessToken;\n\n    public GainsightBigQueryChannelServiceImpl(String serviceAccountJson, String projectId, String datasetId) {\n        LOGGER.info(\"started getting access  token for bq service Account\");\n        String accessToken = getAccessTokenForServiceAccount(serviceAccountJson);\n        this.projectId = projectId;\n        this.datasetId = datasetId;\n        this.authorizationType = SERVICE_ACCOUNT;\n        this.serviceAccountJson = serviceAccountJson;\n        this.httpclient = HttpClients.createDefault();\n        this.accessToken = accessToken;\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + accessToken);\n        httpPatch.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n    }\n\n    public GainsightBigQueryChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String projectId, String datasetId) {\n        LOGGER.info(\"Started getting ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5abb8e4f-8fff-4287-b032-d861bd0003d6","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/MetadataEnum.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum MetadataEnum {\n    DATA_API,\n    METADATA_API;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"526b4733-bc41-47c8-b5c9-ce1c389b524f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":317,"endLine":325,"content":"refreshToken);\n            return gainsightHubspotChannelService.uploadFile(file, options, folderId);\n        } catch (Exception ex) {\n            LOGGER.error(ex.getMessage(), ex);\n            return new HashMap<>();\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5bbcbe75-6231-4a07-8835-73a909077632","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":85,"endLine":123,"content":"\"Contacts\");\n\n    while (iterator.hasNext()) {\n      ClientEntity ce = iterator.next();\n      print(\"Entry:\\n\" + prettyPrint(ce.getProperties(), 0));\n    }\n\n\n\n    print(\"\\n----- Read Entry ------------------------------\");\n\n/*\n    ClientEntity entry = readEntityWithKey(edm, serviceUrl, \"Cases\", \"5000e00001E6qa3AAB\");\n    print(\"Single Entry:\\n\" + prettyPrint(entry.getProperties(), 0));\n*/\n\n    //\n/*\n    print(\"\\n----- Read Entity with $expand  ------------------------------\");\n    entry = readEntityWithKeyExpand(edm, serviceUrl, \"Cases\", 1, \"Cars\");\n    print(\"Single Entry with expanded Cars relation:\\n\" + prettyPrint(entry.getProperties(), 0));\n\n    //\n    print(\"\\n----- Read Entities with $filter  ------------------------------\");\n    iterator = readEntitiesWithFilter(edm, serviceUrl, \"Cases\", \"Name eq 'Horse Powered Racing'\");\n    while (iterator.hasNext()) {\n      ClientEntity ce = iterator.next();\n      print(\"Entry:\\n\" + prettyPrint(ce.getProperties(), 0));\n    }\n*/\n\n    // skip everything as odata4 sample/server only supporting retrieval\n    print(\"\\n----- Create Entry ------------------------------\");\n  /*  ClientEntity ce = loadEntity(\"/mymanufacturer.json\");\n    entry = createEntity(edm, serviceUrl, \"Manufacturers\", ce);\n*/\n    print(\"\\n----- Update Entry ------------------------------\");\n    ClientEntity ce = loadEntity(\"/Users/vipinsharma/Codebase/gainsight_content/POCs/sap_concur/gs-dynamics/src/main/resources/updates.json\");\n    int sc = updateEntity(edm, servic","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9dcea723-a08e-4f2f-ba9c-4cedda7a58ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":1,"endLine":36,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.productboard.service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.productboard.enums.ProductboardObjectsEnum;\nimport com.gainsight.integration.productboard.service.error.ProductBoardErrorCode;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport exception.SystemException;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.*;\n\npublic class ProductBoardChannelServiceImpl implements ProductBoardChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ProductBoardChannelServiceImpl.class);\n\n    private static final String PRODUCTBOARD_BASE_ENDPOINT_URI = DeploymentProperties.getDeploymentProperties().getValue(\"uc.gs.connect.productboard.url\", \"https://api.productboard.com/\");\n    private static final String X_VERSION = \"X-Version\";\n    private static final String LINKS = \"links\";\n    pri","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45254344-f201-4bf9-afcd-719773242004","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":302,"endLine":321,"content":"jections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projection);\n                } else {\n                    selectGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        //If expanded fields are of type lookup or customer then modify the projection name. This needs to done first before we modify source lookup field in next step.\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_EXPAND))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_EXPAND)) {\n                Column lookupColumn = msDynamicsObject.getColumn(projection.split(\"\\\\.\")[0]);\n                if (!logicalNameToObject.containsKey(lookupColumn.getTargetObject())) {\n                    logicalNameToObject.put(lookupColumn.getTargetObject(), msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().logicalName(lookupColumn.getTargetObject()), true, false));\n                }\n                MSDynamicsObject targetObject = logicalNameToObject.get(lookupColumn.getTargetObject());\n                Column targetColumn = targetObject.getColumn(projection.split(\"\\\\.\")[1]);\n\n                if (targetColumn.getExternalType() == ExternalDataTy","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ea3927f-5fc4-423a-84c0-8afc0542f18a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":219,"endLine":239,"content":"amicsGainsightUtils.valueOf(attributeTypeName.get(\"Value\")))) {\n                            Optional<DataTypeMappings> dataTypeMappingsForFieldOptional = dataTypeMappings.stream()\n                                    .filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(\"MultiSelectDropDownList\")).findFirst();\n                            if (dataTypeMappingsForFieldOptional.isPresent()) {\n                                dataTypeMappingsForField = dataTypeMappingsForFieldOptional.get();\n                                meta.put(ORIGINAL_DATA_TYPE, dataTypeMappingsForField.getExternalDatatype());\n                            } else {\n                                continue;\n                            }\n                        } else {\n                            continue;\n                        }\n                    }\n                    fieldDefinition.put(DATA_TYPE, dataTypeMappingsForField.getGainsightDatatype().name());\n\n                    //For Dynamics connector all Filters are being applied on external system, hence we need to check for allowedExternalFilterOperators\n                    meta.put(FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n                    meta.put(EXTERNALLY_FILTERABLE, !dataTypeMappingsForField.getAllowedExternalFilterOperators().isEmpty());\n                } else {\n                    // no mapping found in caas_connector_config for this field's AttributeType\n                    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf11e1f1-fb3c-4ee8-8908-30d8bb0d194d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":158,"endLine":207,"content":"t is returned.\n     * This implementation always returns true.\n     *\n     * @param line the line that is to be validated\n     * @return true if valid, false to remove from the iterator\n     */\n    protected boolean isValidLine(final String line) {\n        return true;\n    }\n\n    /**\n     * Returns the next line in the wrapped <code>Reader</code>.\n     *\n     * @return the next line from the input\n     * @throws NoSuchElementException if there is no line to return\n     */\n    @Override\n    public String next() {\n        return nextLine();\n    }\n\n    /**\n     * Returns the next line in the wrapped <code>Reader</code>.\n     *\n     * @return the next line from the input\n     * @throws NoSuchElementException if there is no line to return\n     */\n    private String nextLine() {\n        if (!hasNext()) {\n            throw new NoSuchElementException(\"No more lines\");\n        }\n        final String currentLine = cachedLine;\n        cachedLine = null;\n        return currentLine;\n    }\n\n    /**\n     * Closes the underlying {@code Reader}.\n     * This method is useful if you only want to process the first few\n     * lines of a larger file. If you do not close the iterator\n     * then the {@code Reader} remains open.\n     * This method can safely be called multiple times.\n     *\n     * @throws IOException if closing the underlying {@code Reader} fails.\n     */\n    @Override\n    public void close() throws IOException {\n        finished = true;\n        cachedLine = null;\n        this.buffe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ba5b81c-7ff7-42d9-88dd-3980e29379d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":382,"endLine":405,"content":"stringEntity);\n        HttpResponse response = null;\n        JsonArray arr = new JsonArray();\n        int retryCount = ALLOWED_RETRIES;\n        Map<String, Object> responseMap = new HashMap<>();\n        while (retryCount-- > -1) {\n            response = this.httpclient.execute(httpPost);\n            if (response.getStatusLine().getStatusCode() == 200) {\n                String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n                break;\n            } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n                LOGGER.error(\"BigQuery Bad Request\");\n                throw new Exception(\"Invalid Request\");\n            } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                LOGGER.error(\"BigQuery access token expired\");\n                throw new Exception(\"BigQuery access token expired\");\n            } else if (retryCount <= -1) {\n                LOGGER.error(\"The api call to BigQuery failed for retry count : {} due to status: {} , code :{}\", retryCount,\n                        response.getStatusLine(), response.getStatusLine().getStatusCode());\n                throw new Exception(\"BigQuery api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"Api call to BigQuery failed for retry count : {} due to : {}, code :{}\",\n              ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6230bebe-8226-4539-8583-2a55632199da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":863,"endLine":895,"content":"lumnValue);\n                }\n                if (!rowMap.isEmpty()) {\n                    result.add(rowMap);\n                }\n            }\n            return result;\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"exception while executing JDBC statement: {}\", sqlException.getMessage(), sqlException);\n            throw new SystemException(\"Failed to connect to Databricks due to {}\", sqlException);\n        } finally {\n            if (null != resultSet) {\n                resultSet.close();\n            }\n        }\n    }\n\n    private void writeToFile(List<File> fileList, AtomicInteger filePosition, List<Map<String, Object>> recordValues,\n                             String fileDir, String jobId, double maxFileSizeInMB) throws IOException {\n        File latestFile = fileList.get(filePosition.get());\n        if ((latestFile.length() == 0) || (fileSizeInMBs(latestFile) < maxFileSizeInMB)) {\n            appendToJsonFileToSendToConsumers(recordValues, latestFile);\n        } else {\n            filePosition.incrementAndGet();\n            LOGGER.info(\"Creating new file at position: {}\", filePosition.get());\n            File nextFile = new File(fileDir + jobId + UUID.randomUUID() + JSON_EXTENSION);\n            appendToJsonFileToSendToConsumers(recordValues, nextFile);\n            fileList.add(filePosition.get(), nextFile);\n        }\n    }\n\n    private static void appendToJsonFileToSendToConsumers(List<Map<String, Object>> destPayload,\n                          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3499f78-eb6f-4319-bf1c-9f89bef286bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/RealTimeConfig.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class RealTimeConfig implements Serializable {\n    private String syncDirection;\n    private String payloadDataKey;\n    private String payloadIdKey;\n    private EventPayloadKeyRegex payloadObjectKey;\n    private EventPayloadKeyRegex payloadOperationKey;\n    private String payloadType;\n    private List<String> supportedObjects;\n    private Map<String, Object> properties;\n\n    @Getter\n    @Setter\n    public class EventPayloadKeyRegex implements Serializable {\n        private String keyPath;\n        private String extractionPattern;\n        private List<String> supportedValues;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"092ddf70-6e71-4f58-b099-af456efcc933","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":517,"endLine":541,"content":"anceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        LocalDateTime localDateTime = LocalDateTime.parse(object.toString(), defaultSrcFormatter);\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\")).format(dtf));\n                    } else if (object instanceof Date && Objects.nonNull(field.getDateTimeProperties())) {\n                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        LocalDate localDate = LocalDate.parse(object.toString());\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(dtf));\n                    } else {\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), object);\n                    }\n                }\n                recordValues.add(map);\n            }\n            return recordValues;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while fetching data: {}\", ex.getMessage(), ex);\n            throw new SQLException(\"Error occurred while trying to write data\", ex);\n        } finally {\n            closeQuietly(this.connection, resultSet, stat);\n        }\n    }\n\n    @Override\n    public List<File> fetchData(String fileDir, String jobId, String selectQuery, Li","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bd9731e-533e-4650-8fb0-eac06d65bfea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":401,"endLine":425,"content":" new StringEntity(new ObjectMapper().writeValueAsString(requestMap), ContentType.APPLICATION_JSON);\n            this.httpPost.setEntity(stringEntity);\n            InputStream inputStream = null;\n            try {\n                response = this.httpclient.execute(httpPost);\n                inputStream = response.getEntity().getContent();\n                String jsonDataResponse = IOUtils.toString(inputStream, \"UTF-8\");\n                Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n                });\n                if (MapUtils.isNotEmpty(responseMap)) {\n                    List<Map<String, Object>> currentAssociations = (List<Map<String, Object>>) responseMap.get(\"results\");\n                    List<Map<String, String>> targetAsscoations = (List<Map<String, String>>) currentAssociations.get(0).get(\"to\");\n                    associationsResult.addAll(targetAsscoations.stream().map(val -> val.get(\"id\")).collect(Collectors.toList()));\n                }\n            } catch (Exception exception) {\n                LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for objectId %s for assocaitionType %s\", objectId, gsHubspotAssociationEnum), exception);\n                return associationsResult;\n            } finally {\n                HttpClientUtils.closeQuietly(response);\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            }\n\n        } catch ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"166cb0ee-c008-4b94-ad6e-95197cf1f12b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":1087,"endLine":1106,"content":"}\n        return null;\n    }\n\n    private Object extractDateTime(ClientProperty clientProperty, EdmPrimitiveTypeKind valueTypeKind, boolean isPrimitiveDateTimeConversionRequired) {\n        Object value = null;\n        if (valueTypeKind == EdmPrimitiveTypeKind.Date) { //When date getValue and toString\n            value = clientProperty.getValue().toString();\n        }else { //DateTimeOffset\n            if (!isPrimitiveDateTimeConversionRequired || clientProperty.getValue().asPrimitive().toValue() instanceof Calendar) { //Even in datetimeoffset see if actual object is calendar type then use same logic\n                LOGGER.debug(\"Got calendar type from DateTimeOffset\");\n                value = clientProperty.getValue().toString();\n            } else { //Else usual\n                value = clientProperty.getValue().asPrimitive().toValue();\n            }\n        }\n        return value;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6a5d7759-2ec1-4cb5-848a-1fe67887e90f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":565,"endLine":585,"content":" String IS_IPAAS_CONNECTION = \"IS_IPAAS_CONNECTION\";\n        public static final String DEPENDENT_DATA_FETCH_DATES = \"DEPENDENT_DATA_FETCH_DATES\";\n        public static final String POST_CONNECTION_CREATION = \"POST_CONNECTION_CREATION\";\n        public static final String ACCESS_SECRET = \"accessSecret\";\n        public static final String DATALOAD_ACCESSKEY = \"dataloadAccessKey\";\n        public static final String BUCKETNAME = \"bucketName\";\n        public static final String BASE_FOLDER = \"baseFolder\";\n        public static final String ACCESS_KEY_ID = \"accessKey\";\n\n\n        public static final String REFRESH_TOKEN = \"refreshToken\";\n        public static final String HTTPS = \"https://\";\n        public static final String HTTP = \"http://\";\n        public static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n        public static final String FEATURE_CONFIG_CONTEXT = \"/v1/features\";\n        public static final String FEATURE_CONFIG_EVALUATION_CONTEXT = FEATURE_CONFIG_CONTEXT + \"/evaluation\";\n        public static final String SECRET_VAL = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n        public static final String GS_DOMAINS_ENV_VAL = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n        public static final String DYNAMICS_FEATURE_NAME = \"DYNAMICS_CONNECTOR\";\n        public static final String EXTERNAL_ACTIONS = \"EXTERNAL_ACTIONS\";\n        public st","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3941ac54-6135-48f6-a4b9-30bdb9c8eb5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/error/DynamicsErrorCode.java","startLine":38,"endLine":57,"content":"getGsEventCode() {\n    return \"GS_DYNAMICS_\"+code;\n  }\n\n  @Override\n  public String getUserText() {\n    ConnectorI18nService.getTranslation(this.name(),text, RequestContextProvider.getTenantLanguage());\n    return text;\n  }\n\n  @Override\n  public ExceptionType getExceptionType() {\n    return null;\n  }\n\n  @Override\n  public boolean isCodeConstant() {\n    return false;\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"185da0ec-f3c4-4e6f-9e69-c3450ac3d8e4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":367,"endLine":393,"content":"bles.stream().forEach(\n                    table -> {\n                        Optional<Map<String, Object>> optionalView = views.stream().filter(view -> view.get(\"viewName\").equals(table.get(\"tableName\"))).findFirst();\n                        if (optionalView.isPresent()) {\n                            objects.add(optionalView.get());\n                        } else {\n                            objects.add(table);\n                        }\n                    }\n            );\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Failed to fetch objects from Databricks: {}\", sqlException.getMessage(), sqlException);\n            throw new SystemException(String.format(\"Failed to connect to Databricks due to %s\", sqlException.getMessage()));\n        } finally {\n            closeQuietly(null, null, statementCatalog);\n            closeQuietly(null, null, preparedStatementTables);\n            closeQuietly(null, null, preparedStatementViews);\n            closeQuietly(this.connection, null, null);\n        }\n        return objects;\n    }\n\n    @Override\n    public Set<Map<String, Object>> listAllFields(String objectName, List<String> ignorableSystemFields) {\n        String tableAbsolutePath = BACKTICK + this.schema + BACKTICK + DOT + BACKTICK + this.db + BACKTICK + DOT + BACKTICK + objectName + BACKTICK;\n        Set<Map<String, Object>> result;\n        try (PreparedStatement preparedStatement = connection.prepareStatement(String.format(\"DESCRIBE TABLE %s\", tableAbsolut","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"940b7086-ee71-4a11-8fda-bf7ea8936168","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":467,"endLine":496,"content":"sonArray row = rowObject.getAsJsonArray(\"f\");\n                    JsonObject newRow = new JsonObject();\n                    for (int col = 0; col < row.size(); col++) {\n                        if (row.get(col).getAsJsonObject().has(\"v\")) {\n                            String value = row.get(col).getAsJsonObject().get(\"v\").getAsString();\n                            if(!ObjectUtils.isEmpty(fieldToDataTypeMap.get(headers.get(col))) &&\n                                    fieldToDataTypeMap.get(headers.get(col)).toUpperCase().equals(\"TIMESTAMP\")) {\n                                if (value.matches(\"-?\\\\d+(\\\\.\\\\d+)?[eE][-+]?\\\\d+\")) {\n                                    Long millis = (long) Double.parseDouble(value) * 1000;\n                                    value = String.valueOf(millis);\n                                }\n                            }\n                            newRow.addProperty(headers.get(col), value);\n                        }\n                    }\n                    sanitizedArray.add(newRow);\n                }\n            }\n            LOGGER.info(\"sanatized bq data\");\n            return sanitizedArray;\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to sanitize BQ data\", e);\n            throw new Exception(\"Error occurred while trying to sanitize BQ data\", e);\n        }\n    }\n\n\n    private Map<String, Object> getBQQueryResultJobId(String query) throws Exception {\n        try {\n            boolean shouldContinue = true;","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d940ede-9207-4659-83ee-31d70cdb617e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":309,"endLine":326,"content":"g> modifiedExpandToOriginalFieldName = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_SELECT))) {\n            for (String projections : selectAndExpandGroup.get(PROJECTION_SELECT)) {\n                String projection = projections.split(\"\\\\.\")[0];\n                String propertyValue = masterLookUpConfiguration.get(objectDefinition.getLabelPlural() + \"@@\" + projection);\n                if (Objects.nonNull(propertyValue)) {\n                    String newSelectProjection = propertyValue + \".\" + projection;\n                    expandGroup.add(newSelectProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newSelectProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projections);\n                } else if (logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.LOOKUP.getValue())\n                        || logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.CUSTOMER.getValue())\n                        || logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.OWNER.getValue())) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOri","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80424cc0-e487-489a-970d-22c8daa32f71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/AuthenticationType.java","startLine":1,"endLine":10,"content":"package com.gainsight.integration.bean.enums;\n\n/**\n * @author puneetsaluja\n * @created 31/03/23\n */\npublic enum AuthenticationType {\n    API_KEY,\n    OAUTH2\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"421370d7-d69b-4946-af2c-c05d30f78fdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":110,"endLine":136,"content":"tType, String filterQuery) {\n        HttpResponse response = null;\n        List<JsonNode> data = null;\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        try (CloseableHttpClient httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();) {\n            HttpGet httpGet;\n            String uri = PRODUCTBOARD_BASE_ENDPOINT_URI + ProductboardObjectsEnum.getObjectName(objectType);\n            if (filterQuery != null)\n                uri = uri + filterQuery;\n            String nexturi;\n            data = new ArrayList<>();\n            boolean shouldContinue = true;\n            do {\n                int retryCount = 0;\n                httpGet = new HttpGet(uri);\n                httpGet.setHeader(AUTH_HEADER, BEARER + this.accessToken);\n                httpGet.setHeader(X_VERSION, \"1\");\n                while (retryCount < 3) {\n                    LOGGER.info(\"Retrieving data for {} from Productboard. Hitting : {}, Retry Count: {}\",\n                            ProductboardObjectsEnum.getObjectName(objectType), uri, retryCount);\n                    response = httpclient.execute(httpGet);\n                    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        nexturi = getUriAndPopulateData(data, response);\n                        if (nexturi == nu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4807e07f-3eec-4215-9c12-6d779e4c0ec8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":1065,"endLine":1092,"content":"                     semicolonSeparatedValues.append(optionSetMap.get(name).get(Integer.parseInt(itemValue)));\n                        semicolonSeparatedValues.append(\";\");\n                    }\n                    if (multiSelectPicklistItems.length > 0) {\n                        semicolonSeparatedValues.deleteCharAt(semicolonSeparatedValues.length() - 1);\n                    }\n                    return semicolonSeparatedValues.toString();\n                }\n                //Picklist, State or Status\n                return optionSetMap.get(name).get(value);\n            }else {\n                EdmPrimitiveTypeKind valueTypeKind = clientProperty.getValue().asPrimitive().getTypeKind();\n                if (valueTypeKind == EdmPrimitiveTypeKind.DateTimeOffset || valueTypeKind == EdmPrimitiveTypeKind.Date) {\n                    return extractDateTime(clientProperty, valueTypeKind, isPrimitiveDateTimeConversionRequired);\n                } else {\n                    return clientProperty.getValue().asPrimitive().toValue();\n                }\n            }\n        }\n        if (clientProperty.getValue().isCollection()) {\n            ClientCollectionValue clientCollectionValue = clientProperty.getValue().asCollection();\n            return clientCollectionValue.asJavaCollection();\n        }\n        return null;\n    }\n\n    private Object extractDateTime(ClientProperty clientProperty, EdmPrimitiveTypeKind valueTypeKind, boolean isPrimitiveDateTimeConversionRequired) {\n        Object valu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b24b51c-eaf6-45de-aec5-39af3965dd1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotEntityDescription.java","startLine":48,"endLine":69,"content":"n(String entityName, List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightHubspotFieldDescriptions = gainsightHubspotFieldDescriptions;\n    }\n\n    public void addField(GainsightHubspotFieldDescription gainsightHubspotFieldDescription){\n        if(this.gainsightHubspotFieldDescriptions != null){\n            this.gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription);\n        }else{\n            this.gainsightHubspotFieldDescriptions = new ArrayList();\n            this.gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription);\n        }\n    }\n    @Override\n    public String toString() {\n        return \"GainsightHubspotEntityDescription{\" +\n                \"entityName='\" + entityName + '\\'' +\n                \", entityId='\" + entityId + '\\'' +\n                \", gainsightHubspotFieldDescriptions=\" + gainsightHubspotFieldDescriptions +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f288bc6-1544-48de-a344-bdaeb810a52c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":782,"endLine":800,"content":"turn null;\n    }\n\n    private Object extractDateTime(ClientProperty clientProperty, EdmPrimitiveTypeKind valueTypeKind, boolean isPrimitiveDateTimeConversionRequired) {\n        Object value = null;\n        if (valueTypeKind == EdmPrimitiveTypeKind.Date) { //When date getValue and toString\n            value = clientProperty.getValue().toString();\n        } else { //DateTimeOffset\n            if (!isPrimitiveDateTimeConversionRequired || clientProperty.getValue().asPrimitive().toValue() instanceof Calendar) { //Even in datetimeoffset see if actual object is calendar type then use same logic\n                LOGGER.debug(\"Got calendar type from DateTimeOffset\");\n                value = clientProperty.getValue().toString();\n            } else { //Else usual\n                value = clientProperty.getValue().asPrimitive().toValue();\n            }\n        }\n        return value;\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f922eab5-8207-428d-a5cb-116794632fe3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPIntegrationChannel.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.sap;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;\nimport org.apache.olingo.commons.api.edm.FullQualifiedName;\nimport org.apache.olingo.commons.api.edm.provider.CsdlAbstractEdmProvider;\nimport org.apache.olingo.commons.api.edm.provider.CsdlEntityContainer;\nimport org.apache.olingo.commons.api.edm.provider.CsdlEntityContainerInfo;\nimport org.apache.olingo.commons.api.edm.provider.CsdlEntitySet;\nimport org.apache.olingo.commons.api.edm.provider.CsdlEntityType;\nimport org.apache.olingo.commons.api.edm.provider.CsdlProperty;\nimport org.apache.olingo.commons.api.edm.provider.CsdlPropertyRef;\nimport org.apache.olingo.commons.api.edm.provider.CsdlSchema;\n\n@Deprecated\npublic class GainsightSAPIntegrationChannel extends CsdlAbstractEdmProvider {\n  // Service Namespace\n  public static final String NAMESPACE = \"com.concur\";\n\n  // EDM Container\n  public static final String CONTAINER_NAME = \"Container\";\n  public static final FullQualifiedName CONTAINER = new FullQualifiedName(NAMESPACE, CONTAINER_NAME);\n\n  // Entity Types Names\n  public static final String ET_PRODUCT_NAME = \"Account\";\n  public static final FullQualifiedName ET_PRODUCT_FQN = new FullQualifiedName(NAMESPACE, ET_PRODUCT_NAME);\n\n  // Entity Set Names\n  public static final String ES_PRODUCTS_NAME = \"Accounts\";\n\n  @Override\n  public List<CsdlSchema> getSchemas()","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad313a04-7d68-405f-a182-03c3b8fb3651","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":242,"endLine":265,"content":"Statement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_tz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            tempStageName = \"tmp_stage_\" + objectName.toLowerCase() + \"_\" + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\");\n            //create temporary stage\n            String createTempStageQuery = String.format(\"create TEMPORARY stage %s FILE_FORMAT = (TYPE = JSON)\", tempStageName);\n            LOGGER.info(\"Executing query : {}\", createTempStageQuery);\n            preparedStatement = this.connection.prepareStatement(createTempStageQuery);\n            preparedStatement.executeQuery();\n\n            String stageFileName = objectName.toLowerCase() + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\");\n            //copy table data into staging table file\n            String copyManagerQuery = \"copy into @\" + tempStageName + \"/\" + stageFileName +\n                    \" fr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e22871ca-7e83-4c97-9a74-cd9717441bb6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":394,"endLine":419,"content":"Name).executeQuery();\n                } catch (SQLException se) {\n                    LOGGER.error(\"Sql Exception while dropping temp stage. Ignoring..\", se);\n                }\n            }\n            closeQuietly(this.connection, resultSet, preparedStatement);\n        }\n        return dataFiles;\n    }\n\n\n    private List<File> fallBackResult(String selectQuery,List<FieldInfo> fieldInfoList,String objectName,String filter,  Set<String> ntz_fields, Map<String, String> ntz_map,int limit,int fetchSize) throws SQLException {\n        LOGGER.info(\"Copy manager failed, falling back to pagination\");\n        ResultSet resultSet = null;\n        Statement stat = null;\n        PreparedStatement preparedStatement = null;\n        DateTimeFormatter defaultSrcFormatter = new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\") // .parseLenient()\n                .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).toFormatter();\n        File extractFile = new File(System.getProperty(\"user.dir\") + \"/\" + ConnectorType.SNOWFLAKE.getValue() + \"_\" + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\") + JSON);\n        try  {\n            stat = this.connection.createStatement();\n\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStateme","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b5f8c676-b761-4bae-b42d-a6292173d465","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":721,"endLine":750,"content":"bsolutePathToTable) throws SQLException {\n        long rowCount = 0l;\n        ResultSet resultSet = null;\n        try (Statement statement = this.connection.createStatement()) {\n            String query = String.format(TOTAL_RECORDS_QUERY, absolutePathToTable);\n            LOGGER.info(\"Executing query to get total records count: {}\", query);\n            resultSet = statement.executeQuery(query);\n            if (resultSet.next()) {\n                rowCount = resultSet.getLong(\"row_count\");\n            }\n            LOGGER.info(\"Total records count: {}\", rowCount);\n        } catch (SQLException e) {\n            LOGGER.error(\"Error occurred while getting total records: {}\", e.getMessage(), e);\n        } finally {\n            if (null != resultSet) {\n                resultSet.close();\n            }\n        }\n        return rowCount;\n    }\n\n    private void dropTable(String tempStageTable) {\n        int retryCount = 0;\n        while (retryCount < GainsightDatabricksHelper.DBFS_OPERATIONS_MAX_RETRY_COUNT) {\n            LOGGER.info(\"Deleting temp stage table: {} retryCount: {}\", tempStageTable, retryCount);\n            try (Statement statement = this.connection.createStatement()) {\n                String deleteTableQuery = String.format(DROP_TEMP_STAGE_TABLE, tempStageTable);\n                LOGGER.info(\"Executing query: {}\", deleteTableQuery);\n                statement.execute(deleteTableQuery);\n                LOGGER.info(\"Deleted temp stage table: {} successfully\", tempStageTable","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b21caac2-065b-4bc8-8bb4-25e39f09a411","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/SfdcChangeEventDto.java","startLine":61,"endLine":102,"content":"ectors.joining(\" \")));\n                    }\n                } else {\n                    payloadMap.put(key, entry.getValue());\n                }\n            }\n        }\n        return payloadMap;\n    }\n\n    @Override\n    public String fetchChangeType() {\n        return changeEventHeader().getChangeType();\n    }\n\n    @Override\n    public Map<String, Object> fetchChangeFieldsMap() {\n        Map<String, Object> map = Maps.newHashMap();\n        changeEventHeader().getChangedFields().stream().forEach(field -> {\n            if (!field.contains(\".\")) {\n                map.put(field, getPayload().get(field));\n            } else {\n                String[] split = field.split(\"\\\\.\");\n                Map childMap = (Map) getPayload().get(split[0]);\n                map.put(split[1], childMap.get(split[1]));\n            }\n        });\n        map.put(\"Id\", changeEventHeader.getRecordIds());\n        return map;\n    }\n\n    @Override\n    public boolean batchableWith(ChangeEventDto changeEventDto) {\n        if(!(changeEventDto instanceof SfdcChangeEventDto)) {\n            // other source.\n            return false;\n        }\n        // if from salesforce enityname and changetype is same its batchable.\n        return StringUtils.equals(changeEventHeader().getEntityName(),\n                ((SfdcChangeEventDto) changeEventDto).changeEventHeader().getEntityName())\n                && StringUtils.equals(changeEventHeader().getChangeType(),\n                ((SfdcChangeEventDto) changeEventDto).chang","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e43cfff-9b2e-4f6e-9cd3-73fe3495b3ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":174,"endLine":207,"content":"           resp.setResponseIs(is, false);\n            resp.setResponseCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (IOException e) {\n            LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n            InputStream es = null;\n            if (null != httpConn.getErrorStream()) {\n                es = ((HttpURLConnection) httpConn).getErrorStream();\n                resp.setErrIs(es);\n            } else {\n                LOGGER.error(\"Recieved empty error response\");\n            }\n            resp.setErrorCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occured while handling error data {}\", ex.getMessage(), ex);\n            throw ex;\n        }\n        return resp;\n    }\n\n    public HttpResponse post(String requestURL, Map<String, Object> headers, String body) throws IOException {\n        return post(requestURL, headers, body, 15000);\n    }\n\n    public void addHeaders(HttpURLConnection httpConn, Map<String, Object> headers) {\n        headers.entrySet().forEach(header -> {\n            httpConn.setRequestProperty(header.getKey(), header.getValue().toString());\n        });\n    }\n\n    public HttpResponse delete(String requestURL, Map<String, Object> headers, Map<String, Object> queryParams) throws Exception {\n        HttpResponse resp = new HttpResponse();\n        H","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbcbc528-354b-4f3b-a4c6-7015a988bc60","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/ColumnMapping.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.bean;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class ColumnMapping {\n    private String objectName;\n    private String headerName;\n    private String fieldName;\n    private String jsonPath;\n    private String externalFieldDataType;\n    private Boolean isKeyField;\n    private Map<String, Object> properties;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7a8dbdb-db8c-4c22-bbac-96cd90047c0d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightModelChangeEventDTO.java","startLine":80,"endLine":104,"content":"ieldTrackingHistoryDetails> fieldTrackingHistoryDetailsEntry: this.fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().entrySet()) {\n            String objectName = fieldTrackingHistoryDetailsEntry.getKey();\n            FieldTrackingHistoryDetails fieldTrackingHistoryDetails = fieldTrackingHistoryDetailsEntry.getValue();\n            for(FieldChangeDetail fieldChangeDetails : fieldTrackingHistoryDetails.getChangeDetails()) {\n                map.put(objectName.concat(\"::\").concat(fieldChangeDetails.getFieldName()), fieldChangeDetails.getValue());\n            }\n        }\n        return map;\n    }\n\n    @Override\n    public boolean batchableWith(ChangeEventDto changeEventDto) {\n        if(changeEventDto instanceof GainsightModelChangeEventDTO) {\n            // same source\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public List<String> recordIds() {\n        return Collections.EMPTY_LIST;\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5b7fbb7e-cfe7-48ef-b7ba-fdeb9ca49a99","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":76,"endLine":88,"content":"ciations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.meetings.results[*].id\", \"Associated Meeting Ids\", \"associations.meetings.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.MEETING.name()));\n                }\n                break;\n            case TASK:\n            case NOTES:\n            case EMAIL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb6b7540-7d3f-4df1-8c6f-869219be6c62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightChangeEventDTO.java","startLine":59,"endLine":95,"content":">> compoundFieldTypeFieldsMap) {\n        return new ObjectMapper().convertValue(this, Map.class);\n    }\n\n    @Override\n    public Map<String, Object> fetchChangeFieldsMap() {\n        Map<String, Object> map = new HashMap<>();\n        for(FieldChangeDetail changeDetail: this.fieldTrackingHistoryDetails.getChangeDetails()) {\n            map.put(changeDetail.getFieldName(), changeDetail.getValue());\n        }\n        return map;\n    }\n\n    @Override\n    public boolean batchableWith(ChangeEventDto changeEventDto) {\n        if(!(changeEventDto instanceof GainsightChangeEventDTO)) {\n            // other source.\n            return false;\n        }\n        // if from GS  object name and event type is same its batchable.\n        return StringUtils.equals(getObjectName(),\n                ((GainsightChangeEventDTO) changeEventDto).getObjectName())\n                && StringUtils.equals(this.fieldTrackingHistoryDetails.getOperationType(),\n                ((GainsightChangeEventDTO) changeEventDto).getFieldTrackingHistoryDetails().getOperationType());\n    }\n\n    @Override\n    public List<String> recordIds() {\n        return Collections.singletonList(this.fieldTrackingHistoryDetails.getRecordGsid());\n    }\n\n    public String getNewValue(String fieldName) {\n        return this.fieldTrackingHistoryDetails.getChangeDetails().stream()\n                .filter(fieldInfo->fieldInfo.getFieldName().equals(fieldName))\n                .findFirst()\n                .map(FieldChangeDetail::getFieldName)\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b46d4cdd-fa91-491c-ac7d-791a2bfb90e3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ResourceConfig.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class ResourceConfig implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String resourceName;\n    private Map<DataEnum, ApiConfigAttributes> dataConfig;\n    private MetadataConfigDetails metadataConfig;\n    private Map<String,Object> metadataTransformationConfig;\n    private boolean defaultResource = false;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"88805d40-2447-4ed1-adf6-8ff7c3d93fe3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":656,"endLine":688,"content":" throws Exception {\n        HttpResponse response = null;\n        List<Object> pipelineMappings = new ArrayList<>();\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + PIPLEINE_END_POINT + object;\n\n            URIBuilder uriBuilder = new URIBuilder(url);\n\n            this.httpGet.setURI(uriBuilder.build());\n            InputStream inputStream = null;\n            try {\n                response = this.httpclient.execute(httpGet);\n                inputStream = response.getEntity().getContent();\n                String jsonDataResponse = IOUtils.toString(inputStream, \"UTF-8\");\n                Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n                });\n                pipelineMappings = (List<Object>) responseMap.get(\"results\");\n            } catch (Exception exception) {\n                LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for object: %s\", object), exception);\n                return pipelineMappings;\n            } finally {\n                HttpClientUtils.closeQuietly(response);\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for object: %s \", object), exception);\n        } finally {\n            MAPPER.configure(Deserializati","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"347bb0b8-a0a8-4c0e-aae7-29a31a708e16","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":127,"endLine":146,"content":"\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BEARER + ACCESS_TOKEN_CACHE.getIfPresent(constructAccessTokenKey(pnpConnectionsInfo)).toString());\n        }else if(AuthorizationType.ACCESS_KEY.equals(pnpConnectionsInfo.getAuthorizationType())){\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BEARER + CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ACCESS_TOKEN)));\n        } else {\n            String userName = (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.USERNAME);\n            String password = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.PASSWORD));\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BASIC + Base64.getEncoder().encodeToString((userName + UCConstants.COLON + password).getBytes()));\n        }\n\n        while (retryCount < DBFS_OPERATIONS_MAX_RETRY_COUNT) {\n            LOGGER.info(\"Deleting file from DBFS path: {} retryCount: {}\", path, retryCount);\n            try {\n                CloseableHttpClient httpClient = HttpClients.createDefault();\n                HttpPost deleteFile = new HttpPost(url);\n\n                Map<String, String> payload = new HashMap<>();\n                payload.put(IPaasConstants.PATH, path);\n                deleteFile.setEntity(new StringEntity(JsonUtil.toJsonString(payload), ContentType.APPLICATION_JSON));\n                headers.forEach(delet","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd55c687-3663-48d0-8f4d-84a1d65b3c6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":59,"endLine":75,"content":"\n  private static final String SHOW_TABLES_QUERY = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = ?\";\n  private static final String SHOW_VIEWS_QUERY = \"SELECT * FROM \\\"SYS\\\".\\\"VIEWS\\\" WHERE \\\"SCHEMA_NAME\\\" = ?\";\n  private static final String TABLE_EXISTS_QUERY = \"SELECT COUNT(SCHEMA_NAME) AS count FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = ? AND \\\"TABLE_NAME\\\" = ?\";\n  private static final String VIEW_EXISTS_QUERY = \"SELECT COUNT(VIEW_NAME) AS count FROM \\\"SYS\\\".\\\"VIEWS\\\" WHERE \\\"SCHEMA_NAME\\\" = ? AND \\\"VIEW_NAME\\\" = ?\";\n  private static final String TABLE_DESCRIBE_QUERY = \"SELECT * FROM \\\"PUBLIC\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = ? AND \\\"TABLE_NAME\\\" = ?\";\n  private static final String VIEW_DESCRIBE_QUERY = \"SELECT * FROM \\\"PUBLIC\\\".\\\"VIEW_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = ? AND \\\"VIEW_NAME\\\" = ?\";\n  private static final String CREATE_TEMP_STAGE_TABLE_QUERY = \"CREATE COLUMN TABLE %1$s (%2$s)\";\n  private static final String TEMP_STAGE_TABLE_NAME = \"\\\"%1$s\\\".\\\"%2$s_%3$s_temp\\\"\";\n  private static final String COLUMN_NAME_DELIMITER = \"\\\",\\\"\";\n  private static final String INSERT_INTO_TEMP_STAGE_TABLE_QUERY = \"INSERT INTO %1$s (%2$s) VALUES (%3$s)\";\n  private static final String TARGET_TABLE_ALIAS = \"main\";\n  private static final String STAGE_TABLE_ALIAS = \"stage\";\n  private static final String SELECT_FROM_TARGET_TABLE_QUERY = \"SELECT * FROM %1$s\";\n\n  private static final String INSERT_INTO_TARGET_TABLE_QUERY = \"MERGE INTO %1$s \" + TARGET_TABLE_ALIAS +\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"526abd02-a784-4396-ae0f-ca2d38547142","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescriptionV3.java","startLine":231,"endLine":256,"content":"lic GainsightHubspotFieldDescriptionV3(String name, String label, String canonicalName, String type, String fieldType) {\n        this.name = name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n    }\n\n    public GainsightHubspotFieldDescriptionV3(String name, String label, String canonicalName, String type, String fieldType, ModificationMetadata modificationMetadata) {\n        this.name = name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n        this.modificationMetadata = modificationMetadata;\n    }\n\n    public GainsightHubspotFieldDescriptionV3(String name, String label, String canonicalName, String type, String fieldType, String referencedObjectType) {\n        this.name = name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n        this.referencedObjectType = referencedObjectType;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d50c9c19-8c11-4bca-9ff4-20329f1f8868","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":693,"endLine":717,"content":";\n        public static final String EXTERNALLY_FILTERABLE = \"externallyFilterable\";\n        public static final String OPTION_SET = \"OptionSet\";\n        public static final String VALUE = \"value\";\n        public static final String ACTIVE = \"active\";\n        public static final String OPTIONS = \"options\";\n        public static final String ACCESSIBLE = \"accessible\";\n        public static final String SORTABLE = \"sortable\";\n        public static final String CREATEABLE = \"createable\";\n        public static final String UPDATEABLE = \"updateable\";\n        public static final String DECIMAL_PLACES = \"decimalPlaces\";\n        public static final String PRECISION = \"precision\";\n        public static final String DATA_PREVIEW_AVAILABLE = \"dataPreviewAvailable\";\n        public static final String LOOKUP_KEYWORD = \"LOOKUP\";\n        public static final String DATA_PREVIEW_AVAILABLE_FOR_LOOKUP_FIELDS = \"dataPreviewAvailableForLookUpFields\";\n        public static final String LOOKUP_DETAIL = \"lookupDetail\";\n        public static final String HAS_LOOKUP = \"hasLookup\";\n        public static final String PROPERTIES = \"properties\";\n        public static final String META = \"meta\";\n        public static final String FIELDS = \"fields\";\n        public static final String EXPRESSION_FOR_UPSERT_KEYS = \"expressionForUpsertKeys\";\n        public static final String IS_PRIMARY_ID = \"IsPrimaryId\";\n\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"00f40522-0ea2-44af-b06c-f7638e3e9208","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":667,"endLine":697,"content":"tatic final String CUSTOM_OAUTH_CLIENT_SECRET = \"CUSTOM_OAUTH_CLIENT_SECRET\";\n        public static final String FAILURE_REASON = \"FAILURE_REASON\";\n        /**\n         * Timeline Constants\n         */\n        public static final String TIMELINE_ACTIVITY_ATTENDEE_OBJECT_NAME = \"activity_attendee\";\n        public static final String TIMELINE_ACTIVITY_OBJECT_NAME = \"activity_timeline_internal_hs\";\n        public static final String DYNAMICS_USER_IDENTIFIER = \"DynamicsUserId\";\n    }\n\n    // GSDuct(CAAS)  specific constants & codes\n    public static final class GSDuct {\n\n        private GSDuct() {\n        }\n\n        public static final String OBJECT_ID = \"objectId\";\n        public static final String OBJECT_NAME = \"objectName\";\n        public static final String LABEL_PLURAL = \"labelPlural\";\n        public static final String DB_NAME = \"dbName\";\n        public static final String LABEL = \"label\";\n        public static final String CONNECTION_TYPE = \"connectionType\";\n        public static final String CONNECTION_ID = \"connectionId\";\n        public static final String FIELD_NAME = \"fieldName\";\n        public static final String ORIGINAL_DATA_TYPE = \"originalDataType\";\n        public static final String DATA_TYPE = \"dataType\";\n        public static final String FILTERABLE = \"filterable\";\n        public static final String EXTERNALLY_FILTERABLE = \"externallyFilterable\";\n        public static final String OPTION_SET = \"OptionSet\";\n        public static final String VALUE = \"value\";\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"510f0713-cb54-4529-8139-4d87f3b6f547","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/ConnectorI18nService.java","startLine":33,"endLine":62,"content":"des(Sets.newTreeSet(Sets.newHashSet(ComponentCode.CONNECTORS)));\n                    client = I18nClient.getInstance(clientConfig);\n                }\n            }\n        }\n        return client;\n    }\n\n    public static Map<String, String> getTranslations(List<String> keys, String language) {\n        TranslatorRequest translatorRequest = new TranslatorRequest();\n        translatorRequest.component(component);\n        translatorRequest.language(language);\n        translatorRequest.key(Lists.newArrayList(keys));\n        translatorRequest.requestId(RequestContextProvider.getRequestId());\n        TranslatorResponse translate = null;\n        if(StringUtils.isEmpty(envAccessKey) || StringUtils.isEmpty(envHost))\n            translate = i18nClient(DeploymentProperties.getDeploymentProperties().getValue(\"gs.i18n.read.access.key\"),DeploymentProperties.getDeploymentProperties().getValue(\"gs.i18n.service.url\")).translate(translatorRequest);\n        else\n            translate = i18nClient(envAccessKey,envHost).translate(translatorRequest);\n        return translate.getKeyValue();\n    }\n\n    public static String getTranslation(String key, String language) {\n        Map<String, String> translation = getTranslations(Lists.newArrayList(key), language);\n        return translation.get(key);\n    }\n\n    public static String getTranslation(String key, String defaultValue, String language) {\n        Map<String, String> translation = getTranslations(Lists.newArrayList(key), language);\n        retur","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04663f55-8e6c-433a-9062-38f91ab85116","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":246,"endLine":288,"content":"Quietly(this.connection, null, null);\n    }\n    return result;\n  }\n\n\n  @SneakyThrows\n  private Set<Map<String, Object>> executeWithMapSetHandler(PreparedStatement preparedStatement, List<String> ignorableSystemFields) {\n    ResultSet resultSet = null;\n    try {\n      resultSet = preparedStatement.executeQuery();\n      Set<Map<String, Object>> result = new HashSet<>();\n      ResultSetMetaData metaData = resultSet.getMetaData();\n      int columnCount = metaData.getColumnCount();\n      while (resultSet.next()) {\n        Map<String, Object> rowMap = new HashMap<>();\n        for (int i = 1; i <= columnCount; i++) {\n          String columnName = metaData.getColumnName(i);\n          Object columnValue = resultSet.getObject(i);\n          if (COLUMN_NAME.equals(columnName) && ignorableSystemFields.contains(columnValue.toString())) {\n            rowMap.clear();\n            break;\n          }\n          rowMap.put(columnName, columnValue);\n        }\n        if (!rowMap.isEmpty()) {\n          result.add(rowMap);\n        }\n      }\n      return result;\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] exception while executing JDBC statement: {}\", ex.getMessage(), ex);\n      throw new SystemException(\"[SAP DATASPHERE] Failed to connect to source due to {}\", ex);\n    } finally {\n      if (null != resultSet) {\n        resultSet.close();\n      }\n    }\n  }\n\n  @Override\n  public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException {\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"074f73ab-9fc2-451c-8940-1a8458a7aa9c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/constants/RealTimeConstants.java","startLine":1,"endLine":12,"content":"package com.gainsight.integration.rts.constants;\n\npublic class RealTimeConstants {\n    public static final String PEOPLE_MODULE_NAME = \"PEOPLE\";\n    public static final String EXTERNAL_TO_MDA_CHANNEL_PREFIX = \"GS\";\n    public static final String MDA_TO_EXTERNAL_CHANNEL_PREFIX = \"GS_WB\";\n    public static final String RTS_CHANNEL_SUFFIX = \"__chn\";\n    public static final String EXTERNAL_TO_MDA = \"EXTERNAL_TO_MDA\";\n    public static final String MDA_TO_EXTERNAL = \"MDA_TO_EXTERNAL\";\n    public static final String CREATE = \"CREATE\";\n    public static final String UPDATE = \"UPDATE\";\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f349a11-a44b-45cd-a73d-1b2b5985a1ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CustomRecordSeparatorPolicy.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.utils.file;\n\nimport com.opencsv.ICSVParser;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.batch.item.file.FlatFileParseException;\nimport org.springframework.batch.item.file.separator.DefaultRecordSeparatorPolicy;\n\nimport java.io.IOException;\n\npublic class CustomRecordSeparatorPolicy extends DefaultRecordSeparatorPolicy {\n\n    private final ICSVParser csvParser;\n\n    public CustomRecordSeparatorPolicy(ICSVParser parser) {\n        this.csvParser = parser;\n    }\n\n    @Override\n    public boolean isEndOfRecord(String line) {\n        return !isQuoteUnterminated(line);\n    }\n\n    @Override\n    public String preProcess(String line) {\n        if (isQuoteUnterminated(line)) {\n            return line + \"\\n\";\n        }\n        return line;\n    }\n\n    private boolean isQuoteUnterminated(String line) {\n        try {\n            csvParser.parseLine(line);\n            return false;\n        } catch (IOException e) {\n            if (StringUtils.contains(e.getMessage(), \"Unterminated quoted field at end of CSV line\")) {\n                return true;\n            }\n            throw new FlatFileParseException(\"Unable to parse line\", e, line, -1);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7266907f-c0bd-4423-94f3-82a3b4a3e756","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":94,"endLine":120,"content":"            HttpResponse response = httpclient.execute(httpGet);\n            return response.getStatusLine().getStatusCode() == 200;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while trying to authenticate access token aginst url : {}\", url, ex);\n        }\n        return false;\n    }\n\n    @Override\n    public HttpResponse getPaginatedEntityDataLatest(String entityName, List<String> projections, Map<String, String> queryParams) throws Exception {\n        this.httpGet.setURI(getURI(entityName, queryParams));\n        this.httpGet.setHeader(\"Authorization\", this.apiKey);\n        HttpResponse response = null;\n        int retryCount = 2;\n        while(retryCount-- > -1) {\n            response = this.httpclient.execute(httpGet);\n            if(response.getStatusLine().getStatusCode() == 200){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"Access token expired\");\n                throw new Exception(\"Access token expired\");\n            } else if(retryCount <= -1){\n                LOGGER.error(\"The api call to Ecosystem failed for retry count : {} due to status: {} , code :{}\", 2-retryCount,\n                        response.getStatusLine(), response.getStatusLine().getStatusCode());\n                throw new Exception(\"Ecosystem api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"Sleeping for 15 s","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1380c65-c3b0-43cc-9bfb-17977f59c8aa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":839,"endLine":870,"content":"dStatement) {\n        try (ResultSet resultSet = preparedStatement.executeQuery()) {\n            return new MapListHandler().handle(resultSet);\n        } catch (SQLException sqlException) {\n            throw new SystemException(\"Failed to connect to Databricks due to {}\", sqlException);\n        }\n    }\n\n    private Set<Map<String, Object>> executeWithMapSetHandler(PreparedStatement preparedStatement, List<String> ignorableSystemFields) throws SQLException {\n        ResultSet resultSet = null;\n        try {\n            resultSet = preparedStatement.executeQuery();\n            Set<Map<String, Object>> result = new HashSet<>();\n            ResultSetMetaData metaData = resultSet.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            while (resultSet.next()) {\n                Map<String, Object> rowMap = new HashMap<>();\n                for (int i = 1; i <= columnCount; i++) {\n                    String columnName = metaData.getColumnName(i);\n                    Object columnValue = resultSet.getObject(i);\n                    if (COLUMN_NAME.equals(columnName) && ignorableSystemFields.contains(columnValue.toString())) {\n                        rowMap.clear();\n                        break;\n                    }\n                    rowMap.put(columnName, columnValue);\n                }\n                if (!rowMap.isEmpty()) {\n                    result.add(rowMap);\n                }\n            }\n            return result;\n        } catch (SQLException ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"395265a4-f861-419e-8c72-6f4124764d9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescription.java","startLine":147,"endLine":173,"content":"   @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n\n        if (o == null || getClass() != o.getClass()) return false;\n\n        GainsightHubspotFieldDescription that = (GainsightHubspotFieldDescription) o;\n\n        return new EqualsBuilder()\n                .append(hubspotDefined, that.hubspotDefined)\n                .append(name, that.name)\n                .append(label, that.label)\n                .append(type, that.type)\n                .append(fieldType, that.fieldType)\n                .append(referencedObjectType, that.referencedObjectType)\n                .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37)\n                .append(name)\n                .append(label)\n                .append(type)\n                .toHashCode();\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fecdf2f6-0074-4ad7-b826-09a1ae3aff5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotEntityDescriptionV3.java","startLine":48,"endLine":69,"content":"yDescriptionV3(String entityName, List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightHubspotFieldDescriptions = gainsightHubspotFieldDescriptions;\n    }\n\n    public void addField(GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription){\n        if(this.gainsightHubspotFieldDescriptions != null){\n            this.gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription);\n        }else{\n            this.gainsightHubspotFieldDescriptions = new ArrayList();\n            this.gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription);\n        }\n    }\n    @Override\n    public String toString() {\n        return \"GainsightHubspotEntityDescription{\" +\n                \"entityName='\" + entityName + '\\'' +\n                \", entityId='\" + entityId + '\\'' +\n                \", gainsightHubspotFieldDescriptions=\" + gainsightHubspotFieldDescriptions +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7528c5d-8636-4b4a-99b7-428a46d944ae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":153,"endLine":168,"content":"esult = future.get();\n        } finally {\n            service.shutdown();\n        }\n\n        if (result == null) {\n            LOGGER.error(\"authentication result was null\");\n            throw new ServiceUnavailableException(\n                    \"authentication result was null\");\n        } else {\n            LOGGER.info(\"Generation of accessToken for client_credentials flow succeeded\");\n        }\n        return result;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d09e7b4-6442-43ea-9021-710970d28680","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/MSDynamicsObjectQuery.java","startLine":76,"endLine":91,"content":"ing field : includeFields) {\n            if (FIELDS_MAPPING.containsKey(field)) {\n                projections.add(FIELDS_MAPPING.get(field));\n            }\n        }\n        return projections.toArray(new String[projections.size()]);\n    }\n\n    @Override\n    public String toString() {\n        return \"MSDynamicsObjectQuery{\" +\n                \"params=\" + params +\n                \", includeFields=\" + includeFields +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91eda17d-9593-417e-9083-d5ded58d5541","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/GSODataClientFactory.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.dynamics.bean.factory;\n\n\nimport com.gainsight.integration.utils.common.UCConstants;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.core.ODataClientFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class GSODataClientFactory {\n\n    public static ODataClient getOdataClient() {\n        ODataClient client = ODataClientFactory.getClient();\n        ODataHttpConfig httpClientFactory = new ODataHttpConfig();\n        httpClientFactory.init();\n        client.getConfiguration().setHttpClientFactory(httpClientFactory);\n        return client;\n    }\n\n    public static Map<String, Object> generateAccessToken() {\n        ODataHttpConfig httpClientFactory = new ODataHttpConfig();\n        httpClientFactory.init();\n        Map<String, Object> response = new HashMap<>();\n        response.put(UCConstants.GSIntegration.ACCESS_TOKEN, httpClientFactory.getAuthenticationResult().getAccessToken());\n        response.put(UCConstants.GSIntegration.EXPIRY, httpClientFactory.getAuthenticationResult().getExpiresOn());\n        return response;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6483dc34-bb53-46fd-b8af-ea0db29ecf61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":121,"endLine":152,"content":"t(\"message\")));\n                    } else {\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.info(\"[HUBSPOT] Error while getting accessToken : {}, retryCount : {}\", e, retryCount);\n                Thread.sleep((4 - retryCount) * 2 * 1000);\n                if (retryCount == 0) {\n                    LOGGER.error(\"[HUBSPOT] Error while getting accessToken : {} after max retries\", e);\n                    throw e;\n                }\n            }\n        }\n        return accessToken;\n    }\n\n    public List<String> getAccessTokenScopes(String clientId, String clientSecret, String refreshToken) throws Exception {\n        List<String> scopes;\n        try (CloseableHttpClient httpclient = HttpClients.createDefault()) {\n            String accessToken = getAccessToken(clientId, clientSecret, refreshToken);\n            if (StringUtils.isNotEmpty(accessToken)) {\n\n                HttpGet httpPost = new HttpGet(\"https://api.hubapi.com/oauth/v1/access-tokens/\" + accessToken);\n\n                HttpResponse response = httpclient.execute(httpPost);\n                HttpEntity entity = response.getEntity();\n\n                String jsonResponse;\n                Map<String, Object> responseMap;\n\n                if (response.getStatusLine().getStatusCode() == Htt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c1f1779-84cf-4b65-8445-93abb3f691b2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":351,"endLine":372,"content":"om (\" + selectQuery + \") \" +\n                    \"file_format = (type = 'JSON' NULL_IF = ('\\\\N', 'NULL', 'NUL', '') strip_outer_array = true STRIP_NULL_VALUES = TRUE DATE_FORMAT = 'YYYY-MM-DD'  \" +\n                    \"compression = 'NONE') \" +\n                    \" OVERWRITE = TRUE SINGLE = FALSE MAX_FILE_SIZE = \" + maxFileSize;\n            LOGGER.info(\"Executing query : {}\", copyManagerQuery);\n            preparedStatement = this.connection.prepareStatement(copyManagerQuery);\n            preparedStatement.executeQuery();\n\n            //download files from staging to local\n            String downloadFilesQuery = \"get @\" + tempStageName + \"/\" + stageFileName + \" file://\" + System.getProperty(\"user.dir\") + \"/stagingFile\";\n            LOGGER.info(\"Executing query : {}\", downloadFilesQuery);\n            preparedStatement = this.connection.prepareStatement(downloadFilesQuery);\n            preparedStatement.executeQuery();\n\n            //list the file paths\n            String listLocalStagingFilesQuery = \"list @\" + tempStageName + \"/\" + stageFileName;\n            LOGGER.info(\"Executing query : {}\", listLocalStagingFilesQuery);\n            preparedStatement = this.connection.prepareStatement(listLocalStagingFilesQuery);\n            resultSet = preparedStatement.executeQuery();\n            List<String> filePaths = new ArrayList<>();\n            while (resultSet.next()) {\n                filePaths.add(resultSet.getString(\"name\").replace(tempStageName, System.getProperty(\"user.dir\") +","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"68a04994-b0bd-4461-8af0-f9c5622e1a8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":274,"endLine":290,"content":"tic())\n      return config.getValue();\n\n    if (config.getTokenGenerationDetails() != null) {\n      if (ObjectUtils.isEmpty(pnpConnectionsInfo.getTokenDetail().getExpiry()) || pnpConnectionsInfo.getTokenDetail().getExpiry() < System.currentTimeMillis()) {\n        Object res = getAccessDeatils(config.getTokenGenerationDetails(), pnpConnectionsInfo, metadataEngineConfig, flattenConnectionInfo, null);\n        Gson gson = new Gson();\n        Map<String, Object> response = gson.fromJson(res.toString(), Map.class);\n        BaseTokenDetail baseTokenDetail = pnpConnectionsInfo.getTokenDetail();\n        if (StringUtils.isNotEmpty(config.getTokenGenerationDetails().getResponseRootKey()))\n          baseTokenDetail.setAccessToken(CryptHandler.getInstance().encrypt(String.valueOf(response.get(config.getTokenGenerationDetails().getResponseRootKey()))));\n        if (StringUtils.isNotEmpty(config.getTokenGenerationDetails().getResponseRefreshTokenKey())) {\n          LOGGER.info(\"Received refresh token for connectorType : {} connectionId : {},refresh token present : {}\", pnpConnectionsInfo.getConnectionType(),\n                  pnpConnectionsInfo.getConnectionId(),response.get(config.getTokenGenerationDetails().getResponseRefreshTokenKey()) !=null );\n          baseTokenDetail.setRefreshToken(CryptHandler.getInstance().encrypt(String.valueOf(response.get(config.getTokenGenerationDetails().getResponseRefreshTokenKey()))));\n        }\n        if (StringUtils.isNotEmpty(config.getTokenGenerationDe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19aca3d5-ad4f-4f9c-aabd-2c13400e7dae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":608,"endLine":634,"content":"hAccessToken().getTokenValue();\n            return accessToken;\n        } catch (Exception e) {\n            LOGGER.error(\"Invalid service account json {} \", e.getMessage());\n            throw new SystemException(e.getMessage(), BigQueryErrorCode.INVALID_SERVICE_ACCOUNT_JSON, HttpStatus.SC_BAD_REQUEST);\n        }\n    }\n\n    private boolean isBigQueryJobCompleted(Map<String, Object> jobDetail) throws Exception {\n        String jobId = ((Map) jobDetail.get(JOB_REFERENCE)).get(\"jobId\").toString();\n        LOGGER.info(\"Checking for BQ job completion, with queryResultJobId: {}\", jobId);\n        boolean jobCompleted = false;\n        int retryCounter = 0;\n        int checkCounter = 0;\n        Map<String, Object> responseMap = new HashMap<>();\n        while (checkCounter < 30 && !jobCompleted) {\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/jobs/%s\", this.projectId, jobId);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            LOGGER.info(\"URI for fetching data {}\", uriBuilder.build());\n            this.httpGet.setURI(uriBuilder.build());\n            if (StringUtils.isNotEmpty(((Map) jobDetail.get(JOB_REFERENCE)).get(LOCATION).toString())) {\n                uriBuilder.addParameter(LOCATION, ((Map) jobDetail.get(JOB_REFERENCE)).get(LOCATION).toString());\n            }\n            this.httpGet.setURI(uriBuilder.build());\n            this.httpGet.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n            HttpResponse response = null;\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c2d0276-c8e3-45af-8e74-fc745ac37e44","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":354,"endLine":377,"content":"matter();\n      Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getName, field -> field));\n      stat = this.connection.createStatement();\n      resultSet = stat.executeQuery(selectQuery);\n\n      List<Map<String, Object>> recordValues = Lists.newArrayList();\n      while (resultSet.next()) {\n        if (fileList.isEmpty()) {\n          log.info(\"[SAP DATASPHERE] Creating file at position: {}\", filePosition.get());\n          File initialFile = new File(fileDir + jobId + UUID.randomUUID() + JSON_EXTENSION);\n          fileList.add(filePosition.get(), initialFile);\n        }\n        int columnCount = resultSet.getMetaData().getColumnCount();\n        Map<String, Object> map = new HashMap<>();\n\n        for (int i = 1; i <= columnCount; i++) {\n          String columnName = resultSet.getMetaData().getColumnName(i);\n          Object objectValue = resultSet.getObject(columnName);\n          FieldInfo field = fieldNameToFieldInfoMap.get(columnName);\n          if (objectValue instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n            String timezone = StringUtils.defaultIfBlank(field.getDateTimeProperties().getTimeZoneId(), \"UTC\");\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n            LocalDateTime localDateTime = LocalDateTime.parse(objectValue.toString(), defaultSrcFormatter);\n            // assuming that we always get timestamp in UTC from ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da331be4-264a-444d-af9a-736148b52f47","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":186,"endLine":206,"content":"     }\n        }\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(msDynamicsObject, getRecordsRequest.getProjections(), relationships,masterLookUpConfiguration);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n        for(String[] expandedGroupSplittedSingle: expandGroupSplitted){\n            List<String> expandFields = expandGroupWithFilter.getOrDefault(expandedGroupSplittedSingle[0], Lists.newArrayList());\n            expandFields.add(expandedGroupSplittedSingle[1]);\n            expandGroupWithFilter.put(expandedGroupSplittedSingle[0], expandFields);\n        }\n        Set<String> lookUpFieldNames = Sets.newHashSet();\n        for(Map.Entry<String, List<String>> entry: expandGroupWithFilter.entrySet()){\n            lookUpFieldNames.add(entry.getKey() + \"($select=\"+ String.join(\",\", entry.getValue() )+ \")\");\n        }\n\n        RecordResponseGenerator recordResponseGenerator = new RecordResponseGenerator(getRecordsRequest);\n        try {\n            ClientEntitySet clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                lookUpFieldNames, getRecordsRequest.getFilterExpression(), recordResponseGenerator);\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGro","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca595c11-5049-43f8-b045-4f3070bc96fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":389,"endLine":407,"content":"xpandGroup) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                String sourceLookupField = mappedSourceColumns[0];\n                String propertyValue = masterLookUpConfiguration.get(objectDefinition.getLabelPlural() + \"@@\" + sourceLookupField);\n                if (Objects.nonNull(propertyValue)) {\n                    String newExpandProjection;\n                    if (mappedSourceColumns.length == 3) {\n                        newExpandProjection = StringUtils.replaceOnce(projection, mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1], propertyValue);\n                    } else {\n                        newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    }\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Optional<GSFieldDefinition> gsFieldDefinitionOptional;\n                    if (modifiedExpandToOriginalFieldName.containsKey(projection)) {\n                        gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"141940a4-134f-4102-833d-798991ec1cce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":73,"endLine":95,"content":"mns = new ArrayList<>();\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(objectDefinition, getRecordsRequest.getProjections());\n        } else {\n            multiPicklistColumns = objectDefinition.getFields().stream().filter(\n                    gsFieldDefinition -> getRecordsRequest.getProjections().contains(gsFieldDefinition.getFieldName())\n            ).collect(Collectors.toList()).stream().filter(\n                    gsFieldDefinition -> (gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST))\n            ).map(gsFieldDefinition -> gsFieldDefinition.getFieldName()).collect(Collectors.toList());\n        }\n\n        Map<String, Set<String>> selectAndExpandGroup = groupProjectionBySelectAndExpand(getRecordsRequest.getProjections());\n        Set<String> expandGroup = Sets.newHashSet();\n        Set<String> selectGroup = Sets.newHashSet();\n        Map<String, String> logicalNameToExternalType = new HashMap<>(objectDefinition.getFields().size());\n        objectDefinition.getFields().forEach(gsFieldDefinition ->\n                logicalNameToExternalType.put(gsFieldDefinition.getFieldName(), gsFieldDefinition.getMeta().getOriginalDataType())\n        );\n\n        Map<String, Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        Map<String, String> modifiedExpandToOriginalFieldName = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (Collec","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"770ca303-281c-43b9-9c61-0c8260296025","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":39,"endLine":61,"content":"GainsightHubspotChannelFactory() {\n    }\n\n    public GainsightHubspotChannelService getChannelServiceWithApiKey(String apiKey){\n        Objects.requireNonNull(apiKey,\"[HUBSPOT] API key cannot be null\");\n        return new GainsightHubspotChannelServiceImpl(apiKey);\n    }\n\n    public GainsightHubspotChannelService getChannelServiceWithOAuth20(String clientId, String clientSecret, String refreshToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[HUBSPOT] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[HUBSPOT] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[HUBSPOT] Refresh token cannot be null\");\n        String accessToken = getAccessToken(clientId, clientSecret, refreshToken);\n        return new GainsightHubspotChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public GainsightHubspotChannelService getChannelServiceWithOAuth20WithAccessToken(String clientId, String clientSecret,\n                                                                                      String refreshToken,\n                                                                                      String accessToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[HUBSPOT] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[HUBSPOT] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[HUBSPOT] Refresh token cannot be null\");\n        if(StringUti","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"df4ba1b2-f393-49e0-8fb3-e2060852d2bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":173,"endLine":197,"content":".getContent());\n        Iterator<JsonNode> it = jsonNode.iterator();\n        while (it.hasNext()) {\n            data.add(it.next());\n        }\n    }\n\n    private String getUriAndPopulateData(List<JsonNode> data, HttpResponse response) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode jsonNode = mapper.readTree(response.getEntity().getContent());\n        Iterator<JsonNode> it = jsonNode.get(DATA).iterator();\n        while (it.hasNext()) {\n            data.add(it.next());\n        }\n        return jsonNode.get(LINKS).get(NEXT).asText();\n    }\n\n    private String getNoteIdsAsJson(List<String> noteIds) {\n        Gson gson = new GsonBuilder().create();\n        Map<String, Object> json = new HashMap<>();\n        json.put(\"ids\", noteIds);\n        return gson.toJson(json);\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b7a85dc-a9d1-4d45-a775-b35ce9a7c37e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/error/BigQueryErrorCode.java","startLine":36,"endLine":55,"content":"public String getGsEventCode() {\n        return \"GS_BIGQUERY\"+code;\n    }\n\n    @Override\n    public String getUserText() {\n        ConnectorI18nService.getTranslation(this.name(),text, RequestContextProvider.getTenantLanguage());\n        return text;\n    }\n\n    @Override\n    public ExceptionType getExceptionType() {\n        return null;\n    }\n\n    @Override\n    public boolean isCodeConstant() {\n        return false;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7aab6e0-c1dd-4d73-9f5f-21ef081a9104","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/FeatureToggleUtil.java","startLine":27,"endLine":49,"content":"domains.env\");\n    private static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SHARED_SECRET = DeploymentProperties.getDeploymentProperties().getValue(\"gsnap.shared.secret\");\n\n    private static final Long SFDC_API_VERSION_CACHE_EXPIRY = DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.salesforce.api.version.cache.expiry\", 120000L);\n    private static final ExpiryCache<String, String> TENANT_SFDC_VERSION_CACHE = new ExpiryCache<>(SFDC_API_VERSION_CACHE_EXPIRY);\n\n    public static ClientConfig getFeatureToggleClientConfig() {\n        return (new ClientConfig()).withHost(FEATURE_CONFIG_URL).withEnvironment(GS_ENV_NAME).withCredentials((new Credentials()).withRequestInfo(RequestContextProvider.getRequestInfo()).withEncryptedSecret(CryptUtil.getSimpleCryptor().encrypt(SHARED_SECRET).getValue()));\n    }\n\n    public static FeatureConfigCRUDService getFeatureToggleCrudService() {\n        return (new FeatureConfigCRUDServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n    }\n\n    public static boolean evaluateBooleanFeature(String name, String tenantId) {\n        return Boolean.TRUE.equals(evaluateFeature(name, tenantId, false));\n    }\n\n    public static String getSalesforceVersion(String configuredSFDCVersion) {\n        if (StringUtils.isNotEmpty(configuredSFDCVersion)) {\n            LOGGER.info(\"SFDC version used: {}\", configuredSFDCVersion);\n            re","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5b47e1b3-c4e4-4105-b028-5294f75844c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":56,"endLine":85,"content":"ymentProperties.getDeploymentProperties().getLongValue(\"uc.gs.config.refreshTime\", 900L);\n    private static final Cache<String, JSONObject> MASTER_LOOKUP_CONFIGURATION = CacheBuilder.newBuilder()\n            .concurrencyLevel(4)\n            .maximumSize(20)\n            .expireAfterWrite(REFRESH_TIME, TimeUnit.SECONDS)\n            .build();\n\n    private DynamicsGainsightUtils() {\n    }\n\n    public static Map<String, String> fetchMapFromConfigServer() {\n        try {\n            MASTER_LOOKUP_CONFIGURATION.cleanUp();\n            if (MASTER_LOOKUP_CONFIGURATION.size() == 0) {\n                String propertyValue = DeploymentProperties.getDeploymentProperties().getValue(KEY);\n                if (null != propertyValue) {\n                    JSONObject jsonObject = org.apache.commons.lang.StringUtils.isNotBlank(propertyValue) ? new JSONObject(propertyValue) : null;\n                    LOGGER.info(\"Fetched the records from Config Server and cached\");\n                    MASTER_LOOKUP_CONFIGURATION.put(\"cacheKey\", jsonObject);\n                }\n            }\n            Map<String, JSONObject> map = MASTER_LOOKUP_CONFIGURATION.asMap();\n            JSONObject jsonObject = map.get(\"cacheKey\");\n            Map<String, String> masterLookUpMap = Maps.newHashMap();\n            Iterator<String> keys = jsonObject.keys();\n            while (keys.hasNext()) {\n                String key = keys.next();\n                masterLookUpMap.put(key, jsonObject.optString(key));\n            }\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9eb0f183-3477-46e3-b787-3a7444140e61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":696,"endLine":722,"content":"cord to: {}\", targetObject, ex);\n            result.put(STATUS, GSIntegration.FAILED);\n            result.put(ERROR_MESSAGE, ex.getMessage());\n            throw ex;\n        } finally {\n            LOGGER.info(\"Loading of record to entity: {} with operation: {} completed\", targetObject, ductDataOperation.getDuctDataOperation());\n            HttpClientUtils.closeQuietly(httpClient);\n        }\n    }\n\n    private Map<String, Object> constructRequest(String[] headers, String[] requestData, Map<String, String> lookupProjectionToNavigationProperty,\n                                                 Map<String, String> entityLogicalNameToPluralName, ObjectDefinition objectDefinition) {\n        Map<String, Object> requestMap = new HashMap<>();\n        Map<String, Object> lookupFieldToValueMap = new HashMap<>();\n        for (int i = 0; i < headers.length; i++) {\n            String header = headers[i];\n            String data = StringUtils.isEmpty(requestData[i]) ? null : requestData[i];\n            if (header.contains(PERIOD) && lookupProjectionToNavigationProperty.containsKey(header)) {\n                String columns[] = header.split(\"\\\\.\");\n\n                /*If a lookup field, points to different targets, consider the column which has value.\n                  Example:\n                    ownerid.systemuser : \"\", // or null\n                    ownerid.team: \"team_id\"\n                    Here consider: ownerid.team (which has value).\n\n                    If both the fields has values: F","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08c06a90-ab66-4a2a-9b47-6b0c5c7f1970","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":63,"endLine":93,"content":"KTICK = \"`\";\n\n\n    //JSONs Type (For all connectors. Ex: event, group,company etc)\n    public static final String EVENT = \"Event\";\n    public static final String PEOPLE = \"People\";\n    public static final String IDENTIFY = \"Identify\";\n    public static final String GROUP = \"Group\";\n    public static final String COMPANY = \"Company\";\n    public static final String TRACK = \"Track\";\n\n\n    //Specific to Transformation\n    public static final String S3_INPUT_FOLDER = \"INPUT\";\n    public static final String S3_OUTPUT_FOLDER = \"OUTPUT\";\n    public static final String S3_ERROR_FOLDER = \"ERROR\";\n    public static final String S3_DELETED_RECORDS_FOLDER = \"DELETED\";\n    public static final String ERROR = \"Error\";\n    public static final String TENANT_FOLDER = \"UC/\";\n\n\n    //Database  related constants\n    public static final String NOTIFY_AFTER_FETCH_FLAG = \"NOTIFY_AFTER_FETCH\";\n    public static final String PROJECTS_COUNT = \"PROJECT_COUNT\";\n    public static final String COLLECTION_NAME = \"REDSHIFT_TABLE_NAME\";\n    public static final String COLLECTION_DISPLAY_NAME = \"COLLECTION_MASTER_DISPLAY_NAME\";\n    public static final String COLLECTION_ID = \"COLLECTION_MASTER_ID\";\n    public static final String JOB_S3_FOLDER_PATH = \"JOB_S3_FOLDER_PATH\";\n    public static final String REDSHIFT_TIMESTAMP_CREATED_AT_FIELD_MAPPER = \"created_at\";\n    public static final String REDSHIFT_TIMESTAMP_INSERTED_AT_FIELD_MAPPER = \"inserted_at\";\n    public static final String REDSHIFT_SYSTEM_ID_FIELD_MAPPER =","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"411b655c-4c18-4982-9928-d9eaa1fe3104","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImplTest.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.codehaus.jackson.JsonNode;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.springframework.test.util.AssertionErrors.fail;\n\n/**\n * @author : vipinsharma\n * @createdOn : 08 May 2019 22:11\n **/\n\n@ExtendWith(SpringExtension.class)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@ContextConfiguration(locations = \"classpath*:/spring/spring-service-gs-adapter-sap-test.xml\")\n@Disabled\npublic class GainsightSapMktFetchServiceImplTest{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSapMktFetchServiceImplTest.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private ODataClient oDataClientForApiKey;\n\n    @Autowired\n    private GainsightSapM","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0b7d124b-b1d8-4b65-9a1c-69c4d4df8558","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":218,"endLine":245,"content":"Properties())) {\n                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                    LocalDate localDate = LocalDate.parse(object.toString());\n                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(dtf));\n                } else if(resultSet.getObject(i+1) instanceof byte[]){\n                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), Hex.encodeHexString((byte[]) object));\n                }else {\n                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), object);\n                }\n            }\n            recordValues.add(map);\n        }\n        return recordValues;\n    }\n\n    @Override\n    public List<File> fetchData(String objectName, String selectQuery, int maxFileSize,List<FieldInfo> fieldInfos,String filter,  Set<String> ntz_fields, Map<String, String> ntz_map){\n        String tempStageName = null;\n        ResultSet resultSet = null;\n        PreparedStatement preparedStatement = null;\n        List<File> dataFiles = new ArrayList<>();\n        try {\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"269fa143-8b07-4656-b16f-6d6cde78e536","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/bean/SalesforceJob.java","startLine":1,"endLine":59,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.connector.sfdc.bean;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class SalesforceJob {\n    private String id;\n    private String operation;\n    private String object;\n    private String contentType;\n    private String state;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getOperation() {\n        return operation;\n    }\n\n    public void setOperation(String operation) {\n        this.operation = operation;\n    }\n\n    public String getObject() {\n        return object;\n    }\n\n    public void setObject(String object) {\n        this.object = object;\n    }\n\n    public String getContentType() {\n        return contentType;\n    }\n\n    public void setContentType(String contentType) {\n        this.contentType = contentType;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79784e25-5f12-43de-8ed6-5d89a6e16d48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":657,"endLine":682,"content":" {\n                        onClause = String.format(CAST_TO_DOUBLE, onClause);\n                    }\n                    onClause = absolutePathToTargetTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK + EQUALS + onClause;\n                    ON_CLAUSE.add(onClause);\n                }\n\n                String setClause = absolutePathToTempStageTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK;\n                if (decimalsNotAllowedFields.contains(colNameToDataType.get(columnMapping.getFieldName()).toUpperCase())) {\n                    setClause = String.format(CAST_TO_DOUBLE, setClause);\n                }\n                setClause = absolutePathToTargetTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK + EQUALS + setClause;\n                SET_CLAUSE.add(setClause);\n\n                INSERT_COLUMN_CLAUSE.add(absolutePathToTargetTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK);\n\n                String insertValueClause = absolutePathToTempStageTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK;\n                if (decimalsNotAllowedFields.contains(colNameToDataType.get(columnMapping.getFieldName()).toUpperCase())) {\n                    insertValueClause = String.format(CAST_TO_DOUBLE, insertValueClause);\n                }\n                INSERT_VALUE_CLAUSE.add(insertValueClause);\n            }\n\n            switch (ductDataOperation) {\n                case INSERT:\n                    mergeI","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69794729-a5fc-4ff4-8419-4352158f832c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/bean/GainsightZoomFieldDescription.java","startLine":1,"endLine":30,"content":"package com.gainsight.integration.connector.zoom.bean;\n\npublic class GainsightZoomFieldDescription {\n    private String name;\n    private String label;\n    private String type;\n    private String description;\n    private String apiName;\n\n    public String getName() { return name; }\n\n    public void setName(String name) { this.name = name; }\n\n    public String getLabel() { return label; }\n\n    public void setLabel(String label) { this.label = label; }\n\n    public String getType() { return type; }\n\n    public void setType(String type) { this.type = type; }\n\n    public String getDescription() { return description; }\n\n    public void setDescription(String description) { this.description = description; }\n\n    public String getApiName() { return apiName; }\n\n    public void setApiName(String apiName) { this.apiName = apiName; }\n\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8dca35cd-473a-4316-84a2-fa38126f6fe5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":179,"endLine":203,"content":"             this.wareHouse = properties.get(UCConstants.GSIntegration.WAREHOUSE).toString();\n                /*\n                    httpPath: The partial URL corresponding to the Spark server.\n                    Sample value of httpPath: sql/protocolv1/o/<organisation_id>/<workspace_id/cluster_id>\n                    this is required when transportMode=http.\n                    sample value: /sql/1.0/warehouses/94f78211ac92c860\n                */\n                prop.put(HTTP_PATH, String.format(WAREHOUSE_HTTP_PATH, wareHouse));\n            } else {\n                this.organizationId = properties.get(UCConstants.GSIntegration.ORGANIZATION_ID).toString();\n                this.clusterId = properties.get(UCConstants.GSIntegration.CLUSTER_ID).toString();\n                /*\n                    httpPath: The partial URL corresponding to the Spark server.\n                    Sample value of httpPath: sql/protocolv1/o/<organisation_id>/<cluster_id>\n                    this is required when transportMode=http.\n                    sample value: httpPath=sql/protocolv1/o/4511669483978724/0308-040848-eu9l9vmc\n                */\n                prop.put(HTTP_PATH, String.format(COMPUTE_HTTP_PATH, organizationId, clusterId));\n            }\n\n            /*\n                transportMode: The transport protocol to use in the Thrift(SPARK server) layer is mentioned by this property\n                default value of transportMode is http\n            */\n            prop.put(TRANSPORT_MODE, Htt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b053fa6b-f4fa-43e8-bed5-66f7f5df5e7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":24,"endLine":57,"content":"tringUtils;\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.retrieve.*;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.apache.olingo.client.api.domain.*;\nimport org.apache.olingo.client.api.uri.URIBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.connector.dynamics.util.MSDynamicsObjectUtil.*;\n\n@Service\npublic class MSDynamicsSchemaServiceImpl implements MSDynamicsSchemaService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MSDynamicsSchemaServiceImpl.class);\n    private static final String LOGICAL_NAME_FILTERS = \"LogicalName eq '%1$s'\";\n    private static final String FILTER_CRITERIA = \"($filter=%1$s)\";\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Override\n    public Map<String, Object> extractMetadata(MSDynamicsObjectQuery query, boolean includeColumns, boolean includePicklistOptions){\n        return describeDynamicsObject(query, includeColumns, includePicklistOptions, null, false);\n    }\n\n    @Override\n    public Map<String, Object> extractMetadata(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionS","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9eb9c8d-b356-451f-9c24-00a5501b7e75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":166,"endLine":192,"content":" = (HttpURLConnection) url.openConnection();\n            return http.getResponseCode() == 200;\n        } else if (this.authenticationType == AuthenticationType.OAUTH2) { // Check authentication via Hubspot Account detail API\n            URI uri = new URIBuilder(\"https://api.hubapi.com/integrations/v1/me\").build();\n            httpGet.setURI(uri);\n            HttpResponse response = httpclient.execute(httpGet);\n            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n//                throw new Exception(\"Unable to fetch hubspot account details\", response.getStatusLine().getStatusCode());\n                throw new Exception(AdapterErrorMessages.UNABLE_TO_FETCH_HUBSPOT_ACCOUNT_DETAILS.getTranslatedMessage());\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public Map<String, Object> getHubspotAccountDetails() throws Exception {\n        Map<String, Object> accountMap;\n        try {\n            URI uri = new URIBuilder(\"https://api.hubapi.com/integrations/v1/me\").build();\n            this.httpGet.setURI(uri);\n            HttpResponse response = this.httpclient.execute(httpGet);\n            String hubspotAccount = IOUtils.toString(response.getEntity().getContent());\n            accountMap = MAPPER.readValue(hubspotAccount, Map.class); //TODO may be create a POJO class for HUBSPOT account\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in fetching HUBSPOT Ac","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a81c52eb-113f-4442-a756-0a95a6162e82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescriptionV3.java","startLine":1,"endLine":59,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightHubspotFieldDescriptionV3 {\n\n\n    private String updatedAt;\n    private String createdAt;\n    private String name;\n    private String label;\n    private String type;\n    private String fieldType;\n    private String description;\n    private String groupName;\n    private String displayOrder;\n    private boolean calculated;\n    private boolean externalOptions;\n    private boolean archived;\n    private boolean hasUniqueValue;\n    private boolean hidden;\n    private boolean formField;\n    private ModificationMetadata modificationMetadata;\n    private boolean hubspotDefined;\n    private String referencedObjectType;\n    private String apiName;\n    private String canonicalName;\n    private List<Options> options;\n    private String createdUserId;\n    private String updatedUserId;\n    private Boolean isMultiValued;\n\n    public GainsightHubspotFieldDescriptionV3() {\n    }\n\n    public Boolean getMultiValued() {\n        return isMultiValued;\n    }\n\n    public void setMultiValued(Boolean multiValued) {\n        isMultiValued = multiValued;\n    }\n\n    public String getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public void setUpdatedAt(String updatedAt) {\n        this.updatedAt = updatedAt;\n    }\n\n    public String getCreatedAt() {\n        return createdAt;\n    }\n\n    public v","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4fc8f16-567c-4ed7-803e-868499354d25","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":236,"endLine":263,"content":"gsForField.getAllowedExternalFilterOperators().isEmpty());\n                } else {\n                    // no mapping found in caas_connector_config for this field's AttributeType\n                    dataTypeMappingsForField = null;\n                    fieldDefinition.put(DATA_TYPE, DataType.STRING.name());\n                    meta.put(FILTERABLE, false);\n                    meta.put(EXTERNALLY_FILTERABLE, false);\n                }\n\n                if (Objects.nonNull(attribute.get(OPTION_SET))) {\n                    OptionSet optionSet = (OptionSet) poll(attribute, OPTION_SET);\n                    List<Map> picklistOptions = new ArrayList<>();\n                    Map<String, Object> picklistOption;\n                    for (Option option : optionSet.getOptions()) {\n                        picklistOption = new HashMap<>();\n                        picklistOption.put(LABEL, option.getLabel());\n                        picklistOption.put(VALUE, option.getValue());\n                        picklistOption.put(ACTIVE, true);\n                        picklistOptions.add(picklistOption);\n                    }\n                    fieldDefinition.put(OPTIONS, picklistOptions);\n                }\n\n                meta.put(ACCESSIBLE, poll(attribute, \"IsValidForRead\"));\n                meta.put(SORTABLE, poll(attribute, \"IsSortableEnabled\",\n                        DynamicsGainsightUtils.parseBoolean(((Map) attribute.get(\"IsSortableEnabled\")).getOrDefault(\"Value\", false))));\n\n                m","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"845fdfe3-5fad-435d-80cb-5fe1840a5315","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/IPaasConstants.java","startLine":83,"endLine":93,"content":"ET_KEY = \"isSecretKey\";\n    public static final String IS_VIEWABLE = \"isViewable\";\n    public static final String STORE_IN_DB = \"storeInDb\";\n    public static final String IS_CLIENT_INFO_STORED_IN_PROPERTIES = \"isClientInfoStoredInProperties\";\n    public static final String DEFAULT_SLEEP_TIME = \"sleepFactorOnFail\";\n    public static final String MAX_NO_OF_RETRIES = \"maxNumOfRetries\";\n    public static final String CASE_FREE_FORM = \"CASE_FREE_FORM\";\n    public static final String ELEMENTS_VERSION = \"Elements-Version\";\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a9482bcf-df8e-46e8-ae23-ab790597ad22","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":163,"endLine":183,"content":"Messages.INVALID_ORGANIZATION_URL.getTranslatedMessage());\n            }\n            return accountMap;\n    }\n\n    @Override\n    public Map<String, Object> getTeamsUserDetails() throws Exception {\n        Map<String, Object> accountMap;\n        try {\n            URI uri = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V1 + \"me\").build();\n            this.httpGet.setURI(uri);\n            HttpResponse response = this.httpclient.execute(httpGet);\n            String msTeamsAccount = IOUtils.toString(response.getEntity().getContent());\n            accountMap = MAPPER.readValue(msTeamsAccount, Map.class);\n        } catch (Exception exception) {\n            LOGGER.error(\"[MSTEAMS] Error in fetching User Details\", exception);\n            throw new Exception(AdapterErrorMessages.INVALID_ORGANIZATION_URL.getTranslatedMessage());\n        }\n        return accountMap;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be90f671-3d0d-4382-9530-5ad90bf87f12","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":378,"endLine":404,"content":" for objectId %s for assocaitionType %s\", objectId, gsHubspotAssociationEnum), exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return associationsResult;\n    }\n\n    @Override\n    public List<String> getAssociatedObjectsLatest(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception {\n        HttpResponse response = null;\n        List<String> associationsResult = new ArrayList<>();\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + ASSOCIATION_END_POINT_V3 + GSHubspotAssociationEnum.getSourceObjectType(gsHubspotAssociationEnum) + \"/\" + GSHubspotAssociationEnum.getTargetObjectType(gsHubspotAssociationEnum) + \"/batch/read\";\n            Map<String, Object> objectIdMap = new HashMap<>();\n            objectIdMap.put(\"id\", objectId);\n            List<Map<String, Object>> actualValue = new ArrayList<>();\n            actualValue.add(objectIdMap);\n            Map<String, Object> requestMap = new HashMap<>();\n            requestMap.put(\"inputs\", actualValue);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpPost.setURI(uriBuilder.build());\n            StringEntity stringEntity = new StringEntity(new ObjectMapper().writeValueAsString(requestMap), ContentType.APPLICATION_JSON);\n            this.httpPost.setEntity(stringEntity);\n            InputStream inputStream = null;\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1cd7a12-ddf5-4ee3-b1eb-9581b1c81ca9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":564,"endLine":604,"content":"OGGER.error(\"[HUBSPOT] error in searching data \", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse searchOwnerData() throws Exception {\n        HttpResponse response = null;\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + OWNER_END_POINT_V3;\n\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpGet.setURI(uriBuilder.build());\n            InputStream inputStream = null;\n            try {\n                response = this.httpclient.execute(httpGet);\n\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] error in searching hubspot owner data \", exception);\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] error in searching hubspot owner data \", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public Map<String, Object> getFileMetaData(String fileId, boolean signedUrl) {\n        HttpResponse response = null;\n        Map<String, Object> metadata = new HashMap<>();\n        try {\n            String url = String.format(BASE_API_URL + FILE_METADATA_END_POINT, fileId);\n            if (signedUrl) {\n                url = String.format(BASE_API_URL + FILE_","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9a67ff65-e9b9-45c0-87f6-53b5fb179118","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":546,"endLine":569,"content":"          int offset = 0;\n            while (true) {\n                boolean shouldContinue = false;\n                int limit = 200;\n                List<String> fields = new ArrayList<>();\n                fieldInfoList.stream().forEach(fieldInfo -> {\n                    if (DataType.DATETIME == fieldInfo.getDataType()) {\n                        if (!ntz_fields.isEmpty() && ntz_fields.contains(fieldInfo.getJsonPath()) ) {\n                            fields.add(\"CONVERT_TIMEZONE('\" + ntz_map.get(fieldInfo.getJsonPath()) + \"', 'UTC', \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\") AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                        } else {\n                            fields.add(\"CONVERT_TIMEZONE('UTC', \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\") AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                        }\n                    } else {\n                        fields.add(\"\\\"\" + fieldInfo.getJsonPath() + \"\\\" AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                    }\n                });\n\n               String query = \"Select \" + StringUtils.join(fields, \", \") + \" from \" + \"\\\"\" + this.db + \"\\\".\" + \"\\\"\" + this.schema + \"\\\".\" + \"\\\"\" + objectName + \"\\\"\" + filter + \" limit \" + limit + \" offset \" + offset;\n                LOGGER.info(\"Snowflake fallback select query {} \", query);\n\n                resultSet = stat.executeQuery(query);\n                while (resultSet.next()) {\n                    shouldContinue = true;\n                    int columnCount ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e547fa1-0087-454e-9079-63317df49f43","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescription.java","startLine":44,"endLine":106,"content":"= name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n    }\n\n    public GainsightHubspotFieldDescription(String name, String label, String canonicalName, String type, String fieldType, String referencedObjectType) {\n        this.name = name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n        this.referencedObjectType = referencedObjectType;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public String getFieldType() {\n        return fieldType;\n    }\n\n    public void setFieldType(String fieldType) {\n        this.fieldType = fieldType;\n    }\n\n    public boolean isHubspotDefined() {\n        return hubspotDefined;\n    }\n\n    public void setHubspotDefined(boolean hubspotDefined) {\n        this.hubspotDefined = hubspotDefined;\n    }\n\n    public String getReferencedObjectType() {\n        return referencedObjectType;\n    }\n\n    public void setReferencedObjectType(String referencedObjectType) {\n        this.referencedObjectType = referencedObjectType;\n    }","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a4323609-d7df-4d80-aab8-3240cb7dac77","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/IPaasConstants.java","startLine":65,"endLine":86,"content":"tring REAL_TIME_SUPPORTED = \"realtimeSupported\";\n    public static final String PATH = \"path\";\n    public static final String MASK = \"mask\";\n    public static final String VERSION = \"version\";\n    public static final String USE_LATEST = \"useLatest\";\n    public static final String IPAAS_CONNECTORS_ENABLED = \"IPAAS_CONNECTORS_ENABLED\";\n    public static final String SFDC_CDC_ENABLED_FEATURE = \"SFDC_CDC_ENABLED\";\n    public static final String IPAAS_CONNECTORS_ENABLED_TRUE_VARIATION = \"Enable Ipaas Variation\";\n    public static final String IPAAS_CONNECTORS_ENABLED_FALSE_VARIATION = \"Disable Ipaas Variation\";\n    public static final String CRM_CONNECTIONS = \"crmConnections\";\n    public static final String ALL_CONNECTIONS = \"allConnections\";\n    public static final String IS_ORDER_BY_FIELD = \"isOrderByField\";\n    public static final String ORDER_BY = \"orderBy\";\n    public static final String IMPORT_LOOKUP_DETAIL_ID = \"importLookUpDetailId\";\n    public static final String ENV_AGN_ENABLED = \"enable.environment.agnosticism\";\n    public static final String INTEGRATION_ENV = \"integration\";\n    public static final String INTEGRATION_GS_APP_URL = \"integration.gs.app.url\";\n    public static final String INTEGRATION_B2B_SECRET = \"integration.b2b.secret\";\n    public static final String IS_SECRET_KEY = \"isSecretKey\";\n    public static final String IS_VIEWABLE = \"isViewable\";\n    public static final String STORE_IN_DB = \"storeInDb\";\n    public static final String IS_CLIENT_INFO_STORED_IN_PRO","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"057520a7-3956-422f-b4b1-836738eb47f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/GeneratedMetadataCache.java","startLine":1,"endLine":35,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_generated_metadata_cache\")\n@CompoundIndexes({@CompoundIndex(\n        name = \"tid_cid_oname_index\",\n        def = \"{'tenantId' : 1, 'connectionId' : 1, 'objectName' : 1}\",\n        unique = true\n)})\n@AllArgsConstructor\n@Getter\n@Setter\npublic class GeneratedMetadataCache extends MongoBaseBean implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String tenantId;\n    private String connectionId;\n    private String objectName;\n    private List<GSFieldDefinition> generatedFields;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c1a981ed-2d21-4894-8e56-63a23da83ec2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":646,"endLine":676,"content":"w FileWriter(file))) {\n        writer.writeNext(header);\n        writer.writeAll(batchData);\n      }\n    } catch (IOException e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while preparing {} CSV file: {}...\", fileName, e.getMessage(), e);\n    }\n    return file;\n  }\n\n  private void writeToSuccessFile(File successFile, String[] header, List<String[]> successRecords, int batchCount) {\n    try (CSVWriter csvWriter = new CSVWriter(new FileWriter(successFile, true))) {\n      if(null != header)\n        csvWriter.writeNext(header);\n      successRecords.forEach(csvWriter::writeNext);\n    } catch (IOException e) {\n     log.error(\"[SAP DATASPHERE] Error occurred while writing batch {} success records to file: {}\", batchCount, e.getMessage());\n    }\n  }\n\n  private void writeToFile(List<File> fileList, AtomicInteger filePosition, List<Map<String, Object>> recordValues,\n                           String fileDir, String jobId, double maxFileSizeInMB) throws IOException {\n    File latestFile = fileList.get(filePosition.get());\n    if ((latestFile.length() == 0) || (fileSizeInMBs(latestFile) < maxFileSizeInMB)) {\n      appendToJsonFileToSendToConsumers(recordValues, latestFile);\n    } else {\n      filePosition.incrementAndGet();\n      log.info(\"[SAP DATASPHERE] Creating new file at position: {}\", filePosition.get());\n      File nextFile = new File(fileDir + jobId + UUID.randomUUID() + JSON_EXTENSION);\n      appendToJsonFileToSendToConsumers(recordValues, nextFile);\n      fileList.add(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fcaa11a6-a96c-49ff-a106-defa28d54083","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/IPaasConstants.java","startLine":25,"endLine":49,"content":"final String AUTHORIZATION = \"AUTHORIZATION\";\n\n    //https://staging.cloud-elements.com/elements/api-v2/objects\n    public static final String IPAAS_PROPERTIES = \"IPAAS_PROPERTIES\";\n    public static final String IPAAS_INSTANCE_ID = \"IPAAS_INSTANCE_ID\";\n    public static final String IPAAS_INSTANCE_TOKEN = \"IPAAS_INSTANCE_TOKEN\";\n    public static final String IPAAS_ORG_TOKEN = \"IPAAS_ORG_TOKEN\";\n    public static final String IPAAS_USER_TOKEN = \"IPAAS_USER_TOKEN\";\n    public static final String WHERE = \"where\";\n    public static final String INCLUDE_DELETED = \"includeDeleted\";\n    public static final String PAGE_SIZE = \"pageSize\";\n    public static final String FIELDS = \"fields\";\n    public static final String NEXT_PAGE = \"nextPage\";\n    public static final String ELEMENTS_TOTAL_COUNT = \"elements-total-count\";\n    public static final String ELEMENTS_NEXT_PAGE_TOKEN = \"elements-next-page-token\";\n    public static final String ELEMENTS_RETURNED_COUNT = \"elements-returned-count\";\n\n    public static final String SUB_TASK_TYPE = \"subTaskType\";\n    public static final String TEAM_NAME = \"teamName\";\n    public static final String TASK_NAME = \"taskName\";\n    public static final String DOWNLOAD_SOURCE_FILE = \"downloadSourceFile\";\n    public static final String PARENTS = \"parents\";\n    public static final String IPAAS_EXTRACT_TASK_DETAILS = \"ipaasExtractDetails\";\n    public static final String EXTERNAL_OBJECT_NAME = \"EXTERNAL_OBJECT_NAME\";\n    public static final String WORKFLOW_DETAI","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4a5034ce-afe0-4321-a281-47787769dff0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":32,"endLine":67,"content":"tChannelFactory gainsightHubspotChannelFactory;\n    private GainsightHubspotFetchService gainsightHubspotFetchService;\n\n    private static final int HUB_ID = 6042278;\n    private static final String  TIME_ZONE = \"Asia/Calcutta\";\n    private static final String  CURRENCY = \"INR\";\n    private static final int  UTC_OFFSET_IN_MILLIS = 19800000;\n    private static final String  UTC_OFFSET = \"+05:30\";\n\n    @BeforeEach\n    void init(){\n        this.gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n        this.gainsightHubspotFetchService = new GainsightHubspotFetchServiceImpl();\n    }\n\n    @AfterEach\n    public void tearDown(){\n        this.gainsightHubspotChannelFactory = null;\n        this.gainsightHubspotFetchService = null;\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Authenticate Connection\")\n    @Order(1)\n    void authenticateCredentials(){\n        Assertions.assertTrue(gainsightHubspotFetchService.authenticateCredentials(\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\"),\"Invalid credentials, cannot connect to Hubspot\");\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"COMPANY\",\"CONTACT\"})\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"List Entity Properties\")\n    @Order(2)\n    void getEntityProperties(String entityName) throws Exception {\n        InputStream propertiesStream = gainsightHubspotFetchService.getEntityProperties(entityName,\"8481642d-66d1-4a8d-8b7","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5674e49f-7668-422a-9e4a-26a3c5c0ba55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":111,"endLine":140,"content":"\")) {\n                                pickListLabel += (\";\\\"\" + option.getPicklistLabel() + \"\\\"\");\n                            } else {\n                                pickListLabel += (\";\" + option.getPicklistLabel() + \"\");\n                            }\n                            break;\n                        }\n                    }\n                    if (!isPicklistPresent) pickListLabel += (\";\\\"\" + value + \"\\\"\");\n                }\n                pickListLabel = pickListLabel.substring(1);\n                if (picklistFieldValue.startsWith(\"[\")) {\n                    pickListLabel = \"[\" + pickListLabel + \"]\";\n                }\n            } else {\n                picklistFieldValue = picklistFieldValue.replaceAll(\"\\\"\", \"\");\n                LOGGER.info(\"Resolving single picklist value for field {} with value {}\", fieldName, picklistFieldValue);\n                for (PicklistOption option : picklistOptions) {\n                    if (picklistFieldValue.equals(option.getPicklistValue())) {\n                        pickListLabel = option.getPicklistLabel();\n                        break;\n                    }\n                }\n            }\n            if (StringUtils.isNotEmpty(pickListLabel)) {\n                if (picklistObj instanceof ObjectNode) {\n                    ((ObjectNode) picklistObj).put(picklistField, pickListLabel);\n                    LOGGER.info(\"Resolved picklist value for field {} with value {}\", fieldName, pickListLabel);\n                } else {\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7679079-3502-4d0d-a18e-cc3502e46f55","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotSchema.java","startLine":1,"endLine":52,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\n\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(\n        ignoreUnknown = true\n)\n@org.codehaus.jackson.annotate.JsonIgnoreProperties(\n        ignoreUnknown = true\n)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonSerialize(\n        include = JsonSerialize.Inclusion.NON_NULL\n)\npublic class GainsightHubspotSchema {\n\n    private Map<String,String> labels;\n    private List requiredProperties;\n    private List<String> searchableProperties;\n    private String primaryDisplayProperty;\n    private List<String> secondaryDisplayProperties;\n    private String fullyQualifiedName;\n    private String objectTypeId;\n    private List<GainsightHubspotFieldDescriptionV3> properties;\n    private List<Map<String,Object>> associations;\n\n    public Map<String, String> getLabels() {\n        return labels;\n    }\n\n    public void setLabels(Map<String, String> labels) {\n        this.labels = labels;\n    }\n\n    public List getRequiredProperties() {\n        return requiredProperties;\n    }\n\n    public void setRequiredProperties(List requiredProperties) {\n        this.requiredProperties = requiredProperties;\n    }\n\n    public List<String> getSearchableProperties() {\n        return searchableProperties;\n    }\n\n    public void setSearchableProperties(List<String>","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"473fe04b-498c-44d7-9d5c-7e3cbf59fa11","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelService.java","startLine":1,"endLine":14,"content":"package com.gainsight.integration.connector.aha.service;\n\nimport java.io.InputStream;\nimport java.util.List;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\npublic interface GainsightAhaChannelService {\n\n    InputStream getPaginatedEntityDataLatest(String subDomain, String entityName, List<String> projections, int pageSize, int pageNumber, String updatedSince) throws Exception;\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"096951e5-050a-4506-8e7d-18961b4c7013","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":494,"endLine":516,"content":"GENERATE_OOB_JOBS = \"GENERATE_OOB_JOBS\";\n        public static final String PNP_CONNECTION_ID = \"PNP_CONNECTION_ID\";\n        public static final String FILTER = \"FILTER\";\n        public static final String BASE_OBJECT = \"BASE_OBJECT\";\n        public static final String SYNC_DELETED_RECORDS = \"SYNC_DELETED_RECORDS\";\n        public static final String BASE_OBJECT_PLURAL_NAME = \"BASE_OBJECT_PLURAL_NAME\";\n        public static final String DYNAMICS_ORG_URI = \"DynamicsOrgUri\";\n        public static final String DYNAMICS_TENANT_ID = \"DynamicsTenantId\";\n        public static final String DYNAMICS_ORG_ID = \"DynamicsOrgId\";\n        public static final String MDA_AREA = \"MdaArea\";\n        public static final String DYNAMICS = \"Dynamics\";\n        public static final String CONNECTION_NAME = \"connectionName\";\n        public static final String SELF_LOOK_UP_IDS = \"SELF_LOOK_UP_IDS\";\n        public static final String HEADER_TENANT_ID = \"tenantId\";\n        public static final String EXECUTION_DAY = \"EXECUTION_DAY\";\n        public static final String PICKLIST = \"PickList__c\";\n        public static final String ACTIVE__C = \"Active__c\";\n        public static final String CATEGORY__C = \"Category__c\";\n        public static final String SHORT_NAME__C = \"ShortName__c\";\n        public static final String ATTRIBUTE_1__C = \"Attribute1__c\";\n        public static final String DISPLAY_ORDER__C = \"DisplayOrder__c\";\n        public static final String SYSTEM_DEFINED__C = \"SystemDefined__c\";\n        public","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82cc35a1-72ec-4e1c-949f-29df06bab6d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":103,"endLine":123,"content":"p<String, Object> accountMap;\n\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                        accessToken = (String) accountMap.get(\"access_token\");\n                        Objects.requireNonNull(refreshToken, AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                        break;\n                    } else {\n                        throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage());\n                    }\n                } else {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), (String) accountMap.get(\"message\")));\n                    } else {\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83fa1131-d5e8-48b7-9dcb-ce6432c1a433","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":579,"endLine":612,"content":".AUTHORIZATION_FAILED, HttpStatus.SC_BAD_REQUEST);\n        }\n    }\n\n\n    private Map<String, Object> createQueryParamsForBQ(int pageSize, String nextPage) throws\n            Exception {\n        Map<String, Object> queryParams = Maps.newHashMap();\n        try {\n            LOGGER.info(\"data fetch request page size for BQ data: {}\", pageSize);\n            if (pageSize > 0) {\n                queryParams.put(PAGE_SIZE, pageSize);\n            }\n            if (StringUtils.isNotEmpty(nextPage)) {\n                queryParams.put(NEXT_PAGE, nextPage);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to createQuery params for BQ\", e);\n            throw new Exception(\"Error occurred while trying to createQuery params for BQ  \", e);\n        }\n        return queryParams;\n    }\n\n\n    public static String getAccessTokenForServiceAccount(String serviceAccountJson) {\n        try {\n            GainsightPrecondition.assertNotNull(serviceAccountJson, CoreErrorCode.INVALID_REQUEST);\n            GoogleCredentials credentials = ServiceAccountCredentials.fromStream(new ByteArrayInputStream(serviceAccountJson.getBytes(StandardCharsets.UTF_8)))\n                    .createScoped(ImmutableList.of(SCOPE));\n            String accessToken = credentials.refreshAccessToken().getTokenValue();\n            return accessToken;\n        } catch (Exception e) {\n            LOGGER.error(\"Invalid service account json {} \", e.getMessage());\n            throw new Syst","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1a01df6-a83b-4e25-ae31-ad87345e72a7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/HubspotSearchRequest.java","startLine":1,"endLine":56,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotSearchRequest {\n    private List<HubspotFilterGroups> filterGroups;\n    private List<String> properties;\n    private int limit;\n    private String after;\n\n    public HubspotSearchRequest() {\n    }\n\n    public HubspotSearchRequest(List<HubspotFilterGroups> filterGroups, List<String> properties, int limit, String after) {\n        this.filterGroups = filterGroups;\n        this.properties = properties;\n        this.limit = limit;\n        this.after = after;\n    }\n\n    public String getAfter() {\n        return after;\n    }\n\n    public void setAfter(String after) {\n        this.after = after;\n    }\n\n    public List<HubspotFilterGroups> getFilterGroups() {\n        return filterGroups;\n    }\n\n    public void setFilterGroups(List<HubspotFilterGroups> filterGroups) {\n        this.filterGroups = filterGroups;\n    }\n\n    public List<String> getProperties() {\n        return properties;\n    }\n\n    public void setProperties(List<String> properties) {\n        this.properties = properties;\n    }\n\n    public int getLimit() {\n        return limit;\n    }\n\n    public void setLimit(int limit) {\n        this.limit = limit;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c6274077-d20d-4071-a388-c8bb7da43566","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":29,"endLine":58,"content":"ache.http.client.methods.HttpPost;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.util.EntityUtils;\nimport org.codehaus.jackson.type.TypeReference;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\nimport static com.gainsight.integration.utils.common.UCConstants.HTTP_SUCCESS;\n\npublic class DynamicsGainsightUtils {\n    private static final Logger LOGGER = LoggerFactory.getLogger(DynamicsGainsightUtils.class);\n\n    public static final String NULL = \"null\";\n    private static final ObjectMapper mapper = new ObjectMapper();\n    private static final String DYNAMICS_SINGLE_TENANT_OAUTH_URL = \"https://login.microsoftonline.com/%1$s/oauth2/token\";\n    private static final String KEY = DeploymentProperties.getDeploymentProperties().getValue(\"uc.gs.config.key\", \"worker.dynamics.masterLookUpConfig\");\n    private static final long REFRESH_TIME = DeploymentProperties.getDeploymentProperties().getLongValue(\"uc.gs.config.refreshTime\", 900L);\n    private static final Cache<String, JSONObject> MASTER_LOOKUP_CONFIGURATION = CacheBuilder.newBuilder()\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba1ef9b8-8ba4-4207-8012-a996d0520241","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":533,"endLine":569,"content":"\n            response = this.httpclient.execute(httpGet);\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse searchData(String resourceName, HubspotSearchRequest hubspotSearchRequest) throws Exception {\n        HttpResponse response = null;\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + SEARCH_END_POINT_V3 +  resourceName + \"/\" + \"search\";\n\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpPost.setURI(uriBuilder.build());\n            StringEntity stringEntity = new StringEntity(new ObjectMapper().writeValueAsString(hubspotSearchRequest), ContentType.APPLICATION_JSON);\n            this.httpPost.setEntity(stringEntity);\n            InputStream inputStream = null;\n            try {\n                response = this.httpclient.execute(httpPost);\n\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] error in searching data \", exception);\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] error in searching data \", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"13bf9bcc-88b1-420f-b147-534a9cacefc5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":230,"endLine":255,"content":"ewArrayList();\n                    for (ClientEntity inlineEntity: clientEntitySet.getEntities()) {\n                        Map<String, Object> attribute = Maps.newHashMap();\n                        //Don't use toMap, avoid NPE\n                        for (ClientProperty clientProperty : inlineEntity.getProperties()) {\n                            attribute.put(clientProperty.getName(), extractValue(clientProperty.getValue()));\n                        }\n                        if (resolveOptionSets && optionSetAttributesMetadata.contains(inlineEntity.getTypeName().getName())) {\n                            ClientLink inlineClientLink = inlineEntity.getNavigationLink(\"OptionSet\");\n                            attribute.put(\"OptionSet\", getOptionSet(client, inlineClientLink.getLink()));\n                        }\n                        attributes.add(attribute);\n                    }\n                    object.put(\"Attributes\", attributes);\n                }\n            }\n            objects.add(object);\n        }\n        return objects;\n    }\n\n    private OptionSet getOptionSet(ODataClient client, URI link) {\n        URIBuilder builder = client.newURIBuilder(MSDynamicsContext.getResourceUri() + StringUtils.replace(link.getPath(), \"/OptionSet\", \"?$expand=OptionSet\"));\n        URI uri = builder.build();\n        ODataEntityRequest<ClientEntity> clientEntityODataEntityRequest = client.getRetrieveRequestFactory().getEntityRequest(uri);\n        ODataRetrieveResponse<ClientEntity> entit","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e146d7d1-8ab8-4239-a69d-3ca791952688","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.connector.ecosystem.service;\n\n\nimport com.gainsight.integration.bean.enums.AuthenticationType;\nimport com.gainsight.integration.connector.ecosystem.bean.GainsightEcosystemEntityEnum;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n\npublic class GainsightEcosystemChannelServiceImpl implements GainsightEcosystemChannelService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightEcosystemChannelServiceImpl.class);\n\n    AuthenticationType authenticationType;\n    private String apiKey;\n\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n\n\n    protected GainsightEcosystemChannelServiceImpl(String apiKey) {\n        this.apiKey = apiKey;\n        this.authenticationType = AuthenticationType.API_KEY;\n        validat","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18f7552f-6d37-4fbc-b0e4-46ecc266a2ba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":639,"endLine":662,"content":"                       result.put(ERROR_MESSAGE, errCode);\n                        } else {\n                            HttpEntity entity = response.getEntity();\n                            if (entity != null) {\n                                InputStream inputStream = entity.getContent();\n                                String jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                                result.put(STATUS, GSIntegration.FAILED);\n                                result.put(ERROR_MESSAGE, jsonResponse);\n                            }\n                        }\n                    } catch (IOException e) {\n                        LOGGER.error(\"Exception occurred while loading record to: {}\", targetObject, e);\n                        result.put(STATUS, GSIntegration.FAILED);\n                        result.put(ERROR_MESSAGE, e.getMessage());\n                    }\n                    break;\n                case UPSERT:\n                    HttpPatch httpPatch = new HttpPatch(url + OPEN_ROUND_BRACKETS + identifierData + CLOSE_ROUND_BRACKETS);\n                    httpPatch.setHeader(CONTENT_TYPE, MediaType.APPLICATION_JSON);\n                    httpPatch.setHeader(AUTHORIZATION, BEARER + accessToken);\n\n                    requestPayload = OBJECT_MAPPER.writeValueAsString(requestMap);\n                    httpPatch.setEntity(new StringEntity(requestPayload, ContentType.APPLICATION_JSON));\n                    try (CloseableHttpResponse respons","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c369ea16-0e0f-403c-9fb1-0cb0372175f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileSplitter.java","startLine":40,"endLine":68,"content":"eSizeInMB, File chunksDir, boolean appendHeaderToEachChunkFile) {\n        this.bigFile = bigFile;\n        this.recordSeparatorPolicy = recordSeparatorPolicy;\n        this.encoding = encoding;\n        this.chunkLinesCount = chunkLinesCount;\n        this.maxChunkedFileSizeInMB = maxChunkedFileSizeInMB;\n        this.chunksDir = chunksDir;\n        this.appendHeaderToEachChunkFile = appendHeaderToEachChunkFile;\n    }\n\n    public List<File> split() throws Exception {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        LOGGER.info(\"Trying to split the file {} into partitions of {} lines into directory {}\", bigFile.getAbsolutePath(), chunkLinesCount, chunksDir.getAbsolutePath());\n        Future<List<File>> future = executor.submit(() -> {\n            List<File> splitFiles = new ArrayList<>();\n            try (CSVLineIterator csvLineIterator = new CSVLineIterator(new InputStreamReader(new FileInputStream(bigFile), Charsets.toCharset(encoding)), recordSeparatorPolicy)) {\n                String headerLine = null;\n                if (appendHeaderToEachChunkFile) {\n                    headerLine = csvLineIterator.next();\n                }\n                while (!Thread.currentThread().isInterrupted() && csvLineIterator.hasNext()) {\n                    splitFiles.add(chunk(csvLineIterator, headerLine));\n                }\n            }\n            return splitFiles;\n        });\n\n        List<File> splitFiles;\n        long timeoutMins = evaluateTimeoutInMins(bigFi","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7df8ac08-c047-4c47-8ce8-ebf4d9373d3c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":54,"endLine":73,"content":"egerValue(\"uc.gs.dbfs.max.retry.count\", 2);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final Cache<String, Object> ACCESS_TOKEN_CACHE = CacheBuilder.newBuilder()\n            .maximumSize(10000)\n            .expireAfterWrite(50, TimeUnit.MINUTES)\n            .build();\n\n    public static String uploadFileToDatabricksFileSystem(PNPConnectionsInfo pnpConnectionsInfo, File file) {\n        Map<String, String> headers = new HashMap<>();\n        int retryCount = 0;\n        String fileUploadPath = String.format(FS_PATH_TO_UPLOAD_FILE, pnpConnectionsInfo.getConnectionId().replaceAll(UCConstants.FILLER, UCConstants.EMPTY_STRING),\n                UUID.randomUUID().toString().substring(0, 5), file.getName());\n        String url = String.format(DBFS_URI_TO_UPLOAD_FILE, pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DATABASE_HOST));\n        if (AuthorizationType.OAUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n            String key = constructAccessTokenKey(pnpConnectionsInfo);\n            if (Objects.isNull(ACCESS_TOKEN_CACHE.getIfPresent(key))) {\n                LOGGER.info(\"Generating the access token for the connection: {}\", pnpConnectionsInfo.getConnectionId());\n                String accessToken = generateAccessToken(pnpConnectionsInfo);\n                ACCESS_TOKEN_CACHE.put(key, accessToken);\n                LOGGER.info(\"Generation of access token for the connection: {} succeded\", pnpConnectionsInfo.getConnectio","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b630b213-d48f-47ac-9fd3-67d45558b7a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":286,"endLine":310,"content":"  LOGGER.info(\"[HUBSPOT] URI being hit : {}\", this.httpGet.getURI());\n        HttpResponse response = null;\n\n        for (int retryCount = 0; retryCount < ALLOWED_RETRIES; retryCount += 1) {\n            try {\n                response = this.httpclient.execute(httpGet);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    return response.getEntity().getContent();\n                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"[HUBSPOT] Access token expired, trying to regenerate...\");\n                    throw new Exception(AdapterErrorMessages.HUBSPOT_ACCESS_TOKEN_EXPIRED.getTranslatedMessage());\n                }\n            } catch (IOException ex) {\n                LOGGER.error(\"[HUBSPOT] IOException occurred while connecting to source with retry count : {} \", retryCount, ex);\n            }\n\n            //avoid sleep at last retry\n            if (retryCount < ALLOWED_RETRIES - 1) {\n                if (null != response) {\n                    LOGGER.info(\"[HUBSPOT] Sleeping for 15 secs as the api call to source failed for retry count : {} due to : {}, code :{}\", retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                } else {\n                    LOGGER.info(\"[HUBSPOT] Sleeping for 15 secs as the api call to source failed for retry count : {}\", retryCount);\n                }\n                Thread.sleep((15 * 1000));\n            ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fe3b494-ddfa-487a-8588-5198481ea003","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionsInfo.java","startLine":216,"endLine":260,"content":"    return crmId;\n  }\n\n  public void setCrmId(String crmId) {\n    this.crmId = crmId;\n  }\n\n  public boolean isCdcEnabled() {\n    return cdcEnabled;\n  }\n\n  public void setCdcEnabled(boolean cdcEnabled) {\n    this.cdcEnabled = cdcEnabled;\n  }\n\n  public ResolutionProperties getResolutionProperties() {\n    return resolutionProperties;\n  }\n\n  public void setResolutionProperties(ResolutionProperties resolutionProperties) {\n    this.resolutionProperties = resolutionProperties;\n  }\n\n  public String getConsumer(){\n    return consumer;\n  }\n  public void setConsumer(String consumer){\n    this.consumer=consumer;\n  }\n\n  public List<BeanPropertyTracker> getModifiedPropertiesList(PNPConnectionsInfo pnpConnectionsInfoFromDB){//TODO change implementation to capture only connection name & timezone\n    List<BeanPropertyTracker> beanPropertyTrackerList = new ArrayList();\n    if(!this.connectionName.trim().equals(pnpConnectionsInfoFromDB.getConnectionName().trim())){\n      beanPropertyTrackerList.add(new BeanPropertyTracker(\"connectionName\",pnpConnectionsInfoFromDB.getConnectionName(),this.getConnectionName().trim()));\n    }\n    if (pnpConnectionsInfoFromDB.getConnectionType() == ConnectorType.MIXPANEL) {\n      if (!this.timeZone.equals(pnpConnectionsInfoFromDB.getTimeZone())) {\n        beanPropertyTrackerList.add(new BeanPropertyTracker(\"timeZone\", pnpConnectionsInfoFromDB.getTimeZone(), this.getTimeZone()));\n      }\n    }\n    return beanPropertyTrackerList;\n  }\n\n    @Override\n    public String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"745e3654-81e9-46bb-9f8f-6d2f66dab8ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/bean/UCTenantQ.java","startLine":1,"endLine":26,"content":"package com.gainsight.integration.rts.bean;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.Date;\n\n@Getter\n@Setter\n@ToString(callSuper = true)\n@EqualsAndHashCode(callSuper = true)\npublic class UCTenantQ extends BaseGSEntity {\n    /**\n     * tenant id is primary key for uc_tenant_q table\n     */\n    private String tenantId;\n    private String topicName;\n    private int priority;\n    private Date processAfter;\n    private String threadId;\n    private String callbackStatusId;\n    private String syncDirection;\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33dd15b9-b069-44b2-9157-0451d2c7451f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":531,"endLine":550,"content":"ription\";\n        public static final String GAINSIGHT_PX_SCROLL_ID = \"scrollId\";\n        public static final String GAINSIGHT_PX_TOTAL_HITS = \"totalHits\";\n        public static final String GAINSIGHT_PX_SUBSCRIPTION_ID = \"GAINSIGHT_PX_SUBSCRIPTION_ID\";\n        public static final String IS_LEGACY_PX = \"IS_LEGACY_PX\";\n        public static final String GAINSIGHT_PX_SUBSCRIPTION_TIME_ZONE = \"GAINSIGHT_PX_SUBSCRIPTION_TIME_ZONE\";\n        public static final String ACCOUNTS = \"accounts\";\n        public static final String USERS = \"users\";\n        public static final String CUSTOM = \"CUSTOM\";\n        public static final String CUSTOM_ATTRIBUTES = \"customAttributes\";\n        public static final String SALESFORCE_CONNECTOR_ENABLED_FEATURE_FLAG = \"SALESFORCE_CONNECTOR_ENABLED\";\n        public static final String SALESFORCE_CONNECTOR_ENABLED_TRUE_VARIATION_NAME = \"True Variation\";\n        public static final String SALESFORCE_CONNECTOR_ENABLED_FALSE_VARIATION_NAME = \"False Variation\";\n        public static final String CONNECT_WORKER_LOCK_ID = \"connectWorkerLockId\";\n        public static final String PRE_S3_COMPLETED_MILLIS = \"preS3CompletedInMillis\";\n        public static final String POST_S3_COMPLETED_MILLIS = \"postS3CompletedInMillis\";\n        public static final String PRE_S3_INSTANCE_IP = \"preS3InstanceIP\";\n        public static final String POST_S3_INSTANCE_IP = \"postS3InstanceIP\";\n        public static final String DATA_MODIFICATION_TYPE = \"DATA_MODIFICATION_TYPE\";\n        pub","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84338307-fcac-41a1-9d2d-1c7ff43ad21c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":474,"endLine":502,"content":"localDate = LocalDate.parse(object.toString());\n                                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(DateTimeFormatter.ofPattern(fieldInfo.getDateTimeProperties().getFormat())));\n                                }\n                            }\n                        } else if (object != JSONObject.NULL) {\n                            map.put(resultSet.getMetaData().getColumnLabel(i + 1), object);\n                        }\n                    }\n                    recordValues.add(map);\n                    if (recordValues.size() >= (1000)) {\n                        createJsonFileToSendToConsumers(recordValues, extractFile);\n                        recordValues.clear();\n                    }\n                }\n                if (!shouldContinue) break;\n                offset = offset + limit;\n            }\n            if (!recordValues.isEmpty()) {\n                createJsonFileToSendToConsumers(recordValues, extractFile);\n            }else if(!extractFile.exists()){\n                LOGGER.info(\"Creating an emptyFile as the record Value is empty\");\n                extractFile.createNewFile();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"error occured while snowflake fetch using pagination {}\",e);\n            throw new RuntimeException(e);\n        } catch (Exception e) {\n            LOGGER.error(\"error occured while snowflake fetch using pagination {}\",e);\n            throw new RuntimeException(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63462500-0dae-4331-a7fe-43d103b5bf31","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":33,"endLine":71,"content":"perties().getValue(\"uc.gs.connect.productboard.url\", \"https://api.productboard.com/\");\n    private static final String X_VERSION = \"X-Version\";\n    private static final String LINKS = \"links\";\n    private static final String NEXT = \"next\";\n    private static final String DATA = \"data\";\n    private static final int TIMEOUT = 120;\n\n    private String accessToken;\n\n    public ProductBoardChannelServiceImpl(String accessToken) {\n        this.accessToken = accessToken;\n    }\n\n    @Override\n    public boolean authenticateAccessToken() {\n        String url = PRODUCTBOARD_BASE_ENDPOINT_URI + ProductboardObjectsEnum.getObjectName(ProductboardObjectsEnum.FEATURES);\n        return authenticate(url, this.accessToken);\n    }\n\n\n    @Override\n    public Map<String, String> getOtherHeaders() {\n        Map<String, String> headers = new HashMap<>();\n        headers.put(X_VERSION, \"1\");\n        return headers;\n    }\n\n    @Override\n    public List<JsonNode> pullNotesData(List<String> noteIds) {\n        if (noteIds.isEmpty())\n            return new ArrayList<>();\n        HttpResponse response = null;\n        List<JsonNode> data = null;\n        int retryCount = 0;\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        try (CloseableHttpClient httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba72cd22-b434-4c08-a95f-7b021563804a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/OptionSet.java","startLine":65,"endLine":76,"content":"\n    public String toString() {\n        return \"OptionSet{\" +\n                \"id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", displayName='\" + displayName + '\\'' +\n                \", isGlobal=\" + isGlobal +\n                \", type=\" + type +\n                \", options=\" + options +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3cd59907-d8b9-4d05-9e22-091812f18b75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":698,"endLine":714,"content":"iry && expiry < System.currentTimeMillis()) {\n            LOGGER.info(\"SNOWFLAKE :: Access Token has expired. Hence, refreshing the access token\");\n            try {\n            Map accountMap = GainsightSnowflakeChannelFactory.getAccessToken(host, clientId, clientSecret, refreshToken);\n            accessToken = (String) accountMap.get(ACCESS_TOKEN_KEYWORD);\n            expiry = System.currentTimeMillis() + Long.valueOf(accountMap.get(EXPIRES_IN_KEYWORD).toString()) * 1000;\n            Properties.put(ACCESS_TOKEN, accessToken);\n            Properties.put(EXPIRY, expiry);\n            } catch (Exception e) {\n                LOGGER.error(\"SNOWFLAKE :: Error while refreshing the access token\", e);\n                throw new RuntimeException(e);\n            }\n        }\n        return accessToken;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20b13948-946f-4e61-b914-0586a63a9408","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ObjectsCache.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_objects_cache\")\n@Getter\n@Setter\npublic class ObjectsCache extends MongoBaseBean implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String tenantId;\n    private String connectionId;\n    private List<ObjectDefinition> objects;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f79628cf-ec82-4d65-809b-d23458c00bc4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpResponse.java","startLine":1,"endLine":65,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.*;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HttpResponse {\n    private int responseCode;\n    private String respMsg;\n    private int errorCode;\n    private String errMsg;\n    private InputStream responseIs;\n    private InputStream errIs;\n    private long contentLength;\n    private Map<String, List<String>> responseHeaders;\n\n\n    public int getResponseCode() {\n        return responseCode;\n    }\n\n    public void setResponseCode(int responseCode) {\n        this.responseCode = responseCode;\n    }\n\n    public String getRespMsg() {\n        return respMsg;\n    }\n\n    public void setRespMsg(String respMsg) {\n        this.respMsg = respMsg;\n    }\n\n    public int getErrorCode() {\n        return errorCode;\n    }\n\n    public void setErrorCode(int errorCode) {\n        this.errorCode = errorCode;\n        if (responseCode <= 0) {\n            this.responseCode = this.errorCode;\n        }\n    }\n\n    public String getErrMsg() {\n        return errMsg;\n    }\n\n    public void setErrMsg(String errMsg) {\n        this.errMsg = errMsg;\n    }\n\n    public InputStream getResponseIs() {\n        return responseIs;\n    }\n\n    public void setResponseIs(InputStream responseIs, boolean isResourceDownloadRequest) throws IOException {\n        ByteArrayOutputStream baos = getByteArrayOutputStrea","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9cf732f1-7e9e-4d57-a935-8bb4b8907b75","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/FileImportPage.java","startLine":1,"endLine":40,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport java.util.List;\n\npublic class FileImportPage {\n    private boolean hasHeader ;\n    private List<ColumnMapping> columnMappings;\n\n    public FileImportPage(boolean hasHeader, List<ColumnMapping> columnMappings) {\n        this.hasHeader = hasHeader;\n        this.columnMappings = columnMappings;\n    }\n\n    public FileImportPage() {\n    }\n\n    public boolean isHasHeader() {\n        return hasHeader;\n    }\n\n    public void setHasHeader(boolean hasHeader) {\n        this.hasHeader = hasHeader;\n    }\n\n    public List<ColumnMapping> getColumnMappings() {\n        return columnMappings;\n    }\n\n    public void setColumnMappings(List<ColumnMapping> columnMappings) {\n        this.columnMappings = columnMappings;\n    }\n\n    @Override\n    public String toString() {\n        return \"FileImportPage{\" +\n                \"hasHeader=\" + hasHeader +\n                \", columnMappings=\" + columnMappings +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ce752c3-b619-483d-8e58-57dec88c150b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImpl.java","startLine":36,"endLine":66,"content":"e.getName().toString()); // for now just returning name\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public Object getEntityMetadata(ODataClient oDataClient,String entityName) throws IOException { // for now just returning field names\n        String serviceUrl = \"https://sfdcbridged39b34cbf.us2.hana.ondemand.com/sfdc.svc/\"; // need to check how to pass this\n        List<String> result = Lists.newArrayList();\n        Edm edm = gainsightSAPChannelService.readEdm(serviceUrl,oDataClient);\n        for (EdmSchema schema : edm.getSchemas()) { //\n            for (EdmEntityType edmEntityType : schema.getEntityTypes() ) {\n                if(edmEntityType.getName().equals(entityName)){\n                    result.addAll(edmEntityType.getPropertyNames()); //((EdmEntityTypeImpl) edmEntityType).getProperties().get(\"AM_Program__c\").getType();\n                }\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public Object getEntityData(ODataClient oDataClient,String qualifiedEntityName) {\n        String serviceUrl = \"https://sfdcbridged39b34cbf.us2.hana.ondemand.com/sfdc.svc/\"; // need to check how to pass this\n        Object result=  gainsightSAPChannelService.readEntities(serviceUrl,qualifiedEntityName,oDataClient,1);\n        return result;\n    }\n\n    //scratch-pad\n    public void updateEntity(InputStream inputStream, ODataClient oDataClient, String baseUrl) throws IOException {\n        String updateData = \"\\\"{@odata.id\\\": \\\"Accounts('0010e","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7afb407-6119-4ef8-bcf8-f177637922aa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ExternalFilterValueConfig.java","startLine":1,"endLine":23,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class ExternalFilterValueConfig implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String externalFieldName;\n    private FilterOperator operator;\n    @JsonProperty(\"isPaginationFilter\")\n    private boolean isPaginationFilter;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7470d1ce-3cc1-41f9-9d59-0212d6d52c03","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthService.java","startLine":33,"endLine":46,"content":"Attributes, String objectName,\n                                                PNPConnectionsInfo pnpConnectionsInfo, FilterRule criteria,\n                                                Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam, String baseUrl, String SystemToken) throws Exception;\n\n    HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                PNPConnectionsInfo pnpConnectionsInfo, FilterRule criteria,\n                                                Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam, String baseUrl, String SystemToken, Map<String, Object> generatedRequestBody) throws Exception;\n\n    String getAuthorizationUrl(MetadataEngineConfig metadataEngineConfig, AuthorizationUrl authorizationUrl, Map<String, Object> flattenConnectionInfo, PNPConnectionsInfo pnpConnectionsInfo) throws Exception;\n\nObject constructValueFromConfig(MetadataEngineConfig metadataEngineConfig, AuthApiAttributes config, PNPConnectionsInfo pnpConnectionsInfo,\n                                            Map<String, Object> flattenConnectionInfo) throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54d5cf4e-3498-4f5a-80ed-139caf2ac55c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":495,"endLine":519,"content":"erride\n    public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException {\n        Statement stat = null;\n        ResultSet resultSet = null;\n        try {\n            DateTimeFormatter defaultSrcFormatter =\n                    new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\")\n                            .appendFraction(ChronoField.MILLI_OF_SECOND, 0, 9, true)\n                            .toFormatter();\n            List<Map<String, Object>> recordValues = Lists.newArrayList();\n            Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getJsonPath, field -> field));\n            LOGGER.info(\"Executing query : {} \", query);\n            stat = this.connection.createStatement();\n            resultSet = stat.executeQuery(query);\n\n            while (resultSet.next()) {\n                int columnCount = resultSet.getMetaData().getColumnCount();\n                Map<String, Object> map = new HashMap<>();\n\n                for (int i = 0; i < columnCount; ++i) {\n                    Object object = resultSet.getObject(i + 1);\n                    FieldInfo field = fieldNameToFieldInfoMap.get(resultSet.getMetaData().getColumnLabel(i + 1));\n                    if (object instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dda9d84a-3351-459e-b90a-9911edc9f374","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/CSVParserType.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums;\n\npublic enum CSVParserType {\n    CSVParser,\n    RFC4180Parser;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8fad19c0-e265-4824-9638-a856866a40c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":440,"endLine":469,"content":"), ex);\n            //throw new SQLException(\"Error occurred while trying to write data. \" + parseMessage(ex.getMessage()));\n            throw new SQLException(ex.getMessage());\n        } finally {\n            closeQuietly(this.connection, null, stat);\n        }\n    }\n\n    @Override\n    public Integer executeUpdate(String absoluteObjectPath, Map<String, Object> data, List<String> identifiers) throws SQLException {\n        String query;\n        StringBuilder setClause = new StringBuilder();\n        for (Map.Entry entry : data.entrySet()) {\n            setClause.append(BACKTICK + entry.getKey() + BACKTICK).append(EQUALS).append(QUESTION_MARK).append(COMMA);\n        }\n        setClause.deleteCharAt(setClause.length() - 1);\n\n        List<String> nullableIdentifiers = new ArrayList<>();\n        StringBuilder whereClause = new StringBuilder();\n        identifiers.stream().forEach(\n                identifier -> {\n                    if (Objects.isNull(data.get(identifier))) {\n                        nullableIdentifiers.add(identifier);\n                        whereClause.append(BACKTICK).append(identifier).append(BACKTICK).append(SPACE).append(OperatorType.IS_NULL.getDisplay()).append(SPACE).append(AND).append(SPACE);\n                    } else {\n                        whereClause.append(BACKTICK).append(identifier).append(BACKTICK).append(EQUALS).append(QUESTION_MARK).append(SPACE).append(AND).append(SPACE);\n                    }\n                }\n        );\n        identifiers.re","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae4913a4-f6eb-4e32-8b30-d690d102c60a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":396,"endLine":421,"content":"tySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                        lookUpFieldNames, getRecordsRequest.getFilterExpression(), absoluteUri, pageSize);\n            }\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n        } catch (Exception e) {\n            LOGGER.error(\"Unexpected error occured in get records, deleting temp file if any present\");\n            FileUtils.deleteQuietly(recordResponseGenerator.getCsvFile());\n            throw e;\n        }\n\n        if (null != clientEntitySet.getNext()) {\n            nextPageToken = clientEntitySet.getNext().toString();\n        } else {\n            nextPageToken = null;\n        }\n        return new RecordsResponse(recordResponseGenerator.getRecords(), recordResponseGenerator.getCsvFile(),\n                nextPageToken, recordResponseGenerator.getRecordsPulled());\n    }\n\n    @Override\n    public RecordsResponse getRecords(GetRecordsRequest getRecordsRequest, Map<String,String> masterLookUpConfiguration, boolean resolvePicklistOptions,\n                                      int maxRetryCount) {\n        LOGGER.info(\"tId: {}. Inside getRecords \", RequestContextProvider.getTenantId());\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        MSDynamicsObject msDynamicsObject = msDyna","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38992278-3df1-45cf-9b00-2df927fc638b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":241,"endLine":268,"content":"nelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.updateSingleDate(GSHubSpotEntityEnum.getInstance(entityName), data, id);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public HttpResponse uploadBulkData(String entityName, String clientId, String clientSecret, String refreshToken, String accessToken, HubspotBulkImportBean hubspotBulkImportBean, File file) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.uploadBulkData(hubspotBulkImportBean, file);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public HttpResponse pollImportFileData(String clientId, String clientSecret, String refreshToken, String accessToken, String id) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.pollImportFileData(id);\n        }catch (Exception e){\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"040a2a41-168e-4dbf-9284-1ab5739ab728","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionsInfo.java","startLine":253,"endLine":290,"content":"rackerList.add(new BeanPropertyTracker(\"timeZone\", pnpConnectionsInfoFromDB.getTimeZone(), this.getTimeZone()));\n      }\n    }\n    return beanPropertyTrackerList;\n  }\n\n    @Override\n    public String toString() {\n        return \"PNPConnectionsInfo{\" +\n                \"tenantId='\" + tenantId + '\\'' +\n                \", connectionId='\" + connectionId + '\\'' +\n                \", userName='\" + userName + '\\'' +\n                \", connectionName='\" + connectionName + '\\'' +\n                \", connectionType=\" + connectionType +\n                \",authorizationType=\" + authorizationType +\n                \", properties=\" + properties +\n                \", tokenDetail=\" + tokenDetail +\n                \", connectionDetail=\" + connectionDetail +\n                \", isUsed=\" + isUsed +\n                \", timeZone='\" + timeZone + '\\'' +\n                \", accessKeyHashed='\" + accessKeyHashed + '\\'' +\n                \", salesforceComponentName='\" + salesforceComponentName + '\\'' +\n                \", crmId='\" + crmId + '\\'' +\n                \", connectionStatus=\" + connectionStatus +\n                \", cdcEnabled=\" + cdcEnabled +\n                \", ipaasConnection=\" + ipaasConnection +\n                \", instanceDetail=\" + instanceDetail +\n                \", ssoInstance=\" + ssoInstance +\n                \", setupStatus=\" + setupStatus +\n                \", version=\" + version +\n                '}';\n    }\n\n    public boolean isIpaasConnection() {\n        return ipaasConnection;\n    }\n\n    public","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"442ba7c1-a223-4e3d-bb67-2dd995eaf195","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/bean/AhaAccessDetails.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.connector.aha.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AhaAccessDetails {\n\n    private static final  Long serialVersionUID = -1L;\n\n    private String subDomain;\n    private String apiKey;\n\n    public String getSubDomain() { return subDomain; }\n\n    public void setSubDomain(String subDomain) { this.subDomain = subDomain; }\n\n    public String getApiKey() { return apiKey; }\n\n    public void setApiKey(String apiKey) { this.apiKey = apiKey; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e09c386-4580-41ac-8cf1-c6339f790684","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":1,"endLine":26,"content":"package com.gainsight.integration.connector.dynamics.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.connector.dynamics.bean.factory.GSODataClientFactory;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.*;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\nimport com.gainsight.integration.connector.dynamics.service.error.DynamicsErrorCode;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.connector.dynamics.util.MSDynamicsObjectUtil;\nimport com.gainsight.integration.connector.dynamics.util.RecordResponseGenerator;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\ni","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"284716ea-3c7e-43f5-aab3-63c1250fa7b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":568,"endLine":600,"content":"}\n        insertDataToStageTable.clearBatch();\n      } finally {\n        insertDataToStageTable.close();\n        if(successFile.exists() && FileUtils.sizeOf(successFile) != 0) {\n          successFiles.add(successFile);\n        }\n      }\n      bulkLoadResult.put(UCConstants.TOTAL_RECORDS, getTotalRecordsCount(absolutePathToTempStageTable));\n    } catch (Exception e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while creating temp stage and loading data: {}...\", e.getMessage(), e);\n      throw new Exception(e.getMessage());\n    } finally {\n      if (null != errorMessages) {\n        bulkLoadResult.put(ERROR_MESSAGE, errorMessages);\n      }\n    }\n    return absolutePathToTempStageTable;\n  }\n\n  private PreparedStatement mergeDataToTargetTable(DuctDataOperation ductDataOperation, String absolutePathToTargetTable,String absolutePathToTempStageTable,\n                                                   List<ColumnMapping> columnMappings) throws SQLException {\n    List<String> ON_CLAUSE = new ArrayList<>();\n    List<String> SET_CLAUSE = new ArrayList<>();\n    List<String> INSERT_COLUMN_CLAUSE = new ArrayList<>();\n    List<String> INSERT_VALUE_CLAUSE = new ArrayList<>();\n    PreparedStatement mergeStatement = null;\n\n    for (ColumnMapping columnMapping : columnMappings) {\n      if (columnMapping.getIsKeyField()) {\n        String onClause = STAGE_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE;\n\n        onClause = TARGET_TABLE_ALIAS + PERIOD + DOUBL","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac6ea1de-a60c-42bb-8af8-7ebb691dd522","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelService.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.domain.ClientEntity;\nimport org.apache.olingo.client.api.domain.ClientEntitySet;\nimport org.apache.olingo.client.api.domain.ClientEntitySetIterator;\nimport org.apache.olingo.commons.api.edm.Edm;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * @author vipinsharma\n * @version 1.0\n *\n * This is the channel com.gainsight.integration.connector.dynamics.service to connect to SAP instance & call requires OData com.gainsight.integration.connector.dynamics.service\n *\n */\n\npublic interface GainsightSAPChannelService{\n\n    int deleteEntity(String serviceUri, String entityName, Object keyValue, ODataClient client);\n\n    int updateEntity(Edm edm, String serviceUri, String entityName, Object keyValue, ClientEntity ce, ODataClient client);\n\n    ClientEntity createEntity(Edm edm, String serviceUri, String entitySetName, ClientEntity ce, ODataClient client);\n\n    ClientEntity readEntityWithKey(String serviceUri, String entitySetName, Object keyValue, ODataClient client);\n\n    ClientEntity readEntityWithKeyExpand(String serviceUri, String entitySetName, Object keyValue, String expandRelationName, ODataClient client);\n\n    Edm readEdm(String serviceUrl, ODataClient client) throws IOException;\n\n    InputStream readEntitiesIntoStream(String serviceUri, String entitySetName, ODataClient client, int topValue);\n\n    InputStream readyEntityWithProject","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2257a296-78b0-4c6c-a12d-bc09b5128c92","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImpl.java","startLine":68,"endLine":81,"content":"(ODataClient oDataClient, String serviceUrl) throws IOException {\n        return gainsightSAPChannelService.readEdm(serviceUrl,oDataClient);\n    }\n\n    public InputStream pullEntityDataForGivenProjectionAndFilter(ODataClient client,String serviceUri, String entitySetName, String commaSepartedEntityProperties, String filterQuery){\n        return gainsightSAPChannelService.readyEntityWithProjectionAndFilter(client,serviceUri,entitySetName,commaSepartedEntityProperties,filterQuery);\n    }\n\n    //Scratch-Pad\n    /**  https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CONTACT_SRV;v=0002/\n     *  API_MKT_CAMPAIGN_SRV - Campaign data\n     *  ProductsPublic OData API (API_MKT_PRODUCT_SRV) for Products.\n     */\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"796eb802-c95b-4fb1-b92b-6dec1757dd73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":76,"endLine":98,"content":"rrorCodeExtraction(exceptionMessage);\n                Pattern pattern = Pattern.compile(OBJECT_PATTERN);\n                Matcher matcher = pattern.matcher(exceptionMessage);\n                if (matcher.find()) {\n                    String responseObjectName = matcher.group(1);\n                    String comments = String.format(\"The job cannot be completed as the %s object was either deleted from the source or user is not authorised to access the object.\" +\n                            \"Remove the object from connector mappings and re-run the job. ErrorCode : %s. Exception: %s\", responseObjectName, errorCode, exceptionMessage);\n                    LOGGER.error(\"Exception occurred while trying to create job in salesforce : {}\", comments);\n                    throw new Exception(comments);\n                } else {\n                    LOGGER.error(\"Exception occurred while trying to create job in salesforce : {}\", exceptionMessage);\n                    throw new Exception(exceptionMessage);\n                }\n            }\n        } catch (SystemException e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcJob(pnpConnectionsInfo, clientId, clientSecret, refreshToken, ++retryCount, sfdcApiVersion, objectName);\n            }\n            LOGGER.error(\"Exception occurred while trying to create job in salesforce : {}\", e);\n            throw e;\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcJob(p","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c788ad7e-036b-43e8-a636-9aa65ede4a7e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":204,"endLine":223,"content":"ame(), selectGroup,\n                lookUpFieldNames, getRecordsRequest.getFilterExpression(), recordResponseGenerator);\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired());\n\n            URI nextUri = clientEntitySet.getNext();\n            int currentRetryCount = 0;\n            while (nextUri != null && (currentRetryCount <= maxRetryCount)) {\n                try {\n                    ClientEntitySet clientEntitySetNext = readEntitiesClientEntitySet(client, nextUri);\n                    generateRecords(recordResponseGenerator, clientEntitySetNext, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                            getRecordsRequest.isPrimitiveDateTimeConversionRequired());\n                    nextUri = clientEntitySetNext.getNext();\n                } catch (HttpClientException httpClientException) {\n                    if (Objects.nonNull(MSDynamicsContext.getCtx()) && Objects.isNull(MSDynamicsContext.getCtx().getRefreshToken())\n                            && Objects.nonNull(MSDynamicsContext.getTenantId())) {\n                        LOGGER.info(\"Records fetched so far: {}\", recordResponseGenerator.getRecordsPulled());\n                        client = GSODataClientFactory.getOdataClient();\n                        ++currentRetryCount;\n                        LOGGER.info(\"R","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9e762d8-7511-4fdd-a5cb-69ce3f328d08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/SubAttributeAuditType.java","startLine":1,"endLine":64,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.audit;\n\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 10:48\n */\npublic enum SubAttributeAuditType {\n  TARGET_COLUMN (\"Target Column\"),\n  SOURCE_COLUMN (\"Source Column\"),\n  DATA_TYPE (\"Data Type\"),\n  TRANSFORMATION_RULE (\"Transformation Rule\"),\n  FIELD_SEPARATOR (\"fieldSeparator\"),\n  HEADER_ROW (\"headerRow\"),\n  QUOTE_CHARACTER (\"quoteCharacter\"),\n  ESCAPE_CHARACTER (\"escapeCharacter\"),\n  IMPORT_LOOKUP_LIST (\"importLookUpList\"),\n  ENCODING (\"encoding\"),\n  OPERATION (\"operation\"),\n  UPSERT_KEYS (\"upsertKeys\"),\n  MULTISELECT_SEPERATOR(\"multiDropDownSeparator\")\n  ;\n\n  /**\n   * Pre-populate the SubAttributeAuditType map for performance.\n   */\n  private static final Map<Object, SubAttributeAuditType> SUB_ATTRIBUTE_TYPE_MAP = new HashMap<>();\n\n  static {\n    for (SubAttributeAuditType type : values()) {\n      SUB_ATTRIBUTE_TYPE_MAP.put(type.value.toUpperCase(), type);\n    }\n  }\n\n  private String value;\n\n  SubAttributeAuditType(String subAttribute) {\n    this.value = subAttribute;\n  }\n\n  /**\n   * @return returns the value of SubAttributeAuditType\n   */\n  @JsonValue\n  public String getValue() {\n    return value;\n  }\n\n  /**\n   * This code is for case-insensitive enums.\n   *\n   * @param value The value\n   * @return The enum\n   */\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37bb36b3-b701-4845-b35c-ce767cdc908a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelFactory.java","startLine":90,"endLine":96,"content":" Error while getting accessToken\", e);\n            throw e;\n        }\n        return accountMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc0d3a5a-99e0-4efb-855c-c0198f659ccb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelService.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.connector.databricks;\n\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\n\nimport java.io.File;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic interface GainsightDatabricksChannelService {\n    List<Map<String, Object>> listAllObjects();\n    Set<Map<String, Object>> listAllFields(String objectName, List<String> ignorableSystemFields);\n    List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException;\n    List<File> fetchData(String fileDir, String jobId, String selectQuery, List<FieldInfo> fieldInfos,\n                         int maxRecordsPerBatch, double maxFileSizeInMB) throws SQLException;\n    void authenticate();\n    Map<String, Object> loadBulkData(DuctDataOperation ductDataOperation, PNPConnectionsInfo pnpConnectionsInfo, File file, String targetObject,\n                                     List<ColumnMapping> columnMappings, Character quoteChar, Character escapeChar, Character seperatorChar,\n                                     Map<String, String> colNameToDataType) throws SQLException;\n    Integer executeInsert(String absoluteObjectPath, Map<String, Object> dataToBeInserted) throws SQLException;\n    Integer executeUpdate(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1d8a8c13-5b91-429a-a852-92dd63b6f769","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":1043,"endLine":1068,"content":"t));\n        result.put(PROJECTION_SELECT, selectList);\n        result.put(PROJECTION_EXPAND, expandList);\n        return  result;\n    }\n\n    private ClientEntitySet readEntitiesClientEntitySet(ODataClient client, URI absoluteUri){\n        ODataEntitySetRequest<ClientEntitySet> requestEntitySet = client.getRetrieveRequestFactory().getEntitySetRequest(absoluteUri);\n        ODataRetrieveResponse<ClientEntitySet> responseEntitySet =requestEntitySet.execute();\n        return responseEntitySet.getBody();\n    }\n\n    private Object extractValue(ClientProperty clientProperty, Map<String, Map<Integer, String>> optionSetMap, boolean isPrimitiveDateTimeConversionRequired) {\n        if (clientProperty.getValue().isPrimitive()) {\n            String name = clientProperty.getName();\n            if(optionSetMap != null && optionSetMap.containsKey(name)){\n                Object value = clientProperty.getValue().asPrimitive().toValue();\n                if (Objects.nonNull(value) && value instanceof String) {\n                    //Multipicklist value\n                    String[] multiSelectPicklistItems = StringUtils.split((String)value, \",\");\n                    StringBuilder semicolonSeparatedValues = new StringBuilder();\n                    for (String itemValue : multiSelectPicklistItems) {\n                        semicolonSeparatedValues.append(optionSetMap.get(name).get(Integer.parseInt(itemValue)));\n                        semicolonSeparatedValues.append(\";\");\n                    }\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad4af272-e86f-445f-b488-8b6d892b48c0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthService.java","startLine":1,"endLine":22,"content":"package com.gainsight.integration.auth;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport org.apache.http.client.methods.HttpRequestBase;\n\nimport java.util.Map;\n\npublic interface AuthService {\n    HttpRequestBase getHttpClientForMetadataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                    ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                    PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> flattenConnectionInfo,\n                                                    Map<String, Object> paginationInfo) throws Exception;\n\n    HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                PNPConnectionsInfo pnpConnectionsInfo, Criteria criteria,\n                                                Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam) throws Exception;\n\n    HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                ApiConfigAttributes metadataApiConfigAtt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1447b2fa-0392-423f-a27a-751cb2e5bbdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":525,"endLine":538,"content":");\n        for (GSFieldDefinition gsFieldDefinition : nullSafeList(objectDefinition.getFields().stream().filter(fieldDefinition -> fieldDefinition.getMeta().isHasLookup()\n                && lookupSourceColumnsProjections.contains(fieldDefinition.getFieldName())).collect(Collectors.toList()))) {\n            List<GSFieldDefinition> targetObjectList = targetObjectToGSFieldDefinitionList.getOrDefault(gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName(), new ArrayList<>());\n            targetObjectList.add(gsFieldDefinition);\n            targetObjectToGSFieldDefinitionList.put(gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName(), targetObjectList);\n        }\n\n        for (Map.Entry<String, List<GSFieldDefinition>> entry : targetObjectToGSFieldDefinitionList.entrySet()) {\n            ObjectDefinition lookupObjectDefinition = objectDefinitionMap.containsKey(entry.getKey()) ? objectDefinitionMap.get(entry.getKey()) :\n                    msDynamicsSchemaService.getObjectAttributes(entry.getKey(), resolvePicklistOptions, pnpConnectionsInfo, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n\n            objectDefinitionMap.putIfAbsent(lookupObjectDefinition.getDbName(), lookupObjectDefinition);\n            Optional<GSFieldDefinition> primaryGSFieldDefinitionOptional = lookupObjectDefinition.getFields().stream().filter(fieldDefinition -> DynamicsGainsightUtils.parseBoolean(fieldDefinition.getMeta().","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f41696a6-85c6-49b7-a73c-cf5560414df8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":71,"endLine":87,"content":"pnpConnectionsInfo);\n                ACCESS_TOKEN_CACHE.put(key, accessToken);\n                LOGGER.info(\"Generation of access token for the connection: {} succeded\", pnpConnectionsInfo.getConnectionId());\n            }\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BEARER + ACCESS_TOKEN_CACHE.getIfPresent(constructAccessTokenKey(pnpConnectionsInfo)).toString());\n        } else if(AuthorizationType.BASIC_AUTH.equals(pnpConnectionsInfo.getAuthorizationType())){\n            String userName = (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.USERNAME);\n            String password = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.PASSWORD));\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BASIC + Base64.getEncoder().encodeToString((userName + UCConstants.COLON + password).getBytes()));\n        }else if(AuthorizationType.ACCESS_KEY.equals(pnpConnectionsInfo.getAuthorizationType())){\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BEARER + CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ACCESS_TOKEN)));\n        }\n\n        while (retryCount < DBFS_OPERATIONS_MAX_RETRY_COUNT) {\n            try {\n                LOGGER.info(\"Uploading the file to the databricks file system to path: {} retryCount: {}\", fileUploadPath, retryCount);\n                MultipartEntityBuilder builder = MultipartEntityB","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0fbc26fe-6151-4956-9a3f-d6861df675a1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/FeatureToggleUtil.java","startLine":66,"endLine":89,"content":"ype = objectMapper.getTypeFactory().constructCollectionType(Collection.class, String.class);\n            return objectMapper.readValue(objectMapper.writeValueAsString(featureVariationDetailDTO.getValue()), javaType);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}\", ex.getMessage(), ex);\n            LOGGER.error(\"Unable to serialize the feature configuration. Actual value = {}. Ignoring exception and returning empty list\", null == featureVariationDetailDTO ? null : featureVariationDetailDTO.getValue(), ex);\n        }\n        return Collections.emptyList();\n    }\n\n    public static <T> T evaluateFeature(String name, String tenantId, T defaultValue) {\n        try {\n            FeatureConfigEvaluationService service = (new FeatureConfigEvaluationServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n            FeatureVariationDetailDTO featureVariationDetailDTO = service.evaluate(name, tenantId);\n            return (T) featureVariationDetailDTO.getValue();\n        } catch (Exception ex) {\n            LOGGER.error(\"{}\", ex.getMessage(), ex);\n            return defaultValue;\n        }\n    }\n\n    public static boolean enableFeature(String featureName, List<String> tenantIds, String variationName) {\n        LOGGER.info(String.format(\"Updating state of %s to %s from feature toggle service for tenants %s\", featureName, variationName, tenantIds));\n        try {\n            getFeatureToggleCrudService().upsertTenantMappings(featureName, tenantIds, variationName)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b01b07bb-b8ac-48c4-b852-8db4c3afd0cd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":151,"endLine":173,"content":"                    modifiedProjectionToOriginalProjections.get(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\").add(projection);\n                    } else {\n                        //Never be the case\n                        LOGGER.error(\"Issue fetching data for field: {}\", projection);\n                    }\n                } else {\n                    /*lookup, length=3\n                        mappedSourceColumns=createdby.systemuser.firstname\n                    */\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships...\", RequestContextProvider.getTenantId());\n            relationships = msDynamicsSchemaService.listRelationships(objectDefinition.getDbName(), RelationshipType.MANY_TO_ONE);\n            LOGGER.info(\"tId: {}. Fetched all Many-to-One relationships.\", RequestContextProvider.getTenantId());\n            for (String projection : expandGroup) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                String sourceLookupField = ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"baa7eac4-81ef-4da9-b776-9feda2c0fa91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":28,"endLine":55,"content":"}\n\n    public static MSDynamicsObject parseObject(Map<String, Object> entity) {\n        MSDynamicsObject msDynamicsObject = new MSDynamicsObject();\n        msDynamicsObject.setObjectId(DynamicsGainsightUtils.valueOf(entity.get(\"MetadataId\")));\n        msDynamicsObject.setObjectName(DynamicsGainsightUtils.valueOf(entity.get(\"SchemaName\")));\n        msDynamicsObject.setPluralName(DynamicsGainsightUtils.valueOf(entity.get(\"EntitySetName\")));\n        msDynamicsObject.setLogicalName(DynamicsGainsightUtils.valueOf(entity.get(\"LogicalName\")));\n        msDynamicsObject.setCustomObject((Boolean)entity.get(\"IsCustomEntity\"));\n        msDynamicsObject.setDisplayName(parseDisplayName(entity));\n        return msDynamicsObject;\n    }\n\n    public static List<Column> parseColumns(Map<String, Object> entity) {\n        List<Map<String, Object>> attributes;\n        if (Objects.isNull(entity) || CollectionUtils.isEmpty(attributes = (List)entity.get(\"Attributes\"))) {\n            return Collections.emptyList();\n        }\n        List<Column> columns = Lists.newArrayList();\n        for (Map<String, Object> attribute : attributes) {\n            if (isChildAttribute(attribute) || isNotReadable(attribute)) {\n                if(!attribute.get(\"LogicalName\").equals(\"entityimage_url\"))\n                continue;\n            }\n            ExternalDataType externalDataType = ExternalDataType.fromAttribute(attribute);\n            if (!externalDataType.isSupported()) {\n                continue;\n            }\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e2dc13b-163f-427b-b495-f26df6b8f8bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/DuctChangeEventDTO.java","startLine":47,"endLine":66,"content":"       return changedFieldsMap;\n    }\n\n    @Override\n    //avoid batching and process events sequentially\n    public boolean batchableWith(ChangeEventDto changeEventDto) {\n        if(!(changeEventDto instanceof DuctChangeEventDTO)) {\n            // other source.\n            return false;\n        }\n        // if from Duct entityname and changetype is same its batchable.\n        //TODO : Add connectionType check.\n        return StringUtils.equals(getEntityName(),\n                ((DuctChangeEventDTO) changeEventDto).getEntityName())\n                && StringUtils.equals(getChangeType(),\n                ((DuctChangeEventDTO) changeEventDto).getChangeType());\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c57cf09-6597-434a-b82f-f49779668fd6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":597,"endLine":626,"content":"umnMapping.getIsKeyField()) {\n        String onClause = STAGE_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE;\n\n        onClause = TARGET_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE + EQUALS + onClause;\n        ON_CLAUSE.add(onClause);\n      }\n\n      String setClause = STAGE_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE;\n      setClause = TARGET_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE + EQUALS + setClause;\n      SET_CLAUSE.add(setClause);\n\n      INSERT_COLUMN_CLAUSE.add(DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE);\n\n      String insertValueClause = STAGE_TABLE_ALIAS + PERIOD + DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE;\n      INSERT_VALUE_CLAUSE.add(insertValueClause);\n    }\n\n    try {\n      String mergeQuery = null;\n      switch (ductDataOperation) {\n        case INSERT:\n          mergeQuery = String.format(INSERT_INTO_TARGET_TABLE_QUERY, absolutePathToTargetTable, absolutePathToTempStageTable,\n                  Joiner.on(COMMA).join(INSERT_COLUMN_CLAUSE), Joiner.on(COMMA).join(INSERT_VALUE_CLAUSE));\n          break;\n        case UPDATE:\n          mergeQuery = String.format(UPDATE_TARGET_TABLE_QUERY, absolutePathToTargetTable, absolutePathToTempStageTable,\n                  Joiner.on(AND).join(ON_CLAUSE), Joiner.on(COMMA).join(SET_CLAUSE));\n          break;\n        case UPSERT:\n          mergeQuer","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21693d7a-7f76-463b-96f5-ccc9329c704b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":140,"endLine":164,"content":"ns = query.buildProjections())) {\n            absoluteUri.select(projections);\n        } else {\n            absoluteUri.select(MSDynamicsObjectQuery.FIELDS_MAPPING.values().toArray(new String[0]));\n        }\n        if (includeColumns && fetchAttributesForOnlyRequestedFields && CollectionUtils.isNotEmpty(fields)) {\n            String requestedFieldsFilter = Joiner.on(\" or \").join(fields.stream().map(field -> String.format(LOGICAL_NAME_FILTERS, field)).collect(Collectors.toList()));\n            absoluteUri.expand(\"Attributes\" + String.format(FILTER_CRITERIA, requestedFieldsFilter));\n        } else if (includeColumns) {\n            absoluteUri.expand(\"Attributes\");\n        }\n        URI uri = absoluteUri.build();\n        LOGGER.info(\"tId: {}. URI is {}\", RequestContextProvider.getTenantId(), uri);\n        List<Map<String, Object>> entities;\n        try {\n            if(CollectionUtils.isEmpty(fields)){\n                entities = readEntities(client, uri, includeColumns, resolveOptionSets);\n            }else{\n                entities = readEntities(client, uri, includeColumns, resolveOptionSets, fields);\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Failed while fetching entity\", e);\n            throw new SystemException(AdapterErrorMessages.FAILED_WHILE_FETCHING_OBJECT.getTranslatedMessage(), DynamicsErrorCode.PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n        }\n        GainsightPrecondition.assertTrue(CollectionUtils.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1750cfc0-209f-4361-b2af-eb317f72bbaa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":268,"endLine":290,"content":";\n\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), msDynamicsObject.getPluralName());\n        Map<String, Map<Integer, String>> optionSetMap = new HashMap<>();\n\n        List<String> multiPicklistColumns = new ArrayList<>();\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(msDynamicsObject, getRecordsRequest.getProjections());\n        } else {\n            multiPicklistColumns = msDynamicsObject.getColumns().stream().filter(\n                    column -> getRecordsRequest.getProjections().contains(column.getLogicalName())\n            ).collect(Collectors.toList()).stream().filter(\n                    column -> (column.getExternalType() == ExternalDataType.MULTISELECTPICKLIST)\n            ).map(column -> column.getLogicalName()).collect(Collectors.toList());\n        }\n        Map<String, Set<String>> selectAndExpandGroup = groupBySelectAndExpand(getRecordsRequest.getProjections());\n        Set<String> expandGroup = Sets.newHashSet();\n        Set<String> selectGroup = Sets.newHashSet();\n        Map<String, ExternalDataType> logicalNameToExternalType = msDynamicsObject.getColumns().stream().collect(Collectors.toMap(Column::getLogicalName, Column::getExternalType));\n        Map<String, Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (Col","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c7d50532-9ecf-4514-8e9e-62efc8ed1510","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":24,"endLine":58,"content":"i.ODataClient;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetRequest;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.apache.olingo.client.api.domain.*;\nimport org.apache.olingo.client.api.http.HttpClientException;\nimport org.apache.olingo.client.api.uri.URIBuilder;\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.net.URI;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n/*\n    Responsible for processing flattened fields/projections\n*/\n@Service\npublic class MSDynamicsDataServiceV2Impl implements MSDynamicsDataServiceV2 {\n\n    private static final String PROJECTION_SELECT = \"PROJECTION_SELECT\";\n    private static final String PROJECTION_EXPAND = \"PROJECTION_EXPAND\";\n    public static final String MULTISELECTDROPDOWNLIST = \"MULTISELECTDROPDOWNLIST\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(MSDynamicsDataServiceV2Impl.class);\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n\n    /* @autowired will not work if the call comes from external jar (main() method)\n         Hence manually controlling dependency.*/\n    public void setMsDynamicsSchemaService(MSDynamicsSchemaService msDyna","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5140a222-3a3a-4432-8f1f-d803ffe4b2c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":293,"endLine":350,"content":" */\n    public static final String REQUEST_SOURCE = \"requestSource\";\n\n    /**\n     * UNIFIED_CONNECTOR constant\n     */\n    public static final String UNIFIED_CONNECTOR = \"UNIFIED_CONNECTOR\";\n\n    /**\n     * UC_REQUEST_ID constant\n     */\n    public static final String UC_REQUEST_ID = \"UC_REQUEST_ID\";\n\n    /**\n     * MIXPANEL constant\n     */\n    public static final String MIXPANEL = \"MIXPANEL\";\n\n    /**\n     * GOOGLE_ANALYTICS constant\n     */\n    public static final String GOOGLE_ANALYTICS = \"GOOGLE_ANALYTICS\";\n    /**\n     * CONNECTION constant\n     */\n    public static final String CONNECTION = \"CONNECTION\";\n\n    /**\n     * JOBINFO constant\n     */\n    public static final String JOBINFO = \"JOBINFO\";\n\n    public static final String JOB_EXECUTION_SET = \"JOBEXECUTIONSET\";\n\n    /**\n     * MAPPING constant\n     */\n    public static final String MAPPING = \"MAPPING\";\n    /**\n     * This is the placeholder for Null Connection Id,\n     * used in systemId for Audit Service.\n     */\n    public static final String NULL_CONNECTION_ID_PLACEHOLDER = \"NA_CONNECTION_CREATE\";\n    /**\n     * This is the placeholder for Null Job Id,\n     * used in systemId for Audit Service.\n     */\n    public static final String NULL_JOB_ID_PLACEHOLDER = \"NA_JOB_CREATE\";\n\n    public static final String NULL_JOB_EXECUTION_SET_ID_PLACEHOLDER = \"NA_JOB_EXECUTION_SET_CREATE\";\n\n    /**\n     * Unified Connector Mapping Delimiter\n     */\n\n    public static final String RE_AUTHORIZE = \"RE_AUTHORIZE\";\n\n    public st","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bccb4d5-ed7c-4bdb-a489-4607022e8ba9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescription.java","startLine":1,"endLine":51,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\n\nimport java.util.List;\n\n/**\n * @author : vipinsharma\n * @createdOn : 28 Jun 2019 :: 13:21\n **/\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightHubspotFieldDescription{\n\n    private String name;\n    private String label;\n    private String canonicalName;\n    private String apiName;\n    private String type;\n    private String fieldType;\n    private boolean hubspotDefined;\n    private String referencedObjectType;\n    private List<Options> options;\n\n    public GainsightHubspotFieldDescription() {\n    }\n\n    public GainsightHubspotFieldDescription(String name, String label, String type) {\n        this.name = name;\n        this.label = label;\n        this.type = type;\n    }\n\n    public GainsightHubspotFieldDescription(String name, String label, String type, String fieldType) {\n        this.name = name;\n        this.label = label;\n        this.type = type;\n        this.fieldType = fieldType;\n    }\n\n    public GainsightHubspotFieldDescription(String name, String label, String canonicalName, String type, String fieldType) {\n        this.name = name;\n        this.label = label;\n        this.canonicalName = canonicalName;\n        this.type = type;\n        this.fieldType = fieldType;\n    }\n\n    public GainsightHubspotFieldDescription(String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8fb9533a-f9d7-445f-8233-e078eca99011","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":123,"endLine":141,"content":"urceColumns[1]))\n                        .findFirst().get();\n                String targetObjectOfLookupField = sourceLookupField.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();\n\n                ObjectDefinition targetObjectDefinition = objectDefinitionMap.containsKey(targetObjectOfLookupField) ? objectDefinitionMap.get(targetObjectOfLookupField) :\n                        msDynamicsSchemaService.getObjectAttributes(targetObjectOfLookupField, resolvePicklistOptions, pnpConnectionsInfo, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n                objectDefinitionMap.putIfAbsent(targetObjectDefinition.getDbName(), targetObjectDefinition);\n\n                if (mappedSourceColumns.length == 4) {\n                    /*lookup inside a lookup, length=4\n                        mappedSourceColumns=createdby.systemuser.businessunitid.businessunit\n                    */\n                    GSFieldDefinition targetLookupField = targetObjectDefinition.getFields().stream().filter(\n                                    gsFieldDefinition -> gsFieldDefinition.getFieldName().equals(mappedSourceColumns[2] + UCConstants.PERIOD + mappedSourceColumns[3]))\n                            .findFirst().get();\n                    if (targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST)) {\n                        multiPicklistColumns.add(projection);\n                    }\n                    if (Objects.nonNull(targetLookup","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc65b062-c3ac-4302-ba33-afef955297e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotEntityDescriptionV3.java","startLine":1,"endLine":50,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author : vipinsharma\n * @createdOn : 28 Jun 2019 :: 13:20\n **/\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightHubspotEntityDescriptionV3 {\n\n    private String entityName;\n    private String entityId;// todo might not be valid\n    private List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions;\n\n    public GainsightHubspotEntityDescriptionV3() {\n    }\n\n    public String getEntityName() {\n        return entityName;\n    }\n\n    public void setEntityName(String entityName) {\n        this.entityName = entityName;\n    }\n\n    public List<GainsightHubspotFieldDescriptionV3> getGainsightHubspotFieldDescriptions() {\n        return gainsightHubspotFieldDescriptions;\n    }\n\n    public void setGainsightHubspotFieldDescriptions(List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions) {\n        this.gainsightHubspotFieldDescriptions = gainsightHubspotFieldDescriptions;\n    }\n\n    public String getEntityId() {\n        return entityId;\n    }\n\n    public void setEntityId(String entityId) {\n        this.entityId = entityId;\n    }\n\n    public GainsightHubspotEntityDescriptionV3(String entityName, List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightHubspotFieldDescriptions = g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ced8a42-61c4-469d-a9ae-7b71e7668ab6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":740,"endLine":762,"content":"ProjectionBySelectAndExpand(Set<String> projections) {\n        Map<String, Set<String>> result = Maps.newHashMap();\n        Set<String> expandList = projections.stream().filter(str -> str.contains(\".\") && str.split(\"\\\\.\").length > 2).collect(Collectors.toSet());\n        Set<String> selectList = Sets.newHashSet(CollectionUtils.subtract(projections, expandList));\n        result.put(PROJECTION_SELECT, selectList);\n        result.put(PROJECTION_EXPAND, expandList);\n        return result;\n    }\n\n    private Object extractValue(ClientProperty clientProperty, Map<String, Map<Integer, String>> optionSetMap, boolean isPrimitiveDateTimeConversionRequired) {\n        if (clientProperty.getValue().isPrimitive()) {\n            String name = clientProperty.getName();\n            if (optionSetMap != null && optionSetMap.containsKey(name)) {\n                Object value = clientProperty.getValue().asPrimitive().toValue();\n                if (Objects.nonNull(value) && value instanceof String) {\n                    //Multipicklist value\n                    String[] multiSelectPicklistItems = StringUtils.split((String) value, \",\");\n                    StringBuilder semicolonSeparatedValues = new StringBuilder();\n                    for (String itemValue : multiSelectPicklistItems) {\n                        semicolonSeparatedValues.append(optionSetMap.get(name).get(Integer.parseInt(itemValue)));\n                        semicolonSeparatedValues.append(\";\");\n                    }\n                  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"773b365c-6742-4079-81df-ab86458f0722","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/IRoadmapChannelService.java","startLine":1,"endLine":35,"content":"package com.gainsight.integration.productboard.service;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\n\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.apache.http.HttpHeaders;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.ACCESS_TOKEN;\n\npublic interface IRoadmapChannelService {\n\n    static final String AUTH_HEADER = HttpHeaders.AUTHORIZATION;\n    static final String BEARER = \"Bearer \";\n    static final Logger LOGGER = LoggerFactory.getLogger(IRoadmapChannelService.class);\n\n    boolean authenticateAccessToken();\n\n    default boolean authenticate(String url, String accessToken){\n        LOGGER.debug(\"Authenticating against URL {}\", url);\n        try (CloseableHttpClient httpclient = HttpClients.createDefault()) {\n            HttpGet httpGet = new HttpGet(url);\n\n            httpGet.setHeader(AUTH_HEADER, BEARER + accessToken);\n            getOtherHeaders().entrySet().stream().forEach(entry -> httpGet.setHeader(entry.getKey(), entry.getValue()));\n            HttpResponse response = httpclient.execute(httpGet);\n            return (response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 204)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4d1308a-8791-4b21-b6ce-d0af4da64ef7","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubspotAssociationEnum.java","startLine":1,"endLine":37,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GSHubspotAssociationEnum {\n\n    CONTACT_TO_COMPANY(\"CONTACT_TO_COMPANY\", \"vid\",\"companyId\",1,\"contact\", \"company\"),\n    DEAL_TO_COMPANY(\"DEAL_TO_COMPANY\", \"dealId\",\"companyId\",5,\"deal\",\"company\"),\n    TICKET_TO_COMPANY(\"TICKET_TO_COMPANY\", \"objectId\",\"companyId\",26,\"ticket\",\"company\");\n\n    private String associationType;\n    private String sourceObjectLookUpField;\n    private String targetObjectLookUpField;\n    private int definitionId;\n    private String sourceObjectType;\n    private String targetObjectType;\n\n\n    private static final Map<Object, GSHubspotAssociationEnum> ASSOCIATION_MAP = new HashMap<>();\n    static {\n        for (GSHubspotAssociationEnum type : values()) {\n            ASSOCIATION_MAP.put(type.associationType, type);\n        }\n    }\n\n    GSHubspotAssociationEnum(String associationType, String sourceObjectLookUpField,\n                             String targetObjectLookUpField, int definitionId, String sourceObjectType, String targetObjectType) {\n        this.associationType = associationType;\n        this.sourceObjectLookUpField = sourceObjectLookUpField;\n        this.targetObjectLookUpField = targetObjectLookUpField;\n        this.definitionId = definitionId;\n        this.sourceObjectType = sourceObjectType;\n        this.targetObjectType = targetObjectType;\n    }\n\n    public static GSHubspotAssociationEnum getInstance(String associationTy","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c3923a24-8c23-47a6-b7b8-b8026b52ee3a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/MetadataJobStatus.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum MetadataJobStatus {\n\n    INIT(\"Init\"),\n    IN_PROGRESS(\"In Progress\"),\n    SUBMITTED_TO_CE(\"Submitted to CE\"),\n    COMPLETED(\"Completed\"),\n\n    SUBMITTED_TO_DH(\"Submitted to DH\"),\n    SUCCESS(\"Success\"),\n    PARTIAL_SUCCESS(\"Partial Success\"),\n    FAILED(\"Failed\"),\n    ABORTED(\"Aborted\"),\n    NO_DATA_FOUND(\"No Data Found\");\n    private String value;\n\n    MetadataJobStatus(String value) {this.value = value;}\n\n    private static final Map<Object, MetadataJobStatus> METADATA_JOB_STATUS_MAP = new HashMap<>();\n\n    static {\n        for (MetadataJobStatus type : values()) {\n            METADATA_JOB_STATUS_MAP.put(type.value.toUpperCase(), type);\n        }\n    }\n\n    /**\n     * This code is for case-insensitive enums.\n     *\n     * @param value The value\n     * @return The enum\n     */\n    public static MetadataJobStatus forValue(String value) {\n        if (value == null) {\n            return null;\n        }\n        return METADATA_JOB_STATUS_MAP.get(value.toUpperCase());\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"23dd5182-da81-4595-979d-10eaaebfebcb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":489,"endLine":515,"content":"while trying to sanitize BQ data\", e);\n        }\n    }\n\n\n    private Map<String, Object> getBQQueryResultJobId(String query) throws Exception {\n        try {\n            boolean shouldContinue = true;\n            int retry = 2;\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/jobs\", this.projectId);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            LOGGER.info(\"URI for fetching data {}\", uriBuilder.build());\n            this.httpPost.setURI(uriBuilder.build());\n            this.httpPost.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n            StringEntity stringEntity = new StringEntity(String.format(BQ_JOB_QUERY_SCRIPT, query), StandardCharsets.UTF_8);\n            this.httpPost.setEntity(stringEntity);\n            Map<String, Object> responseMap = new HashMap<>();\n            while (shouldContinue) {\n                HttpResponse response = null;\n                response = this.httpclient.execute(httpPost);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                    responseMap = (Map) MAPPER.readValue(jsonDataResponse, Map.class);\n                    shouldContinue = false;\n                } else if (response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"BigQuery access token expired\");\n                    this.acce","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b6c64d4-1974-4846-b370-a8551872e0d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":407,"endLine":438,"content":"ic final String MESSAGE_ID = \"messageId\";\n\n    }\n\n\n    // GSIntegration  specific constants & codes\n    public static final class GSIntegration {\n\n        private GSIntegration() {\n\n        }\n\n        public static final String SERVICE_ACCOUNT_JSON=\"serviceAccountConfiguration\";\n        public static final String COMPONENT_NAME = \"componentName\";\n        public static final String S3_ACCESS_KEY = \"s3.access.key\";\n        public static final String S3_ACCESS_SECRET = \"s3.access.secret\";\n        public static final String TENANT_ID = \"tenantId\";\n        public static final String OPERATION = \"operation\";\n        public static final String GET_ALL_OBJECTS = \"getAllObjects\";\n        public static final String GET_OBJECT_DESCRIPTION = \"getObjectDescription\";\n        public static final String GET_OBJECT_BASIC_INFO = \"getObjectBasicInfo\";\n        public static final String LOGBACK_CONFIG = \"logback-spring.xml\";\n        public static final String CREATE = \"create\";\n        public static final String FETCH = \"fetch\";\n        public static final String CLOSE = \"close\";\n        public static final String ABORT = \"abort\";\n        public static final String FETCH_ALL = \"fetchall\";\n        public static final String REQUEST = \"request\";\n        public static final String RESULT = \"result\";\n        public static final String CAMEL_SALESFORCE_EVENT_TYPE = \"CamelSalesforceEventType\";\n        public static final String BULK_JOB_OPERATION = \"bulkJobOperation\";\n        public static final Strin","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66ba013a-f92f-4b89-9fc3-b2c6b2daf44f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":87,"endLine":113,"content":"eNonNull(refreshToken, AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                } else {\n                    throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage());\n                }\n            } else {\n                if (entity != null) {\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    LOGGER.info(\"Error Response received : {}\", jsonResponse);\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), (String) accountMap.get(MESSAGE)));\n                } else {\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error while getting accessToken\", e);\n            throw e;\n        }\n        return accountMap;\n    }\n\n    private static String getAuthorizationHeader(String clientId, String clientSecret) {\n        byte[] authorizationHeader = Base64.encodeBase64((clientId + COLON + clientSecret).getBytes());\n        return new String(authorizationHeader);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e70ad6d-1586-4628-860d-4eb96b3fb617","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":186,"endLine":224,"content":"\n            }\n            // remove last line break\n            b.deleteCharAt(b.length()-1);\n            return b.toString();\n        }\n\n        private static String prettyPrint(Collection<ClientProperty> properties, int level) {\n            StringBuilder b = new StringBuilder();\n\n            for (ClientProperty entry : properties) {\n                intend(b, level);\n                ClientValue value = entry.getValue();\n                if (value.isCollection()) {\n                    ClientCollectionValue cclvalue = value.asCollection();\n                    b.append(prettyPrint(cclvalue.asJavaCollection(), level + 1));\n                } else if (value.isComplex()) {\n                    ClientComplexValue cpxvalue = value.asComplex();\n                    b.append(prettyPrint(cpxvalue.asJavaMap(), level + 1));\n                } else if (value.isEnum()) {\n                    ClientEnumValue cnmvalue = value.asEnum();\n                    b.append(entry.getName()).append(\": \");\n                    b.append(cnmvalue.getValue()).append(\"\\n\");\n                } else if (value.isPrimitive()) {\n                    b.append(entry.getName()).append(\": \");\n                    b.append(entry.getValue()).append(\"\\n\");\n                }\n            }\n            return b.toString();\n        }\n\n\n        private static void intend(StringBuilder builder, int intendLevel) {\n            for (int i = 0; i < intendLevel; i++) {\n                builder.append(\"  \");\n            }\n        }\n\n    }\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ff8b802a-9e54-4bba-85f6-b67185eddffe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":37,"endLine":63,"content":"nectionUtils = new HttpUrlConnectionUtils();\n    private static final SfdcTokenUtil sfdcTokenUtil = new SfdcTokenUtil();\n\n    private static final int RETRY_COUNT = 3;\n    private static final String SALESFORCE_SERVICE_DATA = \"/services/async/\";\n    private static final String SALESFORCE_CREATE_JOB = \"/job\";\n    private static final String SALESFORCE_CLOSED_JOB = \"/job/%s\";\n    private static final String SALESFORCE_CREATE_BATCH = \"/job/%s/batch\";\n    private static final String SALESFORCE_BATCH_DETAILS = \"/job/%s/batch/\";\n    private static final String SALESFORCE_BATCH_RESULT = \"/job/%s/batch/%s/result\";\n    private static final String SALESFORCE_BATCH_RESULT_CSV = \"/job/%s/batch/%s/result/%s\";\n    private static final String X_SFDC_SESSION = \"X-SFDC-Session\";\n    private static final long SALESFORCE_BATCH_POLLER_TIME = 20 * 60 * 1000;\n    private static final String OBJECT_PATTERN = \"Unable to find object:(.*)(\\\"})\";\n    public static final String FIELD_PATTERN = \"No such column '(.*?)' on entity '(.*?)'.\";\n    private static final int FILE_SIZE_THRESHOLD_IN_BYTES = 209715200;\n    private static final String CSV_EXTENSION = \".csv\";\n\n    public SalesforceBulkFetchService() {\n    }\n\n\n    public String createSfdcJob(PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret, String refreshToken,\n                                int retryCount, String sfdcApiVersion, String objectName) {\n        try {\n            LOGGER.info(\"Creating job in salesforce\");\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bca07a5d-a01a-42a1-aa84-bf462524d93a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":402,"endLine":441,"content":"ery api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"Api call to BigQuery failed for retry count : {} due to : {}, code :{}\",\n                        retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n            }\n        }\n        return responseMap;\n    }finally {\n        this.httpclient.close();\n        this.httpclient = HttpClients.createDefault();\n    }\n    }\n\n    @Override\n    public Map<String, Object> updateSingleRecord(Map<String, Object> data, String Id) {\n        return null;\n    }\n\n    @Override\n    public Map<String, Object> bulkWrite(File file) {\n        return null;\n    }\n    private boolean exceedsMaxFileSize(File file) {\n        return file.length() > MAX_FILE_SIZE_BYTES;\n    }\n\n    public void writeDataToFile(JsonArray arr, String fileDir, String dhJobId, List<File> fileList) throws Exception {\n        FileWriter fileWriter = null;\n        BufferedWriter br = null;\n        try {\n            for (int i = 0; i < arr.size(); i++) {\n                JsonElement obj = arr.get(i);\n                String fileName = fileDir + dhJobId + UUID.randomUUID() + JSON_EXTENSION;\n                if (fileWriter == null || exceedsMaxFileSize(new File(fileName))) {\n                    if (fileWriter != null) {\n                        br.close();\n                        fileWriter.close();\n                    }\n                    File file = new File(fileName);\n                    fileList","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0a5cfd08-f2ad-4f5a-94e7-036e4c9e0332","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelFactory.java","startLine":1,"endLine":18,"content":"package com.gainsight.integration.connector.aha.service;\n\nimport java.util.Objects;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\npublic class GainsightAhaChannelFactory {\n\n    public GainsightAhaChannelFactory() {\n    }\n\n    public GainsightAhaChannelService getChannelServiceWithApiKey(String apiKey){\n        Objects.requireNonNull(apiKey,\"[AHA] API key cannot be null\");\n        return new GainsightAhaChannelServiceImpl(apiKey);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33a6bab5-1e14-41de-865d-4af4c3eb2c23","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/ResolutionProperties.java","startLine":1,"endLine":51,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.db.common;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ResolutionProperties implements Serializable {\n\n    private static final long serialVersionUID = -109876545678L;\n    private String externalAccountId;\n    private String externalContactId;\n    private String entityType;\n    private String relationshipTypeId;\n\n    public String getExternalAccountId() {\n        return externalAccountId;\n    }\n\n    public void setExternalAccountId(String externalAccountId) {\n        this.externalAccountId = externalAccountId;\n    }\n\n    public String getExternalContactId() {\n        return externalContactId;\n    }\n\n    public void setExternalContactId(String externalContactId) {\n        this.externalContactId = externalContactId;\n    }\n\n    public String getEntityType() {\n        return entityType;\n    }\n\n    public void setEntityType(String entityType) {\n        this.entityType = entityType;\n    }\n\n    public String getRelationshipTypeId() {\n        return relationshipTypeId;\n    }\n\n    public void setRelationshipTypeId(String relationshipTypeId) {\n        this.relationshipTypeId = relationshipTypeId;\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea40db3b-2774-4869-956b-fea1d8f62230","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":419,"endLine":439,"content":"LOGGER.info(\"tId: {}. Inside getRecords \", RequestContextProvider.getTenantId());\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        MSDynamicsObject msDynamicsObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().pluralName(getRecordsRequest.getPluralName()), true, resolvePicklistOptions);\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), msDynamicsObject.getLogicalName());\n        Map<String, Map<Integer, String>> optionSetMap = new HashMap<>();\n        Map<String, MSDynamicsObject> logicalNameToObject = Maps.newHashMap();\n        logicalNameToObject.put(msDynamicsObject.getLogicalName(), msDynamicsObject);\n\n        LOGGER.info(\"resolvePicklistOptions: {}\", resolvePicklistOptions);\n        List<String> multiPicklistColumns = new ArrayList<>();\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(msDynamicsObject);\n        } else {\n            multiPicklistColumns = msDynamicsObject.getColumns().stream().filter(\n                    column -> getRecordsRequest.getProjections().contains(column.getLogicalName())\n            ).collect(Collectors.toList()).stream().filter(\n                    column -> (column.getExternalType() == ExternalDataType.MULTISELECTPICKLIST)\n            ).map(column -> column.getLogicalName()).collect(Collectors.toList());\n        }\n\n        Map<String, Set<String>> selectAndExpandGroup = groupBySelectAndExpand(getRecordsRequest.getPro","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fdd978db-2135-45b9-9ab3-63bcfaa216c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchService.java","startLine":1,"endLine":31,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.gainsight.integration.connector.hubspot.bean.HubspotBulkImportBean;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotSearchRequest;\nimport org.apache.http.HttpResponse;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author : vipinsharma\n * @createdOn : 25 Jun 2019 :: 15:29\n **/\npublic interface GainsightHubspotFetchService {\n\n    boolean authenticateCredentials(String clientId, String clientSecret, String refreshToken);\n\n    Map<String, Object> getHubspotAccountDetails(String clientId, String clientSecret, String refreshToken);\n\n    InputStream getEntityData(String entityName, List<String> projectionList , String clientId, String clientSecret, String refreshToken);\n\n    InputStream getPaginatedEntityData(String entityName, List<String> projectionList, String clientId, String clientSecret, String refreshToken, Long offsetValue);\n\n    InputStream getPaginatedEntityData(String entityName, List<String> projectionList, String clientId,\n                                       String clientSecret, String refreshToken, String accessToken, Long offsetValue) throws Exception;\n\n    InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId,\n                                             String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"561194b8-5d0b-4711-8f6b-1ea6c13e09a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":582,"endLine":606,"content":"getValue(\"gs.domains.env\");\n        public static final String DYNAMICS_FEATURE_NAME = \"DYNAMICS_CONNECTOR\";\n        public static final String EXTERNAL_ACTIONS = \"EXTERNAL_ACTIONS\";\n        public static final String AUTHORIZATION_CODE = \"authorization_code\";\n        public static final String CALLBACK_ENDPOINT = \"/connector/connection/oauth/accesstoken\";\n\n\n        public static final String DATASET_ID = \"datasetId\";\n        public static final String ORGANIZATION_ID=\"organisationId\";\n        public static final String CLUSTER_ID=\"clusterId\";\n        public static final String OAUTH_CLIENT_ID = \"oauthClientId\";\n        public static final String OAUTH_CLIENT_SECRET = \"oauthClientSecret\";\n        public static final String ENCODED_SSL_CERTIFICATE=\"encodedSSLCertificate\";\n        public static final String MTLS_ENABLED = \"MTLS_ENABLED\";\n        public static final String WAREHOUSE=\"warehouse\";\n        public static final String DATABASE_NAME=\"databaseName\";\n        public static final String SCHEMA_NAME=\"schemaName\";\n        public static final String DATABASE_HOST=\"databaseHost\";\n        public static final String USERNAME = \"userName\";\n        public static final String PASSWORD = \"password\";\n        public static final String HEADERS = \"headers\";\n        public static final String AUTH_TYPE = \"authType\";\n        public static final String DESCRIPTION = \"description\";\n        public static final String CLIENT_ID = \"clientId\";\n        public static final String CLIENT_SECRET ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8e68b95-7a02-4144-8880-1785113d690a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":308,"endLine":330,"content":"ieldInfoMap.get(columnName);\n          if (objectValue instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n            String timezone = StringUtils.defaultIfBlank(field.getDateTimeProperties().getTimeZoneId(), \"UTC\");\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n            LocalDateTime localDateTime = LocalDateTime.parse(objectValue.toString(), defaultSrcFormatter);\n            // assuming that we always get timestamp in UTC from sap\n            ZonedDateTime sourceTime = ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\"));\n            // if we have to convert to any timezone, do the conversion here\n            ZonedDateTime targetTime = sourceTime.withZoneSameInstant(ZoneId.of(timezone));\n            map.put(columnName, targetTime.format(dtf));\n            //map.put(columnName, ZonedDateTime.of(localDateTime, ZoneId.of(field.getDateTimeProperties().getTimeZoneId())).format(dtf));\n          } else if (objectValue instanceof Date && Objects.nonNull(field.getDateTimeProperties())) {\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n            LocalDate localDate = LocalDate.parse(objectValue.toString());\n            map.put(columnName, localDate.format(dtf));\n          } else {\n            map.put(columnName, objectValue);\n          }\n        }\n        recordValues.add(map);\n      }\n      return recordValues;\n    } catch (Exception ex)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fecd42b-7620-4406-9aa1-30b3fabaf5d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/ConnectorI18nService.java","startLine":59,"endLine":74,"content":"\n    public static String getTranslation(String key, String defaultValue, String language) {\n        Map<String, String> translation = getTranslations(Lists.newArrayList(key), language);\n        return translation.getOrDefault(key, defaultValue);\n    }\n\n    /**\n     * Forcefully clear the client cache and re load the keys from server.\n     */\n    public static void hardRefresh() {\n        if(StringUtils.isEmpty(envAccessKey) || StringUtils.isEmpty(envHost))\n            i18nClient(DeploymentProperties.getDeploymentProperties().getValue(\"gs.i18n.read.access.key\"),DeploymentProperties.getDeploymentProperties().getValue(\"gs.i18n.service.url\")).rebuildCache(getRequestId());\n        else\n            i18nClient(envAccessKey,envHost).rebuildCache(getRequestId());\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51e9f253-a0c8-458e-881e-fff0c38d2637","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":265,"endLine":293,"content":"lServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.pollImportFileData(id);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public HttpResponse getErrorFileData(String clientId, String clientSecret, String refreshToken, String accessToken, String id) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.getErrorFileData(id);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String resourceName, HubspotSearchRequest hubspotSearchRequest) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            if(OWNER_KEYWORD.equalsIgnoreCase(resourceName))\n                return gainsightHubspotChannelService.searchOwnerData();\n            else\n                return gainsightHubspotChannelService.searchData(resour","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79c28e20-5498-41a6-a080-b3b2c194b156","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":91,"endLine":121,"content":"AMP_CREATED_AT_FIELD_MAPPER = \"created_at\";\n    public static final String REDSHIFT_TIMESTAMP_INSERTED_AT_FIELD_MAPPER = \"inserted_at\";\n    public static final String REDSHIFT_SYSTEM_ID_FIELD_MAPPER = \"system_id\";\n    public static final String REDSHIFT_BATCH_ID_FIELD_MAPPER = \"batch_id\";\n    public static final String TENANT_ID_FIELD_MAPPER = \"tenantId\";\n    public static final String EMAIL_TRIGGERED = \"emailTriggered\";\n    public static final String TIME_IDENTIFIER_DAY_OF_FIELD = \"TID_Day_Of\";\n    public static final String TEMP_TABLE_SUFFIX = \"_stage\";\n    public static final String CONNECTOR_UNIQUE_KEY = \"connector_identifier\";\n    /**\n     * the jobId of the Job in Unified Connector.\n     */\n    public static final String JOB_ID = \"jobId\";\n    /**\n     * connectorType Constant\n     */\n    public static final String CONNECTOR_TYPE = \"connectorType\";\n\n\n    //Other constants\n    public static final String JSON = \".json\";\n    public static final String IPT = \".ipt\";\n    public static final String CSV = \".csv\";\n    public static final String VM = \".vm\";\n    public static final String BLOB = \"blob\";\n    public static final String UTC = \"UTC\";\n    public static final String MIXPANEL_HOUSEKEEPING_CRON = \"0 55 23 1/1 * ? *\";\n    public static final String SEGMENT_IO_HOUSEKEEPING_CRON = \"0 00 03 1/1 * ? *\";\n    public static final String SFDC_HOUSEKEEPING_CRON = \"0 00 05 1/1 * ? *\";\n    public static final String DYNAMICS_HOUSEKEEPING_CRON = \"0 00 07 1/1 * ? *\";\n    public static ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c7dea13-8c50-4511-bad5-4da9813b8287","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelFactory.java","startLine":77,"endLine":102,"content":"utStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    Objects.requireNonNull(refreshToken, AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                }else{\n                    throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage());\n                }\n            }else{\n                if(entity != null){\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), (String)accountMap.get(\"message\")));\n                }else{\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"[ZOOM] Error while getting accessToken\", e);\n            throw e;\n        }\n        return accountMap;\n    }\n\n    private String getAuthorizationHeader(String clientId, String clientSecret) {\n        byte[] authorizationHeader = Base","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60a214fb-8a66-4f33-9f59-c3c0f0fcef79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":148,"endLine":176,"content":"st(executeWithMapListHandler(preparedStatement));\n            LOGGER.info(\"Field size {}\",result.size());\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", sqlException);\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\", sqlException);\n        }\n        return result;\n\n    }\n    @Override\n    public void authenticate(){\n        String queryParam = QUOTES + this.db + QUOTES + DOT + QUOTES + this.schema + QUOTES;\n        try (PreparedStatement preparedStatementTables = connection.prepareStatement(\"show tables in identifier(?)\");) {\n            preparedStatementTables.setString(1, queryParam);\n           nullSafeList(executeWithMapListHandler(preparedStatementTables));\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", sqlException);\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\", sqlException);\n        }\n    }\n\n    private Connection createConnection(String connectionUrl, Properties properties) {\n        Connection connection = null;\n        try {\n            SnowflakeDriver snowflakeDriver = new SnowflakeDriver();\n            connection = snowflakeDriver.connect(connectionUrl, properties);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occured while creating jdbc connection\",ex);\n            String errorMsg = String.form","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5e4ce8e-4779-45ea-900a-0c199df647f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":534,"endLine":562,"content":"ex);\n        } finally {\n            closeQuietly(this.connection, resultSet, stat);\n        }\n    }\n\n    @Override\n    public List<File> fetchData(String fileDir, String jobId, String selectQuery, List<FieldInfo> fieldInfos,\n                                int maxRecordsPerBatch, double maxFileSizeInMB) throws SQLException {\n        Statement stat = null;\n        ResultSet resultSet = null;\n        List<File> fileList = new ArrayList<>();\n        AtomicInteger filePosition = new AtomicInteger(0);\n        try {\n            LOGGER.info(\"maxRecordsPerBatch: {}\", maxRecordsPerBatch);\n            LOGGER.info(\"maxFileSizeInMB: {}\", maxFileSizeInMB);\n            DateTimeFormatter defaultSrcFormatter =\n                    new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\")\n                            .appendFraction(ChronoField.MILLI_OF_SECOND, 0, 9, true)\n                            .toFormatter();\n            Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getJsonPath, field -> field));\n            stat = this.connection.createStatement();\n            resultSet = stat.executeQuery(selectQuery);\n\n            List<Map<String, Object>> recordValues = Lists.newArrayList();\n            while (resultSet.next()) {\n                if (fileList.isEmpty()) {\n                    LOGGER.info(\"Creating file at position: {}\", filePosition.get());\n                    File initialFile = new File(fileDir + jobId + UUID.random","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"40f8bc12-56be-4eda-a0f5-8b97fbae5057","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":714,"endLine":742,"content":"der(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n            if (CollectionUtils.isNotEmpty(projections)) {\n                absoluteUri.select(projections.toArray(new String[projections.size()]));\n            }\n            if (CollectionUtils.isNotEmpty(expandList)) {\n                absoluteUri.expand(expandList.toArray(new String[expandList.size()]));\n            }\n            if (StringUtils.isNotBlank(filterExpression)) {\n                absoluteUri.filter(filterExpression);\n            }\n\n            URI uri = absoluteUri.build();\n            LOGGER.info(\"uri used is {}\", uri);\n            recordResponseGenerator.setBatchQuery(uri.toString());\n            return readEntitiesClientEntitySet(client, uri);\n        } catch (RuntimeException runtimeException) {\n            throw new SystemException(\"GSODATA\", runtimeException);\n        }\n    }\n\n    private ClientEntitySet readEntitiesClientEntitySet(ODataClient client, URI absoluteUri) {\n        ODataEntitySetRequest<ClientEntitySet> requestEntitySet = client.getRetrieveRequestFactory().getEntitySetRequest(absoluteUri);\n        ODataRetrieveResponse<ClientEntitySet> responseEntitySet = requestEntitySet.execute();\n        return responseEntitySet.getBody();\n    }\n\n    private Map<String, Set<String>> groupProjectionBySelectAndExpand(Set<String> projections) {\n        Map<String, Set<String>> result = Maps.newHashMap();\n        Set<String> expandList = projections.stream().filter(str -> str.contains(\".\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c71bd54e-9053-4d98-8179-48579ec44a64","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":96,"endLine":124,"content":"       LOGGER.info(\"tId: {}. Fetched entity\", RequestContextProvider.getTenantId());\n        MSDynamicsObject msDynamicsObject = parseObject(entity);\n        List<Column> columns;\n        if (includeColumns) {\n            columns = parseColumns(entity);\n            msDynamicsObject.setColumns(columns);\n        }\n        return msDynamicsObject;\n\n    }\n\n    @Override\n    public ObjectDefinition getObjectAttributes(String object, boolean resolvePicklistOptions, PNPConnectionsInfo pnpConnectionsInfo,\n                                                boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings) {\n        LOGGER.info(\"Starting attributes fetch for object: {}\", object);\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Map<String, Object> extractedData;\n        try {\n            extractedData = extractMetadata(new MSDynamicsObjectQuery().logicalName(object), true, resolvePicklistOptions);\n        } catch (SystemException exception) {\n            LOGGER.error(\"Exception occurred, during fetching attributes {}\", exception.getMessage(), exception);\n            throw exception;\n        }\n        stopWatch.stop();\n        LOGGER.info(\"completed attributes fetch for object: {} in: {} MS\", object, stopWatch.getTime());\n\n        Map metadata = constructDynamicsObjectDefinition(extractedData, pnpConnectionsInfo, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        return OBJ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"903989c0-42f6-4b24-951f-c3d5f9c97df6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":32,"endLine":63,"content":"static final String BASE_API_URL = \"https://graph.microsoft.com/\";\n    private static final String SEARCH_END_POINT_V1 = \"v1.0/\";\n    static final String AUTHORIZATION = \"Authorization\";\n    static final String BEARER = \"Bearer \";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String CONTENT_TYPE_VALUE = \"application/json;charset=UTF-8\";\n    private static final int TIMEOUT = 30;\n    AuthenticationType authenticationType;\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n    private static final int ALLOWED_RETRIES = 3;\n\n    public GainsightMSTeamsChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.refreshToken = refreshToken;\n        this.accessToken = accessToken;\n        this.authenticationType = AuthenticationType.OAUTH2;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpG","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db9738d2-65e5-4631-9db2-d38acbf4c937","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/FieldTrackingHistoryDetails.java","startLine":1,"endLine":32,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author puneetsaluja\n * @created 28/05/22\n */\n\n@Getter\n@Setter\n@ToString(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class FieldTrackingHistoryDetails {\n    private String recordGsid;\n    private String fieldTrackingId;\n    private String auditAuthor;\n    private String auditTimeStamp;\n    private String source;\n    private String operationType;\n    private List<FieldChangeDetail> changeDetails;\n    private Map<String, Object> recordDetails;\n    private Map<String, Map<String, String>> resolutionKeys;\n    private List<RequiredFieldChangeDetail> gsResolvedUpsertKeys = new ArrayList<>(2);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ca64312-8f77-4a64-92a7-637725f3b4df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceMetadataServiceImpl.java","startLine":55,"endLine":78,"content":"connectionId:{} connectionName:{}\", pnpConnectionsInfo\n                    .getTenantId(), pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getConnectionName(), ex);\n            throw new SystemException(ex.getMessage(), ex);\n        }\n\n        Assert.notNull(salesforceToken, \"salesforceToken is null/empty\");\n\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(\"Authorization\", \"Bearer \" + salesforceToken.getAccessToken());\n        HttpResponse response = null;\n\n        switch (sfdcMetadataTypeEnum) {\n            case GLOBAL_OBJECT:\n                headers.put(CONTENT_TYPE, \"application/json\");\n                headers.put(\"Accept\", MediaType.APPLICATION_JSON);\n                response = httpUrlConnectionUtils.get(salesforceToken.getInstanceURL() + SALESFORCE_SERVICES_DATA + apiVersion + SALESFORCE_GLOBAL_OBJECTS, headers, null);\n                break;\n            case OBJECT_DESCRIPTION:\n                headers.put(CONTENT_TYPE, \"application/json\");\n                headers.put(\"Accept\", MediaType.APPLICATION_JSON);\n                response = httpUrlConnectionUtils.get(String.format(salesforceToken.getInstanceURL() + SALESFORCE_SERVICES_DATA + apiVersion + SALESFORCE_OBJECTS_DESCRIPTION, data), headers, null);\n                break;\n            case SOQL_QUERY:\n                response = httpUrlConnectionUtils.get(String.format(salesforceToken.getInstanceURL() + SALESFORCE_SERVICES_DATA + apiVersion + SALESFORCE_SOQL_QUERY, URLEncoder.encode(da","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f89e39e-1a35-42f8-97f4-bdeca253b143","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":753,"endLine":786,"content":"ally {\n      this.connection = null;\n    }\n  }\n\n\n  public void loadSAPDriver() {\n    try {\n      log.info(\"[SAP DATASPHERE] Loading JDBC Driver\");\n      Class.forName(\"com.sap.db.jdbc.Driver\");\n      log.info(\"[SAP DATASPHERE] Found JDBC Driver\");\n    } catch (Exception e) {\n      log.error(\"[SAP DATASPHERE] JDBC Driver not found. Error: \", e);\n    }\n  }\n\n\n  private void validateConnectionProperties(PNPConnectionsInfo pnpConnectionsInfo) {\n    Objects.requireNonNull(pnpConnectionsInfo, AdapterErrorMessages.CONNECTION_INFO_NULL.toString());\n    if (!SUPPORTED_AUTHORIZATION_TYPES.contains(pnpConnectionsInfo.getAuthorizationType())) {\n      throw new SystemException(UNSUPPORTED_AUTH_TYPE);\n    }\n\n    SAPDatasphereConnectionDetail sapDatasphereConnectionDetail = (SAPDatasphereConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n    Objects.requireNonNull(sapDatasphereConnectionDetail, AdapterErrorMessages.CONNECTION_INFO_NULL.toString());\n\n    if (AuthorizationType.BASIC_AUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n      String userName = DHUtils.valueOf(sapDatasphereConnectionDetail.getUser());\n      Object password = sapDatasphereConnectionDetail.getPwd();\n      String schemaName = DHUtils.valueOf(sapDatasphereConnectionDetail.getSchema());\n      String dbHost = DHUtils.valueOf(sapDatasphereConnectionDetail.getHost());\n\n      if (StringUtils.isBlank(userName) || Objects.isNull(password) || StringUtils.isBlank(schemaName) || StringUtils.isBlank(dbHost)) {\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"289fb46c-8b22-4df9-94cf-073f29146450","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightChangeEventDTO.java","startLine":91,"endLine":97,"content":"yDetails.getChangeDetails().stream()\n                .filter(fieldInfo->fieldInfo.getFieldName().equals(fieldName))\n                .findFirst()\n                .map(FieldChangeDetail::getFieldName)\n                .orElse(null);\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69a2c505-a15b-499a-8015-592a874b8a0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":69,"endLine":95,"content":"estTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        try (CloseableHttpClient httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();) {\n            HttpPost httpPost;\n            String uri = PRODUCTBOARD_BASE_ENDPOINT_URI + \"notes/search\";\n            data = new ArrayList<>();\n            httpPost = new HttpPost(uri);\n            httpPost.setHeader(AUTH_HEADER, BEARER + this.accessToken);\n            httpPost.setHeader(X_VERSION, \"1\");\n            StringEntity entity = new StringEntity(getNoteIdsAsJson(noteIds));\n            entity.setContentType(\"application/json\");\n            httpPost.setEntity(entity);\n            while (retryCount < 3) {\n                LOGGER.info(\"Retrieveing notes data from Productboard. Hitting : {}, Retry Count: {}\", uri, retryCount);\n                response = httpclient.execute(httpPost);\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    populateNotesData(data, response);\n                    return data;\n                } else {\n                    String errorMsg = String.format(\"Productboard api returned status code :%s. Reason received:%s\",\n                            response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n                    LOGGER.error(errorMsg);\n                    Thread.sleep(15 * (long)1000);\n                    retryCount += 1;\n                }\n            }\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba8763c9-6d9d-40d1-905a-0d0908e829f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/DataTypeMappings.java","startLine":74,"endLine":108,"content":"n decimalPlaces;\n    }\n\n    public void setDecimalPlaces(Integer decimalPlaces) {\n        this.decimalPlaces = decimalPlaces;\n    }\n\n    public DataType getGainsightDatatype() { return gainsightDatatype; }\n\n    public void setGainsightDatatype(DataType gainsightDatatype) { this.gainsightDatatype = gainsightDatatype; }\n\n    public List<DataType> getSupportedGainsightDatatypes() { return supportedGainsightDatatypes; }\n\n    public void setSupportedGainsightDatatypes(List<DataType> supportedGainsightDatatypes) { this.supportedGainsightDatatypes = supportedGainsightDatatypes; }\n\n    public boolean isSupported() { return supported; }\n\n    public void setSupported(boolean supported) { this.supported = supported; }\n\n    public Map<String, Object> getMeta() { return meta; }\n\n    public void setMeta(Map<String, Object> meta) { this.meta = meta; }\n\n    public String getFilterValueFormat() {\n        return filterValueFormat;\n    }\n\n    public void setFilterValueFormat(String filterValueFormat) {\n        this.filterValueFormat = filterValueFormat;\n    }\n\n    public boolean canBeIdentifier() { return canBeIdentifier; }\n\n    public void setCanBeIdentifier(boolean canBeIdentifier) { this.canBeIdentifier = canBeIdentifier; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01fd5a00-f208-4688-b983-2e18984f3f05","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":319,"endLine":338,"content":"esponse;\n        try {\n            clientEntityResponse = clientEntityRequest.execute();\n        } catch (Exception e) {\n            //Not an entity or attribute or optionset\n            LOGGER.error(\"Failed to fetch optionset\", e);\n            SystemException se = new SystemException(AdapterErrorMessages.FAILED_FETCHING_OPTIONSET.getTranslatedMessage(), DynamicsErrorCode.PNP_DYNAMICS_UNABLE_TO_FETCH_OPTIONSET, HttpStatus.SC_BAD_REQUEST); //yes, bad request\n            se.setUiMessage(e.getMessage());\n            throw se;\n        }\n        ClientEntity clientEntity = clientEntityResponse.getBody();\n        String metadataName = clientEntity.getTypeName().getName();\n        if (!\"PicklistAttributeMetadata\".equalsIgnoreCase(metadataName) && !\"StateAttributeMetadata\".equalsIgnoreCase(metadataName) && !\"StatusAttributeMetadata\".equalsIgnoreCase(metadataName) && !\"MultiSelectPicklistAttributeMetadata\".equalsIgnoreCase(metadataName)){\n            throw new SystemException(AdapterErrorMessages.NOT_AN_OPTIONSET.getTranslatedMessage(), DynamicsErrorCode.PNP_DYNAMICS_NOT_AN_OPTIONSET, HttpStatus.SC_BAD_REQUEST);\n        }\n        uriBuilder = client.newURIBuilder(MSDynamicsContext.getApiUrl() + relativePath + \"/\" + clientEntity.getTypeName().getFullQualifiedNameAsString() + \"?$expand=OptionSet\");\n        uri = uriBuilder.build();\n        clientEntityRequest = client.getRetrieveRequestFactory().getEntityRequest(uri);\n        clientEntityResponse = clientEntityRequest.execute();\n       ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2c2d26e-ff49-49d9-8ca5-3f4d45fa7a10","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPDatasphereChannelFactory.java","startLine":28,"endLine":38,"content":"Detail, AdapterErrorMessages.CONNECTION_INFO_NULL.toString());\n\n    if (AuthorizationType.BASIC_AUTH.equals(authorizationType)) {\n      Objects.requireNonNull(sapDatasphereConnectionDetail.getUser(), AdapterErrorMessages.USERNAME_NULL.toString());\n      Objects.requireNonNull(sapDatasphereConnectionDetail.getPwd(), AdapterErrorMessages.PASSWORD_NULL.toString());\n    }\n    Objects.requireNonNull(sapDatasphereConnectionDetail.getSchema(), AdapterErrorMessages.SCHEMA_NAME_NULL.toString());\n    Objects.requireNonNull(sapDatasphereConnectionDetail.getHost(), AdapterErrorMessages.DATABASE_HOST_NULL.toString());\n    return new GainsightSAPHanaDatasphereServiceImpl(pnpConnectionsInfo, isValueEncrypted, authorizationType);\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"975c776e-cede-44be-ba9f-6f5cf98933cd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelFactory.java","startLine":95,"endLine":105,"content":"Token\", e);\n            throw e;\n        }\n        return accountMap;\n    }\n\n    private String getAuthorizationHeader(String clientId, String clientSecret) {\n        byte[] authorizationHeader = Base64.encodeBase64((clientId + COLON_SEPARATOR + clientSecret).getBytes());\n        return new String(authorizationHeader);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c2bcddd-4492-491b-9ba0-99000a8264d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":170,"endLine":188,"content":"tContextProvider.getTenantId());\n            for (String projection : expandGroup) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                String sourceLookupField = mappedSourceColumns[0];\n                String propertyValue = masterLookUpConfiguration.get(objectDefinition.getLabelPlural() + \"@@\" + sourceLookupField);\n                if (Objects.nonNull(propertyValue)) {\n                    String newExpandProjection;\n                    if (mappedSourceColumns.length == 3) {\n                        newExpandProjection = StringUtils.replaceOnce(projection, mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1], propertyValue);\n                    } else {\n                        newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    }\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Optional<GSFieldDefinition> gsFieldDefinitionOptional;\n                    if (modifiedExpandToOriginalFieldName.containsKey(projection)) {\n                        gsFiel","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7a447ec-a9d9-483e-bcd5-c979a40903f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":92,"endLine":102,"content":"dDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n                }\n                break;\n            case MEETING:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsi","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd7a2bae-74ff-4626-a29c-fd26a0c6442e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelServiceImpl.java","startLine":91,"endLine":115,"content":"/\" + subDomain + \".aha.io/\"  + GainsightAhaEntityEnum\n                    .getDataApiPath(GainsightAhaEntityEnum.getInstance(entityName));\n\n        uriBuilder = getUriBuilder(url, pageSize, pageNumber, updatedSince);\n        return uriBuilder;\n    }\n\n    private URIBuilder getUriBuilder(String url, int pageSize, int pageNumber, String updatedSince) throws Exception {\n        URIBuilder uriBuilder;\n        switch (this.authenticationType) {\n            case API_KEY:\n                uriBuilder = new URIBuilder(url)\n                        .addParameter(\"per_page\", String.valueOf(pageSize))\n                        .addParameter(\"page\", String.valueOf(pageNumber));\n                if(StringUtils.isNotEmpty(updatedSince)) {\n                    uriBuilder.addParameter(\"updated_since\", updatedSince);\n                }\n                break;\n\n            default:\n                throw new Exception(\"[AHA] Unsupported Authentication Type.\");\n        }\n        return uriBuilder;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4307dd7a-d463-4f95-b074-ffaba231e56e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/RTSWritebackConfigurationStatus.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.rts.dto;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * @author puneetsaluja\n * @created 07/05/22\n */\n@Slf4j\npublic enum RTSWritebackConfigurationStatus {\n    IN_PROGRESS, COMPLETED, FAILED;\n\n    RTSWritebackConfigurationStatus getValue(String value) {\n        try {\n            if (StringUtils.isEmpty(value)) {\n                return null;\n            }\n            return RTSWritebackConfigurationStatus.valueOf(value);\n        } catch (Exception ex) {\n            log.error(\"Invalid type: {}\", value, ex);\n        }\n        return null;\n    }\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"588b61b5-c4e4-4e12-8239-308512ffa59b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":785,"endLine":813,"content":"\"Failed to connect to Databricks due to %s\", ex.getMessage());\n            SystemException systemException = new SystemException(errorMsg, ex);\n            systemException.setUiMessage(errorMsg);\n            throw systemException;\n        }\n        return connection;\n    }\n\n    private File getTrustStore(String sslCertificateContent) throws Exception {\n        File sslCertificate = null;\n        try {\n            KeyStore truststore = KeyStore.getInstance(KeyStore.getDefaultType());\n            truststore.load(null, null);\n\n            sslCertificate = Files.createTempFile(RequestContextProvider.getTenantId() + UNDERSCORE + UUID.randomUUID(), \".cer\").toFile();\n            try {\n                decodeBase64ToFile(sslCertificateContent, sslCertificate);\n                LOGGER.info(\"SSL Certificate File decoded successfully\");\n            } catch (IOException ex) {\n                LOGGER.error(\"Error decoding SSL Certificate File {}\" + ex.getMessage(), ex);\n                throw new SystemException(\"Error decoding SSL Certificate File\", ex);\n            }\n\n            // Load certificates from files and import them into the truststore\n            addCertificateToTruststore(truststore, sslCertificate, ALIAS_ROOT);\n\n            // Save the truststore to a file\n            File trustStoreFile = new File(RequestContextProvider.getTenantId() + UNDERSCORE + UUID.randomUUID() + UNDERSCORE + \"truststore.jks\");\n            try (FileOutputStream fos = new FileOutputStream(trustStoreFile))","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d02a8363-c5ee-45ce-b997-d85d42fab0c9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":98,"endLine":128,"content":"SSING_ERROR = \"Error occurred while performing action\";\n  private static final String UNSUPPORTED_AUTH_TYPE = \"Unsupported authorization type\";\n  private static final List<AuthorizationType> SUPPORTED_AUTHORIZATION_TYPES = Lists.newArrayList(AuthorizationType.BASIC_AUTH);\n\n  private Connection connection;\n  private String schema;\n  private String dbHost;\n  private String userName;\n  private String password;\n  private String connectionUrl;\n\n\n  public GainsightSAPHanaDatasphereServiceImpl(PNPConnectionsInfo pnpConnectionsInfo, boolean isValueEncrypted, AuthorizationType authorizationType) {\n    try {\n      validateConnectionProperties(pnpConnectionsInfo);\n      SAPDatasphereConnectionDetail connectionDetail = (SAPDatasphereConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n      this.schema = connectionDetail.getSchema();\n      Properties prop = new Properties();\n      switch (authorizationType) {\n        case BASIC_AUTH:\n          this.userName = connectionDetail.getUser();\n          this.password = (isValueEncrypted ? CryptHandler.getInstance().decrypt((byte[]) connectionDetail.getPwd()) :\n                  connectionDetail.getPwd().toString());\n          prop.put(USERNAME, this.userName);\n          prop.put(PASSWORD, this.password);\n          break;\n        default:\n          throw new SystemException(String.format(\"[SAP DATASPHERE] Authorisation type %s not supported\", authorizationType));\n      }\n      this.dbHost = connectionDetail.getHost();\n      this.connectio","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0921106a-4581-4665-8572-cbf91c4e7b77","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":188,"endLine":220,"content":"sInObject));\n            BaseTokenDetail tokenDetail =\n                    new BaseTokenDetail(CryptHandler.getInstance().encrypt(GainsightUtils.valueOf(map.get(\"access_token\"))),\n                            null, expiresIn, GainsightUtils.valueOf(map.get(\"token_type\")));\n            tokenDetail.setClientId(SecretData.fromValue(clientId));\n            tokenDetail.setClientSecret(SecretData.fromValue(clientSecret));\n            pnpConnectionsInfo.setTokenDetail(tokenDetail);\n        } catch (SystemException ex) {\n            throw ex;\n        } catch (Exception exception) {\n            LOGGER.error(\"Exception while authenticating Dynamics connection. {}\", exception.getMessage(), exception);\n            throw exception;\n        } finally {\n            if (Objects.nonNull(httpclient)) {\n                IOUtils.closeQuietly(httpclient);\n            }\n        }\n    }\n\n    public static String getReferencingAttribute(String lookupField, String lookupFieldTargetEntity) {\n        if (!UCConstants.OWNER_ID.equalsIgnoreCase(lookupField)) {\n            return lookupField;\n        }\n        if (UCConstants.SYSTEM_USER.equalsIgnoreCase(lookupFieldTargetEntity)) {\n            return UCConstants.OWNING_USER;\n        } else if (UCConstants.TEAM.equalsIgnoreCase(lookupFieldTargetEntity)) {\n            return UCConstants.OWNING_TEAM;\n        } else {\n            return lookupField;\n        }\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"78983a56-bc4b-49ea-9aa8-a7c390b24b32","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/FieldChangeDetail.java","startLine":1,"endLine":19,"content":"package com.gainsight.integration.rts.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n/**\n * @author puneetsaluja\n * @created 28/05/22\n */\n@Getter\n@Setter\n@ToString\npublic class FieldChangeDetail {\n    private String fieldName;\n    private Object value;\n    private Object oldValue;\n    private boolean eventEnabled;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"76786c47-9ca7-455d-ace0-547f95d7faa0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":137,"endLine":145,"content":"ode) picklistObj).put(picklistField, pickListLabel);\n                    LOGGER.info(\"Resolved picklist value for field {} with value {}\", fieldName, pickListLabel);\n                } else {\n                    LOGGER.info(\"Failed to update picklist value for field {}. JsonNode is not an ObjectNode!!\", fieldName);\n                }\n            }\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d47e7c8f-036c-4ee8-a53d-4b3c2018a657","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":391,"endLine":418,"content":"ACKTICK + objectName + BACKTICK;\n        Set<Map<String, Object>> result;\n        try (PreparedStatement preparedStatement = connection.prepareStatement(String.format(\"DESCRIBE TABLE %s\", tableAbsolutePath))) {\n            result = nullSafeSet(executeWithMapSetHandler(preparedStatement, ignorableSystemFields));\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Failed to fetch fields from Databricks: {}\", sqlException.getMessage(), sqlException);\n            throw new SystemException(String.format(\"Failed to connect to Databricks due to %s\", sqlException.getMessage()));\n        } finally {\n            closeQuietly(this.connection, null, null);\n        }\n        return result;\n    }\n\n    @Override\n    public void authenticate() {\n        String tableAbsolutePath = BACKTICK + this.schema + BACKTICK + DOT + BACKTICK + this.db + BACKTICK;\n        try (PreparedStatement preparedStatement = connection.prepareStatement(String.format(\"SHOW TABLES FROM %s\", tableAbsolutePath))) {\n            preparedStatement.executeQuery();\n        } catch (Exception exception) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", exception.getMessage(), exception);\n            throw new SystemException(String.format(\"Failed to connect to Databricks due to %s\", exception.getMessage()));\n        } finally {\n            closeQuietly(this.connection, null, null);\n        }\n    }\n\n    @Override\n    public Integer executeInsert(String absoluteObj","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84cddfec-96dc-4c08-9c2a-241651a6c8dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":105,"endLine":135,"content":", clientSecret, refreshToken);\n           return gainsightHubspotChannelService.getEntityProperties(entityName);\n       }catch (Exception e){\n           LOGGER.error(e.getMessage(),e);\n           return null;\n       }\n    }\n\n    @Override\n    public HttpResponse getEntityPropertiesLatestCaas(String entityName, String clientId, String clientSecret, String refreshToken) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.getEntityPropertiesLatestCaas(entityName,null);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n\n/*    private List<String> getAllPropertiesOfEntity(String entityName, GainsightHubspotChannelFactory gainsightHubspotChannelFactory) throws IOException {\n        List<String> properties = Lists.newArrayList();\n        InputStream inputStream = getEntityProperties(entityName, gainsightHubspotChannelFactory);\n        JsonNode jsonTree = OBJECT_MAPPER.readTree(inputStream);\n        jsonTree.getElements().forEachRemaining(jsonNode -> properties.add(jsonNode.get(\"name\").asText()));\n        return properties;\n    }*/\n\n    @Override\n    public HashMap<String, List<String>> getAssociatedObjects(List<String> objectIds, String hubspotAssociation, String clientId, String clientSecret, String refreshToken) {\n        HashMap<S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef483416-8f57-46ea-aa78-24fd8bba8e2c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":500,"endLine":517,"content":"ld);\n                if (Objects.nonNull(propertyValue)) {\n                    String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Column column = msDynamicsObject.getColumn(sourceLookupField);\n                    Optional<Relationship> relationshipOptional = Optional.empty();\n                    if (Objects.nonNull(column)) {\n                        String targetObjectOfLookupField = column.getTargetObject();\n                        String referencingAttribute = getReferencingAttribute(sourceLookupField, targetObjectOfLookupField);\n                        relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be ma","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c4ef415-858d-4350-9042-12868f3e51d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":1,"endLine":35,"content":"package com.gainsight.integration.connector.snowflake;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\n\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\n\npublic class GainsightSnowflakeChannelFactory {\n\n    private static final String USERNAME = \"username\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSnowflakeChannelFactory.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6ddbe0f-2b8a-4e6b-ae45-4e0c3d65c183","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":58,"endLine":83,"content":"SERNAME =\"username\";\n    private static final String ACCESS_TOKEN_KEYWORD = \"access_token\";\n    private static final String EXPIRES_IN_KEYWORD = \"expires_in\";\n    private Connection connection;\n    private String db;\n    private String schema;\n    @Autowired\n    private PNPConnectionInfoDao pnpConnectionsInfoDao;\n\n    public GainsightSnowflakeChannelServiceImpl(PNPConnectionsInfo pnpConnectionsInfo) {\n        if(ObjectUtils.isNotEmpty(pnpConnectionsInfo.getAuthorizationType())) {\n            Map propertie =pnpConnectionsInfo.getProperties().containsKey(IPaasConstants.IPAAS_PROPERTIES)? (Map)pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES):(Map) pnpConnectionsInfo.getProperties();\n\n            this.schema = propertie.get(DATASET_ID).toString();\n            this.db = propertie.get(DATABASE_NAME).toString();\n            String connectionUrl = SNOWFLAKE_BASE_URL + propertie.get(DATABASE_HOST).toString();\n            Properties properties = new Properties();\n\n            properties.put(DB, this.db);\n            properties.put(SCHEMA, this.schema);\n            properties.put(USER, propertie.get(USERNAME).toString());\n            properties.put(WAREHOUSE, propertie.get(WAREHOUSE).toString());\n            propertie.put(CLIENT_SESSION_KEEP_ALIVE, Boolean.TRUE.toString());\n            switch (pnpConnectionsInfo.getAuthorizationType()) {\n                case BASIC_AUTH:\n                    properties.put(PASSWORD, CryptHandler.getInstance().decrypt((byte[]) (prope","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fd0cf8a-80e5-4668-b006-5ac7e03a2d19","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":783,"endLine":813,"content":" DHUtils.valueOf(sapDatasphereConnectionDetail.getHost());\n\n      if (StringUtils.isBlank(userName) || Objects.isNull(password) || StringUtils.isBlank(schemaName) || StringUtils.isBlank(dbHost)) {\n        throw new SystemException(PROPERTIES_MISSING_ERROR);\n      }\n    }\n  }\n\n  private Connection createConnection(String connectionUrl, Properties properties) {\n    Connection connection;\n    try {\n      log.info(\"[SAP DATASPHERE] Creating connection to SAP HANA\");\n      DriverManager.registerDriver(new com.sap.db.jdbc.Driver());\n      connection = DriverManager.getConnection(connectionUrl, this.userName, this.password);\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] Connection creation failed: \" + ex.getMessage());\n      String errorMsg = String.format(\"[SAP DATASPHERE] Failed to connect to source due to %s\", ex.getMessage());\n      SystemException systemException = new SystemException(errorMsg, ex);\n      systemException.setUiMessage(errorMsg);\n      throw systemException;\n    }\n    return connection;\n  }\n\n  private long getTotalRecordsCount(String absolutePathToTable) throws SQLException {\n    long rowCount = 0l;\n    ResultSet resultSet = null;\n    try (PreparedStatement preparedStatement = this.connection.prepareStatement(String.format(TOTAL_RECORDS_QUERY, absolutePathToTable))) {\n      log.info(\"[SAP DATASPHERE] Executing query to get total records count: {}\", preparedStatement);\n      resultSet = preparedStatement.executeQuery();\n      if (resultSet.next())","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5398ae75-ef7c-4981-bfe5-87b479918faa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":110,"endLine":134,"content":" : String.valueOf(object);\n    }\n\n    public static Integer parseToInteger(String data) {\n        if (StringUtils.isBlank(data) || StringUtils.equalsIgnoreCase(data, NULL)) {\n            return null;\n        }\n        return Integer.valueOf(data);\n    }\n\n    public static void setDynamicsCtx(PNPConnectionsInfo pnpConnectionsInfo) {\n        GainsightPrecondition.assertNotNull(pnpConnectionsInfo, CoreErrorCode.INVALID_REQUEST);\n\n        if (StringUtils.isNotEmpty(pnpConnectionsInfo.getConnectionId())) {\n            GainsightPrecondition.assertTrue((pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED) || pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED_AND_LINKED))\n                    , CoreErrorCode.INVALID_REQUEST, \"Connection is not authorised to perform this operation !!\", HttpStatus.SC_BAD_REQUEST);\n        }\n\n        MSDynamicsAuthInfo msDynamicsAuthInfo = new MSDynamicsAuthInfo();\n        msDynamicsAuthInfo.setResourceUri(GainsightUtils.valueOf(pnpConnectionsInfo.getProperties().get(DYNAMICS_ORG_URI)));\n\n        if (AuthorizationType.M2M_OAUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n            msDynamicsAuthInfo.setClientId((String) pnpConnectionsInfo.getProperties().get(OAUTH_CLIENT_ID));\n            msDynamicsAuthInfo.setClientSecret(CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(OAUTH_CLIENT_SECRET)));\n            msDynamicsAuthInfo.setTenantId((String) pnpConnectionsIn","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d868ea08-597d-401e-bfaf-8d74b90a8767","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/PaginationDetails.java","startLine":1,"endLine":48,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class PaginationDetails implements Serializable {\n  private static final long serialVersionUID = -1L;\n\n  private Object responseKey;\n  @JsonProperty(value = \"isUrl\")\n  private boolean isUrl;\n  @JsonProperty(value = \"isQueryParam\")\n  private boolean isQueryParam;\n  private String requestKey;\n  private String dataType;\n\n  public Object getPaginationValueFromResponse(JsonNode apiResponse) {\n    if (this.responseKey == null)\n      return null;\n    Object responseKeys = this.responseKey;\n    if (responseKeys instanceof String) {\n      return getValueFromPath(apiResponse, (String) responseKeys);\n    } else if (responseKeys instanceof List) {\n      List<String> responseKeyList = (List<String>) responseKeys;\n      Object result = null;\n      switch (this.dataType.toLowerCase()) {\n        case \"string\":\n          result = \"\";\n          for (String responseKey : responseKeyList) {\n            if (apiResponse.get(responseKey) == null)\n              return null;\n            result += apiResponse.get(responseKey).asText();\n          }\n          break;\n        case \"number\":\n          result = 0L;\n          for","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cdaa5837-b70b-4f84-af13-8c34404801d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":475,"endLine":498,"content":"ap<String, String> colNameToDataType, int batchSize, String[] header, List<File> failureFiles,\n                                               List<File> successFiles, CSVReader csvReader) throws Exception {\n    String absolutePathToTempStageTable = null;\n    String errorMessages = null;\n\n    List<String[]> data = new ArrayList<>();\n    String[] nextRecord;\n    int count = 0;\n    int batchCount = 1;\n\n    try (Statement statement = this.connection.createStatement()) {\n      absolutePathToTempStageTable = String.format(TEMP_STAGE_TABLE_NAME, this.schema, targetObject, UUID.randomUUID().toString().substring(0, 5));\n      String columnsClause = Joiner.on(COMMA).join(\n              columnMappings.stream().map(columnMapping -> DOUBLE_QUOTE + columnMapping.getFieldName() + DOUBLE_QUOTE + SPACE + colNameToDataType.get(columnMapping.getFieldName())).collect(Collectors.toList())\n      );\n\n      //Create temporary stage table\n      String tempStageTableCreationQuery = String.format(CREATE_TEMP_STAGE_TABLE_QUERY, absolutePathToTempStageTable, columnsClause);\n      log.info(\"[SAP DATASPHERE] Creating temp stage table with query: {}\", tempStageTableCreationQuery);\n      statement.execute(tempStageTableCreationQuery);\n      log.info(\"[SAP DATASPHERE] Successfully created temp stage table\");\n\n      Map<String, String> headerNameToColumnNameMap = columnMappings.stream().collect(Collectors.toMap(ColumnMapping::getHeaderName, ColumnMapping -> ColumnMapping.getFieldName()));\n      List<String> he","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9ca614f-c2d6-4bda-8ea4-b820ba848f6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":26,"endLine":63,"content":"ort org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.entity.mime.content.StringBody;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.client.HttpClients;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static org.apache.http.entity.ContentType.MULTIPART_FORM_DATA;\n\n\n/**\n * @author : vipinsharma\n * @createdOn : 24 Jun 2019 :: 17:15\n **/\npublic class GainsightHubspotChannelServiceImpl implements GainsightHubspotChannelService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightHubspotChannelServiceImpl.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    //    private static final String BASE_API_URL = HubspotUrlUtil.getAPIDomain();// todo need to revisit this, commented due to dh\n    private static final String BASE_API_URL = \"https://api.hubapi.com/\";\n\n    private static final String IMPORT_END_POINT = \"crm/v3/imports\";\n    private static final String HAPIKEY = \"hapikey\";\n    private static final String LIMIT = \"limit\";\n    private static final String PROPERTIES = \"properties\";\n    private static","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce394ca1-fe90-4cc2-9cfd-6d6581629184","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":152,"endLine":173,"content":"Id, String clientSecret,\n                                                                             String refreshToken, String accessToken) {\n        List<String> associationsResult = new ArrayList<>();\n        try{\n            GSHubspotAssociationEnum gsHubspotAssociationEnumType = GSHubspotAssociationEnum.getInstance(hubspotAssociation);\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            associationsResult = gainsightHubspotChannelService.getAssociatedObjectsLegacy(gsHubspotAssociationEnumType, objectId);\n            return associationsResult;\n        }catch (Exception e){\n            LOGGER.error(String.format(\"[HUBSPOT] Error while getting association for %s \", hubspotAssociation),e);\n            return associationsResult;\n        }\n    }\n\n    @Override\n    public List<String> getAssociatedObjectswithAccessTokenLatest(String objectId, String hubspotAssociation,\n                                                                  String clientId, String clientSecret,\n                                                                  String refreshToken, String accessToken) {\n        List<String> associationsResult = new ArrayList<>();\n        try{\n            GSHubspotAssociationEnum gsHubspotAssociationEnumType = GSHubspotAssociationEnum.getInstance(hubspotAssociation);\n            GainsightHubspotChannelService","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1fb8ef96-a398-4adb-9496-d9c11aec3732","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/bean/GainsightMSTeamsFieldDescription.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.msteams.bean;\n\npublic class GainsightMSTeamsFieldDescription {\n    private String name;\n    private String label;\n    private String type;\n    private String description;\n    private String apiName;\n\n    public String getName() { return name; }\n\n    public void setName(String name) { this.name = name; }\n\n    public String getLabel() { return label; }\n\n    public void setLabel(String label) { this.label = label; }\n\n    public String getType() { return type; }\n\n    public void setType(String type) { this.type = type; }\n\n    public String getDescription() { return description; }\n\n    public void setDescription(String description) { this.description = description; }\n\n    public String getApiName() { return apiName; }\n\n    public void setApiName(String apiName) { this.apiName = apiName; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8b2facbe-b735-46df-b77b-fcc2dcaf741e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":473,"endLine":504,"content":"Patch);\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] Error in Updating single data\", exception);\n                return response;\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Updating single data\", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse uploadBulkData(HubspotBulkImportBean hubspotBulkImportBean, File file) throws Exception {\n        HttpResponse httpResponse = null;\n        try {\n            String url = BASE_API_URL + IMPORT_END_POINT; //todo change to oauth\n            CloseableHttpClient httpClient = HttpClients.createDefault();\n            StringBody userBody = new StringBody(new ObjectMapper().writeValueAsString(hubspotBulkImportBean), MULTIPART_FORM_DATA);\n            FileBody fileBody = new FileBody(file, MULTIPART_FORM_DATA);\n            MultipartEntityBuilder entityBuilder = MultipartEntityBuilder.create();\n            entityBuilder.addPart(\"files\", fileBody);\n            entityBuilder.addPart(\"importRequest\", userBody);\n\n            HttpPost httpPost = new HttpPost(url);\n            httpPost.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n            HttpEntity entity = entityBuilder.build();\n            httpPost.setEntity(entity);\n            httpResponse = httpClient.execute(httpPost);\n        } catch (Exception excep","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4f3cdf1b-d120-4a04-b8d9-be330b49837d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":103,"endLine":132,"content":"uery).build();\n        return readEntitiesIntoStream(absoluteUri,client);\n    }\n\n    @Override\n    public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitiesWithFilter(String serviceUri, String entitySetName, String filterName, ODataClient client) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).filter(filterName).build();\n        return readEntities(absoluteUri,client);\n    }\n\n\n    private ClientEntity readEntity(URI absoluteUri, ODataClient client) {\n        ODataEntityRequest<ClientEntity> request = client.getRetrieveRequestFactory().getEntityRequest(absoluteUri);\n        request.setAccept(CONTENT_TYPE_APPLICATION_JSON);\n        ODataRetrieveResponse<ClientEntity> response = request.execute();\n        return response.getBody();\n    }\n\n/*    private ClientEntity loadEntity(String path, ODataClient client) throws ODataDeserializerException {\n        InputStream input = getClass().getResourceAsStream(path);\n        return client.getBinder().getODataEntity(client.getDeserializer(ContentType.APPLICATION_JSON).toEntity(input));\n    }*/\n\n\n    private ClientEntity createEntity(Edm edm, URI absoluteUri, ClientEntity ce, ODataClient client) {\n        ODataEntityCreateRequest<ClientEntity> request = client.getCUDRequestFactory().getEntityCreateRequest(absoluteUri, ce);\n        request.setAccept(ACCEPT);\n        ODataEntityCreateResponse<ClientEntity> response = request.execute();\n        return response.getBody();\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96e9672d-16b9-482c-aeaf-6d499ce3b70a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":607,"endLine":644,"content":"  }else if(!extractFile.exists()){\n                LOGGER.info(\"Creating an emptyFile as the record Value is empty\");\n                extractFile.createNewFile();\n            }\n        } catch (SQLException e) {\n            LOGGER.error(\"error occured while snowflake fetch using pagination {}\",e);\n            throw new RuntimeException(e);\n        } catch (Exception e) {\n            LOGGER.error(\"error occured while snowflake fetch using pagination {}\",e);\n            throw new RuntimeException(e);\n        } finally {\n            if (resultSet != null) {\n                resultSet.close();\n            }\n            if (stat != null) {\n                stat.close();\n            }\n            if (preparedStatement != null) {\n                preparedStatement.close();\n            }\n        }\n        LOGGER.info(\"size of file {}\",extractFile);\n        return Collections.singletonList(extractFile);\n    }\n\n    public static void createJsonFileToSendToConsumers(List<Map<String, Object>> destPayload, File localFile) throws IOException {\n        BufferedWriter br = null;\n        FileWriter fr = null;\n        try {\n            LOGGER.info(\"fileSize {}\",localFile.length());\n            fr = new FileWriter(localFile, true);\n            br = new BufferedWriter(fr);\n            Gson gson = new Gson();\n            for (Map<String, Object> payload : destPayload) {\n                String json = gson.toJson(payload);\n                br.write(json + \"\\n\");\n            }\n        } catch (IOExcepti","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"117e52be-a4e9-4b2b-aeff-ecd9fb6f5387","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/HubspotFilterGroups.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotFilterGroups {\n    private List<HubspotFilters>  filters;\n\n    public HubspotFilterGroups() {\n    }\n\n    public HubspotFilterGroups(List<HubspotFilters> filters) {\n        this.filters = filters;\n    }\n\n    public List<HubspotFilters> getFilters() {\n        return filters;\n    }\n\n    public void setFilters(List<HubspotFilters> filters) {\n        this.filters = filters;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d8abc4d3-8037-4427-96e6-3448ea9200b0","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":71,"endLine":111,"content":"limit=100&associations=deal\",\n                 \"crm/v3/properties/line_items\",\"crm/v3/objects/line_items\",\"line_items\"),\n\n    FEEDBACK_SUBMISSION(\"FEEDBACK_SUBMISSION\", \"\", null,\n                      \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"feedback_submissions\", \"properties\", \"crm/v3/objects/feedback_submissions?limit=100&associations=deal\",\n                      \"crm/v3/properties/feedback_submissions\",\"crm/v3/objects/feedback_submissions\",\"feedback_submissions\");\n\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, GSHubSpotEntityEnum> ENTITY_MAP = new HashMap<>();\n    private static final String API_VERSION_LATEST = \"latest\";\n    private static final String PROPERTIES = \"properties\";\n\n\n    static {\n        for (GSHubSpotEntityEnum type : values()) {\n            ENTITY_MAP.put(type.label, type);\n        }\n    }\n\n    private String legacyDataApiPath;\n    private String sinceDataApiPath;\n    private String legacyMetaDataApiPath;\n    private String label;\n    private String queryOffset;\n    private String retrieveOffset;\n    private String lastModifiedKeyWord;\n    private String hasMoreKeyWord;\n    private String pluralName;\n    private String queryProjectionKeyWord;\n    private String latestDataApiPath;\n    private String latestMetaDataApiPath;\n\n    private String writeDataApiPath;\n\n    private String writeDataObjectName;\n\n    GSHubSpotEntityEnum(String label, String legacyDataApiPath, String","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be3259f5-fd49-4bec-a6d5-5a12b5007513","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":58,"endLine":84,"content":"clientId, clientSecret, refreshToken)) {\n                    SalesforceToken accessTokenFromCache = getTokenFromCache(pnpConnectionsInfo);\n                    if (accessTokenFromCache != null) {\n                        return accessTokenFromCache;\n                    } else {\n                        SalesforceToken salesforceToken = generateToken(pnpConnectionsInfo);\n                        String key = constructCacheKey(pnpConnectionsInfo);\n                        TOKEN_CACHE.put(key, salesforceToken);\n                        return salesforceToken;\n                    }\n                } else {\n                    LOGGER.error(\"Refresh token null for tId:{} connectionId:{} connectionName:{}\", tenantId, connectionId, connectionName);\n                }\n            } else {\n                LOGGER.error(\"baseTokenDetail not present in connection. tId:{} connectionId:{} connectionName:{}\", tenantId, connectionId, connectionName);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in token generation tId:{} connectionId:{} connectionName:{}\", tenantId, connectionId, connectionName, e);\n            throw new SystemException(e.getMessage(), e);\n        }\n        return accessToken;\n    }\n\n    public SalesforceToken accessToken(PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret, String refreshToken) throws SystemException {\n        SalesforceToken accessToken = null;\n        String tenantId = pnpConnectionsInfo.getTenantId();\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54ec9488-8860-4408-bf4a-2bdec05689df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaService.java","startLine":21,"endLine":26,"content":"icsObject> listAllObjects(MSDynamicsObjectQuery msDynamicsObjectQuery);\n    OptionSet describeOptionSet(String objectLogicalName, String columnLogicalName);\n    List<Relationship> listRelationships(String objectLogicalName, RelationshipType relationshipType);\n    ObjectDefinition getObjectAttributes(String object, boolean resolvePicklistOptions, PNPConnectionsInfo pnpConnectionsInfo,\n                                         boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"760329eb-40f7-4e47-b1fb-c4a81c5feff0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":301,"endLine":321,"content":">= FILE_SIZE_THRESHOLD_IN_BYTES) {\n                    fos.close();\n                    bos.close();\n                    file = new File(filePath + fileNamePrefix + \"_\" + UUID.randomUUID() + CSV_EXTENSION);\n                    fileList.add(file);\n                    fos = new FileOutputStream(file, true);\n                    bos = new OutputStreamWriter(fos, StandardCharsets.UTF_8);\n                    writerBuilder = new CSVWriterBuilder(new BufferedWriter(bos));\n                    writerBuilder.withEscapeChar('\"').withQuoteChar('\"').withSeparator(',');\n                    icsvWriter = writerBuilder.build();\n                }\n                LOGGER.info(\"File Path : {}\", file.getAbsolutePath());\n                SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n                Map<String, Object> headers = Maps.newHashMap();\n                headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);\n                headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n                String url = salesforceToken.getInstanceURL() + SALESFORCE_SERVICE_DATA + sfdcApiVersion +\n                        String.format(SALESFORCE_BATCH_RESULT_CSV, sfdcJobId, batchId, resultId.get(i));\n                HttpResponse response = httpUrlConnectionUtils.get(url, headers, 60000, true, null);\n                if (response.getResponseCode() == HttpStatus.SC_OK) {\n                    //check file content before u","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fcd2c741-804d-467b-a17d-da830d274775","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":58,"endLine":91,"content":"   response = httpClient.execute(httpGet);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                LOGGER.error(\"Error occured at the time of fetching custom object {}\",responseMap.get(\"message\").toString());\n            }\n            return responseMap;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occured at the time of fetching tables/object {}\", e);\n            return null;\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n    }\n\n\n    public String getZuoraWhereClause(FilterRule rules) {\n        try {\n           List<String> whereClauses = Lists.newArrayList();\n            rules.getRules().forEach(rule -> {\n                whereClauses.addAll(buildRule(rule));\n            });\n            String joiner =\n                    rules.getCondition() != null\n                            ? rules.getCondition().getSpaceWrappedFilterCondition()\n                            : StringUtils.SPACE;\n            return Joiner.on(joiner).join(whereClauses);\n        } catch (Exception e) {\n            LOGGER.error(\"exception occured while creating jql query {}\", e);\n            throw new RuntimeException(e);\n        }\n    }\n    private static List<String> buildRule(FilterRule rule) {\n        StringBuilder stringBuilder = ne","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24bf774b-093f-4da3-ba52-498db0c64094","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":35,"endLine":65,"content":"c void getValuesFromFilter(Criteria criteria, Set<String> values, String fieldName, FilterOperator operatorType) {\n        if (criteria != null) {\n            if (criteria.getFilters() != null) {\n                for (Criteria filter : criteria.getFilters()) {\n                    getValuesFromFilter(filter, values, fieldName, operatorType);\n                }\n                return;\n            }\n            if (criteria.getFieldName().equalsIgnoreCase(fieldName) && operatorType.equals(criteria.getOperatorType()))\n                values.add(criteria.getValues().toString());\n        }\n    }\n\n    public static void getValuesFromFilter(FilterRule filterRule, Set<String> values, String fieldName, FilterOperator operatorType) {\n        if (filterRule != null) {\n            if (filterRule.getRules() != null) {\n                for (FilterRule filter : filterRule.getRules()) {\n                    getValuesFromFilter(filter, values, fieldName, operatorType);\n                }\n                return;\n            }\n            if (filterRule.getFieldInfo().getJsonPath().equalsIgnoreCase(fieldName) && operatorType.equals(filterRule.getOp()))\n                values.add(filterRule.getValues().get(0).getValue().toString());\n        }\n    }\n\n    public static void getValuesFromFilter(FilterRule filterRule, Set<String> values, String fieldName) {\n        if (filterRule != null) {\n            if (filterRule.getRules() != null) {\n                for (FilterRule filter : filterRule.getRules()) {\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf0626e7-cb0e-4be1-b792-f8d351e4a9da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPIntegrationChannel.java","startLine":117,"endLine":137,"content":"ontainer entityContainer = new CsdlEntityContainer();\n    entityContainer.setName(CONTAINER_NAME);\n    entityContainer.setEntitySets(entitySets);\n\n    return entityContainer;\n  }\n\n  @Override\n  public CsdlEntityContainerInfo getEntityContainerInfo(FullQualifiedName entityContainerName) {\n\n    // This method is invoked when displaying the com.gainsight.integration.connector.dynamics.service document at e.g.\n    // http://localhost:8080/DemoService/DemoService.svc\n    if (entityContainerName == null || entityContainerName.equals(CONTAINER)) {\n      CsdlEntityContainerInfo entityContainerInfo = new CsdlEntityContainerInfo();\n      entityContainerInfo.setContainerName(CONTAINER);\n      return entityContainerInfo;\n    }\n\n    return null;\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7de5f6f8-46fb-4cfa-9919-b4a5fd00b7dd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":85,"endLine":117,"content":"Conn = null;\n        try {\n            String queryParamsString = buildQueryParams(queryParams);\n            if (queryParamsString != null) {\n                if (requestURL.contains(\"?\")) {\n                    requestURL = requestURL + \"&\" + queryParamsString;\n                } else {\n                    requestURL = requestURL + \"?\" + queryParamsString;\n                }\n            }\n            URL url = new URL(requestURL);\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setConnectTimeout(timeout);\n            httpConn.setRequestMethod(\"GET\");\n            httpConn.setReadTimeout(timeout);\n\n            addHeaders(httpConn, headers);\n            InputStream is = null;\n            if (httpConn != null) {\n                is = httpConn.getInputStream();\n            } else {\n                throw new IOException(\"Connection is not established.\");\n            }\n            LOGGER.info(\"Got responce from connection for request url {}\",requestURL);\n            resp.setResponseIs(is, isResourceDownloadRequest,true);\n            resp.setResponseCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (IOException e) {\n            LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n            try {\n                InputStream es = null;\n                if (null != httpConn.getErrorStream()) {\n                    es = ((HttpURLConnection) httpConn).getErrorStream","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"85266ed1-92fd-426e-8405-7ab32aa15364","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":37,"endLine":69,"content":"ring BASIC = \"Basic \";\n    public static final String GS_B2B_TOKEN = \"GS-B2B-TOKEN \";\n    public static final String MIXPANEL_DISTINCT_ID_LOOK_UP = \"distinct_id\";\n\n    //Special Characters Specific constants\n    public static final String FILLER = \"-\";\n    public static final String COLON = \":\";\n    public static final String EQUALS = \"=\";\n    public static final String COMMA = \",\";\n    public static final String FORWARD_SLASH = \"/\";\n    public static final String UNDERSCORE = \"_\";\n    public static final String EMPTY_STRING = \"\";\n    public static final String DOUBLE_QUOTE = \"\\\"\";\n    public static final String JSON_LEVEL_MARKER = \"::\";\n    public static final String PLACE_HOLDER = \"###\";\n    public static final String QUESTION_MARK = \"?\";\n    public static final String AMP = \"&\";\n    public static final String DOUBLE_EQUALS = \"==\";\n    public static final String SPACE = \" \";\n    public static final String OPEN_SQUARE_BRACKETS = \"[\";\n    public static final String CLOSE_SQUARE_BRACKETS = \"]\";\n    public static final String OPEN_ROUND_BRACKETS = \"(\";\n    public static final String CLOSE_ROUND_BRACKETS = \")\";\n    public static final String NEWLINE = \"\\n\";\n    public static final String PERIOD = \".\";\n    public static final String SEMICOLON = \";\";\n    public static final String BACKTICK = \"`\";\n\n\n    //JSONs Type (For all connectors. Ex: event, group,company etc)\n    public static final String EVENT = \"Event\";\n    public static final String PEOPLE = \"People\";\n    public static f","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"915437d4-d5d1-471d-938b-36d5cb5dddf3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionInput.java","startLine":1,"endLine":35,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.db.common;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.google.common.collect.Maps;\n\nimport java.util.Map;\n\n/**\n * Created by vgautam on 05/05/16.\n */\npublic class PNPConnectionInput {\n\n  private PNPConnectionsInfo pnpConnectionsInfo;\n  private Map<String,Object> properties = Maps.newHashMap();\n\n  public PNPConnectionsInfo getPnpConnectionsInfo() {\n    return pnpConnectionsInfo;\n  }\n\n  public void setPnpConnectionsInfo(PNPConnectionsInfo pnpConnectionsInfo) {\n    this.pnpConnectionsInfo = pnpConnectionsInfo;\n  }\n\n  public Map<String,Object> getProperties() {\n    return properties;\n  }\n\n  public void setProperties(String key, Object value) {\n    properties.put(key,value);\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"17bebb71-9747-4b07-a397-4606a2250a0a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpResponse.java","startLine":61,"endLine":97,"content":"    return responseIs;\n    }\n\n    public void setResponseIs(InputStream responseIs, boolean isResourceDownloadRequest) throws IOException {\n        ByteArrayOutputStream baos = getByteArrayOutputStream(responseIs);\n        this.responseIs = new ByteArrayInputStream(baos.toByteArray());\n        if (!isResourceDownloadRequest) {\n            this.respMsg = getStringBuffer(new ByteArrayInputStream(baos.toByteArray())).toString();\n        }\n        this.contentLength = this.responseIs.available();\n    }\n\n    public void setResponseIs(InputStream responseIs, boolean isResourceDownloadRequest, boolean isFromClient) throws IOException {\n        this.responseIs = responseIs;\n        this.contentLength = this.responseIs.available();\n    }\n\n    private ByteArrayOutputStream getByteArrayOutputStream(InputStream responseIs) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = responseIs.read(buffer)) > -1) {\n            baos.write(buffer, 0, len);\n        }\n        baos.flush();\n        return baos;\n    }\n\n    public InputStream getErrIs() {\n        return errIs;\n    }\n\n    public void setErrIs(InputStream errIs) throws IOException {\n        ByteArrayOutputStream baos = getByteArrayOutputStream(errIs);\n        this.errIs = new ByteArrayInputStream(baos.toByteArray());\n        this.errMsg = getStringBuffer(new ByteArrayInputStream(baos.toByteArray())).toString();\n        if (Str","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1fa516c9-68de-4754-a0a1-81efb4f9fe6d","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/bean/GainsightEcosystemEntityEnum.java","startLine":1,"endLine":45,"content":"package com.gainsight.integration.connector.ecosystem.bean;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum GainsightEcosystemEntityEnum {\n\n    IBC_VDS(\"IBC_VDS\", \"IBC_VDS\", \"IBC_VDS\", \"/api/v1/document/ibc/query\");\n\n    private String label;\n    private String id;\n    private String name;\n    private String dataApiPath;\n\n    GainsightEcosystemEntityEnum(String label, String id, String name, String dataApiPath) {\n        this.label = label;\n        this.id = id;\n        this.name = name;\n        this.dataApiPath = dataApiPath;\n    }\n\n    public String getLabel() { return label; }\n\n    public String getId() { return id; }\n\n    public String getName() { return name; }\n\n    public static String getDataApiPath(GainsightEcosystemEntityEnum gainsightEcosystemEntityEnum) { return gainsightEcosystemEntityEnum.dataApiPath; }\n\n    public static GainsightEcosystemEntityEnum getInstance(String entityName) {\n        return ENTITY_MAP.get(entityName);\n    }\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, GainsightEcosystemEntityEnum> ENTITY_MAP = new HashMap<>();\n\n\n    static {\n        for (GainsightEcosystemEntityEnum type : values()) {\n            ENTITY_MAP.put(type.id, type);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ac81416f-0963-417b-bd58-70605b28cb1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":133,"endLine":153,"content":"AuthInfo.setClientSecret(CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(OAUTH_CLIENT_SECRET)));\n            msDynamicsAuthInfo.setTenantId((String) pnpConnectionsInfo.getProperties().get(DYNAMICS_TENANT_ID));\n        } else {\n            msDynamicsAuthInfo.setClientId(pnpConnectionsInfo.getTokenDetail().getAccessKey().getString());\n            msDynamicsAuthInfo.setClientSecret(pnpConnectionsInfo.getTokenDetail().getAccessSecret().getString());\n            msDynamicsAuthInfo.setRefreshToken(CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getRefreshToken()));\n        }\n        MSDynamicsContext.setCtx(msDynamicsAuthInfo);\n    }\n\n    public static void authenticateConnection(PNPConnectionsInfo pnpConnectionsInfo) throws IOException {\n        CloseableHttpClient httpclient = null;\n        try {\n            String clientId = (String) pnpConnectionsInfo.getProperties().get(OAUTH_CLIENT_ID);\n            String clientSecret = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(OAUTH_CLIENT_SECRET));\n            String dynamicsAppTenantId = (String) pnpConnectionsInfo.getProperties().get(DYNAMICS_TENANT_ID);\n            String dynamicsOrgUri = (String) pnpConnectionsInfo.getProperties().get(DYNAMICS_ORG_URI);\n\n            String url = String.format(DYNAMICS_SINGLE_TENANT_OAUTH_URL, dynamicsAppTenantId);\n            httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new Htt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d16fa93-04c1-4b93-a3ad-f648ce78310e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpResponse.java","startLine":94,"endLine":142,"content":"yOutputStream(errIs);\n        this.errIs = new ByteArrayInputStream(baos.toByteArray());\n        this.errMsg = getStringBuffer(new ByteArrayInputStream(baos.toByteArray())).toString();\n        if (StringUtils.isEmpty(respMsg)) {\n            this.respMsg = this.errMsg;\n        }\n        this.contentLength = this.errIs.available();\n\n    }\n\n    @NotNull\n    private StringBuffer getStringBuffer(InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(\n                is));\n        StringBuffer response = new StringBuffer();\n        String line = \"\";\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        reader.close();\n        is.close();\n        return response;\n    }\n\n    public long getContentLength() {\n        return contentLength;\n    }\n\n    public void setContentLength(long contentLength) {\n        this.contentLength = contentLength;\n    }\n\n    @Override\n    public String toString() {\n        return \"HttpResponse{\" +\n                \"responseCode=\" + responseCode +\n                \", respMsg=\" + respMsg +\n                \", errorCode='\" + errorCode + '\\'' +\n                \", errMsg=\" + errMsg +\n                \", errorCode='\" + errorCode + '\\'' +\n                \", contentLength='\" + contentLength + '\\'' +\n                '}';\n    }\n\n    public Map<String, List<String>> getResponseHeaders() {\n        return responseHeaders;\n    }\n\n    public void setResponseHeaders(Map<S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ce433d2-1af7-46a8-ae5b-e10202732ac9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":154,"endLine":194,"content":"Set();\n\n    for (Map.Entry<String, Object> entry : entries) {\n      intend(b, level);\n      b.append(entry.getKey()).append(\": \");\n      Object value = entry.getValue();\n      if(value instanceof Map) {\n        value = prettyPrint((Map<String, Object>) value, level+1);\n      } else if(value instanceof Calendar) {\n        Calendar cal = (Calendar) value;\n        value = SimpleDateFormat.getInstance().format(cal.getTime());\n      }\n      b.append(value).append(\"\\n\");\n    }\n    // remove last line break\n    b.deleteCharAt(b.length()-1);\n    return b.toString();\n  }\n  \n  private static String prettyPrint(Collection<ClientProperty> properties, int level) {\n    StringBuilder b = new StringBuilder();\n\n    for (ClientProperty entry : properties) {\n      intend(b, level);\n      ClientValue value = entry.getValue();\n      if (value.isCollection()) {\n        ClientCollectionValue cclvalue = value.asCollection();\n        b.append(prettyPrint(cclvalue.asJavaCollection(), level + 1));\n      } else if (value.isComplex()) {\n        ClientComplexValue cpxvalue = value.asComplex();\n        b.append(prettyPrint(cpxvalue.asJavaMap(), level + 1));\n      } else if (value.isEnum()) {\n        ClientEnumValue cnmvalue = value.asEnum();\n        b.append(entry.getName()).append(\": \");\n        b.append(cnmvalue.getValue()).append(\"\\n\");\n      } else if (value.isPrimitive()) {\n        b.append(entry.getName()).append(\": \");\n        b.append(entry.getValue()).append(\"\\n\");\n      }\n    }\n    return b.toStr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e10c0bbd-1528-441b-b6a2-f516386b69f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":318,"endLine":339,"content":"ect.get(lookupColumn.getTargetObject());\n                Column targetColumn = targetObject.getColumn(projection.split(\"\\\\.\")[1]);\n\n                if (targetColumn.getExternalType() == ExternalDataType.MULTISELECTPICKLIST) {\n                    multiPicklistColumns.add(projection);\n                }\n\n                if (Objects.nonNull(targetColumn) && (targetColumn.getExternalType() == ExternalDataType.LOOKUP\n                        || targetColumn.getExternalType() == ExternalDataType.CUSTOMER || targetColumn.getExternalType() == ExternalDataType.OWNER)) {\n                    expandGroup.add(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\").add(projection);\n                } else {\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a21529b8-911b-47e9-b952-2d41a68b9519","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.integration.connector.dynamics.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.connector.dynamics.bean.factory.GSODataClientFactory;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.*;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\nimport com.gainsight.integration.connector.dynamics.service.error.DynamicsErrorCode;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.time.StopWatch;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.retrieve.*;\nimport org.apache.oli","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5e8ff5d9-d553-40d2-983d-998e86ec8a9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.service;\n\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.integration.bean.enums.Operators;\nimport com.gainsight.integration.connector.bean.GainsightBigQueryEntityDescription;\nimport com.gainsight.integration.connector.bean.GainsightBiqQueryFieldDescription;\nimport com.gainsight.integration.connector.service.error.BigQueryErrorCode;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport net.snowflake.client.jdbc.internal.google.auth.oauth2.GoogleCredentials;\nimport net.snowflake.client.jdbc.internal.google.auth.oauth2.ServiceAccountCredentials;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.N","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59b25851-b052-4c49-9a03-2e5b87206896","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataEngineConfig.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.platform.metadata.ComplexType;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"metadata_engine\")\n@Getter\n@Setter\npublic class MetadataEngineConfig extends MongoBaseBean implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    public static final String CONNECTOR_TYPE_PROP = \"connectorType\";\n\n    private ConnectorType connectorType;\n    private List<AuthDetails> authInfo;\n    private ExternalUrlDetails baseUrl;\n    private List<ResourceConfig> resources;\n    private Map<String, ComplexType> complexTypeMappings;\n    private RateLimitDetails rateLimitDetails;\n    private int timeout; //in seconds\n    private List<RealTimeConfig> realTimeConfigs;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4be41eec-996c-48c3-990b-5b51aa070904","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":526,"endLine":551,"content":"new File(System.getProperty(\"user.dir\") + \"/\" + ConnectorType.SNOWFLAKE.getValue() + \"_\" + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\") + JSON);\n        try  {\n            extractFile.createNewFile();\n            stat = this.connection.createStatement();\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_tz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            List<Map<String, Object>> recordValues = Lists.newArrayList();\n            int offset = 0;\n            while (true) {\n                boolean shouldContinue = false;\n                int limit = 200;\n                List<String> fields = new ArrayList<>();\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"95e13f3c-680a-418a-8372-86aced5b689b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":55,"endLine":82,"content":"viceImpl implements AuthService {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(AuthServiceImpl.class);\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  private static final int TIMEOUT = 10;\n  private static final String SLASH = \"/\";\n  private static final String GENERATE_TOKEN_END_POINT = \"v1.0/duct/connection/token/refresh/details\";\n  private PNPConnectionInfoDao pnpConnectionInfoDao;\n\n  public AuthServiceImpl() {\n    this.pnpConnectionInfoDao = null;\n  }\n\n  public AuthServiceImpl(PNPConnectionInfoDao pnpConnectionInfoDao) {\n    this.pnpConnectionInfoDao = pnpConnectionInfoDao;\n  }\n\n  @Override\n  public HttpRequestBase getHttpClientForMetadataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                         ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                         PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> flattenConnectionInfo,\n                                                         Map<String, Object> paginationInfo) throws Exception {\n    List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n    Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2af8648d-ad6d-4389-81de-441fa3ef4b69","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImplTest.java","startLine":89,"endLine":105,"content":"mand.com/sfdc.svc/\";\n            Object entityData = gainsightSapCrmFetchService.getEntityData(oDataClientWithUserNamePwd,entityName);\n            System.out.println(entityData);\n/*\n            assertNotNull(entityData,String.format(\"Error while fetching data for entity with name %s \",entityName));\n            Iterator<JsonNode> dataNodes = MAPPER.readTree(entityData).get(\"d\").get(\"results\").getElements();\n            dataNodes.forEachRemaining(jsonNode -> {\n                LOGGER.info(jsonNode.toString());\n            });\n*/\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(),e);\n            fail(e.getMessage());\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a0aff991-5547-42e2-86e7-78a8f2609362","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/RecordsResponse.java","startLine":1,"endLine":52,"content":"package com.gainsight.integration.connector.dynamics.bean.query;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Either get records or csv file based on OutputMode\n */\npublic class RecordsResponse {\n\n  private final List<Map<String, Object>> records;\n  private final File csvFile;\n  private final String batchQuery;\n  private final int numberOfRecords;\n\n  public RecordsResponse(List<Map<String, Object>> records, File csvFile, String batchQuery, int numberOfRecords){\n   this.records = records;\n   this.csvFile = csvFile;\n   this.batchQuery = batchQuery;\n   this.numberOfRecords = numberOfRecords;\n  }\n\n  public List<Map<String, Object>> getRecords() {\n    return records;\n  }\n\n  public File getCsvFile(){\n     return csvFile;\n  }\n\n  public String getBatchQuery() {\n    return batchQuery;\n  }\n\n  public int getNumberOfRecords() {\n    return numberOfRecords;\n  }\n\n  public Boolean getNoRecords() {\n    return numberOfRecords == 0;\n  }\n\n  @Override\n  public String toString() {\n    return \"RecordsResponse{\" +\n        \"records=\" + records +\n        \", csvFile=\" + csvFile +\n        \", numberOfRecords=\" + numberOfRecords +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d6da10be-e94e-4d64-84b7-13e5f761885a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":127,"endLine":151,"content":"tifier(?)\");\n             PreparedStatement preparedStatementViews = connection.prepareStatement(\"show views in identifier(?)\");) {\n            preparedStatementTables.setString(1, queryParam);\n            tables = nullSafeList(executeWithMapListHandler(preparedStatementTables));\n            preparedStatementViews.setString(1, queryParam);\n            List<Map<String, Object>> views = nullSafeList(executeWithMapListHandler(preparedStatementViews));\n            tables.addAll(views);\n            LOGGER.info(\"Table size {}\",tables.size());\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while trying to create prepared Statement : {} \", sqlException);\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\", sqlException);\n        }\n        return tables;\n    }\n\n    @Override\n    public List<Map<String, Object>> listAllFields(String objectName) {\n        String queryParam = QUOTES + this.db + QUOTES + DOT + QUOTES + this.schema + QUOTES + DOT + QUOTES + objectName + QUOTES;\n        List<Map<String, Object>> result = null;\n        try (PreparedStatement preparedStatement = connection.prepareStatement(\"show columns in identifier(?)\");) {\n            preparedStatement.setString(1, queryParam);\n            result = nullSafeList(executeWithMapListHandler(preparedStatement));\n            LOGGER.info(\"Field size {}\",result.size());\n        } catch (SQLException sqlException) {\n            LOGGER.error(\"Error occurred while t","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9fa4c287-31fc-470b-8450-6d97ab7ca8b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":109,"endLine":112,"content":"  byte[] authorizationHeader = Base64.encodeBase64((clientId + COLON + clientSecret).getBytes());\n        return new String(authorizationHeader);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f58397f-3fcb-4b56-8291-b7b06e30506b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":167,"endLine":182,"content":"_ERROR.getTranslatedMessage(), (String) responseMap.get(\"message\")));\n                    } else {\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_SCOPE_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                    }\n                }\n\n            } else {\n                throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN.getTranslatedMessage());\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"[HUBSPOT] Error occurred while trying to retrieve scopes :{}\", e.getMessage());\n            throw e;\n        }\n        return scopes;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e115e1bd-79d2-4ed1-bfd3-bc6bb2740e28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/DBBased.java","startLine":1,"endLine":31,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class DBBased implements AuthAttributes, Serializable {\n    private static final long serialVersionUID = -1l;\n\n    private static final String type = \"DBBased\";\n    private String project;\n    private String dataset;\n    private String apiKey;\n    private String apiSecret;\n    private String warehouse;\n    private String databaseName;\n    private String databaseId;\n    private String authKeywordForApi;\n\n    @Override\n    public String type() {\n        return type;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45b0abe4-b1e8-4aa9-ba3f-17879547c646","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":32,"endLine":65,"content":"clientSecret, String refreshToken) {\n      try {\n          GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n          return gainsightHubspotChannelService.authenticateConnection();\n      }catch (Exception e){\n          LOGGER.error(e.getMessage(),e);\n          return false;\n      }\n    }\n\n    @Override\n    public Map<String, Object> getHubspotAccountDetails(String clientId, String clientSecret, String refreshToken) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.getHubspotAccountDetails();\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public InputStream getEntityData(String entityName, List<String> projectionList , String clientId, String clientSecret, String refreshToken) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.getEntityData(entityName, projectionList);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b126af4b-f7a3-45c1-86f4-3dda968d6026","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":21,"endLine":51,"content":".utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport exception.SystemException;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetRequest;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.apache.olingo.client.api.domain.*;\nimport org.apache.olingo.client.api.http.HttpClientException;\nimport org.apache.olingo.client.api.uri.URIBuilder;\nimport org.apache.olingo.commons.api.edm.EdmPrimitiveTypeKind;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"39283df2-adaa-45a5-a5e4-2c129be128fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":1,"endLine":35,"content":"package com.gainsight.integration.connector.msteams.service;\n\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.enums.AuthenticationType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class GainsightMSTeamsChannelServiceImpl implements GainsightMSTeamsChannelService{\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightMSTeamsChannelServiceImpl.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String BASE_API_URL = \"https://graph.microsoft.com/\";\n    private static final String SEARCH_END_POINT_V1 = \"v1.0/\";\n    static final String AUTHORIZATION = \"Authorization\";\n    static fi","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cccf0499-bb95-4a4b-9c1f-81a54ad89274","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":559,"endLine":572,"content":"butes metadataApiConfigAttributes, String objectName,\n                                                     PNPConnectionsInfo pnpConnectionsInfo, FilterRule filterRule,\n                                                     Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam, String baseUrl, String systemToken) throws Exception {\n   return getHttpClientForDataRequest(metadataEngineConfig, metadataApiConfigAttributes, objectName,\n       pnpConnectionsInfo, filterRule, flattenConnectionInfo, paginationInfo, queryParam, baseUrl, systemToken, null);\n  }\n\n  @Override\n  public HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig, ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                     PNPConnectionsInfo pnpConnectionsInfo, FilterRule filterRule, Map<String, Object> flattenConnectionInfo,\n                                                     Map<String, Object> paginationInfo, Map<String, String> queryParam, String baseUrl,\n                                                     String systemToken, Map<String, Object> generatedRequestBody) throws Exception {\n    List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n    Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ae481b6-b9b3-4d55-97f6-417d229fdc27","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":572,"endLine":599,"content":"AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"Auth Type not present\");\n    authDetails = authDetailsOp.get();\n\n    Map<String, String> queryParams = new HashMap<>();\n    if (authDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : authDetails.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo, baseUrl, systemToken);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n    if (metadataApiConfigAttributes.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : metadataApiConfigAttributes.getQueryParamDetails()) {\n        Object value = constructValueFromFilterRule(queryParamDetail, filterRule, paginationInfo);\n        if (value == null) {\n          LOGGER.info(\"No Value generated from criteria\");\n          continue;\n        }\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n    StringEntity stringEntity = null;\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66a40a6e-a1ab-4557-a704-5b921f9f4315","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.snowflake;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.collect.Lists;\nimport com.google.gson.Gson;\nimport com.snowflake.client.jdbc.SnowflakeDriver;\nimport exception.SystemException;\nimport net.snowflake.client.jdbc.internal.apache.commons.codec.binary.Hex;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Date;\nimport java.sql.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"503f5bb6-230a-447d-9f03-52d932f6158b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":513,"endLine":530,"content":"equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                        String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    } else {\n                        expandGroupModified.add(projection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(projection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n        List<String> look","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b2f255ae-f3cb-4056-b23e-a25550c51b6b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":357,"endLine":381,"content":"   try {\n                    response = this.httpclient.execute(httpGet);\n                    inputStream = response.getEntity().getContent();\n                    String jsonDataResponse = IOUtils.toString(inputStream, \"UTF-8\");\n                    Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n                    });\n                    List<String> currentAssociations = (List<String>) responseMap.get(\"results\");\n                    associationsResult.addAll(currentAssociations);\n                    hasMore = (boolean) responseMap.get(\"hasMore\");\n                    offset = (Long) responseMap.get(\"offset\");\n                } catch (Exception exception) {\n                    LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for objectId %s for assocaitionType %s\", objectId, gsHubspotAssociationEnum), exception);\n                    return associationsResult;\n                } finally {\n                    HttpClientUtils.closeQuietly(response);\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                }\n            }\n        } catch (Exception exception) {\n            LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for objectId %s for assocaitionType %s\", objectId, gsHubspotAssociationEnum), exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e78a4b6d-7570-4b59-b8df-e60195318bfa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":295,"endLine":328,"content":"  FileUtils.deleteQuietly(keyStoreFile);\n        }\n    }\n\n    private void logExpireAndAlias(File keyStoreFile, String mtlsCertificatePassword) {\n        try (FileInputStream fis = new FileInputStream(keyStoreFile)) {\n            KeyStore keystore = KeyStore.getInstance(\"JKS\");\n            keystore.load(fis,  mtlsCertificatePassword.toCharArray());\n\n            Enumeration<String> aliases = keystore.aliases();\n\n            while (aliases.hasMoreElements()) {\n                String alias = aliases.nextElement();\n                Certificate cert = keystore.getCertificate(alias);\n\n                if (cert instanceof X509Certificate) {\n                    X509Certificate x509 = (X509Certificate) cert;\n                    java.util.Date expiry = x509.getNotAfter();\n                    LOGGER.info(\"keystore file Location {} \" ,keyStoreFile.getAbsoluteFile());\n                    LOGGER.info(\"keystore Alias: {} keystore expire {} \", alias,expiry);\n                } else {\n                    LOGGER.info(\"Alias:{} does not contain an X.509 certificate\",alias);\n                }\n            }\n        }catch (Exception e){\n            LOGGER.error(\"Error occurred while logging keystore details {}\",e.getMessage(),e);\n        }\n    }\n\n    private File getKeystoreFile(String mtlsCertificatePath, String mtlsBucketName, String accessKeyId, String accessSecret,String region) {\n        File keyStoreFile = null;\n        try {\n            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"882a632f-86e6-4108-aea6-114573747b39","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditRecord.java","startLine":120,"endLine":204,"content":" eventName\n   */\n  public void setEventName(String eventName) {\n    this.eventName = eventName;\n  }\n\n  /**\n   * @return eventType\n   */\n  public AuditOperationType getEventType() {\n    return eventType;\n  }\n\n  /**\n   * @param eventType CRUD operation {@code AuditOperationType} performed on the entity.\n   */\n  public void setEventType(AuditOperationType eventType) {\n    this.eventType = eventType;\n  }\n\n  /**\n   * @return eventStatus\n   */\n  public EventStatusEnum getEventStatus() {\n    return eventStatus;\n  }\n\n  /**\n   * @param eventStatus status {@code AuditEventStatus} of the event\n   */\n  public void setEventStatus(EventStatusEnum eventStatus) {\n    this.eventStatus = eventStatus;\n  }\n\n  /**\n   * @return userId\n   */\n  public String getUserId() {\n    return userId;\n  }\n\n  /**\n   * @param userId userId\n   */\n  public void setUserId(String userId) {\n    this.userId = userId;\n  }\n\n  /**\n   * @return name of the user\n   */\n  public String getUserName() {\n    return userName;\n  }\n\n  /**\n   * @param userName name of the user\n   */\n  public void setUserName(String userName) {\n    this.userName = userName;\n  }\n\n  /**\n   * @return tenantId\n   */\n  public String getTenantId() {\n    return tenantId;\n  }\n\n  /**\n   * @param tenantId tenantId of the tenant\n   */\n  public void setTenantId(String tenantId) {\n    this.tenantId = tenantId;\n  }\n\n  /**\n   * @return systemTags associated with Audit Event\n   */\n  public List<String> getSystemTags() {\n    return systemTags;\n  }\n\n  /**\n   * @param","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"721a90df-8efd-4b6f-836f-cde7c62dffde","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":316,"endLine":337,"content":"String> header = new ArrayList<>();\n                    Map<String ,String> fieldToDataTypeMap = new HashMap<>();\n                    if (responseMap.get(SCHEMA) != null && ((List) ((Map) responseMap.get(SCHEMA)).get(\"fields\")).size() > 0) {\n                        ((List<Map<String, String>>) ((Map) responseMap.get(SCHEMA)).get(\"fields\")).stream().forEach(field -> {\n                            header.add(field.get(\"name\"));\n                            fieldToDataTypeMap.put( field.get(\"name\"),field.get(\"type\"));\n                        });\n                    }\n                    LOGGER.info(\"Bq fetch completed \");\n                    if (!ObjectUtils.isEmpty(responseMap.get(ROW))) {\n                        Gson gson = new Gson();\n                        JsonArray arr = gson.toJsonTree(responseMap.get(ROW)).getAsJsonArray();\n                        arr = convertBqData(arr, header, fieldToDataTypeMap);\n                        writeDataToFile(arr, fileDir, dhJobId, fileList);\n                    }\n                    if (responseMap.containsKey(PAGE_TOKEN) && StringUtils.isNotEmpty(responseMap.get(PAGE_TOKEN).toString())) {\n                        nextPage = responseMap.get(PAGE_TOKEN).toString();\n                    } else {\n                        shouldContinue = false;\n                        LOGGER.info(\"No of records got in BQ response\");\n                    }\n                } else if (response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_UNAUTHORIZ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"391301c8-5852-4e53-a386-c55a6d69cb8e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":64,"endLine":89,"content":"   try {\n            CloseableHttpClient httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new HttpPost(String.format(ACCESS_TOKEN_ENDPOINT, host));\n\n            httpPost.setHeader(CONTENT_TYPE, APPLICATION_FORM_URLENCODED);\n            httpPost.setHeader(AUTHORIZATION, BASIC + getAuthorizationHeader(clientId, clientSecret));\n\n            List<NameValuePair> params = new ArrayList<>(2);\n            params.add(new BasicNameValuePair(GRANT_TYPE, REFRESH_TOKEN_KEY));\n            params.add(new BasicNameValuePair(REFRESH_TOKEN_KEY, refreshToken));\n\n            httpPost.setEntity(new UrlEncodedFormEntity(params, IPaasConstants.CHARSET));\n\n            HttpResponse response = httpclient.execute(httpPost);\n            HttpEntity entity = response.getEntity();\n\n            String jsonResponse;\n            LOGGER.info(\"Response Code : {}\",response.getStatusLine().getStatusCode());\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                if (entity != null) {\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    Objects.requireNonNull(refreshToken, AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                } else {\n                    throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"72d3e58e-5c4d-4847-a5eb-56ef373d93db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/Encoding.java","startLine":1,"endLine":5,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum Encoding {\n    BASE_64;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5f0012b-78ab-4ad8-b133-8884afeedad5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":102,"endLine":130,"content":"ail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n\n    StringEntity stringEntity = null;\n        JSONObject concatenatedEntities = new JSONObject();\n    if (authDetails.getBodyParamDetails() != null) {\n      for (AuthApiAttributes bodyDetail : authDetails.getBodyParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));\n      }\n\n            stringEntity = new StringEntity(concatenatedEntities.toString());\n        }\n        if (metadataApiConfigAttributes.getBodyParamDetails() != null) {\n            for (AuthApiAttributes bodyDetail : metadataApiConfigAttributes.getBodyParamDetails()) {\n                Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo);\n                if (value == null)\n                    throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n                concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));\n            }\n\n      stringEntity = new StringEntity(concatenatedEntities.toString());\n    }\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(metadataApiConfigAt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dedd8bce-e3e0-44bf-82bb-5f2a29d5f09f","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":212,"endLine":219,"content":"rsion) && apiVersion.equalsIgnoreCase(API_VERSION_LATEST)) {\n            return PROPERTIES;\n        }\n        return entityEnum.queryProjectionKeyWord;\n    }\n\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b70fcc7e-05dc-46a0-be05-802af0b7bca7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":931,"endLine":956,"content":") {\n                                record.put(projection, value);\n                            }\n                        } else {\n                            record.put(key, value); // revisit for picklist in looked up object\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private void extractLookUpValue(Set<String> expandGroup, ClientEntity ce, Map<String, Object> record, Map<String, Set<String>> modifiedProjectionToOriginalProjections,\n                                    boolean isPrimitiveDateTimeConversionRequired, List<String> multiPicklistColumns) {\n        List<String[]> expandGroupSplitted = expandGroup.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        List<String> lookUpFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[0]).collect(Collectors.toList());\n        List<String> lookUpObjectFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[1]).collect(Collectors.toList());\n        List<ClientLink> clientLinks = ce.getNavigationLinks();\n        for (ClientLink clientLink : clientLinks) {\n            if (!lookUpFieldNames.contains(clientLink.getName())) {\n                continue;\n            }\n            ClientEntity clientEntity = null;\n            if (clientLink.asInlineEntity() != null && clientLink.asInlineEntity().getEntity() != null) {\n                clientEntity = clientLink.asInlineEntity().getEntity();\n            } else if (clientLink.asInlineEntitySe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f990902d-a6f1-4aa5-9675-cdd5041fd5e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":141,"endLine":170,"content":"  Thread.sleep((15 * 1000));\n            }\n        }\n        if (null != response) {\n            LOGGER.error(\"[MSTEAMS] The api call to source failed for retry count : {} due to status: {} , code :{}\", ALLOWED_RETRIES, response.getStatusLine(), response.getStatusLine().getStatusCode());\n            throw new Exception(AdapterErrorMessages.MSTEAMS_API_FETCH_FAILED.getTranslatedMessage() + response.getStatusLine());\n        } else {\n            throw new Exception(AdapterErrorMessages.MSTEAMS_API_FETCH_FAILED_WITH_MAX_RETRIES.getTranslatedMessage());\n        }\n    }\n\n    @Override\n    public Map<String, Object> getTeamsOrganizationDetails() throws Exception {\n            Map<String, Object> accountMap;\n            try {\n                URI uri = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V1 + \"organization\").build();\n                this.httpGet.setURI(uri);\n                HttpResponse response = this.httpclient.execute(httpGet);\n                String msTeamsAccount = IOUtils.toString(response.getEntity().getContent());\n                accountMap = MAPPER.readValue(msTeamsAccount, Map.class);\n            } catch (Exception exception) {\n                LOGGER.error(\"[MSTEAMS] Error in fetching Organization Details\", exception);\n                throw new Exception(AdapterErrorMessages.INVALID_ORGANIZATION_URL.getTranslatedMessage());\n            }\n            return accountMap;\n    }\n\n    @Override\n    public Map<String, Object> getTeamsUserDetails() throws Exception {\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ff3abfc-eeb4-4b01-81a8-add1b94f90b2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":167,"endLine":193,"content":"hType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"Auth Type not present\");\n    authDetails = authDetailsOp.get().getPostAuthorization();\n\n    Map<String, String> queryParams = new HashMap<>();\n    if (authDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : authDetails.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n    JSONObject concatenatedEntities = new JSONObject();\n    for (AuthApiAttributes bodyDetail : authDetails.getBodyParamDetails()) {\n      Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo);\n      if (value == null)\n        throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n      concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));\n    }\n\n    StringEntity stringEntity = new StringEntity(concatenatedEntities.toString());\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(authDetails, metadataEngineConfig, null, pnpConnectionsInfo, ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f33b4e47-74e2-4b63-9937-d70312768cba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":322,"endLine":357,"content":"alDate.format(dtf));\n          } else {\n            map.put(columnName, objectValue);\n          }\n        }\n        recordValues.add(map);\n      }\n      return recordValues;\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] Exception while fetching data: {}\", ex.getMessage(), ex);\n      throw new SQLException(\"[SAP DATASPHERE]  Error occurred while trying to fetch data\", ex);\n    } finally {\n      closeConnectionQuietly(this.connection, resultSet, null);\n      if (Objects.nonNull(statement)) {\n        statement.close();\n      }\n    }\n  }\n\n  @Override\n  public List<File> fetchData(String fileDir, String jobId, String selectQuery, List<FieldInfo> fieldInfos,\n                              int maxRecordsPerBatch, double maxFileSizeInMB) throws SQLException {\n    Statement stat = null;\n    ResultSet resultSet = null;\n    List<File> fileList = new ArrayList<>();\n    AtomicInteger filePosition = new AtomicInteger(0);\n    try {\n      log.info(\"maxRecordsPerBatch: {}\", maxRecordsPerBatch);\n      log.info(\"maxFileSizeInMB: {}\", maxFileSizeInMB);\n      DateTimeFormatter defaultSrcFormatter =\n              new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\")\n                      .appendFraction(ChronoField.MILLI_OF_SECOND, 0, 9, true)\n                      .toFormatter();\n      Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getName, field -> field));\n      stat = this.connection.createStatement();\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"52932ce6-fe09-4550-b322-8cb6faeec9f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":122,"endLine":142,"content":"ty.getProperty(\"Name\").getPrimitiveValue().toString());\n        optionSet.setGlobal(DynamicsGainsightUtils.parseBoolean(clientEntity.getProperty(\"IsGlobal\").getPrimitiveValue().toValue()));\n        Map<String, Object> displayName = (Map) clientEntity.getProperty(\"DisplayName\").getValue().asComplex().asJavaMap();\n        String finalDisplayName = null;\n        if (Objects.nonNull(displayName)) {\n            Map<String, Object> userLocalizedLabel = (Map) displayName.get(\"UserLocalizedLabel\");\n            if (Objects.nonNull(userLocalizedLabel)) {\n                finalDisplayName = DynamicsGainsightUtils.valueOf(userLocalizedLabel.get(\"Label\"));\n            }\n        }\n        optionSet.setDisplayName(finalDisplayName);\n        optionSet.setType(OptionSetType.fromValue(clientEntity.getProperty(\"OptionSetType\").getValue().asEnum().getValue()));\n        List<Option> options = Lists.newArrayList();\n        List<Map<String, Object>> optionsList = new ObjectMapper().convertValue(clientEntity.getProperty(\"Options\").getValue().asCollection().asJavaCollection(), new TypeReference<List<Map<String,Object>>>(){});\n        for (Map<String, Object> map : optionsList) {\n            Option option = new Option();\n            option.setValue((Integer) map.get(\"Value\"));\n            Map<String,Object> label  = (Map) map.get(\"Label\");\n            if (Objects.nonNull(label)) {\n                Map<String,Object> userLocalizedLabel = (Map)label.get(\"UserLocalizedLabel\");\n                if (Objects.n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbbaf7ca-918f-4599-aaa8-a4454cb1e4cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataConfigDetails.java","startLine":1,"endLine":22,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class MetadataConfigDetails implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private List<ApiConfigAttributes> metadataApi;\n    private Map<DataEnum,List<ApiConfigAttributes>> dataApi;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec6e55ee-f493-4d1d-a78b-fb60669e1993","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":217,"endLine":250,"content":"i == null)\n            uriBuilder = getUriForEntityLatest(entityName,true, null, null);\n        else\n            uriBuilder = getUriBuilder(BASE_API_URL + api);\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response;\n    }\n\n    public HttpResponse getCustomObjects(String api) throws Exception {\n        URIBuilder uriBuilder;\n        uriBuilder = getUriBuilder(BASE_API_URL + api);\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response;\n    }\n\n    @Override\n    public InputStream getEntityData(String entityName, List<String> projections) throws Exception {\n        URIBuilder uriBuilder = getUriForEntity(entityName, false);\n        uriBuilder.addParameter(LIMIT, \"2\"); // todo read it from property file\n        projections.stream().forEach(s -> uriBuilder.addParameter(PROPERTIES, s));\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response.getEntity().getContent();\n\n    }\n\n    @Override\n    public InputStream getPaginatedEntityData(String entityName, List<String> projections, Long pageNumber) throws Exception {\n        GSHubSpotEntityEnum entityEnum = GSHubSpotEntityEnum.getInstance(entityName);\n        URIBuilder uriBuilder = getUriForEntity(entityName, false);\n        if (pageNumber != Long.MIN_VALUE) {\n            String offsetKey","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7ffce9b-e34c-44ce-b720-2a10d931c9bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImplTest.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.connector.sap;\n\n\nimport com.google.common.collect.Lists;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.fail;\n\n/**\n * @author vipinsharma\n * @version 1.0\n */\n\n/*@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"classpath*:/spring/spring-com.gainsight.integration.connector.dynamics.service-gs-integration-adapter.xml\")\n@Disabled*/\n@ExtendWith(SpringExtension.class)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@ContextConfiguration(locations = \"classpath*:/spring/spring-service-gs-adapter-sap-test.xml\")\n@Disabled\npublic class GainsightSapCrmFetchServiceImplTest {\n\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSapCrmFetchServiceImplTest.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    @Autowired\n    private Gainsigh","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6640fdb7-5950-443a-8dd6-6a76589e7e96","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ExternalUrlDetails.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\n\npublic class ExternalUrlDetails implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    @JsonProperty(\"isStatic\")\n    private boolean isStatic = false;\n    private String url;\n    private String dynamicRegex;\n    private String replaceByPath;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0fce313-ebd3-4964-9491-a4f9a68dc20f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":139,"endLine":174,"content":"und\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity Contact Properties\")\n    @Order(4)\n    void testGetContactProperties() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityProperties(\"CONTACT\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> contactMetaData = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(contactMetaData, \"No Metadata found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity Data\")\n    @Order(4)\n    void testGetEntityData() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityData(\"COMPANY\",new ArrayList<>(Arrays.asList(\"portalId\",\"companyId\")),\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Paginated Company Entity Data\")\n    @Order(4)\n    void testGetCompanyPaginatedEntityData() throws Exception {\n        boolean hasMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubs","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0989e55-1649-4180-8bff-a7a9c8b18d88","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/error/ProductBoardErrorCode.java","startLine":1,"endLine":53,"content":"package com.gainsight.integration.productboard.service.error;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.exception.ExceptionType;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport exception.ErrorCode;\n\npublic enum ProductBoardErrorCode  implements ErrorCode {\n\n    PRODUCTBOAORD_DATA_FETCH_ERROR(2000,\"\"),\n    INVALID_ACCESS_KEY(2001 ,\"\"),\n    EXTERNAL_SERVICE_INFINITE_PAGINATION(2002,\"\" );\n\n    private final int code;\n    private final String text;\n    private final ExceptionType exceptionType;\n\n    ProductBoardErrorCode(int code, String text){\n        this(code, text, ExceptionType.DEFAULT);\n    }\n\n    ProductBoardErrorCode(int code, String text, ExceptionType exceptionType){\n        this.code = code;\n        this.text = text;\n        this.exceptionType = exceptionType;\n    }\n\n    @Override\n    public int getEventCode() {\n        return code;\n    }\n\n    @Override\n    public String getGsEventCode() {\n        return \"GS_PRODUCT_BOARD\"+code;\n    }\n\n    @Override\n    public String getUserText() {\n        ConnectorI18nService.getTranslation(this.name(),text, RequestContextProvider.getTenantLanguage());\n        return text;\n    }\n\n    @Override\n    public ExceptionType getExceptionType() {\n        return null;\n    }\n\n    @Override\n    public boolean isCodeConstant() {\n        return false;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"00103857-a908-4209-8ac2-9d4e495f31e2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":1,"endLine":41,"content":"package com.gainsight.integration.connector.sfdc.service;\n\nimport com.gainsight.bean.account.SalesforceToken;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.connector.sfdc.bean.SalesforceBatchStatus;\nimport com.gainsight.integration.connector.sfdc.bean.SalesforceJob;\nimport com.gainsight.integration.utils.*;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Maps;\nimport com.opencsv.*;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpHeaders;\nimport org.apache.http.HttpStatus;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.MediaType;\nimport org.w3c.dom.Document;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static utils.Constants.CONTENT_TYPE;\n\npublic class SalesforceBulkFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SalesforceBulkFetchService.class);\n\n    private static final HttpUrlConnectionUtils httpUrlConnectionUtils = new HttpUrlConnectionUtils();\n    private static final SfdcTokenUtil sfdcTokenUtil = new SfdcTokenUtil();\n\n    private static final int RETRY_COUNT = 3;\n    private static final String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30cf19cb-53aa-443b-8355-01e820773c36","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":373,"endLine":419,"content":"LE = \"ignorePeopleNotFoundError\";\n    public static final String QUEUE_NAME = \"QUEUE_NAME\";\n    public static final String FETCH_COUNT = \"FETCH_COUNT\";\n    public static final String DECIMAL_TYPE_REGEX = \"decimal\\\\((\\\\d+),(\\\\d+)\\\\)\";\n    public static final String ARRAY_TYPE_REGEX = \"^array<.*?>$\";\n    public static final String MAP_TYPE_REGEX = \"^map<.*?>$\";\n    public static final String STRUCT_TYPE_REGEX = \"^struct<.*?>$\";\n    /**\n     * SOQL Constants\n     */\n\n    public static final String YYYY_MM_DD_T_HH_MM_SS_SSS_Z = \"yyyy-MM-dd'T'HH:mm:ss'Z'\";\n\n    // Segment  specific constants & codes\n    public static final class Segment {\n\n        private Segment() {\n\n        }\n\n        // Data Identifiers\n        public static final String TRACK = \"track\";\n        public static final String IDENTIFY = \"identify\";\n        public static final String GROUP = \"group\";\n\n        // Field keys\n        public static final String TYPE = \"type\";\n\n        public static final String TIMESTAMP = \"timestamp\";\n        public static final String RECEIVED_AT = \"receivedAt\";\n        public static final String SENT_AT = \"sentAt\";\n        public static final String ORIGINAL_TIMESTAMP = \"originalTimestamp\";\n\n        public static final String SEGMENT_MESSAGE_ID = \"segment_message_id\";\n        public static final String MESSAGE_ID = \"messageId\";\n\n    }\n\n\n    // GSIntegration  specific constants & codes\n    public static final class GSIntegration {\n\n        private GSIntegration() {\n\n        }\n\n       ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a75522f1-cd0d-4ce4-8be5-722ff53b348b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/GetRecordsRequest.java","startLine":1,"endLine":55,"content":"package com.gainsight.integration.connector.dynamics.bean.query;\n\nimport java.util.Set;\n\npublic class GetRecordsRequest {\n\n    private String pluralName;\n    private Set<String> projections;\n    private String filterExpression;\n    private OutputMode outputMode = OutputMode.FILE;\n    private String query;\n    private boolean primitiveDateTimeConversionRequired = true;\n\n    public GetRecordsRequest(String pluralName) {\n        this.pluralName = pluralName;\n    }\n\n    public GetRecordsRequest withProjections(Set<String> projections) {\n        this.projections = projections;\n        return this;\n    }\n\n    public GetRecordsRequest withFilterExpression(String filterExpression) {\n        this.filterExpression = filterExpression;\n        return this;\n    }\n\n    public GetRecordsRequest withOutputMode(OutputMode outputMode) {\n        this.outputMode = outputMode;\n        return this;\n    }\n\n    public GetRecordsRequest withQuery(String query){\n        this.query  = query;\n        return this;\n    }\n\n    public GetRecordsRequest withPrimitiveDateTimeConversionRequired(boolean primitiveDateTimeConversionRequired){\n        this.primitiveDateTimeConversionRequired  = primitiveDateTimeConversionRequired;\n        return this;\n    }\n\n    public String getPluralName() {\n        return pluralName;\n    }\n\n    public Set<String> getProjections() {\n        return projections;\n    }\n\n    public String getFilterExpression() {\n        return filterExpression;\n    }\n\n    public OutputMode getOutput","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad7ad5c6-bf34-401b-a95e-5e3352f0c95a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":175,"endLine":189,"content":"nfo(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                        String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    } else {\n                        expandGroupModified.add(projection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(projection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(msDynamicsObject, getRecordsRequest.getProjections(), relationships,masterLookUpConfiguration);\n        expan","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20aa4b3b-c6b0-4cd5-ab86-c034977aac15","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/OperandType.java","startLine":1,"endLine":9,"content":"package com.gainsight.integration.bean.enums;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic enum OperandType {\n    UNARY,\n    BINARY\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5e04b56-5e13-4ff0-85ab-6ebc9cd729a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":968,"endLine":997,"content":"                                } else {\n                                    record.put(projection, value);\n                                }\n                            }\n                        } else {\n                            if (multiPicklistColumns.contains(key)) {\n                                record.put(key, replaceMPSeperator(value));\n                            } else {\n                                record.put(key, value); // revisit for picklist in looked up object\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private ClientEntitySet readClientEntitySet(ODataClient client, String entitySetName, Set<String> projections,\n                                                Set<String> expandList, String filterExpression, URIBuilder absoluteUri,\n                                                Integer pageSize) {\n        try {\n            if (Objects.isNull(absoluteUri)) {\n                absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n                if (CollectionUtils.isNotEmpty(projections)) {\n                    absoluteUri.select(projections.toArray(new String[projections.size()]));\n                }\n                if (CollectionUtils.isNotEmpty(expandList)) {\n                    absoluteUri.expand(expandList.toArray(new String[expandList.size()]));\n                }\n                if (StringUtils.isNotBlank(filterExpre","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21eaff48-163d-4826-9c19-2b06d7d487ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":149,"endLine":171,"content":"_ORG_URI);\n\n            String url = String.format(DYNAMICS_SINGLE_TENANT_OAUTH_URL, dynamicsAppTenantId);\n            httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new HttpPost(url);\n            httpPost.setHeader(\"Content-Type\", ContentType.APPLICATION_FORM_URLENCODED.getMimeType());\n\n            List<NameValuePair> params = new ArrayList<>(4);\n            params.add(new BasicNameValuePair(\"grant_type\", \"client_credentials\"));\n            params.add(new BasicNameValuePair(\"client_id\", clientId));\n            params.add(new BasicNameValuePair(\"client_secret\", clientSecret));\n            params.add(new BasicNameValuePair(\"resource\", dynamicsOrgUri));\n            httpPost.setEntity(new UrlEncodedFormEntity(params, StandardCharsets.UTF_8));\n\n            HttpResponse response = httpclient.execute(httpPost);\n            HttpEntity entity = response.getEntity();\n            if (HTTP_SUCCESS != response.getStatusLine().getStatusCode()) {\n                try {\n                    String errorResponse = EntityUtils.toString(response.getEntity());\n                    LOGGER.info(\"Response received from Dynamics. Status --> {}, Body --> {}\", response.getStatusLine().getStatusCode(), errorResponse);\n                    Map<String, String> errorMessageMap = mapper.readValue(errorResponse, HashMap.class);\n                    if (errorMessageMap.containsKey(\"error\")) {\n                        throw new SystemException(errorMessageMap.get(\"error\"), CoreErrorCode.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61cc4aad-e69a-4724-84cc-d9e492c3485c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":61,"endLine":90,"content":"           LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n                try {\n                    InputStream es = null;\n                    if (null != httpConn.getErrorStream()) {\n                        es = ((HttpURLConnection) httpConn).getErrorStream();\n                        resp.setErrIs(es);\n                    } else {\n                        LOGGER.error(\"Recieved empty error response\");\n                    }\n                    resp.setErrorCode(httpConn.getResponseCode());\n                    resp.setResponseHeaders(httpConn.getHeaderFields());\n                } catch (Exception ex) {\n                    LOGGER.error(\"Exception occured while handling error data {}\", ex.getMessage(), ex);\n                    throw ex;\n                }\n                LOGGER.info(\"Received HttStatusCode: {} Retry Count: {}\", resp.getResponseCode(), retryCount);\n                sleep(pollInterval*1000);\n            }\n        } while (++retryCount <= maxRetryLimit);\n\n        return resp;\n    }\n    public HttpResponse getForClient(String requestURL, Map<String, Object> headers, int timeout, boolean isResourceDownloadRequest, Map<String, Object> queryParams) throws Exception {\n        HttpResponse resp = new HttpResponse();\n        HttpURLConnection httpConn = null;\n        try {\n            String queryParamsString = buildQueryParams(queryParams);\n            if (queryParamsString != null) {\n                if (requestURL.contains(\"?\")) {\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cbad4e8-3f4a-4bc4-a72e-e6dac9d3ff79","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":1,"endLine":32,"content":"package com.gainsight.integration.connector.dynamics.util;\n\nimport com.gainsight.bean.gsmeta.LookupDetails;\nimport com.gainsight.bean.gsmeta.LookupObjectDetails;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.DateTimeBehavior;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.*;\nimport com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.platform.metadata.DataType;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.olingo.client.api.domain.ClientEntity;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.type.TypeReference;\n\nimport java.util.*;\n\nimport static com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants.OPTION_SET_PROPERTY;\nimport static com.gainsight.integration.utils.common.UCConstants.GSDuct.*;\nimport static com.gainsight.integration.utils.common.UCConstants.GSDuct.FIELDS;\n\npublic class MSDynamicsObjectUtil {\n\n    private MSDynamicsObjectUtil() {}\n\n    public static MSDynamicsObject parseObject(Map<String, Object> entity) {\n        MSDynamicsObject msDynamicsObject = new MSDynamicsObject();\n        msDynamicsObject.setObjectId(DynamicsGainsig","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"021fe8c1-bfa6-40ee-ab5b-91c40adb1915","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/ColumnMapping.java","startLine":1,"endLine":57,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\npublic class ColumnMapping {\n\n    private String columnObjectTypeId;\n    private String columnName;\n    private String propertyName;\n    private String idColumnType;\n\n    public ColumnMapping() {\n    }\n\n    public ColumnMapping(String columnObjectTypeId, String columnName, String propertyName, String idColumnType) {\n        this.columnObjectTypeId = columnObjectTypeId;\n        this.columnName = columnName;\n        this.propertyName = propertyName;\n        this.idColumnType = idColumnType;\n    }\n\n    public String getColumnObjectTypeId() {\n        return columnObjectTypeId;\n    }\n\n    public void setColumnObjectTypeId(String columnObjectTypeId) {\n        this.columnObjectTypeId = columnObjectTypeId;\n    }\n\n    public String getColumnName() {\n        return columnName;\n    }\n\n    public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }\n\n    public String getPropertyName() {\n        return propertyName;\n    }\n\n    public void setPropertyName(String propertyName) {\n        this.propertyName = propertyName;\n    }\n\n    public String getIdColumnType() {\n        return idColumnType;\n    }\n\n    public void setIdColumnType(String idColumnType) {\n        this.idColumnType = idColumnType;\n    }\n\n    @Override\n    public String toString() {\n        return \"ColumnMapping{\" +\n                \"columnObjectTypeId='\" + columnObjectTypeId + '\\'' +\n                \", columnName='\" + columnName + '\\'' +\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51386c5a-f958-4b0f-9520-e45ef1b1dc4d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":273,"endLine":301,"content":"  LOGGER.error(\"Sleeping for 1 secs as the api call to BigQuery failed for retry count : {} due to : {}, code :{}\",\n                            retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                }\n            }\n            return arr;\n        }finally {\n            this.httpclient.close();\n            this.httpclient = HttpClients.createDefault();\n        }\n    }\n\n    @Override\n    public List<File> getPaginatedDataResults(String fileDir, String dhJobId, String query, int pageSize) throws Exception {\n        Map<String, Object> jobDetails = getBQQueryResultJobId(query);\n        String jobId = ((Map) jobDetails.get(JOB_REFERENCE)).get(\"jobId\").toString();\n        List<File> fileList = new ArrayList<>();\n        boolean jobCompleted = isBigQueryJobCompleted(jobDetails);\n        if (!jobCompleted) {\n            throw new Exception(String.format(\"Exhausted maximum wait time for completion of Big Query Job : %s\", jobId));\n        }\n        String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/queries/%s\", this.projectId, jobId);\n        boolean shouldContinue = true;\n        int retry = ALLOWED_RETRIES;\n        String nextPage = StringUtils.EMPTY;\n        Map<String, Object> responseMap = new HashMap<>();\n        while (shouldContinue) {\n            try {\n                Map<String, Object> queryParams = createQueryParamsForBQ(pageSize, nextPage);\n                URIBuilder uriBuilder = new URIBuilder(url).addParameter(MAX_","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61e59c5f-4028-48f0-9a03-d125bad71993","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.hubspot;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescription;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport org.apache.commons.io.IOUtils;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.util.*;\n\n/**\n * @author : vipinsharma\n * @createdOn : 24 Jun 2019 :: 17:44\n **/\n@Disabled\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@SuppressWarnings(\"all\")\nclass GainsightHubspotConnectorTest {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightHubspotConnectorTest.class);\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private GainsightHubspotChannelFactory gainsightHubspotChannelFactory;\n    private GainsightHubspotFetchService gainsightHubspotFetchService;\n\n    private static final int HUB_ID = 6042278;\n    private static final String  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd011f05-977c-47ad-a11f-e8d100ba376a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":200,"endLine":221,"content":"r dateTimeBehavior = DateTimeBehavior.forValue(DynamicsGainsightUtils.valueOf(dateTimeBehaviorMap.get(\"Value\")));\n\n                        switch (dateTimeBehavior) {\n                            case DATE_ONLY:\n                                dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(\"date\")).findFirst().get();\n                                meta.put(ORIGINAL_DATA_TYPE, \"date\");\n                                break;\n                        }\n                    }\n\n                    /*We don't support any fields of type VIRTUAL, except MultiSelectPicklist.\n                    MultiSelectPicklist's AttributeType is VIRTUAL and AttributeTypeName is MultiSelectPicklistType*/\n\n                    if (!dataTypeMappingsForField.isSupported()) {\n                        if (!dataTypeMappingsForField.getExternalDatatype().equalsIgnoreCase(\"VIRTUAL\")) {\n                            //skip the field as it's not supported\n                            continue;\n                        }\n                        Map<String, Object> attributeTypeName = (Map) attribute.get(\"AttributeTypeName\");\n                        if (Objects.nonNull(attributeTypeName) && \"MultiSelectPicklistType\".equalsIgnoreCase(DynamicsGainsightUtils.valueOf(attributeTypeName.get(\"Value\")))) {\n                            Optional<DataTypeMappings> dataTypeMappingsForFieldOptional = dataTypeMappings.stream()\n                    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f612629-6ce7-4ea8-acc1-c21949809b76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":341,"endLine":359,"content":");\n                String targetObjectOfLookupField = sourceLookupField.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();\n\n                ObjectDefinition targetObjectDefinition = objectDefinitionMap.containsKey(targetObjectOfLookupField) ? objectDefinitionMap.get(targetObjectOfLookupField) :\n                        msDynamicsSchemaService.getObjectAttributes(targetObjectOfLookupField, resolvePicklistOptions, null, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n                objectDefinitionMap.putIfAbsent(targetObjectDefinition.getDbName(), targetObjectDefinition);\n\n                if (mappedSourceColumns.length == 4) {\n                    /*lookup inside a lookup, length=4\n                        mappedSourceColumns=createdby.systemuser.businessunitid.businessunit\n                    */\n                    GSFieldDefinition targetLookupField = targetObjectDefinition.getFields().stream().filter(\n                                    gsFieldDefinition -> gsFieldDefinition.getFieldName().equals(mappedSourceColumns[2] + UCConstants.PERIOD + mappedSourceColumns[3]))\n                            .findFirst().get();\n                    if (targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST)) {\n                        multiPicklistColumns.add(projection);\n                    }\n                    if (Objects.nonNull(targetLookupField)\n                            && (targetLookupField.getMeta().getOr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"70ebf05c-a8ec-4e97-85ab-69e0af12798a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":543,"endLine":573,"content":"            data.clear();\n            batchCount++;\n            count = 0;\n            insertDataToStageTable.clearBatch();\n          }\n        }\n        //If there are any records left after reading the successFile, then load them into the stage table\n        if (!data.isEmpty()) {\n          log.info(\"[SAP DATASPHERE] Executing batch {}, with batch size {} for loading data into temp stage table\", batchCount, count);\n          insertDataToStageTable.executeBatch();\n          insertDataToStageTable.clearBatch();\n          if(batchCount == 1) {\n            writeToSuccessFile(successFile, header, data, batchCount);\n          } else {\n            writeToSuccessFile(successFile, null, data, batchCount);\n          }\n          data.clear();\n        }\n        log.info(\"[SAP DATASPHERE] Successfully loaded data into temp stage table\");\n      } catch (SQLException e) {\n        log.error(\"[SAP DATASPHERE] Error occurred while loading data into temp stage table: {} for batch {}\", e.getMessage(), count, e);\n        if (!data.isEmpty()) {\n          errorMessages = null != errorMessages ? (errorMessages + COMMA + SPACE + e.getMessage()) : e.getMessage();\n          failureFiles.add(prepareFailureCSVFile(header, data, targetObject + UNDERSCORE + \"batch\" + count));\n          data.clear();\n        }\n        insertDataToStageTable.clearBatch();\n      } finally {\n        insertDataToStageTable.close();\n        if(successFile.exists() && FileUtils.sizeOf(successFile) != 0) {\n          successFiles","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea461336-36c6-42ba-b4e9-7d7c37949de6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":143,"endLine":170,"content":"sInfo pnpConnectionsInfo) throws IOException {\n        String key = constructCacheKey(pnpConnectionsInfo);\n        SalesforceToken salesforceToken = TOKEN_CACHE.getIfPresent(key);\n        if (salesforceToken != null) {\n            if (validateAccessToken(pnpConnectionsInfo, salesforceToken)) {\n                LOGGER.info(\"Token in cache valid. tId:{}, connectionId:{}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId());\n                return salesforceToken;\n            } else {\n                LOGGER.info(\"Token in cache not1 valid. tId:{}, connectionId:{}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId());\n                return null;\n            }\n        } else {\n            LOGGER.info(\"Token in cache not2 valid. tId:{}, connectionId:{}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId());\n            return null;\n        }\n    }\n\n    private String constructCacheKey(PNPConnectionsInfo pnpConnectionsInfo) {\n        return String.format(\"%s-%s\", pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getModifiedDateStr()).intern();\n    }\n\n    private boolean validateAccessToken(PNPConnectionsInfo pnpConnectionsInfo, SalesforceToken salesforceToken) throws IOException {\n        String sfdcTokenId = salesforceToken.getId();\n        boolean result = false;\n        try {\n            if (sfdcTokenId != null) {\n                Map<String, Object> headers = Maps.newConcurrentMap();\n                headers.put(\"Au","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b5a451e5-cbe4-40dc-8813-221f44a24b3a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":564,"endLine":587,"content":"ct query {} \", query);\n\n                resultSet = stat.executeQuery(query);\n                while (resultSet.next()) {\n                    shouldContinue = true;\n                    int columnCount = resultSet.getMetaData().getColumnCount();\n                    Map map = new HashMap();\n\n                    for (int i = 0; i < columnCount; ++i) {\n                        Object object = resultSet.getObject(i + 1);\n                        if (object == null) {\n                            object = JSONObject.NULL;\n                        }\n                        if (object instanceof Timestamp) {\n                            for (FieldInfo fieldInfo : fieldInfoList) {\n                                if (fieldInfo.getJsonPath().equalsIgnoreCase(resultSet.getMetaData().getColumnLabel(i + 1))) {\n                                    DateTimeFormatter fmt = DateTimeFormatter.ofPattern(fieldInfo.getDateTimeProperties().getFormat());\n                                    LocalDateTime localDateTime = LocalDateTime.parse(object.toString(), defaultSrcFormatter);\n                                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\")).format(fmt));\n                                }\n                            }\n                        } else if (object instanceof java.util.Date) {\n                            for (FieldInfo fieldInfo : fieldInfoList) {\n                                if (fieldInfo.getJsonPath().equalsIgnoreC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb5ad846-5b85-4e51-8ab6-ca7e812aceeb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/InstanceDetail.java","startLine":52,"endLine":97,"content":"nName() {\n        return loginName;\n    }\n\n    public void setLoginName(String loginName) {\n        this.loginName = loginName;\n    }\n\n    public String getRegion() {\n        return region;\n    }\n\n    public void setRegion(String region) {\n        this.region = region;\n    }\n\n    public Long getCreatedDate() {\n        return createdDate;\n    }\n\n    public void setCreatedDate(Long createdDate) {\n        this.createdDate = createdDate;\n    }\n\n    public Long getModifiedDate() {\n        return modifiedDate;\n    }\n\n    public void setModifiedDate(Long modifiedDate) {\n        this.modifiedDate = modifiedDate;\n    }\n\n    @Override\n    public String toString() {\n        return \"InstanceDetail{\" +\n                \"instanceType='\" + instanceType + '\\'' +\n                \", instanceId='\" + instanceId + '\\'' +\n                \", instanceName='\" + instanceName + '\\'' +\n                \", instanceDomain='\" + instanceDomain + '\\'' +\n                \", loginName='\" + loginName + '\\'' +\n                \", region='\" + region + '\\'' +\n                \", createdDate=\" + createdDate +\n                \", modifiedDate=\" + modifiedDate +\n                '}';\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f43d826a-a3a5-4cc0-8bb7-c8e2402dc3f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileSplitter.java","startLine":1,"endLine":44,"content":"package com.gainsight.integration.utils.file;\n\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.io.Charsets;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.batch.item.file.separator.RecordSeparatorPolicy;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n/**\n * Created by\n * <p>\n * User: npkumar\n * Date: 25/06/24\n * Time: 07:51 PM\n */\n\npublic class FileSplitter {\n\n    private final int chunkLinesCount;\n    private final File bigFile;\n    private final RecordSeparatorPolicy recordSeparatorPolicy;\n    private final String encoding;\n    private final boolean appendHeaderToEachChunkFile;\n    private int fileNumber = 1;\n    private File chunksDir;\n    private final Long maxChunkedFileSizeInMB;\n    private static final Logger LOGGER = LoggerFactory.getLogger(FileSplitter.class);\n\n    public FileSplitter(File bigFile, RecordSeparatorPolicy recordSeparatorPolicy, String encoding, int chunkLinesCount, Long maxChunkedFileSizeInMB, File chunksDir, boolean appendHeaderToEachChunkFile) {\n        this.bigFile = bigFile;\n        this.recordSeparatorPolicy = recordSeparatorPolicy;\n        this.encoding = encoding;\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"720dab7a-69a2-4fa4-8ed5-9abd2b5d8c2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataGenerationResponse.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.MetadataJobStatus;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter\n@Builder\npublic class MetadataGenerationResponse {\n\n    private String jobId;\n    private String tenantId;\n    private String connectionId;\n    private String objectName;\n    private ConnectorType connectorType;\n    private List<GSFieldDefinition> generatedFields;\n    private MetadataJobStatus status;\n    private String errorMessage;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9092d66f-a25d-43e9-a051-88d6babed34b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":375,"endLine":404,"content":"Properties().getFormat());\n            LocalDateTime localDateTime = LocalDateTime.parse(objectValue.toString(), defaultSrcFormatter);\n            // assuming that we always get timestamp in UTC from sap\n            ZonedDateTime sourceTime = ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\"));\n            // if we have to convert to any timezone, do the conversion here\n            ZonedDateTime targetTime = sourceTime.withZoneSameInstant(ZoneId.of(timezone));\n            map.put(columnName, targetTime.format(dtf));\n          } else if (objectValue instanceof Date && Objects.nonNull(field.getDateTimeProperties())) {\n            DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n            LocalDate localDate = LocalDate.parse(objectValue.toString());\n            map.put(columnName, localDate.format(dtf));\n          } else {\n            map.put(columnName, objectValue);\n          }\n        }\n        recordValues.add(map);\n\n        if (recordValues.size() >= maxRecordsPerBatch) {\n          writeToFile(fileList, filePosition, recordValues, fileDir, jobId, maxFileSizeInMB);\n          recordValues.clear();\n        }\n      }\n      if (!recordValues.isEmpty()) {\n        writeToFile(fileList, filePosition, recordValues, fileDir, jobId, maxFileSizeInMB);\n        recordValues.clear();\n      }\n      log.info(\"[SAP DATASPHERE] Total files created is: {}\", fileList.size());\n      return fileList;\n    } catch (Exception ex) {\n      log.error(\"[SA","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55358ce2-feb3-4f0a-b6d2-3f2c83ba3eba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":421,"endLine":450,"content":"l((Map) paginationInfo.get(\"QueryParam\"));\n        }\n        populateQueryParams(queryParams, uriBuilder);\n        httpRequestBase.setURI(uriBuilder.build());\n        if (paginationInfo != null && paginationInfo.containsKey(\"URL\"))\n          httpRequestBase.setURI(new URI(paginationInfo.get(\"URL\").toString()));\n        return httpRequestBase;\n      case POST:\n        httpRequestBase = new HttpPost();\n        ExternalUrlDetails postBaserUrl = ObjectUtils.isEmpty(metadataApiConfigAttributes.getBaseUrl()) ?\n            metadataEngineConfig.getBaseUrl() : metadataApiConfigAttributes.getBaseUrl();\n        uriBuilder = new URIBuilder(getBaseUrl(postBaserUrl, flattenedConnectionInfo) + finalPath);\n        if (paginationInfo != null && paginationInfo.containsKey(\"QueryParam\")) {\n          queryParams.put(metadataApiConfigAttributes.getPaginationDetails().getRequestKey(),\n              paginationInfo.get(\"QueryParam\").toString());\n        }\n        populateQueryParams(queryParams, uriBuilder);\n        httpRequestBase.setURI(uriBuilder.build());\n        if (body != null) {\n          ((HttpEntityEnclosingRequestBase) httpRequestBase).setEntity(body);\n        }\n        if (paginationInfo != null && paginationInfo.containsKey(\"URL\"))\n          httpRequestBase.setURI(new URI(paginationInfo.get(\"URL\").toString()));\n        return httpRequestBase;\n      default:\n        throw new Exception(\"Method not supported\");\n    }\n  }\n\n  private void populateQueryParams(Map<String, String> queryParams,","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b595e892-f9fc-4ec6-a607-82dc9b47bdd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/ConnectorType.java","startLine":51,"endLine":108,"content":"CENOW(\"SERVICENOW\"),\n    ZUORA(\"ZUORA\"),\n    ZOHO(\"ZOHO\"),\n    PIPEDRIVE(\"PIPEDRIVE\"),\n    SURVEY_MONKEY(\"SURVEY_MONKEY\"),\n    QUALTRICS(\"QUALTRICS\"),\n\n    MICROSOFT_SQL_SERVER(\"MICROSOFT_SQL_SERVER\"),\n    GONG_IO(\"GONG_IO\"),\n    //Added to support RTS writeback(GS to External)\n    GAINSIGHT(\"GAINSIGHT\"),\n    INSIDED(\"INSIDED\"),\n    CUSTOMER_EDUCATION(\"CUSTOMER_EDUCATION\"),\n    CUSTOMER_COMMUNITY(\"CUSTOMER_COMMUNITY\"),\n    ZOOM(\"ZOOM\"),\n    SLACK(\"SLACK\"),\n    DATABRICKS(\"DATABRICKS\"),\n    MSTEAMS(\"MSTEAMS\"),\n    INTERCOMV2(\"INTERCOMV2\"),\n    ZUORAV2(\"ZUORAV2\"),\n    PIPEDRIVEV2(\"PIPEDRIVEV2\"),\n    ZOHOV2(\"ZOHOV2\"),\n    SAP_DATASPHERE(\"SAP_DATASPHERE\"),\n    EVENTS_CONNECTOR(\"EVENTS_CONNECTOR\");\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, ConnectorType> CONNECTOR_MAP = new HashMap<>();\n\n    static {\n        for (ConnectorType type : values()) {\n            CONNECTOR_MAP.put(type.value.toUpperCase(), type);\n        }\n    }\n\n    private String value;\n\n    ConnectorType(String value) {\n        this.value = value;\n    }\n\n    /**\n     * @return returns the value of Connector Type\n     */\n    @JsonValue\n    @com.fasterxml.jackson.annotation.JsonValue\n    public String getValue() {\n        return value;\n    }\n\n    @JsonCreator\n    @com.fasterxml.jackson.annotation.JsonCreator\n    public static ConnectorType getConnectorType(String connector) {\n        if (connector == null) {\n            return null;\n        }\n        re","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f52fcd46-122f-43e7-ad2b-a1b3cecfb00f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":585,"endLine":611,"content":"        } else if (object instanceof java.util.Date) {\n                            for (FieldInfo fieldInfo : fieldInfoList) {\n                                if (fieldInfo.getJsonPath().equalsIgnoreCase(resultSet.getMetaData().getColumnLabel(i + 1))) {\n                                    LocalDate localDate = LocalDate.parse(object.toString());\n                                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(DateTimeFormatter.ofPattern(fieldInfo.getDateTimeProperties().getFormat())));\n                                }\n                            }\n                        } else if (object != JSONObject.NULL) {\n                            map.put(resultSet.getMetaData().getColumnLabel(i + 1), object);\n                        }\n                    }\n                    recordValues.add(map);\n                    if (recordValues.size() >= (1000)) {\n                        createJsonFileToSendToConsumers(recordValues, extractFile);\n                        recordValues.clear();\n                    }\n                }\n                if (!shouldContinue) break;\n                offset = offset + limit;\n            }\n            if (!recordValues.isEmpty()) {\n                createJsonFileToSendToConsumers(recordValues, extractFile);\n            }else if(!extractFile.exists()){\n                LOGGER.info(\"Creating an emptyFile as the record Value is empty\");\n                extractFile.createNewFile();\n            }\n        } catch (SQLExc","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ecee932-8ecc-45ba-9761-96bc9f31585c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":418,"endLine":450,"content":" finally {\n                HttpClientUtils.closeQuietly(response);\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for objectId %s for assocaitionType %s\", objectId, gsHubspotAssociationEnum), exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return associationsResult;\n    }\n\n\n    @Override\n    public HttpResponse createSingleData(GSHubSpotEntityEnum gsHubSpotEntityEnum, Map<String, Object> data) throws Exception {\n        HttpResponse response = null;\n        try {\n            Map<String, Object> requestMap = new HashMap<>();\n            requestMap.put(\"properties\", data);\n            String url = BASE_API_URL + GSHubSpotEntityEnum\n                    .getWriteDataApiPath(gsHubSpotEntityEnum);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpPost.setURI(uriBuilder.build());\n            StringEntity stringEntity = new StringEntity(new ObjectMapper().writeValueAsString(requestMap), ContentType.APPLICATION_JSON);\n            this.httpPost.setEntity(stringEntity);\n            try {\n                response = this.httpclient.execute(httpPost);\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n                return ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"658bc493-7367-47e4-b82d-d5e9a8f415a9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceMetadataService.java","startLine":1,"endLine":12,"content":"package com.gainsight.integration.connector.sfdc.service;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.sfdc.bean.SFDCMetadataTypeEnum;\nimport com.gainsight.integration.utils.HttpResponse;\n\npublic interface SalesforceMetadataService {\n\n    public HttpResponse getSalesforceObjects(SFDCMetadataTypeEnum sfdcMetadataTypeEnum,\n                                             PNPConnectionsInfo pnpConnectionsInfo, String data) throws Exception;\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d587799d-6421-4847-8a15-ccd7b2f73e27","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/MSDynamicsObjectQuery.java","startLine":37,"endLine":81,"content":"    }\n\n    public MSDynamicsObjectQuery logicalName(String logicalName) {\n        this.params.put(\"LogicalName\", logicalName);\n        return this;\n    }\n\n    public MSDynamicsObjectQuery pluralName(String pluralName) {\n        this.params.put(\"EntitySetName\", pluralName);\n        return this;\n    }\n\n    public MSDynamicsObjectQuery includeFields(String... fields) {\n        CollectionUtils.addAll(includeFields, fields);\n        return this;\n    }\n    public String buildFilter() {\n        if (this.params.isEmpty()) {\n            return StringUtils.EMPTY;\n        }\n        StringBuilder builder = new StringBuilder();\n        for (Map.Entry<String, Object> entry: params.entrySet()) {\n            builder.append(entry.getKey());\n            builder.append(\" eq \");\n            if (entry.getValue() instanceof String) {\n                builder.append(\"'\");\n                builder.append(entry.getValue());\n                builder.append(\"'\");\n            } else {\n                builder.append(entry.getValue());\n            }\n            builder.append(\" and \");\n        }\n        builder.delete(builder.length() - 5, builder.length());\n        return builder.toString();\n    }\n\n    public String[] buildProjections() {\n        List<String> projections = Lists.newArrayList();\n        for (String field : includeFields) {\n            if (FIELDS_MAPPING.containsKey(field)) {\n                projections.add(FIELDS_MAPPING.get(field));\n            }\n        }\n        return projections.toArray","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f01f611c-6c3d-4651-b062-13b1ae51039a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":80,"endLine":107,"content":"\";\n    private static final String INSERT_QUERY = \"INSERT INTO %1$s (%2$s) VALUES (%3$s)\";\n    private static final String UPDATE_QUERY = \"UPDATE %1$s SET %2$s WHERE %3$s\";\n    private static final String USE_CATALOG_QUERY = \"USE CATALOG `%s`\";\n    private static final String SHOW_TABLES_QUERY = \"SHOW TABLES FROM %s\";\n    private static final String SHOW_VIEWS_QUERY = \"SHOW VIEWS FROM %s\";\n    private static final String TEMP_STAGE_TABLE_NAME = \"`%1$s`.`%2$s`.`%3$s_%4$s_temp`\";\n    private static final String CREATE_TEMP_STAGE_TABLE = \"CREATE TABLE %1$s (%2$s)\";\n    private static final String TABLE_ABSOLUTE_PATH = \"`%1$s`.`%2$s`.`%3$s`\";\n    private static final String DROP_TEMP_STAGE_TABLE = \"DROP TABLE %1$s\";\n    private static final String CAST_TO_DOUBLE = \"CAST( %1$s AS DOUBLE)\";\n    private static final String MERGE_INTO_TARGET_TABLE_UPSERT = \"MERGE INTO %1$s \" +\n            \" USING %2$s \" +\n            \" ON %3$s \" +\n            \" WHEN MATCHED THEN \" +\n            \" UPDATE SET %4$s \" +\n            \" WHEN NOT MATCHED THEN \" +\n            \" INSERT (%5$s) VALUES (%6$s) \";\n    private static final String MERGE_INTO_TARGET_TABLE_UPDATE = \"MERGE INTO %1$s \" +\n            \" USING %2$s \" +\n            \" ON %3$s \" +\n            \" WHEN MATCHED THEN \" +\n            \" UPDATE SET %4$s \";\n    private static final String MERGE_INTO_TARGET_TABLE_INSERT = \"MERGE INTO %1$s \" +\n            \" USING %2$s \" +\n            \" ON 1==2 \" +\n            \" WHEN NOT MATCHED THEN \" +\n            \" INS","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a85f018f-d929-45a1-b678-c99fb4d3faf6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/SetupStatus.java","startLine":1,"endLine":46,"content":"package com.gainsight.integration.bean.enums.common;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonCreator;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum SetupStatus {\n\n    INIT(\"INIT\"),\n    IN_PROGRESS(\"IN_PROGRESS\"),\n    COMPLETED(\"COMPLETED\"),\n    FAILED(\"FAILED\"),\n    PAUSED(\"PAUSED\"),\n    DEACTIVATED(\"DEACTIVATED\"),\n    CONFIGURATION_FAILED(\"CONFIGURATION_FAILED\"),\n    ID_MAPPING_FAILED(\"ID_MAPPING_FAILED\");\n\n    private String value;\n\n    SetupStatus(String value) {\n        this.value = value;\n    }\n\n    /**\n     * Pre-populate the setup status map for performance.\n     */\n    private static final Map<Object, SetupStatus> SETUP_STATUS_MAP = new HashMap<>();\n\n    static {\n        for (SetupStatus status : values()) {\n            SETUP_STATUS_MAP.put(status.value.toUpperCase(), status);\n        }\n    }\n\n    @JsonCreator\n    @com.fasterxml.jackson.annotation.JsonCreator\n    public static SetupStatus getSetupStatus(String status) {\n        if (StringUtils.isEmpty(status)) {\n            return null;\n        }\n        return SETUP_STATUS_MAP.get(status.toUpperCase());\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12aa13fd-b1b7-41ae-8e36-1ff8d1c8b46c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditData.java","startLine":1,"endLine":64,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.audit;\n\nimport com.gainsight.integration.bean.enums.audit.AuditEntityType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.codehaus.jackson.annotate.JsonProperty;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 10:36\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AuditData implements Serializable {\n\n  private static final long serialVersionUID = -1L;\n\n  @JsonProperty(\"entityID\")\n  private String entityID;\n\n  @JsonProperty(\"entityName\")\n  private String entityName;\n\n  @JsonProperty(\"entityType\")\n  private AuditEntityType auditEntityType;\n\n  @JsonProperty(\"connectorType\")\n  private ConnectorType connectorType;\n\n  @JsonProperty(\"auditDetails\")\n  private List<AuditDetails> auditDetailsList;\n\n  /**\n   * @return entityId\n   */\n  public String getEntityID() {\n    return entityID;\n  }\n\n  /**\n   * @param entityID entityId to be set. For example jobId,connectionId\n   */\n  public void setEntityID(String entityID) {\n    this.entityID = entityID;\n  }\n\n  /**\n   * @return name of the entity\n   */\n  public String getEntityName() {\n    return entityName;\n  }\n\n  /**\n   * @param entityName name of the entity for which Audit is done. For Example jobName, ConnectionName\n   */\n  public void setEntityName(String entityName) {\n    this.entityN","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b8a954b0-385f-4692-b59f-23946dcf2376","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelFactory.java","startLine":31,"endLine":52,"content":"g refreshToken,\n                                                                                   String accessToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[MSTEAMS] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[MSTEAMS] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[MSTEAMS] Refresh token cannot be null\");\n        if(StringUtils.isBlank(accessToken)){\n            Map<String, Object> accessTokenMap = getAccessToken(clientId, clientSecret, refreshToken);\n            accessToken = (String)accessTokenMap.get(\"access_token\");\n        }\n        return new GainsightMSTeamsChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public GainsightMSTeamsChannelService getChannelServiceWithOAuth20(String clientId, String clientSecret, String refreshToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[MSTEAMS] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[MSTEAMS] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[MSTEAMS] Refresh token cannot be null\");\n        Map<String, Object> accessTokenMap = getAccessToken(clientId, clientSecret, refreshToken);\n        String accessToken = (String)accessTokenMap.get(\"access_token\");\n        return new GainsightMSTeamsChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public Map getAccessToken(String clientId, String clientSecret, String refre","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eb7ae765-c394-45d0-9888-449cebf8ba60","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":200,"endLine":221,"content":"transport protocol to use in the Thrift(SPARK server) layer is mentioned by this property\n                default value of transportMode is http\n            */\n            prop.put(TRANSPORT_MODE, HttpVersion.HTTP.toLowerCase());\n\n            /*\n            Enabling this will improve performance of SPARK queries.\n            Databricks suggest to test for all data types, before enabling as it results in serialization issue.\n            Disabling as we aren't using spark queries and we are facing de-serialization issue.\n             */\n            prop.put(ENABLE_ARROW, \"0\");\n\n            if (StringUtils.isNotEmpty(properties.getOrDefault(UCConstants.GSIntegration.ENCODED_SSL_CERTIFICATE, StringUtils.EMPTY).toString())) {\n                trustStoreFile = getTrustStore(properties.get(UCConstants.GSIntegration.ENCODED_SSL_CERTIFICATE).toString());\n                prop.put(SSL, \"1\");\n                prop.put(SSL_TRUSTSTORE, trustStoreFile.getAbsolutePath());\n                prop.put(SSL_TRUSTSTORE_PWD, TRUSTSTORE_FILE_PWD);\n            }\n            if(properties.containsKey(UCConstants.GSIntegration.MTLS_ENABLED) && Boolean.parseBoolean(properties.get(UCConstants.GSIntegration.MTLS_ENABLED).toString())) {\n                String certificatePath = DeploymentProperties.getDeploymentProperties().getValue(\"mtls.certificate.path\");\n                String certificatePassword = DeploymentProperties.getDeploymentProperties().getValue(\"mtls.certificate.password\");\n                if(Strin","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dcb35987-68e4-42a3-bc15-9f69b0e261d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":102,"endLine":139,"content":";\n    private static final String MERGE_INTO_TARGET_TABLE_INSERT = \"MERGE INTO %1$s \" +\n            \" USING %2$s \" +\n            \" ON 1==2 \" +\n            \" WHEN NOT MATCHED THEN \" +\n            \" INSERT (%3$s) VALUES (%4$s) \";\n    private static final String LOAD_DATA_INTO_TEMP_STAGE_TABLE = \"COPY INTO %1$s \" +\n            \"FROM 'dbfs:%2$s' \" +\n            \"FILEFORMAT = CSV \" +\n            \"FORMAT_OPTIONS ( \" +\n            \"'header' = 'true', \" +\n            \"'multiline' = 'true', \" +\n            \"'quote' = '%3$s', \" +\n            \"'escape' = '%4$s', \" +\n            \"'sep' = '%5$s')\";\n\n    private static final String TOTAL_RECORDS_QUERY = \"SELECT COUNT(1) AS row_count FROM %1$s\";\n    //private static final String HIVE_STACK_TRACE_STARTS_WITH = \"at org.apache.spark.sql\";\n\n    /* Connection object would be closed after every operation.\n       We need to make sure of creating a new connection for every operation.\n    */\n    private Connection connection;\n    private String db;\n    private String schema;\n    private String wareHouse;\n    private String organizationId;\n    private String clusterId;\n    private String oauthClientId;\n    private String oauthClientSecret;\n    private String accessToken;\n    private String dbHost;\n    private String userName;\n    private String password;\n\n    public GainsightDatabricksChannelServiceImpl(Map properties, boolean isValueEncrypted, AuthorizationType authorizationType) {\n        File trustStoreFile = null;\n        File keyStoreFile = null","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd44628c-ddd0-4b31-9861-1b1c9fbac22c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/QueryResult.java","startLine":1,"endLine":21,"content":"package com.gainsight.integration.rts.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\n@ToString\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class QueryResult {\n    private boolean done;\n    private int totalSize;\n    private String nextRecordsUrl;\n    private boolean isError = false;\n    private List<Map<String, Object>> records;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce82f26f-7fcf-49af-9a1b-8c913cf946d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":167,"endLine":187,"content":"pnpConnectionsInfo) {\n        String oauthClientId = pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.OAUTH_CLIENT_ID).toString();\n        String oauthClientSecret = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET));\n        String accessTokenGenerationURI = String.format(ACCESS_TOKEN_GENERATION_URI, pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DATABASE_HOST));\n\n        int retryCount = 0;\n        String accessToken = null;\n        while (retryCount < DBFS_OPERATIONS_MAX_RETRY_COUNT) {\n            try {\n                CloseableHttpClient httpclient = HttpClients.createDefault();\n                HttpPost httpPost = new HttpPost(accessTokenGenerationURI);\n                httpPost.setHeader(CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED);\n                httpPost.setHeader(UCConstants.AUTHORIZATION, UCConstants.BASIC + Base64.getEncoder().encodeToString((oauthClientId + UCConstants.COLON + oauthClientSecret).getBytes()));\n\n                List<NameValuePair> params = new ArrayList<>(2);\n                params.add(new BasicNameValuePair(\"grant_type\", \"client_credentials\"));\n                params.add(new BasicNameValuePair(\"scope\", \"all-apis\"));\n                httpPost.setEntity(new UrlEncodedFormEntity(params, StandardCharsets.UTF_8.name()));\n\n                HttpResponse response = httpclient.execute(httpPost);\n                HttpEntity entity = response.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2871bb1a-4742-4283-bd18-9e062ddbd792","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":187,"endLine":192,"content":"ion tId:{} connectionId:{} connectionName:{}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getConnectionName(), e);\n            return false;\n        }\n        return result;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d3f3c308-c623-4f3a-a507-d07cdefb56b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":676,"endLine":710,"content":"  val = \"'\" + val + \"'\";\n                    }\n                    return val;\n                }).collect(Collectors.toList()), \",\"));\n                stringBuilder.append(clause);\n                whereClause.add(stringBuilder.toString());\n            } else {\n                List<String> childRules = Lists.newArrayList();\n                rule.getRules().forEach(childRule -> childRules.addAll(buildRule(childRule)));\n                whereClause.add(wrapRoundBrackets(\n                        Joiner.on(rule.getCondition().getSpaceWrappedFilterCondition()).join(childRules)));\n            }\n            return whereClause;\n        }catch (Exception e){\n            LOGGER.error(\"exeception {}\",e);\n            throw e;\n        }\n    }\n    private static Object handleValue(Object value, FilterOperator op) {\n        switch (op) {\n            case CONTAINS:\n            case DOES_NOT_CONTAINS:\n                value = \"%\" + value + \"%\";\n                return value;\n            case STARTS_WITH:\n                value = value + \"%\";\n                return value;\n            case ENDS_WITH:\n                value = \"%\" + value;\n                return value;\n            default:\n                return value;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b9fe2e1-985f-4012-be66-67f9ef0da248","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/bean/UCChannelObject.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.rts.bean;\n\nimport com.gainsight.bean.BaseGSEntity;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\n@ToString(callSuper = true)\npublic class UCChannelObject extends BaseGSEntity {\n\n    /**\n     * in salesforce we need to append channelName with selected entity\n     */\n    public static final String PROP_FULL_NAME = \"FullName\";\n\n    public static final String PROP_COMPOUND_FIELD_TYPE_FIELDS_MAP = \"compoundFieldTypeFieldMap\";\n    /**\n     * object name and selected entity are diff in salesforce where for Account object value will be AccountChangeEvent.\n     */\n    public static final String PROP_SELECTED_ENTITY = \"selectedEntity\";\n    public static final String PROP_EXTERNAL_ID = \"externalId\";\n    public static final String PROP_IS_CUSTOM_OBJECT = \"isCustomObject\";\n    public static final String PROP_TRACKED_FIELDS = \"trackedFields\";\n    public static final String PROP_ENRICHED_FIELDS = \"enrichedFields\";\n    public static final String PROP_FILTER_EXPRESSION = \"filterExpression\";\n\n    private String channelId;\n    private String objectName;\n    private Map<String, Object> properties; // NOSONAR\n    private long lastReplayId;\n    private Date lastReplayDate;\n    private long lastProcessedReplayId;\n    private Date lastProcessedReplayDate;\n\n    public Map<String, Object> g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c471888-102b-4c96-8abc-e6259866e734","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":22,"endLine":44,"content":"etadata(false, true, true)));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"companyId\", \"companyId\", \"companyId\", \"string\", \"text\"));\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                }\n                break;\n\n            case CONTACT:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"vid\", \"vid\", \"vid\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"is-contact\", \"is-contact\", \"is-contact\", \"bool\", \"booleancheckbox\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"profile-token\", \"profile-token\", \"profile-token\", \"string\", \"text\"));\n                }\n                break;\n\n            case DEAL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ddfc273-3152-4818-a241-02268745d40c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":660,"endLine":678,"content":"T_MAPPER.writeValueAsString(requestMap);\n                    httpPatch.setEntity(new StringEntity(requestPayload, ContentType.APPLICATION_JSON));\n                    try (CloseableHttpResponse response = httpClient.execute(httpPatch)) {\n                        if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_NO_CONTENT == response.getStatusLine().getStatusCode()) {\n                            result.put(STATUS, GSIntegration.SUCCESS);\n                        } else if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_UNAUTHORIZED == response.getStatusLine().getStatusCode()) {\n                            String errCode = String.format(\"Status Line: %s %s\", response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n                            result.put(STATUS, GSIntegration.FAILED);\n                            result.put(ERROR_MESSAGE, errCode);\n                        } else {\n                            HttpEntity entity = response.getEntity();\n                            if (entity != null) {\n                                InputStream inputStream = entity.getContent();\n                                String jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                                result.put(STATUS, GSIntegration.FAILED);\n                                result.put(ERROR_MESSAGE, jsonResponse);\n                            }\n                        }\n                    } catch (IOException","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8654d2d1-0058-40ce-82d8-c34974a8958a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/HubspotBulkImportBean.java","startLine":1,"endLine":58,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotBulkImportBean {\n\n    private String name;\n    private Map<String,Object> importOperations;\n\n    private List<InternalBulkFileBean> files;\n\n    public HubspotBulkImportBean() {\n    }\n\n    public HubspotBulkImportBean(String name, Map<String, Object> importOperations, List<InternalBulkFileBean> files) {\n        this.name = name;\n        this.importOperations = importOperations;\n        this.files = files;\n    }\n\n    public HubspotBulkImportBean(String name, List<InternalBulkFileBean> files) {\n        this.name = name;\n        this.files = files;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<InternalBulkFileBean> getFiles() {\n        return files;\n    }\n\n    public void setFiles(List<InternalBulkFileBean> files) {\n        this.files = files;\n    }\n\n    public Map<String, Object> getImportOperations() {\n        return importOperations;\n    }\n\n    public void setImportOperations(Map<String, Object> importOperations) {\n        this.importOperations = importOperations;\n    }\n\n    @Override\n    public String toString() {\n        return \"HubspotBulkImportBean{\" +\n                \"name='\" + name + '\\'' +\n                \", importOperations=\" + importOp","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1fffed02-532f-4033-958b-016baab17dd5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ApiConfigAttributes.java","startLine":1,"endLine":40,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.enums.metadata.engine.BodyFormat;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport jodd.net.HttpMethod;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class ApiConfigAttributes implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String path;\n    private String responseRootKey;\n    private ResponseType responseType;\n    private HttpMethod httpMethod;\n    private String prefixForMetadataFetch = \"\";\n    private String queryApiRecordsKey;\n    private List<AuthApiAttributes> headerDetails;\n    private List<AuthApiAttributes> queryParamDetails;\n    private List<AuthApiAttributes> bodyParamDetails;\n    private PaginationDetails paginationDetails;\n    private BodyFormat bodyFormat;\n    private ExternalUrlDetails baseUrl;\n    private String replaceByIdRegexInPath;\n    private Map<String,Object> properties;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c37e3ef3-64a5-46b2-89b4-216427341598","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/DateTimeBehavior.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.bean.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum DateTimeBehavior {\n    DATE_ONLY(\"DateOnly\"),\n    TIME_ZONE_INDEPENDENT(\"TimeZoneIndependent\"),\n    USER_LOCAL(\"UserLocal\");\n\n    private String value;\n\n    DateTimeBehavior(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    private static final Map<Object, DateTimeBehavior> DATE_TIME_BEHAVIOR_MAP = new HashMap<>();\n\n    static {\n        for (DateTimeBehavior dateTimeBehavior : values()) {\n            DATE_TIME_BEHAVIOR_MAP.put(dateTimeBehavior.value.toUpperCase(), dateTimeBehavior);\n        }\n    }\n\n    public static DateTimeBehavior forValue(String value) {\n        if (value == null) {\n            return USER_LOCAL;\n        }\n        return DATE_TIME_BEHAVIOR_MAP.getOrDefault(value.toUpperCase(), USER_LOCAL);\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a77a535a-02c7-4ab8-bdd2-092f8a3563da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":213,"endLine":239,"content":"elds\");\n            List<GainsightBiqQueryFieldDescription> gainsightBiqQueryFieldDescription = getListOfFields(fields);\n            gainsightBigQueryEntityDescription = new GainsightBigQueryEntityDescription(object, gainsightBiqQueryFieldDescription);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                LOGGER.error(\"Error occured at the time of fetching tables/object\");\n                throw new SystemException(responseMap.get(\"cause\").toString());\n            }\n            return gainsightBigQueryEntityDescription;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occured at the time of fetching tables/objects {}\", e);\n            throw new SystemException(e.getMessage());\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n    }\n\n    @Override\n    public JsonArray getQueryResults(String query,int maxResult) throws Exception {\n        try {\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/queries\", this.projectId);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            LOGGER.info(\"URI for fetching data {}\", uriBuilder.build());\n            this.httpPost.setURI(uriBuilder.build());\n            this.httpPost.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n            StringEntity stringEntity = new StringEntity(String.format(BQ_QUERY_SCRIPT, query,maxResult), StandardCharsets.UTF_8);\n            this.httpPost.setEntity(stringEntity);\n            Http","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7668a46-3ff9-4847-87d2-cfe54a425e48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/UnifiedConnectorRequest.java","startLine":1,"endLine":58,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.db.common;\n\nimport com.gainsight.integration.utils.common.UCConstants;\n\nimport java.io.Serializable;\nimport java.util.UUID;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 19/10/16, 15:43\n */\npublic class UnifiedConnectorRequest implements Serializable {\n\n  private static final long serialVersionUID = -1L;\n  private final String UC_ID ;\n  private Object requestObject;\n\n  /**\n   *\n   * @param requestObject\n   */\n  public UnifiedConnectorRequest(Object requestObject) {\n    UC_ID = String.format(UCConstants.UC+ UCConstants.FILLER+\"%s\", UUID.randomUUID().toString());\n    this.requestObject = requestObject;\n  }\n\n  public UnifiedConnectorRequest(Object requestObject, String jobId) {\n    UC_ID = String.format(UCConstants.UC+ UCConstants.FILLER+\"%s\", UUID.randomUUID().toString()) + \"::\"+ jobId;\n    this.requestObject = requestObject;\n  }\n\n\n  /**\n   * @return\n   */\n  public Object getRequestObject() {\n    return requestObject;\n  }\n\n\n  /**\n   * @param requestObject\n   */\n  public void setRequestObject(Object requestObject) {\n    this.requestObject = requestObject;\n  }\n\n  /**\n   * @return\n   */\n  public String getUC_ID() {\n    return UC_ID;\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"843a0d29-61f5-4377-a01b-f112f3387b49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/AuditOperationType.java","startLine":1,"endLine":72,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.audit;\n\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 10:51\n */\npublic enum AuditOperationType {\n  /**\n   * CREATE operation\n   */\n  CREATE(\"Create\"),\n  /**\n   * UPDATE operation\n   */\n  UPDATE(\"Update\"),\n  /**\n   * DELETE operation\n   */\n  DELETE(\"Delete\");\n\n  /**\n   * Pre-populate the AuditOperationType map for performance.\n   */\n  private static final Map<Object, AuditOperationType> OPERATION_TYPE_MAP = new HashMap<>();\n\n  static {\n    for (AuditOperationType type : values()) {\n      OPERATION_TYPE_MAP.put(type.operation.toUpperCase(), type);\n    }\n  }\n\n\n  private final String operation;\n\n  AuditOperationType(String operation) {\n    this.operation = operation;\n  }\n\n  /**\n   * @return returns the value of Audit Operation\n   */\n  @JsonValue\n  public String getOperation() {\n    return operation;\n  }\n\n  @Override\n  public String toString() {\n    return operation;\n  }\n\n  @JsonCreator\n  public static  AuditOperationType getAuditOperationType(String operation){\n    if (operation == null) {\n      return null;\n    }\n    return OPERATION_TYPE_MAP.get(operation.toUpperCase());\n  }\n  public String getTranslatedV","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fce2a41e-9661-40a9-9541-e9ed1e546453","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":469,"endLine":488,"content":"Generator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n\n            URI nextUri = clientEntitySet.getNext();\n            int currentRetryCount = 0;\n            while (nextUri != null && (currentRetryCount <= maxRetryCount)) {\n                try {\n                    ClientEntitySet clientEntitySetNext = readEntitiesClientEntitySet(client, nextUri);\n                    generateRecords(recordResponseGenerator, clientEntitySetNext, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                            getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n                    nextUri = clientEntitySetNext.getNext();\n                } catch (HttpClientException httpClientException) {\n                    if (Objects.nonNull(MSDynamicsContext.getCtx()) && Objects.isNull(MSDynamicsContext.getCtx().getRefreshToken())\n                            && Objects.nonNull(MSDynamicsContext.getTenantId())) {\n                        LOGGER.info(\"Records fetched so far: {}\", recordResponseGenerator.getRecordsPulled());\n                        client = GSODataClientFactory.getOdataClient();\n                        ++currentRetryCount;\n                        LOGGER.info(\"Retrying to fetch data. count {}\", currentRetryCount);\n                    } else {\n                        throw httpCl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ed07b8a0-e9c6-4947-b5c1-ad24a8c3d570","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":674,"endLine":701,"content":"STATUS, GSIntegration.FAILED);\n                                result.put(ERROR_MESSAGE, jsonResponse);\n                            }\n                        }\n                    } catch (IOException e) {\n                        LOGGER.error(\"Exception occurred while loading record to: {}\", targetObject, e);\n                        result.put(STATUS, GSIntegration.FAILED);\n                        result.put(ERROR_MESSAGE, e.getMessage());\n                    }\n                    break;\n                default:\n                    LOGGER.error(\"{} Operation not supported\", ductDataOperation.getDuctDataOperation());\n                    throw new SystemException(AdapterErrorMessages.WRITEBACK_OPERATION_NOT_DEFINED.getTranslatedMessage(), HttpStatus.SC_BAD_REQUEST);\n            }\n            LOGGER.debug(\"Payload being submitted: {}\", requestPayload);\n            return result;\n        } catch (SystemException systemException) {\n            LOGGER.error(\"Exception occurred while loading record to: {}\", targetObject, systemException);\n            result.put(STATUS, GSIntegration.FAILED);\n            result.put(ERROR_MESSAGE, systemException.getMessage());\n            throw systemException;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while loading record to: {}\", targetObject, ex);\n            result.put(STATUS, GSIntegration.FAILED);\n            result.put(ERROR_MESSAGE, ex.getMessage());\n            throw ex;\n        } finally {\n            LOG","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a323149a-9c7f-474c-8fd0-9d8040f48705","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":59,"endLine":94,"content":" Edm edm = readEdm(serviceUrl);\n/*\n    List<FullQualifiedName> ctFqns = new ArrayList<FullQualifiedName>();\n    List<FullQualifiedName> etFqns = new ArrayList<FullQualifiedName>();\n    for (EdmSchema schema : edm.getSchemas()) {\n      for (EdmComplexType complexType : schema.getComplexTypes()) {\n        ctFqns.add(complexType.getFullQualifiedName());\n      }\n      for (EdmEntityType entityType : schema.getEntityTypes()) {\n        etFqns.add(entityType.getFullQualifiedName());\n      }\n    }\n    print(\"Found ComplexTypes\", ctFqns);\n    print(\"Found EntityTypes\", etFqns);\n\n    print(\"\\n----- Inspect each property and its type of the first entity: \" + etFqns.get(0) + \"----\");\n    EdmEntityType etype = edm.getEntityType(etFqns.get(0));\n    for (String propertyName : etype.getPropertyNames()) {\n      EdmProperty property = etype.getStructuralProperty(propertyName);\n      FullQualifiedName typeName = property.getType().getFullQualifiedName();\n      print(\"property '\" + propertyName + \"' \" + typeName);\n    }\n    \n*/\n    print(\"\\n----- Read Entities ------------------------------\");\n        serviceUrl = \"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CONTACT_SRV;v=0002\";\n    ClientEntitySetIterator<ClientEntitySet, ClientEntity> iterator = readEntities(edm, serviceUrl, \"Contacts\");\n\n    while (iterator.hasNext()) {\n      ClientEntity ce = iterator.next();\n      print(\"Entry:\\n\" + prettyPrint(ce.getProperties(), 0));\n    }\n\n\n\n    print(\"\\n----- Read Entry -----------","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ed1b107-d2f0-4e9c-b69b-eb3db47378b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/OperatorType.java","startLine":30,"endLine":81,"content":"ndType.BINARY),\n  //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n  INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", OperandType.BINARY),\n  EXCLUDES(\"Excludes\", \"excludes\", \"excludes\", \"$left NOT IN ($right)\", OperandType.BINARY),\n  IS_NULL(\"Is Null\", \"isNull\", \"isNull\", \"isNull\", OperandType.UNARY),\n  IS_NOT_NULL(\"Is Not Null\", \"isNotNull\", \"isNotNull\", \"isNotNull\", OperandType.UNARY);\n\n  private static final Map<String, OperatorType> MAP = new HashMap<>();\n\n    static {\n        for (OperatorType type : values()) {\n            MAP.put(type.alias.toLowerCase(), type);\n        }\n    }\n\n    private String display;\n    private String symbol;\n    private String alias;\n    private String sql;\n    private OperandType operandType;\n\n    OperatorType(String display, String symbol, String alias, String sql, OperandType operandType) {\n        this.display = display;\n        this.symbol = symbol;\n        this.alias = alias;\n        this.sql = sql;\n        this.operandType = operandType;\n    }\n\n    public String getDisplay() {\n        return display;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    public String getPostgresSql() {\n        return sql;\n    }\n\n    public String getAlias() {\n        return alias;\n    }\n\n    public OperandType getOperandType() {\n        return operandType;\n    }\n\n    public String replace(String sql, String with, boolean left) {\n        if (left) {\n            return sql.replace(\"$l","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eeb4afff-d3cd-4016-91ed-555a9c8971d9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.databricks;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\ni","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c829bd0-d064-47aa-bb5a-2617aeab47c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPIntegrationChannel.java","startLine":72,"endLine":125,"content":"y description =\n          new CsdlProperty()\n              .setName(\"Description\")\n              .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());\n\n      // create CsdlPropertyRef for Key element\n      CsdlPropertyRef propertyRef = new CsdlPropertyRef();\n      propertyRef.setName(\"ID\");\n\n      // configure EntityType\n      CsdlEntityType entityType = new CsdlEntityType();\n      entityType.setName(ET_PRODUCT_NAME);\n      entityType.setProperties(Arrays.asList(id, name, description));\n      entityType.setKey(Collections.singletonList(propertyRef));\n\n      return entityType;\n    }\n\n    return null;\n  }\n\n  @Override\n  public CsdlEntitySet getEntitySet(FullQualifiedName entityContainer, String entitySetName) {\n\n    if (entityContainer.equals(CONTAINER)) {\n      if (entitySetName.equals(ES_PRODUCTS_NAME)) {\n        CsdlEntitySet entitySet = new CsdlEntitySet();\n        entitySet.setName(ES_PRODUCTS_NAME);\n        entitySet.setType(ET_PRODUCT_FQN);\n\n        return entitySet;\n      }\n    }\n\n    return null;\n  }\n\n  @Override\n  public CsdlEntityContainer getEntityContainer() {\n\n    // create EntitySets\n    List<CsdlEntitySet> entitySets = new ArrayList<CsdlEntitySet>();\n    entitySets.add(getEntitySet(CONTAINER, ES_PRODUCTS_NAME));\n\n    // create EntityContainer\n    CsdlEntityContainer entityContainer = new CsdlEntityContainer();\n    entityContainer.setName(CONTAINER_NAME);\n    entityContainer.setEntitySets(entitySets);\n\n    return entityContainer;\n  }\n\n  @Override\n  public","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cac51266-d959-4f90-8114-2476320ec784","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":110,"endLine":120,"content":"\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.calls.results[*].id\", \"Associated Call Ids\", \"associations.calls.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CALL.name()));\n                }\n                break;\n            case FEEDBACK_SUBMISSION:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDes","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec5cbfca-ed86-4c0b-92fc-bcb45c737ab5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImpl.java","startLine":37,"endLine":72,"content":"     }\n        }\n        return result;\n    }\n\n    @Override\n    public List<String> listAllPropertiesOfEntity(ODataClient oDataClient, String qualifiedEntityName, String serviceUrl) throws IOException {\n        List<String> result = Lists.newArrayList();\n        Edm edm = gainsightSAPChannelService.readEdm(serviceUrl,oDataClient);\n        for (EdmSchema schema : edm.getSchemas()) { //\n            for (EdmEntityType edmEntityType : schema.getEntityTypes() ) {\n                if(edmEntityType.getName().equals(qualifiedEntityName)){\n                    result.addAll(edmEntityType.getPropertyNames());\n                }\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public InputStream pullEntityData(ODataClient oDataClient, String qualifiedEntityName, int topValue, String serviceUrl){\n       InputStream inputStream = gainsightSAPChannelService.readEntitiesIntoStream(serviceUrl,qualifiedEntityName,oDataClient,topValue);\n       return inputStream;\n    }\n\n    @Override\n    public Object pullEntityDataForKey(ODataClient oDataClient, String qualifiedEntityName, String keyValue, String serviceUrl){\n        return gainsightSAPChannelService.readEntityWithKey(serviceUrl,qualifiedEntityName,keyValue,oDataClient);\n    }\n\n    @Override\n    public Edm pullEntityDataModel(ODataClient oDataClient, String serviceUrl) throws IOException {\n        return gainsightSAPChannelService.readEdm(serviceUrl,oDataClient);\n    }\n\n    public InputStream pullEntityDataForGivenProject","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4bf273d-0f38-4862-aa7e-ff8d4c92471a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":57,"endLine":76,"content":"tions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectId\", \"objectId\", \"objectId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectType\", \"objectId\", \"objectType\", \"string\", \"text\"));\n                }\n                break;\n\n            case TICKET:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[0].id\", \"companyId\", \"associations.companies.results[0].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n                } else {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectId\", \"objectId\", \"objectId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"companyId\", \"companyId\", \"companyId\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                }\n                break;\n            case CALL:\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b5c7e58-5ac1-4972-9a9e-3b8340c59478","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":104,"endLine":129,"content":"bricks file system: {}\", e.getMessage(), e);\n                    throw e;\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Something went wrong in uploading file to Databricks file system: {}\", e.getMessage(), e);\n                ++retryCount;\n            }\n        }\n        return null;\n    }\n\n    public static void deleteFileFromDatabricksFileSystem(PNPConnectionsInfo pnpConnectionsInfo, String path) {\n        int retryCount = 0;\n        Map<String, String> headers = new HashMap<>();\n        String url = String.format(DBFS_URI_TO_DELETE_FILE, pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.DATABASE_HOST));\n\n        if (AuthorizationType.OAUTH.equals(pnpConnectionsInfo.getAuthorizationType())) {\n            String key = constructAccessTokenKey(pnpConnectionsInfo);\n            if (Objects.isNull(ACCESS_TOKEN_CACHE.getIfPresent(key))) {\n                LOGGER.info(\"Generating the access token for the connection: {}\", pnpConnectionsInfo.getConnectionId());\n                String accessToken = generateAccessToken(pnpConnectionsInfo);\n                ACCESS_TOKEN_CACHE.put(key, accessToken);\n                LOGGER.info(\"Generation of access token for the connection: {} succeeded\", pnpConnectionsInfo.getConnectionId());\n            }\n            headers.put(UCConstants.AUTHORIZATION, UCConstants.BEARER + ACCESS_TOKEN_CACHE.getIfPresent(constructAccessTokenKey(pnpConnectionsInfo)).toString());\n        }else if(AuthorizationType.AC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb0affa0-00d7-46b3-bd37-2c09e906f31d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/BasicAuth.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class BasicAuth implements AuthAttributes, Serializable {\n    private static final long serialVersionUID = -1l;\n\n    private static final String type = \"BasicAuth\";\n    private String userName;\n    private String password;\n    private String customDomain;\n    private String authKeywordForApi;\n\n    @Override\n    public String type() {\n        return type;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c7e054b1-5b41-493f-aec9-f280c4b62906","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":71,"endLine":89,"content":"row(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).sqlOperator;\n    }\n\n    public static String getBQSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).bqSQLOperator;\n    }\n\n    public static String getJQSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).jiraJqlOperator;\n    }\n    public static String getZoqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).zuoraZodlOperator;\n    }\n\n    public static String getZohoCrmClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.nam","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfe7fe53-b012-4540-9189-c6cb888ccce8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":152,"endLine":193,"content":"response.getRawResponse();\n    }\n\n\n    /**\n     * This is the utility class (used for console printing)\n     */\n    private static class UtilityClass {\n       /* private static void print(String content) {\n            System.out.println(content);\n        }\n\n        private static void print(String content, List<?> list) {\n            System.out.println(content);\n            for (Object o : list) {\n                System.out.println(\"    \" + o);\n            }\n            System.out.println();\n        }*/\n\n        private static String prettyPrint(Map<String, Object> properties, int level) {\n            StringBuilder b = new StringBuilder();\n            Set<Map.Entry<String, Object>> entries = properties.entrySet();\n\n            for (Map.Entry<String, Object> entry : entries) {\n                intend(b, level);\n                b.append(entry.getKey()).append(\": \");\n                Object value = entry.getValue();\n                if(value instanceof Map) {\n                    value = prettyPrint((Map<String, Object>) value, level+1);\n                } else if(value instanceof Calendar) {\n                    Calendar cal = (Calendar) value;\n                    value = SimpleDateFormat.getInstance().format(cal.getTime());\n                }\n                b.append(value).append(\"\\n\");\n            }\n            // remove last line break\n            b.deleteCharAt(b.length()-1);\n            return b.toString();\n        }\n\n        private static String prettyPrint(Collection<ClientPr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"89d09d4f-f35d-4184-b10e-2feb13ad97f2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":449,"endLine":470,"content":"GroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n\n        for (String[] expandedGroupSplittedSingle : expandGroupSplitted) {\n            List<String> expandFields = expandGroupWithFilter.getOrDefault(expandedGroupSplittedSingle[0], Lists.newArrayList());\n            expandFields.add(expandedGroupSplittedSingle[1]);\n            expandGroupWithFilter.put(expandedGroupSplittedSingle[0], expandFields);\n        }\n\n        Set<String> lookUpFieldNames = Sets.newHashSet();\n        for (Map.Entry<String, List<String>> entry : expandGroupWithFilter.entrySet()) {\n            lookUpFieldNames.add(entry.getKey() + \"($select=\" + String.join(\",\", entry.getValue()) + \")\");\n        }\n\n        RecordResponseGenerator recordResponseGenerator = new RecordResponseGenerator(getRecordsRequest);\n        ClientEntitySet clientEntitySet;\n        try {\n            clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                    lookUpFieldNames, getRecordsRequest.getFilterExpression(), recordResponseGenerator);\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"383642a0-eb4d-4220-a974-de453366f4df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":443,"endLine":474,"content":"(\"URL\").toString()));\n        return httpRequestBase;\n      default:\n        throw new Exception(\"Method not supported\");\n    }\n  }\n\n  private void populateQueryParams(Map<String, String> queryParams, URIBuilder uriBuilder) {\n    if (queryParams != null && !queryParams.isEmpty()) {\n      List<NameValuePair> nvpList = new ArrayList<>(queryParams.size());\n      for (Map.Entry<String, String> entry : queryParams.entrySet()) {\n        nvpList.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));\n      }\n      uriBuilder.setParameters(nvpList);\n    }\n  }\n\n  private String getBaseUrl(ExternalUrlDetails urlDetails, Map<String, Object> flattenedConnectionInfo) throws Exception {\n    if (urlDetails.isStatic())\n      return urlDetails.getUrl();\n    Object valueFromConnectionInfo = flattenedConnectionInfo.get(urlDetails.getReplaceByPath());\n    if (valueFromConnectionInfo == null)\n      throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n    return urlDetails.getUrl().replace(urlDetails.getDynamicRegex(), valueFromConnectionInfo.toString());\n  }\n\n\n  @Override\n  public HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                     ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                     PNPConnectionsInfo pnpConnectionsInfo, Criteria criteria,\n                                                    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5e996adb-4844-4b4c-aa2e-d46277190d1f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightODataTokenBasedHttpConfiguration.java","startLine":1,"endLine":37,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.olingo.client.core.http.AbstractOAuth2HttpClientFactory;\nimport org.apache.olingo.client.core.http.OAuth2Exception;\n\npublic class GainsightODataTokenBasedHttpConfiguration extends AbstractOAuth2HttpClientFactory {\n\n    public static final String API_KEY = \"ApiKey\";\n    private String apiKey;\n\n    public GainsightODataTokenBasedHttpConfiguration(){\n        super(null,null);\n\n    }\n\n    public GainsightODataTokenBasedHttpConfiguration(String apiKey) {\n        this();\n        this.apiKey = apiKey;\n    }\n\n    @Override\n    protected boolean isInited() throws OAuth2Exception {return true;}\n\n    @Override\n    protected void init() throws OAuth2Exception {}\n\n    @Override\n    protected void accessToken(DefaultHttpClient client) throws OAuth2Exception {\n        client.addRequestInterceptor((request, context) -> {\n            request.addHeader(API_KEY,this.apiKey); // todo change & get it from RequestContextProvider\n        });\n    }\n\n    @Override\n    protected void refreshToken(DefaultHttpClient client) throws OAuth2Exception {}\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"acf7c8cc-6077-49dd-939b-e5832a22066f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":42,"endLine":65,"content":"g\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"dealId\", \"dealId\", \"dealId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"associatedCompanyIds\", \"associatedCompanyIds\", \"associations.associatedCompanyIds\", \"string\", \"text\"));\n                }\n                break;\n\n            case PRODUCT:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectId\", \"objectId\", \"objectId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectType\", \"objectId\", \"objectType\", \"string\", \"text\"));\n                }\n                break;\n\n            case TICKET:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescripti","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19b8fb16-e664-45ad-b044-2de4ce536da6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":337,"endLine":354,"content":"or(\"Exception occurred while trying to write output to file : {}, ErrorCode : {}\", errorMessage, errorCode);\n                    throw new Exception(errorMessage);\n                }\n            }\n\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return retrieveResultsFromResultId(sfdcJobId, batchId, resultId, ++retryCount, pnpConnectionsInfo, sfdcApiVersion, filePath, fileNamePrefix, clientId, clientSecret, refreshToken);\n            }\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        } finally {\n            IOUtils.closeQuietly(icsvWriter);\n            fos.close();\n            bos.close();\n        }\n        return fileList;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"98085e26-e9fd-4b9e-a9a3-d2a7335d75cd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":1,"endLine":46,"content":"package com.gainsight.integration.utils.file;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.batch.item.file.separator.RecordSeparatorPolicy;\nimport org.springframework.util.StringUtils;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\npublic class CSVLineIterator implements Iterator<String>, Closeable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CSVLineIterator.class);\n\n    /**\n     * The reader that is being read.\n     */\n    private final BufferedReader bufferedReader;\n    /**\n     * The current line.\n     */\n    private String cachedLine;\n    /**\n     * A flag indicating if the iterator has been fully read.\n     */\n    private boolean finished = false;\n\n    private final RecordSeparatorPolicy recordSeparatorPolicy;\n    private String[] comments = new String[]{};\n\n    /**\n     * Constructs an iterator of the lines for a <code>Reader</code>.\n     *\n     * @param reader the <code>Reader</code> to read from, not null\n     * @throws IllegalArgumentException if the reader is null\n     */\n    public CSVLineIterator(final Reader reader, final RecordSeparatorPolicy recordSeparatorPolicy) throws IllegalArgumentException {\n        if (reader == null) {\n            throw new IllegalArgumentException(\"READER null\");\n        }\n        if (reader instanceof BufferedReader) {\n            bufferedReader = (BufferedReader) reader;\n        } ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79919a11-d747-4edf-8316-2a36e3cd0389","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/bean/EcosytemAccessDetails.java","startLine":1,"endLine":17,"content":"package com.gainsight.integration.connector.ecosystem.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class EcosytemAccessDetails {\n\n    private String apiKey;\n\n    public String getApiKey() {\n        return apiKey;\n    }\n\n    public void setApiKey(String apiKey) {\n        this.apiKey = apiKey;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"980a583e-5bb1-4621-9c51-8c2f38b69bcd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":673,"endLine":719,"content":"on: {}\", filePosition.get());\n      File nextFile = new File(fileDir + jobId + UUID.randomUUID() + JSON_EXTENSION);\n      appendToJsonFileToSendToConsumers(recordValues, nextFile);\n      fileList.add(filePosition.get(), nextFile);\n    }\n  }\n\n  private static void appendToJsonFileToSendToConsumers(List<Map<String, Object>> destPayload,\n                                                        File localFile) throws IOException {\n    BufferedWriter br = null;\n    FileWriter fr = null;\n    try {\n      fr = new FileWriter(localFile, true);\n      br = new BufferedWriter(fr);\n      Gson gson = new Gson();\n      for (Map<String, Object> payload : destPayload) {\n        String json = gson.toJson(payload);\n        br.write(json + \"\\n\");\n      }\n    } catch (IOException e) {\n      log.error(\"[SAP DATASPHERE] error occurred while writing to file\", e);\n      throw e;\n    } finally {\n      br.flush();\n      br.close();\n      fr.close();\n    }\n  }\n\n  private double fileSizeInMBs(File file) {\n    return (file.length()) / (1024.0 * 1024.0);\n  }\n\n\n  @Override\n  public void authenticate() {\n    PreparedStatement preparedStatement = null;\n    ResultSet resultSet = null;\n    try {\n      preparedStatement = connection.prepareStatement(AUTHENTICATE_SCHEMA_QUERY);\n      // Set the parameter for the prepared statement\n      preparedStatement.setString(1, this.schema);\n      // Execute the query\n      resultSet = preparedStatement.executeQuery();\n\n      if (resultSet.next()) {\n        int count = resul","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"851c1b5f-1c2a-4fc2-93e7-914ed553b64b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelFactory.java","startLine":36,"endLine":52,"content":"       String serviceAccountJson = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(\"serviceAccountConfiguration\"));\n                    serviceAccountJson = GainsightUtils.decodeBase64(serviceAccountJson);\n                    return getChannelServiceForServiceAccount(serviceAccountJson,((Map) pnpConnectionsInfo.getProperties()).get(\"projectId\").toString(),\n                            ((Map) pnpConnectionsInfo.getProperties()).get(\"datasetId\").toString());\n                }else{\n                    throw new SystemException(BigQueryErrorCode.AUTHORIZATION_TYPE_INVALID, HttpStatus.SC_BAD_REQUEST);\n                }\n            }\n            else{\n                throw new SystemException(BigQueryErrorCode.AUTHORIZATION_TYPE_MISSING, HttpStatus.SC_BAD_REQUEST);\n            }\n        }\n        else\n            throw new SystemException(BigQueryErrorCode.CONNECTION_NOT_AUTHORISED, HttpStatus.SC_BAD_REQUEST);\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"176c1c1d-ae0f-42a5-acb4-62c6868de3ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightChangeEventDTO.java","startLine":1,"endLine":65,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.gainsight.utils.JsonUtil;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.codehaus.jackson.map.ObjectMapper;\n\nimport java.util.*;\n\n@Getter\n@Setter\n@ToString\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightChangeEventDTO implements ChangeEventDto {\n    private String tenantId;\n\n    private String objectGroupType;\n\n    private String dataStoreType;\n\n    private String objectName;\n\n    private String auditTableName;\n\n    private String metaInfoId;\n\n    private long fromOffSet;\n\n    private long toOffSet;\n\n    private long eventProcessed;\n\n    private FieldTrackingHistoryDetails fieldTrackingHistoryDetails;\n\n    private String s3FileUrl;\n\n    private Date syncTime;\n\n    private String json_sub_type = \"gs\";\n\n    private String messageId;\n\n    private String xrequestId;\n\n    private String moduleName;\n\n    private String executionId;\n\n    @Override\n    public String fetchChangeType() {\n        return fieldTrackingHistoryDetails.getOperationType();\n    }\n\n    @Override\n    public Map<String, Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap) {\n        return new ObjectMapper().convertValue(this, Map.class);\n    }\n\n    @Override\n    public Map<String, Object> fetchChangeFieldsMap() {\n        Map<String, Objec","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c07b8776-a1dc-4254-b113-5e63359a745f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":605,"endLine":627,"content":"lt = new HashMap<>();\n        CloseableHttpClient httpClient = null;\n        try {\n            LOGGER.info(\"Loading record to entity: {} with operation: {}\", targetObject, ductDataOperation.getDuctDataOperation());\n            String url = MSDynamicsContext.getApiUrl() + FORWARD_SLASH + objectAttributes.get(targetObject).getLabelPlural();\n            Map<String, Object> requestMap = constructRequest(headers, data, lookupProjectionToNavigationProperty, entityLogicalNameToPluralName, objectAttributes.get(targetObject));\n\n            Object identifierData = null;\n            if (DuctDataOperation.UPSERT.equals(ductDataOperation)) {\n                ColumnMapping identifierColumn = columnMappings.stream().filter(columnMapping -> columnMapping.getIsKeyField()).findFirst().get();\n                identifierData = requestMap.remove(identifierColumn.getFieldName());\n                if (null == identifierData || String.valueOf(identifierData).isEmpty() || NULL_VALUE_STRING.equalsIgnoreCase(String.valueOf(identifierData))) {\n                    ductDataOperation = DuctDataOperation.INSERT;\n                    LOGGER.info(\"Loading record to entity: {} with operation: {}, as it doesn't have identifier data\",\n                            targetObject, ductDataOperation.getDuctDataOperation());\n                }\n            }\n\n            httpClient = HttpClients.createDefault();\n            String requestPayload;\n            switch (ductDataOperation) {\n                case INSERT:\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7a30592c-d097-4ee1-9635-d62c0ac44a01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":203,"endLine":225,"content":"ER_TIME;\n            int count = 1;\n            Document batchDetails = null;\n            String batchState = null;\n            do {\n                if (System.currentTimeMillis() >= endTime) {\n                    LOGGER.info(\"Time limit exceeded while polling for batch status {}\", jobId);\n                    throw new Exception(\"Time limit exceeded while polling for batch status\");\n                }\n                if (count % 6 == 0) {\n                    LOGGER.info(\"Waiting for job {} to complete, current status check count {}\", jobId, count);\n                }\n                SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n                String url = salesforceToken.getInstanceURL() + SALESFORCE_SERVICE_DATA + sfdcApiVersion +\n                        String.format(SALESFORCE_BATCH_DETAILS, jobId);\n                Map<String, Object> headers = Maps.newHashMap();\n                headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);\n                headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n                HttpResponse response = httpUrlConnectionUtils.get(url, headers, null);\n                batchDetails = UCXMLUtility.convertStringToXMLDocument(response.getRespMsg());\n                if (response.getResponseCode() == HttpStatus.SC_OK) {\n                    batchState = UCXMLUtility.getElementValueById(batchDetails, \"state\");\n                    LOGGER.info(\"Current batc","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2723c11-f2ec-4146-84d5-73cff2e308a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":712,"endLine":716,"content":"= \"expressionForUpsertKeys\";\n        public static final String IS_PRIMARY_ID = \"IsPrimaryId\";\n\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5503869b-d1f5-437f-80ab-eb6a82116e26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":138,"endLine":161,"content":"response.getStatusLine());\n        } else {\n            throw new Exception(AdapterErrorMessages.ZOOM_API_FETCH_FAILED_WITH_MAX_RETRIES.getTranslatedMessage());\n        }\n    }\n\n    @Override\n    public Map<String, Object> getZoomAccountDetails() throws Exception {\n        {\n            Map<String, Object> accountMap;\n            try {\n                URI uri = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V2 +\"users/me\").build();\n                this.httpGet.setURI(uri);\n                HttpResponse response = this.httpclient.execute(httpGet);\n                String zoomAccount = IOUtils.toString(response.getEntity().getContent());\n                accountMap = MAPPER.readValue(zoomAccount, Map.class);\n            } catch (Exception exception) {\n                LOGGER.error(\"[ZOOM] Error in fetching Account Details\", exception);\n                throw new Exception(AdapterErrorMessages.INVALID_ORGANIZATION_URL.getTranslatedMessage());\n            }\n            return accountMap;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a4158378-da4f-4721-91e6-c2fcc5084b3e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchService.java","startLine":47,"endLine":69,"content":"lientSecret, String refreshToken);\n\n    Map<String, String> getPipelineMappingIdToLabel(String object, String clientId,\n                                                    String clientSecret, String refreshToken);\n\n    List<Object> getDataWithQuery(String query, String clientId, String clientSecret, String refreshToken);\n\n    HttpResponse createSingleData(String entityName, String clientId,\n                                             String clientSecret, String refreshToken, String accessToken, Map<String, Object> data);\n\n    HttpResponse updateSingleData(String entityName, String clientId,\n                                         String clientSecret, String refreshToken, String accessToken, Map<String, Object> data, String id);\n\n    HttpResponse uploadBulkData(String entityName, String clientId, String clientSecret, String refreshToken, String accessToken, HubspotBulkImportBean hubspotBulkImportBean, File file) ;\n\n    HttpResponse pollImportFileData(String clientId, String clientSecret, String refreshToken, String accessToken, String id) ;\n\n    HttpResponse getErrorFileData(String clientId, String clientSecret, String refreshToken, String accessToken, String id) ;\n\n    HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String resourceName, HubspotSearchRequest hubspotSearchRequest) throws Exception;\n\n\n    Map<String, Object> getFileMetadata(String clientId, String clientSecret, String refreshToken, String fileId, boolean ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"10f9ed53-9b39-4642-9d48-b9de2ca37f29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/AuthDetails.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.enums.metadata.engine.AuthType;\nimport com.gainsight.integration.bean.enums.metadata.engine.BodyFormat;\nimport com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class AuthDetails extends ApiConfigAttributes implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private AuthType authType;\n    private AuthDetails initialTokenGenerationDetail;\n    private AuthDetails postAuthorization;\n    private String responseRefreshTokenKey;\n    private String responseAccessExpireKey;\n    private String clientIdKey;\n    private String clientSecretKey;\n    private ExpireUnit expireUnit;\n    private AuthorizationUrl authorizationUrl;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5733eee2-cbbb-4d36-9e28-5891438517fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/AdapterErrorMessages.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.bean.i18n;\n\nimport com.gainsight.context.RequestContextProvider;\nimport lombok.extern.slf4j.Slf4j;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Slf4j\npublic enum AdapterErrorMessages {\n    OBJECT_SEARCH_QUERY_NULL(\"Object search query is null\"),\n    FAILED_WHILE_FETCHING_OBJECT(\"Failed while fetching object\"),\n    FAILED_FETCHING_ENTITIES(\"Failed while fetching entities\"),\n    FAILED_FETCHING_OPTIONSET(\"Failed while fetching optionset\"),\n    NOT_AN_OPTIONSET(\"Not an optionset\"),\n    ACCESS_TOKEN_NULL(\"Access token cannot be null\"),\n    UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY(\"Unable to get accessToken. Empty Body found.\"),\n    UNABLE_TO_GET_ACCESS_TOKEN_ERROR(\"Unable to get accessToken. Error : %s\"),\n    UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR(\"Unable to get accessToken. Empty Body found. Error code : %s\"),\n    SCOPE_CAN_NOT_BE_NULL(\"Scopes cannot be null\"),\n    UNABLE_TO_GET_SCOPE_EMPTY_BODY(\"Unable to get Scopes. Empty Body found.\"),\n    UNABLE_TO_GET_SCOPE_ERROR(\"Unable to get Scopes. Error : %s\"),\n    UNABLE_TO_GET_SCOPE_EMPTY_BODY_ERROR(\"Unable to get Scopes. Empty Body found. Error code : %s\"),\n    UNABLE_TO_GET_ACCESS_TOKEN(\"Unable to get accessToken.\"),\n    UNABLE_TO_FETCH_HUBSPOT_ACCOUNT_DETAILS(\"Unable to fetch hubspot account details\"),\n    INVALID_ORGANIZATION_URL(\"Invalid Organization URL entered\"),\n    HUBSPOT_API_FETCH_FAILED(\"Hubspot api fetch failed due to :{}\"),\n    HUBSPOT_API_FETCH_FAILED_WITH_MAX_RETRIES(\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cf4c360-0ed8-45ec-8d91-bc95aab02a21","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelService.java","startLine":1,"endLine":22,"content":"package com.gainsight.integration.connector.service;\n\nimport com.gainsight.integration.connector.bean.GainsightBigQueryEntityDescription;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.gson.JsonArray;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightBigQueryChannelService {\n\n    public Boolean authorizeWithServiceAccount();\n    public Map<String, Object> getObjects();\n    public GainsightBigQueryEntityDescription getMetaData(String object);\n    public JsonArray getQueryResults(String query,int maxResult) throws Exception;\n    public List<File> getPaginatedDataResults(String fileDir, String jobId, String query, int pageSize) throws Exception;\n    public String getWhereClause(FilterRule rules);\n    public Map<String, Object> insertSingleRecord(Map<String, Object> data,String resourceName) throws Exception;\n    public Map<String, Object> updateSingleRecord(Map<String, Object> data,String Id);\n    public Map<String, Object> bulkWrite(File file);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2388c127-b4ee-459e-9090-21685dee37b6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":954,"endLine":972,"content":"sInlineEntity() != null && clientLink.asInlineEntity().getEntity() != null) {\n                clientEntity = clientLink.asInlineEntity().getEntity();\n            } else if (clientLink.asInlineEntitySet() != null && clientLink.asInlineEntitySet().getEntitySet() != null && CollectionUtils.isNotEmpty(clientLink.asInlineEntitySet().getEntitySet().getEntities())) {\n                clientEntity = clientLink.asInlineEntitySet().getEntitySet().getEntities().get(0); //For now consider only single record\n            }\n            if (Objects.nonNull(clientEntity)) {\n                for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                    if (lookUpObjectFieldNames.contains(clientProperty.getName())) {\n                        String key = clientLink.getName() + \".\" + clientProperty.getName();\n                        Object value = extractValue(clientProperty, null, isPrimitiveDateTimeConversionRequired);\n                        if (modifiedProjectionToOriginalProjections.containsKey(key)) {\n                            for (String projection : modifiedProjectionToOriginalProjections.get(key)) {\n                                if (multiPicklistColumns.contains(projection)) {\n                                    record.put(projection, replaceMPSeperator(value));\n                                } else {\n                                    record.put(projection, value);\n                                }\n                            }\n                        } el","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d6b4f8c-2b0b-4bb0-a530-f3f62d352574","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":184,"endLine":206,"content":"ttpPost.setEntity(new UrlEncodedFormEntity(params, StandardCharsets.UTF_8.name()));\n\n                HttpResponse response = httpclient.execute(httpPost);\n                HttpEntity entity = response.getEntity();\n\n                String jsonResponse;\n                Map<String, Object> accountMap;\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                        Objects.requireNonNull(accountMap.get(ACCESS_TOKEN), AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                        accessToken = accountMap.get(ACCESS_TOKEN).toString();\n                        return accessToken;\n                    } else {\n                        LOGGER.error(\"{} retryCount: {}\", AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage(), retryCount);\n                        throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage());\n                    }\n                } else {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9d0a4bb4-a430-49e8-bac6-25db6523aa17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":500,"endLine":538,"content":"s.accessToken);\n            HttpEntity entity = entityBuilder.build();\n            httpPost.setEntity(entity);\n            httpResponse = httpClient.execute(httpPost);\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return httpResponse;\n    }\n\n    @Override\n    public HttpResponse pollImportFileData(String id) throws Exception {\n        HttpResponse response = null;\n        try {\n            String url = BASE_API_URL + IMPORT_END_POINT + \"/\" + id;\n\n            this.httpGet.setURI(getUriBuilder(url).build());\n            response = this.httpclient.execute(httpGet);\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse getErrorFileData(String id) throws Exception {\n        HttpResponse response = null;\n        try {\n            String url = BASE_API_URL + IMPORT_END_POINT + \"/\" + id + \"/errors/\";\n            this.httpGet.setURI(getUriBuilder(url).build());\n            response = this.httpclient.execute(httpGet);\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n        } finally {\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02fdcf4b-96f8-437b-887f-e240787fc343","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/bean/GainsightMSTeamsEntityDescription.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.msteams.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightMSTeamsEntityDescription {\n    private String entityName;\n    private String entityId;\n    private List<GainsightMSTeamsFieldDescription> gainsightMSTeamsFieldDescriptions;\n\n    public GainsightMSTeamsEntityDescription(String entityName, List<GainsightMSTeamsFieldDescription> gainsightMSTeamsFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightMSTeamsFieldDescriptions = gainsightMSTeamsFieldDescriptions;\n    }\n\n    public String getEntityName() { return entityName; }\n\n    public void setEntityName(String entityName) { this.entityName = entityName; }\n\n    public String getEntityId() { return entityId; }\n\n    public void setEntityId(String entityId) { this.entityId = entityId; }\n\n    public List<GainsightMSTeamsFieldDescription> getGainsightMSTeamsFieldDescriptions() { return gainsightMSTeamsFieldDescriptions; }\n\n    public void setGainsightMSTeamsFieldDescriptions(List<GainsightMSTeamsFieldDescription> gainsightMSTeamsFieldDescriptions) { this.gainsightMSTeamsFieldDescriptions = gainsightMSTeamsFieldDescriptions; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4bc8e3d3-f915-4ad0-821b-b715197dbe49","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":547,"endLine":567,"content":"E_IP = \"preS3InstanceIP\";\n        public static final String POST_S3_INSTANCE_IP = \"postS3InstanceIP\";\n        public static final String DATA_MODIFICATION_TYPE = \"DATA_MODIFICATION_TYPE\";\n        public static final String EXTERNAL_IDENTIFIER = \"EXTERNAL_IDENTIFIER\";\n        public static final String SELECT_CLAUSE = \"SELECT_CLAUSE\";\n        public static final String ALIAS = \"ALIAS\";\n        public static final String CURRENCY_TYPE = \"CurrencyType\";\n        public static final String CURRENCY_ISO_CODE = \"CurrencyIsoCode\";\n        public static final String JOB_FAILED_IN_24_HOURS = \"JOB_FAILED_IN_24_HOURS\";\n        public static final String DERIVED_FIELD_INFO = \"DERIVED_FIELD_INFO\";\n        public static final String DISPLAY_NAME = \"DISPLAY_NAME\";\n        public static final String FIELD_ALIAS = \"FIELD_ALIAS\";\n        public static final String CANONICAL_NAME = \"CANONICAL_NAME\";\n        public static final String HONOUR_SOURCE_CURRENCY = \"HONOUR_SOURCE_CURRENCY\";\n        public static final String IS_JOB_EXECUTION_SET_SCHEDULE = \"IS_JOB_EXECUTION_SET_SCHEDULE\";\n        public static final String ENV_NAME = \"ENV_NAME\";\n        public static final String FIELD_NAME = \"fieldName\";\n        public static final String MIGRATION_STATUS = \"MIGRATION_STATUS\";\n        public static final String IS_IPAAS_CONNECTION = \"IS_IPAAS_CONNECTION\";\n        public static final String DEPENDENT_DATA_FETCH_DATES = \"DEPENDENT_DATA_FETCH_DATES\";\n        public static final String POST_CONNECTION_CR","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7737cb36-5a29-42d1-876a-930898a64450","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":649,"endLine":668,"content":"        clientEntity = clientLink.asInlineEntity().getEntity();\n            } else if (clientLink.asInlineEntitySet() != null && clientLink.asInlineEntitySet().getEntitySet() != null && CollectionUtils.isNotEmpty(clientLink.asInlineEntitySet().getEntitySet().getEntities())) {\n                clientEntity = clientLink.asInlineEntitySet().getEntitySet().getEntities().get(0); //For now consider only single record\n            }\n            if (Objects.nonNull(clientEntity)) {\n                for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                    if (lookUpObjectFieldNames.contains(clientProperty.getName())) {\n                        String key = clientLink.getName() + \".\" + clientProperty.getName();\n                        Object value = extractValue(clientProperty, null, isPrimitiveDateTimeConversionRequired);\n                        if (modifiedProjectionToOriginalProjections.containsKey(key)) {\n                            for (String projection : modifiedProjectionToOriginalProjections.get(key)) {\n                                if (multiPicklistColumns.contains(projection)) {\n                                    record.put(projection, replaceMPSeperator(value));\n                                } else {\n                                    record.put(projection, value);\n                                }\n                            }\n                        } else {\n                            if (multiPicklistColumns.contains(key)) {\n           ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fdedf6d5-a043-4d0b-b10e-6535c9c68a71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":344,"endLine":369,"content":"    }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error while downloading the certificate file from s3 : {}\", e.getMessage(), e);\n            throw new SystemException(\"Error while downloading the certificate file from s3\");\n        }\n        return keyStoreFile;\n    }\n\n    @Override\n    public List<Map<String, Object>> listAllObjects() {\n        List<Map<String, Object>> objects = new ArrayList<>();\n        String absoluteDBPath = BACKTICK + this.schema + BACKTICK + DOT + BACKTICK + this.db + BACKTICK;\n        Statement statementCatalog = null;\n        PreparedStatement preparedStatementTables = null, preparedStatementViews = null;\n        try {\n            statementCatalog = connection.createStatement();\n            statementCatalog.execute(String.format(USE_CATALOG_QUERY, this.schema));\n\n            preparedStatementTables = connection.prepareStatement(String.format(SHOW_TABLES_QUERY, absoluteDBPath));\n            preparedStatementViews = connection.prepareStatement(String.format(SHOW_VIEWS_QUERY, absoluteDBPath));\n            List<Map<String, Object>> tables = nullSafeList(executeWithMapListHandler(preparedStatementTables));\n            List<Map<String, Object>> views = nullSafeList(executeWithMapListHandler(preparedStatementViews));\n            tables.stream().forEach(\n                    table -> {\n                        Optional<Map<String, Object>> optionalView = views.stream().filter(view -> view.get(\"viewName\").equals(table.get(\"tableNam","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c270c29-abef-45ce-9f3e-30abd090e89f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":560,"endLine":587,"content":" && Objects.isNull(MSDynamicsContext.getCtx().getRefreshToken())\n                            && Objects.nonNull(MSDynamicsContext.getTenantId())) {\n                        LOGGER.info(\"Records fetched so far: {}\", recordResponseGenerator.getRecordsPulled());\n                        client = GSODataClientFactory.getOdataClient();\n                        ++currentRetryCount;\n                        LOGGER.info(\"Retrying to fetch data. count {}\", currentRetryCount);\n                    } else {\n                        throw httpClientException;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Unexpected error occured in get records, deleting temp file if any present\");\n            FileUtils.deleteQuietly(recordResponseGenerator.getCsvFile());\n            throw e;\n        }\n\n        return new RecordsResponse(recordResponseGenerator.getRecords(), recordResponseGenerator.getCsvFile(),\n                recordResponseGenerator.getBatchQuery(), recordResponseGenerator.getRecordsPulled());\n    }\n\n    @Override\n    public RecordsResponse runQuery(GetRecordsRequest getRecordsRequest) {\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        ClientEntitySet clientEntitySet = readEntitiesClientEntitySet(client, URI.create(getRecordsRequest.getQuery()));\n        List<Map<String, Object>> records = Lists.newArrayList();\n        List<ClientEntity> clientEntityList = clientEntitySet.getEntities();\n        for(Cl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e797d0b6-aea9-4f04-b822-c10b327aa383","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":621,"endLine":641,"content":"             String columnsClause = Joiner.on(COMMA).join(\n                        columnMappings.stream().map(columnMapping -> BACKTICK + columnMapping.getFieldName() + BACKTICK + \" STRING\").collect(Collectors.toList())\n                );\n\n                //Create temporary stage table\n                String tempStageTableCreationQuery = String.format(CREATE_TEMP_STAGE_TABLE, absolutePathToTempStageTable, columnsClause);\n                LOGGER.info(\"Creating temp stage table with query: {}\", tempStageTableCreationQuery);\n                statement.execute(tempStageTableCreationQuery);\n                LOGGER.info(\"Successfully created temp stage table\");\n\n                //Load data into temporary stage table\n                String loadDataToStageTableQuery = String.format(LOAD_DATA_INTO_TEMP_STAGE_TABLE, absolutePathToTempStageTable, uploadedFilePath,\n                        quoteChar, escapeChar, seperatorChar);\n                LOGGER.info(\"Loading data into temp stage table with query: {}\", loadDataToStageTableQuery);\n                statement.execute(loadDataToStageTableQuery);\n                LOGGER.info(\"Successfully loaded data into temp stage table from DBFS\");\n\n                bulkLoadResult.put(UCConstants.TOTAL_RECORDS, getTotalRecords(absolutePathToTempStageTable));\n            } catch (SQLException e) {\n                GainsightDatabricksHelper.deleteFileFromDatabricksFileSystem(pnpConnectionsInfo, uploadedFilePath);\n                LOGGER.error(\"Error occurred wh","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7b4e4486-12da-475b-92eb-18811bbba71b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/ConnectorType.java","startLine":1,"endLine":58,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.common;\n\nimport com.google.common.collect.Lists;\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by vgautam on 07/06/16.\n */\npublic enum ConnectorType {\n\n    GOOGLE_ANALYTICS(\"GOOGLE_ANALYTICS\"),\n    MIXPANEL(\"MIXPANEL\"),\n    GS_BULK_API(\"GS_BULK_API\"),\n    SEGMENT_IO(\"SEGMENT_IO\"),\n    SFDC(\"SFDC\"),\n    DYNAMICS(\"DYNAMICS\"),\n    S3(\"S3\"),\n    GAINSIGHT_API(\"GAINSIGHT_API\"),\n    GAINSIGHT_PX(\"GAINSIGHT_PX\"),\n    SAP_CRM(\"SAP_CRM\"),\n    SAP_MKT(\"SAP_MKT\"),\n    // Rest API connection added to support Gainsight to connect any external system outside\n    REST_API(\"REST_API\"),\n    HUBSPOT(\"HUBSPOT\"),\n    POSTGRES(\"POSTGRES\"),\n    HAPOSTGRES(\"HAPOSTGRES\"),\n    REDSHIFT(\"REDSHIFT\"),\n    MYSQL(\"MYSQL\"),\n    MARIADB(\"MARIADB\"),\n    SNOWFLAKE(\"SNOWFLAKE\"),\n    PENDO(\"PENDO\"),\n    PRODUCTBOARD(\"PRODUCTBOARD\"),\n    AHA(\"AHA\"),\n    ECOSYSTEM(\"ECOSYSTEM\"),\n    //Ipaas related connectors\n    MULTI_CONNECTION(\"MULTI_CONNECTION\"),\n    ZENDESK(\"ZENDESK\"),\n    BIGQUERY(\"BIGQUERY\"),\n    FRESHDESK(\"FRESHDESK\"),\n    JIRA(\"JIRA\"),\n    INTERCOM(\"INTERCOM\"),\n    SERVICENOW(\"SERVICENOW\"),\n    ZUORA(\"ZUORA\"),\n    ZOHO(\"ZOHO\"),\n    PIPEDRIVE(\"PIPEDRIVE\"),\n    SURVEY_MONKEY(\"SURVEY_MONKEY\"),\n    QUALTRICS(\"QUALTRICS\"),\n\n    MICROSOFT_SQL_SERVER(\"MICROSOFT_SQL_SERVER\")","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"50786434-5e01-4d32-a40e-063d454c0b04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":114,"endLine":132,"content":"modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projection);\n                } else if (logicalNameToExternalType.get(projection) == ExternalDataType.LOOKUP ||\n                        logicalNameToExternalType.get(projection) == ExternalDataType.CUSTOMER ||\n                        logicalNameToExternalType.get(projection) == ExternalDataType.OWNER) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projection);\n                } else {\n                    selectGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        //If expanded fields are of type lookup or customer then modify the projection name. This needs to done first before we modify source lookup field in next step.\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_EXPAND))) {\n            for (String projection: selectAndExpandGroup.get(PROJECTION_EXPAND)) {\n                Column lookupColumn = msDynamicsObject.getColumn(projection.split(\"\\\\.\")[0]);\n                if (!logicalNameToObject.containsKey(lookupColumn.getTargetObject()","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e18266d8-c3d8-4dda-b8f4-4a1d35ca6f46","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":143,"endLine":162,"content":" + targetColumn.getLogicalName() + \"_value\").add(projection);\n                } else {\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships...\", RequestContextProvider.getTenantId());\n            relationships = msDynamicsSchemaService.listRelationships(msDynamicsObject.getLogicalName(), RelationshipType.MANY_TO_ONE);\n            LOGGER.info(\"tId: {}. Fetched all Many-to-One relationships.\", RequestContextProvider.getTenantId());\n            for (String projection: expandGroup) {\n                String sourceLookupField = StringUtils.substringBefore(projection, \".\");\n                String propertyValue=masterLookUpConfiguration.get(getRecordsRequest.getPluralName()+\"@@\"+ sourceLookupField);\n                if (Objects.nonNull(propertyValue)){\n                    String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec4f7514-d5e0-43b5-a8d5-f40bafeab31d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":86,"endLine":110,"content":"cured while creating jql query {}\", e);\n            throw new RuntimeException(e);\n        }\n    }\n    private static List<String> buildRule(FilterRule rule) {\n        StringBuilder stringBuilder = new StringBuilder();\n        List<String> whereClause = Lists.newArrayList();\n        if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n            stringBuilder.append(SPACE);\n            String clause = rule.getValues().stream().map(value -> {\n                if(value.getDataType().equals(DataType.STRING) && value.getValue().toString().contains(\"'\")){\n                    value.setValue(value.getValue().toString().replace(\"'\", \"%\"));\n                    return \"$left LIKE $right\";\n                }\n                return Operators.getZoqlClause(rule.getOp());\n            }).filter(Objects::nonNull).findFirst().orElse(Operators.getZoqlClause(rule.getOp()));\n            clause = clause.replace(\"$left\", rule.getFieldInfo().getName());\n            clause = clause.replace(\"$right\", StringUtils.join(rule.getValues().stream().map(value -> {\n                Object val = value.getValue();\n                val = handleValue(val, rule.getOp());\n                if (ENCLOSE_IN_SINGLE_QUOTE.contains(value.getDataType())) {\n                    val = \"'\" + val + \"'\";\n                }\n                if(value.getDataType().equals(DataType.DATETIME)){\n                    OffsetDateTime dateTime = OffsetDateTime.parse(val.toString(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c0bc0d3-5936-46ee-b832-d204a8af54bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":23,"endLine":60,"content":"dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.utils.ObjectUtil;\nimport com.google.gson.Gson;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpEntityEnclosingRequestBase;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.joda.time.DateTime;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.ObjectUtils;\n\nimport java.net.URI;\nimport java.util.*;\n\nimport static com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit.MILLIS;\n\npublic class AuthServiceImpl implements AuthService {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(AuthServiceImpl.class);\n\n  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n  pri","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7ef797a-f4bc-4137-b331-4623ede9f0f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":273,"endLine":286,"content":"t updateEntity(Edm edm, String serviceUri, String entityName, Object keyValue, ClientEntity ce) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entityName)\n      .appendKeySegment(keyValue).build();\n    ODataEntityUpdateRequest<ClientEntity> request = \n      client.getCUDRequestFactory().getEntityUpdateRequest(absoluteUri, UpdateType.REPLACE, ce);\n    // odata4 sample/server limitation not handling metadata=full\n    request.setAccept(\"application/json;odata.metadata=minimal\");\n    ODataEntityUpdateResponse<ClientEntity> response = request.execute();\n    return response.getStatusCode();\n  }\n\n\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6c18056e-8d77-48d1-88d3-8334060f283b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":505,"endLine":527,"content":"gs) {\n        List<String> lookupObjectPrimaryKeys = Lists.newArrayList();\n        List<String> lookupProjections = projections.stream().filter(projection -> projection.split(\"\\\\.\").length > 2).collect(Collectors.toList());\n        Set<String> lookupSourceColumns = Sets.newHashSet();\n        Set<String> lookupSourceColumnsProjections = Sets.newHashSet();\n\n        for (String lookupProjection : lookupProjections) {\n            lookupSourceColumns.add(lookupProjection.split(\"\\\\.\")[0]);\n            lookupSourceColumnsProjections.add(lookupProjection.split(\"\\\\.\")[0] + UCConstants.PERIOD + lookupProjection.split(\"\\\\.\")[1]);\n        }\n\n        for (Map.Entry<String, String> entry : masterLookUpConfig.entrySet()) {\n            String pair[] = entry.getKey().split(\"@@\");\n            if (objectDefinition.getLabelPlural().equals(pair[0]) && lookupSourceColumns.contains(pair[1])) {\n                lookupSourceColumns.remove(pair[1]);\n                lookupSourceColumnsProjections.removeIf(lookupSourceColumnsProjection -> lookupSourceColumnsProjection.startsWith(pair[1] + UCConstants.PERIOD));\n                lookupObjectPrimaryKeys.add(entry.getValue() + \".\" + pair[1]);\n            }\n        }\n\n        Map<String, List<GSFieldDefinition>> targetObjectToGSFieldDefinitionList = new HashMap<>();\n        for (GSFieldDefinition gsFieldDefinition : nullSafeList(objectDefinition.getFields().stream().filter(fieldDefinition -> fieldDefinition.getMeta().isHasLookup()\n                && lookupSour","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc7255f1-7f5d-40e8-9f2f-0e55beaafd78","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":104,"endLine":126,"content":"                   Header firstHeader = httpResponse.getFirstHeader(rateLimitDetails.getKey());\n                            int waitSec = Integer.parseInt(firstHeader.getValue());\n                            LOGGER.info(\"RateLimit wait time received : {} secs for retry : {}\", waitSec, retry);\n                            Thread.sleep(waitSec * 1000L);\n                            break;\n                        } else if (Location.BODY.equals(rateLimitDetails.getKeyLocation())) {\n                            InputStream sourceContent = httpResponse.getEntity().getContent();\n                            JsonNode sourceContentJson = MAPPER.readTree(sourceContent);\n                            int waitTime = sourceContentJson.get(rateLimitDetails.getKey()).asInt();\n                            LOGGER.info(\"RateLimit wait time received : {} secs for retry : {}\", waitTime, retry);\n                            Thread.sleep(waitTime * 1000L);\n                            break;\n                        }\n                        throw new Exception(\"Received 429 status code from External System. Please check the request\");\n                    default:\n                        LOGGER.error(\"Unknown status code received. Will retry after 10 secs\");\n                        Thread.sleep(10 * 1000L);\n                }\n            }catch (Exception e){\n                LOGGER.error(e.getMessage(),e);\n                if(retry > 3){\n                    LOGGER.error(\"Retries exhausted\");\n                ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e869202-9d54-4164-8941-09b334eed63d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/IntercomV2Region.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.bean.enums;\n\npublic enum IntercomV2Region {\n    US(\"https://app.intercom.io/\", \"https://api.intercom.io/\"),\n    EU(\"https://app.eu.intercom.com/\", \"https://api.eu.intercom.io/\"),\n    AU(\"https://app.au.intercom.com/\", \"https://api.au.intercom.io/\");\n\n    String appURL;\n    String apiURL;\n\n    IntercomV2Region(String appURL, String apiURL) {\n        this.appURL = appURL;\n        this.apiURL = apiURL;\n    }\n\n    public String getAppURL() {\n        return appURL;\n    }\n\n    public String getApiURL() {\n        return apiURL;\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd5b4068-b0a9-4a83-b71e-48200d77cafb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":560,"endLine":578,"content":"           if (fileList.isEmpty()) {\n                    LOGGER.info(\"Creating file at position: {}\", filePosition.get());\n                    File initialFile = new File(fileDir + jobId + UUID.randomUUID() + JSON_EXTENSION);\n                    fileList.add(filePosition.get(), initialFile);\n                }\n                int columnCount = resultSet.getMetaData().getColumnCount();\n                Map<String, Object> map = new HashMap<>();\n\n                for (int i = 0; i < columnCount; ++i) {\n                    Object object = resultSet.getObject(i + 1);\n                    FieldInfo field = fieldNameToFieldInfoMap.get(resultSet.getMetaData().getColumnLabel(i + 1));\n                    if (object instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        LocalDateTime localDateTime = LocalDateTime.parse(object.toString(), defaultSrcFormatter);\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\")).format(dtf));\n                    } else if (object instanceof Date && Objects.nonNull(field.getDateTimeProperties())) {\n                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        LocalDate localDate = LocalDate.parse(object.toString());\n                        map","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24c9862f-9799-4f1d-8bd9-ae13450f0bbf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":90,"endLine":125,"content":"uilder = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V1 + url);\n            this.httpGet.setURI(uriBuilder.build());\n            try {\n                response = this.httpclient.execute(httpGet);\n\n            } catch (Exception exception) {\n                LOGGER.error(\"[MSTEAMS] error in fetching data \", exception);\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(\"[MSTEAMS] error in searching data \", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public InputStream getPaginatedEntityData(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception {\n        URIBuilder uriBuilder;\n        //ME Teams provides complete URL in nextPageUrl, so no need to append the base URL\n        if(StringUtils.isNotEmpty(nextPageUrl)) {\n            uriBuilder = new URIBuilder(nextPageUrl);\n        } else {\n            uriBuilder = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V1 + api);\n        }\n\n        this.httpGet.setURI(uriBuilder.build());\n        LOGGER.info(\"[MSTEAMS] URI being hit : {}\", this.httpGet.getURI());\n        HttpResponse response = null;\n\n        for (int retryCount = 0; retryCount < ALLOWED_RETRIES; retryCount += 1) {\n            try {\n                response = this.httpclient.execute(httpGet);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6b755738-805e-47dd-9424-a85a1af029bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":379,"endLine":407,"content":"etValue();\n    if (value instanceof List) {\n      List<String> keys = OBJECT_MAPPER.convertValue(value, new TypeReference<List<String>>() {\n      });\n      List<String> actualValues = new ArrayList<>();\n      for (String key : keys) {\n        if (!flattenConnectionInfo.containsKey(key))\n          throw new Exception(\"Provided key not present : \" + key);\n        actualValues.add(flattenConnectionInfo.get(key).toString());\n      }\n      return StringUtils.join(actualValues, config.getJoinString());\n    } else if (value instanceof String) {\n      if (!flattenConnectionInfo.containsKey(value))\n        throw new Exception(\"Provided key not present : \" + value);\n      return flattenConnectionInfo.get(value);\n    } else {\n      throw new Exception(\"Unknown type of value provided : \" + value);\n    }\n  }\n\n  private HttpRequestBase createHttpClient(ApiConfigAttributes metadataApiConfigAttributes,\n                                           MetadataEngineConfig metadataEngineConfig, String objectName, PNPConnectionsInfo pnpConnectionsInfo,\n                                           Map<String, String> queryParams, Map<String, Object> flattenedConnectionInfo,\n                                           Map<String, Object> paginationInfo, StringEntity body) throws Exception {\n    HttpRequestBase httpRequestBase = null;\n    URIBuilder uriBuilder;\n    String finalPath = metadataApiConfigAttributes.getPath();\n    if (StringUtils.isNotEmpty(finalPath) && finalPath.startsWith(\"__remove__\")) {\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bf2b9ff-8cfe-47f1-813e-e1fd71993b38","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":497,"endLine":521,"content":"   Map<String, String> headerNameToColumnNameMap = columnMappings.stream().collect(Collectors.toMap(ColumnMapping::getHeaderName, ColumnMapping -> ColumnMapping.getFieldName()));\n      List<String> headerList = Arrays.asList(header);\n      List<String> columnList = new ArrayList<>();\n      headerList.stream().forEach(header1 -> columnList.add(headerNameToColumnNameMap.get(header1)));\n      String insertDataToStageTableQuery = String.format(INSERT_INTO_TEMP_STAGE_TABLE_QUERY, absolutePathToTempStageTable, DOUBLE_QUOTE + String.join(COLUMN_NAME_DELIMITER, columnList) + DOUBLE_QUOTE,\n              IntStream.range(0, header.length).mapToObj(i -> \"?\").collect(Collectors.joining(COMMA)));\n      PreparedStatement insertDataToStageTable = this.connection.prepareStatement(insertDataToStageTableQuery);\n\n      File successFile = new File(targetObject + UNDERSCORE + RequestContextProvider.getRequestId() + UNDERSCORE + \"success\" + CSV);\n\n      try {\n        //Load data into temporary stage table by batching\n        while ((nextRecord = csvReader.readNext()) != null) {\n          //batching logic here\n          try {\n            data.add(nextRecord);\n\n            // Set parameters for each row\n            for (int i = 0; i < nextRecord.length; i++) {\n              if (String.valueOf(nextRecord[i]).isEmpty()) {\n                insertDataToStageTable.setString(i + 1, null);\n              } else {\n                insertDataToStageTable.setString(i + 1, nextRecord[i]);\n              }\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f8bc2eb-1da7-4e94-a6eb-5d30fcd66763","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":118,"endLine":147,"content":"nnelService.getHubspotAccountDetails();\n        Assertions.assertEquals(HUB_ID, (Integer)response.get(\"portalId\"), \"Mismatch in HUB ID\");\n        Assertions.assertEquals(TIME_ZONE, response.get(\"timeZone\"), \"Mismatch in TIME_ZONE\");\n        Assertions.assertEquals(CURRENCY, response.get(\"currency\"), \"Mismatch in CURRENCY\");\n        Assertions.assertEquals(UTC_OFFSET_IN_MILLIS, response.get(\"utcOffsetMilliseconds\"), \"Mismatch in UTC_OFFSET_IN_MILLIS\");\n        Assertions.assertEquals(UTC_OFFSET, response.get(\"utcOffset\"), \"Mismatch in UTC_OFFSET\");\n        gainsightHubspotChannelService.close();\n    }\n\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity Company Properties\")\n    @Order(4)\n    void testGetCompaniesProperties() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityProperties(\"COMPANY\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> companyMetaData = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(companyMetaData, \"No Metadata found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity Contact Properties\")\n    @Order(4)\n    void testGetContactProperties() throws Exception {\n        InputStream inputStream =","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9d8bc80-f5ba-4c1c-9bec-ee0f73636ceb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":157,"endLine":182,"content":"et(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET)) :\n                            properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET).toString());\n                    prop.put(AUTH_MECH, \"11\");\n                    prop.put(AUTH_FLOW, \"1\");\n                    prop.put(OAUTH2_CLIENT_ID, oauthClientId);\n                    prop.put(OAUTH2_CLIENT_SECRET, oauthClientSecret);\n                    break;\n                case ACCESS_KEY:\n                    this.accessToken = (isValueEncrypted ? CryptHandler.getInstance().decrypt((byte[]) properties.get(GSIntegration.ACCESS_TOKEN)) :\n                            properties.get(UCConstants.GSIntegration.ACCESS_TOKEN).toString());\n                    prop.put(AUTH_MECH, \"11\");\n                    prop.put(AUTH_FLOW, \"0\");\n                    prop.put(AUTH_ACCESS_TOKEN, accessToken);\n                    break;\n                default:\n                    throw new SystemException(String.format(\"Authorisation type %s not supported\", authorizationType));\n            }\n\n            this.dbHost = properties.get(UCConstants.GSIntegration.DATABASE_HOST).toString();\n            String connectionUrl = String.format(DATABRICKS_BASE_URL, this.dbHost);\n\n            if (Objects.nonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE))) {\n                this.wareHouse = properties.get(UCConstants.GSIntegration.WAREHOUSE).toString();\n                /*\n                    httpPath: The partial URL corresponding to the Spark server.\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87805ccb-98a8-4578-b80f-788bf2af4bbd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemFetchServiceImpl.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.ecosystem.service;\n\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class GainsightEcosystemFetchServiceImpl implements GainsightEcosystemFetchService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightEcosystemChannelServiceImpl.class);\n\n    private static final GainsightEcosystemChannelFactory gainsightEcosystemChannelFactory = new GainsightEcosystemChannelFactory();\n\n    @Override\n    public HttpResponse getPaginatedEntityData(String entityName, List<String> projectionList, String apiKey, int pageSize, int pageNumber) {\n        try{\n            GainsightEcosystemChannelService gainsightEcosystemChannelService =\n                    gainsightEcosystemChannelFactory.getChannelServiceWithApiKey(apiKey);\n            return gainsightEcosystemChannelService.getPaginatedEntityDataLatest(entityName, projectionList, pageSize, pageNumber);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public HttpResponse getPaginatedEntityData(String entityName, List<String> projectionList, String apiKey, Map<String, String> queryParams) {\n        try{\n            GainsightEcosystemChannelService gainsightEcosystemChannelService =\n                    gainsightEcosystemChannelFactory.getChannelServiceWithApiKey(apiKey);\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ee9d21fc-d700-4a1f-bdff-93d6384b50b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/test/java/com/gainsight/integration/connector/dynamics/MSDynamicsServiceImplTest.java","startLine":46,"endLine":67,"content":"LuHaUcSmP6HdQggYp1YvCOdjtf1QwP_FYkXGXR73Gl48o2646bl3GEtTdbEGhWfGt4ImxPNW9uu79ktohgGTanjiwDn1L7n_ndx3VrbeAI-MvN1lMqcGXkqq8aKyE5_cqT1LVlmx3E5ny_q6bn2uPLOmc24t4hjnQ7DvO6WYILGFo-ih6C0snH8BJma8qQVhT-HZe7LTLXXlhX_2fv8SpFKrU0AJ4qxukgcvEarRrYcsDfzcbi5NX08L2DOu6txTrPLHECyDtOcKvnnPX9qMeQ4uLHdXdGP_mpisGHjCBVNfLueeh1sWZP9GNGkkRWwP601e-KDQOegjC67VUQvug7e3EMNpnmB4QY0SR2Rm8HqKs-mOkNZgYagCJR380gxMi9ieCmY5KAJ8J8BHd9lRsKe32etvUXn6dg5t6mHZc8LA7fQS1iRD0SN5IhhCsRO_rko7PbiDjShYz7sODL2i2IcNnOTBxih-v4dGlUFUicD-KCazwTfqtjGKShKPvVnUmLzlVKUS4pTUjmeagWkSojx_7GPskix9tR1Gowt9EcA77XTcYFma3MCp8iqvSXGW2pvAY4BuU68dfzS6Y20gKuBgqnngsHOepZ9R4hTx5UbtSExvdpdOc7IZ76tAePM9w3tSN\");\n        msDynamicsAuthInfo.setResourceUri(\"https://gainsight123.crm.dynamics.com\");\n        MSDynamicsContext.setCtx(msDynamicsAuthInfo);\n\n        }\n\n    @Test\n    public void testListObjects() {\n        List<MSDynamicsObject> objects = msDynamicsSchemaService.listAllObjects(null);\n        System.out.println(objects);\n    }\n\n    @Test\n    @Disabled\n    public void testFetchData() {\n        GetRecordsRequest gsreGetRecordsRequest\n         = new GetRecordsRequest(\"incidents\");\n        //gsreGetRecordsRequest.withOutputMode(OutputMode.FILE);\n\n        gsreGetRecordsRequest.withProjections(Sets.newHashSet(\"contactid\", \"contactid.firstname\", \"new_cdcategoryincidentid\", \"new_cdcategoryincidentid.title\",\"createdonbehalfby\"))\n            .withOutputMode(OutputMode.FILE);\n        RecordsResponse records = msDynamicsDataService.getRecords(gsreGetReco","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dafc6a6-c40c-4a39-ae02-1f3b5d9669fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":190,"endLine":221,"content":"PER.readValue(hubspotAccount, Map.class); //TODO may be create a POJO class for HUBSPOT account\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in fetching HUBSPOT Account Details\", exception);\n//            throw new Exception(\"Invalid Organization URL entered\", SC_BAD_REQUEST);\n            throw new Exception(AdapterErrorMessages.INVALID_ORGANIZATION_URL.getTranslatedMessage());\n        }\n        return accountMap;\n    }\n\n    @Override\n    public InputStream getEntityProperties(String entityName) throws Exception {\n        URIBuilder uriBuilder = getUriForEntity(entityName, true);\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response.getEntity().getContent();\n    }\n\n    @Override\n    public InputStream getEntityPropertiesLatest(String entityName) throws Exception {\n        URIBuilder uriBuilder = getUriForEntityLatest(entityName,true, null,null);\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response.getEntity().getContent();\n    }\n\n    public HttpResponse getEntityPropertiesLatestCaas(String entityName, String api) throws Exception {\n        URIBuilder uriBuilder;\n        if(api == null)\n            uriBuilder = getUriForEntityLatest(entityName,true, null, null);\n        else\n            uriBuilder = getUriBuilder(BASE_API_URL + api);\n        this.httpGet.setURI(uriBuilder.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7aa71abd-e42d-4140-8eb1-1baff7c2dec1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":363,"endLine":392,"content":"etValue())));\n            relationship.setReferencingEntityNavigationPropertyName(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencingEntityNavigationPropertyName\").getValue())));\n            relationship.setRelationshipType(RelationshipType.fromName(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"RelationshipType\").getValue()))));\n            relationship.setSchemaName(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"SchemaName\").getValue())));\n            relationship.setCustomRelationship(DynamicsGainsightUtils.parseBoolean(extractValue(clientEntity.getProperty(\"SchemaName\").getValue())));\n            relationships.add(relationship);\n        }\n        return relationships;\n\n    }\n\n    private Object extractValue(ClientValue clientValue) {\n        if (Objects.isNull(clientValue)) {\n            return null;\n        }\n        if (clientValue.isCollection()) {\n            return clientValue.asCollection().asJavaCollection();\n        } else if (clientValue.isPrimitive()) {\n            return clientValue.asPrimitive().toValue();\n        } else if (clientValue.isComplex()) {\n            return clientValue.asComplex().asJavaMap();\n        } else {\n            return clientValue.asEnum().getValue();\n        }\n    }\n\n}\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb6a97f9-da1e-4431-9f56-3ff9fc51bb43","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":128,"endLine":160,"content":"tory().getEntityCreateRequest(absoluteUri, ce);\n        request.setAccept(ACCEPT);\n        ODataEntityCreateResponse<ClientEntity> response = request.execute();\n        return response.getBody();\n    }\n\n\n\n\n\n    private ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntities(URI absoluteUri, ODataClient client) {\n        LOGGER.info(\"URI = \" + absoluteUri);\n        ODataEntitySetIteratorRequest<ClientEntitySet, ClientEntity> request = client.getRetrieveRequestFactory().getEntitySetIteratorRequest(absoluteUri);\n        request.setContentType(CONTENT_TYPE_APPLICATION_JSON);\n        request.setAccept(CONTENT_TYPE_APPLICATION_JSON);\n        ODataRetrieveResponse<ClientEntitySetIterator<ClientEntitySet, ClientEntity>> response = request.execute();\n        return response.getBody();\n    }\n\n    private InputStream readEntitiesIntoStream(URI absoluteUri, ODataClient client) {\n        ODataEntitySetIteratorRequest<ClientEntitySet, ClientEntity> request = client.getRetrieveRequestFactory().getEntitySetIteratorRequest(absoluteUri);\n        request.setContentType(CONTENT_TYPE_APPLICATION_JSON);\n        request.setAccept(CONTENT_TYPE_APPLICATION_JSON);\n        ODataRetrieveResponse<ClientEntitySetIterator<ClientEntitySet, ClientEntity>> response = request.execute();\n        return response.getRawResponse();\n    }\n\n\n    /**\n     * This is the utility class (used for console printing)\n     */\n    private static class UtilityClass {\n       /* private static void print(String conte","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"227ceeee-a486-419b-b087-985102ce25d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/AuthorizationType.java","startLine":1,"endLine":40,"content":"package com.gainsight.integration.bean.db.common;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum AuthorizationType {\n\n    ACCESS_KEY(\"Access_Key\"),\n    BASIC_AUTH(\"Basic_Auth\"),\n    OAUTH(\"OAUTH\"),\n    M2M_OAUTH(\"M2M_OAuth\"),\n    CUSTOM(\"CUSTOM\"),\n    SSO(\"SSO\");\n\n    private static final Map<Object, AuthorizationType> AUTHORIZATION_MAP = new HashMap<>();\n\n    private String authorizationType;\n\n    AuthorizationType(String authorizationType) {\n        this.authorizationType = authorizationType;\n    }\n\n    static {\n        for (AuthorizationType authorizationType : values()) {\n            AUTHORIZATION_MAP.put(authorizationType.authorizationType.toUpperCase(), authorizationType);\n        }\n    }\n\n    public static String getAuthorizationType(AuthorizationType authorizationType) {\n        return authorizationType.authorizationType;\n    }\n\n    public static AuthorizationType getAuthorizationType(String authorizationType) {\n        if (authorizationType == null) {\n            return null;\n        }\n        return AUTHORIZATION_MAP.get(authorizationType.toUpperCase());\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e13a9e92-1872-4f40-b5a8-850bdac10121","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":144,"endLine":169,"content":"     payload.put(IPaasConstants.PATH, path);\n                deleteFile.setEntity(new StringEntity(JsonUtil.toJsonString(payload), ContentType.APPLICATION_JSON));\n                headers.forEach(deleteFile::addHeader);\n\n                try (CloseableHttpResponse response = httpClient.execute(deleteFile)) {\n                    if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_OK == response.getStatusLine().getStatusCode()) {\n                        LOGGER.info(\"Deleted file from DBFS path: {}\", path);\n                        return;\n                    } else {\n                        LOGGER.info(\"Deletion request failed to remove file from DBFS path: {} reason: {}\", path, response.getStatusLine());\n                        ++retryCount;\n                    }\n                } catch (IOException e) {\n                    LOGGER.error(\"Failed to delete file from the DBFS path: {} retryCount: {}\", e.getMessage(), retryCount, e);\n                    ++retryCount;\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Something went wrong in deleting file from the DBFS: {} retryCount: {}\", e.getMessage(), retryCount, e);\n                ++retryCount;\n            }\n        }\n    }\n\n    private static String generateAccessToken(PNPConnectionsInfo pnpConnectionsInfo) {\n        String oauthClientId = pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.OAUTH_CLIENT_ID).toString();\n        String oauthClientSecret = CryptHandler.getIn","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77c2594d-aa32-4289-9abf-38e4f04fcb63","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":475,"endLine":497,"content":"     public static final String IS_EXTERNAL_CRM_CHANGED = \"IS_EXTERNAL_CRM_CHANGED\";\n        public static final String SFDC_USER_ID = \"SFDC_USER_ID\";\n        public static final String SFDC_USER_NAME = \"SFDC_USER_NAME\";\n        public static final String SFDC_USER_EMAIL = \"SFDC_USER_EMAIL\";\n        public static final String SFDC_USER_DISPLAY_NAME = \"SFDC_USER_DISPLAY_NAME\";\n        public static final String SFDC_PICTURE_URL = \"SFDC_PICTURE_URL\";\n\n        public static final String CRM_ID = \"crmId\";\n        public static final String CONNECTION_STATUS = \"connectionStatus\";\n        public static final String CONNECTION_TYPE = \"connectionType\";\n        public static final String SOQL_SELECT = \"select\";\n        public static final String SOQL_FROM = \"FROM\";\n        public static final String SOQL_WHERE = \"WHERE\";\n        public static final String QUERY = \"QUERY\";\n        public static final String TARGET_OBJECT = \"TARGET_OBJECT\";\n        public static final String TARGET_OBJECT_NAME = \"TARGET_OBJECT_NAME\";//added with i18n changes\n        public static final String CUSTOM_DOMAIN_URL = \"CUSTOM_DOMAIN_URL\";\n        public static final String ORG_TYPE = \"ORG_TYPE\";\n        public static final String IS_PRIMARY_CONNECTION = \"IS_PRIMARY_CONNECTION\";\n        public static final String GENERATE_OOB_JOBS = \"GENERATE_OOB_JOBS\";\n        public static final String PNP_CONNECTION_ID = \"PNP_CONNECTION_ID\";\n        public static final String FILTER = \"FILTER\";\n        public static final S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aae95766-7944-4983-a124-3d27b7c659ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":229,"endLine":267,"content":"ream();\n                resp.setErrIs(es);\n            } else {\n                LOGGER.error(\"Recieved empty error response\");\n            }\n            resp.setErrorCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occured while handling error data {}\", ex.getMessage(), ex);\n            throw ex;\n        }\n        return resp;\n    }\n\n    public void setEscapeQueryParams(boolean escapeQueryParams) {\n        this.escapeQueryParams = escapeQueryParams;\n    }\n\n    public HttpResponse put(String requestURL, Map<String, Object> headers, String body, int timeout) throws IOException {\n        HttpResponse resp = new HttpResponse();\n        HttpURLConnection httpConn = null;\n        try {\n            URL url = new URL(requestURL);\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setConnectTimeout(timeout);\n            httpConn.setUseCaches(false);\n            httpConn.setRequestMethod(\"PUT\");\n            addHeaders(httpConn, headers);\n            httpConn.setDoInput(true);\n            httpConn.setDoOutput(true);\n            OutputStreamWriter writer = new OutputStreamWriter(\n                    httpConn.getOutputStream());\n            writer.write(body);\n            writer.flush();\n            InputStream is = null;\n            if (httpConn != null) {\n                is = httpConn.getInputStream();\n            } else {\n            ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a98eca16-8c85-45a6-9f97-b85290b908c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":32,"endLine":62,"content":"y, rateLimitDetails, DEFAULT_TIMEOUT);\n    }\n\n    @Override\n    public JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, int timeout) throws Exception {\n\n        return executeApi(httpRequest, responseRootKey, rateLimitDetails, timeout, false);\n    }\n\n    @Override\n    public JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, Boolean isXmlResponse) throws Exception {\n\n        return executeApi(httpRequest, responseRootKey, rateLimitDetails, DEFAULT_TIMEOUT, isXmlResponse);\n    }\n\n    @Override\n    public JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, int timeout, Boolean isXmlResponse) throws Exception {\n\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(timeout * 1000)\n                .setConnectionRequestTimeout(timeout * 1000)\n                .setSocketTimeout(timeout * 1000).build();\n\n        CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        int retry = 0;\n        InputStream content;\n        while (retry++ < 3) {\n            LOGGER.info(\"Api Being Hit : {}\",httpRequest.getURI());\n            try {\n                HttpResponse httpResponse = httpClient.execute(httpRequest);\n                LOGGER.info(\"Response code from external system : {}. Headers received from external System : {}\", httpResponse.get","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4138381-8797-45b1-8433-cca0645cc181","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelService.java","startLine":23,"endLine":26,"content":"  Map<String, String> colNameToDataType) throws SQLException;\n    Integer executeInsert(String absoluteObjectPath, Map<String, Object> dataToBeInserted) throws SQLException;\n    Integer executeUpdate(String absoluteObjectPath, Map<String, Object> data, List<String> identifiers) throws SQLException;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54d4aca8-d1e2-443c-83b8-a5ab95fc2e4a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":714,"endLine":718,"content":" config.getDefaultValue();\n    String val = filterValues.toArray()[0].toString();\n    return dataTypeHandling(config, val);\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60d619e6-edd6-4890-999e-580fe59b5fed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":119,"endLine":145,"content":".error(\"[ZOOM] Access token expired, trying to regenerate...\");\n                    throw new Exception(AdapterErrorMessages.ZOOM_ACCESS_TOKEN_EXPIRED.getTranslatedMessage());\n                }\n            } catch (IOException ex) {\n                LOGGER.error(\"[ZOOM] IOException occurred while connecting to source with retry count : {} \", retryCount, ex);\n            }\n\n            //avoid sleep at last retry\n            if (retryCount < ALLOWED_RETRIES - 1) {\n                if (null != response) {\n                    LOGGER.info(\"[ZOOM] Sleeping for 15 secs as the api call to source failed for retry count : {} due to : {}, code :{}\", retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                } else {\n                    LOGGER.info(\"[ZOOM] Sleeping for 15 secs as the api call to source failed for retry count : {}\", retryCount);\n                }\n                Thread.sleep((15 * 1000));\n            }\n        }\n        if (null != response) {\n            LOGGER.error(\"[ZOOM] The api call to source failed for retry count : {} due to status: {} , code :{}\", ALLOWED_RETRIES, response.getStatusLine(), response.getStatusLine().getStatusCode());\n            throw new Exception(AdapterErrorMessages.ZOOM_API_FETCH_FAILED.getTranslatedMessage() + response.getStatusLine());\n        } else {\n            throw new Exception(AdapterErrorMessages.ZOOM_API_FETCH_FAILED_WITH_MAX_RETRIES.getTranslatedMessage());\n        }\n    }\n\n    @Override\n    publ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87316e32-e0dd-4711-ab63-a91d1fdaaa04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":121,"endLine":145,"content":"WED_RETRIES; retryCount += 1) {\n            try {\n                response = this.httpclient.execute(httpGet);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    return response.getEntity().getContent();\n                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"[MSTEAMS] Access token expired, trying to regenerate...\");\n                    throw new Exception(AdapterErrorMessages.MSTEAMS_ACCESS_TOKEN_EXPIRED.getTranslatedMessage());\n                }\n            } catch (IOException ex) {\n                LOGGER.error(\"[MSTEAMS] IOException occurred while connecting to source with retry count : {} \", retryCount, ex);\n            }\n\n            //avoid sleep at last retry\n            if (retryCount < ALLOWED_RETRIES - 1) {\n                if (null != response) {\n                    LOGGER.info(\"[MSTEAMS] Sleeping for 15 secs as the api call to source failed for retry count : {} due to : {}, code :{}\", retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                } else {\n                    LOGGER.info(\"[MSTEAMS] Sleeping for 15 secs as the api call to source failed for retry count : {}\", retryCount);\n                }\n                Thread.sleep((15 * 1000));\n            }\n        }\n        if (null != response) {\n            LOGGER.error(\"[MSTEAMS] The api call to source failed for retry count : {} due to status: {} , code :{}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09b1ab0a-8a9a-4ef5-85bb-49da4fc06531","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/ConnectorI18nService.java","startLine":1,"endLine":39,"content":"\npackage com.gainsight.integration.bean.i18n;\n\nimport com.gainsight.constants.ComponentCode;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.i18n.bean.*;\nimport com.gainsight.i18n.client.I18nClient;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\nimport org.springframework.util.StringUtils;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.gainsight.context.RequestContextProvider.getRequestId;\n\npublic class ConnectorI18nService {\n    private static volatile I18nClient client;\n    private static final String component = ComponentCode.CONNECTORS;\n    private static final String envAccessKey = System.getenv().get(\"gs.i18n.read.access.key\");\n    private static final String envHost = System.getenv().get(\"gs.i18n.service.url\");\n\n    private ConnectorI18nService() {\n    }\n\n    private static I18nClient i18nClient(String accessKey, String host){\n        if (client == null) {\n            synchronized (I18nClient.class) {\n                if (client == null) {\n                    I18NClientConfig clientConfig = new I18NClientConfig();\n                    clientConfig.clientName(\"Connectors\").accessKey(accessKey).i18nHost(host)\n                            .componentCodes(Sets.newTreeSet(Sets.newHashSet(ComponentCode.CONNECTORS)));\n                    client = I18nClient.getInstance(clientConfig);\n                }\n            }\n        }\n        return client;\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1349ee2-cdb6-4ed9-99f5-aa089559032e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":194,"endLine":219,"content":"               if (resolveOptionSets && optionSetAttributesMetadata.contains(inlineEntity.getTypeName().getName())) {\n                            if ((fields.contains(String.valueOf(attribute.getOrDefault(\"LogicalName\", StringUtils.EMPTY))))) {\n                                ClientLink inlineClientLink = inlineEntity.getNavigationLink(\"OptionSet\");\n                                attribute.put(\"OptionSet\", getOptionSet(client, inlineClientLink.getLink()));\n                            } else {\n                                OptionSet optionSet = new OptionSet();\n                                optionSet.setOptions(new ArrayList<>());\n                                attribute.put(\"OptionSet\", optionSet);\n                            }\n                        }\n                        attributes.add(attribute);\n                    }\n                    object.put(\"Attributes\", attributes);\n                }\n            }\n            objects.add(object);\n        }\n        return objects;\n    }\n\n    private List<Map<String, Object>> readEntities(ODataClient client, URI absoluteUri, boolean resolveAttributes, boolean resolveOptionSets) throws IOException {\n        ODataEntitySetRequest<ClientEntitySet> request = client.getRetrieveRequestFactory().getEntitySetRequest(absoluteUri);\n        request.setAccept(\"application/json;odata.metadata=full\");\n        ODataRetrieveResponse<ClientEntitySet> response = request.execute();\n        ClientEntitySet clientEntity = response.getBody();\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5d6cd945-ddd0-4793-b6fa-a358c895686b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":216,"endLine":233,"content":"    request.setAccept(\"application/json;odata.metadata=full\");\n        ODataRetrieveResponse<ClientEntitySet> response = request.execute();\n        ClientEntitySet clientEntity = response.getBody();\n        if (CollectionUtils.isEmpty(clientEntity.getEntities())) {\n            return Collections.emptyList();\n        }\n        final List<String> optionSetAttributesMetadata = Lists.newArrayList(\"PicklistAttributeMetadata\", \"StatusAttributeMetadata\", \"StateAttributeMetadata\", \"MultiSelectPicklistAttributeMetadata\");\n        List<Map<String, Object>> objects = Lists.newArrayList();\n        for(ClientEntity entity : clientEntity.getEntities()) {\n            Map<String, Object> object = entity.getProperties().stream().filter(clientProperty -> !clientProperty.getName().equals(\"Attributes@odata.context\")).collect(Collectors.toMap(clientProperty -> clientProperty.getName(), clientProperty -> extractValue(clientProperty.getValue())));\n            if (resolveAttributes) {\n                ClientLink clientLink = entity.getNavigationLink(\"Attributes\");\n                ClientEntitySet clientEntitySet = clientLink.asInlineEntitySet().getEntitySet();\n                if (CollectionUtils.isNotEmpty(clientEntitySet.getEntities())) {\n                    List<Map<String, Object>> attributes = Lists.newArrayList();\n                    for (ClientEntity inlineEntity: clientEntitySet.getEntities()) {\n                        Map<String, Object> attribute = Maps.newHashMap();\n                        /","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f8cdd9ea-38be-42e5-a95f-f5e30b0d5869","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":59,"endLine":86,"content":" = \"crm/v3/imports\";\n    private static final String HAPIKEY = \"hapikey\";\n    private static final String LIMIT = \"limit\";\n    private static final String PROPERTIES = \"properties\";\n    private static final String ASSOCIATION_END_POINT = \"crm-associations/v1/associations/\";\n    private static final String ASSOCIATION_END_POINT_V3 = \"crm/v3/associations/\";\n\n    private static final String SEARCH_END_POINT_V3 = \"crm/v3/objects/\";\n    private static final String OWNER_END_POINT_V3 = \"crm/v3/owners\";\n    private static final String OWNER_KEYWORD = \"owners\";\n\n    private static final String PIPLEINE_END_POINT = \"crm/v3/pipelines/\";\n    private static final String FILES_END_POINT = \"files/v3/files/\";\n    private static final String FILE_METADATA_END_POINT = FILES_END_POINT + \"%s\";\n    private static final String FILE_METADATA_SIGNED_URL_END_POINT = FILES_END_POINT + \"%s/signed-url\";\n    private static final String HUBSPOT_DEFINED = \"HUBSPOT_DEFINED\";\n    private static final String API_VERSION_LATEST = \"latest\";\n\n    static final String AUTHORIZATION = \"Authorization\";\n    static final String BEARER = \"Bearer \";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String CONTENT_TYPE_VALUE = \"application/json;charset=UTF-8\";\n    private static final String ASSOCIATIONS_KEYWORD = \"associations\";\n    private static final int TIMEOUT = 30;\n    private static final int ALLOWED_RETRIES = 3;\n\n    AuthenticationType authenticationType;\n    private String","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f52c88d-f802-48d9-8151-97b9058a1cbb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":403,"endLine":425,"content":"e httpRequestBase = null;\n    URIBuilder uriBuilder;\n    String finalPath = metadataApiConfigAttributes.getPath();\n    if (StringUtils.isNotEmpty(finalPath) && finalPath.startsWith(\"__remove__\")) {\n      finalPath = finalPath.replaceFirst(\"__remove__\", StringUtils.EMPTY);\n    }\n    switch (metadataApiConfigAttributes.getHttpMethod()) {\n      case GET:\n        httpRequestBase = new HttpGet();\n        if (objectName != null)\n          finalPath = metadataApiConfigAttributes.getPath().replace(\"{objectName}\", objectName);\n        if(metadataApiConfigAttributes.getReplaceByIdRegexInPath() != null && flattenedConnectionInfo.containsKey(metadataApiConfigAttributes.getReplaceByIdRegexInPath())) {\n          finalPath = finalPath.replace(metadataApiConfigAttributes.getReplaceByIdRegexInPath(), flattenedConnectionInfo.get(metadataApiConfigAttributes.getReplaceByIdRegexInPath()).toString());\n        }\n        ExternalUrlDetails baserUrl = ObjectUtils.isEmpty(metadataApiConfigAttributes.getBaseUrl()) ?\n            metadataEngineConfig.getBaseUrl() : metadataApiConfigAttributes.getBaseUrl();\n        uriBuilder = new URIBuilder(getBaseUrl(baserUrl, flattenedConnectionInfo) + finalPath);\n        if (paginationInfo != null && paginationInfo.containsKey(\"QueryParam\")) {\n          queryParams.putAll((Map) paginationInfo.get(\"QueryParam\"));\n        }\n        populateQueryParams(queryParams, uriBuilder);\n        httpRequestBase.setURI(uriBuilder.build());\n        if (paginationInfo != null && pag","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"063d7130-4ff0-48eb-9a37-eb7ba64d6eb1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":88,"endLine":114,"content":"                  picklistFieldValue = picklistObj.get(dataEntry).toString();\n                        else\n                            picklistFieldValue = \"\";\n                    } else {\n                        picklistObj = picklistObj.get(dataEntry);\n                    }\n                } catch (Exception e) {\n                    LOGGER.warn(\"Error occurred while trying to find picklist mapping for field {} due to {}, will be ignored\", fieldName, e.getMessage());\n                }\n            }\n\n            String pickListLabel = \"\";\n            if (picklistFieldValue.contains(\",\")) {\n                if (picklistFieldValue.startsWith(\"[\")) {\n                    picklistFieldValue = picklistFieldValue.substring(1, picklistFieldValue.length() - 1);\n                }\n                picklistFieldValue = picklistFieldValue.replaceAll(\"\\\"\", \"\");\n                List<String> values = Arrays.asList(picklistFieldValue.split(\",\"));\n                for (String value : values) {\n                    boolean isPicklistPresent = false;\n                    for (PicklistOption option : picklistOptions) {\n                        if (value.equals(option.getPicklistValue())) {\n                            isPicklistPresent = true;\n                            if (picklistFieldValue.startsWith(\"[\")) {\n                                pickListLabel += (\";\\\"\" + option.getPicklistLabel() + \"\\\"\");\n                            } else {\n                                pickListLabel += (\";\" + option.g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d18e0a29-5d23-4ceb-88b5-43174fdbdc3f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":334,"endLine":351,"content":"      }\n            }\n        }\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships...\", RequestContextProvider.getTenantId());\n            relationships = msDynamicsSchemaService.listRelationships(msDynamicsObject.getLogicalName(), RelationshipType.MANY_TO_ONE);\n            LOGGER.info(\"tId: {}. Fetched all Many-to-One relationships.\", RequestContextProvider.getTenantId());\n            for (String projection : expandGroup) {\n                String sourceLookupField = StringUtils.substringBefore(projection, \".\");\n                String propertyValue = masterLookUpConfiguration.get(getRecordsRequest.getPluralName() + \"@@\" + sourceLookupField);\n                if (Objects.nonNull(propertyValue)) {\n                    String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Column column = msDynamicsObject.getCo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7128b32-1e4e-40fe-a374-6c085ae1d4b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":137,"endLine":167,"content":"ry);\n            }\n            throw e;\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcBatchInJobV2(sfdcJobId, pnpConnectionsInfo, clientId, clientSecret, refreshToken, ++retryCount, sfdcApiVersion, query);\n            }\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    public void closeSfdcJob(String jobId, PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret,\n                             String refreshToken, String sfdcApiVersion) {\n        try {\n            LOGGER.info(\"Closing sfdc job {}\", jobId);\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            Map<String, Object> headers = Maps.newHashMap();\n            headers.put(CONTENT_TYPE, \"application/json\");\n            headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n            String url = salesforceToken.getInstanceURL() + SALESFORCE_SERVICE_DATA + sfdcApiVersion\n                    + String.format(SALESFORCE_CLOSED_JOB, jobId);\n            httpUrlConnectionUtils.post(url, headers, closeBulkJobForQuery());\n        } catch (IOException e) {\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    private String closeBulkJobForQuery() {\n        SalesforceJob jobInfo = new SalesforceJob();\n        jobInfo.setState(\"Closed\");\n        return JsonUtil.toJso","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4785dce7-5b20-4b71-922f-b747c63fd541","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":753,"endLine":783,"content":"r);\n                    throw new SystemException(DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND, HttpStatus.SC_BAD_REQUEST);\n                }\n\n                switch (gsFieldDefinitionOptional.get().getDataType().toUpperCase()) {\n                    case \"NUMBER\":\n                        if (null == data) {\n                            requestMap.put(header, null);\n                        } else {\n                            requestMap.put(header, new BigDecimal(data));\n                        }\n                        break;\n                    case \"MULTISELECTDROPDOWNLIST\":\n                        if (StringUtils.isNotEmpty(data)) {\n                            requestMap.put(header, data.replaceAll(SEMICOLON, COMMA));\n                        }\n                        break;\n                    default:\n                        requestMap.put(header, data);\n                        break;\n                }\n            }\n        }\n        return requestMap;\n    }\n\n    private List<String> getLookupObjectPrimaryKeys(MSDynamicsObject msDynamicsObject, Set<String> projections, List<Relationship> relationships, Map<String, String> masterLookUpConfig) {\n        List<String> lookupObjectPrimaryKeys = Lists.newArrayList();\n        List<String> lookupProjections = projections.stream().filter(projection -> StringUtils.contains(projection, \".\")).collect(Collectors.toList());\n        Set<String> lookupSourceColumns  = Sets.newHashSet();\n        for (String lookupProjection: lookupProje","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2f79b006-c530-413f-b0bc-fb0b5bd56ffd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/UCXMLUtility.java","startLine":1,"endLine":50,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils;\n\nimport com.google.common.collect.Lists;\nimport exception.SystemException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.StringReader;\nimport java.util.List;\n\npublic class UCXMLUtility {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(UCXMLUtility.class);\n\n    private static String CSV_DELIMITER = \"\\\",\\\"\";\n    private static String DUMMY_NL = \"dummy_nl\";\n\n    private UCXMLUtility() {\n    }\n\n    public static Document convertStringToXMLDocument(String xmlString) {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = null;\n        try {\n            builder = factory.newDocumentBuilder();\n            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));\n            return doc;\n        } catch (Exception e) {\n            LOGGER.error(\"Parsing error\", e);\n        }\n        return null;\n    }\n\n    public static String getElementValueById(Document doc, String id) {\n        List<String> s = getElementValuesById(doc, id);\n        if (!s.isEmpty()) {\n            return s.get(0);\n        } else {\n            return Str","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ed50f45-d869-4179-aab0-b105cff46cd6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":810,"endLine":840,"content":"tePathToTable))) {\n      log.info(\"[SAP DATASPHERE] Executing query to get total records count: {}\", preparedStatement);\n      resultSet = preparedStatement.executeQuery();\n      if (resultSet.next()) {\n        rowCount = resultSet.getLong(\"row_count\");\n      }\n    } catch (SQLException e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while getting total records: {}\", e.getMessage(), e);\n    } finally {\n      if (null != resultSet) {\n        resultSet.close();\n      }\n    }\n    return rowCount;\n  }\n\n  private void dropTable(String tableName) {\n    int retryCount = 0;\n    while (retryCount < 3) {\n      log.info(\"[SAP DATASPHERE] Dropping table: {}, retry count: {}\", tableName, retryCount);\n      try (PreparedStatement deleteStatement = this.connection.prepareStatement(String.format(DROP_TABLE_QUERY, tableName))) {\n        deleteStatement.execute();\n        log.info(\"[SAP DATASPHERE] Table dropped successfully: {}\", tableName);\n        break;\n      } catch (SQLException ex) {\n        log.error(\"[SAP DATASPHERE] Error occurred while dropping table: \", ex);\n        retryCount++;\n      }\n    }\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2c1e1438-8f39-4b57-81bb-9869114d8b2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":1,"endLine":38,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils;\n\nimport com.gainsight.integration.bean.IPaasConstants;\nimport org.apache.http.HttpStatus;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.Map;\n\nimport static java.lang.Thread.sleep;\n\npublic class HttpUrlConnectionUtils {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HttpUrlConnectionUtils.class);\n    private boolean escapeQueryParams = true;\n\n    public HttpResponse get(String requestURL, Map<String, Object> headers, int timeout, boolean isResourceDownloadRequest, Map<String, Object> queryParams) throws Exception {\n        return get(requestURL, headers, timeout, isResourceDownloadRequest, queryParams, 1, 0);\n    }\n\n    public HttpResponse get(String requestURL, Map<String, Object> headers, int timeout, boolean isResourceDownloadRequest, Map<String, Object> queryParams, int gatewayTimeoutRetryCount, int gatewayTimeoutRetryDelay) throws Exception {\n        HttpResponse resp = new HttpResponse();\n        HttpURLConnection httpConn = null;\n        int retryCount = 1;\n        int maxRetryLimit = gatewayTimeoutRetryCount;\n        int pollInterval = gatewayTimeoutRetryDelay;\n        do {\n            try {\n                String queryParamsString = buildQueryParams(queryParams);\n                if (queryParamsString != null) {\n             ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9d1196d8-dd34-4e57-b9c6-f8c6f31e2a66","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelServiceImpl.java","startLine":60,"endLine":93,"content":"IMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        httpPatch.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n\n    }\n\n    public GainsightMSTeamsChannelServiceImpl(){\n    }\n\n    private void validate() {\n        Objects.requireNonNull(clientId, \"[MSTEAMS] Client ID  Can't be NULL\");\n        Objects.requireNonNull(clientSecret, \"[MSTEAMS] Client Secret Can't be NULL\");\n        Objects.requireNonNull(refreshToken, \"[MSTEAMS] Refresh Token Can't be NULL\");\n        Objects.requireNonNull(accessToken, \"[MSTEAMS] Access Token Can't be NULL\");\n    }\n\n    @Override\n    public HttpResponse searchData(String url) throws Exception {\n        HttpResponse response = null;\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            URIBuilder uriBuilder = new URIBuilder(BASE_API_URL + SEARCH_END_POINT_V1 + url);\n            this.httpGet.setURI(uriBuilder.build());\n            try {\n                response = this.httpclient.execute(httpGet);\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8acab384-5bdb-4bd6-af07-ebd0159d1c82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/ExternalDataType.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.utils.GainsightUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.Map;\nimport java.util.Objects;\n\npublic enum ExternalDataType {\n\n    BOOLEAN(\"Boolean\", \"boolean\", true),\n    CUSTOMER(\"Customer\", \"string\", true),\n    DATETIME(\"DateTime\", \"date\", true),\n    DECIMAL(\"Decimal\", \"double\", true),\n    DOUBLE(\"Double\", \"double\", true),\n    INTEGER(\"Integer\", \"integer\", true),\n    LOOKUP(\"Lookup\", \"string\", true),\n    MEMO(\"Memo\", \"string\", true),\n    MONEY(\"Money\", \"double\", true),\n    OWNER(\"Owner\",\"string\", true),\n    PARTYLIST(\"Partylist\", \"string\", false),\n    PICKLIST(\"Picklist\", \"string\", true),\n    MULTISELECTPICKLIST(\"MultiSelectPicklist\", \"string\", true),\n    STATE(\"State\", \"string\", true),\n    STATUS(\"Status\", \"string\", true),\n    STRING(\"String\", \"string\", true),\n    UNIQUEIDENTIFIER(\"UniqueIdentifier\", \"string\", true),\n    CALENDERRULES(\"CalenderRules\", \"string\", false),\n    VIRTUAL(\"Virtual\", \"string\", false),\n    BIGINT(\"BigInt\", \"long\", true),\n    MANAGEDPROPERTY(\"ManagedProperty\", \"string\", true),\n    ENTITYNAME(\"EntityName\", \"string\", true);\n\n    private String value;\n    private String localType;\n    private boolean supported;\n\n    ExternalDataType(String value, String localType, boolean supported) {\n        this.value = value;\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"344dfd1b-caba-4ec0-bf43-2ed0377d8009","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/RecordResponseGenerator.java","startLine":1,"endLine":41,"content":"package com.gainsight.integration.connector.dynamics.util;\n\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.OutputMode;\nimport com.google.common.collect.Lists;\nimport com.opencsv.CSVWriterBuilder;\nimport com.opencsv.ICSVWriter;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RecordResponseGenerator {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(RecordResponseGenerator.class);\n\n  private final OutputMode outputMode;\n  private final List<Map<String, Object>> records;\n  private File csvFile;\n  private String[] headers = null;\n  private String batchQuery;\n  private ICSVWriter icsvWriter = null;\n  private int recordsPulled = 0;\n\n  public RecordResponseGenerator(GetRecordsRequest getRecordsRequest) {\n    try {\n      LOGGER.info(\"Record Request Details: getRecordsRequest:{}\", getRecordsRequest);\n      this.outputMode = getRecordsRequest.getOutputMode();\n      if (outputMode == OutputMode.FILE) {\n        headers = getRecordsRequest.getProjections().toArray(new String[0]);\n        csvFile = File.createTempFile(\"dynamics\", \".csv\");\n\n        FileOutputStream fos = new FileOu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a40a43f9-61bb-471a-b583-43040b169b5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":104,"endLine":130,"content":"SER, properties.get(USERNAME).toString());\n        propertie.put(WAREHOUSE, properties.get(WAREHOUSE).toString());\n        propertie.put(CLIENT_SESSION_KEEP_ALIVE, Boolean.TRUE.toString());\n        switch (authorizationType) {\n            case BASIC_AUTH:\n                propertie.put(PASSWORD, properties.get(PASSWORD));\n                break;\n            case OAUTH:\n                LOGGER.info(\"SNOWFLAKE :: OAUTH Authorization type is selected. Generating access token for async job run\");\n                String accessToken = generateOrRefreshAccessToken(properties);\n                propertie.put(AUTHENTICATOR, AuthorizationType.OAUTH.toString().toLowerCase());\n                propertie.put(PASSWORD, accessToken);\n                break;\n            default:\n                throw new SystemException(String.format(\"Authorization type : {} is not supported for Snowflake\", authorizationType));\n        }\n        this.connection = createConnection(connectionUrl, propertie);\n    }\n\n    @Override\n    public List<Map<String, Object>> listAllObjects() {\n        List<Map<String, Object>> tables;\n        String queryParam = QUOTES + this.db + QUOTES + DOT + QUOTES + this.schema + QUOTES;\n        try (PreparedStatement preparedStatementTables = connection.prepareStatement(\"show tables in identifier(?)\");\n             PreparedStatement preparedStatementViews = connection.prepareStatement(\"show views in identifier(?)\");) {\n            preparedStatementTables.setString(1, queryParam);\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f860dd3b-ce7f-4cd0-bfcc-64c6961854d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":368,"endLine":392,"content":"okupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\").add(projection);\n                    } else {\n                        //Never be the case\n                        LOGGER.error(\"Issue fetching data for field: {}\", projection);\n                    }\n                } else {\n                    /*lookup, length=3\n                        mappedSourceColumns=createdby.systemuser.firstname\n                    */\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships...\", RequestContextProvider.getTenantId());\n            relationships = msDynamicsSchemaService.listRelationships(objectDefinition.getDbName(), RelationshipType.MANY_TO_ONE);\n            LOGGER.info(\"tId: {}. Fetched all Many-to-One relationships.\", RequestContextProvider.getTenantId());\n            for (String projection : expandGroup) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                String sourceLookupField = mappedSourceColumns[0];\n                String propertyValue = masterLo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"40367cb3-b5db-4204-8066-bcb37342bec8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubspotAssociationEnum;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotBulkImportBean;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotSearchRequest;\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.*;\n\n/**\n * @author : vipinsharma\n * @createdOn : 25 Jun 2019 :: 15:29\n **/\n\n//@Service//todo need to check how to manage com.gainsight.integration.connector.dynamics.bean\npublic class GainsightHubspotFetchServiceImpl implements GainsightHubspotFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightHubspotFetchServiceImpl.class);\n\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n    private static final String OWNER_KEYWORD = \"owners\";\n\n    private static final GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n\n    @Override\n    public boolean authenticateCredentials(String clientId, String clientSecret, String refreshToken) {\n      try {\n          GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientS","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"06212e6e-cb59-4eea-a1f3-99854f5360dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImplTest.java","startLine":67,"endLine":93,"content":"pected,result,\"Objects missing !!\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Pull Entity Data\")\n    @Order(2)\n    public void getEntityMetadata() throws IOException {\n        Assertions.assertFalse(((List) gainsightSapCrmFetchService.getEntityMetadata(oDataClientWithUserNamePwd,\"Account\")).isEmpty(),\"No metadata found\");\n        Assertions.assertFalse(((List) gainsightSapCrmFetchService.getEntityMetadata(oDataClientWithUserNamePwd,\"Case\")).isEmpty(),\"No metadata found\");\n        Assertions.assertFalse(((List) gainsightSapCrmFetchService.getEntityMetadata(oDataClientWithUserNamePwd,\"Opportunity\")).isEmpty(),\"No metadata found\");\n        Assertions.assertFalse(((List) gainsightSapCrmFetchService.getEntityMetadata(oDataClientWithUserNamePwd,\"Lead\")).isEmpty(),\"No metadata found\");\n        Assertions.assertFalse(((List) gainsightSapCrmFetchService.getEntityMetadata(oDataClientWithUserNamePwd,\"Contact\")).isEmpty(),\"No metadata found\");\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"Accounts\",\"Opportunities\",\"Contacts\",\"Leads\",\"Cases\"})\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Pull Entity Data\")\n    @Order(3)\n    public void pullEntityData(String entityName){\n        try {\n            String serviceUrl = \"https://sfdcbridged39b34cbf.us2.hana.ondemand.com/sfdc.svc/\";\n            Object entityData = gainsightSapCrmFetchService.getEntityData(oDataClientWithUserNamePwd,entityName);\n            System.out.println(entityData);\n/*\n            assert","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9c23bd2-8db5-4753-a3ac-2a4b5dc15446","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":57,"endLine":85,"content":"otChannelService.getEntityData(entityName, projectionList);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public InputStream getPaginatedEntityData(String entityName, List<String> projectionList, String clientId, String clientSecret, String refreshToken, Long offsetValue) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.getPaginatedEntityData(entityName, projectionList, offsetValue);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public InputStream getPaginatedEntityData(String entityName, List<String> projectionList, String clientId,\n                                              String clientSecret, String refreshToken, String accessToken, Long offsetValue) throws Exception {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.getPaginatedEntityData(entityName, projectionList, offsetValue);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw e;\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7f3990f5-a8e0-45c3-a363-443092833899","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/PaginationDetails.java","startLine":41,"endLine":90,"content":"t(responseKey) == null)\n              return null;\n            result += apiResponse.get(responseKey).asText();\n          }\n          break;\n        case \"number\":\n          result = 0L;\n          for (String responseKey : responseKeyList) {\n            if (apiResponse.get(responseKey) == null)\n              return null;\n            result = (Long) result + apiResponse.get(responseKey).asLong();\n          }\n          break;\n        default:\n          return null;\n      }\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * @param jsonNode {@link  JsonNode}\n   * @param path     {@link String}, path to the value in the json can be a flat path or nested path\n   * @return {@link String} value at the path in both cases of flat and nested path\n   */\n\n  public static String getValueFromPath(JsonNode jsonNode, String path) {\n    String[] keys = path.split(\"\\\\.\");\n    JsonNode currentNode = jsonNode;\n\n    // case when there is no nesting in the path\n    if (keys.length == 1) {\n      if (jsonNode.get(path) == null) {\n        return null;\n      }\n      return jsonNode.get(path).asText();\n    }\n\n    // case when there is nesting in the path\n    int nestedLevelLength = keys.length - 1;\n    for (int i = 0; i < nestedLevelLength; i++) {\n      if (currentNode == null) {\n        return null; // If any part of the path is null, return null\n      }\n      currentNode = currentNode.path(keys[i]);\n    }\n\n    String finalPath = keys[nestedLevelLength];\n    if (currentNode.get(finalPath) == n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c95ea294-4231-4e6c-85f8-05fae7652da4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":119,"endLine":146,"content":"ctionId(), response.getRespMsg(), response.getResponseCode());\n            throw new SystemException(errorMessage);\n        } else {\n            SalesforceToken salesforceToken = OBJECT_MAPPER.readValue(response.getRespMsg(), SalesforceToken.class);\n            if (salesforceToken.getAccessToken() != null) {\n                return salesforceToken;\n            }\n        }\n        return null;\n    }\n\n    private String loginUrl(PNPConnectionsInfo pnpConnectionsInfo) {\n        String loginURL;\n        if (pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL) != null) {\n            loginURL = (boolean) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_ENABLED) ?\n                    (String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.CUSTOM_DOMAIN_URL) :\n                    (SalesforceOrgType.forValue((String) pnpConnectionsInfo.getProperties().get(UCConstants.GSIntegration.ORG_TYPE)).getLoginUrl());\n        } else {\n            loginURL = SalesforceOrgType.PRODUCTION.getLoginUrl();\n        }\n        LOGGER.info(\"Returning login base url connectionId:{} loginURL:{}\", pnpConnectionsInfo.getConnectionId(), loginURL);\n        return loginURL;\n    }\n\n    private SalesforceToken getTokenFromCache(PNPConnectionsInfo pnpConnectionsInfo) throws IOException {\n        String key = constructCacheKey(pnpConnectionsInfo);\n        SalesforceToken salesforceToken = TOKEN_CACHE.getIfPresent(key);\n        if (salesfor","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"63d1a63a-6be4-4dc3-b939-0d9d05a5af52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":697,"endLine":725,"content":"ment = this.connection.createStatement()) {\n                LOGGER.info(\"Merging temp stage table with target table. query: {}\", mergeIntoQuery);\n                mergeStatement.execute(mergeIntoQuery);\n                long rowsAffected = mergeStatement.getUpdateCount();\n                LOGGER.info(\"rowsAffected: {}\", rowsAffected);\n                bulkLoadResult.put(UCConstants.RECORDS_AFFECTED, rowsAffected);\n            } catch (Exception ex) {\n                LOGGER.error(\"Exception while loading bulk data: {}...\", ex.getMessage(), ex);\n                //throw new SQLException(\"Error occurred while trying to load data in bulk. \" + parseMessage(ex.getMessage()));\n                throw new SQLException(ex.getMessage());\n            } finally {\n                GainsightDatabricksHelper.deleteFileFromDatabricksFileSystem(pnpConnectionsInfo, uploadedFilePath);\n                dropTable(absolutePathToTempStageTable);\n                absolutePathToTempStageTable = null;\n            }\n        } finally {\n            if(StringUtils.isNotEmpty(absolutePathToTempStageTable)){\n                dropTable(absolutePathToTempStageTable);\n            }\n            closeQuietly(this.connection, null, null);\n        }\n        return bulkLoadResult;\n    }\n\n    private long getTotalRecords(String absolutePathToTable) throws SQLException {\n        long rowCount = 0l;\n        ResultSet resultSet = null;\n        try (Statement statement = this.connection.createStatement()) {\n            String que","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"abf756e9-0efd-42fb-a402-bbdf30134b01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/ChangeEventKafkaMessage.java","startLine":1,"endLine":18,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Getter\n@Setter\n@ToString\npublic class ChangeEventKafkaMessage implements ChangeEventMessage {\n    private String tenantId;\n    //Check  if connection_id / channel id can be added to the message\n    private String jobId;\n    private String channelObjectId;\n    private ConnectorType source;\n    private ChangeEventDto payload;\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae90b698-4fea-4c5f-8d93-808d571be1da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":331,"endLine":353,"content":"MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_tz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            tempStageName = \"tmp_stage_\" + objectName.toLowerCase() + \"_\" + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\");\n            //create temporary stage\n            String createTempStageQuery = String.format(\"create TEMPORARY stage %s FILE_FORMAT = (TYPE = JSON)\", tempStageName);\n            LOGGER.info(\"Executing query : {}\", createTempStageQuery);\n            preparedStatement = this.connection.prepareStatement(createTempStageQuery);\n            preparedStatement.executeQuery();\n\n            String stageFileName = objectName.toLowerCase() + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\");\n            //copy table data into staging table file\n            String copyManagerQuery = \"copy into @\" + tempStageName + \"/\" + stageFileName +\n                    \" from (\" + selectQuery + \") \" +\n                    \"file_format = (type = 'JSON' NULL_IF = ('\\\\N', 'NULL', 'NUL', '') strip_outer_array = true STRIP_NULL_VALUES = TRUE DATE_FORMAT = 'YYYY-MM-DD'  \" +\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe34f895-3427-4651-8e6b-c0f785d970e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":80,"endLine":115,"content":"> keys = jsonObject.keys();\n            while (keys.hasNext()) {\n                String key = keys.next();\n                masterLookUpMap.put(key, jsonObject.optString(key));\n            }\n            LOGGER.info(\"Returning masterLookUpMap from cache\");\n            return masterLookUpMap;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in getting values from config server {}\", e.getMessage(), e);\n        }\n        LOGGER.info(\"Populating from temporary map\");\n        Map<String, String> tempMap = Maps.newHashMap();\n        tempMap.put(\"contacts@@accountid\", \"parentcustomerid_account\");\n        tempMap.put(\"contracts@@accountid\", \"customerid_account\");\n        tempMap.put(\"contracts@@contactid\", \"customerid_contact\");\n        tempMap.put(\"incidents@@accountid\", \"customerid_account\");\n        tempMap.put(\"salesorders@@accountid\", \"customerid_account\");\n        tempMap.put(\"opportunities@@accountid\", \"customerid_account\");\n        return tempMap;\n    }\n\n    public static boolean parseBoolean(Object value) {\n        boolean booleanValue = false;\n        if (value != null) {\n            booleanValue = Boolean.valueOf(valueOf(value));\n        }\n        return booleanValue;\n    }\n\n    public static String valueOf(Object object) {\n        return object == null ? null : String.valueOf(object);\n    }\n\n    public static Integer parseToInteger(String data) {\n        if (StringUtils.isBlank(data) || StringUtils.equalsIgnoreCase(data, NULL)) {\n            return null;\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"593e638a-6b19-423b-8117-4ae2ae032c26","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Relationship.java","startLine":85,"endLine":102,"content":"customRelationship;\n    }\n\n    @Override\n    public String toString() {\n        return \"Relationship{\" +\n                \"referencingAttribute='\" + referencingAttribute + '\\'' +\n                \", referencingEntity='\" + referencingEntity + '\\'' +\n                \", referencedAttribute='\" + referencedAttribute + '\\'' +\n                \", referencedEntity='\" + referencedEntity + '\\'' +\n                \", referencedEntityNavigationPropertyName='\" + referencedEntityNavigationPropertyName + '\\'' +\n                \", referencingEntityNavigationPropertyName='\" + referencingEntityNavigationPropertyName + '\\'' +\n                \", isCustomRelationship=\" + isCustomRelationship +\n                \", schemaName='\" + schemaName + '\\'' +\n                \", relationshipType=\" + relationshipType +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77566bde-6b85-4856-ae0f-2ebf8b6b7f87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":235,"endLine":259,"content":"      this.connection = createConnection(connectionUrl, prop);\n        } catch (Exception ex) {\n            LOGGER.error(\"Failed to connect to Databricks due to : {}\", ex.getMessage(), ex);\n            throw new SystemException(String.format(\"Failed to connect to Databricks due to %s\", ex.getMessage()));\n        } finally {\n            FileUtils.deleteQuietly(trustStoreFile);\n            FileUtils.deleteQuietly(keyStoreFile);\n        }\n    }\n\n    public GainsightDatabricksChannelServiceImpl(Map properties, boolean isValueEncrypted, AuthorizationType authorizationType,\n                                                 String mtlsCertificatePath,String mtlsCertificatePassword,String mtlsBucketName,String accessKeyId,String accessSecret,String region) {\n        File keyStoreFile = null;\n        try {\n            this.schema = properties.get(UCConstants.GSIntegration.SCHEMA_NAME).toString();\n            this.db = properties.get(UCConstants.GSIntegration.DATABASE_NAME).toString();\n\n            Properties prop = new Properties();\n            switch (authorizationType) {\n                case ACCESS_KEY:\n                    this.accessToken = (isValueEncrypted ? CryptHandler.getInstance().decrypt((byte[]) properties.get(GSIntegration.ACCESS_TOKEN)) :\n                            properties.get(UCConstants.GSIntegration.ACCESS_TOKEN).toString());\n                    prop.put(AUTH_MECH, \"11\");\n                    prop.put(AUTH_FLOW, \"0\");\n                    prop.put(AUTH_ACCESS_TOKEN, a","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dd1cc105-43ab-4d4e-808c-b3ddf4d337ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomFetchService.java","startLine":1,"endLine":18,"content":"package com.gainsight.integration.connector.zoom.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightZoomFetchService {\n\n    HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String url) throws Exception;\n\n    InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId,\n                                             String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api) throws Exception;\n\n    Map<String, Object> getZoomAccountDetails(String clientId, String clientSecret, String refreshToken, String accessToken);\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd781021-b4a8-4c68-867b-f839fbeae733","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":425,"endLine":449,"content":"ata to stage table\n      if (null != header) {\n        absolutePathToTempStageTable = createAndLoadDataToStageTable(bulkLoadResult, targetObject, columnMappings,\n                colNameToDataType, batchSize, header, failureFiles, successFiles, csvReader);\n      } else {\n        log.error(\"[SAP DATASPHERE] No data found in the input file\");\n        throw new Exception(\"No data found in the input file\");\n      }\n\n      if (null != bulkLoadResult.get(TOTAL_RECORDS) && Integer.parseInt(bulkLoadResult.get(TOTAL_RECORDS).toString()) != 0) {\n        //Perform merge operation to target table based on ductDataOperation\n        PreparedStatement mergeStatement = mergeDataToTargetTable(ductDataOperation, absolutePathToTargetTable, absolutePathToTempStageTable, columnMappings);\n        try {\n          mergeStatement.execute();\n          long rowsAffected = mergeStatement.getUpdateCount();\n          log.info(\"rowsAffected: {}\", rowsAffected);\n          bulkLoadResult.put(UCConstants.RECORDS_AFFECTED, rowsAffected);\n        } catch (Exception ex) {\n          log.error(\"[SAP DATASPHERE] Exception while loading bulk data: {}...\", ex.getMessage(), ex);\n          //If merge operation fails, then all records are marked failed. Hence, clearing the failureFiles list\n          if(null != failureFiles && !failureFiles.isEmpty()) {\n            failureFiles.forEach(failureFile -> FileUtils.deleteQuietly(failureFile));\n            failureFiles.clear();\n          }\n          if(null != successFiles && ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fd9922af-bd57-4652-b712-593a0c58e817","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":104,"endLine":135,"content":"piPath;\n    private String latestMetaDataApiPath;\n\n    private String writeDataApiPath;\n\n    private String writeDataObjectName;\n\n    GSHubSpotEntityEnum(String label, String legacyDataApiPath, String sinceDataApiPath, String legacyMetaDataApiPath, String queryOffset, String retrieveOffset,\n                        String lastModifiedKeyWord, String hasMoreKeyWord, String pluralName, String queryProjectionKeyWord, String latestDataApiPath,\n                        String latestMetaDataApiPath, String writeDataApiPath, String writeDataObjectName) {\n        this.legacyDataApiPath = legacyDataApiPath;\n        this.sinceDataApiPath = sinceDataApiPath;\n        this.legacyMetaDataApiPath = legacyMetaDataApiPath;\n        this.label = label;\n        this.queryOffset = queryOffset;\n        this.retrieveOffset = retrieveOffset;\n        this.lastModifiedKeyWord = lastModifiedKeyWord;\n        this.hasMoreKeyWord = hasMoreKeyWord;\n        this.pluralName = pluralName;\n        this.queryProjectionKeyWord = queryProjectionKeyWord;\n        this.latestDataApiPath = latestDataApiPath;\n        this.latestMetaDataApiPath = latestMetaDataApiPath;\n        this.writeDataApiPath = writeDataApiPath;\n        this.writeDataObjectName = writeDataObjectName;\n    }\n\n    public static String getDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.legacyDataApiPath;\n    }\n\n    public static String getLegacyDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.legacyDataApi","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e064c0a-46fa-46e7-b102-8e52a1f4488e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditDetails.java","startLine":1,"endLine":47,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.audit;\n\nimport com.gainsight.integration.bean.enums.audit.AttributeAuditType;\nimport com.gainsight.integration.bean.enums.audit.AuditOperationType;\nimport com.gainsight.integration.bean.enums.audit.SubAttributeAuditType;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.codehaus.jackson.annotate.JsonProperty;\n\nimport java.io.Serializable;\n\n/**\n * This class represents the Audit changes made to Entity in Unified Connector.\n * For example, {@code JobInfo}, {@code JobMappingInfo}, {@code PNPConnectionsInfo}.\n * In case of CREATE and DELETE operation (@code AuditOperationType}, the oldValue\n * and newValue fields will be not be present and only in case of UPDATE operation\n * (@code AuditOperationType}, these fields will be present.\n * Created by vgautam on 15/11/16.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AuditDetails implements Serializable {\n\n  private static final long serialVersionUID = -1L;\n\n  @JsonProperty(\"attributeType\")\n  private AttributeAuditType attributeType;\n\n  @JsonProperty(\"subAttributeType\")\n  private SubAttributeAuditType subAttributeType;\n\n  @JsonProperty(\"oldValue\")\n  private String oldValue;\n\n  @JsonProperty(\"newValue\")\n  private String newValue;\n\n  @JsonProperty(\"operationType\")\n  private AuditOperationType operationType;\n\n  @JsonProperty(\"additionalInfo\")\n  private String additionalInfo;\n\n  /**\n   * @return {@code Attribu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2467865c-8f7e-4cb6-9f3e-379094826522","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelFactory.java","startLine":34,"endLine":55,"content":"                                                                                      String refreshToken,\n                                                                                      String accessToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[ZOOM] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[ZOOM] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[ZOOM] Refresh token cannot be null\");\n        if(StringUtils.isBlank(accessToken)){\n            Map<String, Object> accessTokenMap = getAccessToken(clientId, clientSecret, refreshToken);\n            accessToken = (String)accessTokenMap.get(\"access_token\");\n        }\n        return new GainsightZoomChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public GainsightZoomChannelService getChannelServiceWithOAuth20(String clientId, String clientSecret, String refreshToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[ZOOM] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[ZOOM] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[ZOOM] Refresh token cannot be null\");\n        Map<String, Object> accessTokenMap = getAccessToken(clientId, clientSecret, refreshToken);\n        String accessToken = (String)accessTokenMap.get(\"access_token\");\n        return new GainsightZoomChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public Ma","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a696d770-7b21-47f5-9240-cea2cf36cc2f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":33,"endLine":64,"content":"rval = gatewayTimeoutRetryDelay;\n        do {\n            try {\n                String queryParamsString = buildQueryParams(queryParams);\n                if (queryParamsString != null) {\n                    if (requestURL.contains(\"?\")) {\n                        requestURL = requestURL + \"&\" + queryParamsString;\n                    } else {\n                        requestURL = requestURL + \"?\" + queryParamsString;\n                    }\n                }\n                URL url = new URL(requestURL);\n                httpConn = (HttpURLConnection) url.openConnection();\n                httpConn.setConnectTimeout(timeout);\n                httpConn.setReadTimeout(timeout);\n                httpConn.setRequestMethod(\"GET\");\n                addHeaders(httpConn, headers);\n                InputStream is = null;\n                if (httpConn != null) {\n                    is = httpConn.getInputStream();\n                } else {\n                    throw new IOException(\"Connection is not established.\");\n                }\n                resp.setResponseIs(is, isResourceDownloadRequest);\n                resp.setResponseCode(httpConn.getResponseCode());\n                resp.setResponseHeaders(httpConn.getHeaderFields());\n                return  resp;\n            } catch (IOException e) {\n                LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n                try {\n                    InputStream es = null;\n                    if (null != httpConn.getE","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"659162d9-ea1d-4e4b-81b5-67a0a9004f35","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":114,"endLine":145,"content":"t;\n        this.refreshToken = refreshToken;\n        this.accessToken = accessToken;\n        this.authenticationType = AuthenticationType.OAUTH2;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        httpPatch.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n\n    }\n\n    public GainsightHubspotChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String accessToken, int timeout) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.refreshToken = refreshToken;\n        this.accessToken = accessToken;\n        this.authenticationType = AuthenticationType.OAUTH2;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(timeout * 1000)\n                .setConnectionRequestTimeout(timeout * 1000)\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f880083-2204-4add-b7fa-bedfd9d706bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":629,"endLine":650,"content":"     valueToLabelMap.put((Integer) option.getValue(), option.getLabel());\n                }\n                optionSetMap.put(gsFieldDefinition.getFieldName(), valueToLabelMap);\n            }\n        }\n        return optionSetMap;\n    }\n\n    private void extractLookUpValue(Set<String> expandGroup, ClientEntity ce, Map<String, Object> record, Map<String, Set<String>> modifiedProjectionToOriginalProjections,\n                                    boolean isPrimitiveDateTimeConversionRequired, List<String> multiPicklistColumns) {\n        List<String[]> expandGroupSplitted = expandGroup.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        List<String> lookUpFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[0]).collect(Collectors.toList());\n        List<String> lookUpObjectFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[1]).collect(Collectors.toList());\n        List<ClientLink> clientLinks = ce.getNavigationLinks();\n        for (ClientLink clientLink : clientLinks) {\n            if (!lookUpFieldNames.contains(clientLink.getName())) {\n                continue;\n            }\n            ClientEntity clientEntity = null;\n            if (clientLink.asInlineEntity() != null && clientLink.asInlineEntity().getEntity() != null) {\n                clientEntity = clientLink.asInlineEntity().getEntity();\n            } else if (clientLink.asInlineEntitySet() != null && clientLink.asInlineEntitySet().getEntitySet() != null && CollectionUtil","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8333cee4-4807-4873-9393-710b344b7bc5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":56,"endLine":77,"content":"@autowired will not work if the call comes from external jar (main() method)\n         Hence manually controlling dependency.*/\n    public void setMsDynamicsSchemaService(MSDynamicsSchemaService msDynamicsSchemaService) {\n        this.msDynamicsSchemaService = msDynamicsSchemaService;\n    }\n\n    @Override\n    public RecordsResponse getPaginatedRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration,\n                                               ObjectDefinition objectDefinition, String nextPageToken, Integer pageSize, boolean resolvePicklistOptions,\n                                               PNPConnectionsInfo pnpConnectionsInfo, boolean separateLineItemForLookups,\n                                               boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings) {\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), getRecordsRequest.getPluralName());\n        Map<String, ObjectDefinition> objectDefinitionMap = new HashMap<>();\n        objectDefinitionMap.put(objectDefinition.getDbName(), objectDefinition);\n\n        Map<String, Map<Integer, String>> optionSetMap = new HashMap<>();\n        List<String> multiPicklistColumns = new ArrayList<>();\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(objectDefinition, getRecordsRequest.getProjections());\n        } else {\n            multiP","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9511d143-bd99-4fc2-be3c-5d67a2b44637","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelFactory.java","startLine":48,"endLine":77,"content":"ken\");\n        return new GainsightMSTeamsChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public Map getAccessToken(String clientId, String clientSecret, String refreshToken) throws Exception {\n        Map<String, Object> accountMap = new HashMap<>();\n        try{\n            CloseableHttpClient httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new HttpPost(\"https://login.microsoftonline.com/common/oauth2/v2.0/token\");\n\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            List<NameValuePair> params = new ArrayList<>(4);\n            params.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n            params.add(new BasicNameValuePair(\"refresh_token\", refreshToken));\n            params.add(new BasicNameValuePair(\"client_id\", clientId));\n            params.add(new BasicNameValuePair(\"client_secret\", clientSecret));\n\n            httpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\n            HttpResponse response = httpclient.execute(httpPost);\n            HttpEntity entity = response.getEntity();\n\n            String jsonResponse;\n\n            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK){\n                if(entity != null){\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jso","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ea39e47-868c-4a4f-9d13-cd2dbc04443d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Column.java","startLine":56,"endLine":122,"content":"\n        this.defaultValue = defaultValue;\n    }\n\n    public Integer getMaxLength() {\n        return maxLength;\n    }\n\n    public void setMaxLength(Integer maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    public ExternalDataType getExternalType() {\n        return externalType;\n    }\n\n    public void setExternalType(ExternalDataType externalType) {\n        this.externalType = externalType;\n    }\n\n    public String getLocalType() {\n        return localType;\n    }\n\n    public void setLocalType(String localType) {\n        this.localType = localType;\n    }\n\n    public String getLogicalName() {\n        return logicalName;\n    }\n\n    public void setLogicalName(String logicalName) {\n        this.logicalName = logicalName;\n    }\n\n    public String getTargetObject() {\n        return targetObject;\n    }\n\n    public void setTargetObject(String targetObject) {\n        this.targetObject = targetObject;\n    }\n\n    public Map<String, Object> getProperties() {\n        return properties;\n    }\n\n    public void setProperties(Map<String, Object> properties) {\n        this.properties = properties;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    @Override\n    public String toString() {\n        return \"Column{\" +\n                \"id='\" + id + '\\'' +\n                \", fieldName='\" + fieldName + '\\'' +\n                \", logicalName='\" + logicalName + '\\'' +\n                \", displayName='\" + displayName + '","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"24e11561-a48b-44e9-9f68-93527781efa4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":484,"endLine":515,"content":"ption(\"Auth Type not present\");\n    authDetails = authDetailsOp.get();\n\n    Map<String, String> queryParams = new HashMap<>();\n    if (authDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : authDetails.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n    if (metadataApiConfigAttributes.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : metadataApiConfigAttributes.getQueryParamDetails()) {\n        Object value = constructValueFromCriteria(queryParamDetail, criteria, paginationInfo);\n        if (value == null) {\n          LOGGER.info(\"No Value generated from criteria\");\n          continue;\n        }\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n    if (!ObjectUtils.isEmpty(queryParam))\n      queryParams.putAll(queryParam);\n\n    StringEntity stringEntity = null;\n        if (metadataApiConfigAttributes.getBodyParamDetails() != null) {\n      JSONObject concatenatedEntities = new JSONObject();\n            for (AuthApiAttributes bodyDetail :metadataApiConfigAttributes.getBodyParamDetails()) {\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a04f6dd9-7f11-4a77-81b6-a4bc7109a9ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":370,"endLine":399,"content":"    List<String> filePaths = new ArrayList<>();\n            while (resultSet.next()) {\n                filePaths.add(resultSet.getString(\"name\").replace(tempStageName, System.getProperty(\"user.dir\") + \"/stagingFile\"));\n            }\n            LOGGER.info(\"Total of {} files got created\", filePaths.size());\n            if (CollectionUtils.isNotEmpty(filePaths)) {\n                for (String eachFilePath : filePaths) {\n                    LOGGER.info(\"Extracted file path : {}\", eachFilePath);\n                    dataFiles.add(new File(eachFilePath));\n                }\n            } else {\n                LOGGER.error(\"copyManager did not yield any result with multipart execution.\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in copyManager : {}\", e);\n            try {\n                return fallBackResult(selectQuery,fieldInfos,objectName,filter,ntz_fields,ntz_map,limit,fetchSize);\n            } catch (SQLException ex) {\n                LOGGER.error(\"error occured while snowflake fetch using pagination {}\",ex);\n                throw new RuntimeException(ex);\n            }\n        } finally {\n            if (this.connection != null) {\n                try {\n                    this.connection.prepareStatement(\"drop stage if exists \" + tempStageName).executeQuery();\n                } catch (SQLException se) {\n                    LOGGER.error(\"Sql Exception while dropping temp stage. Ignoring..\", se);\n                }\n            }\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"53d3416e-6ebc-4a09-ad76-0581fc362a4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/IPaasConstants.java","startLine":47,"endLine":69,"content":"blic static final String IPAAS_EXTRACT_TASK_DETAILS = \"ipaasExtractDetails\";\n    public static final String EXTERNAL_OBJECT_NAME = \"EXTERNAL_OBJECT_NAME\";\n    public static final String WORKFLOW_DETAILS = \"workflowDetails\";\n    public static final String CREATE_STAGING_SQL_TASK = \"CREATE_STAGING_SQL_TASK\";\n    public static final String APPLY_LAST_MODIFIED_FILTER = \"APPLY_LAST_MODIFIED_FILTER\";\n    public static final String META = \"meta\";\n    public static final String IS_PRIMARY_KEY = \"isPrimaryKey\";\n    public static final String IS_HIDDEN = \"isHidden\";\n    public static final String IS_LAST_MODIFIED_FIELD= \"isLastModifiedField\";\n    public static final String IS_PICKLIST_FIELD = \"isPicklistField\";\n    public static final String IS_CURRENCY_FIELD = \"isCurrencyField\";\n    public static final String CURRENCY_FIELD = \"__CURRENCY_FIELD_VALUE\";\n    public static final String IS_PRIMARY_OBJECT = \"isPrimaryObject\";\n    public static final String FILTERABLE_IN_INTERNAL_SYSTEM = \"filterableInInternalSystem\";\n    public static final String FILTERABLE_IN_EXTERNAL_SYSTEM = \"filterableInExternalSystem\";\n    public static final String LABEL = \"label\";\n    public static final String DATA_TYPE = \"dataType\";\n    public static final String OBJECT_LABEL = \"objectLabel\";\n    public static final String REAL_TIME_SUPPORTED = \"realtimeSupported\";\n    public static final String PATH = \"path\";\n    public static final String MASK = \"mask\";\n    public static final String VERSION = \"version\";\n    pub","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"22d17ad5-005b-4873-9936-4a875aa2271f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":334,"endLine":354,"content":"onSet\");\n        uri = uriBuilder.build();\n        clientEntityRequest = client.getRetrieveRequestFactory().getEntityRequest(uri);\n        clientEntityResponse = clientEntityRequest.execute();\n        clientEntity = clientEntityResponse.getBody();\n        ClientLink clientLink = clientEntity.getNavigationLink(\"OptionSet\");\n        ClientInlineEntity clientInlineEntity = clientLink.asInlineEntity();\n        ClientEntity inlineClientEntity = clientInlineEntity.getEntity();\n        return parseOptionSet(inlineClientEntity);\n    }\n\n    @Override\n    public List<Relationship> listRelationships(String objectLogicalName, RelationshipType relationshipType) {\n        GainsightPrecondition.isNotBlank(objectLogicalName, DynamicsErrorCode.PNP_DYNAMICS_OBJECT_LOGICAL_NAME_MISSING, HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.assertNotNull(relationshipType, DynamicsErrorCode.PNP_DYNAMICS_RELATIONSHIP_TYPE_MISSING, HttpStatus.SC_BAD_REQUEST);\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        String relativePath = String.format(\"/EntityDefinitions(LogicalName='%s')/%ss\", objectLogicalName, relationshipType.getName());\n        URIBuilder uriBuilder = client.newURIBuilder(MSDynamicsContext.getApiUrl() + relativePath);\n        URI uri = uriBuilder.build();\n        ODataEntitySetRequest<ClientEntitySet> clientEntitySetRequest = client.getRetrieveRequestFactory().getEntitySetRequest(uri);\n        ODataRetrieveResponse<ClientEntitySet> oDataRetrieveResponse =","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5362b22f-338d-452d-a2a8-11b2cd0ec02c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":629,"endLine":659,"content":"oString());\n            }\n            this.httpGet.setURI(uriBuilder.build());\n            this.httpGet.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n            HttpResponse response = null;\n            response = this.httpclient.execute(httpGet);\n            if (response.getStatusLine().getStatusCode() == 200) {\n                String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n                jobCompleted = ((Map) responseMap.get(\"status\")).get(\"state\").equals(\"DONE\");\n                if (!jobCompleted) {\n                    if (((Map) responseMap.get(\"status\")).get(\"state\").equals(\"FAILED\"))\n                        return false;\n                    ++checkCounter;\n                    Thread.sleep((4 * 1000));\n                }\n            } else {\n                LOGGER.error(\"Error occurred while trying to check status of BQ job : {} , retryCounter: {}\", jobId, retryCounter);\n                if (retryCounter >= ALLOWED_RETRIES) {\n                    throw new Exception(String.format(\"Error occured while trying to check status BQ job, \" + \"exhausted maximum number of retries %s\", retryCounter));\n                }\n                ++retryCounter;\n            }\n            this.httpclient.close();\n            this.httpclient = HttpClients.createDefault();\n        }\n        return jobCompleted;\n    }\n\n\n    private static List<String> buildRule(FilterRule ru","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1230af90-9357-4f6e-baca-5d6797b30267","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditRecord.java","startLine":192,"endLine":263,"content":"ing tenantId) {\n    this.tenantId = tenantId;\n  }\n\n  /**\n   * @return systemTags associated with Audit Event\n   */\n  public List<String> getSystemTags() {\n    return systemTags;\n  }\n\n  /**\n   * @param systemTags\n   */\n  public void setSystemTags(List<String> systemTags) {\n    this.systemTags = systemTags;\n  }\n\n  /**\n   * @return requestSource\n   */\n  public String getRequestSource() {\n    return requestSource;\n  }\n\n  /**\n   * @param requestSource source of the request\n   */\n  public void setRequestSource(String requestSource) {\n    this.requestSource = requestSource;\n  }\n\n  /**\n   * @return data\n   */\n  public AuditData getData() {\n    return data;\n  }\n\n  /**\n   * @param data resource which is affected by event\n   */\n  public void setData(AuditData data) {\n    this.data = data;\n  }\n\n  /**\n   * @return properties\n   */\n  public AuditProperties getProperties() {\n    return properties;\n  }\n\n  /**\n   * @param properties the placeholder fro putting additional\n   *                   information for event.\n   */\n  public void setProperties(AuditProperties properties) {\n    this.properties = properties;\n  }\n\n  @Override\n  public String toString() {\n    return \"AuditRecord{\" +\n        \"systemId='\" + systemId + '\\'' +\n        \", systemTimestamp='\" + systemTimestamp + '\\'' +\n        \", generatedBy='\" + generatedBy + '\\'' +\n        \", eventName='\" + eventName + '\\'' +\n        \", eventType=\" + eventType +\n        \", eventStatus=\" + eventStatus +\n        \", userId='\" + userId + '\\'' +\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d694d198-1517-49de-8747-23df1f08f583","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineService.java","startLine":1,"endLine":17,"content":"package com.gainsight.integration.service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.integration.bean.metadata.engine.RateLimitDetails;\nimport org.apache.http.client.methods.HttpRequestBase;\n\npublic interface MetadataEngineService {\n\n    JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails) throws Exception;\n\n    JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, int timeout) throws Exception;\n\n    JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, Boolean isXmlFormat) throws Exception;\n\n    JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, int timeout, Boolean isXmlFormat) throws Exception;\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16111d09-e131-4f07-a115-200f86809b2f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":173,"endLine":202,"content":"keDriver.connect(connectionUrl, properties);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occured while creating jdbc connection\",ex);\n            String errorMsg = String.format(\"Failed to connect to Snowflake due to %s\", ex.getMessage());\n            SystemException systemException = new SystemException(errorMsg, ex);\n            systemException.setUiMessage(errorMsg);\n            throw systemException;\n        }\n\n        return connection;\n    }\n\n    private List<Map<String, Object>> executeWithMapListHandler(PreparedStatement preparedStatement) {\n        try {\n            ResultSet resultSet = preparedStatement.executeQuery();\n            return new MapListHandler().handle(resultSet);\n        } catch (SQLException sqlException) {\n            throw new SystemException(\"Failed to connect to Snowflake due to {}\", sqlException);\n        }\n    }\n\n    @Override\n    public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException {\n        Statement stat;\n        DateTimeFormatter defaultSrcFormatter =\n                new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\")\n                        .appendFraction(ChronoField.MILLI_OF_SECOND, 0, 9, true)\n                        .toFormatter();\n        List<Map<String, Object>> recordValues = Lists.newArrayList();\n        Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getJsonPath, field -> field))","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c4508f2-b217-4cda-b9d5-647559173928","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/bean/GainsightZoomEntityDescription.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.zoom.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightZoomEntityDescription {\n    private String entityName;\n    private String entityId;\n    private List<GainsightZoomFieldDescription> gainsightZoomFieldDescriptions;\n\n    public GainsightZoomEntityDescription(String entityName, List<GainsightZoomFieldDescription> gainsightZoomFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightZoomFieldDescriptions = gainsightZoomFieldDescriptions;\n    }\n\n    public String getEntityName() { return entityName; }\n\n    public void setEntityName(String entityName) { this.entityName = entityName; }\n\n    public String getEntityId() { return entityId; }\n\n    public void setEntityId(String entityId) { this.entityId = entityId; }\n\n    public List<GainsightZoomFieldDescription> getGainsightZoomFieldDescriptions() { return gainsightZoomFieldDescriptions; }\n\n    public void setGainsightZoomFieldDescriptions(List<GainsightZoomFieldDescription> gainsightZoomFieldDescriptions) { this.gainsightZoomFieldDescriptions = gainsightZoomFieldDescriptions; }\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b51692ab-86e1-4bf2-bc24-5f4721fed1e1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":129,"endLine":164,"content":"ate String applyRecordSeparatorPolicy(String line) throws IOException {\n        String record = line;\n        while (line != null && !recordSeparatorPolicy.isEndOfRecord(record)) {\n            if (Thread.currentThread().isInterrupted()) {\n                LOGGER.error(\"Received interrupt signal. Aborting reading records from file !!\");\n                throw new InterruptedIOException(\"Received interrupt signal. Aborting reading records from file !!\");\n            }\n\n            line = this.bufferedReader.readLine();\n            if (line == null) {\n                if (StringUtils.hasText(record)) {\n                    // A record was partially complete since it hasn't ended but\n                    // the line is null\n                    throw new IOException(\"Unexpected end of file before record was completed\");\n                } else {\n                    // Record has no text but it might still be post processed\n                    // to something (skipping preProcess since that was already\n                    // done)\n                    break;\n                }\n            }\n            record = recordSeparatorPolicy.preProcess(record) + line;\n        }\n\n        return recordSeparatorPolicy.postProcess(record);\n\n    }\n\n    /**\n     * Overridable method to validate each line that is returned.\n     * This implementation always returns true.\n     *\n     * @param line the line that is to be validated\n     * @return true if valid, false to remove from the iterator\n     */\n    pr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1eddc34-3e2a-4df3-b175-a39ce1144820","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":513,"endLine":534,"content":"ing ATTRIBUTE_1__C = \"Attribute1__c\";\n        public static final String DISPLAY_ORDER__C = \"DisplayOrder__c\";\n        public static final String SYSTEM_DEFINED__C = \"SystemDefined__c\";\n        public static final String ID = \"Id\";\n        public static final String NAME = \"Name\";\n        public static final String JBCXM = \"JBCXM\";\n        public static final String JBCXM__ = \"JBCXM__\";\n        public static final String COMPANY_IDENTIFIER = \"CompanyIdentifier\";\n        public static final String COMPANY_PERSON_IDENTIFIER = \"CompanyPersonIdentifier\";\n        public static final String USER_IDENTIFIER = \"UserIdentifier\";\n        public static final String AVATAR_COLLECTION_ID = \"AvatarCollectionId\";\n        public static final String CHILD_REFERENCES = \"CHILD_REFERENCES\";\n        public static final String RELATIONSHIP_NAME = \"relationshipName\";\n        public static final String GAINSIGHT_PX_LAST_MODIFIED_DATE_FIELD = \"lastModifiedDate\";\n        public static final String GAINSIGHT_PX_FILTER = \"filter=\";\n        public static final String GAINSIGHT_PX_PAGE_SIZE = \"?pageSize=10000\";\n        public static final String GAINSIGHT_PX_ACCOUNT = \"account\";\n        public static final String GAINSIGHT_PX_USER = \"user\";\n        public static final String GAINSIGHT_PX_SUBSCRIPTION = \"subscription\";\n        public static final String GAINSIGHT_PX_SCROLL_ID = \"scrollId\";\n        public static final String GAINSIGHT_PX_TOTAL_HITS = \"totalHits\";\n        public static final String GAINSIGHT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86172633-8b2d-4a87-92d1-78a5a29971cc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelService.java","startLine":1,"endLine":15,"content":"package com.gainsight.integration.connector.zoom.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightZoomChannelService {\n    HttpResponse searchData(String url) throws Exception;\n\n    InputStream getPaginatedEntityData(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception;\n\n    Map<String, Object> getZoomAccountDetails() throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ee92001-e77a-4be1-b8f2-80fe3898f3e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":92,"endLine":108,"content":"lProjections = Maps.newHashMap();\n        Map<String, String> modifiedExpandToOriginalFieldName = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_SELECT))) {\n            for (String projections : selectAndExpandGroup.get(PROJECTION_SELECT)) {\n                String projection = projections.split(\"\\\\.\")[0];\n                String propertyValue = masterLookUpConfiguration.get(objectDefinition.getLabelPlural() + \"@@\" + projection);\n                if (Objects.nonNull(propertyValue)) {\n                    String newSelectProjection = propertyValue + \".\" + projection;\n                    expandGroup.add(newSelectProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newSelectProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projections);\n                } else if (logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.LOOKUP.getValue())\n                        || logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.CUSTOMER.getValue())\n                        || logicalNameToExternalType.get(projections).equalsIgnoreCase(ExternalDataType.OWNER.getValue())) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"49817e5e-4957-4fc3-a022-9a8613f654c0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":80,"endLine":106,"content":"eadTree(content);\n                            JsonNode jsonNode1;\n                            if (!StringUtil.isEmpty(responseRootKey))\n                                jsonNode1 = jsonNode.get(responseRootKey);\n                            else\n                                jsonNode1 = jsonNode;\n                            return jsonNode1;\n                        }\n                    case 204:\n                        LOGGER.info(\"Request successful, no content returned.\");\n                        return null;\n                    case 400:\n                    case 401:\n                    case 403:\n                    case 404:\n                        content = httpResponse.getEntity().getContent();\n                        if(content.available()>0){\n                            JsonNode contentJson = MAPPER.readTree(content);\n                            LOGGER.info(\"External System response : {}\", contentJson.toString());\n                            throw new Exception(MAPPER.writeValueAsString(contentJson));\n                        }\n                        throw new Exception(\"Received 400 status code from External System. Please check the request\");\n                    case 429:\n                        if (Location.HEADER.equals(rateLimitDetails.getKeyLocation())) {\n                            Header firstHeader = httpResponse.getFirstHeader(rateLimitDetails.getKey());\n                            int waitSec = Integer.parseInt(firstHeader.getValue());\n                    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c06d648-2a61-4694-bd87-ff67520f0eee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":550,"endLine":573,"content":"           lookupObjectPrimaryKeys.add(relationshipOptional.get().getReferencingEntityNavigationPropertyName() + \".\" + primaryGSFieldDefinitionOptional.get().getFieldName().split(\"\\\\.\")[0]);\n                    } else {\n                        lookupObjectPrimaryKeys.add(gsFieldDefinition.getFieldName() + \".\" + primaryGSFieldDefinitionOptional.get().getFieldName().split(\"\\\\.\")[0]);\n                    }\n                }\n            }\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                LOGGER.error(\"Thread interrupted...\", e);\n            }\n        }\n        return lookupObjectPrimaryKeys;\n    }\n\n    private void generateRecords(RecordResponseGenerator recordResponseGenerator, ClientEntitySet clientEntitySet, Set<String> expandGroup,\n                                 Map<String, Map<Integer, String>> optionSetMap, Map<String, Set<String>> modifiedProjectionToOriginalProjections,\n                                 boolean isPrimitiveDateTimeConversionRequired, List<String> multiPicklistColumns) {\n        List<ClientEntity> clientEntityList = clientEntitySet.getEntities();\n        for (ClientEntity clientEntity : clientEntityList) {\n            Map<String, Object> record = Maps.newHashMap();\n            for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                Object value = extractValue(clientProperty, optionSetMap, isPrimitiveDateTimeConversionRequired);\n                if (modifiedProjec","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7bbbc26-6665-41ec-bd4e-d7b67056cdf8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceFetchServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.sfdc.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.account.SalesforceToken;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.integration.utils.SFDCExceptionUtility;\nimport com.gainsight.integration.utils.SfdcTokenUtil;\nimport com.google.common.collect.Maps;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class SalesforceFetchServiceImpl implements SalesforceFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SalesforceFetchServiceImpl.class);\n\n    private static final String SALESFORCE_API_VERSION = \"v%s\";\n    public static final String CHARSET = \"UTF-8\";\n    private static final String SALESFORCE_SERVICES_DATA = \"/services/data/\";\n    private static final String SALESFORCE_SOQL_QUERY = \"/query?q=%s\";\n    private final ObjectMapper mapper = new ObjectMapper();\n\n    private static final SfdcTokenUtil sfdcTokenUtil = new SfdcTokenUtil();\n\n    private static final HttpUrlConnectionUtils httpUrlConnec","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5ba5230-fe38-4371-b0cb-4c2c38419ca4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataGenerationDetails.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.metadata.engine.MetadataJobStatus;\nimport lombok.*;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Document(collection = \"caas_metadata_generation_details\")\n@CompoundIndexes({@CompoundIndex(\n        name = \"tid_jid_index\",\n        def = \"{'tenantId' : 1, 'jobId' : 1}\",\n        unique = true\n)})\n@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\n@Getter\n@Setter\n@Builder\n@AllArgsConstructor\n@EqualsAndHashCode(callSuper = true)\npublic class MetadataGenerationDetails extends MongoBaseBean implements Serializable {\n\n    private static final long serialVersionUID = -1L;\n    public static final String JOB_ID_PROP = \"jobId\";\n    public static final String CONNECTION_ID_PROP = \"connectionId\";\n    public static final String OBJECT_NAME_PROP = \"objectName\";\n\n    public MetadataGenerationDetails() {\n    }\n\n    private String jobId;\n    private String tenantId;\n    private String conn","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4371a2cd-417a-457b-bce9-8250234288d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsFetchService.java","startLine":1,"endLine":18,"content":"package com.gainsight.integration.connector.msteams.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightMSTeamsFetchService {\n    HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String url) throws Exception;\n\n    InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId,\n                                             String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api) throws Exception;\n\n    Map<String, Object> getMSTeamsOrganizationDetails(String clientId, String clientSecret, String refreshToken, String accessToken);\n\n    Map<String, Object> getMSTeamsUserDetails(String clientId, String clientSecret, String refreshToken, String accessToken);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4cf22b4b-f06e-4711-8a0d-4752364f5789","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":1,"endLine":28,"content":"package com.gainsight.integration.auth;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.TextNode;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.date.TimeZoneUtils;\nimport com.gainsight.duct.dao.PNPConnectionInfoDao;\nimport com.gainsight.duct.utils.DataHighwayUtils;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.metadata.engine.AuthType;\nimport com.gainsight.integration.bean.enums.metadata.engine.BodyFormat;\nimport com.gainsight.integration.bean.enums.metadata.engine.ExpireUnit;\nimport com.gainsight.integration.bean.enums.metadata.engine.ResponseType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.bean.metadata.engine.*;\nimport com.gainsight.integration.service.MetadataEngineService;\nimport com.gainsight.integration.service.MetadataEngineServiceImpl;\nimport com.gainsight.integration.utils.CommonUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightUtils;\nimport com.gainsight.utils.ObjectUtil;\nimport com.google.gson.Gson;\nim","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12266411-a075-46af-a521-5911c027e8e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":628,"endLine":661,"content":");\n\n            HttpPost post = new HttpPost();\n            post.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n            String boundary = \"--\" + UUID.randomUUID();\n            post.addHeader(CONTENT_TYPE, MULTIPART_FORM_DATA.getMimeType() + \"; boundary=\" + boundary);\n            post.setURI(uriBuilder.build());\n\n            MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n            builder.setBoundary(boundary);\n            HttpEntity entity = builder.addBinaryBody(\"file\", file)\n                    .addTextBody(\"folderId\", folderId)\n                    .addTextBody(\"options\", new ObjectMapper().writeValueAsString(options))\n                    .build();\n            post.setEntity(entity);\n            response = this.httpclient.execute(post);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), StandardCharsets.UTF_8);\n            metadata = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n        } catch (Exception ex) {\n            LOGGER.error(\"[HUBSPOT] error while uploading file\", ex);\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n        return metadata;\n    }\n\n    @Override\n    public List<Object> getPipelineMapping(String object) throws Exception {\n        HttpResponse response = null;\n        List<Object> pipelineMappings = new ArrayList<>();\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f5b9aa61-b535-4adc-93d4-6cfd9f83218e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":30,"endLine":62,"content":"\n    private static final String SEARCH_END_POINT_V2 = \"v2/\";\n    static final String AUTHORIZATION = \"Authorization\";\n    static final String BEARER = \"Bearer \";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String CONTENT_TYPE_VALUE = \"application/json;charset=UTF-8\";\n    private static final int TIMEOUT = 30;\n    AuthenticationType authenticationType;\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n    private static final int ALLOWED_RETRIES = 3;\n\n    public GainsightZoomChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.refreshToken = refreshToken;\n        this.accessToken = accessToken;\n        this.authenticationType = AuthenticationType.OAUTH2;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + this.accessToke","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f71af798-e3ac-4150-b21f-274a207975ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":354,"endLine":387,"content":"              this.httpclient.close();\n                this.httpclient = HttpClients.createDefault();\n            }\n        }\n        return fileList;\n    }\n\n    @Override\n    public String getWhereClause(FilterRule rules) {\n        List<String> whereClauses = Lists.newArrayList();\n        rules.getRules().forEach(rule -> {\n            whereClauses.addAll(buildRule(rule));\n        });\n        String joiner =\n                rules.getCondition() != null\n                        ? rules.getCondition().getSpaceWrappedFilterCondition()\n                        : StringUtils.SPACE;\n        return Joiner.on(joiner).join(whereClauses);\n    }\n    @Override\n    public Map<String, Object> insertSingleRecord(Map<String, Object> data,String resourceName) throws Exception{\n        try{\n        String url = String.format(BIGQUERY_API_DOMAIN + \"v2/projects/%s/datasets/%s/tables/%s/insertAll\",this.projectId,this.datasetId,resourceName);\n        URIBuilder uriBuilder = new URIBuilder(url);\n        LOGGER.info(\"URI for Writing data {}\", uriBuilder.build());\n        this.httpPost.setURI(uriBuilder.build());\n        this.httpPost.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n        StringEntity stringEntity = new StringEntity(BQ_INSERT_SCRIPT, data.toString());\n        this.httpPost.setEntity(stringEntity);\n        HttpResponse response = null;\n        JsonArray arr = new JsonArray();\n        int retryCount = ALLOWED_RETRIES;\n        Map<String, Object> responseMap = new HashMap<>();\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0b06f1a-9daa-421d-bb84-328a08de27a6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":689,"endLine":716,"content":".toArray(new String[expandList.size()]));\n                }\n                if (StringUtils.isNotBlank(filterExpression)) {\n                    absoluteUri.filter(filterExpression);\n                }\n            }\n\n            URI uri = absoluteUri.build();\n            LOGGER.info(\"uri used is {}\", uri);\n\n            ODataEntitySetRequest<ClientEntitySet> requestEntitySet = client.getRetrieveRequestFactory().getEntitySetRequest(uri);\n            if (null != pageSize && pageSize > 0) {\n                requestEntitySet.addCustomHeader(\"Prefer\", \"odata.maxpagesize=\".concat(DynamicsGainsightUtils.valueOf(pageSize)));\n            }\n            ODataRetrieveResponse<ClientEntitySet> responseEntitySet = requestEntitySet.execute();\n            return responseEntitySet.getBody();\n        } catch (RuntimeException runtimeException) {\n            throw new SystemException(\"GSODATA\", runtimeException);\n        }\n    }\n\n    private ClientEntitySet readClientEntitySet(ODataClient client, String entitySetName,\n                                                Set<String> projections, Set<String> expandList, String filterExpression,\n                                                RecordResponseGenerator recordResponseGenerator) {\n        try {\n            URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n            if (CollectionUtils.isNotEmpty(projections)) {\n                absoluteUri.select(projections.toArray(new String[p","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce43b92e-93cd-486b-9509-7df3acdbbc7e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":59,"endLine":94,"content":");\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        httpPatch.addHeader(CONTENT_TYPE,CONTENT_TYPE_VALUE);\n\n    }\n\n    public GainsightZoomChannelServiceImpl(){\n    }\n\n    private void validate() {\n        Objects.requireNonNull(clientId, \"[ZOOM] Client ID  Can't be NULL\");\n        Objects.requireNonNull(clientSecret, \"[ZOOM] Client Secret Can't be NULL\");\n        Objects.requireNonNull(refreshToken, \"[ZOOM] Refresh Token Can't be NULL\");\n        Objects.requireNonNull(accessToken, \"[ZOOM] Access Token Can't be NULL\");\n    }\n\n    @Override\n    public HttpResponse searchData(String url) throws Exception {\n        HttpResponse response = null;\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            URIBuilder uriBuilder = new URIBuilder(BASE_API_URL + url);\n            this.httpGet.setURI(uriBuilder.build());\n            try {\n                response = this.httpclient.execute(httpGet);\n\n            } catch (Exception exception) {\n                LOGGER.error(\"[ZOOM] error in fetching data \", e","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"663fc67c-1ffa-4313-9750-4eb7a7a5d8c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/HubspotSorts.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotSorts {\n    private String propertyName;\n    private SortDirection direction;\n\n    public HubspotSorts() {\n    }\n\n    public HubspotSorts(String propertyName, SortDirection direction) {\n        this.propertyName = propertyName;\n        this.direction = direction;\n    }\n\n    public String getPropertyName() {\n        return propertyName;\n    }\n\n    public void setPropertyName(String propertyName) {\n        this.propertyName = propertyName;\n    }\n\n    public SortDirection getDirection() {\n        return direction;\n    }\n\n    public void setDirection(SortDirection direction) {\n        this.direction = direction;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"132ff270-c0c1-49a2-81fd-56932feffdcb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelService.java","startLine":1,"endLine":17,"content":"package com.gainsight.integration.connector.msteams.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface GainsightMSTeamsChannelService {\n    HttpResponse searchData(String url) throws Exception;\n\n    InputStream getPaginatedEntityData(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception;\n\n    Map<String, Object> getTeamsOrganizationDetails() throws Exception;\n\n    Map<String, Object> getTeamsUserDetails() throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce42ca1f-8474-4be4-9f96-6ea2179af49e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":188,"endLine":252,"content":"ng SYSTEM_USER = \"systemuser\";\n    public static final String TEAM = \"team\";\n    public static final String OWNING_USER = \"owninguser\";\n    public static final String OWNING_TEAM = \"owningteam\";\n\n    //Audit Service Related Constants.\n\n    /**\n     * Create Connection Event Name\n     */\n    public static final String CREATE_CONNECTION = \"Create Connection \";\n\n    /**\n     * Update Connection Event Name\n     */\n    public static final String UPDATE_CONNECTION = \"Update Connection \";\n\n    /**\n     * Delete Connection Event Name\n     */\n    public static final String DELETE_CONNECTION = \"Delete Connection \";\n\n    /**\n     * Create Job Event Name\n     */\n    public static final String CREATE_JOB = \"Create Job \";\n\n    /**\n     * Update Job Event Name\n     */\n    public static final String UPDATE_JOB = \"Update Job \";\n\n    /**\n     * Delete Job Event Name\n     */\n    public static final String DELETE_JOB = \"Delete Job \";\n\n\n    /**\n     * Create Mapping Event Name\n     */\n    public static final String CREATE_MAPPING = \"Create Mapping \";\n\n    /**\n     * Update Mapping Event Name\n     */\n    public static final String UPDATE_MAPPING = \"Update Mapping \";\n\n    /**\n     * \"\n     */\n    public static final String SHOW = \"show\";\n\n    /**\n     * withData parameter in Audit Service Get Query\n     */\n    public static final String WITHDATA = \"withData\";\n\n    /**\n     * systemTags parameter in Audit Service Get Query\n     */\n    public static final String SYSTEM_TAGS = \"systemTags\";\n\n    /**\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc75b6d7-54c1-44e8-b501-2430f5a31f81","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":622,"endLine":651,"content":"absolutePathToTargetTable, absolutePathToTempStageTable,\n                  Joiner.on(AND).join(ON_CLAUSE), Joiner.on(COMMA).join(SET_CLAUSE));\n          break;\n        case UPSERT:\n          mergeQuery = String.format(UPSERT_INTO_TARGET_TABLE_QUERY, absolutePathToTargetTable, absolutePathToTempStageTable,\n                  Joiner.on(AND).join(ON_CLAUSE), Joiner.on(COMMA).join(SET_CLAUSE), Joiner.on(COMMA).join(INSERT_COLUMN_CLAUSE),\n                  Joiner.on(COMMA).join(INSERT_VALUE_CLAUSE));\n          break;\n        default:\n          throw new SQLException(\"[SAP DATASPHERE] Unsupported operation: \" + ductDataOperation);\n      }\n      log.info(\"[SAP DATASPHERE] Merge query formed : {}\", mergeQuery);\n      mergeStatement = this.connection.prepareStatement(mergeQuery);\n    } catch (SQLException e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while preparing merge statement: {}...\", e.getMessage(), e);\n      throw new SQLException(e.getMessage());\n    }\n    return mergeStatement;\n  }\n\n  private File prepareFailureCSVFile(String[] header, List<String[]> batchData, String fileName) {\n    File file = null;\n    try {\n      file = new File(fileName + UNDERSCORE + RequestContextProvider.getRequestId() + UNDERSCORE + \"failure\" + CSV);\n      try (CSVWriter writer = new CSVWriter(new FileWriter(file))) {\n        writer.writeNext(header);\n        writer.writeAll(batchData);\n      }\n    } catch (IOException e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while preparing {} C","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"25244fb2-1cd3-4274-9354-62bb1ce35da3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Column.java","startLine":118,"endLine":133,"content":"+\n                \"id='\" + id + '\\'' +\n                \", fieldName='\" + fieldName + '\\'' +\n                \", logicalName='\" + logicalName + '\\'' +\n                \", displayName='\" + displayName + '\\'' +\n                \", externalType=\" + externalType +\n                \", localType='\" + localType + '\\'' +\n                \", defaultValue='\" + defaultValue + '\\'' +\n                \", maxLength=\" + maxLength +\n                \", hasLookup=\" + hasLookup +\n                \", targetObject=\" + targetObject +\n                \", isPrimary=\" + isPrimary +\n                \", properties=\" + properties +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6f59113-1e9e-48b5-a831-2af51302c8ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.connector.databricks;\n\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.OperatorType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainSightS3;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport com.google.gson.Gson;\nimport exception.SystemException;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpVersion;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.security.KeyStore;\nimport java.security.cert","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb6ab0b9-6338-4d4a-893e-b1559403ab90","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchService.java","startLine":1,"endLine":20,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.commons.api.edm.Edm;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic interface GainsightSapMktFetchService {\n    List<String> pullAvailableEntitiesName(ODataClient oDataClient, String serviceUrl) throws IOException;\n\n    List<String> listAllPropertiesOfEntity(ODataClient oDataClient, String qualifiedEntityName, String serviceUrl) throws IOException;\n\n    InputStream pullEntityData(ODataClient oDataClient, String qualifiedEntityName, int topValue, String serviceUrl);\n\n    Object pullEntityDataForKey(ODataClient oDataClient, String qualifiedEntityName, String keyValue, String serviceUrl);\n\n    Edm pullEntityDataModel(ODataClient oDataClient, String serviceUrl) throws IOException;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37caa82d-eb27-4d06-9198-473737b0deb9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":118,"endLine":141,"content":" = \"0 00 03 1/1 * ? *\";\n    public static final String SFDC_HOUSEKEEPING_CRON = \"0 00 05 1/1 * ? *\";\n    public static final String DYNAMICS_HOUSEKEEPING_CRON = \"0 00 07 1/1 * ? *\";\n    public static final int SECONDS_PER_DAY = 24 * 60 * 60;\n    public static final String PNP_DATE_FORMAT = \"yyyy-MM-dd\";\n    public static final String EPOCH_START_DATE = \"1970-01-01\";\n    public static final String PNP_DATE_TIME_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n    public static final String SCHEDULE_DAYS_OFFSET = \"SCHEDULE_DAYS_OFFSET\";\n    public static final String TRANSFORMED_FILE = \"Transformed\";\n    public static final String ERROR_FILE = \"Error_File\";\n    public static final String NULL_VALUE_STRING = \"NULL\";\n    public static final long MILLISECONDS_PER_DAY = (long) 24 * 60 * 60 * 1000;\n    public static final String SERVICENOW_EXTERNAL_QUERY = \"SERVICENOW_EXTERNAL_QUERY\";\n    public static final String DYNAMICS_EXTERNAL_QUERY = \"DYNAMICS_EXTERNAL_QUERY\";\n    public static final String MASTER_LOOKUP_CONFIGURATION = \"MASTER_LOOKUP_CONFIGURATION\";\n    public static final String SYS_PARAM_OFFSET = \"sysparm_offset\";\n    public static final String SYS_PARAM_LIMIT = \"sysparm_limit\";\n    public static final String ALL_OBJECTS = \"__ALL_OBJECTS__\";\n\n    //Unknown, need to segregrate them as well\n    public static final String GROUP_DATA = \"groupData\";\n    public static final String PEOPLE_DATA = \"peopleData\";\n    public static final String EVENT_DATA = \"EVENTDATA\";\n    public static final String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d8ec8df-61d4-4b4e-bcab-3dedcdad4af0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":185,"endLine":202,"content":" } else {\n                    Optional<GSFieldDefinition> gsFieldDefinitionOptional;\n                    if (modifiedExpandToOriginalFieldName.containsKey(projection)) {\n                        gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(\n                                fieldDefinition -> fieldDefinition.getFieldName().equals(modifiedExpandToOriginalFieldName.get(projection))\n                        ).findFirst();\n                    } else {\n                        gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(\n                                fieldDefinition -> fieldDefinition.getFieldName().equals(mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1])\n                        ).findFirst();\n                    }\n\n                    Optional<Relationship> relationshipOptional = Optional.empty();\n                    if (gsFieldDefinitionOptional.isPresent()) {\n                        String targetObjectOfLookupField = gsFieldDefinitionOptional.get().getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();\n                        String referencingAttribute = DynamicsGainsightUtils.getReferencingAttribute(sourceLookupField, targetObjectOfLookupField);\n                        relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(ref","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"75a05c64-3ca1-4f49-ba30-ffc14f45f855","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":216,"endLine":242,"content":"ithOAuth20(clientId, clientSecret, refreshToken);\n            data = gainsightHubspotChannelService.getDataWithQuery(query);\n            return data;\n        }catch (Exception e){\n            LOGGER.error(String.format(\"[HUBSPOT] Error while getting result for query %s \", query ),e);\n            return data;\n        }\n    }\n\n    @Override\n    public HttpResponse createSingleData(String entityName, String clientId, String clientSecret, String refreshToken, String accessToken, Map<String, Object> data) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.createSingleData(GSHubSpotEntityEnum.getInstance(entityName), data);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public HttpResponse updateSingleData(String entityName, String clientId, String clientSecret, String refreshToken, String accessToken, Map<String, Object> data, String id) {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightHubspotChannelService.updateSingleDate(GSHubSpotEntityEnum.getIns","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9c5b0c4a-08e5-493d-b9df-e18e03679783","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * @author : vipinsharma\n * @createdOn : 25 Jun 2019 :: 17:12\n **/\n\npublic class GainsightHubspotChannelFactory {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightHubspotChannelFactory.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n\n    public GainsightHubspotChannelFactory() {\n    }\n\n    public GainsightHubspotChannelService getChannelServiceWithApiKey(String apiKey){\n        Objects.requireNonNull(apiKey,\"[HUBSPOT] API key cannot be null\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82717b1c-d34a-4097-9a2d-131185bfb9e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":411,"endLine":444,"content":"icks due to %s\", exception.getMessage()));\n        } finally {\n            closeQuietly(this.connection, null, null);\n        }\n    }\n\n    @Override\n    public Integer executeInsert(String absoluteObjectPath, Map<String, Object> dataToBeInserted) throws SQLException {\n        StringBuilder columns = new StringBuilder();\n        StringBuilder valuePlaceHolder = new StringBuilder();\n\n        for (Map.Entry entry : dataToBeInserted.entrySet()) {\n            columns.append(BACKTICK + entry.getKey() + BACKTICK).append(COMMA);\n            valuePlaceHolder.append(QUESTION_MARK).append(COMMA);\n        }\n        columns.deleteCharAt(columns.length() - 1);\n        valuePlaceHolder.deleteCharAt(valuePlaceHolder.length() - 1);\n        String query = String.format(INSERT_QUERY, absoluteObjectPath, columns, valuePlaceHolder);\n\n        PreparedStatement stat = null;\n        try {\n            LOGGER.info(\"Executing query : {} \", query);\n            stat = connection.prepareStatement(query);\n            int i = 0;\n            for (Map.Entry entry : dataToBeInserted.entrySet()) {\n                stat.setObject(++i, entry.getValue());\n            }\n            return stat.executeUpdate();\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while writing data: {}...\", ex.getMessage(), ex);\n            //throw new SQLException(\"Error occurred while trying to write data. \" + parseMessage(ex.getMessage()));\n            throw new SQLException(ex.getMessage());\n        } finally {\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f944b423-72f8-46a8-ba64-b01e45997911","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Relationship.java","startLine":44,"endLine":92,"content":"tityNavigationPropertyName(String referencedEntityNavigationPropertyName) {\n        this.referencedEntityNavigationPropertyName = referencedEntityNavigationPropertyName;\n    }\n\n    public String getReferencingEntityNavigationPropertyName() {\n        return referencingEntityNavigationPropertyName;\n    }\n\n    public void setReferencingEntityNavigationPropertyName(String referencingEntityNavigationPropertyName) {\n        this.referencingEntityNavigationPropertyName = referencingEntityNavigationPropertyName;\n    }\n\n    public String getSchemaName() {\n        return schemaName;\n    }\n\n    public void setSchemaName(String schemaName) {\n        this.schemaName = schemaName;\n    }\n\n    public RelationshipType getRelationshipType() {\n        return relationshipType;\n    }\n\n    public void setRelationshipType(RelationshipType relationshipType) {\n        this.relationshipType = relationshipType;\n    }\n\n    public String getReferencingEntity() {\n        return referencingEntity;\n    }\n\n    public void setReferencingEntity(String referencingEntity) {\n        this.referencingEntity = referencingEntity;\n    }\n\n    public boolean isCustomRelationship() {\n        return isCustomRelationship;\n    }\n\n    public void setCustomRelationship(boolean customRelationship) {\n        isCustomRelationship = customRelationship;\n    }\n\n    @Override\n    public String toString() {\n        return \"Relationship{\" +\n                \"referencingAttribute='\" + referencingAttribute + '\\'' +\n                \", ref","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77dcb0b2-8310-4753-8176-bfe0bd485610","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":499,"endLine":528,"content":"           throw new RuntimeException(e);\n        } catch (Exception e) {\n            LOGGER.error(\"error occured while snowflake fetch using pagination {}\",e);\n            throw new RuntimeException(e);\n        } finally {\n            LOGGER.info(\"executing finally block\");\n            if (resultSet != null) {\n                resultSet.close();\n            }\n            if (stat != null) {\n                stat.close();\n            }\n            if (preparedStatement != null) {\n                preparedStatement.close();\n            }\n        }\n        LOGGER.info(\"size of file {}\",extractFile);\n        return Collections.singletonList(extractFile);\n    }\n\n    private List<File> fallBackResult(String selectQuery,List<FieldInfo> fieldInfoList,String objectName,String filter,  Set<String> ntz_fields, Map<String, String> ntz_map) throws SQLException {\n        LOGGER.info(\"Copy manager failed, falling back to pagination\");\n        ResultSet resultSet = null;\n        Statement stat = null;\n        PreparedStatement preparedStatement = null;\n        DateTimeFormatter defaultSrcFormatter = new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\") // .parseLenient()\n                .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).toFormatter();\n        File extractFile = new File(System.getProperty(\"user.dir\") + \"/\" + ConnectorType.SNOWFLAKE.getValue() + \"_\" + StringUtils.replace(UUID.randomUUID().toString(), \"-\", \"\") + JSON);\n        try  {\n            extractFile.cr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0407be60-2f0d-4c40-9a96-508104c46a2a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":38,"endLine":61,"content":"al Cache<String, SalesforceToken> TOKEN_CACHE =\n            CacheBuilder.newBuilder().concurrencyLevel(10).maximumSize(10000)\n                    .expireAfterWrite(15, TimeUnit.MINUTES).build();\n\n    public static final String ACCESS_TOKEN_URL =\n            \"%sservices/oauth2/token?grant_type=refresh_token&client_id=%s&client_secret=%s&refresh_token=%s&format=json\";\n\n\n    public SalesforceToken accessToken(PNPConnectionsInfo pnpConnectionsInfo) throws SystemException {\n        SalesforceToken accessToken = null;\n        String tenantId = pnpConnectionsInfo.getTenantId();\n        String connectionId = pnpConnectionsInfo.getConnectionId();\n        String connectionName = pnpConnectionsInfo.getConnectionName();\n        LOGGER.info(\"Generating token for tId:{} connectionId:{} connectionName:{}\", tenantId, connectionId, connectionName);\n        try {\n            BaseTokenDetail baseTokenDetail = pnpConnectionsInfo.getTokenDetail();\n            if (baseTokenDetail != null) {\n                String clientId = baseTokenDetail.getAccessKey().getString();\n                String clientSecret = baseTokenDetail.getAccessSecret().getString();\n                String refreshToken = CryptHandler.getInstance().decrypt(baseTokenDetail.getRefreshToken());\n                if (StringUtils.isNoneEmpty(clientId, clientSecret, refreshToken)) {\n                    SalesforceToken accessTokenFromCache = getTokenFromCache(pnpConnectionsInfo);\n                    if (accessTokenFromCache != null) {\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0856b922-6912-4b91-bda3-1f136747ed67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":253,"endLine":279,"content":"= builder.build();\n        ODataEntityRequest<ClientEntity> clientEntityODataEntityRequest = client.getRetrieveRequestFactory().getEntityRequest(uri);\n        ODataRetrieveResponse<ClientEntity> entityODataRetrieveResponse = clientEntityODataEntityRequest.execute();\n        ClientEntity clientEntity = entityODataRetrieveResponse.getBody();\n        ClientLink clientLink = clientEntity.getNavigationLink(\"OptionSet\");\n        ClientInlineEntity clientInlineEntity = clientLink.asInlineEntity();\n        ClientEntity inlineClientEntity = clientInlineEntity.getEntity();\n        return parseOptionSet(inlineClientEntity);\n    }\n\n    @Override\n    public List<MSDynamicsObject> listAllObjects(MSDynamicsObjectQuery msDynamicsObjectQuery) {\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(\"EntityDefinitions\");\n        String[] projections;\n        if (Objects.nonNull(msDynamicsObjectQuery)) {\n            if (ArrayUtils.isNotEmpty(projections = msDynamicsObjectQuery.buildProjections())) {\n                absoluteUri.select(projections);\n            } else {\n                absoluteUri.select(MSDynamicsObjectQuery.FIELDS_MAPPING.values().toArray(new String[0]));\n            }\n            String filer;\n            if (StringUtils.isNotEmpty(filer = msDynamicsObjectQuery.buildFilter())) {\n                absoluteUri.filter(filer);\n            }\n        } else {\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d57f4a57-5f36-480d-872a-ef5eb09d0306","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/AuditEntityType.java","startLine":1,"endLine":64,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.audit;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 10:41\n */\npublic enum AuditEntityType {\n  JOB(\"Job\"),\n  CONNECTION(\"Connection\"),\n  JOBEXECUTIONSET(\"JobExecutionSet\"),\n  TASK_INFO(\"TaskInfo\");\n\n  private String value;\n\n  /**\n   * Pre-populate the Entity Type map for performance.\n   */\n  private static final Map<String, AuditEntityType> ENTITY_TYPE = new HashMap();\n\n  static {\n    for (AuditEntityType type : values()) {\n      ENTITY_TYPE.put(type.value.toUpperCase(), type);\n    }\n  }\n\n  AuditEntityType(String value){\n    this.value = value;\n  }\n\n  @JsonValue\n  public String getValue() {\n    return value;\n  }\n\n\n  /**\n   * This code is for case-insensitive enums.\n   *\n   * @param value The value\n   * @return The enum\n   */\n  @JsonCreator\n  public static AuditEntityType forValue(String value) {\n    if (value == null) {\n      return null;\n    }\n    return ENTITY_TYPE.get(value.toUpperCase());\n  }\n  public String getTranslatedValue(){\n    return ConnectorI18nService.getTranslation(this.name(),this.value, RequestContextProvider.getTenantLanguage());\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"83784c3c-4551-41e8-b190-3cfdc944c5f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.connector.dynamics.service;\n\nimport com.gainsight.bean.PicklistOption;\nimport com.gainsight.bean.gsmeta.GSFieldDefinition;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.dynamics.bean.factory.GSODataClientFactory;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.*;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\nimport com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils;\nimport com.gainsight.integration.connector.dynamics.util.RecordResponseGenerator;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport exception.SystemException;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetRequest;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.ap","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"99213cc5-0832-46fc-b720-a2b30230b5d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":349,"endLine":364,"content":"sKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Column column = msDynamicsObject.getColumn(sourceLookupField);\n                    Optional<Relationship> relationshipOptional = Optional.empty();\n                    if (Objects.nonNull(column)) {\n                        String targetObjectOfLookupField = column.getTargetObject();\n                        String referencingAttribute = getReferencingAttribute(sourceLookupField, targetObjectOfLookupField);\n                        relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                        String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2ce5a7f-5874-4141-b424-b5caa92c3439","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/RateLimitDetails.java","startLine":1,"endLine":20,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.integration.bean.enums.metadata.engine.Location;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class RateLimitDetails implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private Location keyLocation;\n    private String key;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"256e90e7-60d4-47df-99d8-357d452c9f48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":337,"endLine":358,"content":", Object> flattenConnectionInfo, String baseUrl, String systemToken) throws Exception {\n    if (config.isStatic())\n      return config.getValue();\n\n    if ((config.getTokenGenerationDetails() != null && ObjectUtils.isEmpty(pnpConnectionsInfo.getTokenDetail().getExpiry()))\n        || (pnpConnectionsInfo.getTokenDetail() != null && pnpConnectionsInfo.getTokenDetail().getExpiry() != null && pnpConnectionsInfo.getTokenDetail().getExpiry() < System.currentTimeMillis())) {\n      try {\n        RequestConfig requestConfig = RequestConfig.custom()\n            .setConnectTimeout(TIMEOUT * 1000)\n            .setConnectionRequestTimeout(TIMEOUT * 1000)\n            .setSocketTimeout(TIMEOUT * 1000).build();\n        CloseableHttpClient httpclient = HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).build();\n        HttpGet httpGet = new HttpGet();\n        httpGet.setHeader(\"authToken\", systemToken);\n        httpGet.setHeader(\"Content-Type\", \"application/json\");\n        String url = baseUrl + SLASH + GENERATE_TOKEN_END_POINT + SLASH + pnpConnectionsInfo.getConnectionId();\n        httpGet.setURI(URI.create(url));\n        HttpResponse response = httpclient.execute(httpGet);\n        LOGGER.info(\"Response status received from Duct Framework --> {}\", response.getStatusLine().getStatusCode());\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n          JsonNode responseMap = OBJECT_MAPPER.readTree(response.getEntity().getContent());\n          if (responseM","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8c16f14-f5cb-4487-a009-f37151be43ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImplTest.java","startLine":67,"endLine":97,"content":"tMessage(),e);\n            fail(e.getMessage());\n        }\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"Campaign\", \"SpendHeaderTimeSplit\", \"SpendItemTimeSplit\", \"ActualSpend\", \"SpendItem\", \"SpendHeader\"})\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"List Entities Properties\")\n    @Order(2)\n    public void listAllPropertiesOfEntity(String entityName){\n        try {\n            String serviceUrl = \"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CAMPAIGN_SRV;v=0002/\";\n            List<String> entityProperties = gainsightSapMktFetchService.listAllPropertiesOfEntity(oDataClientForApiKey,entityName,serviceUrl);\n            assertFalse(entityProperties.isEmpty(),String.format(\"No properties found for the entity with name %s \",entityName));\n            LOGGER.info(String.format(\"Following properties found for entity with name %s {%s}\",entityName,entityProperties.toString()));\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(),e);\n            fail(e.getMessage());\n        }\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"Campaigns\", \"SpendHeaderTimeSplits\", \"SpendItemTimeSplits\", \"ActualSpends\", \"SpendItems\", \"SpendHeaders\"})\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Pull Entity Data\")\n    @Order(3)\n    public void pullEntityData(String entityName){\n        try {\n            String serviceUrl = \"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CAMPAIGN_SRV;v=0002/\";\n            InputStream entityD","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e30d85c8-6a03-4fb0-b4d7-7b4dfa04fd31","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelFactory.java","startLine":1,"endLine":23,"content":"package com.gainsight.integration.connector.databricks;\n\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.utils.common.UCConstants;\n\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class GainsightDatabricksChannelFactory {\n\n    public GainsightDatabricksChannelService getChannelFromPnpConnectionInfo(PNPConnectionsInfo pnpConnectionsInfo) {\n        Objects.requireNonNull(pnpConnectionsInfo, AdapterErrorMessages.CONNECTION_INFO_NULL.getTranslatedMessage());\n        return getChannelFromProperties(pnpConnectionsInfo.getProperties(), true, pnpConnectionsInfo.getAuthorizationType());\n    }\n\n    public GainsightDatabricksChannelService getChannelFromProperties(Map properties, boolean isValueEncrypted, AuthorizationType authorizationType) {\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.DATABASE_HOST), AdapterErrorMessages.DATABASE_HOST_NULL.getTranslatedMessage());\n        if (AuthorizationType.BASIC_AUTH.equals(authorizationType)) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.USERNAME), AdapterErrorMessages.USERNAME_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.PASSWORD), AdapterErrorMessages.PASSWORD_NULL.getTranslatedMessage());\n        } else if (AuthorizationType.OAUTH.equa","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f82a692d-dbd2-4f5e-a554-1a66fea68dbc","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/EventStatusEnum.java","startLine":1,"endLine":65,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.common;\n\n\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by vgautam on 15/11/16.\n */\npublic enum EventStatusEnum {\n  /**\n   * The success status.\n   */\n  SUCCESS(\"Success\"),\n  /**\n   * The failed status.\n   */\n  FAILED(\"Failed\");\n\n  /**\n   * Pre-populate the EventStatusEnum map for performance.\n   */\n  private static final Map<Object, EventStatusEnum> EVENT_STATUS_TYPE_MAP = new HashMap<>();\n\n  static {\n    for (EventStatusEnum type : values()) {\n      EVENT_STATUS_TYPE_MAP.put(type.status.toUpperCase(), type);\n    }\n  }\n\n\n  private final String status;\n\n  EventStatusEnum(String status) {\n    this.status = status;\n  }\n\n  /**\n   * @return returns the value of the ENUM.\n   */\n  @JsonValue\n  public String getStatus() {\n    return status;\n  }\n\n  @Override\n  public String toString() {\n    return status;\n  }\n\n  @JsonCreator\n  public static  EventStatusEnum getEventStatusEnum(String operation){\n    if (operation == null) {\n      return null;\n    }\n    return EVENT_STATUS_TYPE_MAP.get(operation.toUpperCase());\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d415a5c-e143-47b4-b189-20a94593fe28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescription;\n\nimport java.util.List;\n\npublic class GainsightHubspotMetaDataUtil {\n\n    public static void addRequiredFieldsOfEntity(String entityName, List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions) { // todo need to change this, can be better\n        addRequiredFieldsOfEntity(entityName, gainsightHubspotFieldDescriptions, false);\n    }\n\n    public static void addRequiredFieldsOfEntity(String entityName, List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions, boolean isApiVersionV3) { // todo need to change this, can be better\n        GSHubSpotEntityEnum entity = GSHubSpotEntityEnum.getInstance(entityName);\n        switch (entity) {\n\n            case COMPANY:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"companyId\", \"companyId\", \"companyId\", \"string\", \"text\"));\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                }\n                break;\n\n            case CONTACT:\n           ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe25cfa5-14d2-4c2b-b89e-29f85c20e1ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":350,"endLine":356,"content":" }\n        lookupDetails.setLookupObjects(lookupObjects);\n        return lookupDetails;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d65d240b-ccc2-4cc2-a866-5af662035bf7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/Options.java","startLine":1,"endLine":71,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Options implements Serializable {\n\n    private String label;\n    private int displayOrder;\n    private boolean hidden;\n    private boolean readOnly;\n    private double doubleData;\n    private String description;\n    private String value;\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public int getDisplayOrder() {\n        return displayOrder;\n    }\n\n    public void setDisplayOrder(int displayOrder) {\n        this.displayOrder = displayOrder;\n    }\n\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    public boolean isReadOnly() {\n        return readOnly;\n    }\n\n    public void setReadOnly(boolean readOnly) {\n        this.readOnly = readOnly;\n    }\n\n    public double getDoubleData() {\n        return doubleData;\n    }\n\n    public void setDoubleData(double doubleData) {\n        this.doubleData = doubleData;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getValue() {\n        return valu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d0f38089-4fd8-48e0-8302-bca04ae75ec9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsFetchServiceImpl.java","startLine":1,"endLine":32,"content":"package com.gainsight.integration.connector.msteams.service;\n\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\npublic class GainsightMSTeamsFetchServiceImpl implements GainsightMSTeamsFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightMSTeamsFetchServiceImpl.class);\n    private static final GainsightMSTeamsChannelFactory gainsightMSTeamsChannelFactory = new GainsightMSTeamsChannelFactory();\n\n    @Override\n    public HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String url) throws Exception {\n        try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightMSTeamsChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightMSTeamsChannelService.searchData(url);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }\n\n    @Override\n    public InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId, String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api) throws Exception {\n        try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightM","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4d74e09f-516a-4dad-89aa-f04cf6319933","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/kafka/serde/config/KafkaConfigProps.java","startLine":39,"endLine":57,"content":"}\n\n    public static  Map<String, Object> getKafkaConsumerProps() {\n        String[] prefix = {\"uc.kafka.common.\",  \"uc.kafka.consumer.\"};\n        Map<String, Object> props = new HashMap<>();\n        Properties deploymentProps = DeploymentProperties.getProperties();\n        Enumeration<Object> keys = deploymentProps.keys();\n        while(keys.hasMoreElements()) {\n            String key = String.valueOf(keys.nextElement());\n            for(String pre:prefix)  {\n                if(key.startsWith(pre)) {\n                    log.info(\"Prop {} identified for kafka\", key);\n                    props.put(key.replace(pre,  \"\"), deploymentProps.get(key));\n                }\n            }\n        }\n        return props;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0be97692-d1e4-4e8e-9eeb-53489b82f322","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":260,"endLine":281,"content":"ORTABLE, poll(attribute, \"IsSortableEnabled\",\n                        DynamicsGainsightUtils.parseBoolean(((Map) attribute.get(\"IsSortableEnabled\")).getOrDefault(\"Value\", false))));\n\n                meta.put(CREATEABLE, poll(attribute, \"IsValidForCreate\"));\n                meta.put(UPDATEABLE, poll(attribute, \"IsValidForUpdate\"));\n                meta.putIfAbsent(ORIGINAL_DATA_TYPE, poll(attribute, \"AttributeType\"));\n\n                Object precision = attribute.containsKey(\"Precision\") ? poll(attribute, \"Precision\") :\n                        Objects.nonNull(dataTypeMappingsForField) ? dataTypeMappingsForField.getDecimalPlaces() : null;\n                meta.put(DECIMAL_PLACES, precision);\n                meta.put(PRECISION, precision);\n                attribute.put(DATA_PREVIEW_AVAILABLE, true);\n\n                if (MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(meta.getOrDefault(ORIGINAL_DATA_TYPE, StringUtils.EMPTY).toString().toUpperCase())) {\n                    if (separateLineItemForLookups && loadToDynamicsEnabled) {\n                        attribute.put(DATA_PREVIEW_AVAILABLE_FOR_LOOKUP_FIELDS, false);\n                        List<String> targets = (List) poll(attribute, \"Targets\");\n                        if (CollectionUtils.isNotEmpty(targets)) {\n                            for (String target : targets) {\n                                //Create separate line item for each target.\n                                Map fieldDefinitionClone = new HashMap();\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ed8a92a-5b29-4318-8d2d-28b23ec877fa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":125,"endLine":161,"content":"       throw new SystemException(String.format(\"[SAP DATASPHERE] Authorisation type %s not supported\", authorizationType));\n      }\n      this.dbHost = connectionDetail.getHost();\n      this.connectionUrl = String.format(SAP_HANA_BASE_URL, this.dbHost);\n      this.connection = createConnection(connectionUrl, prop);\n\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] Failed to connect to SAP Hana due to : {}\", ex.getMessage(), ex);\n      throw new SystemException(CONNECTION_AUTHORIZATION_FAILURE);\n    }\n  }\n\n  @Override\n  public List<Map<String, Object>> listAllObjects() {\n    List<Map<String, Object>> objects = new ArrayList<>();\n    Connection connection;\n    PreparedStatement tableStatement = null;\n    PreparedStatement viewStatement = null;\n    try {\n      connection = this.connection;\n      // table query\n      tableStatement = connection.prepareStatement(SHOW_TABLES_QUERY);\n      tableStatement.setString(1, this.schema);\n\n      // view query\n      viewStatement = connection.prepareStatement(SHOW_VIEWS_QUERY);\n      viewStatement.setString(1, this.schema);\n\n      List<Map<String, Object>> tables = nullSafeList(executeWithMapListHandler(tableStatement));\n      List<Map<String, Object>> views = nullSafeList(executeWithMapListHandler(viewStatement));\n\n      if (tables.isEmpty()) {\n        objects.addAll(views);\n      } else {\n        tables.stream().forEach(\n                table -> {\n                  Optional<Map<String, Object>> optionalView = views.stream().f","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"97a05a5e-c411-4d59-9986-97c74dbb9050","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":89,"endLine":114,"content":"ine().getReasonPhrase());\n                    LOGGER.error(errorMsg);\n                    Thread.sleep(15 * (long)1000);\n                    retryCount += 1;\n                }\n            }\n            String errorMsg = String.format(\"Productboard api returned status code :%s. Reason received:%s. Retries exhausted.\",\n                    response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n            LOGGER.error(errorMsg);\n            throw new SystemException(errorMsg, ProductBoardErrorCode.PRODUCTBOAORD_DATA_FETCH_ERROR);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while trying to pull data for notes from ProductBoard :{} . Response received : {} \", ex, response);\n            int statusCode = (response != null) ? response.getStatusLine().getStatusCode() : 500;\n            if (ex.getMessage().contains(\"response code: 401\"))\n                throw new SystemException(\"Incorrect Access Key\", ex, ProductBoardErrorCode.INVALID_ACCESS_KEY, 401);\n            else\n                throw new SystemException(\"Error in connecting and pulling data\", ex, ProductBoardErrorCode.PRODUCTBOAORD_DATA_FETCH_ERROR, statusCode);\n        }\n    }\n\n    @Override\n    public List<JsonNode> pullDataExceptNotes(ProductboardObjectsEnum objectType, String filterQuery) {\n        HttpResponse response = null;\n        List<JsonNode> data = null;\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1f7ecf9-63a9-4e56-88da-320a57b8bb98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":287,"endLine":304,"content":"olumn::getExternalType));\n        Map<String, Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_SELECT))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_SELECT)) {\n                String propertyValue = masterLookUpConfiguration.get(getRecordsRequest.getPluralName() + \"@@\" + projection);\n                if (Objects.nonNull(propertyValue)) {\n                    String newSelectProjection = propertyValue + \".\" + projection;\n                    expandGroup.add(newSelectProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newSelectProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projection);\n                } else if (logicalNameToExternalType.get(projection) == ExternalDataType.LOOKUP ||\n                        logicalNameToExternalType.get(projection) == ExternalDataType.CUSTOMER ||\n                        logicalNameToExternalType.get(projection) == ExternalDataType.OWNER) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projection);\n                } el","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9195ad3-5182-4710-83f2-faee89f93a6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/OperatorType.java","startLine":73,"endLine":100,"content":"\n\n    public OperandType getOperandType() {\n        return operandType;\n    }\n\n    public String replace(String sql, String with, boolean left) {\n        if (left) {\n            return sql.replace(\"$left\", with);\n        }\n        return sql.replace(\"$right\", with);\n    }\n\n    public String replace(String sql, String... withs) {\n        for (int x = 0; x < withs.length; x++) {\n            sql = sql.replace(\"$\" + x, withs[x]);\n        }\n        return sql;\n    }\n\n    public static OperatorType forValue(String alias) {\n        if (alias == null) {\n            return null;\n        }\n        return MAP.get(alias.toLowerCase());\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2166701-3b09-4e37-bfc3-b01fb6cffeb8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/OperatorType.java","startLine":1,"endLine":33,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by vgautam on 09/05/18.\n */\npublic enum OperatorType {\n\n  //Organized as display name, symbol, alias\n  //Example Equals, = , eq\n  //Server builds the query from display name, SalesForce will send alias.\n  EQ(\"=\", \"=\", \"eq\", \"$left = $right\", OperandType.BINARY),\n  NE(\"!=\", \"!=\", \"ne\", \"$left != $right\", OperandType.BINARY),\n  LT(\"<\", \"<\", \"lt\", \"$left < $right\", OperandType.BINARY),\n  LTE(\"<=\", \"<=\", \"lte\", \"$left <= $right\", OperandType.BINARY),\n  GT(\">\", \">\", \"gt\", \"$left > $right\", OperandType.BINARY),\n  GTE(\">=\", \">=\", \"gte\", \"$left >= $right\", OperandType.BINARY),\n  IN(\"In\", \"IN\", \"in\", \"$left IN ($right)\", OperandType.BINARY),\n  NOT_IN(\"Not In\", \"NOT IN\", \"nin\", \"$left NOT IN ($right)\", OperandType.BINARY),\n  LIKE(\"Like\", \"LIKE\", \"like\", \"$left LIKE $right\", OperandType.BINARY),\n  CONTAINS(\"Like\", \"LIKE\", \"contains\", \"$left ILIKE $right\", OperandType.BINARY),\n  NOT_CONTAINS(\"Like\", \"LIKE\", \"notContains\", \"$left NOT ILIKE $right\", OperandType.BINARY),\n  STARTS_WITH(\"LIKE\", \"LIKE\", \"startsWith\", \"$left ILIKE $right\", OperandType.BINARY),\n  ENDS_WITH(\"Ends With\", \"ILIKE\", \"endsWith\", \"$left ILIKE $right\", OperandType.BINARY),\n  //  BETWEEN(\"Between\", \"\", \"between\", \"$left BETWEEN $0 AND $1\", OperandType.BINARY),\n  INCLUDES(\"Includes\", \"includes\", \"includes\", \"$left IN ($right)\", OperandType.BINARY),\n  EXCLU","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e96a19f9-2fcb-4b96-b00c-141b1b12d228","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":139,"endLine":163,"content":"> label  = (Map) map.get(\"Label\");\n            if (Objects.nonNull(label)) {\n                Map<String,Object> userLocalizedLabel = (Map)label.get(\"UserLocalizedLabel\");\n                if (Objects.nonNull(userLocalizedLabel)) {\n                    option.setLabel(DynamicsGainsightUtils.valueOf(userLocalizedLabel.get(\"Label\")));\n                }\n            }\n            options.add(option);\n        }\n        optionSet.setOptions(options);\n        return optionSet;\n    }\n\n    public static Map constructDynamicsObjectDefinition(Map<String, Object> msDynamicsObject, PNPConnectionsInfo pnpConnectionsInfo,\n                                                        boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings) {\n        Map<String, Object> objectDefinition = new HashMap<>();\n        Map fieldDefinition;\n        List fields = new ArrayList();\n\n        objectDefinition.put(OBJECT_ID, DynamicsGainsightUtils.valueOf(msDynamicsObject.get(\"MetadataId\")));\n        objectDefinition.put(OBJECT_NAME, DynamicsGainsightUtils.valueOf(msDynamicsObject.get(\"SchemaName\")));\n        objectDefinition.put(LABEL_PLURAL, DynamicsGainsightUtils.valueOf(msDynamicsObject.get(\"EntitySetName\")));\n        objectDefinition.put(DB_NAME, DynamicsGainsightUtils.valueOf(msDynamicsObject.get(\"LogicalName\")));\n        objectDefinition.put(LABEL, DynamicsGainsightUtils.valueOf(MSDynamicsObjectUtil.parseDisplayName(msDynamicsObject,\n                Dynamic","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b667e756-2efd-42ec-8e0a-e5707a75721b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":133,"endLine":140,"content":"          case STARTS_WITH:\n                value = value + \"*\";\n                return value;\n            default:\n                return value;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c4b84dce-653e-468b-8dfe-08d8323f8945","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/FieldTrackingModuleHistory.java","startLine":1,"endLine":21,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.Map;\n\n/**\n * @author puneetsaluja\n * @created 26/08/22\n */\n@Getter\n@Setter\n@ToString(callSuper = true)\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class FieldTrackingModuleHistory {\n    String parentObjectName;\n    Map<String, FieldTrackingHistoryDetails> fieldTrackingHistoryDetails;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12577404-629f-4bea-a92a-9e4ac1b4db1e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/OptionSet.java","startLine":1,"endLine":71,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport java.io.Serializable;\nimport java.util.List;\n\npublic class OptionSet implements Serializable {\n\n    private static final long serialVersionUID = 5867147402080798026L;\n\n    private String id;\n    private String name;\n    private String displayName;\n    private boolean isGlobal;\n    private OptionSetType type;\n    private List<Option> options;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public boolean isGlobal() {\n        return isGlobal;\n    }\n\n    public void setGlobal(boolean global) {\n        isGlobal = global;\n    }\n\n    public List<Option> getOptions() {\n        return options;\n    }\n\n    public void setOptions(List<Option> options) {\n        this.options = options;\n    }\n\n    public OptionSetType getType() {\n        return type;\n    }\n\n    public void setType(OptionSetType type) {\n        this.type = type;\n    }\n\n    @Override\n    public String toString() {\n        return \"OptionSet{\" +\n                \"id='\" + id + '\\'' +\n                \", name='\" + name + '\\'' +\n                \", displayName='\" + displayName + '\\'' +\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d5a1dcf-6ef4-42f3-8c4d-a1107995b9e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":47,"endLine":83,"content":"ngo.commons.api.edm.EdmPrimitiveTypeKind;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.ws.rs.core.MediaType;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.connector.dynamics.constants.MSDynamicsConstants.OPTION_SET_PROPERTY;\nimport static com.gainsight.integration.connector.dynamics.util.DynamicsGainsightUtils.getReferencingAttribute;\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static utils.Constants.CONTENT_TYPE;\nimport static utils.Constants.STATUS;\n\n\n@Service\npublic class MSDynamicsDataServiceImpl implements MSDynamicsDataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MSDynamicsDataServiceImpl.class);\n\n    private static final String PROJECTION_SELECT = \"PROJECTION_SELECT\";\n    private static final String PROJECTION_EXPAND = \"PROJECTION_EXPAND\";\n    private static final String ODATA_BIND = \"%1$s@odata.bind\";\n    private static final String ODATA_BIND_VALUE = \"/%1$s(%2$s)\";\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n\n    /* @autowired will not work if the call comes from external ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fe51f89-17c4-4ebe-ae8b-f049b4f268ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelFactory.java","startLine":50,"endLine":79,"content":"n);\n        String accessToken = (String)accessTokenMap.get(\"access_token\");\n        return new GainsightZoomChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public Map getAccessToken(String clientId, String clientSecret, String refreshToken) throws Exception {\n        Map<String, Object> accountMap = new HashMap<>();\n        try{\n            CloseableHttpClient httpclient = HttpClients.createDefault();\n            HttpPost httpPost = new HttpPost(\"https://zoom.us/oauth/token\");\n\n            httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            httpPost.setHeader(\"Authorization\", \"Basic \" + getAuthorizationHeader(clientId, clientSecret));\n\n            List<NameValuePair> params = new ArrayList<>(4);\n            params.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n            params.add(new BasicNameValuePair(\"refresh_token\", refreshToken));\n\n            httpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\n            HttpResponse response = httpclient.execute(httpPost);\n            HttpEntity entity = response.getEntity();\n\n            String jsonResponse;\n\n            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK){\n                if(entity != null){\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonRespo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c0903a8-7bde-43e2-9972-d722488a39f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.dynamics.util;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.bean.MSDynamicsAuthInfo;\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.constants.HttpStatus;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightPrecondition;\nimport com.gainsight.utils.GainsightUtils;\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.collect.Maps;\nimport exception.CoreErrorCode;\nimport exception.SystemException;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"592af7e5-9f2f-4a3c-a56c-23227a896ea7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":324,"endLine":348,"content":"th, String mtlsBucketName, String accessKeyId, String accessSecret,String region) {\n        File keyStoreFile = null;\n        try {\n            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()\n                    .withRegion(region)\n                    .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKeyId, accessSecret))).build();\n            S3Object s3Object = s3Client.getObject(mtlsBucketName, mtlsCertificatePath);\n            if (s3Object != null && s3Object.getObjectMetadata().getContentLength() > 0) {\n                try {\n                    String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\"));\n                    keyStoreFile = File.createTempFile(RequestContextProvider.getTenantId() + \"_\" + dateTime,\".jks\");\n                    FileUtils.copyInputStreamToFile(s3Object.getObjectContent(), keyStoreFile);\n                } catch (IOException e) {\n                    LOGGER.error(\"Unable to download File from S3 @path {}\", e.getMessage(),e);\n                } finally {\n                    try {\n                        s3Object.close();\n                    } catch (IOException e) {\n                        LOGGER.error(\"Unable to close S3object :{}\",e.getMessage(), e);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error while downloading the certificate file from s3 : {}\", e.getMessage(), e);\n            throw new SystemException(\"Err","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84e86961-f297-4ab9-ae11-ce520e965560","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/ConnectionStatus.java","startLine":1,"endLine":15,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums;\n\npublic enum ConnectionStatus {\n\n    INIT,\n    AUTHORIZED,\n    REVOKED,\n    AUTHORIZED_AND_LINKED,\n    REVOKED_AND_LINKED\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d4e8d7e-2095-4551-bb5b-06534db52b22","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/bean/GainsightBiqQueryFieldDescription.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.bean;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightBiqQueryFieldDescription implements Serializable {\n\n    private static final long serialVersionUID = -180711818672108361L;\n    private String name;\n    private String label;\n    private String type;\n    private String description;\n\n    public String getName() { return name; }\n\n    public void setName(String name) { this.name = name; }\n\n    public String getLabel() { return label; }\n\n    public void setLabel(String label) { this.label = label; }\n\n    public String getType() { return type; }\n\n    public void setType(String type) { this.type = type; }\n\n    public String getDescription() { return description; }\n\n    public void setDescription(String description) { this.description = description; }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1e935e7-1d66-400d-bd38-e522df59cfe6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":485,"endLine":507,"content":"                      ++currentRetryCount;\n                        LOGGER.info(\"Retrying to fetch data. count {}\", currentRetryCount);\n                    } else {\n                        throw httpClientException;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Unexpected error occured in get records, deleting temp file if any present\");\n            FileUtils.deleteQuietly(recordResponseGenerator.getCsvFile());\n            throw e;\n        }\n\n        return new RecordsResponse(recordResponseGenerator.getRecords(), recordResponseGenerator.getCsvFile(),\n                recordResponseGenerator.getBatchQuery(), recordResponseGenerator.getRecordsPulled());\n    }\n\n    private List<String> getLookupObjectPrimaryKeys(ObjectDefinition objectDefinition, Set<String> projections, List<Relationship> relationships,\n                                                    Map<String, String> masterLookUpConfig, PNPConnectionsInfo pnpConnectionsInfo,\n                                                    Map<String, ObjectDefinition> objectDefinitionMap, boolean resolvePicklistOptions,\n                                                    boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings) {\n        List<String> lookupObjectPrimaryKeys = Lists.newArrayList();\n        List<String> lookupProjections = projections.stream().filter(projection -> projection.split(\"\\\\.\").length > 2).collec","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9b3db47f-ce5e-4ca6-835f-a6a5f25e53c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelServiceImpl.java","startLine":68,"endLine":94,"content":";\n            if(response.getStatusLine().getStatusCode() == 200){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"[AHA] Access token expired\");\n                throw new Exception(\"[AHA] Access token expired\");\n            } else if(retryCount <= -1){\n                LOGGER.error(\"[AHA] The api call to source failed for retry count : {} due to status: {} , code :{}\", 2-retryCount,\n                        response.getStatusLine(), response.getStatusLine().getStatusCode());\n                throw new Exception(\"[AHA] Api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"[AHA] Sleeping for 15 secs as the api call to AHA failed for retry count : {} due to : {}, code :{}\",\n                        2-retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                Thread.sleep((15 * 1000));\n            }\n        }\n        return response.getEntity().getContent();\n    }\n\n    private URIBuilder getUriForEntityLatest(String subDomain, String entityName, int pageSize, int pageNumber, String updatedSince)\n            throws Exception {\n        String url;\n        URIBuilder uriBuilder;\n        url = \"https://\" + subDomain + \".aha.io/\"  + GainsightAhaEntityEnum\n                    .getDataApiPath(GainsightAhaEntityEnum.getInstance(entityName));\n\n        uriBuilder = getUriBuilder(url, pageSize, pageNumber","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21faa989-57f9-46a7-b174-d9b13c7bbda2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":601,"endLine":622,"content":" ex);\n        } finally {\n            closeQuietly(this.connection, resultSet, stat);\n        }\n    }\n\n    @Override\n    public Map<String, Object> loadBulkData(DuctDataOperation ductDataOperation, PNPConnectionsInfo pnpConnectionsInfo, File file, String targetObject,\n                                            List<ColumnMapping> columnMappings, Character quoteChar, Character escapeChar, Character seperatorChar,\n                                            Map<String, String> colNameToDataType) throws SQLException {\n        Map<String, Object> bulkLoadResult = new HashMap<>();\n        String absolutePathToTempStageTable = null;\n        try {\n            String uploadedFilePath = GainsightDatabricksHelper.uploadFileToDatabricksFileSystem(pnpConnectionsInfo, file);\n            Objects.requireNonNull(uploadedFilePath, AdapterErrorMessages.SOMETHING_WENT_WRONG_CONTACT_SUPPORT.getTranslatedMessage());\n            String absolutePathToTargetTable = String.format(TABLE_ABSOLUTE_PATH, this.schema, this.db, targetObject);\n\n            try (Statement statement = this.connection.createStatement()) {\n                absolutePathToTempStageTable = String.format(TEMP_STAGE_TABLE_NAME, this.schema,\n                        this.db, targetObject, UUID.randomUUID().toString().substring(0, 5));\n                String columnsClause = Joiner.on(COMMA).join(\n                        columnMappings.stream().map(columnMapping -> BACKTICK + columnMapping.getFieldName() + BACKTICK + \" STRING\").collect(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ee2c765-d323-4263-9ff6-e78c368cd4a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":1,"endLine":40,"content":"package com.gainsight.integration.connector.dynamics.bean.factory;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.microsoft.aad.adal4j.AuthenticationContext;\nimport com.microsoft.aad.adal4j.AuthenticationResult;\nimport com.microsoft.aad.adal4j.ClientCredential;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.*;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HttpContext;\nimport org.apache.olingo.client.core.http.AbstractOAuth2HttpClientFactory;\nimport org.apache.olingo.client.core.http.OAuth2Exception;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.naming.ServiceUnavailableException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class ODataHttpConfig extends AbstractOAuth2HttpClientFactory {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ODataHttpConfig.class);\n\n    private ObjectNode token;\n\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eab125f0-db0a-485f-846a-511feb62fde2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImplTest.java","startLine":38,"endLine":75,"content":"static final Logger LOGGER = LoggerFactory.getLogger(GainsightSapCrmFetchServiceImplTest.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    @Autowired\n    private GainsightSapMktFetchService gainsightSapMktFetchService;\n    @Autowired\n    private GainsightSapCrmFetchService gainsightSapCrmFetchService;\n    private ODataClient oDataClientWithUserNamePwd;\n\n    @BeforeEach\n    public void init(){\n       this.oDataClientWithUserNamePwd = GainsightODataSAPClientFactory.getOdataClientForSAPCRM(\"P2001242818\",\"D45Y;YgQ38A~&x,g\");\n//       this.oDataClient = GainsightODataSAPClientFactory.getOdataClientForSAPCRM(\"P2001282680\",\"Sap123$4\");\n       LOGGER.debug(\"Instantiated the OData Client !!\");\n    }\n\n    @AfterEach\n    public void tearDown(){\n        this.oDataClientWithUserNamePwd = null;\n        LOGGER.debug(\"Destroyed OData Client !!\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Pull Entity Data\")\n    @Order(1)\n    public void listAllObjects() throws IOException {\n        List<String> objectListExpected = Lists.newArrayList(\"Account\",\"Opportunity\",\"Contact\",\"Lead\",\"Case\");\n        List result =  (List) gainsightSapCrmFetchService.getAllEntityNamesAvailable(oDataClientWithUserNamePwd);\n        Assertions.assertIterableEquals(objectListExpected,result,\"Objects missing !!\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Pull Entity Data\")\n    @Order(2)\n    public void getEntityMetadata() throws IOException {\n        As","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7455918c-eccc-4dcd-bcb0-54bcce570673","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":169,"endLine":191,"content":".readValue(errorResponse, HashMap.class);\n                    if (errorMessageMap.containsKey(\"error\")) {\n                        throw new SystemException(errorMessageMap.get(\"error\"), CoreErrorCode.AUTHENTICATION_ERROR, HttpStatus.SC_BAD_REQUEST);\n                    }\n                } catch (SystemException ex) {\n                    throw ex;\n                } catch (Exception ex) {\n                    LOGGER.error(\"Exception occurred: {}\", ex.getMessage(), ex);\n                    throw new SystemException(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage());\n                }\n                throw new SystemException(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage());\n            }\n            InputStream inputStream = entity.getContent();\n            String jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n\n            LOGGER.info(\"Populating token information into connection\");\n            Map<String, Object> map = GainsightUtils.OBJECT_MAPPER.readValue(jsonResponse, new TypeReference<Map<String, Object>>() {\n            });\n            Object expiresInObject = map.get(\"expires_in\");\n            Long expiresIn = Objects.isNull(expiresInObject) ? null : Long.valueOf(GainsightUtils.valueOf(expiresInObject));\n            BaseTokenDetail tokenDetail =\n                    new BaseTokenDetail(CryptHandler.getInstance().encrypt(GainsightUtils.valueOf(map.get(\"access_token\"))),\n                    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"42bd7b15-ff2f-4353-ab73-a9bc623e3406","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceMetadataServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.connector.sfdc.service;\n\nimport com.gainsight.bean.account.SalesforceToken;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.sfdc.bean.SFDCMetadataTypeEnum;\nimport com.gainsight.integration.utils.FeatureToggleUtil;\nimport com.gainsight.integration.utils.HttpResponse;\nimport com.gainsight.integration.utils.HttpUrlConnectionUtils;\nimport com.gainsight.integration.utils.SfdcTokenUtil;\nimport com.gainsight.properties.DeploymentProperties;\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.apache.commons.codec.CharEncoding;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport java.net.URLEncoder;\nimport java.util.Map;\n\nimport static utils.Constants.CONTENT_TYPE;\n\n@Service\npublic class SalesforceMetadataServiceImpl implements SalesforceMetadataService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SalesforceMetadataServiceImpl.class);\n    private static final String SALESFORCE_SERVICES_DATA = \"/services/data/\";\n    private static final String SALESFORCE_GLOBAL_OBJECTS = \"/sobjects/\";\n    private static final String SALESFORCE_OBJECTS_DESCRIPTION = \"/sobjects/%s/describe/\";\n    private stat","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"69d8b9ef-92a8-4d9e-95d5-46718762617d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":236,"endLine":257,"content":";\n            StringEntity stringEntity = new StringEntity(String.format(BQ_QUERY_SCRIPT, query,maxResult), StandardCharsets.UTF_8);\n            this.httpPost.setEntity(stringEntity);\n            HttpResponse response = null;\n            JsonArray arr = new JsonArray();\n            int retryCount = ALLOWED_RETRIES;\n            Map<String, Object> responseMap = new HashMap<>();\n            while (retryCount-- > -1) {\n                response = this.httpclient.execute(httpPost);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                    responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n                    List<String> header = new ArrayList<>();\n                    Map<String ,String> fieldToDataTypeMap = new HashMap<>();\n                    if (responseMap.get(SCHEMA) != null && ((List) ((Map) responseMap.get(SCHEMA)).get(\"fields\")).size() > 0) {\n                       ((List<Map<String, String>>) ((Map) responseMap.get(SCHEMA)).get(\"fields\")).stream().forEach(field -> {\n                            header.add(field.get(\"name\"));\n                            fieldToDataTypeMap.put( field.get(\"name\"),field.get(\"type\"));\n                       });\n                    }\n                    if (responseMap.containsKey(ROW) && Integer.parseInt(responseMap.get(\"totalRows\").toString()) > 0) {\n                        Gson gson = new Gson(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dce3068f-61e1-44ff-8bb4-c85589674505","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelFactory.java","startLine":1,"endLine":35,"content":"package com.gainsight.integration.connector.zoom.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\n\npublic class GainsightZoomChannelFactory {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightZoomChannelFactory.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String COLON_SEPARATOR = \":\";\n\n    public GainsightZoomChannelFactory() {\n    }\n\n    public GainsightZoomChannelService getChannelServiceWithOAuth20WithAccessToken(String clientId, String clientSecret,\n                                                                                      String refreshToken,\n                                                                                      String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"142d35e2-acfd-436a-b89a-742d5e948bad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":134,"endLine":152,"content":"tFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescriptionWithModificationMetadata(String name, String label, String canonicalname, String type, String fieldType, ModificationMetadata modificationMetadata) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = new GainsightHubspotFieldDescriptionV3(name, label, canonicalname, type, fieldType, modificationMetadata);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static void addCommonPortalIdFieldRef(List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions, GSHubSpotEntityEnum entity) {\n        String fieldName = GSHubSpotEntityEnum.CONTACT.name().equalsIgnoreCase(entity.name()) ? \"portal-id\" : \"portalId\";\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription11 = new GainsightHubspotFieldDescriptionV3(fieldName, fieldName, fieldName, \"string\", \"text\");\n        gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription11);\n    }\n\n    private static void addCommonDeletedFieldRef(List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription03 = new GainsightHubspotFieldDescriptionV3(\"isDeleted\", \"isDeleted\", \"isDeleted\", \"bool\", \"booleancheckbox\");\n        gainsightHubspotFieldD","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f1b4c285-cad2-450a-b3e6-cb86bda1c659","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":576,"endLine":608,"content":"imeFormatter dtf = DateTimeFormatter.ofPattern(field.getDateTimeProperties().getFormat());\n                        LocalDate localDate = LocalDate.parse(object.toString());\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(dtf));\n                    } else {\n                        map.put(resultSet.getMetaData().getColumnLabel(i + 1), object);\n                    }\n                }\n                recordValues.add(map);\n\n                if (recordValues.size() >= maxRecordsPerBatch) {\n                    writeToFile(fileList, filePosition, recordValues, fileDir, jobId, maxFileSizeInMB);\n                    recordValues.clear();\n                }\n            }\n            if (!recordValues.isEmpty()) {\n                writeToFile(fileList, filePosition, recordValues, fileDir, jobId, maxFileSizeInMB);\n                recordValues.clear();\n            }\n            LOGGER.info(\"Total files created is: {}\", fileList.size());\n            return fileList;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while fetching data: {}\", ex.getMessage(), ex);\n            for (File file : fileList) {\n                file.deleteOnExit();\n            }\n            throw new SQLException(\"Error occurred while trying to fetch data\", ex);\n        } finally {\n            closeQuietly(this.connection, resultSet, stat);\n        }\n    }\n\n    @Override\n    public Map<String, Object> loadBulkData(DuctDataOperation ductDataOperation, PN","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2caa2caa-a14c-4d0b-8f70-7cef1c0f7942","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":620,"endLine":642,"content":"               }\n            }\n\n            httpClient = HttpClients.createDefault();\n            String requestPayload;\n            switch (ductDataOperation) {\n                case INSERT:\n                    HttpPost httpPost = new HttpPost(url);\n                    httpPost.setHeader(CONTENT_TYPE, MediaType.APPLICATION_JSON);\n                    httpPost.setHeader(AUTHORIZATION, BEARER + accessToken);\n\n                    requestPayload = OBJECT_MAPPER.writeValueAsString(requestMap);\n                    httpPost.setEntity(new StringEntity(requestPayload, ContentType.APPLICATION_JSON));\n                    try (CloseableHttpResponse response = httpClient.execute(httpPost)) {\n                        if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_NO_CONTENT == response.getStatusLine().getStatusCode()) {\n                            result.put(STATUS, GSIntegration.SUCCESS);\n                        } else if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_UNAUTHORIZED == response.getStatusLine().getStatusCode()) {\n                            String errCode = String.format(\"Status Line: %s %s\", response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n                            result.put(STATUS, GSIntegration.FAILED);\n                            result.put(ERROR_MESSAGE, errCode);\n                        } else {\n                            HttpEntity entity = response.getEntity();\n                            if (entity","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6b53665-b9ac-4de2-a342-b5b9a7c2be90","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":525,"endLine":547,"content":"rojection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(msDynamicsObject, getRecordsRequest.getProjections(), relationships, masterLookUpConfiguration);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n        for (String[] expandedGroupSplittedSingle : expandGroupSplitted) {\n            List<String> expandFields = expandGroupWithFilter.getOrDefault(expandedGroupSplittedSingle[0], Lists.newArrayList());\n            expandFields.add(expandedGroupSplittedSingle[1]);\n            expandGroupWithFilter.put(expandedGroupSplittedSingle[0], expandFields);\n        }\n        Set<String> lookUpFieldNames = Sets.newHashSet();\n        for (Map.Entry<String, List<String>> entry : expandGroupWithFilter.entrySet()) {\n            lookUpFieldNames.add(entry.getKey() + \"($select=\" + String.join(\",\", entry.getValue()) + \")\");\n        }\n\n        RecordResponseGenerator recordResponseGenerator = new RecordResponseGenerator(getRecordsRequest);\n        try {\n            ClientEntitySet clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n              ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c984b642-8a5c-4561-8898-c290f98faa32","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/AdapterErrorMessages.java","startLine":45,"endLine":72,"content":"ull\"),\n    OAUTH_CLIENT_ID_NULL(\"OAuth2 Client Id is null\"),\n    OAUTH_CLIENT_SECRET_NULL(\"OAuth2 Client Secret is null\"),\n    DATABASE_NAME_NULL(\"The Database name is null\"),\n    DATASET_ID_NULL(\"The Dataset id is null\"),\n    ZOOM_ACCESS_TOKEN_EXPIRED(\"Zoom access token expired\"),\n    ZOOM_API_FETCH_FAILED(\"Zoom api fetch failed due to :{}\"),\n    ZOOM_API_FETCH_FAILED_WITH_MAX_RETRIES(\"Zoom api fetch failed after maximum retries\"),\n    INVALID_VALUE_FOR_REQUIRED_KEYS(\"Invalid Value for required Keys\"),\n    MSTEAMS_ACCESS_TOKEN_EXPIRED(\"MS Teams access token expired\"),\n    MSTEAMS_API_FETCH_FAILED(\"MS Teams api fetch failed due to :{}\"),\n    MSTEAMS_API_FETCH_FAILED_WITH_MAX_RETRIES(\"MS Teams api fetch failed after maximum retries\"),\n    DYNAMICS_ACCESS_TOKEN_EXPIRED(\"MS Dynamics access token expired\"),\n    DYNAMICS_WRITEBACK_FAILED(\"Writeback to Dynamics failed. Check the error file for details.\"),\n    WRITEBACK_OPERATION_NOT_DEFINED(\"Writeback operation not defined.\");\n\n    private final String defaultMessage;\n    private static final Logger LOGGER = LoggerFactory.getLogger(AdapterErrorMessages.class);\n\n    AdapterErrorMessages(String defaultMessage) {\n        this.defaultMessage = defaultMessage;\n    }\n\n    public String getTranslatedMessage() {\n        try {\n            return ConnectorI18nService.getTranslation(this.name(), defaultMessage, RequestContextProvider.getTenantLanguage());\n        } catch (Exception ex) {\n            LOGGER.error(\"Error occurred while fetching","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f61a950-c35a-4ace-b8ae-ed3734e7ead2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/ChangeEventDto.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\n\nimport java.util.List;\nimport java.util.Map;\n\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"json_sub_type\")\n@JsonSubTypes({\n        @JsonSubTypes.Type(value = SfdcChangeEventDto.class, name = \"SFDC\"),\n        @JsonSubTypes.Type(value = GainsightChangeEventDTO.class, name = \"gs\"),\n        @JsonSubTypes.Type(value = GainsightModelChangeEventDTO.class, name = \"gs_model\"),\n        @JsonSubTypes.Type(value = DuctChangeEventDTO.class, name = \"duct\"),\n})\npublic interface ChangeEventDto {\n    String fetchChangeType();\n\n    List<String> recordIds();\n\n    Map<String,Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap);\n\n    Map<String, Object> fetchChangeFieldsMap();\n\n    boolean batchableWith(ChangeEventDto changeEventDto);\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6e39f96-db7f-41ec-9633-78cbb4cdf105","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":812,"endLine":843,"content":"oreFile = new File(RequestContextProvider.getTenantId() + UNDERSCORE + UUID.randomUUID() + UNDERSCORE + \"truststore.jks\");\n            try (FileOutputStream fos = new FileOutputStream(trustStoreFile)) {\n                truststore.store(fos, TRUSTSTORE_FILE_PWD.toCharArray());\n                return trustStoreFile;\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while creating trustStore: {}\", ex.getMessage(), ex);\n            throw ex;\n        } finally {\n            FileUtils.deleteQuietly(sslCertificate);\n        }\n    }\n\n    public static void decodeBase64ToFile(String base64String, File file) throws IOException {\n        byte[] decodedBytes = Base64.getDecoder().decode(base64String);\n        try (FileOutputStream fos = new FileOutputStream(file)) {\n            fos.write(decodedBytes);\n        }\n    }\n\n    private static void addCertificateToTruststore(KeyStore truststore, File certFile, String alias) throws Exception {\n        try (FileInputStream fis = new FileInputStream(certFile)) {\n            Certificate cert = CertificateFactory.getInstance(\"X.509\").generateCertificate(fis);\n            truststore.setCertificateEntry(alias, cert);\n        }\n    }\n\n    private List<Map<String, Object>> executeWithMapListHandler(PreparedStatement preparedStatement) {\n        try (ResultSet resultSet = preparedStatement.executeQuery()) {\n            return new MapListHandler().handle(resultSet);\n        } catch (SQLException sqlException) {\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ea5d3a8-da20-4f42-953c-10d8277d6605","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpResponse.java","startLine":134,"endLine":145,"content":"ngth='\" + contentLength + '\\'' +\n                '}';\n    }\n\n    public Map<String, List<String>> getResponseHeaders() {\n        return responseHeaders;\n    }\n\n    public void setResponseHeaders(Map<String, List<String>> responseHeaders) {\n        this.responseHeaders = responseHeaders;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8e4cd63c-fa9a-4545-bf52-19939ae074ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":817,"endLine":840,"content":"r, ClientEntitySet clientEntitySet,\n                                 Set<String> expandGroup, Map<String, Map<Integer, String>> optionSetMap,\n                                 Map<String,Set<String>> modifiedProjectionToOriginalProjections, boolean isPrimitiveDateTimeConversionRequired){\n        List<ClientEntity> clientEntityList = clientEntitySet.getEntities();\n        for(ClientEntity clientEntity: clientEntityList){\n            Map<String, Object> record = Maps.newHashMap();\n            for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                Object value = extractValue(clientProperty, optionSetMap, isPrimitiveDateTimeConversionRequired);\n                if (modifiedProjectionToOriginalProjections.containsKey(clientProperty.getName())) {\n                    for (String projection : modifiedProjectionToOriginalProjections.get(clientProperty.getName())){\n                        record.put(projection, value);\n                    }\n                } else {\n                    record.put(clientProperty.getName(), value);\n                }\n            }\n            if(CollectionUtils.isNotEmpty(expandGroup)){\n                extractLookUpValue(expandGroup, clientEntity, record, modifiedProjectionToOriginalProjections, isPrimitiveDateTimeConversionRequired);\n            }\n            recordResponseGenerator.addRecords(record);\n        }\n    }\n\n    private void generateRecords(RecordResponseGenerator recordResponseGenerator, ClientEntitySet clientEntity","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ee76c817-3654-4582-9c84-38bee2a9902c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":472,"endLine":489,"content":"ConfigAttributes, String objectName,\n                                                     PNPConnectionsInfo pnpConnectionsInfo, Criteria criteria,\n                                                     Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam) throws Exception {\n    return getHttpClientForDataRequest(metadataEngineConfig, metadataApiConfigAttributes, objectName, pnpConnectionsInfo, criteria, flattenConnectionInfo, paginationInfo, queryParam, null);\n  }\n\n  @Override\n  public HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig, ApiConfigAttributes metadataApiConfigAttributes, String objectName, PNPConnectionsInfo pnpConnectionsInfo, Criteria criteria, Map<String, Object> flattenConnectionInfo, Map<String, Object> paginationInfo, Map<String, String> queryParam, Map<String, Object> generatedRequestBody) throws Exception {\n    List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n    Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"Auth Type not present\");\n    authDetails = authDetailsOp.get();\n\n    Map<String, String> queryParams = new HashMap<>();\n    if (authDetails.getQueryParamDetails() != null) {\n      for (AuthApiA","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dd03cfc6-c835-47d7-b6f4-e3c9e06fc055","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/ConnectorSystemAssetEventPayload.java","startLine":1,"endLine":66,"content":"package com.gainsight.integration.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@org.codehaus.jackson.annotate.JsonIgnoreProperties(ignoreUnknown = true)\npublic class ConnectorSystemAssetEventPayload implements Serializable {\n\n    private static final long serialVersionUID = -5224107279693735010L;\n\n    private String tenantId;\n    private String assetType;\n    private String assetId;\n    private String operationType;\n    private String operation;\n    private String consumer;\n    private String connectionId;\n    private String requestId;\n    private Map<String, Object> consumerProperties;\n\n    // Getter methods\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public String getAssetType() {\n        return assetType;\n    }\n\n    public String getAssetId() {\n        return assetId;\n    }\n\n    public String getOperationType() {\n        return operationType;\n    }\n\n    public String getOperation() {\n        return operation;\n    }\n\n    public String getConsumer() {\n        return consumer;\n    }\n\n    public String getConnectionId() {\n        return connectionId;\n    }\n\n    public String getRequestId() {\n        return requestId;\n    }\n\n    public Map<String, Object> getConsumerProperties() {\n        return consumerProperties;\n    }\n\n    // Setter methods\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n    }\n\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0207ed77-98f6-4dd7-906a-edd30b0decf2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":184,"endLine":209,"content":"= String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.\\n\" +\n                        \"Remove the field from connector mappings and re-run the job.\", fieldName);\n                throw new Exception(comments);\n            } else {\n                throw new Exception(batchStateMessage);\n            }\n        } else if (batchState.equals(SalesforceBatchStatus.COMPLETED.batchState()) && numberRecordsProcessed == 0) {\n            LOGGER.info(\"No data Fetched\");\n            return new ArrayList<>();\n        } else if ((batchState.equals(SalesforceBatchStatus.COMPLETED.batchState()) && numberRecordsProcessed > 0)) {\n            return getBatchResults(sfdcJobId, batchId, 0, pnpConnectionsInfo, sfdcApiversion, filePath, fileNamePrefix, clientId, clientSecret, refreshToken);\n        } else {\n            throw new SystemException(CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    private Document pollForBatchToComplete(PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret,\n                                            String refreshToken, String jobId, int retryCount, String sfdcApiVersion) {\n        try {\n            long endTime = System.currentTimeMillis() + SALESFORCE_BATCH_POLLER_TIME;\n            int count = 1;\n            Document batchDetails = null;\n            String batchState = null;\n            do {\n                if (System.currentTimeMillis() >= endTime) {\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dd19d70-5d72-4387-b8a4-1eccf86308fd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":138,"endLine":151,"content":"OriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST)) {\n                        multiPicklistColumns.add(projection);\n                    }\n                    if (Objects.nonNull(targetLookupField)\n                            && (targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.LOOKUP.getValue())\n                            || targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.CUSTOMER.getValue())\n                            || targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.OWNER.getValue()))\n                    ) {\n                        expandGroup.add(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\");\n                        modifiedExpandToOriginalFieldName.put(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\",\n                                mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1]);\n\n                        modifiedProjectionToOriginalProjections.putIfAbsent(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\", Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\").add(projection);\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12c19268-647d-4835-a3ae-2d7db8d01e36","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImplTest.java","startLine":94,"endLine":117,"content":"llEntityData(String entityName){\n        try {\n            String serviceUrl = \"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CAMPAIGN_SRV;v=0002/\";\n            InputStream entityData = gainsightSapMktFetchService.pullEntityData(oDataClientForApiKey,entityName,5,serviceUrl);\n            assertNotNull(entityData,String.format(\"Error while fetching data for entity with name %s \",entityName));\n            Iterator<JsonNode> dataNodes = MAPPER.readTree(entityData).get(\"d\").get(\"results\").getElements();\n//            Assert.assertTrue(String.format(\"No data found for entity with name {%s}\",entityName), dataNodes.hasNext());\n            dataNodes.forEachRemaining(jsonNode -> {\n                LOGGER.info(jsonNode.toString());\n            });\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(),e);\n            fail(e.getMessage());\n        }\n    }\n}\n\n/**\n *   scratch-pad\n *\n * //@EnabledIfEnvironmentVariable(named = \"ENV\", matches = \"staging-server\")\n * //@EnabledIfSystemProperty(named = \"os.arch\", matches = \".*64.*\")\n * //@SuiteDisplayName(\"JUnit Platform Suite SAP_MKT\")\n **/","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bedafe99-a401-4017-8b81-ef7cf032aada","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":713,"endLine":763,"content":"red statement\n      preparedStatement.setString(1, this.schema);\n      // Execute the query\n      resultSet = preparedStatement.executeQuery();\n\n      if (resultSet.next()) {\n        int count = resultSet.getInt(COUNT);\n        if (count <= 0) {\n          throw new SystemException(CONNECTION_AUTHORIZATION_FAILURE);\n        }\n      } else {\n        throw new SystemException(CONNECTION_AUTHORIZATION_FAILURE);\n      }\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] Connection authentication failed: \", ex);\n      throw new SystemException(CONNECTION_AUTHORIZATION_FAILURE);\n    } finally {\n      // Close the ResultSet, PreparedStatement, and Connection to release resources\n      closeConnectionQuietly(connection, resultSet, preparedStatement);\n    }\n\n  }\n\n  private void closeConnectionQuietly(Connection connection, ResultSet resultSet,\n                                      Statement preparedStatement) {\n    try {\n      if (resultSet != null)\n        resultSet.close();\n    } catch (SQLException se) { //NOSONAR\n    }\n    try {\n      if (preparedStatement != null)\n        preparedStatement.close();\n    } catch (SQLException se) { //NOSONAR\n    }\n    try {\n      if (connection != null) {\n        connection.close();\n      }\n    } catch (SQLException se) { //NOSONAR\n    } finally {\n      this.connection = null;\n    }\n  }\n\n\n  public void loadSAPDriver() {\n    try {\n      log.info(\"[SAP DATASPHERE] Loading JDBC Driver\");\n      Class.forName(\"com.sap.db.jdbc.Driver\");\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a595f9af-b98f-4326-87de-0313e65e7893","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.connector.aha.service;\n\nimport com.gainsight.integration.bean.enums.AuthenticationType;\nimport com.gainsight.integration.connector.aha.bean.GainsightAhaEntityEnum;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\npublic class GainsightAhaChannelServiceImpl implements GainsightAhaChannelService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightAhaChannelServiceImpl.class);\n\n    AuthenticationType authenticationType;\n    private String apiKey;\n\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n\n\n    protected GainsightAhaChannelServiceImpl(String apiKey) {\n        this.apiKey = apiKey;\n        this.authenticationType = AuthenticationType.API_KEY;\n        validate();\n        this.httpclient = HttpClients.createDefault();\n        this.httpGet = new HttpGet();\n        this.httpPost = new HttpPo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f6ee1fe-3cbb-448b-8e18-1645481659b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":71,"endLine":100,"content":"age\";\n  private static final String SELECT_FROM_TARGET_TABLE_QUERY = \"SELECT * FROM %1$s\";\n\n  private static final String INSERT_INTO_TARGET_TABLE_QUERY = \"MERGE INTO %1$s \" + TARGET_TABLE_ALIAS +\n          \" USING %2$s \" + STAGE_TABLE_ALIAS +\n          \" ON 1=2 \" +\n          \" WHEN NOT MATCHED THEN \" +\n          \"INSERT (%3$s) VALUES (%4$s)\";\n  private static final String UPDATE_TARGET_TABLE_QUERY = \"MERGE INTO %1$s \" + TARGET_TABLE_ALIAS +\n          \" USING %2$s \" + STAGE_TABLE_ALIAS +\n          \" ON %3$s \" +\n          \" WHEN MATCHED THEN \" +\n          \" UPDATE \" +\n          \" SET %4$s \";\n  private static final String UPSERT_INTO_TARGET_TABLE_QUERY = \"MERGE INTO %1$s \" + TARGET_TABLE_ALIAS +\n          \" USING %2$s \" + STAGE_TABLE_ALIAS +\n          \" ON %3$s \" +\n          \" WHEN MATCHED THEN \" +\n          \" UPDATE \" +\n          \" SET %4$s \" +\n          \" WHEN NOT MATCHED THEN \" +\n          \" INSERT (%5$s) VALUES (%6$s) \";\n\n  private static final String TOTAL_RECORDS_QUERY = \"SELECT COUNT(1) AS row_count FROM %1$s\";\n  private static final String DROP_TABLE_QUERY = \"DROP TABLE %1$s\";\n  private static final String AND = \" AND \";\n  private static final String CONNECTION_AUTHORIZATION_FAILURE = \"Error occurred while authorizing connection\";\n  private static final String PROPERTIES_MISSING_ERROR = \"Error occurred while performing action\";\n  private static final String UNSUPPORTED_AUTH_TYPE = \"Unsupported authorization type\";\n  private static final List<AuthorizationType> SUPPORTED","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"49f0f54a-df46-4b4d-bdfe-f9fd003a5fbd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":254,"endLine":274,"content":"        });\n                    }\n                    if (responseMap.containsKey(ROW) && Integer.parseInt(responseMap.get(\"totalRows\").toString()) > 0) {\n                        Gson gson = new Gson();\n                        arr = gson.toJsonTree(responseMap.get(ROW)).getAsJsonArray();\n                        arr = convertBqData(arr, header,fieldToDataTypeMap);\n                    }\n                    break;\n                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n                    LOGGER.error(\"BigQuery Bad Request\");\n                    throw new Exception(\"Invalid Request\");\n                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"BigQuery access token expired\");\n                    throw new Exception(\"BigQuery access token expired\");\n                } else if (retryCount <= -1) {\n                    LOGGER.error(\"The api call to BigQuery failed for retry count : {} due to status: {} , code :{}\", retryCount,\n                            response.getStatusLine(), response.getStatusLine().getStatusCode());\n                    throw new Exception(\"BigQuery api fetch failed due to :{}\" + response.getStatusLine());\n                } else {\n                    LOGGER.error(\"Sleeping for 1 secs as the api call to BigQuery failed for retry count : {} due to : {}, code :{}\",\n                            retryCount, response.getStatusLine(), response.getStatus","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f31aeea3-7058-46ff-a7cf-5912754efe4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":534,"endLine":562,"content":">();\n        if(CollectionUtils.isNotEmpty(fields)) {\n            for (Map<String, Object> field : fields) {\n                GainsightBiqQueryFieldDescription gainsightBiqQueryFieldDescription = new GainsightBiqQueryFieldDescription();\n                gainsightBiqQueryFieldDescription.setName(field.get(\"name\").toString());\n                gainsightBiqQueryFieldDescription.setLabel(field.get(\"name\").toString());\n                gainsightBiqQueryFieldDescription.setType(field.get(\"type\").toString());\n                fieldDescriptions.add(gainsightBiqQueryFieldDescription);\n            }\n        }\n        return fieldDescriptions;\n    }\n\n\n    private String getAccessTokenFromRefreshToken() {\n        try {\n            if (this.authorizationType.equals(SERVICE_ACCOUNT)) {\n                return getAccessTokenForServiceAccount(this.serviceAccountJson);\n            }\n            {\n                String url = BIGQUERY_ACCESS_TOKEN_URL_KEY + TOKEN;\n                CloseableHttpClient httpclient = HttpClients.createDefault();\n                HttpPost httpPost = new HttpPost(url);\n                httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                httpPost.setHeader(\"charset\", \"UTF-8\");\n                List<NameValuePair> params = new ArrayList<>(4);\n                params.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n                params.add(new BasicNameValuePair(\"client_id\", clientId));\n                params.add(new BasicNameValu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20c3c1e5-d752-4b42-bb84-78f01472740c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":244,"endLine":264,"content":"ionsInfo, clientId, clientSecret, refreshToken, jobId, ++retryCount, sfdcApiVersion);\n            }\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    private List<File> getBatchResults(String sfdcJobId, String batchId, int retryCount, PNPConnectionsInfo pnpConnectionsInfo,\n                                       String sfdcApiVersion, String filePath, String fileNamePrefix, String clientId, String clientSecret, String refreshToken) {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);\n        headers.put(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_UTF8_VALUE);\n        try {\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n            String url = salesforceToken.getInstanceURL() + SALESFORCE_SERVICE_DATA + sfdcApiVersion +\n                    String.format(SALESFORCE_BATCH_RESULT, sfdcJobId, batchId);\n            HttpResponse response = httpUrlConnectionUtils.get(url, headers, null);\n            Document resultDetails = UCXMLUtility.convertStringToXMLDocument(response.getRespMsg());\n            if (response.getResponseCode() == HttpStatus.SC_OK) {\n                List<String> result = UCXMLUtility.getElementValuesById(resultDetails, \"result\");\n                return retrieveResultsFromResultId(sfd","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4dbe9d6f-7665-4f9d-81c7-6c2ab0f586ab","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightModelChangeEventDTO.java","startLine":55,"endLine":81,"content":" String moduleName;\n\n    private String executionId;\n\n    @Override\n    public String fetchChangeType() {\n        String operationPrefix = \"MODEL_\";\n        if(RealTimeConstants.PEOPLE_MODULE_NAME.equals(moduleName)) {\n            if(fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().containsKey(PERSON_OBJECT_NAME) && ObjectUtils.isEmpty(fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().get(PERSON_OBJECT_NAME).getOperationType())) {\n                return operationPrefix+fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().get(PERSON_OBJECT_NAME).getOperationType();\n            } else if(fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().containsKey(COMPANY_PERSON_OBJECT_NAME)) {\n                return operationPrefix+fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().get(COMPANY_PERSON_OBJECT_NAME).getOperationType();\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public Map<String, Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap) {\n        return new ObjectMapper().convertValue(this, Map.class);\n    }\n\n    @Override\n    public Map<String, Object> fetchChangeFieldsMap() {\n        Map<String, Object> map = new HashMap<>();\n        for(Map.Entry<String, FieldTrackingHistoryDetails> fieldTrackingHistoryDetailsEntry: this.fieldTrackingModuleHistoryDetails.getFieldTrackingHistoryDetails().entrySet()) {\n            String objectName = fieldTrackingHistory","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aaa79f44-05b0-40a5-928e-9676014c0f50","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":202,"endLine":234,"content":" });\n    }\n\n    public HttpResponse delete(String requestURL, Map<String, Object> headers, Map<String, Object> queryParams) throws Exception {\n        HttpResponse resp = new HttpResponse();\n        HttpURLConnection httpConn = null;\n        try {\n            String queryParamsString = buildQueryParams(queryParams);\n            if (queryParamsString != null)\n                requestURL = requestURL + \"?\" + queryParamsString;\n            URL url = new URL(requestURL);\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setRequestMethod(\"DELETE\");\n            addHeaders(httpConn, headers);\n            InputStream is = null;\n            if (httpConn != null) {\n                is = httpConn.getInputStream();\n            } else {\n                throw new IOException(\"Connection is not established.\");\n            }\n            resp.setResponseIs(is, false);\n            resp.setResponseCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (IOException e) {\n            LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n            InputStream es = null;\n            if (null != httpConn.getErrorStream()) {\n                es = ((HttpURLConnection) httpConn).getErrorStream();\n                resp.setErrIs(es);\n            } else {\n                LOGGER.error(\"Recieved empty error response\");\n            }\n            resp.setErrorCode(httpConn.getResponseCode());\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ef5931cd-6861-4f2a-96b8-c96e9a36daa5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":121,"endLine":144,"content":"pWatch.getTime());\n\n        Map metadata = constructDynamicsObjectDefinition(extractedData, pnpConnectionsInfo, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        return OBJECT_MAPPER.convertValue(metadata, ObjectDefinition.class);\n    }\n\n    private Map<String, Object> describeDynamicsObject(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets,\n                                                       List<String> fields, boolean fetchAttributesForOnlyRequestedFields) {\n        LOGGER.info(\"tId: {}. Inside describeObject. MSDynamicsObjectQuery: {}. includeColumns: {}. resolveOptionSets: {}\", RequestContextProvider.getTenantId(), query, includeColumns, resolveOptionSets);\n        if (null == query) {\n            throw new IllegalArgumentException(AdapterErrorMessages.OBJECT_SEARCH_QUERY_NULL.getTranslatedMessage());\n        }\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(\"EntityDefinitions\");\n        String filter;\n        if (StringUtils.isNotEmpty(filter = query.buildFilter())) {\n            absoluteUri.filter(filter);\n        }\n        String[] projections;\n        if (ArrayUtils.isNotEmpty(projections = query.buildProjections())) {\n            absoluteUri.select(projections);\n        } else {\n            absoluteUri.select(MSDynamicsObjectQuery.FIELDS_MAPPING.values().toArray(new String[0]));\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33475ce0-2171-4061-b180-a62c4322ba91","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":660,"endLine":693,"content":"ParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n    URIBuilder uriBuilder = new URIBuilder(baseUrl);\n    populateQueryParams(queryParams, uriBuilder);\n    return uriBuilder.build().toString();\n  }\n\n  private Object constructValueFromCriteria(AuthApiAttributes config, Criteria criteria, Map<String, Object> paginationInfo) {\n    Object value = config.getValue();\n    if (config.isStatic())\n      return value;\n\n    TreeSet<String> filterValues = new TreeSet<>();\n    if (value instanceof String) {\n      CommonUtils.getValuesFromFilter(criteria, filterValues, value.toString());\n    } else if (value instanceof Map) {\n      ExternalFilterValueConfig externalFilterValueConfig = OBJECT_MAPPER.convertValue(value, ExternalFilterValueConfig.class);\n      if (paginationInfo != null && !paginationInfo.isEmpty() && externalFilterValueConfig.isPaginationFilter())\n        return null;\n      CommonUtils.getValuesFromFilter(criteria, filterValues, externalFilterValueConfig.getExternalFieldName(), externalFilterValueConfig.getOperator());\n    }\n    if (filterValues.isEmpty())\n      return config.getDefaultValue();\n\n    String val = filterValues.toArray()[0].toString();\n    return dataTypeHandling(config, val);\n  }\n\n  // TODO: Have this timezoneutil as fallback, expected format is as per caas config\n  private Object dataTypeHandling(AuthApiAttributes config, String val) {\n    Object finalVal = null;\n    switch (config.getDataType().toLowerCase()) {\n      case \"d","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e5f649f3-61dc-466f-ae9c-0c567ccb8371","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":188,"endLine":223,"content":"alue.getValue()).append(\"\\n\");\n      } else if (value.isPrimitive()) {\n        b.append(entry.getName()).append(\": \");\n        b.append(entry.getValue()).append(\"\\n\");\n      }\n    }\n    return b.toString();\n  }\n\n  private static void intend(StringBuilder builder, int intendLevel) {\n    for (int i = 0; i < intendLevel; i++) {\n      builder.append(\"  \");\n    }\n  }\n\n  public Edm readEdm(String serviceUrl) throws IOException {\n    EdmMetadataRequest request = client.getRetrieveRequestFactory().getMetadataRequest(serviceUrl);\n    ODataRetrieveResponse<Edm> response = request.execute();\n    return response.getBody();\n  }\n\n  public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntities(Edm edm, String serviceUri, String entitySetName) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).top(1).build();\n    return readEntities(edm, absoluteUri);\n  }\n\n  public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitiesWithFilter(Edm edm, String serviceUri,\n    String entitySetName, String filterName) { //.select\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).filter(filterName).build();\n    return readEntities(edm, absoluteUri);\n  }\n\n  private ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntities(Edm edm, URI absoluteUri) {\n    LOGGER.info(\"URI = \" + absoluteUri);\n    ODataEntitySetIteratorRequest<ClientEntitySet, ClientEntity> request = \n      client.getRetrieveRe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6bdc766e-488a-452f-a934-cfeb6cc88dae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":615,"endLine":642,"content":"   stringEntity = new StringEntity(DHUtils.convertObjectToJson(generatedRequestBody));\n    }\n\n\n    if (!ObjectUtils.isEmpty(queryParam))\n      queryParams.putAll(queryParam);\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(metadataApiConfigAttributes, metadataEngineConfig, objectName,\n        pnpConnectionsInfo, queryParams, flattenConnectionInfo, paginationInfo, stringEntity);\n\n    if (authDetails.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : authDetails.getHeaderDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo, baseUrl, systemToken);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n\n    if (metadataApiConfigAttributes.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : metadataApiConfigAttributes.getHeaderDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n    return httpClientForApiC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7fc3be34-dd7e-4e23-b1a3-bc1747a37c54","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":278,"endLine":297,"content":"           for (String target : targets) {\n                                //Create separate line item for each target.\n                                Map fieldDefinitionClone = new HashMap();\n                                fieldDefinitionClone.putAll(fieldDefinition);\n                                fieldDefinitionClone.put(FIELD_NAME, fieldDefinitionClone.get(FIELD_NAME).toString() + UCConstants.PERIOD + target);\n                                fieldDefinitionClone.put(DB_NAME, fieldDefinitionClone.get(DB_NAME).toString() + UCConstants.PERIOD + target);\n                                LookupDetails lookupDetails = createLookupDetail(target, fieldDefinitionClone.get(FIELD_NAME).toString(),\n                                        fieldDefinitionClone.get(LABEL).toString(), fieldDefinitionClone.get(DB_NAME).toString());\n                                Map<String, Object> metaClone = new HashMap<>();\n                                metaClone.putAll(meta);\n                                metaClone.put(LOOKUP_DETAIL, lookupDetails);\n                                metaClone.put(HAS_LOOKUP, true);\n                                metaClone.put(PROPERTIES, attribute);\n                                fieldDefinitionClone.put(META, metaClone);\n                                fields.add(fieldDefinitionClone);\n                            }\n                            continue;\n                        }\n                    } else {\n                        attribute.put(DATA_PREVIEW_AVA","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02437598-d87f-4fba-aa52-212cb0e33971","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/ExpireUnit.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum ExpireUnit {\n    MILLIS,\n    SECONDS;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7a9c0d66-471a-4fcd-9908-bc0dfbbb20e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":249,"endLine":278,"content":"ResponseType()) && tokenGenerationDetails.getResponseType().equals(ResponseType.XML);\n    Object value = metadataEngineService.executeApi(httpClientForApiCall, responceKey,\n                metadataEngineConfig.getRateLimitDetails(),isXmlResponse);\n    LOGGER.info(\"New key generated for connectorType : {} connectionId : {} ,value is not null : {} \", pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.getConnectionId(),value != null); // need to delete this line\n    if (value instanceof TextNode)\n      return ((TextNode) value).asText();\n    return value;\n  }\n\n  private String getFinalValue(AuthApiAttributes authApiAttributes, Object value) {\n    if (authApiAttributes.getEncoding() != null) {\n      switch (authApiAttributes.getEncoding()) {\n        case BASE_64:\n          value = DHUtils.Base64Encode(value.toString());\n          break;\n      }\n    }\n    if (StringUtils.isNotEmpty(authApiAttributes.getPrefix()))\n      return authApiAttributes.getPrefix() + value;\n    return value.toString();\n  }\n\n  @Override\n  public Object constructValueFromConfig(MetadataEngineConfig metadataEngineConfig, AuthApiAttributes config, PNPConnectionsInfo pnpConnectionsInfo,\n                                          Map<String, Object> flattenConnectionInfo) throws Exception {\n    if (config.isStatic())\n      return config.getValue();\n\n    if (config.getTokenGenerationDetails() != null) {\n      if (ObjectUtils.isEmpty(pnpConnectionsInfo.getTokenDetail().getExpiry()) || pnpConnectionsInfo.getTo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e4a485d8-72d6-427a-80ab-c5961061cb5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/kafka/serde/custom/GSSerializer.java","startLine":1,"endLine":32,"content":"package com.gainsight.integration.kafka.serde.custom;\n\nimport com.gainsight.cryptography.CryptUtil;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.util.Map;\n\npublic class GSSerializer extends StringSerializer {\n\n    private boolean encrypt = true;\n\n    @Override\n    public void configure(Map<String, ?> configs, boolean isKey) {\n        String encryptValue = (String) configs.get(\"gs.encrypt.value\");\n\n        if(isKey || (encryptValue != null && encryptValue.equals(\"false\")))\n            encrypt = false;\n        super.configure(configs, isKey);\n    }\n\n    @Override\n    public byte[] serialize(String topic, String data) {\n        if(data == null)\n            return null;\n        String tmpStr = data;\n        if(encrypt)\n            tmpStr = CryptUtil.getSimpleCryptor().encrypt(data).encoded();\n        return super.serialize( topic,  tmpStr);\n\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12e3b525-ae96-4915-81ba-f1bc44a56e01","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":433,"endLine":451,"content":"xpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    } else {\n                        String newExpandProjection = projection;\n                        if (mappedSourceColumns.length == 3) {\n                            newExpandProjection = mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[2];\n                        }\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(projection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(objectDefinition, getRecordsRequest.getProjections(), relationships, masterLookUpConfiguration, null,\n                objectDefinitionMap, resolvePicklistOptions, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"15242c9e-408f-46ee-a6ab-788e9f60191f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":196,"endLine":224,"content":"sMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubspotFetchService.getPaginatedEntityData(\"CONTACT\",new ArrayList<>(Arrays.asList(\"name\",\"email\",\"state\")),\n                    \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\", offset);\n            Assertions.assertTrue(inputStream != null, \"No data found\");\n            String jsonDataResponse = IOUtils.toString(inputStream);\n\n            Map<String, Object> objectMap = OBJECT_MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n            ArrayList<Object> contacts = (ArrayList<Object>) objectMap.get(\"contacts\");\n            offset = ((Integer)objectMap.get(\"vid-offset\")).longValue();\n            hasMore = (boolean)objectMap.get(\"has-more\");\n            if(hasMore){\n                Assertions.assertEquals(100, contacts.size(), \"Mismatch in response size\");\n            }\n        }\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Owner Entity Data\")\n    @Order(4)\n    void testGetOwnersData() throws Exception {\n\n        InputStream inputStream = gainsightHubspotFetchService.getPaginatedEntityData(\"OWNER\", new ArrayList<>(),\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\", Long.MIN_VALUE);\n        Assertions.assertTrue(inputStream != null, \"No d","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7dbebb36-c774-4170-9e2a-ce6b916ed0b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":246,"endLine":272,"content":"kUpValue(expandGroup, ce, record);\n            }\n            recordResponseGenerator.addRecords(record);\n        }\n        */\n        return new RecordsResponse(recordResponseGenerator.getRecords(), recordResponseGenerator.getCsvFile(),\n            recordResponseGenerator.getBatchQuery(), recordResponseGenerator.getRecordsPulled());\n    }\n\n    @Override\n    public RecordsResponse getPaginatedRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, Map<String, Object> metadataMap,\n                                        String nextPageToken, Integer pageSize, boolean resolvePicklistOptions) {\n        MSDynamicsObject msDynamicsObject;\n        if (MapUtils.isEmpty(metadataMap)) {\n            msDynamicsObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().pluralName(getRecordsRequest.getPluralName()), true, resolvePicklistOptions);\n        } else {\n            msDynamicsObject = MSDynamicsObjectUtil.parseObject(metadataMap);\n            List<Column> columns = MSDynamicsObjectUtil.parseColumns(metadataMap);\n            msDynamicsObject.setColumns(columns);\n        }\n\n        Map<String, MSDynamicsObject> logicalNameToObject = Maps.newHashMap();\n        logicalNameToObject.put(msDynamicsObject.getLogicalName(), msDynamicsObject);\n\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), msDynamicsObject.getPluralName());\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9357b628-e051-4502-951f-195ee0f23f94","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileMerger.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.utils.file;\n\nimport com.gainsight.utils.GainsightUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.StopWatch;\n\nimport java.io.*;\nimport java.util.List;\n\npublic class FileMerger {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightUtils.class);\n\n    private FileMerger() {\n        //utility class\n    }\n\n    public static void mergeFiles(List<File> files, File mergedFile) throws IOException {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n\n        // Header flag to write header only once\n        boolean writeHeader = true;\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(mergedFile))) {\n            if (files != null) {\n                for (File file : files) {\n                    try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n                        String line;\n\n                        // Skip header if not the first file\n                        if (!writeHeader) {\n                            reader.readLine(); // Skip header line\n                        } else {\n                            writeHeader = false;\n                        }\n\n                        // Read and write content from current file\n                        while ((line = reader.readLine()) != null) {\n                            writer.write(line);\n                            writer.newLine();\n                        }\n             ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3cc50fb2-a5f3-43ee-9d3f-4c16aba0f3b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/error/BigQueryErrorCode.java","startLine":1,"endLine":42,"content":"package com.gainsight.integration.connector.service.error;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.exception.ExceptionType;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport exception.ErrorCode;\n\npublic enum BigQueryErrorCode implements ErrorCode {\n\n    CONNECTION_NOT_AUTHORISED(100,\"The connection is not authorised\"),\n    AUTHORIZATION_TYPE_MISSING(2001,\"The authorization Type is missing for the connection\"),\n    INVALID_SERVICE_ACCOUNT_JSON(2000,\"The service Account json associated with connection is invalid\"),\n    AUTHORIZATION_TYPE_INVALID(2002,\"The authorization Type is invalid for the connection\" ),\n    AUTHORIZATION_FAILED(1990,\"The authorization failed . please try re-authorizing the connection\"),\n    UNKNOWN_OPERATION(2003,\"unknown operation\");\n    private final int code;\n    private final String text;\n    private final ExceptionType exceptionType;\n\n    BigQueryErrorCode(int code, String text){\n        this(code, text, ExceptionType.DEFAULT);\n    }\n\n    BigQueryErrorCode(int code, String text, ExceptionType exceptionType){\n        this.code = code;\n        this.text = text;\n        this.exceptionType = exceptionType;\n    }\n\n    @Override\n    public int getEventCode() {\n        return code;\n    }\n\n    @Override\n    public String getGsEventCode() {\n        return \"GS_BIGQUERY\"+code;\n    }\n\n    @Override\n    public String getUserText() {\n        ConnectorI18nService.getTranslation(this.name(),text, RequestContextP","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80c9853c-f393-48bd-aee1-30a0e3067523","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":119,"endLine":138,"content":"ssociations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.calls.results[*].id\", \"Associated Call Ids\", \"associations.calls.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CALL.name()));\n                }\n                break;\n        }\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescription(String name, String label, String canonicalname, String type, String fieldType) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = new GainsightHubspotFieldDescriptionV3(name, label, canonicalname, type, fieldType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescriptionWithReference(String name, String label, String canonicalname, String type, String fieldType, String referenceObjectType) {\n        GainsightHubspotFieldDescriptionV3 gainsightHubspotFieldDescription = new GainsightHubspotFieldDescriptionV3(name, label, canonicalname, type, fieldType, referenceObjectType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescriptionV3 createFieldDescriptionWithModificationMetadata(String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5dad2cf2-c3db-43dc-814b-473f36aa9bce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":362,"endLine":379,"content":"NavigationPropertyName());\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    } else {\n                        expandGroupModified.add(projection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(projection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(msDynamicsObject, getRecordsRequest.getProjections(), relationships, masterLookUpConfiguration);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n        for (String[] expandedGroupSplittedSingle : expandGroupSplitted) {\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"366bf20d-7c04-4438-9c28-cebc747fa037","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":28,"endLine":56,"content":".content.FileBody;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.ws.rs.core.MediaType;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\nimport static utils.Constants.CONTENT_TYPE;\n\npublic class GainsightDatabricksHelper {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightDatabricksHelper.class);\n    private static final String CONTENTS = \"contents\";\n    private static final String ACCESS_TOKEN = \"access_token\";\n    private static final String CSV_APPLICATION_TYPE = \"text/csv\";\n    private static final String FS_PATH_TO_UPLOAD_FILE = \"/FileStore/UC/%1$s/%2$s/%3$s\";\n    private static final String DBFS_URI_TO_UPLOAD_FILE = \"https://%1$s/api/2.0/dbfs/put\";\n    private static final String DBFS_URI_TO_DELETE_FILE = \"https://%1$s/api/2.0/dbfs/delete\";\n    private static final String ACCESS_TOKEN_GENERATION_URI = \"https://%1$s/oidc/v1/token\";\n    public static final Integer DBFS_OPERATIONS_MAX_RETRY_COUNT = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.gs.dbfs.max.retry.count\", 2);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final Cache<String, Object> ACCESS_TOKEN_CACHE = CacheBuilder.newBuild","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eb5370ec-c827-473a-9029-393a3b3636de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelFactory.java","startLine":75,"endLine":99,"content":"   InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    Objects.requireNonNull(accountMap.get(\"access_token\"), AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n                }else{\n                    throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY.getTranslatedMessage());\n                }\n            }else{\n                if(entity != null){\n                    InputStream inputStream = entity.getContent();\n                    jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                    accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), (String)accountMap.get(\"message\")));\n                }else{\n                    throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"[MSTEAMS] Error while getting accessToken\", e);\n            throw e;\n        }\n        return accountMap;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c7e8c09-d462-414b-96e8-9d5a333ad32e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelFactory.java","startLine":46,"endLine":57,"content":"  if (Objects.nonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE))) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE), AdapterErrorMessages.WAREHOUSE_NULL.getTranslatedMessage());\n        } else {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.ORGANIZATION_ID), AdapterErrorMessages.ORGANIZATION_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.CLUSTER_ID), AdapterErrorMessages.CLUSTER_NULL.getTranslatedMessage());\n        }\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.DATABASE_NAME), AdapterErrorMessages.DATABASE_NAME_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.SCHEMA_NAME), AdapterErrorMessages.DATASET_ID_NULL.getTranslatedMessage());\n        return new GainsightDatabricksChannelServiceImpl(properties, isValueEncrypted, authorizationType,mtlsCertificatePath,\n                mtlsCertificatePassword,mtlsBucketName,accessKeyId,secretAccessKey,region);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"96483a0f-bd0c-4756-96a2-546d4917dc5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":324,"endLine":358,"content":"ect> attribute, String key, Object value) {\n        attribute.remove(key);\n        return value;\n    }\n\n    private static LookupDetails createLookupDetail(String target, String fieldName, String fieldLabel, String lookupName) {\n        LookupDetails lookupDetails = new LookupDetails();\n        lookupDetails.setLookupId(lookupName);\n        lookupDetails.setLookupName(lookupName);\n        lookupDetails.setFieldName(fieldName);\n        lookupDetails.setFieldLabel(fieldLabel);\n\n        List<LookupObjectDetails> lookupObjects = new ArrayList<>();\n        lookupObjects.add(new LookupObjectDetails(target, target));\n        lookupDetails.setLookupObjects(lookupObjects);\n        return lookupDetails;\n    }\n\n    private static LookupDetails createLookupDetail(List<String> targets, String fieldName, String fieldLabel, String lookupName) {\n        LookupDetails lookupDetails = new LookupDetails();\n        lookupDetails.setLookupId(lookupName);\n        lookupDetails.setLookupName(lookupName);\n        lookupDetails.setFieldName(fieldName);\n        lookupDetails.setFieldLabel(fieldLabel);\n\n        List<LookupObjectDetails> lookupObjects = new ArrayList<>();\n        for (String targetObject : targets) {\n            lookupObjects.add(new LookupObjectDetails(targetObject, targetObject));\n        }\n        lookupDetails.setLookupObjects(lookupObjects);\n        return lookupDetails;\n    }\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"701055ab-0fee-49bf-a417-9a5d2b32a655","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotSchema.java","startLine":92,"endLine":103,"content":"  public void setProperties(List<GainsightHubspotFieldDescriptionV3> properties) {\n        this.properties = properties;\n    }\n\n    public List<Map<String, Object>> getAssociations() {\n        return associations;\n    }\n\n    public void setAssociations(List<Map<String, Object>> associations) {\n        this.associations = associations;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d36c357a-ec9a-49ea-95bc-7b79039f8154","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Column.java","startLine":1,"endLine":65,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport java.util.Map;\n\npublic class Column {\n\n    private String id;\n    private String fieldName;\n    private String logicalName;\n    private String displayName;\n    private ExternalDataType externalType;\n    private String localType;\n    private String defaultValue;\n    private Integer maxLength;\n    private boolean hasLookup;\n    private String targetObject; //object logical name\n    private boolean isPrimary;\n    private Map<String, Object> properties;\n\n    public boolean isPrimary() {\n        return isPrimary;\n    }\n\n    public void setPrimary(boolean primary) {\n        isPrimary = primary;\n    }\n\n    public String getFieldName() {\n        return fieldName;\n    }\n\n    public void setFieldName(String fieldName) {\n        this.fieldName = fieldName;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public boolean isHasLookup() {\n        return hasLookup;\n    }\n\n    public void setHasLookup(boolean hasLookup) {\n        this.hasLookup = hasLookup;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public Integer getMaxLength() {\n        return maxLength;\n    }\n\n    public void setMaxLength(Integer maxLength) {\n        this.maxLength = maxLen","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2b169d43-24b2-4c02-9600-9657a49a6e4e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":41,"endLine":85,"content":"der == null) {\n            throw new IllegalArgumentException(\"READER null\");\n        }\n        if (reader instanceof BufferedReader) {\n            bufferedReader = (BufferedReader) reader;\n        } else {\n            bufferedReader = new BufferedReader(reader);\n        }\n        this.recordSeparatorPolicy = recordSeparatorPolicy;\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Indicates whether the <code>Reader</code> has more lines.\n     * If there is an <code>IOException</code> then {@link #close()} will\n     * be called on this instance.\n     *\n     * @return {@code true} if the Reader has more lines\n     * @throws IllegalStateException if an IO exception occurs\n     */\n    @Override\n    public boolean hasNext() {\n        if (cachedLine != null) {\n            return true;\n        } else if (finished) {\n            return false;\n        } else {\n            try {\n                while (true) {\n                    final String line = readLine();\n                    if (line == null) {\n                        finished = true;\n                        return false;\n                    } else if (isValidLine(line)) {\n                        cachedLine = line;\n                        return true;\n                    }\n                }\n            } catch (final IOException ioe) {\n                try {\n                    close();\n                } catch (final IOException e) {\n                    ioe.addSuppressed(e);\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2042572c-f5c9-4976-8705-ef801f181b7c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelFactory.java","startLine":23,"endLine":37,"content":"latedMessage());\n        Objects.requireNonNull(clientSecret,AdapterErrorMessages.CLIENT_SECRET_NULL.getTranslatedMessage());\n        Objects.requireNonNull(refreshToken,AdapterErrorMessages.REFRESH_TOKEN_NULL.getTranslatedMessage());\n        return new GainsightBigQueryChannelServiceImpl(clientId,clientSecret,refreshToken,projectId,datasetId);\n    }\n    public GainsightBigQueryChannelService getChannelService(PNPConnectionsInfo pnpConnectionsInfo){\n        if(pnpConnectionsInfo.getConnectionStatus().equals(ConnectionStatus.AUTHORIZED)){\n            if(pnpConnectionsInfo.getAuthorizationType() != null){\n                if(pnpConnectionsInfo.getAuthorizationType().equals(AuthorizationType.OAUTH)){\n                    BaseTokenDetail baseTokenDetail =pnpConnectionsInfo.getTokenDetail();\n                    return   getChannelServiceForOauth(baseTokenDetail.getClientId().getString(),baseTokenDetail.getClientSecret().getString(),CryptHandler.getInstance().decrypt(baseTokenDetail.getRefreshToken()),((Map) pnpConnectionsInfo.getProperties()).get(\"projectId\").toString(),\n                            ((Map) pnpConnectionsInfo.getProperties()).get(\"datasetId\").toString());\n                } else if (pnpConnectionsInfo.getAuthorizationType().equals(AuthorizationType.CUSTOM)) {\n                    String serviceAccountJson = CryptHandler.getInstance().decrypt((byte[]) pnpConnectionsInfo.getProperties().get(\"serviceAccountConfiguration\"));\n                    serviceAccountJson = Gainsigh","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5558362d-d0a2-49e3-98ff-b17fb6e3aae5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/AttributeAuditType.java","startLine":1,"endLine":61,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums.audit;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 17/10/16, 10:44\n */\npublic enum AttributeAuditType {\n  NAME(\"Name\"),\n  KEYS(\"Keys\"),\n  TIMEZONE(\"Timezone\"),\n  PEOPLE_ENGAGEMENT(\"People Engagement\"),\n  EVENT_CALL_TYPE(\"Event Call Type\"),\n  PEOPLE_CALL_TYPE(\"People Call Type\"),\n  GROUP_CALL_TYPE(\"Group Call Type\"),\n  IGNORE_PEOPLE_VALIDATION(\"Ignore People Validation\"),\n  MAPPING(\"Mapping\"),\n  OBJECT(\"Object\"),\n  MAPPING_FILENAME(\"Mapping Filename\"),\n  DATALOAD_OPERATION(\"Data Load Operation\"),\n  JOB_EXECUTION_SET(\"Job Execution Set\"),\n  TASK_INFO(\"TaskInfo\"),\n  JOB(\"Job\"),\n  RTS_FILTER(\"RTS Filter\"),\n  CONNECTION_STATUS(\"Connection Status\")\n  ;\n\n  private String value;\n\n\n  AttributeAuditType(String value){\n    this.value = value;\n  }\n\n  /**\n   * Pre-populate the AttributeAuditType map for performance.\n   */\n  private static final Map<Object, AttributeAuditType> ATTRIBUTE_TYPE_MAP = new HashMap<>();\n\n  static {\n    for (AttributeAuditType type : values()) {\n      ATTRIBUTE_TYPE_MAP.put(type.value.toUpperCase(), type);\n    }\n  }\n\n  /**\n   * @return returns the value of AttributeAuditType\n   */\n  @JsonValue\n  pu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eafd376d-54a6-4aee-a745-8ec5b3c66f9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":23,"endLine":56,"content":"SimpleDateFormat;\nimport java.util.*;\n\n/**\n * @author vipinsharma\n * @version 1.0\n *\n *\n */\n\n@Service\npublic class GainsightSAPChannelServiceImpl implements GainsightSAPChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSAPChannelServiceImpl.class);\n\n    public static final String CONTENT_TYPE_APPLICATION_JSON = \"application/json\";\n    public static final String ACCEPT = \"application/json;odata.metadata=minimal\";\n\n    @Override\n    public int deleteEntity(String serviceUri, String entityName, Object keyValue, ODataClient client){\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entityName).appendKeySegment(keyValue).build();\n        ODataDeleteRequest request = client.getCUDRequestFactory().getDeleteRequest(absoluteUri);\n        request.setAccept(ACCEPT);\n        ODataDeleteResponse response = request.execute();\n        return response.getStatusCode();\n    }\n\n    @Override\n    public int updateEntity(Edm edm, String serviceUri, String entityName, Object keyValue, ClientEntity ce, ODataClient client) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entityName).appendKeySegment(keyValue).build();\n        ODataEntityUpdateRequest<ClientEntity> request = client.getCUDRequestFactory().getEntityUpdateRequest(absoluteUri, UpdateType.PATCH, ce);\n        request.setAccept(ACCEPT);\n        ODataEntityUpdateResponse<ClientEntity> response = request.execute();\n        return respo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"708a1a4b-1f13-4197-a144-db119e29e56e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionsInfo.java","startLine":39,"endLine":107,"content":"JsonIgnoreProperties(ignoreUnknown = true)\npublic class PNPConnectionsInfo  extends MongoBaseBean implements Serializable{\n\n  private static final long serialVersionUID = -1L;\n\n  @Field(\"tenantId\")\n  @Indexed\n  private String tenantId;\n\n  @Field(\"connectionId\")\n  @Indexed\n  private String connectionId;\n\n  @Field(\"userName\")\n  @Indexed\n  private String userName;\n\n  @Field(\"connectionName\")\n  private String connectionName;\n\n  @Field(\"connectionType\")\n  private ConnectorType connectionType;\n\n  @Field(\"authorizationType\")\n  private AuthorizationType authorizationType;\n\n  @Field(\"properties\")\n  private Map<String, Object> properties= Maps.newHashMap();\n\n  @Field(\"tokenDetail\")\n  private BaseTokenDetail tokenDetail;\n\n  @Field(\"connectionDetail\")\n  private BaseConnectionDetail connectionDetail;\n\n  @Field(\"isUsed\")\n  private boolean isUsed;\n\n  @Field(\"timezone\")\n  private String timeZone;\n\n  @Field(\"hashedaccesskey\")\n  private String accessKeyHashed;\n\n  @Field(\"consumer\")\n  private String consumer;\n\n  private String salesforceComponentName;\n\n  private String crmId;\n\n  private ConnectionStatus connectionStatus = ConnectionStatus.INIT;\n\n    private boolean ipaasConnection;\n\n    private boolean cdcEnabled;\n\n    private ResolutionProperties resolutionProperties;\n\n    private InstanceDetail instanceDetail;\n\n    private boolean ssoInstance;\n\n    private SetupStatus setupStatus = SetupStatus.INIT;\n\n    private String version = \"v1\";\n\n  public String getSalesforceComponentName() {\n    return","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c08bd49f-902a-45c0-be97-577770351d34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":280,"endLine":310,"content":"   if (null != resultSet) {\n        resultSet.close();\n      }\n    }\n  }\n\n  @Override\n  public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException {\n    Statement statement = null;\n    ResultSet resultSet = null;\n    try {\n      DateTimeFormatter defaultSrcFormatter =\n              new DateTimeFormatterBuilder().appendPattern(\"yyyy-MM-dd HH:mm:ss\")\n                      .appendFraction(ChronoField.MILLI_OF_SECOND, 0, 9, true)\n                      .toFormatter();\n      List<Map<String, Object>> recordValues = Lists.newArrayList();\n      Map<String, FieldInfo> fieldNameToFieldInfoMap = fieldInfos.stream().collect(Collectors.toMap(FieldInfo::getName, field -> field));\n      log.info(\"[SAP DATASPHERE] Executing query : {} \", query);\n      statement = this.connection.createStatement();\n      resultSet = statement.executeQuery(query);\n\n      while (resultSet.next()) {\n        int columnCount = resultSet.getMetaData().getColumnCount();\n        Map<String, Object> map = new HashMap<>();\n        // Index starts from 1\n        for (int i = 1; i <= columnCount; i++) {\n          String columnName = resultSet.getMetaData().getColumnName(i);\n          Object objectValue = resultSet.getObject(columnName);\n          FieldInfo field = fieldNameToFieldInfoMap.get(columnName);\n          if (objectValue instanceof Timestamp && Objects.nonNull(field.getDateTimeProperties())) {\n            String timezone = StringUtils.defaultIfBlank(field.getDateT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b6636249-3c76-475c-99ae-832d4d29317a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":1019,"endLine":1049,"content":"ry {\n            URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n            if (CollectionUtils.isNotEmpty(projections)) {\n                absoluteUri.select(projections.toArray(new String[projections.size()]));\n            }\n            if (CollectionUtils.isNotEmpty(expandList)) {\n                absoluteUri.expand(expandList.toArray(new String[expandList.size()]));\n            }\n            if (StringUtils.isNotBlank(filterExpression)) {\n                absoluteUri.filter(filterExpression);\n            }\n\n            URI uri = absoluteUri.build();\n            LOGGER.info(\"uri used is {}\", uri);\n            recordResponseGenerator.setBatchQuery(uri.toString());\n            return readEntitiesClientEntitySet(client, uri);\n        } catch (RuntimeException runtimeException) {\n            throw new SystemException(\"GSODATA\", runtimeException);\n        }\n    }\n\n    private Map<String, Set<String>> groupBySelectAndExpand(Set<String> projections){\n        Map<String, Set<String>> result = Maps.newHashMap();\n        Set<String> expandList = projections.stream().filter(str -> str.contains(\".\")).collect(Collectors.toSet());\n        Set<String> selectList = Sets.newHashSet(CollectionUtils.subtract(projections, expandList));\n        result.put(PROJECTION_SELECT, selectList);\n        result.put(PROJECTION_EXPAND, expandList);\n        return  result;\n    }\n\n    private ClientEntitySet readEntitiesClientEntitySet(ODataC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"687a43c0-0ce3-45e8-ae73-a19cac4f4eee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":280,"endLine":304,"content":", int retryCount,\n                                                   PNPConnectionsInfo pnpConnectionsInfo, String sfdcApiVersion,\n                                                   String filePath, String fileNamePrefix, String clientId, String clientSecret,\n                                                   String refreshToken) throws IOException {\n        File file = null;\n        ICSVWriter icsvWriter = null;\n        List<File> fileList = new ArrayList<>();\n        FileOutputStream fos = null;\n        OutputStreamWriter bos = null;\n        try {\n            file = new File(filePath + fileNamePrefix + \"_\" + UUID.randomUUID() + CSV_EXTENSION);\n            fos = new FileOutputStream(file, true);\n            bos = new OutputStreamWriter(fos, StandardCharsets.UTF_8);\n            CSVWriterBuilder writerBuilder = new CSVWriterBuilder(new BufferedWriter(bos));\n\n            writerBuilder.withEscapeChar('\"').withQuoteChar('\"').withSeparator(',');\n            icsvWriter = writerBuilder.build();\n            CSVReader csvReader;\n            fileList.add(file);\n//            mergeMultipleResultIds(sfdcJobId, batchId, resultId, pnpConnectionsInfo, icsvWriter, sfdcApiVersion, filePath, fileNamePrefix);\n            for (int i = 0; i < resultId.size(); i++) {\n                if (file.length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n                    fos.close();\n                    bos.close();\n                    file = new File(filePath + fileNamePrefix + \"_\" + UUID.randomUUID() + CSV_EXTEN","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2fdfd0bc-3355-4c06-ac03-e8c22961af00","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":513,"endLine":537,"content":"   } else if (response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"BigQuery access token expired\");\n                    this.accessToken = getAccessTokenFromRefreshToken();\n                } else if (retry <= -1) {\n                    LOGGER.error(\"The api call to BigQuery failed after max retry due to status: {} , code :{}\",\n                            response.getStatusLine(), response.getStatusLine().getStatusCode());\n                    throw new Exception(\"BigQuery api fetch failed due to :{}\" + response.getStatusLine());\n                } else {\n                    LOGGER.error(\"Sleeping for 15 secs as the api call to BigQuery failed for retry count : {} due to : {}, code :{}\",\n                            retry--, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                    Thread.sleep((15 * 1000));\n                }\n            }\n            return responseMap;\n        } finally {\n            this.httpclient.close();\n            this.httpclient = HttpClients.createDefault();\n        }\n    }\n\n    private List<GainsightBiqQueryFieldDescription> getListOfFields(List<Map<String, Object>> fields) {\n        List<GainsightBiqQueryFieldDescription> fieldDescriptions = new ArrayList<>();\n        if(CollectionUtils.isNotEmpty(fields)) {\n            for (Map<String, Object> field : fields) {\n                GainsightBiqQueryFieldDescription gainsightBiqQueryFieldDescription = new G","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a230fd4f-4f70-4ea6-9ce5-b4cb8efbf846","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelService.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubspotAssociationEnum;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotBulkImportBean;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotSearchRequest;\nimport org.apache.http.HttpResponse;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author : vipinsharma\n * @createdOn : 24 Jun 2019 :: 16:50\n **/\npublic interface GainsightHubspotChannelService {\n\n    boolean authenticateConnection() throws Exception;\n\n    Map<String, Object> getHubspotAccountDetails() throws Exception;\n\n    InputStream getEntityProperties(String entityName) throws Exception;\n\n    InputStream getEntityPropertiesLatest(String entityName) throws Exception;\n\n    HttpResponse getEntityPropertiesLatestCaas(String entityName, String api) throws Exception;\n\n    InputStream getEntityData(String entityName, List<String> projections) throws Exception;\n\n    InputStream getPaginatedEntityData(String entityName, List<String> projections, Long pageNumber) throws Exception;\n\n    InputStream getPaginatedEntityDataLatest(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception;\n\n    InputStream getAssociatedObjects(GSHubspotAssociationEnum gsHubspotAssociationEnum, Integer objectId, Long pageNumber) throws Excep","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9714abd-cbad-4ab7-bfa0-fa43084e05b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":78,"endLine":101,"content":"ic final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n\n    /* @autowired will not work if the call comes from external jar (main() method)\n         Hence manually controlling dependency.*/\n    public void setMsDynamicsSchemaService(MSDynamicsSchemaService msDynamicsSchemaService) {\n        this.msDynamicsSchemaService = msDynamicsSchemaService;\n    }\n\n    @Override\n    public RecordsResponse getRecords(GetRecordsRequest getRecordsRequest, Map<String,String> masterLookUpConfiguration) {\n        LOGGER.info(\"tId: {}. Inside getRecords \", RequestContextProvider.getTenantId());\n        int maxRetryCount = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"uc.dynamics.fetch.max.retry.count\", 8);\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        MSDynamicsObject msDynamicsObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().pluralName(getRecordsRequest.getPluralName()), true, true);\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), msDynamicsObject.getLogicalName());\n\n        Map<String, MSDynamicsObject> logicalNameToObject = Maps.newHashMap();\n        logicalNameToObject.put(msDynamicsObject.getLogicalName(), msDynamicsObject);\n\n        Map<String, Map<Integer, String>> optionSetMap = prepareOptionsetMap(msDynamicsObject);\n        Map<String, Set<String>> selectAndExpandGroup = groupBySelectAndExpan","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f9d70e4-518e-4b3e-a346-366d49c9ac06","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":169,"endLine":200,"content":"stGetCompanyPaginatedEntityData() throws Exception {\n        boolean hasMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubspotFetchService.getPaginatedEntityData(\"COMPANY\",new ArrayList<>(Arrays.asList(\"portalId\",\"companyId\",\"hs_lastmodifieddate\")),\n                    \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\", offset);\n            Assertions.assertTrue(inputStream != null, \"No data found\");\n            String jsonDataResponse = IOUtils.toString(inputStream);\n\n            Map<String, Object> objectMap = OBJECT_MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n            ArrayList<Object> companies = (ArrayList<Object>) objectMap.get(\"companies\");\n            offset = (Long) objectMap.get(\"offset\");\n            hasMore = (boolean)objectMap.get(\"has-more\");\n            if(hasMore){\n                Assertions.assertEquals( 250, companies.size(), \"Mismatch in response size\");\n            }\n        }\n    }\n\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Paginated Contact Entity Data\")\n    @Order(4)\n    void testGetContactPaginatedEntityData() throws Exception {\n        boolean hasMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubspotFetchService.getPaginatedEntityData(\"CONTACT\",new ArrayList<>(Arrays","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d95f9881-46b0-4a91-802b-187ee6b758d4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":70,"endLine":97,"content":"e.getStatusLine().getStatusCode() == 200){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"Access token expired\");\n                throw new Exception(\"Access token expired\");\n            } else if(retryCount <= -1){\n                LOGGER.error(\"The api call to Ecosystem failed for retry count : {} due to status: {} , code :{}\", 2-retryCount,\n                        response.getStatusLine(), response.getStatusLine().getStatusCode());\n                throw new Exception(\"Ecosystem api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"Sleeping for 15 secs as the api call to Ecosystem failed for retry count : {} due to : {}, code :{}\",\n                        2-retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                Thread.sleep((15 * 1000));\n            }\n        }\n        return response;\n    }\n\n    @Override\n    public boolean authenticate(String url) {\n        LOGGER.info(\"Authenticating against URL {}\", url);\n        try (CloseableHttpClient httpclient = HttpClients.createDefault()) {\n            httpGet.setURI(URI.create(url));\n            httpGet.setHeader(\"Authorization\", apiKey);\n            HttpResponse response = httpclient.execute(httpGet);\n            return response.getStatusLine().getStatusCode() == 200;\n        } catch (Exception ex) {\n            LOGGER.error(\"Exceptio","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"decd259f-e85a-469b-ae57-5f3aa339b1df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelFactory.java","startLine":21,"endLine":35,"content":"e());\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.PASSWORD), AdapterErrorMessages.PASSWORD_NULL.getTranslatedMessage());\n        } else if (AuthorizationType.OAUTH.equals(authorizationType)) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_ID), AdapterErrorMessages.OAUTH_CLIENT_ID_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET), AdapterErrorMessages.OAUTH_CLIENT_SECRET_NULL.getTranslatedMessage());\n        } else if (AuthorizationType.ACCESS_KEY.equals(authorizationType)) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.ACCESS_TOKEN), AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n        }\n        if (Objects.nonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE))) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE), AdapterErrorMessages.WAREHOUSE_NULL.getTranslatedMessage());\n        } else {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.ORGANIZATION_ID), AdapterErrorMessages.ORGANIZATION_NULL.getTranslatedMessage());\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.CLUSTER_ID), AdapterErrorMessages.CLUSTER_NULL.getTranslatedMessage());\n        }\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.DATABASE_NAME), AdapterErrorMessages.DATABASE_NAME_NULL.getTransl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a994ca3-9317-481f-b5ba-0d567add42f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":86,"endLine":105,"content":"ightHubspotChannelFactory.getChannelServiceWithOAuth20(\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertNotNull(gainsightHubspotChannelService, \"Unable to create GainsightHubspotChannelService. AccessToken is not refreshed.\");\n    }\n\n    @Test\n    void testGetProperties() throws Exception {\n        GainsightHubspotChannelService gainsightHubspotChannelService =\n//                this.gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n                this.gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(\"221e0d32-66f1-49d7-9de0-a5d0caaee201\", \"cf2b666a-5971-4063-a799-8ab2c00158db\", \"702d3255-43fd-447f-b85c-99f0cb1b11d8\");\n        Assertions.assertNotNull(gainsightHubspotChannelService, \"Unable to create GainsightHubspotChannelService. AccessToken is not refreshed.\");\n        Object result = gainsightHubspotChannelService.getEntityProperties(\"CONTACT\");\n        Assertions.assertNotNull(result, \"Unable to get propeties type.\");\n        Assertions.assertTrue(result instanceof InputStream, \"Invalid data type for result.\");\n        gainsightHubspotChannelService.close();\n    }\n\n    @Test\n    void testGetPropertiesWithAPIKey() throws Exception {\n        GainsightHubspotChannelService gainsightHubspotChannelService =\n                this.gainsightHub","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d09bb6f2-540a-4d42-bd40-b7db392ca9b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelFactory.java","startLine":33,"endLine":47,"content":"rErrorMessages.CLUSTER_NULL.getTranslatedMessage());\n        }\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.DATABASE_NAME), AdapterErrorMessages.DATABASE_NAME_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.SCHEMA_NAME), AdapterErrorMessages.DATASET_ID_NULL.getTranslatedMessage());\n        return new GainsightDatabricksChannelServiceImpl(properties, isValueEncrypted, authorizationType);\n    }\n    public GainsightDatabricksChannelService getChannelFromProperties(Map properties, boolean isValueEncrypted, AuthorizationType authorizationType,\n                                                                      String mtlsCertificatePath,String mtlsCertificatePassword,String mtlsBucketName,\n                                                                      String accessKeyId,String secretAccessKey,String region) {\n        Objects.requireNonNull(properties.get(UCConstants.GSIntegration.DATABASE_HOST), AdapterErrorMessages.DATABASE_HOST_NULL.getTranslatedMessage());\n        if (AuthorizationType.ACCESS_KEY.equals(authorizationType)) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.ACCESS_TOKEN), AdapterErrorMessages.ACCESS_TOKEN_NULL.getTranslatedMessage());\n        }\n        if (Objects.nonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE))) {\n            Objects.requireNonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE), AdapterErrorMessages.WAREHOUSE_NUL","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf7466e1-f498-4ce4-9cee-aaaca8798da1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileSplitter.java","startLine":113,"endLine":139,"content":"ize in MBs: {}\", chunkFile.getAbsolutePath(), fileSizeInMBs(chunkFile));\n        return chunkFile;\n    }\n\n    private void flushToFile(OutputStream chunkFileStream, List<String> lines) throws IOException {\n        IOUtils.writeLines(lines, IOUtils.LINE_SEPARATOR, chunkFileStream, encoding);\n    }\n\n    private int evaluateTimeoutInMins(File file) {\n        int timeout;\n        long sizeInMbs = fileSizeInMBs(file);\n        if (sizeInMbs <= 100) {\n            timeout = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"file.partition.100mb.timeout.minutes\", 10);\n        } else if (sizeInMbs <= 250) {\n            timeout = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"file.partition.250mb.timeout.minutes\", 20);\n        } else if (sizeInMbs <= 500) {\n            timeout = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"file.partition.500mb.timeout.minutes\", 30);\n        } else\n            timeout = DeploymentProperties.getDeploymentProperties().getIntegerValue(\"file.partition.timeout.minutes\", 45);\n        return timeout;\n    }\n\n    private long fileSizeInMBs(File file) {\n        return (file.length()) / (1024 * 1024);\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"313b6711-20ba-4815-9ef2-7beb0bf97cc0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.connector.dynamics.service;\n\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\n/*\n    Responsible for processing flattened fields/projections\n*/\npublic interface MSDynamicsDataServiceV2 {\n    RecordsResponse getPaginatedRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration,\n                                        ObjectDefinition objectDefinition, String nextPageToken, Integer pageSize, boolean resolvePicklistOptions,\n                                        PNPConnectionsInfo pnpConnectionsInfo, boolean separateLineItemForLookups,\n                                        boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings);\n\n    RecordsResponse getRecords(String entityName, GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, boolean resolvePicklistOptions,\n                               int maxRetryCount, boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45711d87-0d91-4d30-b848-ba9691822f6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/bean/UCChannel.java","startLine":41,"endLine":56,"content":"ate UCChannelStatus status;\n    private Date processAfter;\n\n    /**\n     * Nullable instance id which is listening to this channel. null represents noone is listening.\n     */\n    private String instanceId;\n    private Map<String, Object> properties; // NOSONAR\n\n    public Map<String, Object> getProperties() {\n        if(properties ==  null) {\n            properties = new HashMap<>();\n        }\n        return properties;\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9addb2bb-0032-45b2-bfe1-69b27be7c12e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":274,"endLine":293,"content":"\n    public RecordsResponse getRecords(String entityName, GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, boolean resolvePicklistOptions,\n                                      int maxRetryCount, boolean separateLineItemForLookups, boolean loadToDynamicsEnabled, List<DataTypeMappings> dataTypeMappings) {\n        LOGGER.info(\"tId: {}. Inside getRecords \", RequestContextProvider.getTenantId());\n        Map<String, ObjectDefinition> objectDefinitionMap = new HashMap<>();\n        ODataClient client = GSODataClientFactory.getOdataClient();\n\n        ObjectDefinition objectDefinition = objectDefinitionMap.containsKey(entityName) ? objectDefinitionMap.get(entityName) :\n                msDynamicsSchemaService.getObjectAttributes(entityName, resolvePicklistOptions, null, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        objectDefinitionMap.putIfAbsent(objectDefinition.getDbName(), objectDefinition);\n        LOGGER.info(\"tId: {}. Fetched object is {}\", RequestContextProvider.getTenantId(), objectDefinition.getDbName());\n\n        Map<String, Map<Integer, String>> optionSetMap = new HashMap<>();\n        LOGGER.info(\"resolvePicklistOptions: {}\", resolvePicklistOptions);\n\n        List<String> multiPicklistColumns = new ArrayList<>();\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(objectDefinition);\n        } else {\n            multiPicklistColumns = objectDefinition.getFields().stream().filt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3fc320f6-9534-437f-b8bf-31bd89d569c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/RTSWritebackConfigurationJobDetail.java","startLine":1,"endLine":24,"content":"package com.gainsight.integration.rts.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n/**\n * @author puneetsaluja\n * @created 29/07/22\n */\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class RTSWritebackConfigurationJobDetail implements Serializable {\n    String jobId;\n    String errorMsg;\n    String objectName;\n    String ucChannelObjectId;\n    RTSWritebackConfigurationStatus rtsWritebackConfigurationStatus;\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"68203714-ce2c-4a01-aba3-6091793c9b98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":53,"endLine":77,"content":"y, includeColumns, includePicklistOptions, null, false);\n    }\n\n    @Override\n    public Map<String, Object> extractMetadata(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets, List<String> fields) {\n        return describeDynamicsObject(query, includeColumns, resolveOptionSets, fields, false);\n    }\n\n    @Override\n    public Map<String, Object> extractMetadataForOnlyRequestedFields(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets, List<String> fields) {\n        return describeDynamicsObject(query, includeColumns, resolveOptionSets, fields, true);\n    }\n\n    @Override\n    public MSDynamicsObject describeObject(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets) {\n        LOGGER.info(\"tId: {}. Inside describeObject. MSDynamicsObjectQuery: {}. includeColumns: {}. resolveOptionSets: {}\", RequestContextProvider.getTenantId(), query, includeColumns, resolveOptionSets);\n        GainsightPrecondition.assertNotNull(query, DynamicsErrorCode.PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n        ODataClient client = GSODataClientFactory.getOdataClient();\n        URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(\"EntityDefinitions\");\n        String filter;\n        if (StringUtils.isNotEmpty(filter = query.buildFilter())) {\n            absoluteUri.filter(filter);\n        }\n        String[] projections;\n        if (ArrayUtils.i","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cba82939-3299-4bfb-9b53-a9ff6e17c1fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/FeatureToggleUtil.java","startLine":87,"endLine":97,"content":"rom feature toggle service for tenants %s\", featureName, variationName, tenantIds));\n        try {\n            getFeatureToggleCrudService().upsertTenantMappings(featureName, tenantIds, variationName);\n            return true;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception updating state from feature toggle service\", e);\n            return false;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f290ba0c-25b2-483c-b85e-08480ff49212","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":994,"endLine":1022,"content":"ctionUtils.isNotEmpty(expandList)) {\n                    absoluteUri.expand(expandList.toArray(new String[expandList.size()]));\n                }\n                if (StringUtils.isNotBlank(filterExpression)) {\n                    absoluteUri.filter(filterExpression);\n                }\n            }\n\n            URI uri = absoluteUri.build();\n            LOGGER.info(\"uri used is {}\", uri);\n\n            ODataEntitySetRequest<ClientEntitySet> requestEntitySet = client.getRetrieveRequestFactory().getEntitySetRequest(uri);\n            if (null != pageSize && pageSize > 0) {\n                requestEntitySet.addCustomHeader(\"Prefer\", \"odata.maxpagesize=\".concat(DynamicsGainsightUtils.valueOf(pageSize)));\n            }\n            ODataRetrieveResponse<ClientEntitySet> responseEntitySet = requestEntitySet.execute();\n            return responseEntitySet.getBody();\n        } catch (RuntimeException runtimeException) {\n            throw new SystemException(\"GSODATA\", runtimeException);\n        }\n    }\n\n    private ClientEntitySet readClientEntitySet(ODataClient client, String entitySetName,\n                      Set<String> projections, Set<String> expandList, String filterExpression,\n                                                RecordResponseGenerator recordResponseGenerator){\n        try {\n            URIBuilder absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n            if (CollectionUtils.isNotEmpty(projections)) {\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bfa816a4-abd8-4b5e-a4d1-42d8caaa760d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsFetchServiceImpl.java","startLine":54,"endLine":63,"content":" try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightMSTeamsChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightMSTeamsChannelService.getTeamsUserDetails();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"41bc942b-b73c-4f9b-9efa-da683c104c5e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":27,"endLine":63,"content":"pache.olingo.client.api.domain.ClientEntity;\nimport org.apache.olingo.client.api.domain.ClientEntitySet;\nimport org.apache.olingo.client.api.domain.ClientEntitySetIterator;\nimport org.apache.olingo.client.api.domain.ClientEnumValue;\nimport org.apache.olingo.client.api.domain.ClientProperty;\nimport org.apache.olingo.client.api.domain.ClientValue;\nimport org.apache.olingo.client.api.serialization.ODataDeserializerException;\nimport org.apache.olingo.commons.api.edm.Edm;\nimport org.apache.olingo.commons.api.format.ContentType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Deprecated\npublic class OlingoSampleApp {\n  private ODataClient client;\n\n  private static Logger LOGGER = LoggerFactory.getLogger(OlingoSampleApp.class);\n\n\n  public OlingoSampleApp() {\n//    client = GainsightODataSAPClientFactory.getOdataClientForSAPCRM(\"P2001242818\", \"D45Y;YgQ38A~&x,g\");\n    client =  GainsightODataSAPClientFactory.getOdataClientForSAPMKT(\"\");\n    }\n\n  public static void main(String[] params) throws Exception {\n    OlingoSampleApp app = new OlingoSampleApp();\n    app.perform(\"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CONTACT_SRV;v=0002\");\n  }\n\n  void perform(String serviceUrl) throws Exception {\n\n    print(\"\\n----- Read Edm ------------------------------\");\n    Edm edm = readEdm(serviceUrl);\n/*\n    List<FullQualifiedName> ctFqns = new ArrayList<FullQualifiedName>();\n    List<FullQualifiedName> etFqns = new ArrayList<FullQualifiedName>();\n    for (EdmSchema ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"325e86c7-b3c1-47c1-bab8-1924b6ead0b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":889,"endLine":928,"content":"e);\n            fileList.add(filePosition.get(), nextFile);\n        }\n    }\n\n    private static void appendToJsonFileToSendToConsumers(List<Map<String, Object>> destPayload,\n                                                          File localFile) throws IOException {\n        BufferedWriter br = null;\n        FileWriter fr = null;\n        try {\n            fr = new FileWriter(localFile, true);\n            br = new BufferedWriter(fr);\n            Gson gson = new Gson();\n            for (Map<String, Object> payload : destPayload) {\n                String json = gson.toJson(payload);\n                br.write(json + \"\\n\");\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"error occurred while writing to file\", e);\n            throw e;\n        } finally {\n            br.flush();\n            br.close();\n            fr.close();\n        }\n    }\n\n    private double fileSizeInMBs(File file) {\n        return (file.length()) / (1024.0 * 1024.0);\n    }\n\n    /*private String parseMessage(String message) {\n        if (StringUtils.isNotEmpty(message) && message.contains(HIVE_STACK_TRACE_STARTS_WITH)) {\n            return message.substring(0, message.indexOf(HIVE_STACK_TRACE_STARTS_WITH));\n        } else {\n            return message;\n        }\n    }*/\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9a784ba8-c05a-4ec7-b97a-027d11753f1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":436,"endLine":470,"content":"Writer != null) {\n                        br.close();\n                        fileWriter.close();\n                    }\n                    File file = new File(fileName);\n                    fileList.add(file);\n                    fileWriter = new FileWriter(file);\n                    br = new BufferedWriter(fileWriter);\n                }\n                br.write(obj.toString() + \"\\n\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Error occurred while trying to write data\", e);\n            throw new Exception(\"Error occurred while trying to write data\", e);\n        } finally {\n            if (br != null) {\n                br.close();\n            }\n            if (fileWriter != null) {\n                fileWriter.close();\n            }\n        }\n    }\n\n    private JsonArray convertBqData(JsonArray arr, List<String> headers, Map<String, String> fieldToDataTypeMap) throws Exception {\n        try {\n            LOGGER.info(\"converting bq data\");\n            JsonArray sanitizedArray = new JsonArray();\n            for (int i = 0; i < arr.size(); i++) {\n                JsonObject rowObject = arr.get(i).getAsJsonObject();\n                if (rowObject != null && rowObject.has(\"f\") && headers.size() == rowObject.getAsJsonArray(\"f\").size()) {\n                    JsonArray row = rowObject.getAsJsonArray(\"f\");\n                    JsonObject newRow = new JsonObject();\n                    for (int col = 0; col < row.size(); col++) {\n                        if (row","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d33b653b-4047-44c7-8b9c-26b820c489fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/PaginationDetails.java","startLine":84,"endLine":95,"content":"l; // If any part of the path is null, return null\n      }\n      currentNode = currentNode.path(keys[i]);\n    }\n\n    String finalPath = keys[nestedLevelLength];\n    if (currentNode.get(finalPath) == null) {\n      return null;\n    }\n    return currentNode.get(finalPath).asText();\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d678255-0e9d-4075-b9d9-f67b9e6ee3a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaFetchService.java","startLine":1,"endLine":14,"content":"package com.gainsight.integration.connector.aha.service;\n\nimport java.io.InputStream;\nimport java.util.List;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\npublic interface GainsightAhaFetchService {\n\n    InputStream getPaginatedEntityData(String subDomain, String entityName, List<String> projectionList, String apiKey, int pageSize, int pageNumber, String updatedSince) throws Exception;\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0977a268-ad00-4e6b-82b2-a56d006a3b70","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/SfdcChangeEventDto.java","startLine":42,"endLine":69,"content":"rride\n    public Map<String,Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap) {\n        Map<String, Object> payloadMap = new HashMap<>();\n        for(Map.Entry<String, Object> entry : GainsightCollectionUtils.nullSafeMap(payload).entrySet()) {\n            String key = entry.getKey();\n            if(!CHANGE_EVENT_HEADER_KEY.equals(key)) {\n                if (entry.getValue() instanceof Map) {\n                    // compound fields. :(\n                    Map<String, Object> subMap = (Map<String, Object>) entry.getValue();\n                    if(subMap.size() == 1 && subMap.containsKey(\"diff\")) {\n                        // is this correct way?\n                        payloadMap.put(key, entry.getValue());\n                    } else {\n                        for(String compoundFieldTypes: compoundFieldTypeFieldsMap.keySet()) {\n                            if(StringUtils.containsIgnoreCase(key, compoundFieldTypes)) {\n                                String prefix = StringUtils.replaceOnce(key, compoundFieldTypes, \"\");\n                                subMap.forEach((k, v) -> payloadMap.put(prefix + k, v));\n                            }\n                        }\n                        payloadMap.put(key, subMap.values().stream().map(String::valueOf).collect(Collectors.joining(\" \")));\n                    }\n                } else {\n                    payloadMap.put(key, entry.getValue());\n                }\n            }\n        }\n        return payloadMap;\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f5bb6738-5dc8-433f-96ab-5a25f4595749","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":534,"endLine":561,"content":"aginationInfo, stringEntity);\n\n    if (authDetails.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : authDetails.getHeaderDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n\n    if (metadataApiConfigAttributes.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : metadataApiConfigAttributes.getHeaderDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n\n    return httpClientForApiCall;\n  }\n\n  @Override\n  public HttpRequestBase getHttpClientForDataRequest(MetadataEngineConfig metadataEngineConfig,\n                                                     ApiConfigAttributes metadataApiConfigAttributes, String objectName,\n                                                     PNPConnectionsInfo pnpConnectionsInfo, FilterRule filterRule,\n                               ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5607bf32-9c61-4fa8-b11c-d70c69050f56","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":452,"endLine":471,"content":"nToOriginalProjections.get(newSelectProjection).add(projection);\n                } else if (logicalNameToExternalType.get(projection) == ExternalDataType.LOOKUP ||\n                        logicalNameToExternalType.get(projection) == ExternalDataType.CUSTOMER ||\n                    logicalNameToExternalType.get(projection) == ExternalDataType.OWNER) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projection);\n                } else {\n                    selectGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        //If expanded fields are of type lookup or customer then modify the projection name. This needs to done first before we modify source lookup field in next step.\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_EXPAND))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_EXPAND)) {\n                Column lookupColumn = msDynamicsObject.getColumn(projection.split(\"\\\\.\")[0]);\n                if (!logicalNameToObject.containsKey(lookupColumn.getTargetObject())) {\n               ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"843839d1-ae56-4de9-82d0-9e850770cf69","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":639,"endLine":660,"content":"          } catch (SQLException e) {\n                GainsightDatabricksHelper.deleteFileFromDatabricksFileSystem(pnpConnectionsInfo, uploadedFilePath);\n                LOGGER.error(\"Error occurred while creating temp stage and loading data: {}...\", e.getMessage(), e);\n                throw new SQLException(e.getMessage());\n            }\n\n            //Merge temporary stage table into target table\n            List<String> ON_CLAUSE = new ArrayList<>();\n            List<String> SET_CLAUSE = new ArrayList<>();\n            List<String> INSERT_COLUMN_CLAUSE = new ArrayList<>();\n            List<String> INSERT_VALUE_CLAUSE = new ArrayList<>();\n            List<String> decimalsNotAllowedFields = Lists.newArrayList(DeploymentProperties.getDeploymentProperties()\n                    .getValue(\"uc.databricks.decimal.fields.not.allowed.types\", \"INT,BIGINT,SMALLINT,TINYINT\").split(COMMA));\n            String mergeIntoQuery;\n\n            for (ColumnMapping columnMapping : columnMappings) {\n                if (columnMapping.getIsKeyField()) {\n                    String onClause = absolutePathToTempStageTable + PERIOD + BACKTICK + columnMapping.getFieldName() + BACKTICK;\n                    if (decimalsNotAllowedFields.contains(colNameToDataType.get(columnMapping.getFieldName()).toUpperCase())) {\n                        onClause = String.format(CAST_TO_DOUBLE, onClause);\n                    }\n                    onClause = absolutePathToTargetTable + PERIOD + BACKTICK + columnMapping.getFie","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"457e5021-ee28-4025-9f5b-b2db39a71cdf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/FeatureToggleUtil.java","startLine":46,"endLine":67,"content":"etSalesforceVersion(String configuredSFDCVersion) {\n        if (StringUtils.isNotEmpty(configuredSFDCVersion)) {\n            LOGGER.info(\"SFDC version used: {}\", configuredSFDCVersion);\n            return configuredSFDCVersion;\n        }\n\n        if (StringUtils.isEmpty(TENANT_SFDC_VERSION_CACHE.get(RequestContextProvider.getTenantId()))) {\n            String tenantLevelSFDCVersion = evaluateFeature(SALESFORCE_API_VERSION, RequestContextProvider.getTenantId(), \"45.0\");\n            TENANT_SFDC_VERSION_CACHE.put(RequestContextProvider.getTenantId(), tenantLevelSFDCVersion);\n        }\n        LOGGER.info(\"SFDC version used: {}\", TENANT_SFDC_VERSION_CACHE.get(RequestContextProvider.getTenantId()));\n        return TENANT_SFDC_VERSION_CACHE.get(RequestContextProvider.getTenantId());\n    }\n\n    public static Collection<String> evaluateMultiVariateFeature(String featureName, String tenantId) {\n        FeatureVariationDetailDTO featureVariationDetailDTO = null;\n        try {\n            FeatureConfigEvaluationService service = (new FeatureConfigEvaluationServiceImpl()).withClientConfig(getFeatureToggleClientConfig());\n            featureVariationDetailDTO = service.evaluate(featureName, tenantId);\n            ObjectMapper objectMapper = new ObjectMapper();\n            CollectionType javaType = objectMapper.getTypeFactory().constructCollectionType(Collection.class, String.class);\n            return objectMapper.readValue(objectMapper.writeValueAsString(featureVariationDetailDTO.getValu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae324039-5c07-4b48-b1f0-34223ff8e343","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/UCXMLUtility.java","startLine":45,"endLine":71,"content":" getElementValueById(Document doc, String id) {\n        List<String> s = getElementValuesById(doc, id);\n        if (!s.isEmpty()) {\n            return s.get(0);\n        } else {\n            return StringUtils.EMPTY;\n        }\n    }\n\n    public static List<String> getElementValuesById(Document doc, String id) {\n        if (doc == null) {\n            throw new SystemException(\"Document cannot be null\", 500);\n        }\n        List<String> resultIds = Lists.newArrayList();\n        doc.getDocumentElement().normalize();\n        NodeList nList = doc.getElementsByTagName(id);\n        for (int i = 0; i < nList.getLength(); i++) {\n            Node node = nList.item(i);\n            if (null != node) {\n                resultIds.add(nList.item(i).getTextContent());\n            } else {\n                resultIds.add(StringUtils.EMPTY);\n            }\n        }\n        return resultIds;\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5709b00d-32c5-4868-8222-366b47b57d98","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":121,"endLine":136,"content":"              }\n            }catch (Exception e){\n                LOGGER.error(e.getMessage(),e);\n                if(retry > 3){\n                    LOGGER.error(\"Retries exhausted\");\n                    throw e;\n                }else{\n                    LOGGER.info(\"Retrying number : {}\",retry+1);\n                }\n            }\n        }\n        LOGGER.error(\"Retries exhausted. Data Fetch failed from external System\");\n        throw new Exception(\"Retries exhausted. Data Fetch failed from external System\");\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6180e005-385f-4a56-81b8-5d6fc2b7685a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":689,"endLine":723,"content":"ected format is as per caas config\n  private Object dataTypeHandling(AuthApiAttributes config, String val) {\n    Object finalVal = null;\n    switch (config.getDataType().toLowerCase()) {\n      case \"datetime\":\n        DateTime dateTime = TimeZoneUtils.parseDateTimeWithTZ(val, \"UTC\");\n        finalVal = dateTime.toInstant().getMillis() / 1000L;\n        break;\n      default:\n    }\n    return finalVal;\n  }\n\n  private Object constructValueFromFilterRule(AuthApiAttributes config, FilterRule criteria, Map<String, Object> paginationInfo) {\n    Object value = config.getValue();\n    if (config.isStatic())\n      return value;\n\n    TreeSet<String> filterValues = new TreeSet<>();\n    if (value instanceof String) {\n      CommonUtils.getValuesFromFilter(criteria, filterValues, value.toString());\n    } else if (value instanceof Map) {\n      ExternalFilterValueConfig externalFilterValueConfig = OBJECT_MAPPER.convertValue(value, ExternalFilterValueConfig.class);\n      if (paginationInfo != null && !paginationInfo.isEmpty() && externalFilterValueConfig.isPaginationFilter())\n        return null;\n      CommonUtils.getValuesFromFilter(criteria, filterValues, externalFilterValueConfig.getExternalFieldName(), externalFilterValueConfig.getOperator());\n\n    }\n\n    if (filterValues.isEmpty())\n      return config.getDefaultValue();\n    String val = filterValues.toArray()[0].toString();\n    return dataTypeHandling(config, val);\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a09fee2-f063-4193-be31-8a34ec1a9387","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":133,"endLine":154,"content":"Override\n    public HashMap<String, List<String>> getAssociatedObjects(List<String> objectIds, String hubspotAssociation, String clientId, String clientSecret, String refreshToken) {\n        HashMap<String, List<String>> associations = new HashMap<>();\n        try{\n            GSHubspotAssociationEnum gsHubspotAssociationEnumType = GSHubspotAssociationEnum.getInstance(hubspotAssociation);\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            for (String currentObjectId : objectIds) {\n                List<String> associationsResult = gainsightHubspotChannelService.getAssociatedObjectsLegacy(gsHubspotAssociationEnumType, currentObjectId);\n                associations.put(currentObjectId, associationsResult);\n            }\n            return associations;\n        }catch (Exception e){\n            LOGGER.error(String.format(\"[HUBSPOT] Error while getting association for %s \", hubspotAssociation),e);\n            return associations;\n        }\n    }\n\n    @Override\n    public List<String> getAssociatedObjectswithAccessToken(String objectId, String hubspotAssociation,\n                                                                             String clientId, String clientSecret,\n                                                                             String refreshToken, String accessToken) {\n        List<String> associationsResult = new ArrayList","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"345be35c-4dab-4a00-8389-f41ae1679fd8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/bean/GainsightAhaEntityDescription.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.aha.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n/**\n * @author puneetsaluja\n * @created 12/03/23\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightAhaEntityDescription {\n    private String entityName;\n    private String entityId;\n    private List<GainsightAhaFieldDescription> gainsightAhaFieldDescriptions;\n\n    public GainsightAhaEntityDescription(String entityName, List<GainsightAhaFieldDescription> gainsightAhaFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightAhaFieldDescriptions = gainsightAhaFieldDescriptions;\n    }\n\n    public String getEntityName() { return entityName; }\n\n    public void setEntityName(String entityName) { this.entityName = entityName; }\n\n    public String getEntityId() { return entityId; }\n\n    public void setEntityId(String entityId) { this.entityId = entityId; }\n\n    public List<GainsightAhaFieldDescription> getGainsightAhaFieldDescriptions() { return gainsightAhaFieldDescriptions; }\n\n    public void setGainsightAhaFieldDescriptions(List<GainsightAhaFieldDescription> gainsightAhaFieldDescriptions) { this.gainsightAhaFieldDescriptions = gainsightAhaFieldDescriptions; }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b7b1db80-7e2c-4443-8b0e-eee2102d4ea6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":458,"endLine":475,"content":"          for (int i = 0; i < columnCount; ++i) {\n                        Object object = resultSet.getObject(i + 1);\n                        if (object == null) {\n                            object = JSONObject.NULL;\n                        }\n                        if (object instanceof Timestamp) {\n                            for (FieldInfo fieldInfo : fieldInfoList) {\n                                if (fieldInfo.getJsonPath().equalsIgnoreCase(resultSet.getMetaData().getColumnLabel(i + 1))) {\n                                    DateTimeFormatter fmt = DateTimeFormatter.ofPattern(fieldInfo.getDateTimeProperties().getFormat());\n                                    LocalDateTime localDateTime = LocalDateTime.parse(object.toString(), defaultSrcFormatter);\n                                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), ZonedDateTime.of(localDateTime, ZoneId.of(\"UTC\")).format(fmt));\n                                }\n                            }\n                        } else if (object instanceof java.util.Date) {\n                            for (FieldInfo fieldInfo : fieldInfoList) {\n                                if (fieldInfo.getJsonPath().equalsIgnoreCase(resultSet.getMetaData().getColumnLabel(i + 1))) {\n                                    LocalDate localDate = LocalDate.parse(object.toString());\n                                    map.put(resultSet.getMetaData().getColumnLabel(i + 1), localDate.format(DateTimeFormatter.ofPattern(fieldInfo.getDat","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4639336a-bc26-4130-b418-134e3134104f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.connector.sap;\n\nimport com.google.common.collect.Lists;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.commons.api.edm.Edm;\nimport org.apache.olingo.commons.api.edm.EdmEntityType;\nimport org.apache.olingo.commons.api.edm.EdmSchema;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\n/**\n *\n *  @author : vipinsharma\n *  @createdOn : 08 May 2019 21:39\n *\n **/\n\n@Service\npublic class GainsightSapMktFetchServiceImpl implements GainsightSapMktFetchService {\n\n    @Autowired\n    private GainsightSAPChannelService gainsightSAPChannelService;\n\n    @Override\n    public List<String> pullAvailableEntitiesName(ODataClient oDataClient, String serviceUrl) throws IOException {\n        Edm edm = pullEntityDataModel(oDataClient,serviceUrl);\n        Assert.isTrue(edm != null,\"No entity model defined\");\n        List<String> result = Lists.newArrayList();\n        for (EdmSchema schema : edm.getSchemas()) { //\n            for (EdmEntityType entityType : schema.getEntityTypes()) {\n                result.add(entityType.getName()); // for now just returning name\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public List<String> listAllPropertiesOfEntity(ODataClient oDataClient, String qualifiedEntityName, String serviceUrl) throws IOExceptio","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c2433a59-337b-4aa5-9594-992041378ad4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":610,"endLine":633,"content":"er, String> valueToLabelMap = Maps.newHashMap();\n                for (PicklistOption option : gsFieldDefinition.getOptions()) {\n                    valueToLabelMap.put((Integer) option.getValue(), option.getLabel());\n                }\n                optionSetMap.put(gsFieldDefinition.getFieldName(), valueToLabelMap);\n            }\n        }\n        return optionSetMap;\n    }\n\n    private Map<String, Map<Integer, String>> prepareOptionsetMap(ObjectDefinition objectDefinition) {\n        Map<String, Map<Integer, String>> optionSetMap = Maps.newHashMap();\n        for (GSFieldDefinition gsFieldDefinition : objectDefinition.getFields()) {\n            if (gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.PICKLIST.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.STATUS.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.STATE.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST)) {\n                Map<Integer, String> valueToLabelMap = Maps.newHashMap();\n                for (PicklistOption option : gsFieldDefinition.getOptions()) {\n                    valueToLabelMap.put((Integer) option.getValue(), option.getLabel());\n                }\n                optionSetMap.put(gsFieldDefinition.getFieldName(), valueToLabelMap);\n            }\n        }","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8178a539-9b86-4e2b-ac64-a4b0d0b7b703","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":544,"endLine":562,"content":"= new RecordResponseGenerator(getRecordsRequest);\n        try {\n            ClientEntitySet clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                    lookUpFieldNames, getRecordsRequest.getFilterExpression(), recordResponseGenerator);\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n\n            URI nextUri = clientEntitySet.getNext();\n            int currentRetryCount = 0;\n            while (nextUri != null && (currentRetryCount <= maxRetryCount)) {\n                try {\n                    ClientEntitySet clientEntitySetNext = readEntitiesClientEntitySet(client, nextUri);\n                    generateRecords(recordResponseGenerator, clientEntitySetNext, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                            getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n                    nextUri = clientEntitySetNext.getNext();\n                } catch (HttpClientException httpClientException) {\n                    if (Objects.nonNull(MSDynamicsContext.getCtx()) && Objects.isNull(MSDynamicsContext.getCtx().getRefreshToken())\n                            && Objects.nonNull(MSDynamicsContext.getTenantId())) {\n                        LOGGER.info(\"Records fetched","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54aa6909-e53a-4f5a-b91d-2b31758e4dcd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Relationship.java","startLine":1,"endLine":48,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\npublic class Relationship {\n\n    private String referencingAttribute;\n    private String referencingEntity;\n    private String referencedAttribute;\n    private String referencedEntity;\n    private String referencedEntityNavigationPropertyName;\n    private String referencingEntityNavigationPropertyName;\n    private boolean isCustomRelationship;\n    private String schemaName;\n    private RelationshipType relationshipType;\n\n    public String getReferencingAttribute() {\n        return referencingAttribute;\n    }\n\n    public void setReferencingAttribute(String referencingAttribute) {\n        this.referencingAttribute = referencingAttribute;\n    }\n\n\n    public String getReferencedAttribute() {\n        return referencedAttribute;\n    }\n\n    public void setReferencedAttribute(String referencedAttribute) {\n        this.referencedAttribute = referencedAttribute;\n    }\n\n    public String getReferencedEntity() {\n        return referencedEntity;\n    }\n\n    public void setReferencedEntity(String referencedEntity) {\n        this.referencedEntity = referencedEntity;\n    }\n\n    public String getReferencedEntityNavigationPropertyName() {\n        return referencedEntityNavigationPropertyName;\n    }\n\n    public void setReferencedEntityNavigationPropertyName(String referencedEntityNavigationPropertyName) {\n        this.referencedEntityNavigationPropertyName = referencedEntityNavigationPropertyName;\n    }\n\n    public String getRe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b44dd59c-d7f7-4d95-980d-598e594a57a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":140,"endLine":168,"content":"e.OAUTH2;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(timeout * 1000)\n                .setConnectionRequestTimeout(timeout * 1000)\n                .setSocketTimeout(timeout * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + this.accessToken);\n        httpPatch.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n\n    }\n\n    @Override\n    public boolean authenticateConnection() throws Exception {\n        if (this.authenticationType == AuthenticationType.API_KEY) {\n            String urlPath = new StringBuilder().append(BASE_API_URL)\n                    .append(GSHubSpotEntityEnum.getLegacyDataApiPath(GSHubSpotEntityEnum.OWNER))\n                    .append(\"?\" + HAPIKEY + \"=\" + this.apiKey)\n                    .toString();\n            URL url = new URL(urlPath);\n            HttpURLConnection http = (HttpURLConnection) url.openConnection();\n            return http.getResponseCode() == 200;\n        } else if (this.authenticationType == AuthenticationType.OAUTH2) { // Check authentication via Hu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2df1693b-5c4b-40ee-bd14-040f1809e6bf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":878,"endLine":898,"content":"      Map<String, Map<Integer, String>> optionSetMap = Maps.newHashMap();\n        for (Column column : columnList) {\n            if (column.getExternalType() == ExternalDataType.PICKLIST || column.getExternalType() == ExternalDataType.STATUS || column.getExternalType() == ExternalDataType.STATE || column.getExternalType() == ExternalDataType.MULTISELECTPICKLIST) {\n                Map<Integer, String> valueToLabelMap = Maps.newHashMap();\n                OptionSet optionSet = (OptionSet) column.getProperties().get(OPTION_SET_PROPERTY);\n                for (Option option : optionSet.getOptions()) {\n                    valueToLabelMap.put(option.getValue(), option.getLabel());\n                }\n                optionSetMap.put(column.getLogicalName(), valueToLabelMap);\n            }\n        }\n        return optionSetMap;\n    }\n\n    private Map<String, Map<Integer, String>> prepareOptionsetMap(MSDynamicsObject msDynamicsObject){\n        List<Column> columnList = msDynamicsObject.getColumns();\n        Map<String, Map<Integer, String>> optionSetMap = Maps.newHashMap();\n        for(Column column: columnList){\n            if(column.getExternalType() == ExternalDataType.PICKLIST || column.getExternalType() == ExternalDataType.STATUS || column.getExternalType() == ExternalDataType.STATE || column.getExternalType() == ExternalDataType.MULTISELECTPICKLIST){\n                Map<Integer, String> valueToLabelMap = Maps.newHashMap();\n                OptionSet optionSet = (OptionSet)column.get","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6432acba-e2ad-4731-a946-fc3d890678b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/RequiredFieldChangeDetail.java","startLine":1,"endLine":20,"content":"package com.gainsight.integration.rts.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n/**\n * @author puneetsaluja\n * @created 01/08/22\n */\n@Getter\n@Setter\n@ToString(callSuper = true)\npublic class RequiredFieldChangeDetail {\n    private String fieldName;\n    private Object value;\n    private String dbCollectionName;\n    private boolean isUpsertKey;\n    String errorMsg;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e2464969-f5b8-4790-b077-76490af69a11","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/OutputMode.java","startLine":1,"endLine":5,"content":"package com.gainsight.integration.connector.dynamics.bean.query;\n\npublic enum OutputMode {\n  FILE, IN_MEMORY;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d2d04b9-5d56-4132-bb7e-65d63752dbd4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/AttributeAuditType.java","startLine":52,"endLine":81,"content":"  for (AttributeAuditType type : values()) {\n      ATTRIBUTE_TYPE_MAP.put(type.value.toUpperCase(), type);\n    }\n  }\n\n  /**\n   * @return returns the value of AttributeAuditType\n   */\n  @JsonValue\n  public String getValue() {\n    return value;\n  }\n\n  /**\n   * This code is for case-insensitive enums.\n   *\n   * @param value The value\n   * @return The enum\n   */\n  @JsonCreator\n  public static AttributeAuditType forValue(String value) {\n    if (value == null) {\n      return null;\n    }\n    return ATTRIBUTE_TYPE_MAP.get(value.toUpperCase());\n  }\n  public String getTranslatedValue(){\n    return ConnectorI18nService.getTranslation(this.name(), this.value, RequestContextProvider.getTenantLanguage());\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"07bea00f-2635-494a-a01e-263c65e6c0e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/MSDynamicsObjectQuery.java","startLine":1,"endLine":44,"content":"package com.gainsight.integration.connector.dynamics.bean.query;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class MSDynamicsObjectQuery {\n\n    private Map<String, Object> params = Maps.newHashMap();\n    private Set<String> includeFields = Sets.newHashSet();\n\n    public static Map<String, String> FIELDS_MAPPING = Maps.newHashMap();\n    static {\n        FIELDS_MAPPING.put(\"objectName\", \"SchemaName\");\n        FIELDS_MAPPING.put(\"objectId\", \"MetadataId\");\n        FIELDS_MAPPING.put(\"logicalName\", \"LogicalName\");\n        FIELDS_MAPPING.put(\"pluralName\", \"EntitySetName\");\n        FIELDS_MAPPING.put(\"customObject\", \"IsCustomEntity\");\n        FIELDS_MAPPING.put(\"displayName\", \"DisplayName\");\n        FIELDS_MAPPING.put(\"primaryIdAttribute\", \"PrimaryIdAttribute\");\n    }\n\n    public MSDynamicsObjectQuery objectName(String objectName) {\n        this.params.put(\"SchemaName\", objectName);\n        return this;\n    }\n\n    public MSDynamicsObjectQuery objectId(String objectId) {\n        this.params.put(\"MetadataId\", objectId);\n        return this;\n    }\n\n    public MSDynamicsObjectQuery logicalName(String logicalName) {\n        this.params.put(\"LogicalName\", logicalName);\n        return this;\n    }\n\n    public MSDynamicsObjectQuery pluralName(S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"17776c5e-9355-462d-8005-34f876aeac12","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":113,"endLine":148,"content":"tMessage(), e);\n            try {\n                InputStream es = null;\n                if (null != httpConn.getErrorStream()) {\n                    es = ((HttpURLConnection) httpConn).getErrorStream();\n                    resp.setErrIs(es);\n                } else {\n                    LOGGER.error(\"Recieved empty error response\");\n                }\n                resp.setErrorCode(httpConn.getResponseCode());\n                resp.setResponseHeaders(httpConn.getHeaderFields());\n            } catch (Exception ex) {\n                LOGGER.error(\"Exception occured while handling error data {}\", ex.getMessage(), ex);\n                throw ex;\n            }\n        }\n        return resp;\n    }\n\n    private String buildQueryParams(Map<String, Object> queryParams) throws Exception {\n\n        if (queryParams == null || queryParams.isEmpty()) return null;\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry e : queryParams.entrySet()) {\n            if (escapeQueryParams) {\n                sb.append(String.format(\"%s=%s\", e.getKey(), URLEncoder.encode((String) e.getValue(), IPaasConstants.CHARSET))).append('&');\n            } else {\n                sb.append(String.format(\"%s=%s\", e.getKey(), e.getValue())).append('&');\n            }\n        }\n        return sb.toString().substring(0, sb.length() - 1);\n    }\n\n    public HttpResponse get(String requestURL, Map<String, Object> headers, Map<String, Object> queryParams)\n            throws Exception {\n        return get(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90b71279-f98e-4348-acae-02fcaba9e6cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":160,"endLine":176,"content":"eld, propertyValue);\n                    expandGroupModified.add(newExpandProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                } else {\n                    Column column = msDynamicsObject.getColumn(sourceLookupField);\n                    Optional<Relationship> relationshipOptional = Optional.empty();\n                    if (Objects.nonNull(column)) {\n                        String targetObjectOfLookupField = column.getTargetObject();\n                        String referencingAttribute = getReferencingAttribute(sourceLookupField, targetObjectOfLookupField);\n                        relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30f29930-9b37-4e18-8ff0-dea69795a8bd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":262,"endLine":282,"content":"sponse.getResponseCode() == HttpStatus.SC_OK) {\n                List<String> result = UCXMLUtility.getElementValuesById(resultDetails, \"result\");\n                return retrieveResultsFromResultId(sfdcJobId, batchId, result, 0, pnpConnectionsInfo, sfdcApiVersion, filePath, fileNamePrefix, clientId, clientSecret, refreshToken);\n            } else {\n                LOGGER.info(\"Unable to get batch result for job {}, response {}\", sfdcJobId, resultDetails);\n                String errorMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                String errorCode = SFDCExceptionUtility.errorCodeExtraction(errorMessage);\n                LOGGER.error(\"Exception occurred while trying to get batch results :{} ErrorCode : {}\", errorMessage, errorCode);\n                throw new Exception(errorMessage);\n            }\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return getBatchResults(sfdcJobId, batchId, ++retryCount, pnpConnectionsInfo, sfdcApiVersion, filePath, fileNamePrefix, clientId, clientSecret, refreshToken);\n            }\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    private List<File> retrieveResultsFromResultId(String sfdcJobId, String batchId, List<String> resultId, int retryCount,\n                                                   PNPConnectionsInfo pnpConnectionsInfo, String sfdcApiVersion,\n                                                   String filePath, S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"42c19ea3-a040-4362-9a8c-6e78dac60b41","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":261,"endLine":297,"content":"writer.write(body);\n            writer.flush();\n            InputStream is = null;\n            if (httpConn != null) {\n                is = httpConn.getInputStream();\n            } else {\n                throw new IOException(\"Connection is not established.\");\n            }\n            resp.setResponseIs(is, false);\n            resp.setResponseCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (IOException e) {\n            LOGGER.error(\"Exception occured while requesting data {}\", e.getMessage(), e);\n            InputStream es = null;\n            if (null != httpConn.getErrorStream()) {\n                es = ((HttpURLConnection) httpConn).getErrorStream();\n                resp.setErrIs(es);\n            } else {\n                LOGGER.error(\"Recieved empty error response\");\n            }\n            resp.setErrorCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occured while handling error data {}\", ex.getMessage(), ex);\n            throw ex;\n        }\n        return resp;\n    }\n\n    public HttpResponse put(String requestURL, Map<String, Object> headers, String body) throws IOException {\n        return put(requestURL, headers, body, 15000);\n    }\n}\n\nput(requestURL, headers, body, 15000);\n    }\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc655860-40ba-4d23-b80e-0ca32c9d8c9b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":170,"endLine":196,"content":"new ArrayList<>();\n        try{\n            GSHubspotAssociationEnum gsHubspotAssociationEnumType = GSHubspotAssociationEnum.getInstance(hubspotAssociation);\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            associationsResult = gainsightHubspotChannelService.getAssociatedObjectsLatest(gsHubspotAssociationEnumType, objectId);\n            return associationsResult;\n        }catch (Exception e){\n            LOGGER.error(String.format(\"[HUBSPOT] Error while getting association for %s \", hubspotAssociation),e);\n            return associationsResult;\n        }\n    }\n\n    @Override\n    public List<Object> getPipelineMappingObject(String object, String clientId, String clientSecret, String refreshToken) {\n        List<Object> pipelineMappings = new ArrayList<>();\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            pipelineMappings = gainsightHubspotChannelService.getPipelineMapping(object);\n            return pipelineMappings;\n        }catch (Exception e){\n            LOGGER.error(String.format(\"[HUBSPOT] Error while getting pipeline mapping for %s \", object ),e);\n            return pipelineMappings;\n        }\n    }\n\n    @Override\n    public Map<String, String> getPipelineMap","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e6fbda9d-bc13-49d7-b2ce-2f87f45b6a27","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":465,"endLine":499,"content":"nd(BACKTICK).append(identifier).append(BACKTICK).append(EQUALS).append(QUESTION_MARK).append(SPACE).append(AND).append(SPACE);\n                    }\n                }\n        );\n        identifiers.removeAll(nullableIdentifiers);\n\n        // Remove last AND and SPACE\n        whereClause.delete(whereClause.length() - 5, whereClause.length());\n        query = String.format(UPDATE_QUERY, absoluteObjectPath, setClause, whereClause);\n        PreparedStatement stat = null;\n        try {\n            LOGGER.info(\"Executing query : {} \", query);\n            stat = connection.prepareStatement(query);\n            int i = 0;\n            for (Map.Entry entry : data.entrySet()) {\n                stat.setObject(++i, entry.getValue());\n            }\n            for (String identifier : identifiers) {\n                stat.setObject(++i, data.get(identifier));\n            }\n            return stat.executeUpdate();\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while updating data: {}...\", ex.getMessage(), ex);\n            //throw new SQLException(\"Error occurred while trying to update data. \" + parseMessage(ex.getMessage()));\n            throw new SQLException(ex.getMessage());\n        } finally {\n            closeQuietly(this.connection, null, stat);\n        }\n    }\n\n    @Override\n    public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException {\n        Statement stat = null;\n        ResultSet resultSet = null;\n        try ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6271ff12-7fda-44b5-892c-58e2f3a650d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/AuthType.java","startLine":1,"endLine":21,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\nimport java.io.Serializable;\n\npublic enum AuthType implements Serializable {\n    API_KEY(\"API_KEY\"),\n    BASIC_AUTH(\"BASIC_AUTH\"),\n    DB_BASED(\"DB_BASED\"),\n    ACCESS_KEY(\"Access_Key\"),\n    OAUTH(\"OAUTH\");\n\n    private String authType;\n\n    AuthType(String authorizationType) {\n        this.authType = authorizationType;\n    }\n\n    public static String getAuthType(AuthType authType) {\n        return authType.authType;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"20f7e641-f6bb-4ae7-bc36-a7bef440b73e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":353,"endLine":364,"content":"     ODataEntitySetRequest<ClientEntitySet> clientEntitySetRequest = client.getRetrieveRequestFactory().getEntitySetRequest(uri);\n        ODataRetrieveResponse<ClientEntitySet> oDataRetrieveResponse = clientEntitySetRequest.execute();\n        ClientEntitySet clientEntitySet = oDataRetrieveResponse.getBody();\n        List<Relationship> relationships = Lists.newArrayList();\n        for (ClientEntity clientEntity : clientEntitySet.getEntities()) {\n            Relationship relationship = new Relationship();\n            relationship.setReferencedAttribute(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencedAttribute\").getValue())));\n            relationship.setReferencedEntity(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencedEntity\").getValue())));\n            relationship.setReferencingAttribute(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencingAttribute\").getValue())));\n            relationship.setReferencingEntity(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencingEntity\").getValue())));\n            relationship.setReferencedEntityNavigationPropertyName(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencedEntityNavigationPropertyName\").getValue())));\n            relationship.setReferencingEntityNavigationPropertyName(DynamicsGainsightUtils.valueOf(extractValue(clientEntity.getProperty(\"ReferencingEntityNavigationPropertyName\").getVal","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16ea1678-21e0-4b06-8341-0f05955147af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":435,"endLine":454,"content":"T)\n            ).map(column -> column.getLogicalName()).collect(Collectors.toList());\n        }\n\n        Map<String, Set<String>> selectAndExpandGroup = groupBySelectAndExpand(getRecordsRequest.getProjections());\n        Set<String> expandGroup = Sets.newHashSet();\n        Set<String> selectGroup = Sets.newHashSet();\n        Map<String, ExternalDataType> logicalNameToExternalType = msDynamicsObject.getColumns().stream().collect(Collectors.toMap(Column::getLogicalName, Column::getExternalType));\n        Map<String, Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_SELECT))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_SELECT)) {\n                String propertyValue = masterLookUpConfiguration.get(getRecordsRequest.getPluralName() + \"@@\" + projection);\n                if (Objects.nonNull(propertyValue)) {\n                    String newSelectProjection = propertyValue + \".\" + projection;\n                    expandGroup.add(newSelectProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newSelectProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projection);\n                } else if (logicalNameToExternalType.get(projection) == ExternalDataType.LOOKUP ||\n                        logicalNameT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1390c18-b30a-4ddb-bb31-bf9dd3bbdb17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescription;\nimport com.gainsight.integration.connector.hubspot.bean.GainsightHubspotFieldDescriptionV3;\nimport com.gainsight.integration.connector.hubspot.bean.ModificationMetadata;\n\nimport java.util.List;\n\npublic class GainsightHubspotMetaDataUtilV3 {\n\n    public static void addRequiredFieldsOfEntity(String entityName, List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions) { // todo need to change this, can be better\n        addRequiredFieldsOfEntity(entityName, gainsightHubspotFieldDescriptions, false);\n    }\n\n    public static void addRequiredFieldsOfEntity(String entityName, List<GainsightHubspotFieldDescriptionV3> gainsightHubspotFieldDescriptions, boolean isApiVersionV3) { // todo need to change this, can be better\n        GSHubSpotEntityEnum entity = GSHubSpotEntityEnum.getInstance(entityName);\n        switch (entity) {\n\n            case COMPANY:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\", new ModificationMetadata(false, true, true)));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    gainsightHubspotFieldDescriptions.a","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"49d84203-53ba-490f-84a1-999302f19321","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":68,"endLine":97,"content":" column.setHasLookup(true);\n                    column.setTargetObject(targets.get(0));\n                }\n            }\n            column.setLocalType(externalDataType.getLocalType());\n            if (externalDataType == ExternalDataType.STRING) {\n                Map<String, Object> properties = Maps.newHashMap();\n                properties.put(\"format\", attribute.get(\"Format\"));\n                column.setProperties(properties);\n            }\n            else if ((externalDataType == ExternalDataType.PICKLIST || externalDataType == ExternalDataType.STATUS || externalDataType == ExternalDataType.STATE || externalDataType == ExternalDataType.MULTISELECTPICKLIST) && Objects.nonNull(attribute.get(\"OptionSet\"))) {\n                Map<String, Object> properties = Maps.newHashMap();\n                properties.put(OPTION_SET_PROPERTY, attribute.get(\"OptionSet\"));\n                column.setProperties(properties);\n            }\n            columns.add(column);\n        }\n        return columns;\n    }\n\n    private static boolean isNotReadable(Map<String, Object> attribute) {\n        return Objects.isNull(attribute) || !DynamicsGainsightUtils.parseBoolean(attribute.get(\"IsValidForRead\"));\n    }\n\n    private static boolean isChildAttribute(Map<String, Object> attribute) {\n        return Objects.isNull(attribute) || Objects.nonNull(attribute.get(\"AttributeOf\"));\n    }\n\n    public static String parseDisplayName(Map<String, Object> entity, String defaultValue) {\n        String displayName = ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bf7d1a13-4bb7-4b1c-bf6e-c66449a51b0c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":593,"endLine":612,"content":"enerator.addRecordsForParquetFile(record);\n        }\n    }\n\n    // Change multi picklist seperator from ,(Comma) to ;(Semicolon)\n    private Object replaceMPSeperator(Object value) {\n        return Objects.isNull(value) ? null : value.toString().replaceAll(UCConstants.COMMA, UCConstants.SEMICOLON);\n    }\n\n    private Map<String, Map<Integer, String>> prepareOptionsetMap(ObjectDefinition objectDefinition, Set<String> projections) {\n        List<GSFieldDefinition> fieldDefinitions = objectDefinition.getFields().stream().filter(gsFieldDefinition -> projections.contains(gsFieldDefinition.getFieldName())).collect(Collectors.toList());\n        Map<String, Map<Integer, String>> optionSetMap = Maps.newHashMap();\n        for (GSFieldDefinition gsFieldDefinition : fieldDefinitions) {\n            if (gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.PICKLIST.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.STATUS.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.STATE.getValue())\n                    || gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST)) {\n                Map<Integer, String> valueToLabelMap = Maps.newHashMap();\n                for (PicklistOption option : gsFieldDefinition.getOptions()) {\n                    valueToLabelMap.put((Integer) option.getValue(), opt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0eeb0368-bef6-468f-bd3f-81c2aa569ce2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":204,"endLine":223,"content":"                   if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        accountMap = MAPPER.readValue(jsonResponse, Map.class);\n                        LOGGER.error(\"{} retryCount: {}\", AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), retryCount);\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage(), accountMap.get(\"message\")));\n                    } else {\n                        LOGGER.error(\"{} retryCount: {}\", AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), retryCount);\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_EMPTY_BODY_ERROR.getTranslatedMessage(), response.getStatusLine().getStatusCode()));\n                    }\n                }\n            } catch (Exception e) {\n                ++retryCount;\n                LOGGER.error(\"Error while getting accessToken. retryCount: {}\", retryCount, e);\n            }\n        }\n        if (StringUtils.isEmpty(accessToken)) {\n            LOGGER.error(\"Failed to get access token after {} retries\", DBFS_OPERATIONS_MAX_RETRY_COUNT);\n            throw new SystemException(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage());\n        } else {","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2ba608e4-b202-4f30-b35a-297b772d1804","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubspotAssociationEnum.java","startLine":32,"endLine":64,"content":"d = definitionId;\n        this.sourceObjectType = sourceObjectType;\n        this.targetObjectType = targetObjectType;\n    }\n\n    public static GSHubspotAssociationEnum getInstance(String associationType){\n        return ASSOCIATION_MAP.get(associationType);\n    }\n\n    public static String getAssociationType(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.associationType;\n    }\n\n    public static int getDefinitionId(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.definitionId;\n    }\n\n    public static String getObjectIdField(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.sourceObjectLookUpField;\n    }\n\n    public static String getTargetObjectLookUpField(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.targetObjectLookUpField;\n    }\n\n    public static String getSourceObjectType(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.sourceObjectType;\n    }\n\n    public static String getTargetObjectType(GSHubspotAssociationEnum gsHubspotAssociationEnum) {\n        return gsHubspotAssociationEnum.targetObjectType;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"54a8f326-9458-410b-af3e-0c2d5d3ee9bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/bean/UCChannelObject.java","startLine":37,"endLine":49,"content":"operties; // NOSONAR\n    private long lastReplayId;\n    private Date lastReplayDate;\n    private long lastProcessedReplayId;\n    private Date lastProcessedReplayDate;\n\n    public Map<String, Object> getProperties() {\n        if(properties == null) {\n            properties = new HashMap<>();\n        }\n        return properties;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a26d553d-7774-483a-bf59-c17edceb4bec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":219,"endLine":238,"content":"perties().getValue(\"mtls.certificate.path\");\n                String certificatePassword = DeploymentProperties.getDeploymentProperties().getValue(\"mtls.certificate.password\");\n                if(StringUtils.isEmpty(certificatePath) || StringUtils.isEmpty(certificatePassword)) {\n                    LOGGER.error(\"MTLS certificate path or password is Missing\");\n                    throw new SystemException(\"MTLS certificate path or password is Missing\");\n                }\n                LOGGER.info(\"MTLS is enabled , mtls s3 file path {}\",certificatePath);\n                String bucketName= DeploymentProperties.getDeploymentProperties().getValue(\"s3.pnp.bucket.name\");\n                String dateTime = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\"));\n                keyStoreFile = File.createTempFile(RequestContextProvider.getTenantId() + \"_\" + dateTime,\".jks\");\n                keyStoreFile = GainSightS3.getDefault().downloadFileAs(bucketName, certificatePath,null,null,null,keyStoreFile);\n                logExpireAndAlias(keyStoreFile,certificatePassword);\n                prop.put(SSL, \"1\");\n                prop.put(SSL_KEYSTORE, keyStoreFile.getAbsoluteFile().toString());\n                prop.put(SSL_KEYSTORE_PWD, certificatePassword);\n            }\n            this.connection = createConnection(connectionUrl, prop);\n        } catch (Exception ex) {\n            LOGGER.error(\"Failed to connect to Databricks due to : {}\", ex.getMessage(), ex);\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db67c4be-06cc-4e4d-b20e-84184633aa76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":190,"endLine":220,"content":"r(String.format(\"[HUBSPOT] Error while getting pipeline mapping for %s \", object ),e);\n            return pipelineMappings;\n        }\n    }\n\n    @Override\n    public Map<String, String> getPipelineMappingIdToLabel(String object, String clientId,\n                                                           String clientSecret, String refreshToken) {\n        List<Object> pipelineMappings = getPipelineMappingObject(object,clientId,clientSecret, refreshToken);\n\n        Map<String, String> pipelineMappingIdToLabel = new HashMap<>();\n        for (Object obj : pipelineMappings) {\n            Map<String, Object> pipeline = (Map<String, Object>) obj;\n            List<Map<String, Object>> items = (List<Map<String, Object>>) pipeline.get(\"stages\");\n            for (Map<String, Object> item : items) {\n                pipelineMappingIdToLabel.put(String.valueOf(item.get(\"id\")), String.valueOf(item.get(\"label\")));\n            }\n        }\n\n        return pipelineMappingIdToLabel;\n    }\n\n    @Override\n    public List<Object> getDataWithQuery(String query, String clientId, String clientSecret, String refreshToken) {\n        List<Object> data = new ArrayList<>();\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            data = gainsightHubspotChannelService.getDataWithQuery(query);\n            return data;\n        }catch (Exception e){\n            LOGGER.e","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2212c3c9-6d78-45a6-b77f-b2c9c2f507d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":104,"endLine":130,"content":"air>();\n        data.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n        data.add(new BasicNameValuePair(\"refresh_token\", authenticationResult.getRefreshToken()));\n        data.add(new BasicNameValuePair(\"client_id\", MSDynamicsContext.getClientId()));\n        data.add(new BasicNameValuePair(\"client_secret\", MSDynamicsContext.getClientSecret()));\n        data.add(new BasicNameValuePair(\"resource\", MSDynamicsContext.getResourceUri()));\n        return data;\n    }\n\n    @Override\n    protected void refreshToken(final DefaultHttpClient client) throws OAuth2Exception {\n        final List<BasicNameValuePair> data = prepareRefreshCallData();\n        fetchAccessToken(wrapped.create(null, null), data);\n        if (token == null) {\n            throw new OAuth2Exception(\"No OAuth2 refresh token\");\n        }\n    }\n\n    private AuthenticationResult getAccessTokenFromRefreshToken() throws MalformedURLException, ExecutionException, InterruptedException,\n            ServiceUnavailableException {\n        AuthenticationContext context;\n        AuthenticationResult result;\n        ExecutorService service = null;\n        try {\n            service = Executors.newFixedThreadPool(1);\n            context = new AuthenticationContext(MSDynamicsContext.getAuthority(), false, service);\n            Future<AuthenticationResult> future = context.acquireTokenByRefreshToken(MSDynamicsContext.getCtx().getRefreshToken(), new ClientCredential(MSDynamicsContext.getClientId(), MSDynamicsContext.getC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8fa3d528-88cf-4c6e-b3ee-c9ec41f2b1a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":834,"endLine":857,"content":");\n            }\n            recordResponseGenerator.addRecords(record);\n        }\n    }\n\n    private void generateRecords(RecordResponseGenerator recordResponseGenerator, ClientEntitySet clientEntitySet, Set<String> expandGroup,\n                                 Map<String, Map<Integer, String>> optionSetMap, Map<String, Set<String>> modifiedProjectionToOriginalProjections,\n                                 boolean isPrimitiveDateTimeConversionRequired, List<String> multiPicklistColumns) {\n        List<ClientEntity> clientEntityList = clientEntitySet.getEntities();\n        for (ClientEntity clientEntity : clientEntityList) {\n            Map<String, Object> record = Maps.newHashMap();\n            for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                Object value = extractValue(clientProperty, optionSetMap, isPrimitiveDateTimeConversionRequired);\n                if (modifiedProjectionToOriginalProjections.containsKey(clientProperty.getName())) {\n                    for (String projection : modifiedProjectionToOriginalProjections.get(clientProperty.getName())) {\n                        if (multiPicklistColumns.contains(projection)) {\n                            record.put(projection, replaceMPSeperator(value));\n                        } else {\n                            record.put(projection, value);\n                        }\n                    }\n                } else {\n                    if (multiPicklistColumns.contains(clientProperty.getName(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a6ae7a7d-c95c-407e-ad44-720a372a4b14","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":81,"endLine":119,"content":"tring ASSOCIATIONS_KEYWORD = \"associations\";\n    private static final int TIMEOUT = 30;\n    private static final int ALLOWED_RETRIES = 3;\n\n    AuthenticationType authenticationType;\n    private String apiKey;\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n\n\n    protected GainsightHubspotChannelServiceImpl(String apiKey) {\n        this.apiKey = apiKey;\n        this.authenticationType = AuthenticationType.API_KEY;\n        validate();\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout(TIMEOUT * 1000)\n                .setConnectionRequestTimeout(TIMEOUT * 1000)\n                .setSocketTimeout(TIMEOUT * 1000).build();\n        this.httpclient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n        this.httpGet = new HttpGet();\n        this.httpPost = new HttpPost();\n        this.httpPatch = new HttpPatch();\n    }\n\n    public GainsightHubspotChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.refreshToken = refreshToken;\n        this.accessToken = accessToken;\n        this.authenticationType = AuthenticationType.OAUTH2;\n        validate();\n        RequestConfig config = Req","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"172da27f-b366-4173-ba47-c422e2240022","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":455,"endLine":477,"content":"static final String SALESFORCE_CAMEL_CONTEXT_METADATA = \"SalesforceCamelContext_Metadata\";\n\n        public static final String CONTENT_TYPE = \"contentType\";\n        public static final String MDA_JOB_ID = \"mdaJobId\";\n        public static final String S3_PNP_BUCKET_NAME = \"s3.pnp.bucket.name\";\n        public static final String HEADER_OBJECT_NAME = \"objectName\";\n\n        public static final String DEPENDENT_JOBS = \"DEPENDENT_JOBS\";\n        public static final String IS_OOB = \"IS_OOB\";\n        public static final String JOB_TRAVERSAL_ORDER = \"JOB_TRAVERSAL_ORDER\";\n        public static final String ENABLE_SCHEDULE = \"ENABLE_SCHEDULE\";\n        public static final String XML = \"XML\";\n        public static final String LOOK_UP_IDS = \"LOOK_UP_IDS\";\n        public static final String REALTIME_SYNC_LOOKUP_DETAILS = \"REALTIME_SYNC_LOOKUP_DETAILS\";\n        public static final String LOOK_UP_SYNC_DIRECTION = \"LOOK_UP_SYNC_DIRECTION\";\n        public static final String CUSTOM_DOMAIN_ENABLED = \"CUSTOM_DOMAIN_ENABLED\";\n        public static final String SFDC_INSTANCE_URL = \"SFDC_INSTANCE_URL\";\n        public static final String SFDC_TOKEN_ID = \"SFDC_TOKEN_ID\";\n        public static final String CONNECTION_ID = \"connectionId\";\n        public static final String SFDC_ORG_ID = \"SFDC_ORG_ID\";\n        public static final String IS_EXTERNAL_CRM_CHANGED = \"IS_EXTERNAL_CRM_CHANGED\";\n        public static final String SFDC_USER_ID = \"SFDC_USER_ID\";\n        public static final String SFDC_USER_NAME","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ce7b47e-f5ae-4ede-ac7c-f79ff7ea06c8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":302,"endLine":324,"content":"_DYNAMICS_OBJECT_LOGICAL_NAME_MISSING, HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.isNotBlank(columnLogicalName, DynamicsErrorCode.PNP_DYNAMICS_COLUMN_LOGICAL_NAME_MISSING, HttpStatus.SC_BAD_REQUEST);\n        ODataClient client = GSODataClientFactory.getOdataClient();\n\n        /*After enabling filter on lookup fields, fieldName of Picklist datatype, would be expected with lookupFieldName appended.\n        Example:\n        Before: columnLogicalName = accountcategorycode\n        After enabling the filter on lookup fields, columnLogicalName = accountid.accountcategorycode\n        Hence we need to exclude the lookupField and consider the logicalName of the picklist field*/\n        if (columnLogicalName.contains(UCConstants.PERIOD)) {\n            columnLogicalName = columnLogicalName.split(\"\\\\.\")[1];\n        }\n\n        String relativePath = String.format(\"/EntityDefinitions(LogicalName='%s')/Attributes(LogicalName='%s')\", objectLogicalName, columnLogicalName);\n        URIBuilder uriBuilder = client.newURIBuilder(MSDynamicsContext.getApiUrl() + relativePath);\n        URI uri = uriBuilder.build();\n        ODataEntityRequest<ClientEntity> clientEntityRequest = client.getRetrieveRequestFactory().getEntityRequest(uri);\n        ODataRetrieveResponse<ClientEntity> clientEntityResponse;\n        try {\n            clientEntityResponse = clientEntityRequest.execute();\n        } catch (Exception e) {\n            //Not an entity or attribute or optionset\n            LOGGER.error(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0d762cda-2947-4ccf-8c0e-e9625eae101b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":50,"endLine":73,"content":"ue;\n            }\n            ExternalDataType externalDataType = ExternalDataType.fromAttribute(attribute);\n            if (!externalDataType.isSupported()) {\n                continue;\n            }\n            Column column = new Column();\n            column.setFieldName(DynamicsGainsightUtils.valueOf(attribute.get(\"SchemaName\")));\n            column.setMaxLength(DynamicsGainsightUtils.parseToInteger(DynamicsGainsightUtils.valueOf(attribute.get(\"MaxLength\"))));\n            column.setDefaultValue(DynamicsGainsightUtils.valueOf(attribute.get(\"DefaultValue\")));\n            column.setPrimary(DynamicsGainsightUtils.parseBoolean(attribute.get(\"IsPrimaryId\")) && !DynamicsGainsightUtils.parseBoolean(attribute.get(\"IsLogical\")));\n            column.setLogicalName(DynamicsGainsightUtils.valueOf(attribute.get(\"LogicalName\")));\n            column.setId(DynamicsGainsightUtils.valueOf(attribute.get(\"MetadataId\")));\n            column.setDisplayName(parseDisplayName(attribute));\n            column.setExternalType(externalDataType);\n            if (MSDynamicsConstants.EXPANSION_ALLOWED_TYPES.contains(externalDataType.toString().toUpperCase())) {\n                List<String> targets = (List) attribute.get(\"Targets\");\n                if (CollectionUtils.isNotEmpty(targets)) {\n                    column.setHasLookup(true);\n                    column.setTargetObject(targets.get(0));\n                }\n            }\n            column.setLocalType(externalDataType.getLocalType());\n            if","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"02a653ac-1c9d-464e-bcd7-260949b1a515","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotEntityDescription.java","startLine":1,"endLine":50,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author : vipinsharma\n * @createdOn : 28 Jun 2019 :: 13:20\n **/\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightHubspotEntityDescription{\n\n    private String entityName;\n    private String entityId;// todo might not be valid\n    private List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions;\n\n    public GainsightHubspotEntityDescription() {\n    }\n\n    public String getEntityName() {\n        return entityName;\n    }\n\n    public void setEntityName(String entityName) {\n        this.entityName = entityName;\n    }\n\n    public List<GainsightHubspotFieldDescription> getGainsightHubspotFieldDescriptions() {\n        return gainsightHubspotFieldDescriptions;\n    }\n\n    public void setGainsightHubspotFieldDescriptions(List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions) {\n        this.gainsightHubspotFieldDescriptions = gainsightHubspotFieldDescriptions;\n    }\n\n    public String getEntityId() {\n        return entityId;\n    }\n\n    public void setEntityId(String entityId) {\n        this.entityId = entityId;\n    }\n\n    public GainsightHubspotEntityDescription(String entityName, List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions) {\n        this.entityName = entityName;\n        this.gainsightHubspotFieldDescriptions = gainsightHubspot","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b645b00-6880-41f7-a81a-3159698b6cd7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":86,"endLine":108,"content":"               LOGGER.info(\"Uploading the file to the databricks file system to path: {} retryCount: {}\", fileUploadPath, retryCount);\n                MultipartEntityBuilder builder = MultipartEntityBuilder.create();\n                builder.addPart(CONTENTS, new FileBody(file, ContentType.create(CSV_APPLICATION_TYPE)))\n                        .addTextBody(IPaasConstants.PATH, fileUploadPath);\n                HttpPost uploadFile = new HttpPost(url);\n                uploadFile.setEntity(builder.build());\n                headers.forEach(uploadFile::addHeader);\n\n                CloseableHttpClient httpClient = HttpClients.createDefault();\n                try (CloseableHttpResponse response = httpClient.execute(uploadFile)) {\n                    if (Objects.nonNull(response.getStatusLine()) && HttpStatus.SC_OK == response.getStatusLine().getStatusCode()) {\n                        LOGGER.info(\"Uploaded the file to DBFS: {}\", fileUploadPath);\n                        return fileUploadPath;\n                    } else {\n                        LOGGER.info(\"Upload file to DBFS failed with reason: {}\", response.getStatusLine());\n                        ++retryCount;\n                    }\n                } catch (IOException e) {\n                    LOGGER.error(\"Failed to upload file to Databricks file system: {}\", e.getMessage(), e);\n                    throw e;\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Something went wrong in uploading file to ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad14b2ce-3eb3-4be4-ba56-1c781e9f413b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":290,"endLine":321,"content":"EYWORD.equalsIgnoreCase(resourceName))\n                return gainsightHubspotChannelService.searchOwnerData();\n            else\n                return gainsightHubspotChannelService.searchData(resourceName, hubspotSearchRequest);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            return null;\n        }\n    }\n\n    @Override\n    public Map<String, Object> getFileMetadata(String clientId, String clientSecret, String refreshToken, String fileId, boolean signedUrl) {\n\n        try {\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.getFileMetaData(fileId, signedUrl);\n        } catch (Exception ex) {\n            LOGGER.error(ex.getMessage(), ex);\n            return new HashMap<>();\n        }\n    }\n\n    @Override\n    public Map<String, Object> uploadFile(String clientId, String clientSecret, String refreshToken, File file, Map<String, Object> options, String folderId) {\n        try {\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n            return gainsightHubspotChannelService.uploadFile(file, options, folderId);\n        } catch (Exception ex) {\n            LOGGER.error(ex.getMessage(), ex);\n            return","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"378ea8a4-a331-4c9d-be41-c95a68b1fc82","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaFetchServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.aha.service;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.util.List;\n\n/**\n * @author puneetsaluja\n * @created 24/03/23\n */\npublic class GainsightAhaFetchServiceImpl implements GainsightAhaFetchService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightAhaFetchServiceImpl.class);\n\n    private static final GainsightAhaChannelFactory gainsightAhaChannelFactory = new GainsightAhaChannelFactory();\n\n    @Override\n    public InputStream getPaginatedEntityData(String subDomain, String entityName, List<String> projectionList, String apiKey, int pageSize, int pageNumber, String updatedSince) throws Exception {\n        try{\n            GainsightAhaChannelService gainsightAhaChannelService =\n                    gainsightAhaChannelFactory.getChannelServiceWithApiKey(apiKey);\n            return gainsightAhaChannelService.getPaginatedEntityDataLatest(subDomain, entityName, projectionList, pageSize, pageNumber, updatedSince);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw e;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d705b3e-2715-4908-bdba-7e2902def505","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/test/java/com/gainsight/integration/connector/sap/GainsightSapMktFetchServiceImplTest.java","startLine":37,"endLine":73,"content":"(GainsightSapMktFetchServiceImplTest.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private ODataClient oDataClientForApiKey;\n\n    @Autowired\n    private GainsightSapMktFetchService gainsightSapMktFetchService;\n\n    @BeforeEach\n    public void init(){\n        this.oDataClientForApiKey = GainsightODataSAPClientFactory.getOdataClientForSAPMKT(\"NIKfmbA7Di0ZnDYnHoyKfQSQZ79Jmaoa\");\n//        this.oDataClientForApiKey = GainsightODataSAPClientFactory.getOdataClientForSAPMKT(\"t0MtKNqGmkU69LskgpcHCqiewK4rWalf\");\n    }\n\n    @AfterEach\n    public void tearDown(){\n        this.oDataClientForApiKey = null;\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"List Entities Name\")\n    @Order(1)\n    public void listAllEntitiesNamesAvailable(){\n        try {\n        \tString serviceUrl = \"https://sandbox.api.sap.com/s4hanacloud/sap/opu/odata/sap/API_MKT_CAMPAIGN_SRV;v=0002/\";\n            List<String> entitiesName = gainsightSapMktFetchService.pullAvailableEntitiesName(oDataClientForApiKey,serviceUrl);\n            assertFalse(entitiesName.isEmpty(),\"No Entities available at endpoint\");\n            LOGGER.info(String.format(\" Entities available at endpoints are : %s\",entitiesName.toString()));\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(),e);\n            fail(e.getMessage());\n        }\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"Campaign\", \"SpendHeaderTimeSplit\", \"SpendItemTimeSplit\", \"ActualSpend\", \"SpendItem","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c32d5068-66f4-45ac-9898-ce2dc5ccabd5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImpl.java","startLine":1,"endLine":43,"content":"package com.gainsight.integration.connector.sap;\n\nimport com.google.common.collect.Lists;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.commons.api.edm.Edm;\nimport org.apache.olingo.commons.api.edm.EdmEntityType;\nimport org.apache.olingo.commons.api.edm.EdmSchema;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\n\n/**\n * @author vipinsharma\n * @version 1.0\n *\n */\n\n@Service\npublic class GainsightSapCrmFetchServiceImpl implements GainsightSapCrmFetchService {\n\n    @Autowired\n    private GainsightSAPChannelService  gainsightSAPChannelService;\n\n    @Override\n    public Object getAllEntityNamesAvailable(ODataClient oDataClient) throws IOException {\n        String serviceUrl = \"https://sfdcbridged39b34cbf.us2.hana.ondemand.com/sfdc.svc/\"; // need to check how to pass this\n        List<String> result = Lists.newArrayList();\n        Edm edm = gainsightSAPChannelService.readEdm(serviceUrl,oDataClient);\n        for (EdmSchema schema : edm.getSchemas()) { //\n            for (EdmEntityType entityType : schema.getEntityTypes()) {\n                    result.add(entityType.getName().toString()); // for now just returning name\n            }\n        }\n        return result;\n    }\n\n    @Override\n    public Object getEntityMetadata(ODataClient oDataClient,String entityNam","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77844c76-986b-4626-89f4-35151f137a6a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/DuctChangeEventDTO.java","startLine":1,"endLine":53,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport lombok.*;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang3.ObjectUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\n@ToString\npublic class DuctChangeEventDTO implements ChangeEventDto {\n    private List<String> recordIds;\n    private String entityName;\n    private String changeType;\n    private Map<String, Object> payload;\n    private List<String> changedFields;\n\n    @Override\n    public String fetchChangeType() {\n        return getChangeType();\n    }\n\n    @Override\n    public List<String> recordIds() {\n        return GainsightCollectionUtils.nullSafeList(recordIds);\n    }\n\n    @Override\n    public Map<String, Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap) {\n        return payload;\n    }\n\n    @Override\n    public Map<String, Object> fetchChangeFieldsMap() {\n        Map<String, Object> changedFieldsMap = new HashMap<>();\n        if (ObjectUtils.isNotEmpty(changedFields)) {\n            for (String field : changedFields) {\n                if (payload.containsKey(field)) {\n                    changedFieldsMap.put(field, payload.get(field));\n                }\n            }\n        }\n        return changedFieldsMap;\n    }\n\n    @Override\n    //avoid batching and process events sequentially\n    public boolean batchableWith(ChangeEventDto changeEventDto) {\n        if(!(changeEventDto ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c98d097-422e-4747-8b89-fbc1c6a3f81a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":249,"endLine":277,"content":"ntityDataModel() throws Exception {\n        boolean hasMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubspotFetchService.getPaginatedEntityData(\"DEAL\",new ArrayList<>(Arrays.asList(\"dealname\", \"amount\", \"amount_in_home_currency\",\"days_to_close\")),\n                    \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\", offset);\n            Assertions.assertTrue(inputStream != null, \"No data found\");\n            String jsonDataResponse = IOUtils.toString(inputStream);\n\n            Map<String, Object> objectMap = OBJECT_MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n            });\n            ArrayList<Object> contacts = (ArrayList<Object>) objectMap.get(\"deals\");\n            offset = ((Integer)objectMap.get(\"offset\")).longValue();\n            hasMore = (boolean)objectMap.get(\"hasMore\");\n            if(hasMore){\n                Assertions.assertEquals(250, contacts.size(), \"Mismatch in response size\");\n            }\n        }\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Paginated Contact to Company Associations\")\n    @Order(4)\n    void testGetContactToCompanyAssociations() throws Exception {\n\n        HashMap<String, List<String>> response =  gainsightHubspotFetchService.getAssociatedObjects(new ArrayList<String>(Arrays.asList(\"1342\", \"299\")), \"CONTACT_TO_COMPANY\",\n                    \"8","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8d9e9130-7340-45a3-a04c-e7c01276d1f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelService.java","startLine":32,"endLine":41,"content":"Url, ODataClient client) throws IOException;\n\n    InputStream readEntitiesIntoStream(String serviceUri, String entitySetName, ODataClient client, int topValue);\n\n    InputStream readyEntityWithProjectionAndFilter(ODataClient client, String serviceUri, String entitySetName, String commaSepartedEntityProperties, String filterQuery);\n\n    ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitiesWithFilter(String serviceUri, String entitySetName, String filterName, ODataClient client);\n\n    ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntities(String serviceUri, String entitySetName, ODataClient client, int topValue);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0a8ecb7-0ea0-4e5f-aced-b7ce346d0cfe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/utils/CommonUtils.java","startLine":61,"endLine":92,"content":"lterRule, Set<String> values, String fieldName) {\n        if (filterRule != null) {\n            if (filterRule.getRules() != null) {\n                for (FilterRule filter : filterRule.getRules()) {\n                    getValuesFromFilter(filter, values, fieldName);\n                }\n                return;\n            }\n            if (filterRule.getFieldInfo().getJsonPath().equalsIgnoreCase(fieldName))\n                values.add(filterRule.getValues().get(0).getValue().toString());\n        }\n    }\n\n    public static void resolvePicklist(JsonNode jsonElement, Map<String, List<PicklistOption>> picklistMap) {\n        for (Map.Entry<String, List<PicklistOption>> entry : picklistMap.entrySet()) {\n            String fieldName = entry.getKey();\n            List<PicklistOption> picklistOptions = entry.getValue();\n            String[] data = fieldName.split(\"\\\\.\");\n            String picklistField = null;\n            String picklistFieldValue = null;\n            JsonNode picklistObj = jsonElement;\n            for (int i = 0; i < data.length; i++) {\n                try {\n                    String dataEntry = data[i];\n                    if (i == data.length - 1) {\n                        picklistField = dataEntry;\n                        if(picklistObj.get(dataEntry) != null)\n                            picklistFieldValue = picklistObj.get(dataEntry).toString();\n                        else\n                            picklistFieldValue = \"\";\n                    } else {\n           ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47afbbd4-0821-4f02-bce0-27a8f92e004c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/DuctDataOperation.java","startLine":1,"endLine":32,"content":"package com.gainsight.integration.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonValue;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic enum DuctDataOperation {\n    INSERT(\"INSERT\"),\n    UPDATE(\"UPDATE\"),\n    UPSERT(\"UPSERT\"),\n    DELETE(\"DELETE\"),\n    READ(\"READ\");\n\n    private final String ductDataOperation;\n\n    private DuctDataOperation(String ductDataOperation) {\n        this.ductDataOperation = ductDataOperation;\n    }\n\n    @JsonValue\n    public String getDuctDataOperation() {\n        return this.ductDataOperation;\n    }\n\n    public static List<String> getOperationNames() {\n        return Arrays.asList(DuctDataOperation.values()).stream().map(DuctDataOperation::getDuctDataOperation).collect(Collectors.toList());\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e70d3c5f-2a5a-49bf-8ccf-25bf23c7e36d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":278,"endLine":300,"content":"          if(properties.containsKey(UCConstants.GSIntegration.MTLS_ENABLED) && Boolean.parseBoolean(properties.get(UCConstants.GSIntegration.MTLS_ENABLED).toString())) {\n                LOGGER.info(\"MTLS is enabled , mtls s3 file path {}\",mtlsCertificatePath);\n                if(StringUtils.isEmpty(mtlsCertificatePassword) || StringUtils.isEmpty(mtlsCertificatePath)) {\n                    LOGGER.error(\"MTLS certificate path or password is Missing\");\n                    throw new SystemException(\"MTLS certificate path or password is Missing\");\n                }\n                keyStoreFile = getKeystoreFile(mtlsCertificatePath,mtlsBucketName,accessKeyId,accessSecret,region);\n                logExpireAndAlias(keyStoreFile,mtlsCertificatePassword);\n                prop.put(SSL, \"1\");\n                prop.put(SSL_KEYSTORE, keyStoreFile.getAbsoluteFile().toString());\n                prop.put(SSL_KEYSTORE_PWD, mtlsCertificatePassword);\n            }\n            this.connection = createConnection(connectionUrl, prop);\n        } catch (Exception ex) {\n            LOGGER.error(\"Failed to connect to Databricks due to : {}\", ex.getMessage(), ex);\n            throw new SystemException(String.format(\"Failed to connect to Databricks due to %s\", ex.getMessage()));\n        } finally {\n            FileUtils.deleteQuietly(keyStoreFile);\n        }\n    }\n\n    private void logExpireAndAlias(File keyStoreFile, String mtlsCertificatePassword) {\n        try (FileInputStream fis = new FileInputStream","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b0ade16-15df-4004-a46b-2e1d410e4f57","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":355,"endLine":383,"content":"Code());\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n          JsonNode responseMap = OBJECT_MAPPER.readTree(response.getEntity().getContent());\n          if (responseMap.get(\"result\") != null && !responseMap.get(\"result\").asBoolean()) {\n            throw new Exception(\"Caas token generation api failed\");\n          }\n          pnpConnectionsInfo = OBJECT_MAPPER.convertValue(responseMap.get(\"data\"), PNPConnectionsInfo.class);\n          if(null != pnpConnectionsInfo.getProperties() && null != pnpConnectionsInfo.getProperties().get(\"accessToken\")) {\n            LOGGER.info(\"Plain access token received from Duct Framework.\");\n            return pnpConnectionsInfo.getProperties().get(\"accessToken\");\n          } else\n            return CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken());\n        } else {\n          String errorMsg = String.format(\"Caas token generation api returned status code :%s. Reason received:%s.\",\n              response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase());\n          LOGGER.error(errorMsg);\n          throw new Exception(errorMsg);\n        }\n\n      } catch (Exception e) {\n        LOGGER.error(\"Error occurred  \", e);\n      }\n    }\n\n    Object value = config.getValue();\n    if (value instanceof List) {\n      List<String> keys = OBJECT_MAPPER.convertValue(value, new TypeReference<List<String>>() {\n      });\n      List<String> actualValues = new ArrayList<>(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4ee97907-6867-49ab-9bc2-453ffdca0d7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":208,"endLine":229,"content":"> queryParams = new HashMap<>();\n    if (tokenGenerationDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : tokenGenerationDetails.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n    JSONObject concatenatedEntities = new JSONObject();\n    for (AuthApiAttributes bodyDetail : tokenGenerationDetails.getBodyParamDetails()) {\n      Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo);\n      if (value == null)\n        throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n      concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));\n    }\n\n    StringEntity stringEntity = new StringEntity(concatenatedEntities.toString());\n    HttpRequestBase httpClientForApiCall = createHttpClient(tokenGenerationDetails, metadataEngineConfig,\n        null, pnpConnectionsInfo, queryParams, flattenConnectionInfo, null, stringEntity);\n\n        if(!ObjectUtils.isEmpty(tokenGenerationDetails.getBodyFormat()) && tokenGenerationDetails.getBodyFormat().equals(BodyFormat.URLENCODED))","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"84d19ef5-9fa5-4e58-903c-4a0da788548d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":419,"endLine":434,"content":"edEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                        String newExpandProjection;\n                        if (mappedSourceColumns.length == 3) {\n                            newExpandProjection = StringUtils.replaceOnce(projection, mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1], relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        } else {\n                            newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        }\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n               ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d9aa6f5-0436-44e6-ac86-b2a8553d5083","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CsvDataParserBuilder.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.utils.file;\n\nimport com.gainsight.integration.bean.enums.CSVParserType;\nimport com.opencsv.CSVParserBuilder;\nimport com.opencsv.ICSVParser;\nimport com.opencsv.RFC4180ParserBuilder;\n\npublic class CsvDataParserBuilder {\n  private CSVParserType csvParserType;\n  private Character valueSeparator;\n  private Character quoteCharacter;\n  private Character escapeCharacter;\n\n  public CsvDataParserBuilder(CSVParserType csvParserType, Character valueSeparator, Character quoteCharacter,\n                              Character escapeCharacter) {\n    this.csvParserType = csvParserType;\n    this.escapeCharacter = escapeCharacter;\n    this.quoteCharacter = quoteCharacter;\n    this.valueSeparator = valueSeparator;\n  }\n\n  public ICSVParser getIcsvParser(){\n    if(csvParserType == CSVParserType.RFC4180Parser){\n      RFC4180ParserBuilder parserBuilder2 = new RFC4180ParserBuilder();\n      parserBuilder2.withQuoteChar(quoteCharacter).withSeparator(valueSeparator);\n      return parserBuilder2.build();\n    } else {\n      CSVParserBuilder builder = new CSVParserBuilder();\n      builder.withEscapeChar(escapeCharacter).withQuoteChar(quoteCharacter).withSeparator(valueSeparator);\n      return builder.build();\n    }\n  }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e158dcc-7d9e-40b0-89fe-15e133f84b28","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":592,"endLine":622,"content":"om criteria\");\n          continue;\n        }\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n    StringEntity stringEntity = null;\n        if (metadataApiConfigAttributes.getBodyParamDetails() != null) {\n      JSONObject concatenatedEntities = new JSONObject();\n            for (AuthApiAttributes bodyDetail : metadataApiConfigAttributes.getBodyParamDetails()) {\n                Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo, baseUrl, systemToken);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n              if(bodyDetail.getDataType().equals(\"JSON\"))\n                concatenatedEntities.put(bodyDetail.getRequestKey(),OBJECT_MAPPER.readValue(getFinalValue(bodyDetail, value), Map.class));\n              else\n                concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));      }\n\n      stringEntity = new StringEntity(concatenatedEntities.toString());\n    }\n\n    // If we have request body generated, use this without generating/honouring existing body params from metadata config\n    if (Objects.nonNull(generatedRequestBody)) {\n      stringEntity = new StringEntity(DHUtils.convertObjectToJson(generatedRequestBody));\n    }\n\n\n    if (!ObjectUtils.isEmpty(queryParam))\n      queryParams.putAll(queryParam);\n\n    HttpRequestBase http","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c91e495-c603-496d-92df-a003715905fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelFactory.java","startLine":32,"endLine":50,"content":"\";\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSnowflakeChannelFactory.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String ACCESS_TOKEN_ENDPOINT = \"https://%s/oauth/token-request\";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String GRANT_TYPE = \"grant_type\";\n    private static final String REFRESH_TOKEN_KEY = \"refresh_token\";\n\n    public GainsightSnowflakeChannelService getChannelFromPnpConnectionInfo(PNPConnectionsInfo pnpConnectionsInfo) {\n        Objects.requireNonNull(pnpConnectionsInfo, AdapterErrorMessages.CONNECTION_INFO_NULL.getTranslatedMessage());\n        Objects.requireNonNull(pnpConnectionsInfo.getAuthorizationType(), AdapterErrorMessages.AUTHENTICATION_TYPE_UNKNOWN.getTranslatedMessage());\n        return new GainsightSnowflakeChannelServiceImpl(pnpConnectionsInfo);\n    }\n\n    public GainsightSnowflakeChannelService getChannelFromProperties(Map properties) {\n        Objects.requireNonNull(properties.get(DATABASE_HOST), AdapterErrorMessages.DATABASE_HOST_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(DATASET_ID), AdapterErrorMessages.DATASET_ID_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(DATABASE_NAME), AdapterErrorMessages.DATABASE_NAME_NULL.getTranslatedMessage());\n        Objects.requireNonNull(properties.get(USERNAME), AdapterErrorMessages.USERNAME_NULL.getTranslatedMessage(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e215f7cf-be55-493c-9e67-8820403b18c6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":300,"endLine":320,"content":"potFetchService.getEntityProperties(\"TICKET\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> ticketMetaData = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(ticketMetaData, \"No Metadata found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Paginated Deal to Company Associations\")\n    @Order(4)\n    void testGetDealToCompanyAssociations() throws Exception {\n\n        HashMap<String, List<String>> response =  gainsightHubspotFetchService.getAssociatedObjects(new ArrayList<String>(Arrays.asList(\"1026584656\")), \"DEAL_TO_COMPANY\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(response != null, \"No associations found\");\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1f04b59d-f517-4023-9c13-cf38a8735753","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileMerger.java","startLine":38,"endLine":53,"content":"                      while ((line = reader.readLine()) != null) {\n                            writer.write(line);\n                            writer.newLine();\n                        }\n                        writer.flush();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Error merging files\", e);\n            throw e;\n        }\n        stopWatch.stop();\n        LOGGER.info(\"Completed merging of files {} in :{} seconds\", files.size(), stopWatch.getTotalTimeSeconds());\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"eda7e1ea-e8f9-4882-90ec-10aeee296213","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":1,"endLine":41,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils.common;\n\nimport com.gainsight.properties.DeploymentProperties;\n\n/**\n * This class consists of all the constants used in Unified Connectors implementation.\n *\n * @Author : Vipin Sharma\n * @CreatedOn : 21/03/16\n */\npublic class UCConstants {\n\n\n    /**\n     * TODO Note : Please make sure, to add constants under the specific category to make it more simple/easy while debugging & please remove the unsued ones.\n     */\n\n    private UCConstants() {\n    }\n\n    // Specific to Mixpanel Connector\n    public static final String MIXPANEL_TIME_FIELD_ENDS_WITH_IDENTIFIER = \"time\";\n    public static final String MIXPANEL_TRACK_DOLLAR_SUBSTITUTE_FOR_KEY = \"Track \";\n    public static final String MP_SESSION_ID = \"MP_SESSION_ID\";\n    public static final String PAGE = \"page\";\n    public static final String FROM_DATE = \"from_date\";\n    public static final String TO_DATE = \"to_date\";\n    public static final String WHERE = \"where\";\n    public static final String MIXPANEL_PROPERTIES = \"properties\";\n    public static final int MIXPANEL_REQUEST_TIMEOUT = 60 * 60 * 1000;\n    public static final String AUTHORIZATION = \"Authorization\";\n    public static final String BEARER = \"Bearer \";\n    public static final String BASIC = \"Basic \";\n    public static final String GS_B2B_TOKEN = \"GS-B2B-TOKEN \";\n    public static final String MIXPANEL_DISTINCT_ID_LOOK_UP = \"distinct_id\";\n\n    //Special Characters Specific co","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f828b316-9e5e-4ee0-8b00-2490b6d8f0a2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":121,"endLine":129,"content":"potFieldDescription(fieldName, fieldName, fieldName, \"string\", \"text\");\n        gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription11);\n    }\n\n    private static void addCommonDeletedFieldRef(List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions) {\n        GainsightHubspotFieldDescription gainsightHubspotFieldDescription03 = new GainsightHubspotFieldDescription(\"isDeleted\", \"isDeleted\", \"isDeleted\", \"bool\", \"booleancheckbox\");\n        gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription03);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"17eded77-cb04-48aa-aad9-9ed73564030e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.enums.metadata.engine.Location;\nimport com.gainsight.integration.bean.metadata.engine.RateLimitDetails;\nimport jodd.util.StringUtil;\nimport org.apache.http.Header;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.json.JSONObject;\nimport org.json.XML;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class MetadataEngineServiceImpl implements MetadataEngineService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MetadataEngineServiceImpl.class);\n\n    private static final int DEFAULT_TIMEOUT = 60;\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    @Override\n    public JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails) throws Exception {\n\n        return executeApi(httpRequest, responseRootKey, rateLimitDetails, DEFAULT_TIMEOUT);\n    }\n\n    @Override\n    public JsonNode executeApi(HttpRequestBase httpRequest, String responseRootKey, RateLimitDetails rateLimitDetails, int timeout) throws E","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fb919ba-796e-471c-ab12-64bd044259ea","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/SubAttributeAuditType.java","startLine":51,"endLine":71,"content":"ibuteAuditType\n   */\n  @JsonValue\n  public String getValue() {\n    return value;\n  }\n\n  /**\n   * This code is for case-insensitive enums.\n   *\n   * @param value The value\n   * @return The enum\n   */\n  @JsonCreator\n  public static SubAttributeAuditType forValue(String value) {\n    if (value == null) {\n      return null;\n    }\n    return SUB_ATTRIBUTE_TYPE_MAP.get(value.toUpperCase());\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dcb59cc5-62f7-4480-a55a-80dc8688e273","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":647,"endLine":671,"content":"ight\";\n        public static final String SALESFORCE = \"Salesforce\";\n        public static final String EVENTS_CONNECTOR = \"EVENTS_CONNECTOR\";\n        public static final String SALESFORCE_CALL_OPTIONS = \"Sforce-Call-Options\";\n        public static final String CLIENT_GAINSIGHT = \"client=gainsight\";\n        public static final String RTS_WB_REQUEST_LIMIT_EXCEEDED = \"REQUEST_LIMIT_EXCEEDED\";\n        public static final String ERROR_CODE = \"errorCode\";\n        public static final String MESSAGE = \"message\";\n        public static final String DAILY_API_REQUESTS = \"DailyApiRequests\";\n        public static final String REMAINING = \"Remaining\";\n        public static final String MAX = \"Max\";\n        public static final String COMPANY_PERSON_OBJECT_NAME = \"company_person\";\n        public static final String PERSON_OBJECT_NAME = \"person\";\n\n        public static final String CUSTOM_QUERY = \"CUSTOM_QUERY\";\n        public static final String START_TIME = \"START_TIME\";\n        public static final String END_TIME = \"END_TIME\";\n        public static final String SALESFORCE_API_VERSION = \"SALESFORCE_API_VERSION\";\n        public static final String CUSTOM_OAUTH_ENABLED = \"CUSTOM_OAUTH_ENABLED\";\n        public static final String CUSTOM_OAUTH_CLIENT_ID = \"CUSTOM_OAUTH_CLIENT_ID\";\n        public static final String CUSTOM_OAUTH_CLIENT_SECRET = \"CUSTOM_OAUTH_CLIENT_SECRET\";\n        public static final String FAILURE_REASON = \"FAILURE_REASON\";\n        /**\n         * Timeline Constants\n         *","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd885738-8347-457c-b7e5-132e3c5917df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/DataTypeMappings.java","startLine":1,"endLine":49,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.platform.metadata.DataType;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class DataTypeMappings implements Serializable {\n    private static final long serialVersionUID = 1L;\n    private String externalDatatype;\n    private List<String> allowedFilterOperators;\n    private List<String> allowedExternalFilterOperators;\n    private String format;\n    private com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType datahighwayDatatype;\n    private DataType gainsightDatatype;\n    private List<DataType> supportedGainsightDatatypes;\n    private Integer decimalPlaces;\n    private String writebackFormat;\n    private String filterValueFormat;\n    private boolean supported = true;\n    private boolean canBeIdentifier = true;\n    private Map<String, Object> meta;\n\n    public String getWritebackFormat() {\n        return writebackFormat;\n    }\n\n    public void setWritebackFormat(String writebackFormat) {\n        this.writebackFormat = writebackFormat;\n    }\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1a4f68c-00b3-4376-8b07-2fc0f18f9555","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":79,"endLine":109,"content":"Type(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"Auth Type not present\");\n    authDetails = authDetailsOp.get();\n\n    Map<String, String> queryParams = new HashMap<>();\n    if (authDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : authDetails.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n    if (metadataApiConfigAttributes.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : metadataApiConfigAttributes.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null) {\n          LOGGER.info(\"No Value generated from criteria\");\n          continue;\n        }\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n\n\n    StringEntity stringEntity = null;\n        JSONObject concatenatedEntities = new JSONObject();\n    if (authDetails.getB","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8aeb78b9-b17b-4659-a0fd-7cd71089a971","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomFetchServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.connector.zoom.service;\n\nimport org.apache.http.HttpResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class GainsightZoomFetchServiceImpl implements GainsightZoomFetchService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightZoomFetchServiceImpl.class);\n    private static final GainsightZoomChannelFactory gainsightZoomChannelFactory = new GainsightZoomChannelFactory();\n\n    @Override\n    public HttpResponse searchData(String clientId, String clientSecret, String refreshToken, String accessToken, String url) throws Exception {\n        try {\n            GainsightZoomChannelService gainsightZoomChannelService =\n                    gainsightZoomChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightZoomChannelService.searchData(url);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }\n\n    @Override\n    public InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId,\n                                                    String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api) throws Exception {\n        try {\n            GainsightZoomChannelService gainsightZoomChannelService =\n                ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9216eaee-dba6-436d-97db-ef1543ccae86","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":85,"endLine":115,"content":"S\";\n    private static final String OPEN_BRACKET = \"(\";\n    private static final String CLOSE_BRACKET = \")\";\n    private static final String AUTHORIZATION = \"Authorization\";\n    private static final String BEARER = \"Bearer \";\n    private static final String JOB_REFERENCE = \"jobReference\";\n    private static final String SERVICE_ACCOUNT = \"CUSTOM\";\n    private static final String LOCATION = \"location\";\n    private static final String CONTENT_TYPE = \"Content-Type\";\n    private static final String CONTENT_TYPE_VALUE = \"application/json;charset=UTF-8\";\n    private static final String BIGQUERY_ACCESS_TOKEN_URL_KEY = \"https://oauth2.googleapis.com/\";\n    private static String BIGQUERY_API_DOMAIN = \"https://bigquery.googleapis.com/bigquery\";\n    private static final long MAX_FILE_SIZE_BYTES = 200 * 1024 * 1024;\n    private static final String JSON_EXTENSION = \".json\";// 200 MB in bytes\n\n    private static final List<DataType> ENCLOSE_IN_SINGLE_QUOTE = Arrays.asList(DataType.STRING, DataType.DATE, DataType.DATETIME);\n\n\n    private static final int ALLOWED_RETRIES = 3;\n    private static final String TOKEN = \"token\";\n    private static final String ROW = \"rows\";\n    private static final String SCHEMA = \"schema\";\n    private CloseableHttpClient httpclient;\n    private HttpGet httpGet;\n    private HttpPost httpPost;\n    private HttpPatch httpPatch;\n    private String projectId;\n    private String datasetId;\n    private String clientId;\n    private String clientSecret;\n    private String","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9fc12ef0-c422-409a-ae94-5af9c5f23585","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":81,"endLine":108,"content":"(String serviceUrl, ODataClient client) {\n        EdmMetadataRequest request = client.getRetrieveRequestFactory().getMetadataRequest(serviceUrl);\n        ODataRetrieveResponse<Edm> response = request.execute();\n        return response.getBody();\n    }\n\n\n    @Override\n    public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntities(String serviceUri, String entitySetName, ODataClient client, int topValue) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).top(topValue).build(); // todo added top\n        return readEntities(absoluteUri,client);\n    }\n\n\n    @Override\n    public InputStream readEntitiesIntoStream(String serviceUri, String entitySetName, ODataClient client, int topValue) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).top(topValue).build(); // todo added top\n        return readEntitiesIntoStream(absoluteUri,client);\n    }\n\n    @Override\n    public InputStream readyEntityWithProjectionAndFilter(ODataClient client,String serviceUri, String entitySetName, String commaSepartedEntityProperties, String filterQuery){\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).select(commaSepartedEntityProperties).filter(filterQuery).build();\n        return readEntitiesIntoStream(absoluteUri,client);\n    }\n\n    @Override\n    public ClientEntitySetIterator<ClientEntitySet, ClientEntity> readEntitiesWithFilter(String serviceUr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"020c102f-43e9-4d91-94f1-85d9e7e3c7a8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/error/DynamicsErrorCode.java","startLine":1,"endLine":44,"content":"package com.gainsight.integration.connector.dynamics.service.error;\n\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.exception.ExceptionType;\nimport com.gainsight.integration.bean.i18n.ConnectorI18nService;;\nimport exception.ErrorCode;\n\npublic enum DynamicsErrorCode  implements ErrorCode {\n\n  PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT(20005, \"Failed while fetching object\"),\n  PNP_DYNAMICS_OBJECT_NOT_FOUND(20004, \"Dynamics object not found\"),\n  PNP_DYNAMICS_OBJECT_LOGICAL_NAME_MISSING(20001, \"Object logical name missing\"),\n  PNP_DYNAMICS_COLUMN_LOGICAL_NAME_MISSING(20002, \"Column logical name missing\"),\n  PNP_DYNAMICS_UNABLE_TO_FETCH_OPTIONSET(20003, \"Unable to fetch option sets\"),\n  PNP_DYNAMICS_NOT_AN_OPTIONSET(20006, \"Not an optionset\"),\n  PNP_DYNAMICS_RELATIONSHIP_TYPE_MISSING(20007, \"Relationship type is missing\");\n\n  private final int code;\n  private final String text;\n  private final ExceptionType exceptionType;\n\n  DynamicsErrorCode(int code, String text){\n    this(code, text, ExceptionType.DEFAULT);\n  }\n\n  DynamicsErrorCode(int code, String text, ExceptionType exceptionType){\n    this.code = code;\n    this.text = text;\n    this.exceptionType = exceptionType;\n  }\n\n  @Override\n  public int getEventCode() {\n    return code;\n  }\n\n  @Override\n  public String getGsEventCode() {\n    return \"GS_DYNAMICS_\"+code;\n  }\n\n  @Override\n  public String getUserText() {\n    ConnectorI18nService.getTranslation(this.name(),text, RequestContextProvider.getTenantLanguage()","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8b4561a0-a7c5-4fea-90d1-198b18e2a0be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchServiceImpl.java","startLine":62,"endLine":71,"content":" }\n\n    //scratch-pad\n    public void updateEntity(InputStream inputStream, ODataClient oDataClient, String baseUrl) throws IOException {\n        String updateData = \"\\\"{@odata.id\\\": \\\"Accounts('0010e00001J1xhvAAB')\\\",\\\"website\\\":\\\"http://www.kaikei-home.com/tajirizeimukaiki/--http://www.koikoi-home.com/tajirizeimukaiki/\\\"}\";\n        InputStream inputStream1 = IOUtils.toInputStream(updateData);\n        oDataClient.getCUDRequestFactory().getStreamUpdateRequest(URI.create(baseUrl),inputStream1).setXHTTPMethod(\"PATCH\").rawExecute();\n//        System.out.println(IOUtils.toString(inputStream1));\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d394330c-7693-41a3-ac47-902804f6ee9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/service/GainsightAhaChannelServiceImpl.java","startLine":39,"endLine":72,"content":"his.authenticationType = AuthenticationType.API_KEY;\n        validate();\n        this.httpclient = HttpClients.createDefault();\n        this.httpGet = new HttpGet();\n        this.httpPost = new HttpPost();\n        this.httpPatch = new HttpPatch();\n    }\n\n    private void validate() {\n        final AuthenticationType type = this.authenticationType;\n\n        switch (type) {\n            case API_KEY:\n                Objects.requireNonNull(apiKey, \"[AHA] API Key Can't be NULL\");\n                break;\n            default:\n                throw new IllegalArgumentException(\"[AHA] Unknown authentication type: \" + type);\n        }\n    }\n\n    @Override\n    public InputStream getPaginatedEntityDataLatest(String subDomain, String entityName, List<String> projections, int pageSize, int pageNumber, String updatedSince) throws Exception {\n        URIBuilder uriBuilder = getUriForEntityLatest(subDomain, entityName, pageSize, pageNumber, updatedSince);\n        LOGGER.info(\"[AHA] URI being hit : {}\", uriBuilder.build());\n        this.httpGet.setURI(uriBuilder.build());\n        this.httpGet.setHeader(\"Authorization\", \"Bearer \" + this.apiKey);\n        HttpResponse response = null;\n        int retryCount = 2;\n        while(retryCount-- > -1) {\n            response = this.httpclient.execute(httpGet);\n            if(response.getStatusLine().getStatusCode() == 200){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n               ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01991d5c-e02a-4524-aa13-16d2e955bf6d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.connector.zoom.service;\n\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.enums.AuthenticationType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class GainsightZoomChannelServiceImpl implements GainsightZoomChannelService{\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightZoomChannelServiceImpl.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String BASE_API_URL = \"https://api.zoom.us/\";\n    private static final String SEARCH_END_POINT_V2 = \"v2/\";\n    static final String AUTHORIZATION = \"Authorization\";\n    static final String BEARER = \"Bearer \";\n    private static final String CONTE","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ac2b0a7-d57a-4ae4-989d-f4fda02ed3f4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/ApiKey.java","startLine":1,"endLine":28,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class ApiKey implements AuthAttributes, Serializable {\n    private static final long serialVersionUID = -1l;\n\n    private static final String type = \"ApiKey\";\n    private String apiKey;\n    private String customDomain;\n    private String bucketName;\n    private String accessSecret;\n    private String authKeywordForApi;\n\n    @Override\n    public String type() {\n        return type;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de957dfc-4265-4cd0-9c30-3a18eb4bb9c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":512,"endLine":538,"content":"butes.getBodyParamDetails() != null) {\n      JSONObject concatenatedEntities = new JSONObject();\n            for (AuthApiAttributes bodyDetail :metadataApiConfigAttributes.getBodyParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, bodyDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        if(bodyDetail.getDataType().equals(\"JSON\"))\n          concatenatedEntities.put(bodyDetail.getRequestKey(),OBJECT_MAPPER.readValue(getFinalValue(bodyDetail, value), Map.class));\n        else\n           concatenatedEntities.put(bodyDetail.getRequestKey(), getFinalValue(bodyDetail, value));\n      }\n\n      stringEntity = new StringEntity(concatenatedEntities.toString());\n    }\n\n    // If we have request body generated, use this without generating/honouring existing body params from metadata config\n    if (Objects.nonNull(generatedRequestBody)) {\n      stringEntity = new StringEntity(DHUtils.convertObjectToJson(generatedRequestBody));\n    }\n\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(metadataApiConfigAttributes, metadataEngineConfig, objectName,\n        pnpConnectionsInfo, queryParams, flattenConnectionInfo, paginationInfo, stringEntity);\n\n    if (authDetails.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : authDetails.getHeaderDetails()) {\n        Object value = constructValueFrom","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e3c4ebb-5bbb-444e-9381-26e0b8406bdb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":185,"endLine":229,"content":"new SystemException(\"[SAP DATASPHERE] Failed to connect to source due to {}\", sqlException);\n    }\n  }\n\n\n  @Override\n  public Set<Map<String, Object>> listAllFields(String objectName, List<String> ignorableSystemFields) {\n    Set<Map<String, Object>> result;\n    PreparedStatement tableExistsStatement = null;\n    PreparedStatement tableSchemaStatement = null;\n    PreparedStatement viewExistsStatement = null;\n    PreparedStatement viewSchemaStatement = null;\n    boolean tableExists = false;\n    boolean viewExists = false;\n\n    try {\n      tableExistsStatement = connection.prepareStatement(TABLE_EXISTS_QUERY);\n      viewExistsStatement = connection.prepareStatement(VIEW_EXISTS_QUERY);\n\n      tableExistsStatement.setString(1, this.schema);\n      tableExistsStatement.setString(2, objectName);\n\n      viewExistsStatement.setString(1, this.schema);\n      viewExistsStatement.setString(2, objectName);\n\n      ResultSet tableExistsResultSet = tableExistsStatement.executeQuery();\n      ResultSet viewExistsResultSet = viewExistsStatement.executeQuery();\n\n      // check for tables for the object\n      if (tableExistsResultSet.next()) {\n        int tableCount = tableExistsResultSet.getInt(COUNT);\n        if (tableCount > 0) {\n          tableExists = true;\n        }\n      }\n\n      // check for views for the object\n      if (viewExistsResultSet.next()) {\n        int viewCount = viewExistsResultSet.getInt(COUNT);\n        if (viewCount > 0) {\n          viewExists = true;\n        }\n      }\n\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"738ba7d2-8b5b-4dea-830c-0f4f09a509fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":68,"endLine":107,"content":" new OAuth2Exception(e);\n        } finally {\n            IOUtils.closeQuietly(tokenResponse);\n        }\n    }\n\n    @Override\n    public void init() throws OAuth2Exception {\n        try {\n            if (authenticationResult == null) {\n                if (Objects.isNull(MSDynamicsContext.getTenantId())) {\n                    authenticationResult = getAccessTokenFromRefreshToken();\n                } else {\n                    authenticationResult = getAccessTokenFromClientCredentials();\n                }\n            }\n        } catch (Exception e) {\n            throw new OAuth2Exception(e);\n        }\n    }\n\n\n    @Override\n    protected void accessToken(final DefaultHttpClient client) throws OAuth2Exception {\n        client.addRequestInterceptor(new HttpRequestInterceptor() {\n\n            @Override\n            public void process(final HttpRequest request, final HttpContext context) throws HttpException,\n                    IOException {\n                request.removeHeaders(HttpHeaders.AUTHORIZATION);\n                request.addHeader(HttpHeaders.AUTHORIZATION, \"Bearer \" + authenticationResult.getAccessToken());\n            }\n        });\n    }\n\n    private List<BasicNameValuePair> prepareRefreshCallData() {\n        final List<BasicNameValuePair> data = new ArrayList<BasicNameValuePair>();\n        data.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n        data.add(new BasicNameValuePair(\"refresh_token\", authenticationResult.getRefreshToken()));\n        data.add(new","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1e06bfee-a09e-4ebe-99c9-6439279a8c2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/InternalBulkFileBean.java","startLine":1,"endLine":52,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class InternalBulkFileBean {\n    private String fileName;\n    private String fileFormat;\n    private FileImportPage fileImportPage;\n\n    public InternalBulkFileBean(String fileName, String fileFormat, FileImportPage fileImportPage) {\n        this.fileName = fileName;\n        this.fileFormat = fileFormat;\n        this.fileImportPage = fileImportPage;\n    }\n\n    public InternalBulkFileBean() {\n    }\n\n    public String getFileName() {\n        return fileName;\n    }\n\n    public void setFileName(String fileName) {\n        this.fileName = fileName;\n    }\n\n    public String getFileFormat() {\n        return fileFormat;\n    }\n\n    public void setFileFormat(String fileFormat) {\n        this.fileFormat = fileFormat;\n    }\n\n    public FileImportPage getFileImportPage() {\n        return fileImportPage;\n    }\n\n    public void setFileImportPage(FileImportPage fileImportPage) {\n        this.fileImportPage = fileImportPage;\n    }\n\n    @Override\n    public String toString() {\n        return \"InternalBulkFileBean{\" +\n                \"fileName='\" + fileName + '\\'' +\n                \", fileFormat='\" + fileFormat + '\\'' +\n                \", fileImportPage=\" + fileImportPage +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7e9922c0-8496-4df7-85ee-c974da0f4483","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelServiceImpl.java","startLine":134,"endLine":155,"content":"                  if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                        nexturi = getUriAndPopulateData(data, response);\n                        if (nexturi == null || nexturi.equals(\"null\")) {\n                            shouldContinue = false;\n                        }else if (nexturi.equals(uri)) {\n                            throw new SystemException(ProductBoardErrorCode.EXTERNAL_SERVICE_INFINITE_PAGINATION,500);\n                        } else\n                            uri = nexturi;\n                        break;\n                    } else {\n                        String errorMsg = String.format(\"Productboard api returned status code :%s for objectType:%s . Reason received:%s. Will retry if retries are left\",\n                                response.getStatusLine().getStatusCode(), objectType, response.getStatusLine().getReasonPhrase());\n                        LOGGER.error(errorMsg);\n                        Thread.sleep(15 * (long)1000);\n                        retryCount += 1;\n                    }\n                }\n                if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n                    String errorMsg = String.format(\"Productboard api returned status code :%s for objectType:%s . Reason received:%s. Retries Exhausted.\",\n                            response.getStatusLine().getStatusCode(), objectType, response.getStatusLine().getReasonPhrase());\n                    LOGGER.error(errorMsg);\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"77a1680d-4187-45a7-a554-06bc10f41ff8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":106,"endLine":125,"content":"taType.OWNER.getValue())) {\n                    selectGroup.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projections);\n                } else {\n                    selectGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projections);\n                }\n            }\n        }\n\n        //If expanded fields are of type lookup or customer then modify the projection name. This needs to done first before we modify source lookup field in next step.\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_EXPAND))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_EXPAND)) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                GSFieldDefinition sourceLookupField = objectDefinition.getFields().stream().filter(\n                                gsFieldDefinition -> gsFieldDefinition.getFieldName().equals(mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1]))\n                        .findFirst().get();\n                String targetObjectOfLookupField = sourceLookupField.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cc31a2fa-4a8e-4f10-9f01-33f3a2e2d015","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPIntegrationChannel.java","startLine":30,"endLine":77,"content":"_PRODUCT_FQN = new FullQualifiedName(NAMESPACE, ET_PRODUCT_NAME);\n\n  // Entity Set Names\n  public static final String ES_PRODUCTS_NAME = \"Accounts\";\n\n  @Override\n  public List<CsdlSchema> getSchemas() {\n\n    // create Schema\n    CsdlSchema schema = new CsdlSchema();\n    schema.setNamespace(NAMESPACE);\n\n    // add EntityTypes\n    List<CsdlEntityType> entityTypes = new ArrayList<CsdlEntityType>();\n    entityTypes.add(getEntityType(ET_PRODUCT_FQN));\n    schema.setEntityTypes(entityTypes);\n\n    // add EntityContainer\n    schema.setEntityContainer(getEntityContainer());\n\n    // finally\n    List<CsdlSchema> schemas = new ArrayList<CsdlSchema>();\n    schemas.add(schema);\n\n    return schemas;\n  }\n\n  @Override\n  public CsdlEntityType getEntityType(FullQualifiedName entityTypeName) {\n\n    // this method is called for one of the EntityTypes that are configured in the Schema\n    if (entityTypeName.equals(ET_PRODUCT_FQN)) {\n\n      // create EntityType properties\n      CsdlProperty id =\n          new CsdlProperty()\n              .setName(\"ID\")\n              .setType(EdmPrimitiveTypeKind.Int32.getFullQualifiedName());\n      CsdlProperty name =\n          new CsdlProperty()\n              .setName(\"Name\")\n              .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());\n      CsdlProperty description =\n          new CsdlProperty()\n              .setName(\"Description\")\n              .setType(EdmPrimitiveTypeKind.String.getFullQualifiedName());\n\n      // create CsdlPropertyRef for Key ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fba010e-9db4-4080-b01c-5b648e0a8d9c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelFactory.java","startLine":1,"endLine":25,"content":"package com.gainsight.integration.connector.service;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.connector.service.error.BigQueryErrorCode;\nimport com.gainsight.utils.CryptHandler;\nimport com.gainsight.utils.GainsightUtils;\nimport exception.SystemException;\nimport org.apache.http.HttpStatus;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class GainsightBigQueryChannelFactory {\n\n    public GainsightBigQueryChannelService getChannelServiceForServiceAccount(String serviceAccountJson ,String projectId,String datasetId){\n        Objects.requireNonNull(serviceAccountJson, AdapterErrorMessages.SERVICE_JSON_NULL.getTranslatedMessage());\n        return new GainsightBigQueryChannelServiceImpl(serviceAccountJson,projectId,datasetId);\n    }\n    public GainsightBigQueryChannelService getChannelServiceForOauth(String clientId, String clientSecret, String refreshToken ,String projectId ,String datasetId){\n        Objects.requireNonNull(clientId,AdapterErrorMessages.CLIENT_ID_NULL.getTranslatedMessage());\n        Objects.requireNonNull(clientSecret,AdapterErrorMessages.CLIENT_SECRET_NULL.getTranslatedMessage());\n        Objects.requireNonNull(refreshToken,AdapterErrorMessages.REFRESH_T","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d2d183a-0fe2-4775-9c84-3ba1c538d116","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":538,"endLine":551,"content":"     Optional<GSFieldDefinition> primaryGSFieldDefinitionOptional = lookupObjectDefinition.getFields().stream().filter(fieldDefinition -> DynamicsGainsightUtils.parseBoolean(fieldDefinition.getMeta().getProperties().get(\"IsPrimaryId\"))\n                    && !DynamicsGainsightUtils.parseBoolean(fieldDefinition.getMeta().getProperties().get(\"IsLogical\"))).findFirst();\n            if (primaryGSFieldDefinitionOptional.isPresent()) {\n                for (GSFieldDefinition gsFieldDefinition : entry.getValue()) {\n                    String lookupFieldName = gsFieldDefinition.getFieldName().split(\"\\\\.\")[0];\n                    String referencingAttribute = DynamicsGainsightUtils.getReferencingAttribute(lookupFieldName, gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName());\n                    Optional<Relationship> relationshipOptional = relationships.stream().filter(\n                            relationship -> relationship.getReferencedEntity().equals(gsFieldDefinition.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName())\n                                    && relationship.getReferencingAttribute().equals(referencingAttribute)\n                    ).findFirst();\n\n                    if (relationshipOptional.isPresent()) {\n                        lookupObjectPrimaryKeys.add(relationshipOptional.get().getReferencingEntityNavigationPropertyName() + \".\" + primaryGSFieldDefinitionOptional.get().getFieldName().split(\"\\\\.\")[0]);\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2efcfd8-d7a3-4a6a-8d82-69283b003b95","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditDetails.java","startLine":38,"endLine":105,"content":"te String newValue;\n\n  @JsonProperty(\"operationType\")\n  private AuditOperationType operationType;\n\n  @JsonProperty(\"additionalInfo\")\n  private String additionalInfo;\n\n  /**\n   * @return {@code AttributeAuditType}\n   */\n  public AttributeAuditType getAttributeType() {\n    return attributeType;\n  }\n\n  /**\n   * @param attributeType {@code AttributeAuditType}\n   */\n  public void setAttributeType(AttributeAuditType attributeType) {\n    this.attributeType = attributeType;\n  }\n\n  /**\n   * @return {@code SubAttributeAuditType}\n   */\n  public SubAttributeAuditType getSubAttributeType() {\n    return subAttributeType;\n  }\n\n  /**\n   * @param subAttributeType {@code SubAttributeAuditType}\n   */\n  public void setSubAttributeType(SubAttributeAuditType subAttributeType) {\n    this.subAttributeType = subAttributeType;\n  }\n\n  /**\n   * @return the old Value of attribute/sub-attribute\n   */\n  public String getOldValue() {\n    return oldValue;\n  }\n\n  /**\n   * @param oldValue the old value to be assigned to the attribute/sub-attribute\n   */\n  public void setOldValue(String oldValue) {\n    this.oldValue = oldValue;\n  }\n\n  /**\n   * @return the new Value of attribute/sub-attribute\n   */\n  public String getNewValue() {\n    return newValue;\n  }\n\n  /**\n   * @param newValue the new value to be assigned to the attribute/sub-attribute\n   */\n  public void setNewValue(String newValue) {\n    this.newValue = newValue;\n  }\n\n  /**\n   * @return returns operationType (CRUD) for this change\n   */\n  public AuditOper","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56be8891-e49b-4f1c-bb32-11ba15c5f546","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/Location.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum Location {\n    HEADER,\n    BODY;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1dd0cf72-b951-411e-8515-f33aed3be3d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":190,"endLine":215,"content":"etStatusCode() != 200) {\n                LOGGER.error(\"Error occured at the time of fetching tables/object\");\n                throw new SystemException(responseMap.get(\"cause\").toString());\n            }\n            return responseMap;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occured at the time of fetching tables/object {}\", e);\n            throw new SystemException(e.getMessage());\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n    }\n\n    @Override\n    public GainsightBigQueryEntityDescription getMetaData(String object) {\n        HttpResponse response = null;\n        GainsightBigQueryEntityDescription gainsightBigQueryEntityDescription = null;\n        try {\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/datasets/%s/tables/%s\", projectId, datasetId,URLEncoder.encode(object, \"UTF-8\"));\n            this.httpGet.setURI(new URIBuilder(url).build());\n            response = this.httpclient.execute(this.httpGet);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n            List<Map<String, Object>> fields = (List) ((Map) responseMap.get(SCHEMA)).get(\"fields\");\n            List<GainsightBiqQueryFieldDescription> gainsightBiqQueryFieldDescription = getListOfFields(fields);\n            gainsightBigQueryEntityDescription = new GainsightBigQueryEntityDes","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47cd97e7-40d0-407c-936b-25b062c0ce95","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":220,"endLine":248,"content":", ClientEntity> readEntities(Edm edm, URI absoluteUri) {\n    LOGGER.info(\"URI = \" + absoluteUri);\n    ODataEntitySetIteratorRequest<ClientEntitySet, ClientEntity> request = \n      client.getRetrieveRequestFactory().getEntitySetIteratorRequest(absoluteUri);\n    // odata4 sample/server limitation not handling metadata=full\n    request.setAccept(\"application/json\");\n    ODataRetrieveResponse<ClientEntitySetIterator<ClientEntitySet, ClientEntity>> response = request.execute(); \n      \n    return response.getBody();\n  }\n\n  public ClientEntity readEntityWithKey(Edm edm, String serviceUri, String entitySetName, Object keyValue) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName)\n      .appendKeySegment(keyValue).build();\n    return readEntity(edm, absoluteUri);\n  }\n\n  public ClientEntity readEntityWithKeyExpand(Edm edm, String serviceUri, String entitySetName, Object keyValue,\n    String expandRelationName) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).appendKeySegment(keyValue)\n      .expand(expandRelationName).build();\n    return readEntity(edm, absoluteUri);\n  }\n\n  private ClientEntity readEntity(Edm edm, URI absoluteUri) {\n    ODataEntityRequest<ClientEntity> request = client.getRetrieveRequestFactory().getEntityRequest(absoluteUri);\n    // odata4 sample/server limitation not handling metadata=full\n    request.setAccept(\"application/json;odata.metadata=minimal\");\n    ODataRetrieveResponse","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fae09e80-6fcc-42af-9064-767143324e71","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":625,"endLine":650,"content":"geSync\";\n        public static final String IMAGE_JOB_ENABLED = \"IMAGE_JOB_ENABLED\";\n        public static final String CONN_WITH_EXT_IDENTIFIER = \"CONN_WITH_EXT_IDENTIFIER\";\n\n        // Hubspot New apis\n        public static final String HUBSPOT_API_VERSION = \"hubspotApiVersion\";\n        public static final String HUBSPOT_LATEST_API_ENABLED = \"HUBSPOT_LATEST_API_ENABLED\";\n        public static final String HUBSPOT_API_VERSION_LATEST = \"latest\";\n        public static final String HUBSPOT_API_VERSION_LEGACY = \"legacy\";\n\n        public static final String TYPE = \"type\";\n        public static final String ATTRIBUTES = \"attributes\";\n        public static final String ALL_OR_NONE = \"allOrNone\";\n        public static final String RECORDS = \"records\";\n        public static final String SUCCESS = \"success\";\n        public static final String FAILED = \"failed\";\n        public static final String ERRORS = \"errors\";\n        public static final String SFDC_NILLABLE = \"nillable\";\n        public static final String SFDC_DEFAULT_ON_CREATE = \"defaultedOnCreate\";\n        public static final String SYNC_DIRECTION = \"syncDirection\";\n        public static final String TARGET_FIELD = \"targetField\";\n        public static final String GSID = \"gsid\";\n        public static final String GAINSIGHT = \"Gainsight\";\n        public static final String SALESFORCE = \"Salesforce\";\n        public static final String EVENTS_CONNECTOR = \"EVENTS_CONNECTOR\";\n        public static final String SALESFORCE_CALL_OPTION","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"205a21dc-1118-421c-b7d6-739762a4314b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceMetadataServiceImpl.java","startLine":31,"endLine":57,"content":"\"/services/data/\";\n    private static final String SALESFORCE_GLOBAL_OBJECTS = \"/sobjects/\";\n    private static final String SALESFORCE_OBJECTS_DESCRIPTION = \"/sobjects/%s/describe/\";\n    private static final String SALESFORCE_SOQL_QUERY = \"/query?q=%s\";\n    private static final String SALESFORCE_API_VERSION = \"v%s\";\n\n    private static final HttpUrlConnectionUtils httpUrlConnectionUtils = new HttpUrlConnectionUtils();\n\n    @Autowired\n    private SfdcTokenUtil sfdcTokenUtil;\n\n    public HttpResponse getSalesforceObjects(SFDCMetadataTypeEnum sfdcMetadataTypeEnum, PNPConnectionsInfo pnpConnectionsInfo, String data)\n            throws Exception {\n        Assert.notNull(pnpConnectionsInfo, \"pnpConnectionsInfo is null/empty\");\n        LOGGER.info(\"Request received to fetch SFDCMetadata of type: {} for connection: {}\", sfdcMetadataTypeEnum.name(), pnpConnectionsInfo.getConnectionId());\n\n        String apiVersion = String.format(SALESFORCE_API_VERSION, getSfdcApiVersion(pnpConnectionsInfo));\n        Assert.notNull(apiVersion, \"apiVersion is null/empty\");\n\n        SalesforceToken salesforceToken;\n\n        try {\n            salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo);\n        } catch (SystemException ex) {\n            LOGGER.error(\"Exception in token generation tId:{} connectionId:{} connectionName:{}\", pnpConnectionsInfo\n                    .getTenantId(), pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getConnectionName(), ex);\n            throw new Syst","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"38549212-946e-460e-b453-b89a1447b6d6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSapCrmFetchService.java","startLine":1,"endLine":20,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\n\nimport java.io.IOException;\n\n/**\n * @author vipinsharma\n * @version 1.0\n */\n\n\npublic interface GainsightSapCrmFetchService {\n\n    Object getAllEntityNamesAvailable(ODataClient oDataClient) throws IOException;\n\n    Object getEntityMetadata(ODataClient oDataClient,String qualifiedEntityName) throws IOException;\n\n    Object getEntityData(ODataClient oDataClient,String qualifiedEntityName) throws IOException;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ab72d140-0d43-4e98-8e4c-aabde258813b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/AdapterErrorMessages.java","startLine":24,"endLine":49,"content":"ccount details\"),\n    INVALID_ORGANIZATION_URL(\"Invalid Organization URL entered\"),\n    HUBSPOT_API_FETCH_FAILED(\"Hubspot api fetch failed due to :{}\"),\n    HUBSPOT_API_FETCH_FAILED_WITH_MAX_RETRIES(\"Hubspot api fetch failed after maximum retries\"),\n    HUBSPOT_ACCESS_TOKEN_EXPIRED(\"Hubspot access token expired\"),\n    AUTHENTICATION_TYPE_UNKNOWN(\"Unknown authentication type: \"),\n    SOMETHING_WENT_WRONG_CONTACT_SUPPORT(\"Something went wrong. Please contact Support\"),\n    SFDC_ERROR_RETREIVED_EMPTY_FILE(\"No data received from Salesforce. This intermittent issue may occur where we do not receive any data from the Salesforce bulk job\"),\n    SERVICE_JSON_NULL(\"The service json can not be null\"),\n    REFRESH_TOKEN_NULL(\"The refresh token can not be null\"),\n    CLIENT_ID_NULL(\"The client id can not be null\"),\n    CLIENT_SECRET_NULL(\"The client secret can not be null\"),\n    TOKEN_NULL(\"Token detail can not be null\"),\n\n    CONNECTION_INFO_NULL(\"the connection info is null\"),\n    DATABASE_HOST_NULL(\"The Database host is null\"),\n    PASSWORD_NULL(\"The Password is null\"),\n    WAREHOUSE_NULL(\"The Warehouse is null\"),\n    ORGANIZATION_NULL(\"The Organization is null\"),\n    CLUSTER_NULL(\"The Cluster is null\"),\n    USERNAME_NULL(\"The Username is null\"),\n    SCHEMA_NAME_NULL(\"The Schema name is null\"),\n    OAUTH_CLIENT_ID_NULL(\"OAuth2 Client Id is null\"),\n    OAUTH_CLIENT_SECRET_NULL(\"OAuth2 Client Secret is null\"),\n    DATABASE_NAME_NULL(\"The Database name is null\"),\n    DATASET_ID_NULL(\"The","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b44860b8-9d86-467b-b155-a81514cbff4a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceFetchService.java","startLine":1,"endLine":9,"content":"package com.gainsight.integration.connector.sfdc.service;\n\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\nimport java.util.Map;\n\npublic interface SalesforceFetchService {\n    Map getSyncDataUsingSOQL(String soqlQuery, String version, PNPConnectionsInfo pnpConnectionsInfo) throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9179b8dc-3227-47db-ba5e-339e492babdd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/audit/AuditOperationType.java","startLine":66,"endLine":75,"content":"rationType getAuditOperationType(String operation){\n    if (operation == null) {\n      return null;\n    }\n    return OPERATION_TYPE_MAP.get(operation.toUpperCase());\n  }\n  public String getTranslatedValue(){\n    return ConnectorI18nService.getTranslation(this.operation,this.operation, RequestContextProvider.getTenantLanguage());\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e45d134f-cdf4-4fc0-bdf7-8958adf3e153","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":98,"endLine":116,"content":"ame(), msDynamicsObject);\n\n        Map<String, Map<Integer, String>> optionSetMap = prepareOptionsetMap(msDynamicsObject);\n        Map<String, Set<String>> selectAndExpandGroup = groupBySelectAndExpand(getRecordsRequest.getProjections());\n        Set<String> expandGroup = Sets.newHashSet();\n        Set<String> selectGroup = Sets.newHashSet();\n        Map<String, ExternalDataType> logicalNameToExternalType = msDynamicsObject.getColumns().stream().collect(Collectors.toMap(Column::getLogicalName, Column::getExternalType));\n        Map<String,Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_SELECT))) {\n            for (String projection: selectAndExpandGroup.get(PROJECTION_SELECT)) {\n                String propertyValue=masterLookUpConfiguration.get(getRecordsRequest.getPluralName()+\"@@\"+projection);\n                if (Objects.nonNull(propertyValue)){\n                    String newSelectProjection = propertyValue + \".\" + projection;\n                    expandGroup.add(newSelectProjection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(newSelectProjection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(newSelectProjection).add(projection);\n                } else if (logicalNameToExternalType.get(projection) == ExternalDataType.LOOKUP ||\n                   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d6a68766-5fa5-4d98-a31c-af6190d841b4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceFetchServiceImpl.java","startLine":31,"endLine":53,"content":"\n    private final ObjectMapper mapper = new ObjectMapper();\n\n    private static final SfdcTokenUtil sfdcTokenUtil = new SfdcTokenUtil();\n\n    private static final HttpUrlConnectionUtils httpUrlConnectionUtils = new HttpUrlConnectionUtils();\n\n    @Override\n    public Map getSyncDataUsingSOQL(String soqlQuery, String version, PNPConnectionsInfo pnpConnectionsInfo) throws Exception {\n        try {\n            String apiVersion = String.format(SALESFORCE_API_VERSION, version);\n            String query = URLEncoder.encode(soqlQuery, CHARSET);\n            LOGGER.info(\"Request received to query :{} for tenant :{}\", query, RequestContextProvider.getTenantId());\n\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo);\n            Map<String, Object> headers = Maps.newHashMap();\n            headers.put(\"Authorization\", \"Bearer \" + salesforceToken.getAccessToken());\n            HttpResponse response = httpUrlConnectionUtils.get(String.format(salesforceToken.getInstanceURL() + SALESFORCE_SERVICES_DATA + apiVersion + SALESFORCE_SOQL_QUERY, query), headers, null);\n            if (response.getResponseCode() == HttpStatus.SC_OK) {\n                return mapper.readValue(response.getRespMsg(), HashMap.class);\n            } else {\n                String exceptionMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                LOGGER.error(\"Error occurred while running soql query for tenant :{} , message : {} ErrorCode:{}\", RequestContextPro","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c081a81c-aa57-4dcf-9a0d-4e92b3ce875d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/SfdcChangeEventDto.java","startLine":100,"endLine":145,"content":"ngeEventDto) changeEventDto).changeEventHeader().getEntityName())\n                && StringUtils.equals(changeEventHeader().getChangeType(),\n                ((SfdcChangeEventDto) changeEventDto).changeEventHeader().getChangeType());\n    }\n\n    @Override\n    public List<String> recordIds() {\n        return GainsightCollectionUtils.nullSafeList(changeEventHeader().getRecordIds());\n    }\n\n    public long getCommitTimestamp() {\n        long commitTimestamp = 0;\n        for(Map.Entry<String, Object> entry : GainsightCollectionUtils.nullSafeMap(payload).entrySet()) {\n            String key = entry.getKey();\n            if(CHANGE_EVENT_HEADER_KEY.equals(key)) {\n                Map<String, Object> subMap = (Map<String, Object>) entry.getValue();\n                commitTimestamp = (long)subMap.get(COMMIT_TIMESTAMP_KEY);\n            }\n        }\n        return commitTimestamp;\n    }\n\n    @Getter\n    @Setter\n    @ToString\n    public static class Event {\n        private long replayId;\n    }\n\n    @Getter\n    @Setter\n    @ToString\n    public static class ChangeEventHeader {\n        /**\n         * \"commitNumber\":177938653130,\n         * \"commitUser\":\"0054x000002pcLrAAI\",\n         * \"sequenceNumber\":1,\n         * \"entityName\":\"Account\",\n         * \"changeType\":\"UPDATE\",\n         * \"changedFields\":[\n         * \"AnnualRevenue\",\n         * \"Description\",\n         * \"LastModifiedDate\"\n         * ],\n         * \"changeOrigin\":\"com/salesforce/api/soap/51.0;client=SfdcInternalAPI/\",\n         * \"transa","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"86b39744-598d-40a8-89de-bba8815f9c7a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":179,"endLine":195,"content":"etadata\", \"MultiSelectPicklistAttributeMetadata\");\n        List<Map<String, Object>> objects = Lists.newArrayList();\n        for (ClientEntity entity : clientEntity.getEntities()) {\n            Map<String, Object> object = entity.getProperties().stream().filter(clientProperty -> !clientProperty.getName().equals(\"Attributes@odata.context\")).collect(Collectors.toMap(clientProperty -> clientProperty.getName(), clientProperty -> extractValue(clientProperty.getValue())));\n            if (resolveAttributes) {\n                ClientLink clientLink = entity.getNavigationLink(\"Attributes\");\n                ClientEntitySet clientEntitySet = clientLink.asInlineEntitySet().getEntitySet();\n                if (CollectionUtils.isNotEmpty(clientEntitySet.getEntities())) {\n                    List<Map<String, Object>> attributes = Lists.newArrayList();\n                    for (ClientEntity inlineEntity : clientEntitySet.getEntities()) {\n                        Map<String, Object> attribute = Maps.newHashMap();\n                        //Don't use toMap, avoid NPE\n                        for (ClientProperty clientProperty : inlineEntity.getProperties()) {\n                            attribute.put(clientProperty.getName(), extractValue(clientProperty.getValue()));\n                        }\n                        if (resolveOptionSets && optionSetAttributesMetadata.contains(inlineEntity.getTypeName().getName())) {\n                            if ((fields.contains(String.valueOf(attribute.getOrDef","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61bbc952-8d5a-4a37-bca7-9fc6d9dbecb3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":201,"endLine":215,"content":" relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(targetObjectOfLookupField)\n                                && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    }\n\n                    if (relationshipOptional.isPresent()) {\n                        LOGGER.info(\"tId: {}. The lookup is found to be many-to-one relationship. Identified Relationship is {}\", RequestContextProvider.getTenantId(), relationshipOptional.get().getSchemaName());\n                        String newExpandProjection;\n                        if (mappedSourceColumns.length == 3) {\n                            newExpandProjection = StringUtils.replaceOnce(projection, mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1], relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        } else {\n                            newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, relationshipOptional.get().getReferencingEntityNavigationPropertyName());\n                        }\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(newExpandProjection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOri","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"82fb03c6-2b61-461b-8867-d7d07676a4ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/query/GetRecordsRequest.java","startLine":44,"endLine":76,"content":"e;\n    }\n\n    public Set<String> getProjections() {\n        return projections;\n    }\n\n    public String getFilterExpression() {\n        return filterExpression;\n    }\n\n    public OutputMode getOutputMode(){\n        return  this.outputMode;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n\n    public boolean isPrimitiveDateTimeConversionRequired() { return primitiveDateTimeConversionRequired; }\n\n    @Override\n    public String toString() {\n        return \"GetRecordsRequest{\" +\n                \"pluralName='\" + pluralName + '\\'' +\n                \", projections=\" + projections +\n                \", filterExpression='\" + filterExpression + '\\'' +\n                \", outputMode=\" + outputMode +\n                \", query=\" + query +\n                \", primitiveDateTimeConversionRequired=\" + primitiveDateTimeConversionRequired +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"90d11b3f-9bad-41df-bb58-cbd77633ec92","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":36,"endLine":73,"content":"e HttpPatch httpPatch;\n\n\n    protected GainsightEcosystemChannelServiceImpl(String apiKey) {\n        this.apiKey = apiKey;\n        this.authenticationType = AuthenticationType.API_KEY;\n        validate();\n        this.httpclient = HttpClients.createDefault();\n        this.httpGet = new HttpGet();\n        this.httpPost = new HttpPost();\n        this.httpPatch = new HttpPatch();\n    }\n\n    private void validate() {\n        final AuthenticationType type = this.authenticationType;\n\n        switch (type) {\n            case API_KEY:\n                Objects.requireNonNull(apiKey, \"API Key Can't be NULL\");\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unknown authentication type: \" + type);\n        }\n    }\n\n    @Override\n    public HttpResponse getPaginatedEntityDataLatest(String entityName, List<String> projections, int pageSize, int pageNumber) throws Exception {\n        URIBuilder uriBuilder = getUriForEntityLatest(entityName, pageSize, pageNumber);\n        this.httpGet.setURI(uriBuilder.build());\n        this.httpGet.setHeader(\"Authorization\", this.apiKey);\n        HttpResponse response = null;\n        int retryCount = 2;\n        while(retryCount-- > -1) {\n            response = this.httpclient.execute(httpGet);\n            if(response.getStatusLine().getStatusCode() == 200){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"Access to","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ec799d0d-6fd8-4407-a1eb-9327dc15a66a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":603,"endLine":629,"content":"ing AUTH_TYPE = \"authType\";\n        public static final String DESCRIPTION = \"description\";\n        public static final String CLIENT_ID = \"clientId\";\n        public static final String CLIENT_SECRET = \"clientSecret\";\n        public static final String ACCESS_TOKEN = \"accessToken\";\n        public static final String EXPIRY = \"expiry\";\n        public static final String SCOPE = \"scope\";\n        public static final String TOKEN_URL = \"tokenUrl\";\n        public static final String EVENT_URL_HOST = \"eventUrlHost\";\n        public static final String EVENT_URL_ENDPOINT = \"eventUrlEndpoint\";\n        public static final String PAYLOAD_CONTENT_TYPE = \"payloadContentType\";\n        public static final String SERVICE_PROVIDER_AUTHORIZATION_URI = \"serviceProviderAuthorizationURI\";\n        public static final String SERVICE_PROVIDER_ACCESS_TOKEN_URI = \"serviceProviderAccessTokenURI\";\n        public static final String REDIRECT_URI = \"redirectURI\";\n        public static final String URL = \"url\";\n        /**\n         * The constant page size.\n         */\n        public static final String RESOLVE_PICKLIST = \"resolvePicklist\";\n\n        public static final int PAGE_SIZE = 5000;\n        public static final String IS_RELATIVE = \"IS_RELATIVE\";\n        public static final String IS_IMAGE_SYNC = \"isImageSync\";\n        public static final String IMAGE_JOB_ENABLED = \"IMAGE_JOB_ENABLED\";\n        public static final String CONN_WITH_EXT_IDENTIFIER = \"CONN_WITH_EXT_IDENTIFIER\";\n\n        // Hubspot New a","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb9744b5-a2a6-4894-88c2-972449df1228","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":342,"endLine":376,"content":"_EXECUTION_SET_ID_PLACEHOLDER = \"NA_JOB_EXECUTION_SET_CREATE\";\n\n    /**\n     * Unified Connector Mapping Delimiter\n     */\n\n    public static final String RE_AUTHORIZE = \"RE_AUTHORIZE\";\n\n    public static final String MAPPING_DELIMITER = \"->\";\n\n    public static final String ERROR_CODE = \"error_code\";\n    public static final String ERROR_MESSAGE = \"error_message\";\n\n    //Field Mappers\n    public static final String LOG_TYPE = \"log_type\";\n\n    public static final String MONGO_TENANTID_FIELD_MAPPER = \"tenantId\";\n    public static final String POSTGRES_TENANTID_FIELD_MAPPER = \"tenant_id\";\n\n    public static final String MODIFIED_AT = \"modifiedAt\";\n    public static final String JOB_NAME = \"jobName\";\n    public static final String TASK_INFO_CREATE = \"Task Info_Create\";\n    public static final String TASK_INFO_DELETE = \"Task Info_Create\";\n    public static final String TASK_INFO_UPDATE = \"Task Info_Update\";\n\n\n    public static final String RECORDS_AFFECTED = \"recordsAffected\";\n    public static final String TOTAL_RECORDS = \"totalRecords\";\n    public static final String ORG_TIME_ZONE = \"orgTimeZone\";\n    public static final String NOTIFICATION_DETAIL = \"notificationDetail\";\n    public static final String PEOPLE_ENGAGEMENT = \"peopleEngagement\";\n    public static final String IGNORE_PEOPLE = \"ignorePeopleNotFoundError\";\n    public static final String QUEUE_NAME = \"QUEUE_NAME\";\n    public static final String FETCH_COUNT = \"FETCH_COUNT\";\n    public static final String DECIMAL_TYPE_REGE","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b9e97f04-6cb6-4f85-aad7-7d65d3e589b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":85,"endLine":98,"content":".getStatusCode())).zuoraZodlOperator;\n    }\n\n    public static String getZohoCrmClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).zohoCrmOperator;\n    }\n\n    public static String getServicenowSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).serviceNowOperator;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"332136ab-8bc3-4397-80ac-1c257cd22791","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":26,"endLine":62,"content":"ls;\nimport org.apache.http.HttpVersion;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.sql.Date;\nimport java.sql.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.time.temporal.ChronoField;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeSet;\n\npublic class GainsightDatabricksChannelServiceImpl implements GainsightDatabricksChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightDatabricksChannelServiceImpl.class);\n    private static final String JSON_EXTENSION = \".json\";\n    private static final String AND = \"AND\";\n    private static final String DATABRICKS_BASE_URL = \"jdbc:databricks://%s:443\";\n    private static final String WAREHOUSE_HTTP_PATH = \"/sql/1.0/warehouses/%s\";\n    private static final String COMPUTE_HTTP_PATH = \"/sql/protocolv1/o/%s/%s\";\n    private static final String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65e09edd-b163-4cd0-8331-0484bd47e9e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelService.java","startLine":1,"endLine":19,"content":"package com.gainsight.integration.connector.ecosystem.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\n\npublic interface GainsightEcosystemChannelService {\n\n    HttpResponse getPaginatedEntityDataLatest(String entityName, List<String> projections, int pageSize, int pageNumber) throws Exception;\n\n    boolean authenticate(String url);\n\n    HttpResponse getPaginatedEntityDataLatest(String entityName, List<String> projections, Map<String, String> queryParams) throws Exception;\n\n    HttpResponse getPaginatedEntityData(String url, Map<String, String> queryParams) throws Exception;\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ffca975e-c823-484c-ae8b-c99bef529cd2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataCache.java","startLine":1,"endLine":39,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.mapping.Document;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Document(collection = \"caas_metadata_cache\")\n@CompoundIndexes({@CompoundIndex(\n        name = \"tid_cid_oname_index\",\n        def = \"{'tenantId' : 1, 'connectionId' : 1, 'objectName' : 1}\",\n        unique = true\n)})\n@AllArgsConstructor\n@Getter\n@Setter\npublic class MetadataCache extends MongoBaseBean implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    public static final String CONNECTION_ID_PROP = \"connectionId\";\n    public static final String TENANT_ID_PROP = \"tenantId\";\n    public static final String OBJECT_NAME_PROP = \"objectName\";\n\n    private String tenantId;\n    private String connectionId;\n    private String objectName;\n    private Map<String, ObjectDefinition> metadata;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c313be4f-d942-47aa-b7ae-54f115c255b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":398,"endLine":428,"content":"izeInMB);\n        recordValues.clear();\n      }\n      log.info(\"[SAP DATASPHERE] Total files created is: {}\", fileList.size());\n      return fileList;\n    } catch (Exception ex) {\n      log.error(\"[SAP DATASPHERE] Exception while fetching data: {}\", ex.getMessage(), ex);\n      for (File file : fileList) {\n        file.deleteOnExit();\n      }\n      throw new SQLException(\"[SAP DATASPHERE] Error occurred while trying to fetch data\", ex);\n    } finally {\n      closeConnectionQuietly(this.connection, resultSet, stat);\n    }\n  }\n\n  @Override\n  public Map<String, Object> loadBulkData(DuctDataOperation ductDataOperation, File inputDataFile, List<File> successFiles,\n                                          List<File> failureFiles, String targetObject, List<ColumnMapping> columnMappings,\n                                          Map<String, String> colNameToDataType, int batchSize) throws Exception {\n    Map<String, Object> bulkLoadResult = new HashMap<>();\n    String absolutePathToTempStageTable = null;\n    String absolutePathToTargetTable = DOUBLE_QUOTE + this.schema + DOUBLE_QUOTE + PERIOD + DOUBLE_QUOTE + targetObject + DOUBLE_QUOTE;\n\n    try (CSVReader csvReader = new CSVReader(new FileReader(inputDataFile))) {\n      String[] header = csvReader.readNext();\n\n      //Create and load data to stage table\n      if (null != header) {\n        absolutePathToTempStageTable = createAndLoadDataToStageTable(bulkLoadResult, targetObject, columnMappings,\n                colNameToDataType, bat","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e464094d-99d1-4bc8-85b7-e8b0d592beda","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":94,"endLine":120,"content":"ion occurred while trying to create job in salesforce : {}\", e);\n            throw e;\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcJob(pnpConnectionsInfo, clientId, clientSecret, refreshToken, ++retryCount, sfdcApiVersion, objectName);\n            }\n            LOGGER.error(\"Exception occurred while trying to create job in salesforce : {}\", e);\n            throw new SystemException(e, CoreErrorCode.SYSTEM_ERROR, 500);\n        }\n    }\n\n    private String createBulkJobForQuery(String objectName) throws IOException {\n        SalesforceJob jobInfo = new SalesforceJob();\n        jobInfo.setOperation(\"query\");\n        jobInfo.setObject(objectName);\n        jobInfo.setContentType(\"CSV\");\n        return SfdcTokenUtil.OBJECT_MAPPER.writeValueAsString(jobInfo);\n    }\n\n    public String createSfdcBatchInJobV2(String sfdcJobId, PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret,\n                                         String refreshToken, int retryCount, String sfdcApiVersion, String query) {\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, \"text/csv; charset=UTF-8\");\n        try {\n            LOGGER.info(\"Creating batch  in salesforce for sfdcJob {}\", sfdcJobId);\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            headers.put(X_SFDC_SESSION, salesforceToken.getAccessT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3837cdc0-f57e-448d-96a8-a5b4076f2990","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":266,"endLine":290,"content":"                LOGGER.error(\"[HUBSPOT] Sleeping for 15 secs as the api call to source failed for retry count : {} due to : {}, code :{}\",\n                        2 - retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                Thread.sleep((15 * 1000));\n            }\n        }\n        return response.getEntity().getContent();\n    }\n\n    @Override\n    public InputStream getPaginatedEntityDataLatest(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception {\n        GSHubSpotEntityEnum entityEnum = GSHubSpotEntityEnum.getInstance(entityName);\n        URIBuilder uriBuilder = getUriForEntityLatest(entityName,false, nextPageUrl, api);\n        if (StringUtils.isEmpty(nextPageUrl)) {\n            projections.stream().filter(s ->\n                    GSHubSpotEntityEnum.getQueryProjectionKeyWord(entityEnum, API_VERSION_LATEST) !=\n                            null).forEach(s -> uriBuilder.addParameter(\n                    GSHubSpotEntityEnum.getQueryProjectionKeyWord(entityEnum, API_VERSION_LATEST), s));\n            projections.stream().filter(s -> s.contains(\"associations.\")).forEach(s -> uriBuilder.addParameter(ASSOCIATIONS_KEYWORD, s.split(\"\\\\.\")[1]));\n        }\n        this.httpGet.setURI(uriBuilder.build());\n        LOGGER.info(\"[HUBSPOT] URI being hit : {}\", this.httpGet.getURI());\n        HttpResponse response = null;\n\n        for (int retryCount = 0; retryCount < ALLOWED_RETRIES; retryCount += 1) {\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09be5748-18a6-4757-8095-a9d55faf70be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/InstanceType.java","startLine":53,"endLine":66,"content":"etConnectorType(InstanceType instanceType) {\n        switch (instanceType) {\n            case PX:\n                return GAINSIGHT_PX;\n            case CC:\n                return CUSTOMER_COMMUNITY;\n            case CE:\n                return CUSTOMER_EDUCATION;\n            default:\n                return null;\n        }\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4b957444-c096-47be-8f9d-dce98b601788","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/service/MetadataEngineServiceImpl.java","startLine":61,"endLine":83,"content":"        HttpResponse httpResponse = httpClient.execute(httpRequest);\n                LOGGER.info(\"Response code from external system : {}. Headers received from external System : {}\", httpResponse.getStatusLine(),\n                        httpResponse.getAllHeaders());\n                switch (httpResponse.getStatusLine().getStatusCode()) {\n                    case 200:\n                    case 201:\n                        content = httpResponse.getEntity().getContent();\n                        if(isXmlResponse){\n                            StringBuilder result = new StringBuilder();\n                            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()))) {\n                                String line;\n                                while ((line = bufferedReader.readLine()) != null) {\n                                    result.append(line);\n                                }\n                            }\n                            String xmlString = result.toString();\n                            JSONObject jsonObject = XML.toJSONObject(xmlString);\n                            return  MAPPER.readTree(jsonObject.toString());\n                        }else {\n                            JsonNode jsonNode = MAPPER.readTree(content);\n                            JsonNode jsonNode1;\n                            if (!StringUtil.isEmpty(responseRootKey))\n                                jsonNode1 = jsonNode.get(respons","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1a10601a-9d86-4cf2-9fad-e94a00c42ea2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/ExternalDataType.java","startLine":34,"endLine":70,"content":"rue);\n\n    private String value;\n    private String localType;\n    private boolean supported;\n\n    ExternalDataType(String value, String localType, boolean supported) {\n        this.value = value;\n        this.localType = localType;\n        this.supported = supported;\n\n    }\n\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n\n    public boolean isSupported() {\n        return supported;\n    }\n\n    public String getLocalType() {\n        return localType;\n    }\n\n    public static ExternalDataType fromAttribute(Map<String, Object> attribute) {\n        ExternalDataType externalDataType =  valueOf(StringUtils.upperCase(DynamicsGainsightUtils.valueOf(attribute.get(\"AttributeType\"))));\n        if (externalDataType == VIRTUAL) {\n            Map<String, Object> attributeTypeName = (Map) attribute.get(\"AttributeTypeName\");\n            if (Objects.nonNull(attributeTypeName) && \"MultiSelectPicklistType\".equalsIgnoreCase(DynamicsGainsightUtils.valueOf(attributeTypeName.get(\"Value\")))) {\n                externalDataType = ExternalDataType.MULTISELECTPICKLIST;\n            }\n        }\n        return externalDataType;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a78476b1-b4ba-4011-b97d-42f3da7573a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/CSVLineIterator.java","startLine":201,"endLine":220,"content":"ws IOException if closing the underlying {@code Reader} fails.\n     */\n    @Override\n    public void close() throws IOException {\n        finished = true;\n        cachedLine = null;\n        this.bufferedReader.close();\n    }\n\n    /**\n     * Unsupported.\n     *\n     * @throws UnsupportedOperationException always\n     */\n    @Override\n    public void remove() {\n        throw new UnsupportedOperationException(\"Remove unsupported on LineIterator\");\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ad47ea27-9b88-4861-9f11-28d107d144ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/Option.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport java.io.Serializable;\n\npublic class Option implements Serializable {\n    private static final long serialVersionUID = -6953467802452975703L;\n    private String label;\n    private Integer value;\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public Integer getValue() {\n        return value;\n    }\n\n    public void setValue(Integer value) {\n        this.value = value;\n    }\n\n    @Override\n    public String toString() {\n        return \"Option{\" +\n                \"label='\" + label + '\\'' +\n                \", value=\" + value +\n                '}';\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05d2e1e3-1fb8-4d4a-8d01-5d7835956f9d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":58,"endLine":82,"content":"ll\");\n        Objects.requireNonNull(clientSecret,\"[HUBSPOT] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[HUBSPOT] Refresh token cannot be null\");\n        if(StringUtils.isBlank(accessToken)){\n            accessToken = getAccessToken(clientId, clientSecret, refreshToken);\n        }\n        return new GainsightHubspotChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken);\n    }\n\n    public GainsightHubspotChannelService getChannelServiceWithOAuth20WithAccessToken(String clientId, String clientSecret,\n                                                                                      String refreshToken,\n                                                                                      String accessToken, int timeout) throws Exception {\n        Objects.requireNonNull(clientId,\"[HUBSPOT] Client Id cannot be null\");\n        Objects.requireNonNull(clientSecret,\"[HUBSPOT] Client Secret cannot be null\");\n        Objects.requireNonNull(refreshToken,\"[HUBSPOT] Refresh token cannot be null\");\n        if(StringUtils.isBlank(accessToken)){\n            accessToken = getAccessToken(clientId, clientSecret, refreshToken);\n        }\n        return new GainsightHubspotChannelServiceImpl(clientId, clientSecret, refreshToken, accessToken, timeout);\n    }\n\n    public String getAccessToken(String clientId, String clientSecret, String refreshToken) throws Exception {\n        String accessToken = null;\n        int retryCount = 3;\n        while (re","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e942681-7b29-4862-bd37-39f1f3433a5b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":298,"endLine":318,"content":"ontinue) {\n            try {\n                Map<String, Object> queryParams = createQueryParamsForBQ(pageSize, nextPage);\n                URIBuilder uriBuilder = new URIBuilder(url).addParameter(MAX_RESULT, queryParams.get(PAGE_SIZE).toString());\n                if (queryParams.get(NEXT_PAGE) != null)\n                    uriBuilder.addParameter(PAGE_TOKEN, queryParams.get(NEXT_PAGE).toString());\n                if (StringUtils.isNotEmpty(((Map) jobDetails.get(JOB_REFERENCE)).get(LOCATION).toString())) {\n                    uriBuilder.addParameter(LOCATION, ((Map) jobDetails.get(JOB_REFERENCE)).get(LOCATION).toString());\n                }\n                LOGGER.info(\"URI for fetching data {}\", uriBuilder.build());\n                this.httpGet.setURI(uriBuilder.build());\n                this.httpGet.setHeader(AUTHORIZATION, BEARER + this.accessToken);\n                HttpResponse response = null;\n                response = this.httpclient.execute(httpGet);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    retry = ALLOWED_RETRIES;\n                    String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n                    responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n                    List<String> header = new ArrayList<>();\n                    Map<String ,String> fieldToDataTypeMap = new HashMap<>();\n                    if (responseMap.get(SCHEMA) != null && ((List) ((Map) responseMap.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ff77aa26-df79-4b3b-80bf-d485785d0a38","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/RelationshipType.java","startLine":1,"endLine":26,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport org.apache.commons.lang3.StringUtils;\n\npublic enum RelationshipType {\n    ONE_TO_MANY(\"OneToManyRelationship\"), MANY_TO_ONE(\"ManyToOneRelationship\"), MANY_TO_MANY(\"ManyToManyRelationship\");\n\n    private String name;\n\n    RelationshipType(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public static RelationshipType fromName(String name) {\n        for (RelationshipType relationshipType : values()) {\n            if (StringUtils.equalsIgnoreCase(relationshipType.getName(), name)) {\n                return relationshipType;\n            }\n        }\n        return null;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11d40aa8-6e23-4656-8ce9-588d619b217a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":516,"endLine":549,"content":"i]).isEmpty()) {\n                insertDataToStageTable.setString(i + 1, null);\n              } else {\n                insertDataToStageTable.setString(i + 1, nextRecord[i]);\n              }\n            }\n            insertDataToStageTable.addBatch();\n            count++;\n\n            if (count % batchSize == 0) {\n              log.info(\"[SAP DATASPHERE] Executing batch {}, with batch size {} for loading data into temp stage table\", batchCount, count);\n              insertDataToStageTable.executeBatch();\n              insertDataToStageTable.clearBatch();\n              if(batchCount == 1) {\n                writeToSuccessFile(successFile, header, data, batchCount);\n              } else {\n                writeToSuccessFile(successFile, null, data, batchCount);\n              }\n              data.clear();\n              count = 0;\n              batchCount++;\n            }\n\n          } catch (SQLException e) {\n            log.error(\"[SAP DATASPHERE] Error occurred while loading data into temp stage table: {} for batch {}\", e.getMessage(), batchCount, e);\n            errorMessages = null != errorMessages ? (errorMessages + COMMA + SPACE + e.getMessage()) : e.getMessage();\n            failureFiles.add(prepareFailureCSVFile(header, data, targetObject + UNDERSCORE + \"batch\" + batchCount));\n            data.clear();\n            batchCount++;\n            count = 0;\n            insertDataToStageTable.clearBatch();\n          }\n        }\n        //If there are any records left after reading ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c6b04102-6b05-4ba2-8786-ed5ffbebadfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":761,"endLine":793,"content":"'t be NULL\");\n                break;\n            case OAUTH2:\n                Objects.requireNonNull(clientId, \"[HUBSPOT] Client ID  Can't be NULL\");\n                Objects.requireNonNull(clientSecret, \"[HUBSPOT] Client Secret Can't be NULL\");\n                Objects.requireNonNull(refreshToken, \"[HUBSPOT] Refresh Token Can't be NULL\");\n                Objects.requireNonNull(accessToken, \"[HUBSPOT] Access Token Can't be NULL\");\n                break;\n            default:\n                throw new IllegalArgumentException(AdapterErrorMessages.AUTHENTICATION_TYPE_UNKNOWN.getTranslatedMessage() + type);\n        }\n    }\n\n    @Override\n    public List<Object> getDataWithQuery(String query) {\n        HttpResponse response = null;\n        List<Object> data = new ArrayList<>();\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + query;\n\n            URIBuilder uriBuilder = new URIBuilder(url);\n\n            this.httpGet.setURI(uriBuilder.build());\n            InputStream inputStream = null;\n            try {\n                response = this.httpclient.execute(httpGet);\n                inputStream = response.getEntity().getContent();\n                String jsonDataResponse = IOUtils.toString(inputStream, \"UTF-8\");\n                Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n                });\n                data = (List<Object>) responseMap.ge","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bdca32b8-b0cc-4c9e-9cfb-fe102f4b2a1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPDatasphereChannelFactory.java","startLine":1,"endLine":31,"content":"package com.gainsight.integration.connector.sapHana;\n\nimport com.gainsight.bean.base.connection.SAPDatasphereConnectionDetail;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\n\n\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\n\nimport java.util.Objects;\n\n/**\n * createdBy: snargana\n * date: 01/09/24\n */\npublic class GainsightSAPDatasphereChannelFactory {\n\n  public GainsightSAPDatasphereChannelService getChannelFromPnpConnectionInfo(PNPConnectionsInfo pnpConnectionsInfo) {\n    Objects.requireNonNull(pnpConnectionsInfo, AdapterErrorMessages.CONNECTION_INFO_NULL.getTranslatedMessage());\n    return getChannelFromProperties(pnpConnectionsInfo, true, pnpConnectionsInfo.getAuthorizationType());\n  }\n\n  public GainsightSAPDatasphereChannelService getChannelFromProperties(PNPConnectionsInfo pnpConnectionsInfo, boolean isValueEncrypted, AuthorizationType authorizationType) {\n    // change error messages\n\n    Objects.requireNonNull(pnpConnectionsInfo, AdapterErrorMessages.CONNECTION_INFO_NULL.toString());\n    SAPDatasphereConnectionDetail sapDatasphereConnectionDetail = (SAPDatasphereConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n    Objects.requireNonNull(sapDatasphereConnectionDetail, AdapterErrorMessages.CONNECTION_INFO_NULL.toString());\n\n    if (AuthorizationType.BASIC_AUTH.equals(authorizationType)) {\n      Objects.requireNonNull(sapDatasphereConnectionDetail.getUser(), ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"44cf1fab-33da-4159-a03b-0910f4032bd0","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/bean/SFDCMetadataTypeEnum.java","startLine":1,"endLine":11,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.connector.sfdc.bean;\n\npublic enum SFDCMetadataTypeEnum {\n    GLOBAL_OBJECT,\n    OBJECT_DESCRIPTION,\n    SOQL_QUERY\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5789a1ba-a159-4d7b-b583-b1b3307b492e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchServiceImpl.java","startLine":81,"endLine":109,"content":"return gainsightHubspotChannelService.getPaginatedEntityData(entityName, projectionList, offsetValue);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw e;\n        }\n    }\n\n\n    @Override\n    public InputStream getPaginatedEntityDataLatest(String entityName, List<String> projectionList, String clientId,\n                                                    String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api, int timeout) throws Exception {\n        try{\n            GainsightHubspotChannelService gainsightHubspotChannelService =\n                    gainsightHubspotChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken, timeout);\n            return gainsightHubspotChannelService.getPaginatedEntityDataLatest(entityName, projectionList, nextPageUrl, api);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw e;\n        }\n    }\n\n    @Override\n    public InputStream getEntityProperties(String entityName, String clientId, String clientSecret, String refreshToken) {\n       try{\n           GainsightHubspotChannelService gainsightHubspotChannelService = gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(clientId, clientSecret, refreshToken);\n           return gainsightHubspotChannelService.getEntityProperties(entityName);\n       }catch (Exception e){\n           LOGGER.error(e.getMessage(),e);\n           retu","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7190943-b5fc-410f-ab26-a42170160175","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataApiConfigAttributes.java","startLine":1,"endLine":20,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.gainsight.integration.bean.enums.metadata.engine.DataEnum;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\nimport java.util.Map;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class MetadataApiConfigAttributes extends ApiConfigAttributes implements Serializable {\n    private boolean metadataAvailable;\n    private Map<DataEnum, List<ApiConfigAttributes>> dataApiForMetadataGeneration;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e93ac020-b1b1-4f87-832f-492d17734810","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchService.java","startLine":30,"endLine":50,"content":"ring entityName, List<String> projectionList, String clientId,\n                                             String clientSecret, String refreshToken, String accessToken, String nextPageUrl, String api, int timeout) throws Exception;\n\n    InputStream getEntityProperties(String name, String clientId, String clientSecret, String refreshToken);\n\n    HttpResponse getEntityPropertiesLatestCaas(String name, String clientId, String clientSecret, String refreshToken);\n\n    HashMap<String, List<String>> getAssociatedObjects(List<String> objectIds, String hubspotAssociation, String clientId, String clientSecret, String refreshToken);\n\n    List<String> getAssociatedObjectswithAccessToken(String objectId, String hubspotAssociation,\n                                                     String clientId, String clientSecret,\n                                                     String refreshToken, String accessToken);\n\n    List<String> getAssociatedObjectswithAccessTokenLatest(String objectId, String hubspotAssociation,\n                                                           String clientId, String clientSecret,\n                                                           String refreshToken, String accessToken);\n\n    List<Object> getPipelineMappingObject(String object, String clientId, String clientSecret, String refreshToken);\n\n    Map<String, String> getPipelineMappingIdToLabel(String object, String clientId,\n                                                    String clientSecret, String ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"60768c8a-2f13-4388-a948-d6b00753924c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceFetchServiceImpl.java","startLine":52,"endLine":64,"content":"ionMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                LOGGER.error(\"Error occurred while running soql query for tenant :{} , message : {} ErrorCode:{}\", RequestContextProvider.getTenantId(), exceptionMessage);\n                throw new Exception(exceptionMessage);\n            }\n        } catch (UnsupportedEncodingException e) {\n            LOGGER.error(\"Error occurred while trying to encode the soql query : {0}\", e);\n            throw e;\n        } catch (IOException ex) {\n            LOGGER.error(\"Error occurred while trying read the response : {0}\", ex);\n            throw ex;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf35187f-9aeb-4ed6-ad1f-c84d1b825037","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/DynamicsGainsightUtils.java","startLine":212,"endLine":218,"content":"      return UCConstants.OWNING_TEAM;\n        } else {\n            return lookupField;\n        }\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08d41cf9-4091-4049-92d0-b637f122ac29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditRecord.java","startLine":48,"endLine":130,"content":"\")\n  private String userName;\n\n  @JsonProperty(\"tenantId\")\n  private String tenantId;\n\n  @JsonProperty(\"systemTags\")\n  private List<String> systemTags;\n\n  /**\n   * The request of the source.\n   * For Ex. MDA, SFDC.\n   */\n  @JsonProperty(\"requestSource\")\n  private String requestSource;\n\n  @JsonProperty(\"data\")\n  private AuditData data;\n\n  @JsonProperty(\"properties\")\n  private AuditProperties properties;\n\n  /**\n   * @return the systemId.\n   */\n  public String getSystemId() {\n    return systemId;\n  }\n\n  /**\n   * @param systemId the UC-requestId\n   */\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  /**\n   * @return systemTimestamp\n   */\n  public String getSystemTimestamp() {\n    return systemTimestamp;\n  }\n\n  /**\n   * @param systemTimestamp systemTimestamp\n   */\n  public void setSystemTimestamp(String systemTimestamp) {\n    this.systemTimestamp = systemTimestamp;\n  }\n\n  /**\n   * @return generatedBy\n   */\n  public String getGeneratedBy() {\n    return generatedBy;\n  }\n\n  /**\n   * @param generatedBy user who generates the event\n   */\n  public void setGeneratedBy(String generatedBy) {\n    this.generatedBy = generatedBy;\n  }\n\n  /**\n   * @return name of the event.\n   */\n  public String getEventName() {\n    return eventName;\n  }\n\n  /**\n   * @param eventName eventName\n   */\n  public void setEventName(String eventName) {\n    this.eventName = eventName;\n  }\n\n  /**\n   * @return eventType\n   */\n  public AuditOperationType getEventType() {\n    return eventTyp","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"53149831-4f12-4522-af69-cba43bd04853","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":243,"endLine":301,"content":"  */\n    public static final String WITHDATA = \"withData\";\n\n    /**\n     * systemTags parameter in Audit Service Get Query\n     */\n    public static final String SYSTEM_TAGS = \"systemTags\";\n\n    /**\n     * eventType parameter in Audit Service Get Query\n     */\n    public static final String EVENT_TYPE = \"eventType\";\n\n    /**\n     * eventStatus parameter in Audit Service Get Query\n     */\n    public static final String EVENT_STATUS = \"eventStatus\";\n\n    /**\n     * eventName parameter in Audit Service Get Query\n     */\n    public static final String EVENT_NAME = \"eventName\";\n\n    /**\n     * userName parameter in Audit Service Get Query\n     */\n    public static final String USER_NAME = \"userName\";\n\n    /**\n     * userId parameter in Audit Service Get Query\n     */\n    public static final String USER_ID = \"userId\";\n\n    /**\n     * systemId parameter in Audit Service Get Query\n     */\n    public static final String SYSTEM_ID = \"systemId\";\n\n    /**\n     * systemTimestamp parameter in Audit Service Get Query\n     */\n    public static final String SYSTEM_TIMESTAMP = \"systemTimestamp\";\n\n    /**\n     * generatedBy parameter in Audit Service Get Query\n     */\n    public static final String GENERATED_BY = \"generatedBy\";\n\n    /**\n     * requestSource parameter in Audit Service Get Query\n     */\n    public static final String REQUEST_SOURCE = \"requestSource\";\n\n    /**\n     * UNIFIED_CONNECTOR constant\n     */\n    public static final String UNIFIED_CONNECTOR = \"UNIFIED_CONNECTOR\";\n\n    /**","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9060019-c8dd-402a-bec5-366dd7469514","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":42,"endLine":59,"content":" {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"associations.companies.results[0].id\", \"associatedCompanyIds\", \"associations.companies.results[0].id\", \"string\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"dealId\", \"dealId\", \"dealId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"associatedCompanyIds\", \"associatedCompanyIds\", \"associations.associatedCompanyIds\", \"string\", \"text\"));\n                }\n                break;\n\n            case PRODUCT:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectId\", \"objectId\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de77d4a4-4ce5-4348-ba84-353b7ca1396c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemFetchServiceImpl.java","startLine":29,"endLine":51,"content":"ams) {\n        try{\n            GainsightEcosystemChannelService gainsightEcosystemChannelService =\n                    gainsightEcosystemChannelFactory.getChannelServiceWithApiKey(apiKey);\n            return gainsightEcosystemChannelService.getPaginatedEntityDataLatest(entityName, projectionList, queryParams);\n        }catch (Exception e){\n            LOGGER.error(e.getMessage(),e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public HttpResponse getPaginatedEntityData(String url, String apiKey, Map<String, String> queryParams) {\n        try {\n            GainsightEcosystemChannelService gainsightEcosystemChannelService =\n                    gainsightEcosystemChannelFactory.getChannelServiceWithApiKey(apiKey);\n            return gainsightEcosystemChannelService.getPaginatedEntityData(url, queryParams);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(),e);\n            throw new RuntimeException(e);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c884b708-1b83-45af-aec2-adf400dbc61e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":220,"endLine":251,"content":"recordResponseGenerator.getRecordsPulled());\n                        client = GSODataClientFactory.getOdataClient();\n                        ++currentRetryCount;\n                        LOGGER.info(\"Retrying to fetch data. count {}\", currentRetryCount);\n                    } else {\n                        throw httpClientException;\n                    }\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Unexpected error occured in get records, deleting temp file if any present\");\n            FileUtils.deleteQuietly(recordResponseGenerator.getCsvFile());\n            throw e;\n        }\n\n        /*\n        ClientEntitySetIterator<ClientEntitySet, ClientEntity> iterator = readEntities(client, getRecordsRequest.getPluralName(), selectAndExpandGroup.get(PROJECTION_SELECT),\n            lookUpFieldNames, getRecordsRequest.getFilterExpression());\n        while (iterator.hasNext()) {\n            ClientEntity ce = iterator.next();\n            Map<String, Object> record = Maps.newHashMap();\n            for (ClientProperty clientProperty : ce.getProperties()) {\n                record.put(clientProperty.getName(), extractValue(clientProperty, optionSetMap));\n            }\n\n            if(CollectionUtils.isNotEmpty(expandGroup)){\n                extractLookUpValue(expandGroup, ce, record);\n            }\n            recordResponseGenerator.addRecords(record);\n        }\n        */\n        return new RecordsResponse(recordResponseGenerator.getRecords(), r","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"10e78812-3f43-48a7-872b-61839f83ca5f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":164,"endLine":193,"content":"d);\n            this.httpGet.setURI(new URIBuilder(url).build());\n            response = this.httpclient.execute(this.httpGet);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred while authorizing Connection {}\", e.getMessage());\n            throw new SystemException(BigQueryErrorCode.AUTHORIZATION_FAILED, HttpStatus.SC_BAD_REQUEST);\n        } finally {\n            HttpClientUtils.closeQuietly(response);\n        }\n    }\n\n    @Override\n    public Map<String, Object> getObjects() {\n        HttpResponse response = null;\n        try {\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/datasets/%s/tables\", projectId, datasetId);\n            URIBuilder uriBuilder = new URIBuilder(url);\n            uriBuilder.addParameter(MAX_RESULT, String.valueOf(50000));\n            this.httpGet.setURI(uriBuilder.build());\n            response = this.httpclient.execute(this.httpGet);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, Map.class);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                LOGGER.error(\"Error occured at the time of fetching tables/object\");\n                throw new SystemException(responseMap.get(\"cause\").toString());\n          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f9c082f-2db5-4124-b2ce-26dec6049d1c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":130,"endLine":146,"content":"(PROJECTION_EXPAND)) {\n                Column lookupColumn = msDynamicsObject.getColumn(projection.split(\"\\\\.\")[0]);\n                if (!logicalNameToObject.containsKey(lookupColumn.getTargetObject())) {\n                    logicalNameToObject.put(lookupColumn.getTargetObject(), msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().logicalName(lookupColumn.getTargetObject()), true, false));\n                }\n                MSDynamicsObject targetObject = logicalNameToObject.get(lookupColumn.getTargetObject());\n\n                Column targetColumn = targetObject.getColumn(projection.split(\"\\\\.\")[1]);\n                if (Objects.nonNull(targetColumn) && (targetColumn.getExternalType() == ExternalDataType.LOOKUP ||\n                        targetColumn.getExternalType() == ExternalDataType.CUSTOMER ||\n                        targetColumn.getExternalType() == ExternalDataType.OWNER)) {\n                    expandGroup.add(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\").add(projection);\n                } else {\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putI","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"25c8739e-39b5-4794-be1e-1cdbfd0ca895","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/SfdcChangeEventDto.java","startLine":1,"endLine":45,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.gainsight.utils.GainsightCollectionUtils;\nimport com.gainsight.utils.JsonUtil;\nimport com.google.common.collect.Maps;\nimport lombok.AccessLevel;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Getter\n@Setter\n@ToString\npublic class SfdcChangeEventDto implements ChangeEventDto {\n\n    private static final String CHANGE_EVENT_HEADER_KEY = \"ChangeEventHeader\";\n    private static final String COMMIT_TIMESTAMP_KEY = \"commitTimestamp\";\n\n    private String schema;\n    private Map<String, Object> payload;\n    private Event event;\n\n    @Getter(AccessLevel.NONE)\n    @Setter(AccessLevel.NONE)\n    @ToString.Exclude\n    private ChangeEventHeader changeEventHeader;\n\n    public ChangeEventHeader changeEventHeader() {\n        if (changeEventHeader == null && MapUtils.isNotEmpty(payload) && payload.containsKey(CHANGE_EVENT_HEADER_KEY)) {\n            changeEventHeader = JsonUtil.OBJECT_MAPPER.convertValue(payload.get(CHANGE_EVENT_HEADER_KEY), ChangeEventHeader.class);\n        }\n        return changeEventHeader;\n    }\n\n    @Override\n    public Map<String,Object> fetchPayload(Map<String, List<String>> compoundFieldTypeFieldsMap) {\n        Map<String, Object> payloadMap = new HashMap<>();\n        for(Map.Entry<String, Object>","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"97451c3e-843c-4abf-8a8f-9fc23f82655b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/BodyFormat.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum BodyFormat {\n    URLENCODED,\n    RAW;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d4361b4-2458-49a8-b0ea-0973be543633","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":791,"endLine":812,"content":"                Map<String, Object> responseMap = MAPPER.readValue(jsonDataResponse, new TypeReference<Map<String, Object>>() {\n                });\n                data = (List<Object>) responseMap.get(\"results\");\n            } catch (Exception exception) {\n                LOGGER.error(String.format(\"[HUBSPOT] Unable to get result for query: %s\", query), exception);\n                return data;\n            } finally {\n                HttpClientUtils.closeQuietly(response);\n                if (inputStream != null) {\n                    inputStream.close();\n                }\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(String.format(\"[HUBSPOT] Unable to get result for query: %s \", query), exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return data;\n    }\n\n}\n\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9904ae16-d8e3-4c18-a7e0-ece80ce9b760","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":105,"endLine":125,"content":"  }\n\n    private static GainsightHubspotFieldDescription createFieldDescription(String name, String label, String canonicalname, String type, String fieldType) {\n        GainsightHubspotFieldDescription gainsightHubspotFieldDescription = new GainsightHubspotFieldDescription(name, label, canonicalname, type, fieldType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static GainsightHubspotFieldDescription createFieldDescriptionWithReference(String name, String label, String canonicalname, String type, String fieldType, String referenceObjectType) {\n        GainsightHubspotFieldDescription gainsightHubspotFieldDescription = new GainsightHubspotFieldDescription(name, label, canonicalname, type, fieldType, referenceObjectType);\n        gainsightHubspotFieldDescription.setApiName(name);\n        return gainsightHubspotFieldDescription;\n    }\n\n    private static void addCommonPortalIdFieldRef(List<GainsightHubspotFieldDescription> gainsightHubspotFieldDescriptions, GSHubSpotEntityEnum entity) {\n        String fieldName = GSHubSpotEntityEnum.CONTACT.name().equalsIgnoreCase(entity.name()) ? \"portal-id\" : \"portalId\";\n        GainsightHubspotFieldDescription gainsightHubspotFieldDescription11 = new GainsightHubspotFieldDescription(fieldName, fieldName, fieldName, \"string\", \"text\");\n        gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription11);\n    }\n\n    private static void addCommonDelet","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14ebb823-3f18-4c9f-b52b-4f360ecd3de5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":356,"endLine":370,"content":"                multiPicklistColumns.add(projection);\n                    }\n                    if (Objects.nonNull(targetLookupField)\n                            && (targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.LOOKUP.getValue())\n                            || targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.CUSTOMER.getValue())\n                            || targetLookupField.getMeta().getOriginalDataType().equalsIgnoreCase(ExternalDataType.OWNER.getValue()))\n                    ) {\n                        expandGroup.add(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\");\n                        modifiedExpandToOriginalFieldName.put(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\",\n                                mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1]);\n\n                        modifiedProjectionToOriginalProjections.putIfAbsent(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\", Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(sourceLookupField.getFieldName().split(\"\\\\.\")[0] + \"._\" + targetLookupField.getFieldName().split(\"\\\\.\")[0] + \"_value\").add(projection);\n                    } else {\n                        //Never be the case","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3951e937-89b6-4ea1-9bd4-e93db30e5d04","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/MSDynamicsObject.java","startLine":60,"endLine":91,"content":"(Boolean customObject) {\n        this.customObject = customObject;\n    }\n\n    public String getLogicalName() {\n        return logicalName;\n    }\n\n\n    public void setLogicalName(String logicalName) {\n        this.logicalName = logicalName;\n    }\n\n    public Column getColumn(String logicalName) {\n        Optional<Column> columnOptional = this.getColumns().stream().filter(column -> column.getLogicalName().equals(logicalName)).findFirst();\n        return columnOptional.isPresent() ? columnOptional.get() : null;\n    }\n\n    @Override\n    public String toString() {\n        return \"MSDynamicsObject{\" +\n                \"objectName='\" + objectName + '\\'' +\n                \", pluralName='\" + pluralName + '\\'' +\n                \", displayName='\" + displayName + '\\'' +\n                \", logicalName='\" + logicalName + '\\'' +\n                \", objectId='\" + objectId + '\\'' +\n                \", customObject=\" + customObject +\n                \", columns=\" + columns +\n                '}';\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e61c0d7c-c014-4752-a0ab-4af3f6f327c6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":329,"endLine":360,"content":"    HttpResponse response = this.httpclient.execute(httpGet);\n        return response.getEntity().getContent();\n    }\n\n    @Override\n    public List<String> getAssociatedObjectsV2(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception {\n        return getAssociatedObjectsLegacy(gsHubspotAssociationEnum, objectId);\n    }\n\n\n    @Override\n    public List<String> getAssociatedObjectsLegacy(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception {\n        HttpResponse response = null;\n        List<String> associationsResult = new ArrayList<>();\n        MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, true);\n\n        try {\n            String url = BASE_API_URL + ASSOCIATION_END_POINT + objectId + \"/\" + HUBSPOT_DEFINED + \"/\" + GSHubspotAssociationEnum.getDefinitionId(gsHubspotAssociationEnum);\n            boolean hasMore = true;\n            Long offset = Long.MIN_VALUE;\n\n            while (hasMore) {\n                URIBuilder uriBuilder = new URIBuilder(url);\n                if (offset != Long.MIN_VALUE) {\n                    uriBuilder.addParameter(\"offset\", String.valueOf(offset));\n                }\n                this.httpGet.setURI(uriBuilder.build());\n                InputStream inputStream = null;\n                try {\n                    response = this.httpclient.execute(httpGet);\n                    inputStream = response.getEntity().getContent();\n                    String jsonDataResponse = IOUtils.toS","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a31337e-8126-4e93-b4d9-16b315717bcc","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/bean/GainsightAhaEntityEnum.java","startLine":1,"endLine":53,"content":"package com.gainsight.integration.connector.aha.bean;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author puneetsaluja\n * @created 10/03/23\n */\npublic enum GainsightAhaEntityEnum {\n\n    features(\"Features\", \"features\", \"features\", \"api/v1/features?fields=*\"),\n\n    ideas(\"Ideas\", \"ideas\", \"ideas\", \"api/v1/ideas?fields=*\"),\n\n    initiatives(\"Initiatives\", \"initiatives\", \"initiatives\", \"api/v1/initiatives?fields=*\");\n\n    private String label;\n    private String id;\n    private String name;\n    private String dataApiPath;\n\n    GainsightAhaEntityEnum(String label, String id, String name, String dataApiPath) {\n        this.label = label;\n        this.id = id;\n        this.name = name;\n        this.dataApiPath = dataApiPath;\n    }\n\n    public String getLabel() { return label; }\n\n    public String getId() { return id; }\n\n    public String getName() { return name; }\n\n    public static String getDataApiPath(GainsightAhaEntityEnum gainsightAhaEntityEnum) { return gainsightAhaEntityEnum.dataApiPath; }\n\n    public static GainsightAhaEntityEnum getInstance(String entityName) {\n        return ENTITY_MAP.get(entityName);\n    }\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, GainsightAhaEntityEnum> ENTITY_MAP = new HashMap<>();\n\n\n    static {\n        for (GainsightAhaEntityEnum type : values()) {\n            ENTITY_MAP.put(type.id, type);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"973ceae9-01bb-4f4e-be81-65d2bdbfe230","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/FeatureToggleUtil.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.utils;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.CollectionType;\nimport com.gainsight.bean.ExpiryCache;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.cryptography.CryptUtil;\nimport com.gainsight.feature.config.sdk.http.ClientConfig;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigCRUDServiceImpl;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationService;\nimport com.gainsight.feature.config.sdk.service.FeatureConfigEvaluationServiceImpl;\nimport com.gainsight.feature.toggle.bean.Credentials;\nimport com.gainsight.feature.toggle.bean.FeatureVariationDetailDTO;\nimport com.gainsight.properties.DeploymentProperties;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.SALESFORCE_API_VERSION;\n\npublic class FeatureToggleUtil {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(FeatureToggleUtil.class);\n    private static final String GS_ENV_NAME = DeploymentProperties.getDeploymentProperties().getValue(\"gs.domains.env\");\n    private static final String FEATURE_CONFIG_URL = DeploymentProperties.getDeploymentProperties().getValue(\"feature.config.url\");\n    private static final String SHARED_SECRET = Deplo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6ff87881-6c13-45b9-8649-69e3b4ff8fd6","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":171,"endLine":219,"content":"String getQueryOffsetKeyWord(GSHubSpotEntityEnum entity) {\n        return entity.queryOffset;\n    }\n\n    public static String getRetrievOffsetKeyWord(GSHubSpotEntityEnum entity) {\n        return entity.retrieveOffset;\n    }\n\n    public static String getHasMoreKeyWord(GSHubSpotEntityEnum entity) {\n        return entity.hasMoreKeyWord;\n    }\n\n    public static GSHubSpotEntityEnum getInstance(String entityName) {\n        return ENTITY_MAP.get(entityName);\n    }\n\n    public static String labelName(GSHubSpotEntityEnum entityEnum) {\n        return entityEnum.label;\n    }\n\n    public static String getPluralName(GSHubSpotEntityEnum entityEnum) {\n        return entityEnum.pluralName;\n    }\n\n    public static String getPluralNameForCAASSearchApi(GSHubSpotEntityEnum entityEnum) {\n        switch (entityEnum){\n            case TICKET:\n                return \"tickets\";\n            case PRODUCT:\n                return \"products\";\n            default:\n                return entityEnum.pluralName;\n        }\n    }\n\n\n    public static String getQueryProjectionKeyWord(GSHubSpotEntityEnum entityEnum) {\n        return entityEnum.queryProjectionKeyWord;\n    }\n\n    public static String getQueryProjectionKeyWord(GSHubSpotEntityEnum entityEnum, String apiVersion) {\n        if (StringUtils.isNotEmpty(apiVersion) && apiVersion.equalsIgnoreCase(API_VERSION_LATEST)) {\n            return PROPERTIES;\n        }\n        return entityEnum.queryProjectionKeyWord;\n    }\n\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32483b6c-8c6b-42a0-9b94-f0b2ea8dd2da","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/test/java/com/gainsight/integration/connector/dynamics/MSDynamicsServiceImplTest.java","startLine":21,"endLine":46,"content":";\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport java.util.List;\nimport java.util.Map;\n\n@ExtendWith(SpringExtension.class)\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@ContextConfiguration(locations = \"classpath*:/spring/spring-service-gs-adapter-dynamics-test.xml\")\n@Ignore\n@Disabled\npublic class MSDynamicsServiceImplTest {\n\n    @Autowired\n    private MSDynamicsSchemaService msDynamicsSchemaService;\n\n    @Autowired\n    private MSDynamicsDataService msDynamicsDataService;\n\n    private static  Map<String, String> MASTER_LOOKUP_CONFIGURATION = Maps.newHashMap();\n\n    @BeforeEach\n    public void init() {\n        MSDynamicsAuthInfo msDynamicsAuthInfo = new MSDynamicsAuthInfo();\n        msDynamicsAuthInfo.setClientId(\"213d14c2-a17b-49a0-89fd-cb432a27ec21\");\n        msDynamicsAuthInfo.setClientSecret(\"fLDk6ov-@7d=q9Po+2Q2-+3j?M:m3n5F\");\n        msDynamicsAuthInfo.setRefreshToken(\"0.ASwAQrdM4n8UjU-lM3-vsap908IUPSF7oaBJif3LQyon7CEsAL4.AgABAAAAAAB2UyzwtQEKR7-rWbgdcBZIAQDs_wIA9P_HvXv-Tx4jlBRgypPS3CEHz81n7DYh70FyU4foQeCNHnZSl79MwtdEy_C8KId8QxSbOwe9gg2UJbyf-9qScU1_kLR9XOrSFJHSTDCCUU3nGmlYM-ZIHdSWJVJIShOpWcCHEnIlvSOh_Lj6AtjmRqz7o2Bwhzo-iVCuMdNRLreyQWgvdPeb5l_aVeLm1J499yC_PkFB18OVnXtXtRrpERk2BYBG7rXkU7YOzEU9AKcxO-WsaMqP63NVLxz_bdzg2NUCY_OYNtkwc_XfQGr0p-8LuHaUcSmP6HdQggYp1YvCOdjtf1QwP_FYkXGXR73Gl48o2646bl3GEtTdbEGhWfGt4ImxPNW9uu79ktohgGTanjiwDn1L7n_ndx3VrbeAI-MvN1lMqcGXkqq8aKyE5_cqT1LVlmx3E5ny_q6bn2uPLOmc24t4hjnQ7DvO6WYILGFo-ih6C0snH8BJma8qQVhT-HZe7LT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"439cbdcd-5685-43af-a934-f06291eab099","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/HubspotFilters.java","startLine":1,"endLine":57,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class HubspotFilters {\n\n    private String propertyName;\n    private String operator;\n    private Object value;\n    private List<Object> values;\n\n    public HubspotFilters() {\n    }\n\n    public HubspotFilters(String propertyName, String operator, Object value, List<Object> values) {\n        this.propertyName = propertyName;\n        this.operator = operator;\n        this.value = value;\n        this.values = values;\n    }\n\n    public String getPropertyName() {\n        return propertyName;\n    }\n\n    public void setPropertyName(String propertyName) {\n        this.propertyName = propertyName;\n    }\n\n    public String getOperator() {\n        return operator;\n    }\n\n    public void setOperator(String operator) {\n        this.operator = operator;\n    }\n\n\n    public Object getValue() {\n        return value;\n    }\n\n    public void setValue(Object value) {\n        this.value = value;\n    }\n\n    public List<Object> getValues() {\n        return values;\n    }\n\n    public void setValues(List<Object> values) {\n        this.values = values;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"92309c36-ecce-44ed-b619-a2e21521a920","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":151,"endLine":154,"content":"tHubspotFieldDescriptionV3 gainsightHubspotFieldDescription03 = new GainsightHubspotFieldDescriptionV3(\"isDeleted\", \"isDeleted\", \"isDeleted\", \"bool\", \"booleancheckbox\");\n        gainsightHubspotFieldDescriptions.add(gainsightHubspotFieldDescription03);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7bbd55af-22c0-41c3-bd6b-8798e41ac3cf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/i18n/AdapterErrorMessages.java","startLine":70,"endLine":77,"content":"n ConnectorI18nService.getTranslation(this.name(), defaultMessage, RequestContextProvider.getTenantLanguage());\n        } catch (Exception ex) {\n            LOGGER.error(\"Error occurred while fetching the translations for the display name : {}\", this.name(), ex);\n            return defaultMessage;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5af081b-4de5-4dea-8e13-6bce08e869db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelService.java","startLine":1,"endLine":19,"content":"package com.gainsight.integration.connector.snowflake;\n\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\n\nimport java.io.File;\nimport java.sql.SQLException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\npublic interface GainsightSnowflakeChannelService {\n    public List<Map<String, Object>> listAllObjects();\n    public List<Map<String, Object>> listAllFields(String objectName);\n    public List<Map<String, Object>> executeQuery(String query, List<FieldInfo> fieldInfos) throws SQLException;\n    public List<File> fetchData(String objectName, String selectQuery, int maxFileSize,List<FieldInfo> fieldInfos,String filter,  Set<String> ntz_fields, Map<String, String> ntz_map,int limit,int fetchSize);\n    public List<File> fetchData(String objectName, String selectQuery, int maxFileSize,List<FieldInfo> fieldInfos,String filter,  Set<String> ntz_fields,Map<String, String> ntz_map) throws SQLException;\n    public void authenticate();\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b62f7ecc-d45b-45c6-a473-432432cf40a8","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":1,"endLine":30,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author : vipinsharma\n * @createdOn : 25 Jun 2019 :: 16:56\n **/\npublic enum GSHubSpotEntityEnum {\n\n    COMPANY(\"COMPANY\", \"companies/v2/companies/paged?limit=250\", \"/companies/v2/companies/recent/modified\",\n            \"properties/v1/companies/properties\", \"offset\", \"offset\", \"since\",\n            \"has-more\", \"companies\", \"properties\", \"crm/v3/objects/companies?limit=100\",\n            \"crm/v3/properties/company\", \"crm/v3/objects/companies\", \"companies\"),\n\n    CONTACT(\"CONTACT\", \"contacts/v1/lists/all/contacts/all?count=100\", \"/contacts/v1/lists/recently_updated/contacts/recent\",\n            \"properties/v1/contacts/properties\", \"vidOffset\", \"vid-offset\", \"timeOffset\",\n            \"has-more\", \"contacts\", \"property\", \"crm/v3/objects/contacts?limit=100\",\n            \"crm/v3/properties/contact\",\"crm/v3/objects/contacts\", \"contacts\"),\n\n    OWNER(\"OWNER\", \"owners/v2/owners\", null,\n            \"properties/v1/owners/properties\", null, null, StringUtils.EMPTY,           // legacy meta api not working\n            null, \"owners\", null, \"crm/v3/owners?limit=100\", null,\"crm/v3/owners\",\"owners\"),  // latest meta api not present\n\n    DEAL(\"DEAL\", \"deals/v1/deal/paged?includeAssociations=true&limit=250\", \"/deals/v1/deal/recent/modified\",\n            \"properties/v1/deals/properties\", \"offset\", \"offset\", \"since\",\n            \"hasMore\", \"d","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8c3ec1ce-f82c-482d-a4fc-cd3a82a8c23b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/MetadataGenerationDetails.java","startLine":34,"endLine":54,"content":"tionId\";\n    public static final String OBJECT_NAME_PROP = \"objectName\";\n\n    public MetadataGenerationDetails() {\n    }\n\n    private String jobId;\n    private String tenantId;\n    private String connectionId;\n    private String objectName;\n    private ConnectorType connectorType;\n    private List<GSFieldDefinition> generatedFields;\n    private MetadataJobStatus status;\n    private int generatedFieldCount;\n    private String dataFilePath;\n    private String recordId;\n    private String encryptedRequestInfo;\n    private String dbqMessageId;\n    private String errorMessage;\n    private Map<String,List<String>> fieldNameToDataMap;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"288f2ac1-3b75-47b2-9f99-94626a662c7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":1,"endLine":37,"content":"package com.gainsight.connector;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport com.gainsight.integration.bean.enums.Operators;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.impl.client.HttpClients;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport org.jvnet.hk2.annotations.Service;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\nimport java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.wrapRoundBrackets;\n\n@Service\npublic class Zuorav2Ch","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"55bd1fea-96fd-442e-b545-bef489fbf1c1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":796,"endLine":819,"content":" -> column.isPrimary()).findFirst();\n            if (primaryColumnOptional.isPresent()) {\n                for (Column column : entry.getValue()) {\n                    String referencingAttribute = getReferencingAttribute(column.getLogicalName(), column.getTargetObject());\n                    Optional<Relationship> relationshipOptional = relationships.stream().filter(relationship -> relationship.getReferencedEntity().equals(column.getTargetObject()) && relationship.getReferencingAttribute().equals(referencingAttribute)).findFirst();\n                    if (relationshipOptional.isPresent()) {\n                        lookupObjectPrimaryKeys.add(relationshipOptional.get().getReferencingEntityNavigationPropertyName() + \".\" + primaryColumnOptional.get().getLogicalName());\n                    } else {\n                        lookupObjectPrimaryKeys.add(column.getLogicalName() + \".\" + primaryColumnOptional.get().getLogicalName());\n                    }\n                }\n            }\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                LOGGER.error(\"Thread interrupted...\", e);\n            }\n        }\n        return lookupObjectPrimaryKeys;\n    }\n\n    private void generateRecords(RecordResponseGenerator recordResponseGenerator, ClientEntitySet clientEntitySet,\n                                 Set<String> expandGroup, Map<String, Map<Integer, String>> optionSetMap,\n                                 Map<String,Set<String>> m","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"12ad85cd-7ac5-47b5-a4fd-2f4315a52fa6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/metadata/engine/ResponseType.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.bean.enums.metadata.engine;\n\npublic enum ResponseType {\n    XML,\n    JSON;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"025aad71-764b-4cf0-82b8-64bae513e18c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/test/java/com/gainsight/integration/connector/dynamics/MSDynamicsServiceImplTest.java","startLine":91,"endLine":116,"content":"ntnumber\"))\n            .withOutputMode(OutputMode.FILE);\n        RecordsResponse records = msDynamicsDataService.getRecords(gsreGetRecordsRequest,MASTER_LOOKUP_CONFIGURATION);\n        System.out.println(records.getCsvFile());\n        System.out.println(records.getRecords());\n    }\n\n    @Test\n    public void testDescribeObject() {\n        MSDynamicsObject msDynamicsObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().objectName(\"new_customobject\"), true, true);\n        System.out.println(msDynamicsObject);\n    }\n\n    @Test\n    public void testDescribeOptionSet() {\n        OptionSet optionSet = msDynamicsSchemaService.describeOptionSet(\"new_customobject\", \"new_multiselectoptionset\");\n        System.out.println(optionSet);\n    }\n\n    @Test\n    public void testListRelationships() {\n        List<Relationship> relationships = msDynamicsSchemaService.listRelationships(\"incident\", RelationshipType.MANY_TO_ONE);\n        System.out.println(relationships);\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5d466a61-35e3-4930-8556-785a1fafce4b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":130,"endLine":160,"content":"     Future<AuthenticationResult> future = context.acquireTokenByRefreshToken(MSDynamicsContext.getCtx().getRefreshToken(), new ClientCredential(MSDynamicsContext.getClientId(), MSDynamicsContext.getClientSecret()), MSDynamicsContext.getResourceUri(), null);\n            result = future.get();\n        } finally {\n            service.shutdown();\n        }\n\n        if (result == null) {\n            throw new ServiceUnavailableException(\n                    \"authentication result was null\");\n        }\n        return result;\n    }\n\n    private AuthenticationResult getAccessTokenFromClientCredentials() throws MalformedURLException, ExecutionException, InterruptedException,\n            ServiceUnavailableException {\n        AuthenticationContext context;\n        AuthenticationResult result;\n        ExecutorService service = null;\n        try {\n            service = Executors.newFixedThreadPool(1);\n            context = new AuthenticationContext(MSDynamicsContext.getAuthority(), false, service);\n            LOGGER.info(\"Generating accessToken for client_credentials flow\");\n            Future<AuthenticationResult> future = context.acquireToken(MSDynamicsContext.getResourceUri(), new ClientCredential(MSDynamicsContext.getClientId(), MSDynamicsContext.getClientSecret()), null);\n            result = future.get();\n        } finally {\n            service.shutdown();\n        }\n\n        if (result == null) {\n            LOGGER.error(\"authentication result was null\");\n            throw new Ser","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dc7d6296-a7cd-4052-95fa-c0696d26ee39","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":718,"endLine":740,"content":"ownerid.systemuser : \"\", // or null\n                    ownerid.team: \"team_id\"\n                    Here consider: ownerid.team (which has value).\n\n                    If both the fields has values: Fail the record as <lookup_field> conflicts across multiple targets.\n\n                    If both has null or empty: Consider any.\n                */\n\n                if (!lookupFieldToValueMap.containsKey(columns[0])) {\n                    lookupFieldToValueMap.put(columns[0], data);\n                    requestMap.put(String.format(ODATA_BIND, lookupProjectionToNavigationProperty.get(header)),\n                            (null == data) ? null : String.format(ODATA_BIND_VALUE, entityLogicalNameToPluralName.getOrDefault(columns[1], columns[1] + \"s\"), data)\n                    );\n                } else if (null == lookupFieldToValueMap.get(columns[0]) && null != data) {\n                    // Remove previously added binding for the same lookupField from the requestMap.\n                    List<String> otherLookupProjectionsOfSameField = lookupProjectionToNavigationProperty.entrySet().stream()\n                            .filter(lookupProjection -> lookupProjection.getKey().startsWith(columns[0] + PERIOD) &&\n                                    !lookupProjection.getKey().equalsIgnoreCase(header))\n                            .map(Map.Entry::getValue)\n                            .map(value -> String.format(ODATA_BIND, value))\n                            .collect(Collectors.toList());\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8928505-382d-4123-972a-4bcc46983161","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":663,"endLine":693,"content":"t(projection, value);\n                                }\n                            }\n                        } else {\n                            if (multiPicklistColumns.contains(key)) {\n                                record.put(key, replaceMPSeperator(value));\n                            } else {\n                                record.put(key, value); // revisit for picklist in looked up object\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private ClientEntitySet readClientEntitySet(ODataClient client, String entitySetName, Set<String> projections,\n                                                Set<String> expandList, String filterExpression, URIBuilder absoluteUri,\n                                                Integer pageSize) {\n        try {\n            if (Objects.isNull(absoluteUri)) {\n                absoluteUri = client.newURIBuilder(MSDynamicsContext.getApiUrl()).appendEntitySetSegment(entitySetName);\n                if (CollectionUtils.isNotEmpty(projections)) {\n                    absoluteUri.select(projections.toArray(new String[projections.size()]));\n                }\n                if (CollectionUtils.isNotEmpty(expandList)) {\n                    absoluteUri.expand(expandList.toArray(new String[expandList.size()]));\n                }\n                if (StringUtils.isNotBlank(filterExpression)) {\n                    absoluteUri.filter(filterExpression);\n                }\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f80a9945-5266-470d-9e09-836e52fd25d8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/test/java/com/gainsight/integration/connector/dynamics/MSDynamicsServiceImplTest.java","startLine":1,"endLine":27,"content":"package com.gainsight.integration.connector.dynamics;\n\nimport com.gainsight.bean.MSDynamicsAuthInfo;\nimport com.gainsight.context.MSDynamicsContext;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.MSDynamicsObject;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.OptionSet;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.Relationship;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.RelationshipType;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\nimport com.gainsight.integration.connector.dynamics.bean.query.OutputMode;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsDataService;\nimport com.gainsight.integration.connector.dynamics.service.MSDynamicsSchemaService;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport jdk.nashorn.internal.ir.annotations.Ignore;\nimport org.junit.jupiter.api.*;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport java.util.List;\nimport java.util.Map;\n\n@ExtendWith(SpringExtension.class)\n@TestMethodOrder(MethodOrderer.OrderAnnotation","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3eca658a-31fe-4bad-8639-0c23f5bd3396","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsFetchServiceImpl.java","startLine":29,"endLine":56,"content":"shToken, String accessToken, String nextPageUrl, String api) throws Exception {\n        try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightMSTeamsChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightMSTeamsChannelService.getPaginatedEntityData(entityName, projectionList, nextPageUrl, api);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw e;\n        }\n    }\n\n    @Override\n    public Map<String, Object> getMSTeamsOrganizationDetails(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightMSTeamsChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret, refreshToken, accessToken);\n            return gainsightMSTeamsChannelService.getTeamsOrganizationDetails();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            return null;\n        }\n    }\n\n    @Override\n    public Map<String, Object> getMSTeamsUserDetails(String clientId, String clientSecret, String refreshToken, String accessToken) {\n        try {\n            GainsightMSTeamsChannelService gainsightMSTeamsChannelService =\n                    gainsightMSTeamsChannelFactory.getChannelServiceWithOAuth20WithAccessToken(clientId, clientSecret","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"37d5e6b7-e7e9-4ec7-9210-5e74ee00510f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/AuthApiAttributes.java","startLine":1,"endLine":31,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.gainsight.integration.bean.enums.metadata.engine.Encoding;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class AuthApiAttributes implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private String requestKey;\n    private Object value;\n    private String defaultValue;\n    private String joinString;\n    private String dataType;\n    private String format;\n    private Encoding encoding;\n    private String prefix;\n    private AuthDetails tokenGenerationDetails;\n    @JsonProperty(\"isStatic\")\n    private boolean isStatic;\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cb2b1187-4750-4ddb-9b79-9f827e2c6b4f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":147,"endLine":169,"content":"   HttpEntity entity = response.getEntity();\n\n                String jsonResponse;\n                Map<String, Object> responseMap;\n\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        responseMap = MAPPER.readValue(jsonResponse, Map.class);\n                        scopes = (List<String>) responseMap.get(\"scopes\");\n                        Objects.requireNonNull(scopes, AdapterErrorMessages.SCOPE_CAN_NOT_BE_NULL.getTranslatedMessage());\n                    } else {\n                        throw new Exception(AdapterErrorMessages.UNABLE_TO_GET_SCOPE_EMPTY_BODY.getTranslatedMessage());\n                    }\n                } else {\n                    if (entity != null) {\n                        InputStream inputStream = entity.getContent();\n                        jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                        responseMap = MAPPER.readValue(jsonResponse, Map.class);\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_SCOPE_ERROR.getTranslatedMessage(), (String) responseMap.get(\"message\")));\n                    } else {\n                        throw new Exception(String.format(AdapterErrorMessages.UNABLE_TO_GET_SCOPE_EM","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c50e8260-e466-41a4-9193-683c62b6590c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/OptionSetType.java","startLine":1,"endLine":26,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonValue;\n\npublic enum OptionSetType {\n\n    PICKLIST(\"Picklist\"),\n    STATUS(\"Status\"),\n    STATE(\"State\");\n\n    private String value;\n\n    OptionSetType(String value) {\n        this.value = value;\n    }\n\n    @JsonValue\n    public String getValue() {\n        return value;\n    }\n\n    public static OptionSetType fromValue(String value) {\n        return valueOf(StringUtils.upperCase(value));\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fe09866e-67e6-40e5-bfe6-3580094f1a85","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceMetadataServiceImpl.java","startLine":77,"endLine":95,"content":"e SOQL_QUERY:\n                response = httpUrlConnectionUtils.get(String.format(salesforceToken.getInstanceURL() + SALESFORCE_SERVICES_DATA + apiVersion + SALESFORCE_SOQL_QUERY, URLEncoder.encode(data, CharEncoding.UTF_8)), headers, null);\n                break;\n            default:\n                LOGGER.info(\"Invalid Request received to fetch SFDCMetadata of type: {} for connection: {}\", sfdcMetadataTypeEnum.name(), pnpConnectionsInfo.getConnectionId());\n                break;\n        }\n        return response;\n    }\n\n    private String getSfdcApiVersion(PNPConnectionsInfo pnpConnectionsInfo) {\n        if (pnpConnectionsInfo.getProperties().containsKey(\"SFDC_API_VERSION\")) {\n            return pnpConnectionsInfo.getProperties().get(\"SFDC_API_VERSION\").toString();\n        } else {\n            return FeatureToggleUtil.getSalesforceVersion(DeploymentProperties.getDeploymentProperties().getValue(\"uc.sfdc.api.version\", StringUtils.EMPTY));\n        }\n    }\n\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57a75824-deb2-4fc1-ae5d-5cb2f08be749","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":101,"endLine":111,"content":"escriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.calls.results[*].id\", \"Associated Call Ids\", \"associations.calls.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CALL.name()));\n                }\n                break;\n            case LINE_ITEM:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldD","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d1c892b5-582f-464f-8531-e2888a962c2d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/Criteria.java","startLine":1,"endLine":30,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterCondition;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\nimport java.util.Map;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@JsonIgnoreProperties(\n        ignoreUnknown = true\n)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class Criteria {\n    private String fieldName;\n    private FilterOperator operatorType;\n    private Object values;\n    private FilterCondition ductFilterCondition;\n    private List<Criteria> filters;\n    private Map<String, Object> properties;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"855048e8-206b-4cdb-83ab-65c9273a485a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/AuthorizationUrl.java","startLine":1,"endLine":21,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@Getter\n@Setter\npublic class AuthorizationUrl implements Serializable {\n    private static final long serialVersionUID = -1L;\n\n    private ExternalUrlDetails baseUrl;\n    private List<AuthApiAttributes> queryParamDetails;\n    private String path;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"414d6d0a-70c4-42b0-a252-ebffa730c2a4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":292,"endLine":329,"content":"fieldDefinitionClone);\n                            }\n                            continue;\n                        }\n                    } else {\n                        attribute.put(DATA_PREVIEW_AVAILABLE_FOR_LOOKUP_FIELDS, false);\n                        List<String> targets = (List) poll(attribute, \"Targets\");\n                        if (CollectionUtils.isNotEmpty(targets)) {\n                            meta.put(HAS_LOOKUP, true);\n                            LookupDetails lookupDetails = createLookupDetail(targets, fieldDefinition.get(FIELD_NAME).toString(),\n                                    fieldDefinition.get(LABEL).toString(), fieldDefinition.get(DB_NAME).toString());\n                            meta.put(LOOKUP_DETAIL, lookupDetails);\n                        }\n                    }\n                }\n\n                meta.put(PROPERTIES, attribute);\n                fieldDefinition.put(META, meta);\n                fields.add(fieldDefinition);\n            }\n        }\n\n        objectDefinition.put(FIELDS, fields);\n        return objectDefinition;\n    }\n\n    private static Object poll(Map<String, Object> attribute, String key) {\n        Object value = attribute.get(key);\n        attribute.remove(key);\n        return value;\n    }\n\n    private static Object poll(Map<String, Object> attribute, String key, Object value) {\n        attribute.remove(key);\n        return value;\n    }\n\n    private static LookupDetails createLookupDetail(String target, String fieldName, String fiel","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"308702cc-5803-4361-b17f-289c84bc6393","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":30,"endLine":56,"content":" in ($right)\",null, \"exclude_any\", null),\n    IS_NULL(\"isNull\", FilterOperator.IS_NULL, \"$left is Null\", \"$left IS NULL\",\"$left is Null\",\"$left IS NULL\", null, \"$left ISEMPTY\"),\n    IS_NOT_NULL(\"isNotNull\", FilterOperator.IS_NOT_NULL, \"$left is Not Null\", \"$left IS NOT NULL\",\"$left is not Null\",\"$left IS NOT NULL\", null, \"$left ISNOTEMPTY\");\n\n    Operators(String gainsightOpertor, FilterOperator filterOperator, String sqlOperator, String bqSQLOperator,String  jiraJqlOperator,String zuoraZodlOperator, String zohoCrmOperator, String serviceNowOperator) {\n        this.gainsightOpertor = gainsightOpertor;\n        this.filterOperator = filterOperator;\n        this.sqlOperator = sqlOperator;\n        this.bqSQLOperator = bqSQLOperator;\n        this.jiraJqlOperator = jiraJqlOperator;\n        this.zuoraZodlOperator = zuoraZodlOperator;\n        this.zohoCrmOperator = zohoCrmOperator;\n        this.serviceNowOperator = serviceNowOperator;\n    }\n\n    private String gainsightOpertor;\n    private FilterOperator filterOperator;\n    private String sqlOperator;\n    private String bqSQLOperator;\n    private String jiraJqlOperator;\n    private String zuoraZodlOperator;\n    private String zohoCrmOperator;\n    private String serviceNowOperator;\n\n    public static FilterOperator getDatahighwayOperator(OperatorType operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() ->","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f6992090-f09b-408a-8ed8-6e2ae2cf1cdc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditRecord.java","startLine":1,"endLine":59,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.audit;\n\nimport com.gainsight.integration.bean.enums.audit.AuditOperationType;\nimport com.gainsight.integration.bean.enums.common.EventStatusEnum;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.codehaus.jackson.annotate.JsonProperty;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * Created by vgautam on 15/11/16.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class AuditRecord implements Serializable{\n\n  private static final long serialVersionUID = -1L;\n  /**\n   * In Unified Connector this systemId is one-to-one mapped to UC-requestId, which uniquely\n   * identifies a request came to Unified Connector System. It is also same as the UC-requestId\n   * use in {@code JobMasterDetails}.\n   */\n  @JsonProperty(\"systemId\")\n  private String systemId;\n\n  @JsonProperty(\"systemTimestamp\")\n  private String systemTimestamp;\n\n  @JsonProperty(\"generatedBy\")\n  private String generatedBy;\n\n  @JsonProperty(\"eventName\")\n  private String eventName;\n\n  @JsonProperty(\"eventType\")\n  private AuditOperationType eventType;\n\n  @JsonProperty(\"eventStatus\")\n  private EventStatusEnum eventStatus;\n\n  @JsonProperty(\"userId\")\n  private String userId;\n\n  @JsonProperty(\"userName\")\n  private String userName;\n\n  @JsonProperty(\"tenantId\")\n  private String tenantId;\n\n  @JsonProperty(\"systemTags\")\n  private List<String> systemTags;\n\n  /**\n   * The request of the source.\n   * For ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"58585e66-eee9-4024-b462-3a993dcad8b3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":571,"endLine":599,"content":"ty clientProperty : clientEntity.getProperties()) {\n                Object value = extractValue(clientProperty, optionSetMap, isPrimitiveDateTimeConversionRequired);\n                if (modifiedProjectionToOriginalProjections.containsKey(clientProperty.getName())) {\n                    for (String projection : modifiedProjectionToOriginalProjections.get(clientProperty.getName())) {\n                        if (multiPicklistColumns.contains(projection)) {\n                            record.put(projection, replaceMPSeperator(value));\n                        } else {\n                            record.put(projection, value);\n                        }\n                    }\n                } else {\n                    if (multiPicklistColumns.contains(clientProperty.getName())) {\n                        record.put(clientProperty.getName(), replaceMPSeperator(value));\n                    } else {\n                        record.put(clientProperty.getName(), value);\n                    }\n                }\n            }\n            if (CollectionUtils.isNotEmpty(expandGroup)) {\n                extractLookUpValue(expandGroup, clientEntity, record, modifiedProjectionToOriginalProjections, isPrimitiveDateTimeConversionRequired, multiPicklistColumns);\n            }\n\n            recordResponseGenerator.addRecordsForParquetFile(record);\n        }\n    }\n\n    // Change multi picklist seperator from ,(Comma) to ;(Semicolon)\n    private Object replaceMPSeperator(Object value) {\n        return Ob","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d28633e-2d27-4388-928b-c7ab05325324","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/ProductBoardChannelService.java","startLine":1,"endLine":16,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.productboard.service;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.gainsight.integration.productboard.enums.ProductboardObjectsEnum;\n\nimport java.util.List;\n\npublic interface ProductBoardChannelService extends IRoadmapChannelService {\n    List<JsonNode> pullDataExceptNotes(ProductboardObjectsEnum objectType, String filterQuery);\n\n    List<JsonNode> pullNotesData(List<String> noteIds);\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"03bb7a13-90f5-44f9-bdae-c317d5369da0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/RecordResponseGenerator.java","startLine":80,"endLine":129,"content":"rdsPulled;\n  }\n\n  public File getCsvFile() {\n    if (icsvWriter != null) {\n      IOUtils.closeQuietly(icsvWriter);\n    }\n\n    return csvFile;\n  }\n\n  public String getBatchQuery() {\n    return batchQuery;\n  }\n\n  public void setBatchQuery(String batchQuery) {\n    this.batchQuery = batchQuery;\n  }\n\n  private void prepareRecord(Map<String, Object> record) {\n    String[] row = new String[headers.length];\n    for (int i = 0; i < headers.length; i++) {\n      if (record.get(headers[i]) == null) {\n        row[i] = \"null\";\n      } else {\n        row[i] = record.get(headers[i]).toString();\n      }\n    }\n\n    icsvWriter.writeNext(row);\n  }\n\n  private void prepareRecordForParquetFile(Map<String, Object> record) {\n    String[] row = new String[headers.length];\n    for (int i = 0; i < headers.length; i++) {\n      if (record.get(headers[i]) == null) {\n        row[i] = null;\n      } else {\n        row[i] = record.get(headers[i]).toString();\n      }\n    }\n    icsvWriter.writeNext(row);\n  }\n\n  private void prepareHeader(String[] headers) {\n    icsvWriter.writeNext(headers);\n  }\n\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"339d37dc-32ef-40b8-bd62-06b1587adb9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ms-teams/src/main/java/com/gainsight/integration/connector/msteams/service/GainsightMSTeamsChannelFactory.java","startLine":1,"endLine":33,"content":"package com.gainsight.integration.connector.msteams.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\n\npublic class GainsightMSTeamsChannelFactory {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightMSTeamsChannelFactory.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    public GainsightMSTeamsChannelFactory() {\n    }\n\n    public GainsightMSTeamsChannelService getChannelServiceWithOAuth20WithAccessToken(String clientId, String clientSecret,\n                                                                                   String refreshToken,\n                                                                                   String accessToken) throws Exception {\n        Objects.requireNonNull(clientId,\"[MSTEAMS] Client Id c","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e4f4fd50-0ee0-43b3-9513-f0a4facb1933","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataService.java","startLine":1,"endLine":23,"content":"package com.gainsight.integration.connector.dynamics.service;\n\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.connector.dynamics.bean.query.GetRecordsRequest;\nimport com.gainsight.integration.connector.dynamics.bean.query.RecordsResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface MSDynamicsDataService {\n    RecordsResponse getPaginatedRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, Map<String, Object> metadataMap,\n                                        String nextPageToken, Integer pageSize, boolean resolvePicklistOptions);\n    RecordsResponse getRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration);\n    RecordsResponse getRecords(GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, boolean resolvePicklistOptions,\n                               int maxRetryCount);\n    RecordsResponse runQuery(GetRecordsRequest getRecordsRequest);\n\n    Map<String, Object> loadSingleRecord(DuctDataOperation ductDataOperation, String targetObject, List<ColumnMapping> columnMappings,\n                                         String[] headers, String[] data, Map<String, ObjectDefinition> objectAttributes,\n                                         String accessToken, Map<String, String> lookupProjectionToNavigationPropert","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ba85a6b-10ec-4f15-acdd-740ed63b42ed","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":319,"endLine":342,"content":"Response response = httpUrlConnectionUtils.get(url, headers, 60000, true, null);\n                if (response.getResponseCode() == HttpStatus.SC_OK) {\n                    //check file content before upload\n                    if (0 == response.getContentLength()) {\n                        throw new SystemException(AdapterErrorMessages.SFDC_ERROR_RETREIVED_EMPTY_FILE.getTranslatedMessage());\n                    }\n                    if (i == 0) {\n                        csvReader = new CSVReaderBuilder(new InputStreamReader(response.getResponseIs(), StandardCharsets.UTF_8)).withCSVParser(new RFC4180Parser()).build();\n                    } else {\n                        csvReader = new CSVReaderBuilder(new InputStreamReader(response.getResponseIs(), StandardCharsets.UTF_8)).withSkipLines(1).withCSVParser(new RFC4180Parser()).build();\n                    }\n                    for (String[] strings : csvReader) {\n                        icsvWriter.writeNext(strings);\n                    }\n                    IOUtils.closeQuietly(csvReader);\n                } else {\n                    String errorMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                    String errorCode = SFDCExceptionUtility.errorCodeExtraction(errorMessage);\n                    LOGGER.error(\"Exception occurred while trying to write output to file : {}, ErrorCode : {}\", errorMessage, errorCode);\n                    throw new Exception(errorMessage);\n                }\n            }\n\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b3480b5d-c41f-43c8-843b-c9f83eac37b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":80,"endLine":107,"content":"ng());\n            switch (pnpConnectionsInfo.getAuthorizationType()) {\n                case BASIC_AUTH:\n                    properties.put(PASSWORD, CryptHandler.getInstance().decrypt((byte[]) (propertie.get(PASSWORD))));\n                    break;\n                case OAUTH:\n                    String accessToken = getAccessToken(pnpConnectionsInfo, propertie);\n                    properties.put(AUTHENTICATOR, AuthorizationType.OAUTH.toString().toLowerCase());\n                    properties.put(PASSWORD, accessToken);\n                    break;\n                default:\n                    throw new SystemException(String.format(\"Authorization type : {} not supported\", pnpConnectionsInfo.getAuthorizationType()));\n            }\n            this.connection = createConnection(connectionUrl, properties);\n        }\n    }\n\n    public GainsightSnowflakeChannelServiceImpl(Map properties, AuthorizationType authorizationType) {\n        this.schema = properties.get(DATASET_ID).toString();\n        this.db = properties.get(DATABASE_NAME).toString();\n        String connectionUrl = SNOWFLAKE_BASE_URL + properties.get(DATABASE_HOST).toString();\n        Properties propertie = new Properties();\n        propertie.put(DB, this.db);\n        propertie.put(SCHEMA, this.schema);\n        propertie.put(USER, properties.get(USERNAME).toString());\n        propertie.put(WAREHOUSE, properties.get(WAREHOUSE).toString());\n        propertie.put(CLIENT_SESSION_KEEP_ALIVE, Boolean.TRUE.toString());\n        sw","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56580e32-9c80-4a16-896a-cc74a52afbe0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelService.java","startLine":34,"endLine":66,"content":" projections, String nextPageUrl, String api) throws Exception;\n\n    InputStream getAssociatedObjects(GSHubspotAssociationEnum gsHubspotAssociationEnum, Integer objectId, Long pageNumber) throws Exception;\n\n    List<String> getAssociatedObjectsV2(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception;\n\n    List<String> getAssociatedObjectsLegacy(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception;\n\n    List<String> getAssociatedObjectsLatest(GSHubspotAssociationEnum gsHubspotAssociationEnum, String objectId) throws Exception;\n\n    List<Object> getPipelineMapping(String object) throws Exception;\n\n    void close();\n\n    List<Object> getDataWithQuery(String query);\n\n    HttpResponse createSingleData(GSHubSpotEntityEnum gsHubSpotEntityEnum, Map<String, Object> data) throws Exception;\n\n    HttpResponse updateSingleDate(GSHubSpotEntityEnum gsHubSpotEntityEnum, Map<String, Object> data, String id) throws Exception;\n\n\n    HttpResponse uploadBulkData(HubspotBulkImportBean hubspotBulkImportBean, File file) throws Exception;\n\n    HttpResponse pollImportFileData(String id) throws Exception ;\n     HttpResponse getErrorFileData(String id) throws Exception ;\n\n\n     HttpResponse searchData(String resourceName, HubspotSearchRequest hubspotSearchRequest) throws Exception;\n    HttpResponse searchOwnerData() throws Exception;\n\n     Map<String, Object> getFileMetaData(String fileId, boolean signedUrl);\n\n    Map<String, Object> uploadF","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04191a1d-f771-4714-be9b-d71cba1dc889","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/enums/ProductboardObjectsEnum.java","startLine":1,"endLine":52,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.productboard.enums;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic enum ProductboardObjectsEnum {\n\n    FEATURES(\"features\"),\n\n    NOTES(\"notes\"),\n\n    COMPONENTS(\"components\"),\n\n    PRODUCTS(\"products\"),\n\n    FEATURE_STATUSES(\"feature-statuses\");\n\n    /**\n     * Pre-populate the connector map for performance.\n     */\n    private static final Map<Object, ProductboardObjectsEnum> ENTITY_MAP = new HashMap<>();\n    private String objectName;\n\n    static {\n        for (ProductboardObjectsEnum type : values()) {\n            ENTITY_MAP.put(type.objectName, type);\n        }\n    }\n\n    ProductboardObjectsEnum(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public static String getObjectName(ProductboardObjectsEnum entityName) {\n        return entityName.objectName;\n    }\n\n    public static ProductboardObjectsEnum getInstance(String entityName) {\n        return ENTITY_MAP.get(entityName);\n    }\n\n    public static List<String> getAllObjects() {\n        return ENTITY_MAP.values().stream().map(ProductboardObjectsEnum::getObjectName).collect(Collectors.toList());\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"422b2f4b-5949-433b-b22a-2a5ffc9cdb5e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":639,"endLine":681,"content":"son();\n            for (Map<String, Object> payload : destPayload) {\n                String json = gson.toJson(payload);\n                br.write(json + \"\\n\");\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"error occured while writing to file\", e);\n        } finally {\n            br.flush();\n            br.close();\n            fr.close();\n        }\n    }\n\n\n    private void closeQuietly(Connection conn, ResultSet resultSet, PreparedStatement preparedStatement) {\n        try {\n            if (conn != null)\n                conn.close();\n        } catch (SQLException se) { //NOSONAR\n        }\n        try {\n            if (resultSet != null)\n                resultSet.close();\n        } catch (SQLException se) { //NOSONAR\n        }\n        try {\n            if (preparedStatement != null)\n                preparedStatement.close();\n        } catch (SQLException se) { //NOSONAR\n        }\n    }\n\n    private String getAccessToken(PNPConnectionsInfo pnpConnectionsInfo, Map properties) {\n        convertTokenDetailToMap(pnpConnectionsInfo.getTokenDetail(), properties);\n        String accessToken = generateOrRefreshAccessToken(properties);\n        pnpConnectionsInfo.getTokenDetail().setAccessToken(CryptHandler.getInstance().encrypt(accessToken));\n        pnpConnectionsInfo.getTokenDetail().setExpiry((Long) properties.get(EXPIRY));\n//        pnpConnectionsInfoDao.update(pnpConnectionsInfo);\n        return accessToken;\n    }\n\n    private Map<String, Object> convertT","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6601e5d9-c0e2-45ef-b0ba-57019a216611","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":748,"endLine":788,"content":"      LOGGER.info(\"Executing query: {}\", deleteTableQuery);\n                statement.execute(deleteTableQuery);\n                LOGGER.info(\"Deleted temp stage table: {} successfully\", tempStageTable);\n                return;\n            } catch (SQLException e) {\n                ++retryCount;\n                LOGGER.error(\"Error occurred while deleting temp stage table: {}\", e.getMessage(), e);\n            }\n        }\n    }\n\n    private void closeQuietly(Connection conn, ResultSet resultSet, Statement statement) {\n        try {\n            if (resultSet != null)\n                resultSet.close();\n        } catch (SQLException se) { //NOSONAR\n        }\n        try {\n            if (statement != null)\n                statement.close();\n        } catch (SQLException se) { //NOSONAR\n        }\n        try {\n            if (conn != null) {\n                conn.close();\n            }\n        } catch (SQLException se) { //NOSONAR\n        } finally {\n            this.connection = null;\n        }\n    }\n\n    private Connection createConnection(String connectionUrl, Properties properties) {\n        Connection connection;\n        try {\n            connection = DriverManager.getConnection(connectionUrl, properties);\n        } catch (Exception ex) {\n            String errorMsg = String.format(\"Failed to connect to Databricks due to %s\", ex.getMessage());\n            SystemException systemException = new SystemException(errorMsg, ex);\n            systemException.setUiMessage(errorMsg);\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74369745-1c7b-479e-8f39-c5c01d755196","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":1,"endLine":29,"content":"package com.gainsight.integration.connector.hubspot.service;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.gainsight.integration.bean.enums.AuthenticationType;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.bean.GSHubspotAssociationEnum;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotBulkImportBean;\nimport com.gainsight.integration.connector.hubspot.bean.HubspotSearchRequest;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPatch;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.client.utils.HttpClientUtils;\nimport org.apache.http.client.utils.URIBuilder;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.entity.mime.content.StringBody;\nimport org.apache.http.impl.client.C","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"56900e73-2089-4b38-96cf-87ea3f119965","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":117,"endLine":146,"content":"usLine().getStatusCode());\n                throw new Exception(\"Ecosystem api fetch failed due to :{}\" + response.getStatusLine());\n            } else {\n                LOGGER.error(\"Sleeping for 15 secs as the api call to Ecosystem failed for retry count : {} due to : {}, code :{}\",\n                        2-retryCount, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                Thread.sleep((15 * 1000));\n            }\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse getPaginatedEntityData(String url, Map<String, String> queryParams) throws Exception {\n        List<NameValuePair> nameValuePairs = new ArrayList<>();\n        queryParams.forEach((k, v) -> nameValuePairs.add(new BasicNameValuePair(k, v)));\n        URI uri = new URIBuilder(url).addParameters(nameValuePairs).build();\n        this.httpGet.setURI(uri);\n        this.httpGet.setHeader(\"Authorization\", this.apiKey);\n        HttpResponse response = null;\n        int maxRetryCalls = 2;\n        int counter = 0;\n        while (counter <= maxRetryCalls) {\n            response = this.httpclient.execute(httpGet);\n            if(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK){\n                break;\n            } else if(response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"Access token expired\");\n                throw new Exception(\"Access token expired\");\n            } else {\n                LOGGER.error(\"Sl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ba5f3f21-3e30-45ce-a512-7dc298ee449d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":638,"endLine":665,"content":"ID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n    return httpClientForApiCall;\n  }\n\n  @Override\n  public String getAuthorizationUrl(MetadataEngineConfig metadataEngineConfig, AuthorizationUrl authorizationUrl, Map<String, Object> flattenConnectionInfo, PNPConnectionsInfo pnpConnectionsInfo) throws Exception {\n    ExternalUrlDetails configBaseUrl = null;\n    if (ObjectUtils.isEmpty(authorizationUrl.getBaseUrl()))\n      configBaseUrl = metadataEngineConfig.getBaseUrl();\n    else\n      configBaseUrl = authorizationUrl.getBaseUrl();\n    String baseUrl = getBaseUrl(configBaseUrl, flattenConnectionInfo);\n    baseUrl = baseUrl + authorizationUrl.getPath();\n    Map<String, String> queryParams = new HashMap<>();\n    if (authorizationUrl.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : authorizationUrl.getQueryParamDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, queryParamDetail, pnpConnectionsInfo, flattenConnectionInfo, baseUrl, null);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        queryParams.put(queryParamDetail.getRequestKey(), getFinalValue(queryParamDetail, value));\n      }\n    }\n    URIBuilder uriBuilder = new URIBuilder(baseUrl);\n    populateQueryParams(queryParams, uriBuilder);\n    return ur","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01807b0a-c9bc-4b09-a746-c36f00efd105","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionsInfo.java","startLine":281,"endLine":318,"content":"        \", setupStatus=\" + setupStatus +\n                \", version=\" + version +\n                '}';\n    }\n\n    public boolean isIpaasConnection() {\n        return ipaasConnection;\n    }\n\n    public void setIpaasConnection(boolean ipaasConnection) {\n        this.ipaasConnection = ipaasConnection;\n    }\n\n    public InstanceDetail getInstanceDetail() {\n        return instanceDetail;\n    }\n\n    public void setInstanceDetail(InstanceDetail instanceDetail) {\n    this.instanceDetail = instanceDetail;\n  }\n\n    public SetupStatus getSetupStatus() { return setupStatus; }\n\n    public void setSetupStatus(SetupStatus setupStatus) { this.setupStatus = setupStatus; }\n\n    public boolean isSsoInstance() {\n        return ssoInstance;\n    }\n\n    public void setSsoInstance(boolean ssoInstance) {\n        this.ssoInstance = ssoInstance;\n    }\n\n    public String getVersion() { return version; }\n\n    public void setVersion(String version) { this.version = version; }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a587f04c-b520-4cdc-94f3-2160b6872789","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":103,"endLine":122,"content":"oken = CryptHandler.getInstance().decrypt(baseTokenDetail.getRefreshToken());\n        return tokenCallToSalesforce(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n    }\n\n    private SalesforceToken generateToken(PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret, String refreshToken) throws SystemException, IOException {\n        return tokenCallToSalesforce(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n    }\n\n    private SalesforceToken tokenCallToSalesforce(PNPConnectionsInfo pnpConnectionsInfo, String clientId, String clientSecret, String refreshToken) throws IOException {\n        String loginBaseUrl = loginUrl(pnpConnectionsInfo);\n        Map<String, Object> headers = Maps.newHashMap();\n        headers.put(CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n        HttpResponse response = httpUrlConnectionUtils.post(String.format(ACCESS_TOKEN_URL, loginBaseUrl, clientId, clientSecret, refreshToken), headers, StringUtils.EMPTY);\n        int status = response.getResponseCode();\n        if (status != HttpStatus.SC_OK) {\n            String errorMessage = response.getErrMsg();\n            LOGGER.error(\"Token generation failed tId:{} connectionId:{} Response:{} Status: {}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId(), response.getRespMsg(), response.getResponseCode());\n            throw new SystemException(errorMessage);\n        } else {\n            SalesforceToken salesforceToken = OBJECT_MAPPER.readVal","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9248c9d8-0b9e-4be3-af20-2354eb77c7cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":165,"endLine":190,"content":"ken.getId();\n        boolean result = false;\n        try {\n            if (sfdcTokenId != null) {\n                Map<String, Object> headers = Maps.newConcurrentMap();\n                headers.put(\"Authorization\", \"Bearer \" + salesforceToken.getAccessToken());\n                HttpResponse response = httpUrlConnectionUtils.get(sfdcTokenId, headers, null);\n                if (response.getResponseCode() != HttpStatus.SC_OK) {\n                    LOGGER.error(\"Exception in token validation tId:{} connectionId:{} connectionName:{} with response: {}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getConnectionName(), response.getRespMsg());\n                    return false;\n                } else {\n                    JsonNode jsonObject = OBJECT_MAPPER.readValue(response.getRespMsg(), JsonNode.class);\n                    JsonNode urls = jsonObject.get(\"urls\");\n                    String restUrl = urls.get(\"rest\").asText();\n                    String sobjectsUrl = urls.get(\"sobjects\").asText();\n                    if (StringUtils.isNoneBlank(restUrl, sobjectsUrl)) {\n                        result = true;\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in token validation tId:{} connectionId:{} connectionName:{}\", pnpConnectionsInfo.getTenantId(), pnpConnectionsInfo.getConnectionId(), pnpConnectionsInfo.getConnectionName(), e);\n            return false;\n        }\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a41245fa-1cf5-4ded-bbba-47b80e502295","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/AuthAttributes.java","startLine":1,"endLine":5,"content":"package com.gainsight.integration.bean.metadata.engine;\n\npublic interface AuthAttributes {\n    String type();\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"830b3b13-e7cb-4022-aee7-6bce916cfda9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":118,"endLine":142,"content":");\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n            String url = salesforceToken.getInstanceURL() + SALESFORCE_SERVICE_DATA + sfdcApiVersion +\n                    String.format(SALESFORCE_CREATE_BATCH, sfdcJobId);\n            HttpResponse response = httpUrlConnectionUtils.post(url, headers, query);\n            Document batchDetails = UCXMLUtility.convertStringToXMLDocument(response.getRespMsg());\n            if (response.getResponseCode() == HttpStatus.SC_CREATED) {\n                String batchIdNode = UCXMLUtility.getElementValueById(batchDetails, \"id\");\n                if (batchIdNode == null) {\n                    throw new Exception(response.getErrMsg());\n                }\n                return batchIdNode;\n            } else {\n                String errorMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                throw new Exception(errorMessage);\n            }\n        } catch (SystemException e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcBatchInJobV2(sfdcJobId, pnpConnectionsInfo, clientId, clientSecret, refreshToken, ++retryCount, sfdcApiVersion, query);\n            }\n            throw e;\n        } catch (Exception e) {\n            if (retryCount < RETRY_COUNT) {\n                return createSfdcBatchInJobV2(sfdcJobId, pnpConnectionsInfo, clientI","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8a50075d-8561-4a55-992a-b2cef3d9fe02","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditDetails.java","startLine":96,"endLine":144,"content":"e attribute/sub-attribute\n   */\n  public void setNewValue(String newValue) {\n    this.newValue = newValue;\n  }\n\n  /**\n   * @return returns operationType (CRUD) for this change\n   */\n  public AuditOperationType getOperationType() {\n    return operationType;\n  }\n\n  /**\n   * @param operationType the operationType (CRUD)\n   */\n  public void setOperationType(AuditOperationType operationType) {\n    this.operationType = operationType;\n  }\n\n  /**\n   * @return returns the additional information.\n   */\n  public String getAdditionalInfo() {\n    return additionalInfo;\n  }\n\n  /**\n   * @param additionalInfo the additional information needs to\n   *                       be stored with the change values,\n   *                       For Ex. target column name or\n   *                       field Identifier.\n   */\n  public void setAdditionalInfo(String additionalInfo) {\n    this.additionalInfo = additionalInfo;\n  }\n\n  @Override\n  public String toString() {\n    return \"AuditDetails{\" +\n        \"attributeType=\" + attributeType +\n        \", subAttributeType=\" + subAttributeType +\n        \", oldValue='\" + oldValue + '\\'' +\n        \", newValue='\" + newValue + '\\'' +\n        \", operationType='\" + operationType + '\\'' +\n        \", additionalInfo='\" + additionalInfo + '\\'' +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"678e3f65-9eca-497d-b9e6-81542af604be","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/SfdcChangeEventDto.java","startLine":139,"endLine":163,"content":"[\n         * \"AnnualRevenue\",\n         * \"Description\",\n         * \"LastModifiedDate\"\n         * ],\n         * \"changeOrigin\":\"com/salesforce/api/soap/51.0;client=SfdcInternalAPI/\",\n         * \"transactionKey\":\"00074009-33dd-781b-b200-de6aee93a53a\",\n         * \"commitTimestamp\":1618860406000,\n         * \"recordIds\":[\n         * \"0014x00000Et6JFAAZ\"\n         * ]\n         */\n        private long commitNumber;\n        private String commitUser;\n        private long sequenceNumber;\n        private String entityName;\n        private String changeType;\n        private List<String> changedFields;\n        private String changeOrigin;\n        private String transactionKey;\n        private long commitTimestamp;\n        private List<String> recordIds;\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"30c02dab-cd72-424f-8c0e-dc0d0c908aa9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":584,"endLine":608,"content":"URI.create(getRecordsRequest.getQuery()));\n        List<Map<String, Object>> records = Lists.newArrayList();\n        List<ClientEntity> clientEntityList = clientEntitySet.getEntities();\n        for(ClientEntity clientEntity: clientEntityList){\n            Map<String, Object> record = Maps.newHashMap();\n            for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                if(clientProperty.hasPrimitiveValue()){\n                    String name = clientProperty.getName();\n                    Object value = clientProperty.getValue().asPrimitive().toValue();\n                    record.put(name, value);\n                }\n            }\n            records.add(record);\n        }\n        return new RecordsResponse(records, null, null, records.size());\n    }\n\n    @Override\n    public Map<String, Object> loadSingleRecord(DuctDataOperation ductDataOperation, String targetObject, List<ColumnMapping> columnMappings,\n                                                String[] headers, String[] data, Map<String, ObjectDefinition> objectAttributes, String accessToken,\n                                                Map<String, String> lookupProjectionToNavigationProperty, Map<String, String> entityLogicalNameToPluralName) throws Exception {\n        Map<String, Object> result = new HashMap<>();\n        CloseableHttpClient httpClient = null;\n        try {\n            LOGGER.info(\"Loading record to entity: {} with operation: {}\", targetObject, ductDataOperation.getDuctDat","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a18cbcd-5888-40dd-844c-5e10bf1273b9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":438,"endLine":461,"content":"fo.getJsonPath()) ) {\n                            fields.add(\"CONVERT_TIMEZONE('\" + ntz_map.get(fieldInfo.getJsonPath()) + \"', 'UTC', \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\") AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                        } else {\n                            fields.add(\"CONVERT_TIMEZONE('UTC', \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\") AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                        }\n                    } else {\n                        fields.add(\"\\\"\" + fieldInfo.getJsonPath() + \"\\\" AS \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\"\");\n                    }\n                });\n\n               String query = \"Select \" + StringUtils.join(fields, \", \") + \" from \" + \"\\\"\" + this.db + \"\\\".\" + \"\\\"\" + this.schema + \"\\\".\" + \"\\\"\" + objectName + \"\\\"\" + filter + \" limit \" + limit + \" offset \" + offset;\n                LOGGER.info(\"Snowflake fallback select query {} \", query);\n                stat.setFetchSize(fetchSize);\n                resultSet = stat.executeQuery(query);\n                LOGGER.info(\"query executed successfully\");\n                while (resultSet.next()) {\n                    shouldContinue = true;\n                    int columnCount = resultSet.getMetaData().getColumnCount();\n                    Map map = new HashMap();\n\n                    for (int i = 0; i < columnCount; ++i) {\n                        Object object = resultSet.getObject(i + 1);\n                        if (object == null) {\n                            object =","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4dcc2e7a-654e-4338-a772-389400994024","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/DataTypeMappings.java","startLine":38,"endLine":81,"content":"tebackFormat = writebackFormat;\n    }\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getExternalDatatype() {\n        return externalDatatype;\n    }\n\n    public void setExternalDatatype(String externalDatatype) {\n        this.externalDatatype = externalDatatype;\n    }\n\n    public com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType getDatahighwayDatatype() {\n        return datahighwayDatatype;\n    }\n\n    public void setDatahighwayDatatype(com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType datahighwayDatatype) {\n        this.datahighwayDatatype = datahighwayDatatype;\n    }\n\n    public List<String> getAllowedFilterOperators() { return allowedFilterOperators; }\n\n    public void setAllowedFilterOperators(List<String> allowedFilterOperators) { this.allowedFilterOperators = allowedFilterOperators; }\n\n    public List<String> getAllowedExternalFilterOperators() { return allowedExternalFilterOperators; }\n\n    public void setAllowedExternalFilterOperators(List<String> allowedExternalFilterOperators) { this.allowedExternalFilterOperators = allowedExternalFilterOperators; }\n\n    public Integer getDecimalPlaces() {\n        return decimalPlaces;\n    }\n\n    public void setDecimalPlaces(Integer decimalPlaces) {\n        this.decimalPlaces = decimalPlaces;\n    }\n\n    public DataType getGainsightDatatype() { return gainsightDataty","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0ff9d18d-d48e-409c-8334-03cb3a52f06d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":87,"endLine":97,"content":"s.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n                }\n                break;\n            case MEETING:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"stri","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a34388f7-f2eb-4ccc-8e48-8fa77434ab52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":853,"endLine":880,"content":"                   record.put(projection, value);\n                        }\n                    }\n                } else {\n                    if (multiPicklistColumns.contains(clientProperty.getName())) {\n                        record.put(clientProperty.getName(), replaceMPSeperator(value));\n                    } else {\n                        record.put(clientProperty.getName(), value);\n                    }\n                }\n            }\n            if (CollectionUtils.isNotEmpty(expandGroup)) {\n                extractLookUpValue(expandGroup, clientEntity, record, modifiedProjectionToOriginalProjections, isPrimitiveDateTimeConversionRequired, multiPicklistColumns);\n            }\n            recordResponseGenerator.addRecordsForParquetFile(record);\n        }\n    }\n\n    // Change multi picklist seperator from ,(Comma) to ;(Semicolon)\n    private Object replaceMPSeperator(Object value) {\n        return Objects.isNull(value) ? null : value.toString().replaceAll(COMMA, SEMICOLON);\n    }\n\n    private Map<String, Map<Integer, String>> prepareOptionsetMap(MSDynamicsObject msDynamicsObject, Set<String> projections) {\n        List<Column> columnList = msDynamicsObject.getColumns().stream().filter(column -> projections.contains(column.getLogicalName())).collect(Collectors.toList());\n        Map<String, Map<Integer, String>> optionSetMap = Maps.newHashMap();\n        for (Column column : columnList) {\n            if (column.getExternalType() == ExternalDataType.PICKLIST || column.get","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32d7f17e-26db-43d7-9a57-84de6af0ba6a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":736,"endLine":757,"content":"header))\n                            .map(Map.Entry::getValue)\n                            .map(value -> String.format(ODATA_BIND, value))\n                            .collect(Collectors.toList());\n                    requestMap.keySet().removeIf(otherLookupProjectionsOfSameField::contains);\n\n                    lookupFieldToValueMap.put(columns[0], data);\n                    requestMap.put(String.format(ODATA_BIND, lookupProjectionToNavigationProperty.get(header)),\n                            (null == data) ? null : String.format(ODATA_BIND_VALUE, entityLogicalNameToPluralName.getOrDefault(columns[1], columns[1] + \"s\"), data)\n                    );\n                } else if ((null != lookupFieldToValueMap.get(columns[0]) && null != data)) {\n                    LOGGER.error(\"{} conflicts across multiple targets. Hence Failing the record\", columns[0]);\n                    throw new SystemException(columns[0] + \" Conflicts across multiple targets\");\n                }\n            } else {\n                Optional<GSFieldDefinition> gsFieldDefinitionOptional = objectDefinition.getFields().stream().filter(field -> field.getFieldName().equals(header)).findFirst();\n                if (!gsFieldDefinitionOptional.isPresent()) {\n                    LOGGER.error(\"Field: {} not found\", header);\n                    throw new SystemException(DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND, HttpStatus.SC_BAD_REQUEST);\n                }\n\n                switch (gsFieldDefinitionOptional.get(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c77e54eb-c4da-4550-b56f-754787b51fff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":124,"endLine":152,"content":"Value(bodyDetail, value));\n            }\n\n      stringEntity = new StringEntity(concatenatedEntities.toString());\n    }\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(metadataApiConfigAttributes, metadataEngineConfig,\n        objectName, pnpConnectionsInfo, queryParams, flattenConnectionInfo, paginationInfo, stringEntity);\n        if(!ObjectUtils.isEmpty(metadataApiConfigAttributes.getBodyFormat()) && metadataApiConfigAttributes.getBodyFormat().equals(BodyFormat.URLENCODED)) {\n            List<NameValuePair> nameValuePairs = new ArrayList<>();\n            Iterator<String> keys = concatenatedEntities.keys();\n\n            while (keys.hasNext()) {\n                String key = keys.next();\n                String value = concatenatedEntities.getString(key);\n                nameValuePairs.add(new BasicNameValuePair(key, value));\n            }\n            ((HttpPost) httpClientForApiCall).setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        }\n\n    for (AuthApiAttributes headerDetail : authDetails.getHeaderDetails()) {\n      Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n      if (value == null)\n        throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n      httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n    }\n\n    if (metadataApiConfigAttributes.getHeaderDetails() != null) {\n      for (AuthAp","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"151272fb-cf77-44b3-bbb6-8bbfa83f06df","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditProperties.java","startLine":1,"endLine":14,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.audit;\n\nimport java.io.Serializable;\n\n/**\n * Created by vgautam on 15/11/16.\n */\npublic class AuditProperties implements Serializable{\n  private static final long serialVersionUID = -1L;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6f8b2819-a2bf-40e0-909f-0c6df34fb625","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/audit/AuditData.java","startLine":113,"endLine":121,"content":"\"AuditData{\" +\n        \"entityID='\" + entityID + '\\'' +\n        \", entityName='\" + entityName + '\\'' +\n        \", auditLogEntityType=\" + auditEntityType +\n        \", connectorType=\" + connectorType +\n        \", auditDetailsList=\" + auditDetailsList +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e543ad46-68f0-4470-adb3-48325e17a8c2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":245,"endLine":275,"content":"stFactory().getEntityRequest(absoluteUri);\n    // odata4 sample/server limitation not handling metadata=full\n    request.setAccept(\"application/json;odata.metadata=minimal\");\n    ODataRetrieveResponse<ClientEntity> response = request.execute(); \n      \n    return response.getBody();\n  }\n  \n  private ClientEntity loadEntity(String path) throws ODataDeserializerException, FileNotFoundException {\n    InputStream input = new FileInputStream(path);\n    return client.getBinder().getODataEntity(client.getDeserializer(ContentType.APPLICATION_JSON).toEntity(input));\n  }\n\n  public ClientEntity createEntity(Edm edm, String serviceUri, String entitySetName, ClientEntity ce) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).build();\n    return createEntity(edm, absoluteUri, ce);\n  }\n\n  private ClientEntity createEntity(Edm edm, URI absoluteUri, ClientEntity ce) {\n    ODataEntityCreateRequest<ClientEntity> request = client.getCUDRequestFactory()\n      .getEntityCreateRequest(absoluteUri, ce);\n    // odata4 sample/server limitation not handling metadata=full\n    request.setAccept(\"application/json;odata.metadata=minimal\");\n    ODataEntityCreateResponse<ClientEntity> response = request.execute(); \n      \n    return response.getBody();\n  }\n\n  public int updateEntity(Edm edm, String serviceUri, String entityName, Object keyValue, ClientEntity ce) {\n    URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entityName)\n      .appen","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a084f2a3-5de9-4a54-8114-3fc25ea91a48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelFactory.java","startLine":76,"endLine":107,"content":";\n    }\n\n    public String getAccessToken(String clientId, String clientSecret, String refreshToken) throws Exception {\n        String accessToken = null;\n        int retryCount = 3;\n        while (retryCount-- > -1) {\n            try {\n                CloseableHttpClient httpclient = HttpClients.createDefault();\n//            HttpPost httpPost = new HttpPost(new Hubspot20Api().getAccessTokenEndpoint());\n                HttpPost httpPost = new HttpPost(\"https://api.hubapi.com/oauth/v1/token\");\n\n                httpPost.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                httpPost.setHeader(\"charset\", \"UTF-8\");\n\n                List<NameValuePair> params = new ArrayList<>(4);\n                params.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n                params.add(new BasicNameValuePair(\"client_id\", clientId));\n                params.add(new BasicNameValuePair(\"client_secret\", clientSecret));\n                params.add(new BasicNameValuePair(\"refresh_token\", refreshToken));\n\n                httpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\n                HttpResponse response = httpclient.execute(httpPost);\n                HttpEntity entity = response.getEntity();\n\n                String jsonResponse;\n                Map<String, Object> accountMap;\n\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    if (entity != null) {\n                        InputStream inputSt","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d6907332-0023-48e2-8382-3e86e65154d2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":147,"endLine":171,"content":"e());\n      httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n    }\n\n    if (metadataApiConfigAttributes.getHeaderDetails() != null) {\n      for (AuthApiAttributes headerDetail : metadataApiConfigAttributes.getHeaderDetails()) {\n        Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n        if (value == null)\n          throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n        httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n      }\n    }\n    return httpClientForApiCall;\n  }\n\n  @Override\n  public HttpRequestBase getHttpClientForPostAuthorization(MetadataEngineConfig metadataEngineConfig,\n                                                           PNPConnectionsInfo pnpConnectionsInfo, Map<String, Object> flattenConnectionInfo,\n                                                           Map<String, Object> paginationInfo) throws Exception {\n    List<AuthDetails> authInfo = metadataEngineConfig.getAuthInfo();\n    Optional<AuthDetails> authDetailsOp = authInfo.stream().filter(i -> AuthorizationType.getAuthorizationType(pnpConnectionsInfo.getAuthorizationType()).equals(AuthType.getAuthType(i.getAuthType()))).findFirst();\n    AuthDetails authDetails;\n    if (!authDetailsOp.isPresent())\n      throw new Exception(\"Auth Type not present\");\n    authDetails = authDetailsOp.g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04b18707-d193-4061-a323-09006f3c5676","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/factory/ODataHttpConfig.java","startLine":32,"endLine":77,"content":"ure;\n\npublic class ODataHttpConfig extends AbstractOAuth2HttpClientFactory {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ODataHttpConfig.class);\n\n    private ObjectNode token;\n\n    public AuthenticationResult getAuthenticationResult() {\n        return authenticationResult;\n    }\n\n    private AuthenticationResult authenticationResult;\n\n    public ODataHttpConfig() {\n        super(URI.create(MSDynamicsContext.getAuthority() + \"/oauth2/authorize\"), URI.create(MSDynamicsContext.getAuthority() + \"/oauth2/token\"));\n    }\n\n    @Override\n    protected boolean isInited() throws OAuth2Exception {\n        return token != null;\n    }\n\n    private void fetchAccessToken(final DefaultHttpClient httpClient, final List<BasicNameValuePair> data) {\n        token = null;\n        InputStream tokenResponse = null;\n        try {\n            final HttpPost post = new HttpPost(oauth2TokenServiceURI);\n            post.setEntity(new UrlEncodedFormEntity(data, \"UTF-8\"));\n\n            final HttpResponse response = httpClient.execute(post);\n\n            tokenResponse = response.getEntity().getContent();\n            LOGGER.debug(\"tokenResponse:{}\", tokenResponse);\n            token = (ObjectNode) new ObjectMapper().readTree(tokenResponse);\n        } catch (Exception e) {\n            throw new OAuth2Exception(e);\n        } finally {\n            IOUtils.closeQuietly(tokenResponse);\n        }\n    }\n\n    @Override\n    public void init() throws OAuth2Exception {\n        try {\n            i","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f74bbab4-2003-4b91-92f9-8ef836979e1a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/GainsightModelChangeEventDTO.java","startLine":1,"endLine":62,"content":"package com.gainsight.integration.rts.dto;\n\nimport com.gainsight.integration.rts.constants.RealTimeConstants;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.codehaus.jackson.map.ObjectMapper;\n\nimport java.util.*;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.COMPANY_PERSON_OBJECT_NAME;\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.PERSON_OBJECT_NAME;\n\n/**\n * @author puneetsaluja\n * @created 26/08/22\n */\n@Getter\n@Setter\n@ToString\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightModelChangeEventDTO implements ChangeEventDto {\n    private String tenantId;\n\n    private String objectGroupType;\n\n    private String dataStoreType;\n\n    private String objectName;\n\n    private String auditTableName;\n\n    private String metaInfoId;\n\n    private long fromOffSet;\n\n    private long toOffSet;\n\n    private long eventProcessed;\n\n    private String s3FileUrl;\n\n    private FieldTrackingModuleHistory fieldTrackingModuleHistoryDetails;\n\n    private Date syncTime;\n\n    private String json_sub_type = \"gs_model\";\n\n    private String messageId;\n\n    private String xrequestId;\n\n    private String moduleName;\n\n    private String executionId;\n\n    @Override\n    public String fetchChangeType() {\n        String operationPrefix = \"MODEL_\";\n        if(RealTimeConstants.PEOPLE_MODULE_NAME.equ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43bafcab-9d08-43ba-bae7-756e8d3a181b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/enums/UCChannelStatus.java","startLine":1,"endLine":5,"content":"package com.gainsight.integration.rts.enums;\n\npublic enum UCChannelStatus {\n    ENABLED, DISABLED\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33069553-982a-486a-b114-fd0cb009adfb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":685,"endLine":724,"content":"Exception exception) {\n            LOGGER.error(String.format(\"[HUBSPOT] Unable to get association for object: %s \", object), exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return pipelineMappings;\n    }\n\n    @Override\n    public void close() {\n        try {\n            this.httpclient.close();\n        } catch (Exception exception) {\n            LOGGER.warn(\"[HUBSPOT] Unable to close HTTP Client\", exception);\n        }\n    }\n\n    private URIBuilder getUriForEntity(String entityName, boolean metadataPath) throws Exception {\n        String url;\n        URIBuilder uriBuilder;\n        if (metadataPath) {\n            url = BASE_API_URL + GSHubSpotEntityEnum.getLegacyMetaDataApiPath(GSHubSpotEntityEnum.getInstance(entityName));\n        } else {\n            url = BASE_API_URL + GSHubSpotEntityEnum.getLegacyDataApiPath(GSHubSpotEntityEnum.getInstance(entityName));\n        }\n\n        uriBuilder = getUriBuilder(url);\n        return uriBuilder;\n    }\n\n    private URIBuilder getUriForEntityLatest(String entityName, boolean metadataPath, String nextPageUrl, String api)\n            throws Exception {\n        String url;\n        URIBuilder uriBuilder;\n        if (StringUtils.isNotEmpty(nextPageUrl)) {\n            url = nextPageUrl;\n        } else if (api == null) {\n            if (metadataPath) {\n                url = BASE_API_URL + GSHubSpotEntityEnum\n                        .getLatestMetaDataApiPath(GSHubSpo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"01f7f1db-ba22-4277-b2ec-b59f6adf5c29","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":273,"endLine":303,"content":"     }\n            String filer;\n            if (StringUtils.isNotEmpty(filer = msDynamicsObjectQuery.buildFilter())) {\n                absoluteUri.filter(filer);\n            }\n        } else {\n            absoluteUri.select(MSDynamicsObjectQuery.FIELDS_MAPPING.values().toArray(new String[0]));\n        }\n        URI uri = absoluteUri.build();\n        List<Map<String, Object>> entities;\n        try {\n            entities = readEntities(client, uri, false, false);\n        } catch (IOException e) {\n            LOGGER.error(\"Failed while fetching entities\", e);\n            throw new SystemException(AdapterErrorMessages.FAILED_FETCHING_ENTITIES.getTranslatedMessage());\n        }\n        if (CollectionUtils.isEmpty(entities)) {\n            return Collections.emptyList();\n        }\n        List<MSDynamicsObject> objects = Lists.newArrayListWithExpectedSize(entities.size());\n        for (Map<String, Object> entity : entities) {\n            objects.add(parseObject(entity));\n        }\n        Collections.sort(objects, Comparator.comparing(MSDynamicsObject::getLogicalName));\n        return objects;\n    }\n\n    @Override\n    public OptionSet describeOptionSet(String objectLogicalName, String columnLogicalName) {\n        GainsightPrecondition.isNotBlank(objectLogicalName, DynamicsErrorCode.PNP_DYNAMICS_OBJECT_LOGICAL_NAME_MISSING, HttpStatus.SC_BAD_REQUEST);\n        GainsightPrecondition.isNotBlank(columnLogicalName, DynamicsErrorCode.PNP_DYNAMICS_COLUMN_LOGICAL_NAME_MISSING, HttpStatus.SC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"646a3526-4a6f-41f5-be3f-f556ad96d29a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":29,"endLine":62,"content":"port java.io.IOException;\nimport java.sql.Date;\nimport java.sql.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.time.temporal.ChronoField;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.utils.common.UCConstants.GSIntegration.*;\nimport static com.gainsight.integration.utils.common.UCConstants.JSON;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\n\n\npublic class GainsightSnowflakeChannelServiceImpl implements GainsightSnowflakeChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightSnowflakeChannelServiceImpl.class);\n    private static final String SNOWFLAKE_BASE_URL = \"jdbc:snowflake://\";\n    private static final String CLIENT_SESSION_KEEP_ALIVE = \"CLIENT_SESSION_KEEP_ALIVE\";\n    private static final String DB = \"db\";\n    private static final String SCHEMA = \"schema\";\n    private static final String USER = \"user\";\n    private static final String AUTHENTICATOR = \"authenticator\";\n    private static final String QUOTES = \"\\\"\";\n    private static final String DOT = \".\";\n    private static final String USERNAME =\"username\";\n    private static final String ACCESS_TOKEN_KEYWORD = \"access_token\";\n    private static final String EXPIRES_IN_KEYWORD = \"expires_in\";\n    private Connection connection;\n    pr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"482c27bf-40f6-4685-9916-63f9da24211f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/SortDirection.java","startLine":1,"endLine":6,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\npublic enum SortDirection {\n    DESCENDING,\n    ASCENDING\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05d03788-a5b6-48bc-9be9-874018bb6012","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/ActionType.java","startLine":1,"endLine":41,"content":"package com.gainsight.integration.bean.enums.common;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonCreator;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum ActionType {\n    PAUSE(\"PAUSE\"),\n    RESUME(\"RESUME\"),\n    DEACTIVATE(\"DEACTIVATE\"),\n    ACTIVATE(\"ACTIVATE\");\n\n    private String value;\n\n    ActionType(String value) {\n        this.value = value;\n    }\n\n    /**\n     * Pre-populate the ActionType status map for performance.\n     */\n    private static final Map<Object, ActionType> ACTION_TYPE_MAP = new HashMap<>();\n\n    static {\n        for (ActionType actionType : values()) {\n            ACTION_TYPE_MAP.put(actionType.value.toUpperCase(), actionType);\n        }\n    }\n\n    @JsonCreator\n    @com.fasterxml.jackson.annotation.JsonCreator\n    public static ActionType getActionType(String actionType) {\n        if (StringUtils.isEmpty(actionType)) {\n            return null;\n        }\n        return ACTION_TYPE_MAP.get(actionType.toUpperCase());\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de201ccf-a551-4192-b7f4-87a02f150b3f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":759,"endLine":787,"content":"        semicolonSeparatedValues.append(optionSetMap.get(name).get(Integer.parseInt(itemValue)));\n                        semicolonSeparatedValues.append(\";\");\n                    }\n                    if (multiSelectPicklistItems.length > 0) {\n                        semicolonSeparatedValues.deleteCharAt(semicolonSeparatedValues.length() - 1);\n                    }\n                    return semicolonSeparatedValues.toString();\n                }\n                //Picklist, State or Status\n                return optionSetMap.get(name).get(value);\n            } else {\n                EdmPrimitiveTypeKind valueTypeKind = clientProperty.getValue().asPrimitive().getTypeKind();\n                if (valueTypeKind == EdmPrimitiveTypeKind.DateTimeOffset || valueTypeKind == EdmPrimitiveTypeKind.Date) {\n                    return extractDateTime(clientProperty, valueTypeKind, isPrimitiveDateTimeConversionRequired);\n                } else {\n                    return clientProperty.getValue().asPrimitive().toValue();\n                }\n            }\n        }\n        if (clientProperty.getValue().isCollection()) {\n            ClientCollectionValue clientCollectionValue = clientProperty.getValue().asCollection();\n            return clientCollectionValue.asJavaCollection();\n        }\n        return null;\n    }\n\n    private Object extractDateTime(ClientProperty clientProperty, EdmPrimitiveTypeKind valueTypeKind, boolean isPrimitiveDateTimeConversionRequired) {\n        Object value = null;\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"93b721a3-8027-4557-b650-b2473fdd2436","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataService.java","startLine":22,"endLine":25,"content":"   String[] headers, String[] data, Map<String, ObjectDefinition> objectAttributes,\n                                         String accessToken, Map<String, String> lookupProjectionToNavigationProperty,\n                                         Map<String, String> entityLogicalNameToPluralName) throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79359593-793f-4e38-bce8-68b5ad2c9ede","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":191,"endLine":211,"content":"tringEntity stringEntity = new StringEntity(concatenatedEntities.toString());\n\n    HttpRequestBase httpClientForApiCall = createHttpClient(authDetails, metadataEngineConfig, null, pnpConnectionsInfo, queryParams, flattenConnectionInfo, paginationInfo, stringEntity);\n\n    for (AuthApiAttributes headerDetail : authDetails.getHeaderDetails()) {\n      Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n      if (value == null)\n        throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n      httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n    }\n    return httpClientForApiCall;\n  }\n\n  @Override\n  public Object getAccessDeatils(AuthDetails tokenGenerationDetails, PNPConnectionsInfo pnpConnectionsInfo, MetadataEngineConfig metadataEngineConfig, Map<String, Object> flattenConnectionInfo, String responceKey) throws Exception {\n    LOGGER.info(\"Started Generation of accessToken for connectorType: {} , connectionId : {}\", pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.getConnectionId()); // need to delete this line\n    MetadataEngineService metadataEngineService = new MetadataEngineServiceImpl();\n    Map<String, String> queryParams = new HashMap<>();\n    if (tokenGenerationDetails.getQueryParamDetails() != null) {\n      for (AuthApiAttributes queryParamDetail : tokenGenerationDetails.getQueryParamDetails()) {\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f200833f-8041-4918-9439-a76ba7808170","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":59,"endLine":79,"content":"lientSecret, String refreshToken,\n                                int retryCount, String sfdcApiVersion, String objectName) {\n        try {\n            LOGGER.info(\"Creating job in salesforce\");\n            SalesforceToken salesforceToken = sfdcTokenUtil.accessToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            Map<String, Object> headers = Maps.newHashMap();\n            headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);\n            headers.put(X_SFDC_SESSION, salesforceToken.getAccessToken());\n            headers.put(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON);\n            HttpResponse response = httpUrlConnectionUtils.post(salesforceToken.getInstanceURL() +\n                            SALESFORCE_SERVICE_DATA + sfdcApiVersion + SALESFORCE_CREATE_JOB, headers,\n                    createBulkJobForQuery(objectName));\n            if (response.getResponseCode() == HttpStatus.SC_CREATED) {\n                SalesforceJob salesforceJobInfo = SfdcTokenUtil.OBJECT_MAPPER.readValue(response.getRespMsg(), SalesforceJob.class);\n                return salesforceJobInfo.getId();\n            } else {\n                String exceptionMessage = SFDCExceptionUtility.errorMessageExtraction(response);\n                String errorCode = SFDCExceptionUtility.errorCodeExtraction(exceptionMessage);\n                Pattern pattern = Pattern.compile(OBJECT_PATTERN);\n                Matcher matcher = pattern.matcher(exceptionMessage);\n                if (matche","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"62721923-180b-445b-9c42-b691ccd9db09","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":54,"endLine":89,"content":"DHUtils.wrapRoundBrackets;\n\n\npublic class GainsightBigQueryChannelServiceImpl implements GainsightBigQueryChannelService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GainsightBigQueryChannelServiceImpl.class);\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    private static final String SCOPE = \"https://www.googleapis.com/auth/bigquery\";\n    private static final String MAX_RESULT = \"maxResults\";\n    private static final String PAGE_TOKEN = \"pageToken\";\n    private static final String BQ_JOB_QUERY_SCRIPT = \"{\\n\" +\n            \"    \\\"configuration\\\": {\\n\" +\n            \"        \\\"query\\\": {\\n\" +\n            \"            \\\"query\\\": \\\"%s\\\",\\n\" +\n            \"\\\"useLegacySql\\\" : false \\n\" +\n            \"        }\\n\" +\n            \"    }\\n\" +\n            \"}\";\n    private static final String BQ_QUERY_SCRIPT = \"{\\n\" +\n            \"    \\\"query\\\": \\\"%s\\\",\\n\" +\n            \" \\\"maxResults\\\": %s,\\n\" +\n            \"\\\"useLegacySql\\\" : false \" +\n            \"}\";\n    private static final String BQ_INSERT_SCRIPT =\"{\\n\" +\n            \"    \\\"rows\\\": [\\n\" +\n            \"        {\\n\" +\n            \"            \\\"json\\\":  + %1$s \\n\" +\n            \"        }\\n\" +\n            \"    ]\\n\" +\n            \"}\";\n    private static final String UNIX_MILLIS = \"UNIX_MILLIS\";\n    private static final String OPEN_BRACKET = \"(\";\n    private static final String CLOSE_BRACKET = \")\";\n    private static final String AUTHORIZATION = \"Authorization\";\n    private static final S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd378164-3923-4d39-9565-8b3c232c3cc6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/rts/dto/ChangeEventMessage.java","startLine":1,"endLine":7,"content":"package com.gainsight.integration.rts.dto;\n\n/**\n * marker interface for change event payload type.\n */\npublic interface ChangeEventMessage {\n}\n\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"32432afc-8f7c-4a0a-94f3-bfd694e6297b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksHelper.java","startLine":221,"endLine":232,"content":" access token after {} retries\", DBFS_OPERATIONS_MAX_RETRY_COUNT);\n            throw new SystemException(AdapterErrorMessages.UNABLE_TO_GET_ACCESS_TOKEN_ERROR.getTranslatedMessage());\n        } else {\n            return accessToken;\n        }\n    }\n\n    private static String constructAccessTokenKey(PNPConnectionsInfo pnpConnectionsInfo) {\n        return String.format(\"%s-%s\", RequestContextProvider.getTenantId().replaceAll(UCConstants.FILLER, UCConstants.EMPTY_STRING),\n                pnpConnectionsInfo.getConnectionId().replaceAll(UCConstants.FILLER, UCConstants.EMPTY_STRING));\n    }\n}","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"076c7448-0087-411c-b6a0-a39a72f7a83f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotSchema.java","startLine":45,"endLine":97,"content":"his.requiredProperties = requiredProperties;\n    }\n\n    public List<String> getSearchableProperties() {\n        return searchableProperties;\n    }\n\n    public void setSearchableProperties(List<String> searchableProperties) {\n        this.searchableProperties = searchableProperties;\n    }\n\n    public String getPrimaryDisplayProperty() {\n        return primaryDisplayProperty;\n    }\n\n    public void setPrimaryDisplayProperty(String primaryDisplayProperty) {\n        this.primaryDisplayProperty = primaryDisplayProperty;\n    }\n\n    public List<String> getSecondaryDisplayProperties() {\n        return secondaryDisplayProperties;\n    }\n\n    public void setSecondaryDisplayProperties(List<String> secondaryDisplayProperties) {\n        this.secondaryDisplayProperties = secondaryDisplayProperties;\n    }\n\n    public String getFullyQualifiedName() {\n        return fullyQualifiedName;\n    }\n\n    public void setFullyQualifiedName(String fullyQualifiedName) {\n        this.fullyQualifiedName = fullyQualifiedName;\n    }\n\n    public String getObjectTypeId() {\n        return objectTypeId;\n    }\n\n    public void setObjectTypeId(String objectTypeId) {\n        this.objectTypeId = objectTypeId;\n    }\n\n    public List<GainsightHubspotFieldDescriptionV3> getProperties() {\n        return properties;\n    }\n\n    public void setProperties(List<GainsightHubspotFieldDescriptionV3> properties) {\n        this.properties = properties;\n    }\n\n    public List<Map<String, Object>> getAssociations() {\n        return ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3a2121fc-3cb2-45d9-85ae-4fcd163401ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":23,"endLine":45,"content":"nyId\", \"companyId\", \"string\", \"text\"));\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                }\n                break;\n\n            case CONTACT:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"vid\", \"vid\", \"vid\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"is-contact\", \"is-contact\", \"is-contact\", \"bool\", \"booleancheckbox\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"profile-token\", \"profile-token\", \"profile-token\", \"string\", \"text\"));\n                }\n                break;\n\n            case DEAL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"associations.companies.results[0].id\", \"associatedCompanyIds\", \"associations.companies.results[0].id\", \"string\", \"text\"));\n                } else {\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescr","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0f39d3a-d4df-48c3-967f-c894c2a4ae83","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":484,"endLine":503,"content":"n.getLogicalName() + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(lookupColumn.getLogicalName() + \"._\" + targetColumn.getLogicalName() + \"_value\").add(projection);\n                } else {\n                    expandGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projection);\n                }\n            }\n        }\n        Set<String> expandGroupModified = Sets.newHashSet();\n        if (CollectionUtils.isNotEmpty(expandGroup)) {\n            LOGGER.info(\"tId: {}. Lookup projections present. Getting Many-to-One relationships...\", RequestContextProvider.getTenantId());\n            relationships = msDynamicsSchemaService.listRelationships(msDynamicsObject.getLogicalName(), RelationshipType.MANY_TO_ONE);\n            LOGGER.info(\"tId: {}. Fetched all Many-to-One relationships.\", RequestContextProvider.getTenantId());\n            for (String projection : expandGroup) {\n                String sourceLookupField = StringUtils.substringBefore(projection, \".\");\n                String propertyValue = masterLookUpConfiguration.get(getRecordsRequest.getPluralName() + \"@@\" + sourceLookupField);\n                if (Objects.nonNull(propertyValue)) {\n                    String newExpandProjection = StringUtils.replaceOnce(projection, sourceLookupField, propertyValue);\n                    e","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ccc21b86-4626-40f5-82a6-987f0ea6f36b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/PNPConnectionsInfo.java","startLine":1,"endLine":45,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.db.common;\n\nimport com.gainsight.bean.MongoBaseBean;\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.bean.base.connection.BaseConnectionDetail;\nimport com.gainsight.integration.bean.common.BeanPropertyTracker;\nimport com.gainsight.integration.bean.enums.ConnectionStatus;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.bean.enums.common.SetupStatus;\nimport com.google.common.collect.Maps;\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * Created by :\n * author : Vipin Sharma\n * date : 22/04/16\n */\n@Document(collection = \"connectionrepo\" )\n@CompoundIndexes({@CompoundIndex(\n        name = \"tid_cid_index\",\n        def = \"{'tenantId' : 1, 'connectionId' : 1}\",\n        unique = true\n)})\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class PNPConnectionsInfo  extends MongoBaseBean implements Serializable{\n\n  private static final long serialVersionUID = -1L;\n\n  @Field(\"tenantId\")\n  ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd64784d-412f-47bf-95cf-d7d4aa9cc115","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/metadata/engine/OAuth.java","startLine":1,"endLine":34,"content":"package com.gainsight.integration.bean.metadata.engine;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class OAuth implements AuthAttributes, Serializable {\n    private static final long serialVersionUID = -1l;\n\n    private static final String type = \"OAuth\";\n    private String authApi;\n    private String clientId;\n    private String clientSecret;\n    private String refreshToken;\n    private String accessToken;\n    private List<String> scopes;\n    private String customDomain;\n    private String accessTokenApi;\n    private String userName;\n    private String authKeywordForApi;\n\n    @Override\n    public String type() {\n        return type;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14195701-7c5c-414a-ac00-6a1b7fc734d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":416,"endLine":439,"content":"SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_tz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Started executing query: {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            resultSet = preparedStatement.executeQuery();\n\n            List<Map<String, Object>> recordValues = Lists.newArrayList();\n            int offset = 0;\n            while (true) {\n                boolean shouldContinue = false;\n                List<String> fields = new ArrayList<>();\n                fieldInfoList.stream().forEach(fieldInfo -> {\n                    if (DataType.DATETIME == fieldInfo.getDataType()) {\n                        if (!ntz_fields.isEmpty() && ntz_fields.contains(fieldInfo.getJsonPath()) ) {\n                            fields.add(\"CONVERT_TIMEZONE('\" + ntz_map.get(fieldInfo.getJsonPath()) + \"', 'UTC', \" + \"\\\"\" + fieldInfo.getJsonPath() + \"\\\") AS \" + \"\\\"\" + fieldInfo.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"87e770b6-d6ca-41bb-bb3d-3371d6d3f21b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":138,"endLine":160,"content":"public static final String GROUP_DATA = \"groupData\";\n    public static final String PEOPLE_DATA = \"peopleData\";\n    public static final String EVENT_DATA = \"EVENTDATA\";\n    public static final String ERROR_DATA = \"errorData\";\n    public static final String TENANT_ID = \"\\\"tenantId\\\": \";\n    public static final String PROPERTIES = \"properties.\";\n    public static final String TIMESTAMP_COLUMN = \"\\\"gsTime\\\": \";\n    public static final String STARTING_PEOPLE_ENGAGEMENT_API_CALL_FOR_PROJECT_ID = \"Starting People Engagement Api Call for jobId: \";\n    public static final String COMPLETED_PEOPLE_ENGAGEMENT_API = \"Completed People Engagement Api Call for jobId: \";\n    public static final int HTTP_SUCCESS = 200;\n    public static final String SEGMENT = \"SegmentData\";\n\n    public static final String OPPORTUNITY_COLLECTION_NAME = \"GS Opportunity\";\n    public static final String OPPORTUNITY_STAGE_COLLECTION_NAME = \"GS Opportunity Stage\";\n    public static final String RECORD_TYPE_COLLECTION_NAME = \"GS Record Type\";\n    public static final String PRICEBOOK_COLLECTION_NAME = \"GS Pricebook\";\n    public static final String PRODUCT_COLLECTION_NAME = \"Product\";\n\n    public static final String OPPORTUNITY_OBJECT_NAME = \"gs_opportunity\";\n    public static final String OPPORTUNITY_STAGE_OBJECT_NAME = \"gs_opportunity_stage\";\n    public static final String OPPORTUNITY_LINE_ITEM_OBJECT_NAME = \"gs_opportunity_line_item\";\n    public static final String RECORD_TYPE_OBJECT_NAME = \"GsRecordType\";\n    publ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"305076a1-795c-41db-80a9-60deb0150faa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":896,"endLine":920,"content":"column.getExternalType() == ExternalDataType.MULTISELECTPICKLIST){\n                Map<Integer, String> valueToLabelMap = Maps.newHashMap();\n                OptionSet optionSet = (OptionSet)column.getProperties().get(OPTION_SET_PROPERTY);\n                for(Option option: optionSet.getOptions()){\n                    valueToLabelMap.put(option.getValue(), option.getLabel());\n                }\n                optionSetMap.put(column.getLogicalName(), valueToLabelMap);\n            }\n        }\n        return optionSetMap;\n    }\n\n\n    private void extractLookUpValue(Set<String> expandGroup, ClientEntity ce, Map<String, Object> record, Map<String, Set<String>> modifiedProjectionToOriginalProjections,\n                                    boolean isPrimitiveDateTimeConversionRequired){\n        List<String[]> expandGroupSplitted = expandGroup.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        List<String> lookUpFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[0]).collect(Collectors.toList());\n        List<String> lookUpObjectFieldNames = expandGroupSplitted.stream().map(splitted -> splitted[1]).collect(Collectors.toList());\n        List<ClientLink> clientLinks = ce.getNavigationLinks();\n        for(ClientLink clientLink: clientLinks) {\n            if (!lookUpFieldNames.contains(clientLink.getName())) {\n                continue;\n            }\n            ClientEntity clientEntity = null;\n            if (clientLink.asInlineEntity() != null && c","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08b7145d-1b63-47e3-9bac-59954144c10d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaService.java","startLine":1,"endLine":23,"content":"package com.gainsight.integration.connector.dynamics.service;\n\nimport com.gainsight.bean.gsmeta.ObjectDefinition;\nimport com.gainsight.integration.bean.DataTypeMappings;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.MSDynamicsObject;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.OptionSet;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.Relationship;\nimport com.gainsight.integration.connector.dynamics.bean.metadata.RelationshipType;\nimport com.gainsight.integration.connector.dynamics.bean.query.MSDynamicsObjectQuery;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic interface MSDynamicsSchemaService {\n\n    MSDynamicsObject describeObject(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets);\n    Map<String, Object> extractMetadata(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets);\n    Map<String, Object> extractMetadata(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets, List<String> fields);\n    Map<String, Object> extractMetadataForOnlyRequestedFields(MSDynamicsObjectQuery query, boolean includeColumns, boolean resolveOptionSets, List<String> fields);\n    List<MSDynamicsObject> listAllObjects(MSDynamicsObjectQuery msDynamicsObjectQuery);\n    OptionSet describeOptionSet(String objectLogicalName, String columnLogicalName);\n    List<Relationship> listRelationships(St","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f5522ac-252b-4211-876d-8a04ed191a58","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":256,"endLine":279,"content":".get(UCConstants.GSIntegration.ACCESS_TOKEN).toString());\n                    prop.put(AUTH_MECH, \"11\");\n                    prop.put(AUTH_FLOW, \"0\");\n                    prop.put(AUTH_ACCESS_TOKEN, accessToken);\n                    break;\n                default:\n                    throw new SystemException(String.format(\"Authorisation type %s not supported\", authorizationType));\n            }\n\n            this.dbHost = properties.get(UCConstants.GSIntegration.DATABASE_HOST).toString();\n            String connectionUrl = String.format(DATABRICKS_BASE_URL, this.dbHost);\n\n            if (Objects.nonNull(properties.get(UCConstants.GSIntegration.WAREHOUSE))) {\n                this.wareHouse = properties.get(UCConstants.GSIntegration.WAREHOUSE).toString();\n                prop.put(HTTP_PATH, String.format(WAREHOUSE_HTTP_PATH, wareHouse));\n            } else {\n                this.organizationId = properties.get(UCConstants.GSIntegration.ORGANIZATION_ID).toString();\n                this.clusterId = properties.get(UCConstants.GSIntegration.CLUSTER_ID).toString();\n                prop.put(HTTP_PATH, String.format(COMPUTE_HTTP_PATH, organizationId, clusterId));\n            }\n            prop.put(TRANSPORT_MODE, HttpVersion.HTTP.toLowerCase());\n            prop.put(ENABLE_ARROW, \"0\");\n            if(properties.containsKey(UCConstants.GSIntegration.MTLS_ENABLED) && Boolean.parseBoolean(properties.get(UCConstants.GSIntegration.MTLS_ENABLED).toString())) {\n                LOGGER.info(\"M","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"927ce1ec-2775-482b-afb3-b61087bb0661","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":324,"endLine":344,"content":"p.add(\"_\" + projection + \"_value\");\n                    modifiedProjectionToOriginalProjections.putIfAbsent(\"_\" + projection + \"_value\", Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(\"_\" + projection + \"_value\").add(projections);\n                } else {\n                    selectGroup.add(projection);\n                    modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                    modifiedProjectionToOriginalProjections.get(projection).add(projections);\n                }\n            }\n        }\n\n        //If expanded fields are of type lookup or customer then modify the projection name. This needs to done first before we modify source lookup field in next step.\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_EXPAND))) {\n            for (String projection : selectAndExpandGroup.get(PROJECTION_EXPAND)) {\n                String[] mappedSourceColumns = projection.split(\"\\\\.\");\n                GSFieldDefinition sourceLookupField = objectDefinition.getFields().stream().filter(\n                                gsFieldDefinition -> gsFieldDefinition.getFieldName().equals(mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[1]))\n                        .findFirst().get();\n                String targetObjectOfLookupField = sourceLookupField.getMeta().getLookupDetail().getLookupObjects().get(0).getObjectName();\n\n                ObjectDefinition targetObjectDefinition ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"35aa7b81-8670-49d6-be5e-b513da1acd5a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":97,"endLine":108,"content":"                 gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.calls.results[*].id\", \"Associated Call Ids\", \"associations.calls.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CALL.name()));\n                }\n                break;\n        }\n    }\n\n    private static GainsightHubspotFieldDescription createFieldDescription(String name, String label, String canonicalname, String type, String fieldType) {\n        GainsightHubspotFieldDescripti","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65c3afbd-749f-4f38-a16e-53a07e3dfc36","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":215,"endLine":232,"content":"                       modifiedProjectionToOriginalProjections.get(newExpandProjection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    } else {\n                        String newExpandProjection = projection;\n                        if (mappedSourceColumns.length == 3) {\n                            newExpandProjection = mappedSourceColumns[0] + UCConstants.PERIOD + mappedSourceColumns[2];\n                        }\n                        expandGroupModified.add(newExpandProjection);\n                        modifiedProjectionToOriginalProjections.putIfAbsent(projection, Sets.newHashSet());\n                        modifiedProjectionToOriginalProjections.get(projection).add(modifiedProjectionToOriginalProjections.containsKey(projection) ? Lists.newArrayList(modifiedProjectionToOriginalProjections.get(projection)).get(0) : projection);\n                    }\n                }\n            }\n        }\n\n        List<String> lookupObjectPrimaryKeys = getLookupObjectPrimaryKeys(objectDefinition, getRecordsRequest.getProjections(), relationships, masterLookUpConfiguration, pnpConnectionsInfo,\n                objectDefinitionMap, resolvePicklistOptions, separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.str","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fca9a767-3105-4c92-b4a0-e20fe8073964","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/bean/metadata/MSDynamicsObject.java","startLine":1,"endLine":69,"content":"package com.gainsight.integration.connector.dynamics.bean.metadata;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic class MSDynamicsObject {\n\n    private String objectName;\n    private String pluralName;\n    private String displayName;\n    private String logicalName;\n    private String objectId;\n    private Boolean customObject;\n    private List<Column> columns;\n\n    public String getObjectName() {\n        return objectName;\n    }\n\n    public void setObjectName(String objectName) {\n        this.objectName = objectName;\n    }\n\n    public List<Column> getColumns() {\n        return columns;\n    }\n\n    public void setColumns(List<Column> columns) {\n        this.columns = columns;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public String getPluralName() {\n        return pluralName;\n    }\n\n    public void setPluralName(String pluralName) {\n        this.pluralName = pluralName;\n    }\n\n    public String getObjectId() {\n        return objectId;\n    }\n\n    public void setObjectId(String objectId) {\n        this.objectId = objectId;\n    }\n\n    public Boolean isCustomObject() {\n        return customObject;\n    }\n\n    public void setCustomObject(Boolean customObject) {\n        this.customObject = customObject;\n    }\n\n    public String getLogicalName() {\n        return logicalName;\n    }\n\n\n    public void setLogicalName(String logicalName) {\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e04bede2-b1dc-403c-9a08-57adc9ede050","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":162,"endLine":182,"content":"FETCHING_OBJECT.getTranslatedMessage(), DynamicsErrorCode.PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n        }\n        GainsightPrecondition.assertTrue(CollectionUtils.isNotEmpty(entities), DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND, HttpStatus.SC_NOT_FOUND);\n        Map<String, Object> entity = entities.get(0);\n        LOGGER.info(\"tId: {}. Fetched entity\", RequestContextProvider.getTenantId());\n        return entity;\n    }\n\n    private List<Map<String, Object>> readEntities(ODataClient client, URI absoluteUri, boolean resolveAttributes,\n                                                   boolean resolveOptionSets, List<String> fields) throws IOException {\n        ODataEntitySetRequest<ClientEntitySet> request = client.getRetrieveRequestFactory().getEntitySetRequest(absoluteUri);\n        request.setAccept(\"application/json;odata.metadata=full\");\n        ODataRetrieveResponse<ClientEntitySet> response = request.execute();\n        ClientEntitySet clientEntity = response.getBody();\n        if (CollectionUtils.isEmpty(clientEntity.getEntities())) {\n            return Collections.emptyList();\n        }\n        final List<String> optionSetAttributesMetadata = Lists.newArrayList(\"PicklistAttributeMetadata\", \"StatusAttributeMetadata\", \"StateAttributeMetadata\", \"MultiSelectPicklistAttributeMetadata\");\n        List<Map<String, Object>> objects = Lists.newArrayList();\n        for (ClientEntity entity : clientEntity.getEntities()) {\n            Map<St","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d3b235d3-09f4-48e2-bc9f-e037de74a6a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemFetchService.java","startLine":1,"endLine":17,"content":"package com.gainsight.integration.connector.ecosystem.service;\n\nimport org.apache.http.HttpResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\n\npublic interface GainsightEcosystemFetchService {\n\n    HttpResponse getPaginatedEntityData(String entityName, List<String> projectionList, String apiKey, int pageSize, int pageNumber);\n\n    HttpResponse getPaginatedEntityData(String entityName, List<String> projectionList, String apiKey, Map<String, String> queryParams);\n\n    HttpResponse getPaginatedEntityData(String url, String apiKey, Map<String, String> queryParams);\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"568761ad-0bc4-48a5-bea5-bcbea04f0046","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":227,"endLine":251,"content":"eryParams, flattenConnectionInfo, null, stringEntity);\n\n        if(!ObjectUtils.isEmpty(tokenGenerationDetails.getBodyFormat()) && tokenGenerationDetails.getBodyFormat().equals(BodyFormat.URLENCODED)) {\n            List<NameValuePair> nameValuePairs = new ArrayList<>();\n            Iterator<String> keys = concatenatedEntities.keys();\n\n            while (keys.hasNext()) {\n                String key = keys.next();\n                String value = concatenatedEntities.getString(key);\n                nameValuePairs.add(new BasicNameValuePair(key, value));\n            }\n            ((HttpPost) httpClientForApiCall).setEntity(new UrlEncodedFormEntity(nameValuePairs));\n\n        }\n\n    for (AuthApiAttributes headerDetail : tokenGenerationDetails.getHeaderDetails()) {\n      Object value = constructValueFromConfig(metadataEngineConfig, headerDetail, pnpConnectionsInfo, flattenConnectionInfo);\n      if (value == null)\n        throw new Exception(AdapterErrorMessages.INVALID_VALUE_FOR_REQUIRED_KEYS.getTranslatedMessage());\n      httpClientForApiCall.addHeader(headerDetail.getRequestKey(), getFinalValue(headerDetail, value));\n    }\n    //  doing this change to support the use case where we need the complete response\n        Boolean isXmlResponse = !ObjectUtils.isEmpty(tokenGenerationDetails.getResponseType()) && tokenGenerationDetails.getResponseType().equals(ResponseType.XML);\n    Object value = metadataEngineService.executeApi(httpClientForApiCall, responceKey,\n                metadataEng","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7271cea7-d3c9-4388-92bd-8050c7cbdde6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.cud.ODataDeleteRequest;\nimport org.apache.olingo.client.api.communication.request.cud.ODataEntityCreateRequest;\nimport org.apache.olingo.client.api.communication.request.cud.ODataEntityUpdateRequest;\nimport org.apache.olingo.client.api.communication.request.cud.UpdateType;\nimport org.apache.olingo.client.api.communication.request.retrieve.EdmMetadataRequest;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntityRequest;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetIteratorRequest;\nimport org.apache.olingo.client.api.communication.response.ODataDeleteResponse;\nimport org.apache.olingo.client.api.communication.response.ODataEntityCreateResponse;\nimport org.apache.olingo.client.api.communication.response.ODataEntityUpdateResponse;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.apache.olingo.client.api.domain.*;\nimport org.apache.olingo.commons.api.edm.Edm;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n/**\n * @author vipinsharma\n * @version 1.0\n *\n *\n */\n\n@Service\npublic class GainsightSAPChannelServiceImpl implements GainsightSAPChannelService {\n\n    private s","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"237ad225-0c1f-433a-b3ab-3a56c8b50437","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":54,"endLine":74,"content":"OperatorType operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatusCode.BAD_REQUEST.getStatusCode())).filterOperator;\n    }\n\n    public static String getExternaSystemOperator(OperatorType operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatusCode.BAD_REQUEST.getStatusCode())).gainsightOpertor;\n    }\n\n    public static String getExternaSystemOperator(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(\"Unknown operator type passed\", HttpStatusCode.BAD_REQUEST.getStatusCode())).gainsightOpertor;\n    }\n\n    public static String getSqlClause(FilterOperator operatorType) {\n        return Arrays.stream(Operators.values()).filter(operators -> operators.name().equalsIgnoreCase(operatorType.name()))\n                .findFirst().orElseThrow(() -> new SystemException(String.format(\"Unknown operator type passed %s\", operatorType), HttpStatusCode.BAD_REQUEST.getStatusCode())).sqlOperator;\n    }\n\n    public static String getBQSqlClause(F","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7dc633c2-b7b4-4642-b38c-5f5124e796a0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":309,"endLine":341,"content":"Dao is not updated after token generation\n        return response.get(config.getTokenGenerationDetails().getResponseRootKey());\n      } else {\n        return CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken());\n      }\n    }\n\n    Object value = config.getValue();\n    if (value instanceof List) {\n      List<String> keys = OBJECT_MAPPER.convertValue(value, new TypeReference<List<String>>() {\n      });\n      List<String> actualValues = new ArrayList<>();\n      for (String key : keys) {\n        if (!flattenConnectionInfo.containsKey(key))\n          throw new Exception(\"Provided key not present : \" + key);\n        actualValues.add(flattenConnectionInfo.get(key).toString());\n      }\n      return StringUtils.join(actualValues, config.getJoinString());\n    } else if (value instanceof String) {\n      if (!flattenConnectionInfo.containsKey(value))\n        throw new Exception(\"Provided key not present : \" + value);\n      return flattenConnectionInfo.get(value);\n    } else {\n      throw new Exception(\"Unknown type of value provided : \" + value);\n    }\n  }\n\n  private Object constructValueFromConfig(MetadataEngineConfig metadataEngineConfig, AuthApiAttributes config, PNPConnectionsInfo pnpConnectionsInfo,\n                                          Map<String, Object> flattenConnectionInfo, String baseUrl, String systemToken) throws Exception {\n    if (config.isStatic())\n      return config.getValue();\n\n    if ((config.getTokenGenerationDetails() != null ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33cdab17-2f58-4cd9-b388-3d35f51e388e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":223,"endLine":254,"content":"       \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\", Long.MIN_VALUE);\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> owners = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(owners, \"No data found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity Deal Properties\")\n    @Order(4)\n    void testGetDealProperties() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityProperties(\"DEAL\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> contactMetaData = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(contactMetaData, \"No Metadata found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Paginated Deal Entity Data With Entity Data Model\")\n    @Order(4)\n    void testGetDealsPaginatedEntityDataWithEntityDataModel() throws Exception {\n        boolean hasMore = true;\n        Long offset = Long.MIN_VALUE;\n\n        while(hasMore){\n            InputStream inputStream =  gainsightHubspotFetchService.g","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0685a36a-0a58-405b-ab8e-3f4043bc8caf","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":130,"endLine":176,"content":"SpotEntityEnum entityPath) {\n        return entityPath.legacyDataApiPath;\n    }\n\n    public static String getLegacyDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.legacyDataApiPath;\n    }\n\n    public static String getMetaDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.legacyMetaDataApiPath;\n    }\n\n    public static String getLegacyMetaDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.legacyMetaDataApiPath;\n    }\n\n    public static String getLatestDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.latestDataApiPath;\n    }\n\n    public static String getWriteDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.writeDataApiPath;\n    }\n\n    public static String getWriteDataObjectName(GSHubSpotEntityEnum entityPath) {\n        return entityPath.writeDataObjectName;\n    }\n\n    public static String getLatestMetaDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.latestMetaDataApiPath;\n    }\n\n    public static String getSinceDataApiPath(GSHubSpotEntityEnum entityPath) {\n        return entityPath.sinceDataApiPath;\n    }\n\n\n    public static String getTimeOffsetKeyWord(GSHubSpotEntityEnum entity) {\n        return entity.lastModifiedKeyWord;\n    }\n\n    public static String getQueryOffsetKeyWord(GSHubSpotEntityEnum entity) {\n        return entity.queryOffset;\n    }\n\n    public static String getRetrievOffsetKeyWord(GSHubSpotEntityEnum entity) {\n        return entit","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e974ec76-25e9-4ba2-86ec-c3dce511d6cb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":445,"endLine":476,"content":"&& !failureFiles.isEmpty()) {\n            failureFiles.forEach(failureFile -> FileUtils.deleteQuietly(failureFile));\n            failureFiles.clear();\n          }\n          if(null != successFiles && !successFiles.isEmpty()) {\n            successFiles.forEach(successFile -> FileUtils.deleteQuietly(successFile));\n            successFiles.clear();\n          }\n          throw ex;\n        } finally {\n          dropTable(absolutePathToTempStageTable);\n          absolutePathToTempStageTable = null;\n        }\n      }\n    } catch (IOException e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while reading inputDataFile: {}...\", e.getMessage(), e);\n      throw new SQLException(e.getMessage());\n    } catch (Exception e) {\n      log.error(\"[SAP DATASPHERE] Error occurred while reading inputDataFile: {}...\", e.getMessage(), e);\n      throw new Exception(e.getMessage());\n    } finally {\n      if (StringUtils.isNotEmpty(absolutePathToTempStageTable)) {\n        dropTable(absolutePathToTempStageTable);\n      }\n      closeConnectionQuietly(this.connection, null, null);\n    }\n    return bulkLoadResult;\n  }\n\n  private String createAndLoadDataToStageTable(Map<String, Object> bulkLoadResult, String targetObject, List<ColumnMapping> columnMappings,\n                                                Map<String, String> colNameToDataType, int batchSize, String[] header, List<File> failureFiles,\n                                               List<File> successFiles, CSVReader csvReader) throws Excep","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"29b50e45-d1f9-4215-8d9d-cd68aea77579","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/db/common/InstanceDetail.java","startLine":1,"endLine":64,"content":"package com.gainsight.integration.bean.db.common;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport java.io.Serializable;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class InstanceDetail implements Serializable {\n\n    private static final long serialVersionUID = -8243784903017203823L;\n    private String instanceType;\n    private String instanceId;\n    private String instanceName;\n    private String instanceDomain;\n    private String loginName;\n    private String region;\n    private Long createdDate;\n    private Long modifiedDate;\n\n    public String getInstanceType() {\n        return instanceType;\n    }\n\n    public void setInstanceType(String instanceType) {\n        this.instanceType = instanceType;\n    }\n\n    public String getInstanceId() {\n        return instanceId;\n    }\n\n    public void setInstanceId(String instanceId) {\n        this.instanceId = instanceId;\n    }\n\n    public String getInstanceName() {\n        return instanceName;\n    }\n\n    public void setInstanceName(String instanceName) {\n        this.instanceName = instanceName;\n    }\n\n    public String getInstanceDomain() {\n        return instanceDomain;\n    }\n\n    public void setInstanceDomain(String instanceDomain) {\n        this.instanceDomain = instanceDomain;\n    }\n\n    public String getLoginName() {\n        return loginName;\n    }\n\n    public void setLoginName(String loginName) {\n        this.loginName = loginName;\n    }\n\n    public String getRegion() {\n        return region;\n    }\n\n   ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08779133-57b9-4331-acf7-a25115100af5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":59,"endLine":83,"content":"%s:443\";\n    private static final String WAREHOUSE_HTTP_PATH = \"/sql/1.0/warehouses/%s\";\n    private static final String COMPUTE_HTTP_PATH = \"/sql/protocolv1/o/%s/%s\";\n    private static final String DOT = \".\";\n    private static final String COLUMN_NAME = \"col_name\";\n    private static final String AUTH_MECH = \"AuthMech\";\n    private static final String AUTH_FLOW = \"Auth_Flow\";\n    private static final String OAUTH2_CLIENT_ID = \"OAuth2ClientId\";\n    private static final String OAUTH2_CLIENT_SECRET = \"OAuth2Secret\";\n    private static final String AUTH_ACCESS_TOKEN = \"Auth_AccessToken\";\n    private static final String UID = \"UID\";\n    private static final String PWD = \"PWD\";\n    private static final String TRANSPORT_MODE = \"transportMode\";\n    private static final String HTTP_PATH = \"httpPath\";\n    private static final String SSL = \"SSL\";\n    private static final String SSL_TRUSTSTORE = \"SSLTrustStore\";\n    private static final String SSL_TRUSTSTORE_PWD = \"SSLTrustStorePwd\";\n    private static final String ENABLE_ARROW = \"EnableArrow\";\n    private static final String SSL_KEYSTORE = \"SSLKeyStore\";\n    private static final String SSL_KEYSTORE_PWD = \"SSLKeyStorePwd\";\n    private static final String ALIAS_ROOT = \"root_\";\n    private static final String TRUSTSTORE_FILE_PWD = \"password\";\n    private static final String INSERT_QUERY = \"INSERT INTO %1$s (%2$s) VALUES (%3$s)\";\n    private static final String UPDATE_QUERY = \"UPDATE %1$s SET %2$s WHERE %3$s\";\n    private static final St","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e24d1cc-daa0-4062-9cf3-a74e318c33c3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":1,"endLine":42,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.utils;\n\nimport com.gainsight.bean.account.BaseTokenDetail;\nimport com.gainsight.bean.account.SalesforceToken;\nimport com.gainsight.enums.SalesforceOrgType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.cache.Cache;\nimport com.google.common.cache.CacheBuilder;\nimport com.google.common.collect.Maps;\nimport exception.SystemException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.http.HttpStatus;\nimport org.codehaus.jackson.JsonNode;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport static utils.Constants.CONTENT_TYPE;\n\n@Service\npublic class SfdcTokenUtil {\n\n    private static final HttpUrlConnectionUtils httpUrlConnectionUtils = new HttpUrlConnectionUtils();\n    private static final Logger LOGGER = LoggerFactory.getLogger(SfdcTokenUtil.class);\n    public static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    private static final Cache<String, SalesforceToken> TOKEN_CACHE =\n            CacheBuilder.newBuilder().concurrencyLevel(10).maximumSize(10000)\n                    .expireAfterWrite(15, TimeUnit.MINUTES).build();\n\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6bf220c3-f725-45d6-81ec-ea6e5efee308","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthService.java","startLine":44,"endLine":45,"content":"                  Map<String, Object> flattenConnectionInfo) throws Exception;\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1906e20-4874-4290-8b3d-ef5a4eeb8d6a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":107,"endLine":142,"content":"            val = \"'\" + val + \"'\";\n                }\n                if(value.getDataType().equals(DataType.DATETIME)){\n                    OffsetDateTime dateTime = OffsetDateTime.parse(val.toString());\n                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n                    String formattedDateTime = dateTime.format(formatter);\n                    val = \"TIMESTAMP \" + \"'\" + formattedDateTime + \"'\";\n                } else if (value.getDataType().equals(DataType.DATE) ) {\n                    val = \"TIMESTAMP \" + \"'\" + val + \"'\";\n                }\n                return val;\n            }).collect(Collectors.toList()), \",\"));\n            stringBuilder.append(clause);\n            whereClause.add(stringBuilder.toString());\n        } else {\n            List<String> childRules = Lists.newArrayList();\n            rule.getRules().forEach(childRule -> {\n                childRules.addAll(buildRule(childRule));\n            });\n            whereClause.add(wrapRoundBrackets(\n                    Joiner.on(rule.getCondition().getSpaceWrappedFilterCondition()).join(childRules)));\n        }\n        return whereClause;\n    }\n\n    private static Object handleValue(Object value, FilterOperator op) {\n        switch (op) {\n            case CONTAINS:\n            case STARTS_WITH:\n                value = value + \"*\";\n                return value;\n            default:\n                return value;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"04060d2a-8e9f-4e11-8d99-00ef16ebdbb6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":53,"endLine":83,"content":"ctory().getEntityUpdateRequest(absoluteUri, UpdateType.PATCH, ce);\n        request.setAccept(ACCEPT);\n        ODataEntityUpdateResponse<ClientEntity> response = request.execute();\n        return response.getStatusCode();\n    }\n\n    @Override\n    public ClientEntity createEntity(Edm edm, String serviceUri, String entitySetName, ClientEntity ce, ODataClient client) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).build();\n        return createEntity(edm, absoluteUri, ce,client);\n    }\n\n\n    @Override\n    public ClientEntity readEntityWithKey(String serviceUri, String entitySetName, Object keyValue, ODataClient client) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).appendKeySegment(keyValue).build();\n        return readEntity(absoluteUri,client);\n    }\n\n    @Override\n    public ClientEntity readEntityWithKeyExpand(String serviceUri, String entitySetName, Object keyValue, String expandRelationName, ODataClient client) {\n        URI absoluteUri = client.newURIBuilder(serviceUri).appendEntitySetSegment(entitySetName).appendKeySegment(keyValue)\n                .expand(expandRelationName).build();\n        return readEntity(absoluteUri,client);\n    }\n\n\n    @Override\n    public Edm readEdm(String serviceUrl, ODataClient client) {\n        EdmMetadataRequest request = client.getRetrieveRequestFactory().getMetadataRequest(serviceUrl);\n        ODataRetrieveResponse<Edm> response = request.","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c9073668-38c7-4e00-8428-85f2a7e8bc41","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/IPaasConstants.java","startLine":1,"endLine":29,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean;\n\npublic final class IPaasConstants {\n    public static final String CLOUD_API_BASE_URL = \"/elements/api-v2\";\n    public static final String CALLBACK_AUTH_URL = \"/v1.0/api/accounts/oauth2callback%s\";\n\n    public static final String ELEMENTS = \"/elements/\";\n    public static final String PING = \"/ping\";\n    public static final String CLOUD_ELEMENTS_OAUTH_URL = \"/oauth/url\";\n    public static final String CLOUD_ELEMENTS_INSTANCE_URL = \"/instances\";\n    public static final String CHARSET = \"UTF-8\";\n    public static final String OBJECTS = \"/objects\";\n    public static final String REFRESH = \"/refresh\";\n    public static final String CE_ACCOUNTS_BASE_URL = String.format(\"%s/accounts\", CLOUD_API_BASE_URL);\n    public static final String CE_USERS_BASE_URL = CLOUD_API_BASE_URL + \"/accounts/%s/users\";\n    public static final String CE_OBJECTS_BASE_URL = CLOUD_API_BASE_URL + OBJECTS;\n    public static final String CE_OBJECTS_REFRESH_URL = CLOUD_API_BASE_URL + REFRESH;\n    public static final String CE_OBJECTS_METADATA_BASE_URL = CLOUD_API_BASE_URL + OBJECTS + \"/%s/metadata\";\n    public static final String CE_OBJECTS_DOCS_BASE_URL = CLOUD_API_BASE_URL + OBJECTS + \"/%s/docs\";\n\n    public static final String AUTHORIZATION = \"AUTHORIZATION\";\n\n    //https://staging.cloud-elements.com/elements/api-v2/objects\n    public static final String IPAAS_PROPERTIES = \"IPAAS_PROPERTIES\";\n    public static ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0842bf1-9a50-4edc-90ae-57522555add8","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":48,"endLine":75,"content":"    EMAIL(\"EMAIL\", \"\", null,\n                   \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"emails\", \"properties\", \"crm/v3/objects/emails?limit=100&associations=company,contact\",\n                   \"crm/v3/properties/email\",\"crm/v3/objects/emails\",\"emails\"),\n\n    MEETING(\"MEETING\", \"\", null,\n                   \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"meetings\", \"properties\", \"crm/v3/objects/meetings?limit=100&associations=company,contact\",\n                   \"crm/v3/properties/meetings\",\"crm/v3/objects/meetings\",\"meetings\"),\n\n    NOTES(\"NOTES\", \"\", null,\n                   \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"notes\", \"properties\", \"crm/v3/objects/notes?limit=100&associations=company,contact\",\n                   \"crm/v3/properties/notes\",\"crm/v3/objects/notes\", \"notes\"),\n\n\n    TASK(\"TASK\", \"\", null,\n            \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"tasks\", \"properties\", \"crm/v3/objects/tasks?limit=100&associations=company,contact\",\n            \"crm/v3/properties/tasks\",\"crm/v3/objects/tasks\",\"tasks\"),\n\n    LINE_ITEM(\"LINE_ITEM\", \"\", null,\n                 \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"line_items\", \"properties\", \"crm/v3/objects/line_items?limit=100&associations=deal\",\n                 \"crm/v3/properties/line_items\",\"crm/v3/objects/line_items\",\"line_items\"),\n\n    FEEDBACK_SUBMISSION(\"FEEDBACK_SUBMISSION\", \"\", null,\n                     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dabdb075-62bb-4cd2-b05b-faa5e93b5f87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/kafka/serde/config/KafkaConfigProps.java","startLine":1,"endLine":44,"content":"package com.gainsight.integration.kafka.serde.config;\n\nimport com.gainsight.properties.DeploymentProperties;\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n@Slf4j\n@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic class KafkaConfigProps {\n\n    public static Properties getProducerProps() {\n        return getKafkaProps(\"uc.kafka.common.\",  \"uc.kafka.producer.\");\n    }\n\n    public static Properties getConsumerProps() {\n        return getKafkaProps(\"uc.kafka.common.\",  \"uc.kafka.consumer.\");\n    }\n\n    private static Properties getKafkaProps(String... prefix) {\n        Properties props = new Properties();\n        Properties deploymentProps = DeploymentProperties.getProperties();\n        Enumeration<Object> keys = deploymentProps.keys();\n        while(keys.hasMoreElements()) {\n            String key = String.valueOf(keys.nextElement());\n            for(String pre:prefix)  {\n                if(key.startsWith(pre)) {\n                    log.info(\"Prop {} identified for kafka\", key);\n                    props.put(key.replace(pre,  \"\"), deploymentProps.get(key));\n                }\n            }\n        }\n        return props;\n    }\n\n    public static  Map<String, Object> getKafkaConsumerProps() {\n        String[] prefix = {\"uc.kafka.common.\",  \"uc.kafka.consumer.\"};\n        Map<String, Object> props = new HashMap<>();\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7872b837-7f96-44f2-886d-2bfa5a5265ac","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/utils/SfdcTokenUtil.java","startLine":81,"endLine":107,"content":"tionsInfo, String clientId, String clientSecret, String refreshToken) throws SystemException {\n        SalesforceToken accessToken = null;\n        String tenantId = pnpConnectionsInfo.getTenantId();\n        String connectionId = pnpConnectionsInfo.getConnectionId();\n        LOGGER.info(\"Generating token for tId:{} connectionId:{}\", tenantId, connectionId);\n        try {\n            if (StringUtils.isNoneEmpty(clientId, clientSecret, refreshToken)) {\n                return generateToken(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n            } else {\n                LOGGER.error(\"Refresh token null for tId:{} connectionId:{}\", tenantId, connectionId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in token generation tId:{} connectionId:{}\", tenantId, connectionId, e);\n            throw new SystemException(e.getMessage(), e);\n        }\n        return accessToken;\n    }\n\n    private SalesforceToken generateToken(PNPConnectionsInfo pnpConnectionsInfo) throws SystemException, IOException {\n        BaseTokenDetail baseTokenDetail = pnpConnectionsInfo.getTokenDetail();\n        String clientId = baseTokenDetail.getAccessKey().getString();\n        String clientSecret = baseTokenDetail.getAccessSecret().getString();\n        String refreshToken = CryptHandler.getInstance().decrypt(baseTokenDetail.getRefreshToken());\n        return tokenCallToSalesforce(pnpConnectionsInfo, clientId, clientSecret, refreshToken);\n    }\n\n    private Salesfo","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7490bb18-3f17-41e4-ad47-6cd6759aa0d3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":81,"endLine":93,"content":"[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.meetings.results[*].id\", \"Associated Meeting Ids\", \"associations.meetings.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.MEETING.name()));\n                }\n                break;\n            case TASK:\n            case NOTES:\n            case EMAIL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gain","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea737591-bfd6-4a69-8905-8ad3e7995057","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/InstanceType.java","startLine":1,"endLine":59,"content":"package com.gainsight.integration.bean.enums.common;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.annotate.JsonCreator;\nimport org.codehaus.jackson.annotate.JsonValue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.gainsight.integration.bean.enums.common.ConnectorType.*;\n\npublic enum InstanceType {\n    PX(\"PX\"),\n    CS(\"CS\"),\n    CE(\"CE\"),\n    CC(\"IS\");\n\n    private String value;\n\n    InstanceType(String value) {\n        this.value = value;\n    }\n\n    /**\n     * Pre-populate the instance map for performance.\n     */\n    private static final Map<Object, InstanceType> INSTANCE_MAP = new HashMap<>();\n\n    static {\n        for (InstanceType type : values()) {\n            INSTANCE_MAP.put(type.value.toUpperCase(), type);\n        }\n    }\n\n    /**\n     * @return returns the value of Instance Type\n     */\n    @JsonValue\n    @com.fasterxml.jackson.annotation.JsonValue\n    public String getValue() {\n        return value;\n    }\n\n    @JsonCreator\n    @com.fasterxml.jackson.annotation.JsonCreator\n    public static InstanceType getInstance(String instanceType) {\n        if (StringUtils.isEmpty(instanceType)) {\n            return null;\n        }\n        return INSTANCE_MAP.get(instanceType.toUpperCase());\n    }\n\n    public static ConnectorType getConnectorType(InstanceType instanceType) {\n        switch (instanceType) {\n            case PX:\n                return GAINSIGHT_PX;\n            case CC:\n                return CUSTOMER_COMMUNITY;\n ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"23e1a688-7c20-4588-8d10-4d6551b63c9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":157,"endLine":193,"content":"\"gs_opportunity_stage\";\n    public static final String OPPORTUNITY_LINE_ITEM_OBJECT_NAME = \"gs_opportunity_line_item\";\n    public static final String RECORD_TYPE_OBJECT_NAME = \"GsRecordType\";\n    public static final String PRICEBOOK_OBJECT_NAME = \"gs_pricebook\";\n    public static final String LEAD_OBJECT_NAME = \"gs_lead\";\n    public static final String PRICEBOOK_ENTRY_OBJECT_NAME = \"gs_pricebook_entry\";\n\n\n    //Number Data type Constants\n    protected static final String DOUBLE = \"Double\";\n    protected static final String LONG = \"Long\";\n    protected static final String INTEGER = \"Integer\";\n    protected static final String BIG_DECIMAL = \"BigDecimal\";\n\n\n    //SQL Statements constants\n    public static final String ALTER_TABLE = \"alter table \";\n\n    /**\n     * this constant to append to all Unified Connector Logs as prefix.\n     */\n    //Logging Constant\n    public static final String UC_CONNECTOR_LOG = \"{unified connector}\";\n    public static final String UC = \"uc\";\n\n    /**\n     * Dynamics Connector constants\n     */\n    public static final String LOAD_TO_DYNAMICS_ACTION_ENABLED = \"LOAD_TO_DYNAMICS_ACTION_ENABLED\";\n    public static final String LOOKUP_FIELDS_FLATTENED = \"LOOKUP_FIELDS_FLATTENED\";\n    public static final String OWNER_ID = \"ownerid\";\n    public static final String SYSTEM_USER = \"systemuser\";\n    public static final String TEAM = \"team\";\n    public static final String OWNING_USER = \"owninguser\";\n    public static final String OWNING_TEAM = \"owningteam\";\n\n    ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0aeb536-40ef-49e1-9c68-447281015ed9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtilV3.java","startLine":71,"endLine":82,"content":"ldRef(gainsightHubspotFieldDescriptions);\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                }\n                break;\n            case CALL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithModificationMetadata(\"id\", \"id\", \"id\", \"string\", \"text\",new ModificationMetadata(false, true, true)));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[*].id\", \"Associated Company Ids\", \"associations.companies.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.deals.results[*].id\", \"Associated Deal Ids\", \"associations.deals.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.DEAL.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.tickets.results[*].id\", \"Associated Ticket Ids\", \"associations.tickets.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.TICKET.name()));\n//                    gainsightHubspotFieldDescriptions.add(createFieldDe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a8a3bdec-9dce-4e28-ae81-5395b5fcb23f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsSchemaServiceImpl.java","startLine":71,"endLine":99,"content":"s\");\n        String filter;\n        if (StringUtils.isNotEmpty(filter = query.buildFilter())) {\n            absoluteUri.filter(filter);\n        }\n        String[] projections;\n        if (ArrayUtils.isNotEmpty(projections = query.buildProjections())) {\n            absoluteUri.select(projections);\n        } else {\n            absoluteUri.select(MSDynamicsObjectQuery.FIELDS_MAPPING.values().toArray(new String[0]));\n        }\n        if (includeColumns) {\n            absoluteUri.expand(\"Attributes\");\n        }\n        URI uri = absoluteUri.build();\n        LOGGER.info(\"tId: {}. URI is {}\", RequestContextProvider.getTenantId(), uri);\n        List<Map<String, Object>> entities;\n        try {\n            entities = readEntities(client, uri, includeColumns, resolveOptionSets);\n        } catch (IOException e) {\n            LOGGER.error(\"Failed while fetching entity\", e);\n            throw new SystemException(AdapterErrorMessages.FAILED_WHILE_FETCHING_OBJECT.getTranslatedMessage(), DynamicsErrorCode.PNP_DYNAMICS_FAILED_TO_FETCH_OBJECT, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n        }\n        GainsightPrecondition.assertTrue(CollectionUtils.isNotEmpty(entities), DynamicsErrorCode.PNP_DYNAMICS_OBJECT_NOT_FOUND, HttpStatus.SC_NOT_FOUND);\n        Map<String, Object> entity = entities.get(0);\n        LOGGER.info(\"tId: {}. Fetched entity\", RequestContextProvider.getTenantId());\n        MSDynamicsObject msDynamicsObject = parseObject(entity);\n        List<Column> columns;\n        if (includeC","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9975600e-1fe3-465d-ba2b-ee4d7fa90608","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelFactory.java","startLine":1,"endLine":15,"content":"package com.gainsight.integration.connector.ecosystem.service;\n\nimport java.util.Objects;\n\n\npublic class GainsightEcosystemChannelFactory {\n\n    public GainsightEcosystemChannelFactory() {\n    }\n\n    public GainsightEcosystemChannelService getChannelServiceWithApiKey(String apiKey){\n        Objects.requireNonNull(apiKey,\"API key cannot be null\");\n        return new GainsightEcosystemChannelServiceImpl(apiKey);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5bb40ba8-5319-4962-949d-54be93c69363","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/native-ipaas/src/main/java/com/gainsight/integration/auth/AuthServiceImpl.java","startLine":288,"endLine":312,"content":"tHandler.getInstance().encrypt(String.valueOf(response.get(config.getTokenGenerationDetails().getResponseRefreshTokenKey()))));\n        }\n        if (StringUtils.isNotEmpty(config.getTokenGenerationDetails().getResponseAccessExpireKey())) {\n          Long expire = ((Double) response.get(config.getTokenGenerationDetails().getResponseAccessExpireKey())).longValue();\n          ExpireUnit expireUnit = ObjectUtils.isEmpty(config.getTokenGenerationDetails().getExpireUnit()) ? MILLIS : config.getTokenGenerationDetails().getExpireUnit();\n          switch (expireUnit) {\n            case MILLIS:\n              break;\n            case SECONDS:\n              expire = expire * 1000;\n          }\n          expire = expire + System.currentTimeMillis() - 10000;\n          baseTokenDetail.setExpiry(expire);\n        }\n\n        pnpConnectionsInfo.setTokenDetail(baseTokenDetail);\n        if (pnpConnectionInfoDao != null) {\n          pnpConnectionInfoDao.update(pnpConnectionsInfo);\n          LOGGER.info(\"New key updated in pnpConnectionInfo for connectorType  : {},connectionId : {}\", pnpConnectionsInfo.getConnectionType(),pnpConnectionsInfo.getConnectionId()); // need to delete this line\n        }\n        else\n          LOGGER.info(\"the pnpConnectionInfoDao is null\"); // to know if the pnpConnectionInfoDao is not updated after token generation\n        return response.get(config.getTokenGenerationDetails().getResponseRootKey());\n      } else {\n        return CryptHandler.getInstance().decrypt(pnpConn","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d9850e08-1bfc-48d4-aff6-dfa811941b19","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":93,"endLine":124,"content":"ts.isNull(attribute) || Objects.nonNull(attribute.get(\"AttributeOf\"));\n    }\n\n    public static String parseDisplayName(Map<String, Object> entity, String defaultValue) {\n        String displayName = parseDisplayName(entity);\n        return StringUtils.isNotEmpty(displayName) ? displayName : defaultValue;\n    }\n\n    public static String parseDisplayName(Map<String, Object> entity) {\n        if (Objects.isNull(entity)) {\n            return null;\n        }\n        Map<String, Object> displayName = (Map) entity.get(\"DisplayName\");\n        String finalDisplayName = null;\n        if (Objects.nonNull(displayName)) {\n            Map<String, Object> userLocalizedLabel = (Map) displayName.get(\"UserLocalizedLabel\");\n            if (Objects.nonNull(userLocalizedLabel)) {\n                finalDisplayName = DynamicsGainsightUtils.valueOf(userLocalizedLabel.get(\"Label\"));\n            }\n        }\n        if(entity.get(\"LogicalName\").equals(\"entityimage_url\"))\n            finalDisplayName=\"Entity Image URL\";\n\n        return finalDisplayName;\n    }\n\n    public static OptionSet parseOptionSet(ClientEntity clientEntity) {\n        OptionSet optionSet = new OptionSet();\n        optionSet.setId(clientEntity.getProperty(\"MetadataId\").getPrimitiveValue().toString());\n        optionSet.setName(clientEntity.getProperty(\"Name\").getPrimitiveValue().toString());\n        optionSet.setGlobal(DynamicsGainsightUtils.parseBoolean(clientEntity.getProperty(\"IsGlobal\").getPrimitiveValue().toValue()));\n        Ma","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"14c30530-0e17-4a7c-82d3-b750ed645962","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":651,"endLine":681,"content":"}\n            this.httpclient.close();\n            this.httpclient = HttpClients.createDefault();\n        }\n        return jobCompleted;\n    }\n\n\n    private static List<String> buildRule(FilterRule rule) {\n        try {\n            StringBuilder stringBuilder = new StringBuilder();\n            List<String> whereClause = Lists.newArrayList();\n            if (Objects.isNull(rule.getCondition()) && org.apache.commons.collections4.CollectionUtils.isEmpty(rule.getRules())) {\n                stringBuilder.append(SPACE);\n                String clause = Operators.getBQSqlClause(rule.getOp());\n                if (DataType.TIMESTAMP.equals(rule.getFieldInfo().getDataType())) {\n                    clause = clause.replace(\"$left\", UNIX_MILLIS + OPEN_BRACKET + rule.getFieldInfo().getJsonPath() + CLOSE_BRACKET);\n                }else {\n                    clause = clause.replace(\"$left\", rule.getFieldInfo().getName());\n                }\n                LOGGER.info(\"rule {}\",rule);\n                clause =clause.replace(\"$right\",StringUtils.join(rule.getValues().stream().map(value -> {\n                    Object val = value.getValue();\n                    val = handleValue(val, rule.getOp());\n                    if (ENCLOSE_IN_SINGLE_QUOTE.contains(value.getDataType())) {\n                        val = \"'\" + val + \"'\";\n                    }\n                    return val;\n                }).collect(Collectors.toList()), \",\"));\n                stringBuilder.append(clause);\n                whe","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"80af16aa-6c1c-4714-8e77-d367dfcb285e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":916,"endLine":935,"content":"  if (!lookUpFieldNames.contains(clientLink.getName())) {\n                continue;\n            }\n            ClientEntity clientEntity = null;\n            if (clientLink.asInlineEntity() != null && clientLink.asInlineEntity().getEntity() != null) {\n                clientEntity = clientLink.asInlineEntity().getEntity();\n            } else if (clientLink.asInlineEntitySet() != null && clientLink.asInlineEntitySet().getEntitySet() != null && CollectionUtils.isNotEmpty(clientLink.asInlineEntitySet().getEntitySet().getEntities())) {\n                clientEntity = clientLink.asInlineEntitySet().getEntitySet().getEntities().get(0); //For now consider only single record\n            }\n            if (Objects.nonNull(clientEntity)) {\n                for (ClientProperty clientProperty : clientEntity.getProperties()) {\n                    if (lookUpObjectFieldNames.contains(clientProperty.getName())) {\n                        String key = clientLink.getName() + \".\" + clientProperty.getName();\n                        Object value = extractValue(clientProperty, null, isPrimitiveDateTimeConversionRequired);\n                        if (modifiedProjectionToOriginalProjections.containsKey(key)) {\n                            for (String projection : modifiedProjectionToOriginalProjections.get(key)) {\n                                record.put(projection, value);\n                            }\n                        } else {\n                            record.put(key, value); // revisit for pic","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c8cc451-a0aa-4d91-ac86-6a32c5b88966","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":781,"endLine":799,"content":"ilter(projection -> StringUtils.contains(projection, \".\")).collect(Collectors.toList());\n        Set<String> lookupSourceColumns  = Sets.newHashSet();\n        for (String lookupProjection: lookupProjections) {\n            lookupSourceColumns.add(lookupProjection.split(\"\\\\.\")[0]);\n        }\n        for (Map.Entry<String, String> entry : masterLookUpConfig.entrySet()) {\n            String pair[]= entry.getKey().split(\"@@\");\n            if (msDynamicsObject.getPluralName().equals(pair[0]) && lookupSourceColumns.contains(pair[1])) {\n                lookupSourceColumns.remove(pair[1]);\n                lookupObjectPrimaryKeys.add(entry.getValue()+\".\"+pair[1]);\n            }\n        }\n        Map<String, List<Column>> columnLogicalNameToTargetObject = msDynamicsObject.getColumns().stream().filter(column -> column.isHasLookup() && lookupSourceColumns.contains(column.getLogicalName())).collect(Collectors.groupingBy(Column::getTargetObject));\n        for (Map.Entry<String,List<Column>> entry : columnLogicalNameToTargetObject.entrySet()) {\n            MSDynamicsObject lookupObject = msDynamicsSchemaService.describeObject(new MSDynamicsObjectQuery().logicalName(entry.getKey()), true, false);\n            Optional<Column> primaryColumnOptional = lookupObject.getColumns().stream().filter(column -> column.isPrimary()).findFirst();\n            if (primaryColumnOptional.isPresent()) {\n                for (Column column : entry.getValue()) {\n                    String referencingAttribute = get","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a4be0123-c651-4f87-9efe-f98605533be9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":31,"endLine":61,"content":"calDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.time.temporal.ChronoField;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport static com.gainsight.integration.utils.common.UCConstants.*;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeList;\nimport static com.gainsight.utils.GainsightCollectionUtils.nullSafeSet;\n\n/**\n * createdBy: snargana\n * date: 01/09/24\n */\n\npublic class GainsightSAPHanaDatasphereServiceImpl implements GainsightSAPDatasphereChannelService {\n  private static final Logger log = LoggerFactory.getLogger(GainsightSAPHanaDatasphereServiceImpl.class);\n  private static final String SAP_HANA_BASE_URL = \"jdbc:sap://%s:443\";\n  private static final String USERNAME = \"username\";\n  private static final String PASSWORD = \"password\";\n  private static final String COUNT = \"count\";\n  private static final String COLUMN_NAME = \"COLUMN_NAME\";\n  private static final String JSON_EXTENSION = \".json\";\n  private static final String AUTHENTICATE_SCHEMA_QUERY = \"SELECT COUNT(SCHEMA_NAME) AS count FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = ?\";\n  private static final String SHOW_TABLES_QUERY = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = ?\";\n  private static final String SHOW_VIEWS_QUERY = \"SELECT * FROM \\\"SYS\\\".\\\"VIEWS\\\" WHERE","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91bd1b03-706e-42ee-8894-2966053ba57f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/bean/SalesforceBatchStatus.java","startLine":1,"endLine":28,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.connector.sfdc.bean;\n\nimport java.util.stream.Stream;\n\npublic enum SalesforceBatchStatus {\n    COMPLETED(\"Completed\"),\n    FAILED(\"Failed\");\n\n    private String batchState;\n\n    SalesforceBatchStatus(String batchState) {\n        this.batchState = batchState;\n    }\n\n    public String batchState() {\n        return this.batchState;\n    }\n\n    public static SalesforceBatchStatus fromValue(String state) {\n        return Stream.of(SalesforceBatchStatus.values()).filter(value -> value.batchState.equalsIgnoreCase(state)).\n                findFirst().orElseThrow(() -> new IllegalArgumentException(state));\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43802f68-d1bf-4714-9f69-62dab70a79f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":121,"endLine":160,"content":"----------------\");\n    ClientEntity ce = loadEntity(\"/Users/vipinsharma/Codebase/gainsight_content/POCs/sap_concur/gs-dynamics/src/main/resources/updates.json\");\n    int sc = updateEntity(edm, serviceUrl, \"Cases\", \"5000e00001E6qa3AAB\", ce);\n    print(\"Updated successfully: \" + sc);\n//    entry = readEntityWithKey(edm, serviceUrl, \"Cases\", \"5000e00001E6qa3AAB\");\n//    print(\"Updated Entry successfully: \" + prettyPrint(entry.getProperties(), 0));\n//\n//    //\n//    print(\"\\n----- Delete Entry ------------------------------\");\n//    sc = deleteEntity(serviceUrl, \"Manufacturers\", 123);\n//    print(\"Deletion of Entry was successfully: \" + sc);\n//\n//    try {\n//      print(\"\\n----- Verify Delete Entry ------------------------------\");\n//      readEntityWithKey(edm, serviceUrl, \"Manufacturers\", 123);\n//    } catch(Exception e) {\n//      print(e.getMessage());\n//    }\n  }\n\n  private static void print(String content) {\n    LOGGER.info(content);\n  }\n\n/*  private static void print(String content, List<?> list) {\n    LOGGER.info(content);\n    for (Object o : list) {\n      LOGGER.info(\"    \" + o);\n    }\n  }*/\n\n  private static String prettyPrint(Map<String, Object> properties, int level) {\n    StringBuilder b = new StringBuilder();\n    Set<Map.Entry<String, Object>> entries = properties.entrySet();\n\n    for (Map.Entry<String, Object> entry : entries) {\n      intend(b, level);\n      b.append(entry.getKey()).append(\": \");\n      Object value = entry.getValue();\n      if(value instanceof Map)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"276ca652-2d45-451e-8472-04da53dbca95","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightSAPChannelServiceImpl.java","startLine":216,"endLine":225,"content":"\n\n        private static void intend(StringBuilder builder, int intendLevel) {\n            for (int i = 0; i < intendLevel; i++) {\n                builder.append(\"  \");\n            }\n        }\n\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"599f151a-b20e-458a-8333-30153343fe0b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":335,"endLine":362,"content":"                  LOGGER.info(\"No of records got in BQ response\");\n                    }\n                } else if (response.getStatusLine().getStatusCode() == org.apache.http.HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"BigQuery access token expired\");\n                    this.accessToken = getAccessTokenFromRefreshToken();\n                } else if (retry <= -1) {\n                    LOGGER.error(\"The api call to BigQuery failed after max retry due to status: {} , code :{}\",\n                            response.getStatusLine(), response.getStatusLine().getStatusCode());\n                    throw new Exception(\"BigQuery api fetch failed due to :{}\" + response.getStatusLine());\n                } else {\n                    LOGGER.error(\"Sleeping for 15 secs as the api call to BigQuery failed for retry count left : {} due to : {}, code :{}\",\n                            retry--, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                }\n                this.httpclient.close();\n                this.httpclient = HttpClients.createDefault();\n            } catch (Exception e) {\n                LOGGER.error(\"Error occurred fetching data {}\", e);\n                throw new Exception(\"Error occurred fetching data\", e);\n            }finally {\n                this.httpclient.close();\n                this.httpclient = HttpClients.createDefault();\n            }\n        }\n        return fileList;\n    }\n\n    @Override\n    public String getWhereCl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33e2f3c7-a5ca-4b54-8f5c-2bd4c2c597af","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileSplitter.java","startLine":61,"endLine":90,"content":"d(chunk(csvLineIterator, headerLine));\n                }\n            }\n            return splitFiles;\n        });\n\n        List<File> splitFiles;\n        long timeoutMins = evaluateTimeoutInMins(bigFile);\n        LOGGER.info(\"File partitioning timeout : {} mins\", timeoutMins);\n        try {\n            splitFiles = future.get(timeoutMins, TimeUnit.MINUTES);\n        } catch (TimeoutException e) {\n            LOGGER.error(\"Trying to split the file is taking more than {} minutes, interrupted the thread: {}\", timeoutMins, future.cancel(true), e); //this method will interrupt the underlying task\n            throw new SystemException(\"Error occurred while splitting file: \" + e.getMessage(), e);\n        } finally {\n            executor.shutdownNow();\n        }\n\n        LOGGER.info(\"Number of split files: {}\", splitFiles.size());\n        return splitFiles;\n    }\n\n    private File chunk(CSVLineIterator bigFileLineIterator, String headerLine) throws IOException {\n        String chunkFileName = FilenameUtils.getBaseName(bigFile.getName()) + \"_\" + (fileNumber++) + \".\" + StringUtils.defaultIfBlank(FilenameUtils.getExtension(bigFile.getName()), \"csv\");\n        File chunkFile = new File(chunksDir, chunkFileName);\n        LOGGER.info(\"Creating chunk file : {}\", chunkFile.getAbsolutePath());\n\n        boolean isFirstRequest = true;\n        while (bigFileLineIterator.hasNext() && fileSizeInMBs(chunkFile) < maxChunkedFileSizeInMB) {\n            try (OutputStream chunkFileStream = IOUtils.buffer(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"182ac6d6-187f-4237-b12f-dae68e77e652","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":230,"endLine":254,"content":" separateLineItemForLookups, loadToDynamicsEnabled, dataTypeMappings);\n        expandGroupModified.addAll(lookupObjectPrimaryKeys);\n        List<String[]> expandGroupSplitted = expandGroupModified.stream().map(str -> str.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n\n        for (String[] expandedGroupSplittedSingle : expandGroupSplitted) {\n            List<String> expandFields = expandGroupWithFilter.getOrDefault(expandedGroupSplittedSingle[0], Lists.newArrayList());\n            expandFields.add(expandedGroupSplittedSingle[1]);\n            expandGroupWithFilter.put(expandedGroupSplittedSingle[0], expandFields);\n        }\n\n        Set<String> lookUpFieldNames = Sets.newHashSet();\n        for (Map.Entry<String, List<String>> entry : expandGroupWithFilter.entrySet()) {\n            lookUpFieldNames.add(entry.getKey() + \"($select=\" + String.join(\",\", entry.getValue()) + \")\");\n        }\n\n        RecordResponseGenerator recordResponseGenerator = new RecordResponseGenerator(getRecordsRequest);\n        ClientEntitySet clientEntitySet;\n        try {\n            if (StringUtils.isEmpty(nextPageToken)) {\n                clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                        lookUpFieldNames, getRecordsRequest.getFilterExpression(), null, pageSize);\n            } else {\n                URIBuilder absoluteUri = client.newURIBuilder(nextPageToken);\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c5324c24-9bdb-42b6-9665-acb141fc7a5c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceImpl.java","startLine":376,"endLine":398,"content":"r.split(\"\\\\.\")).collect(Collectors.toList());\n        Map<String, List<String>> expandGroupWithFilter = Maps.newHashMap();\n        for (String[] expandedGroupSplittedSingle : expandGroupSplitted) {\n            List<String> expandFields = expandGroupWithFilter.getOrDefault(expandedGroupSplittedSingle[0], Lists.newArrayList());\n            expandFields.add(expandedGroupSplittedSingle[1]);\n            expandGroupWithFilter.put(expandedGroupSplittedSingle[0], expandFields);\n        }\n        Set<String> lookUpFieldNames = Sets.newHashSet();\n        for (Map.Entry<String, List<String>> entry : expandGroupWithFilter.entrySet()) {\n            lookUpFieldNames.add(entry.getKey() + \"($select=\" + String.join(\",\", entry.getValue()) + \")\");\n        }\n\n        RecordResponseGenerator recordResponseGenerator = new RecordResponseGenerator(getRecordsRequest);\n        ClientEntitySet clientEntitySet;\n        try {\n            if (StringUtils.isEmpty(nextPageToken)) {\n                clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                        lookUpFieldNames, getRecordsRequest.getFilterExpression(), null, pageSize);\n            } else {\n                URIBuilder absoluteUri = client.newURIBuilder(nextPageToken);\n                clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                        lookUpFieldNames, getRecordsRequest.getFilterExpression(), absoluteUri, pageSize);\n         ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6e1af7b7-513d-4aaa-a146-45c83f4433b8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":99,"endLine":120,"content":"nelService.close();\n    }\n\n    @Test\n    void testGetPropertiesWithAPIKey() throws Exception {\n        GainsightHubspotChannelService gainsightHubspotChannelService =\n                this.gainsightHubspotChannelFactory.getChannelServiceWithApiKey(\"ec4a2f44-30f4-45f6-9d75-edd4d83ab1c2\");\n        Assertions.assertNotNull(gainsightHubspotChannelService, \"Unable to create GainsightHubspotChannelService. AccessToken is not refreshed.\");\n        Object result = gainsightHubspotChannelService.getEntityProperties(\"CONTACT\");\n        Assertions.assertNotNull(result, \"Unable to get propeties type.\");\n        Assertions.assertTrue(result instanceof InputStream, \"Invalid data type for result.\");\n        gainsightHubspotChannelService.close();\n    }\n\n    @Test\n    void testVerifyHubspotAccountDeatils() throws Exception {\n        GainsightHubspotChannelService gainsightHubspotChannelService =\n                this.gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertNotNull(gainsightHubspotChannelService, \"Unable to create GainsightHubspotChannelService. AccessToken is not refreshed.\");\n        Map<String, Object> response = gainsightHubspotChannelService.getHubspotAccountDetails();\n        Assertions.assertEquals(HUB_ID, (Integer)response.get(\"portalId\"), \"Mismatch in HUB ID\");\n        Assertions.assertEquals(TIME_ZONE, response.get(\"timeZ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9711fbd9-5802-4645-a085-7c6d345bf94e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/ModificationMetadata.java","startLine":1,"endLine":44,"content":"package com.gainsight.integration.connector.hubspot.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ModificationMetadata {\n\n    private boolean archivable;\n    private boolean readOnlyDefinition;\n    private boolean readOnlyValue;\n\n    public ModificationMetadata() {\n    }\n\n    public ModificationMetadata(boolean archivable, boolean readOnlyDefinition, boolean readOnlyValue) {\n        this.archivable = archivable;\n        this.readOnlyDefinition = readOnlyDefinition;\n        this.readOnlyValue = readOnlyValue;\n    }\n\n    public boolean isArchivable() {\n        return archivable;\n    }\n\n    public void setArchivable(boolean archivable) {\n        this.archivable = archivable;\n    }\n\n    public boolean isReadOnlyDefinition() {\n        return readOnlyDefinition;\n    }\n\n    public void setReadOnlyDefinition(boolean readOnlyDefinition) {\n        this.readOnlyDefinition = readOnlyDefinition;\n    }\n\n    public boolean isReadOnlyValue() {\n        return readOnlyValue;\n    }\n\n    public void setReadOnlyValue(boolean readOnlyValue) {\n        this.readOnlyValue = readOnlyValue;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"584f95ab-8e68-42bf-8226-71c8cc82bdb9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/IRoadmapChannelService.java","startLine":33,"endLine":56,"content":"y.getValue()));\n            HttpResponse response = httpclient.execute(httpGet);\n            return (response.getStatusLine().getStatusCode() == 200 || response.getStatusLine().getStatusCode() == 204);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception occurred while trying to authenticate access token : {}\", ex);\n        }\n        return false;\n    }\n\n    default Map<String, String> getOtherHeaders(){\n        return Maps.newHashMap();\n    }\n\n    static IRoadmapChannelService getRoadMapChannel(ConnectorType type, Map<String, Object> properties){\n        switch (type){\n            case PRODUCTBOARD:\n                return new ProductBoardChannelServiceImpl(properties.get(ACCESS_TOKEN).toString());\n            case AHA:\n                return new AhaChannelService(properties.get(ACCESS_TOKEN).toString(), properties.get(\"subdomain\").toString());\n            default:\n                throw new SystemException(\"No handler found for type \"+type);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"368be2a0-073a-4965-8fc1-d6890804c3eb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/GainsightODataSAPClientFactory.java","startLine":1,"endLine":23,"content":"package com.gainsight.integration.connector.sap;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.core.ODataClientFactory;\nimport org.apache.olingo.client.core.http.BasicAuthHttpClientFactory;\n\npublic class GainsightODataSAPClientFactory {\n\n    public static ODataClient getOdataClientForSAPCRM(String userName, String password) {\n        ODataClient client = ODataClientFactory.getClient();\n        BasicAuthHttpClientFactory httpClientFactory = new BasicAuthHttpClientFactory(userName,password);\n        client.getConfiguration().setHttpClientFactory(httpClientFactory);\n        return client;\n    }\n\n    public static ODataClient getOdataClientForSAPMKT(String apiKey) {\n        ODataClient client = ODataClientFactory.getClient();\n        GainsightODataTokenBasedHttpConfiguration httpClientFactory = new GainsightODataTokenBasedHttpConfiguration(apiKey);\n        httpClientFactory.init();\n        client.getConfiguration().setHttpClientFactory(httpClientFactory);\n        return client;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ca3580b5-8ee9-46b7-99f5-acfdf249ac87","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":251,"endLine":276,"content":"                    lookUpFieldNames, getRecordsRequest.getFilterExpression(), null, pageSize);\n            } else {\n                URIBuilder absoluteUri = client.newURIBuilder(nextPageToken);\n                clientEntitySet = readClientEntitySet(client, getRecordsRequest.getPluralName(), selectGroup,\n                        lookUpFieldNames, getRecordsRequest.getFilterExpression(), absoluteUri, pageSize);\n            }\n            generateRecords(recordResponseGenerator, clientEntitySet, expandGroupModified, optionSetMap, modifiedProjectionToOriginalProjections,\n                    getRecordsRequest.isPrimitiveDateTimeConversionRequired(), multiPicklistColumns);\n        } catch (Exception e) {\n            LOGGER.error(\"Unexpected error occured in get records, deleting temp file if any present\");\n            FileUtils.deleteQuietly(recordResponseGenerator.getCsvFile());\n            throw e;\n        }\n\n        if (null != clientEntitySet.getNext()) {\n            nextPageToken = clientEntitySet.getNext().toString();\n        } else {\n            nextPageToken = null;\n        }\n        return new RecordsResponse(recordResponseGenerator.getRecords(), recordResponseGenerator.getCsvFile(),\n                nextPageToken, recordResponseGenerator.getRecordsPulled());\n    }\n\n    @Override\n    public RecordsResponse getRecords(String entityName, GetRecordsRequest getRecordsRequest, Map<String, String> masterLookUpConfiguration, boolean resolvePicklistOptions,\n                          ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b0e98db5-23d0-4a0a-b06d-f5adb0d5ecb7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zuorav2/src/main/java/com/gainsight/connector/Zuorav2ChannelServiceImpl.java","startLine":33,"endLine":60,"content":" static com.gainsight.integration.utils.common.UCConstants.SPACE;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.wrapRoundBrackets;\n\n@Service\npublic class Zuorav2ChannelServiceImpl {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(Zuorav2ChannelServiceImpl.class);\n    private static final List<DataType> ENCLOSE_IN_SINGLE_QUOTE = Arrays.asList(DataType.STRING);\n\n\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n    private static final String BASE_URL = \"baseURL\";\n\n\n\n    public Map<String, Object> getZuoraCustomObjects(PNPConnectionsInfo pnpConnectionsInfo) {\n        HttpResponse response = null;\n        try {\n            HttpGet httpGet = new HttpGet();\n            HttpClient httpClient = HttpClients.createDefault();\n            String url = String.format(((Map)pnpConnectionsInfo.getProperties().get(IPaasConstants.IPAAS_PROPERTIES)).get(BASE_URL) + \"/objects/definitions/default\");\n            URIBuilder uriBuilder = new URIBuilder(url);\n            uriBuilder.addParameter(\"select\",\"type\");\n            httpGet.addHeader(\"Authorization\",String.format(\"Bearer %s\",  CryptHandler.getInstance().decrypt(pnpConnectionsInfo.getTokenDetail().getAccessToken())));\n            httpGet.setURI(uriBuilder.build());\n            response = httpClient.execute(httpGet);\n            String jsonDataResponse = IOUtils.toString(response.getEntity().getContent(), \"UTF-8\");\n            Map<String, Object> responseMap = MAPPER.read","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dec83ee5-ba15-4812-99ea-b65e2289042a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/common/UCConstants.java","startLine":436,"endLine":458,"content":"      public static final String CAMEL_SALESFORCE_EVENT_TYPE = \"CamelSalesforceEventType\";\n        public static final String BULK_JOB_OPERATION = \"bulkJobOperation\";\n        public static final String BATCH_OPERATION = \"batchOperation\";\n        public static final String BULK_QUERY_OPERATION = \"bulkQueryOperation\";\n        public static final String BATCH_CONTENT_TYPE = \"batchContentType\";\n        public static final String QUERY_TYPE = \"queryType\";\n        public static final String APPLICATION_JSON = \"application/json\";\n        public static final String APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n        public static final String TEXT_PLAIN = \"text/plain\";\n        public static final String SFDC_SYSTEM_MODSTAMP_FIELD = \"SystemModstamp\";\n        //newly created constants\n        public static final String RESULT_IDS = \"resultids\";\n        public static final String COMPONENT_CONNECTION_ID = \"salesforce.connectionId\";\n        public static final String UC_ID = \"UC_ID\";\n        public static final String MDA = \"mda\";\n        public static final String SFDC_JOB_ID = \"sfdcJobId\";\n        public static final String SFDC_BATCH_ID = \"sfdcBatchId\";\n\n        public static final String SALESFORCE_CAMEL_CONTEXT_BULK = \"SalesforceCamelContext_Bulk\";\n        public static final String SALESFORCE_CAMEL_CONTEXT_METADATA = \"SalesforceCamelContext_Metadata\";\n\n        public static final String CONTENT_TYPE = \"contentType\";\n        public static final String MDA_JOB_","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c816fda-f9b7-44ad-a3cd-14535a33ec9e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":136,"endLine":168,"content":"YPE_VALUE);\n    }\n\n    public GainsightBigQueryChannelServiceImpl(String clientId, String clientSecret, String refreshToken, String projectId, String datasetId) {\n        LOGGER.info(\"Started getting access  token for bq oauth\");\n        this.projectId = projectId;\n        this.datasetId = datasetId;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.refreshToken = refreshToken;\n        this.authorizationType = \"OAUTH\";\n        String accessToken = getAccessTokenFromRefreshToken();\n        this.httpclient = HttpClients.createDefault();\n        this.accessToken = accessToken;\n        this.httpGet = new HttpGet();\n        httpGet.addHeader(AUTHORIZATION, BEARER + accessToken);\n        this.httpPost = new HttpPost();\n        httpPost.addHeader(AUTHORIZATION, BEARER + accessToken);\n        this.httpPost.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n        this.httpPatch = new HttpPatch();\n        httpPatch.addHeader(AUTHORIZATION, BEARER + accessToken);\n        httpPatch.addHeader(CONTENT_TYPE, CONTENT_TYPE_VALUE);\n    }\n\n    @Override\n    public Boolean authorizeWithServiceAccount() {\n        HttpResponse response = null;\n        try {\n            String url = String.format(BIGQUERY_API_DOMAIN + \"/v2/projects/%s/datasets/%s\", projectId, datasetId);\n            this.httpGet.setURI(new URIBuilder(url).build());\n            response = this.httpclient.execute(this.httpGet);\n            if (response.getStatusLine().getStatusCode() != 200) {\n     ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2d21f894-a882-4904-8343-ea8b7c0e3922","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":676,"endLine":701,"content":"sInfo.getTokenDetail().setExpiry((Long) properties.get(EXPIRY));\n//        pnpConnectionsInfoDao.update(pnpConnectionsInfo);\n        return accessToken;\n    }\n\n    private Map<String, Object> convertTokenDetailToMap(BaseTokenDetail tokenDetail, Map properties) {\n        properties.put(ACCESS_TOKEN, CryptHandler.getInstance().decrypt(tokenDetail.getAccessToken()));\n        properties.put(REFRESH_TOKEN, CryptHandler.getInstance().decrypt(tokenDetail.getRefreshToken()));\n        properties.put(EXPIRY, tokenDetail.getExpiry());\n        properties.put(CLIENT_ID, tokenDetail.getClientId().getString());\n        properties.put(CLIENT_SECRET, tokenDetail.getClientSecret().getString());\n        return properties;\n    }\n\n    private String generateOrRefreshAccessToken(Map Properties) {\n        LOGGER.info(\"SNOWFLAKE :: Generating or Refreshing the Access Token\");\n        String refreshToken = Properties.get(REFRESH_TOKEN).toString();\n        String accessToken = Properties.get(ACCESS_TOKEN).toString();\n        String clientId = Properties.get(CLIENT_ID).toString();\n        String clientSecret = Properties.get(CLIENT_SECRET).toString();\n        String host = Properties.get(DATABASE_HOST).toString();\n        Long expiry = Long.valueOf(Properties.get(EXPIRY).toString());\n        if(null != expiry && expiry < System.currentTimeMillis()) {\n            LOGGER.info(\"SNOWFLAKE :: Access Token has expired. Hence, refreshing the access token\");\n            try {\n            Map accountMap = Gains","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"db97be93-2de3-4f95-80b3-333dab317a1b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":675,"endLine":699,"content":"ueClause);\n                }\n                INSERT_VALUE_CLAUSE.add(insertValueClause);\n            }\n\n            switch (ductDataOperation) {\n                case INSERT:\n                    mergeIntoQuery = String.format(MERGE_INTO_TARGET_TABLE_INSERT, absolutePathToTargetTable, absolutePathToTempStageTable,\n                            Joiner.on(COMMA).join(INSERT_COLUMN_CLAUSE), Joiner.on(COMMA).join(INSERT_VALUE_CLAUSE));\n                    break;\n                case UPSERT:\n                    mergeIntoQuery = String.format(MERGE_INTO_TARGET_TABLE_UPSERT, absolutePathToTargetTable, absolutePathToTempStageTable, Joiner.on(AND).join(ON_CLAUSE),\n                            Joiner.on(COMMA).join(SET_CLAUSE), Joiner.on(COMMA).join(INSERT_COLUMN_CLAUSE), Joiner.on(COMMA).join(INSERT_VALUE_CLAUSE));\n                    break;\n                case UPDATE:\n                    mergeIntoQuery = String.format(MERGE_INTO_TARGET_TABLE_UPDATE, absolutePathToTargetTable, absolutePathToTempStageTable, Joiner.on(AND).join(ON_CLAUSE),\n                            Joiner.on(COMMA).join(SET_CLAUSE));\n                    break;\n                default:\n                    throw new SQLException(\"Unsupported operation: \" + ductDataOperation);\n            }\n\n            try (Statement mergeStatement = this.connection.createStatement()) {\n                LOGGER.info(\"Merging temp stage table with target table. query: {}\", mergeIntoQuery);\n                mergeStatement.execute(mergeIntoQuery)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"18459ea8-0354-4636-9048-c4b8cf3a58bc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":307,"endLine":334,"content":"              LOGGER.info(\"[HUBSPOT] Sleeping for 15 secs as the api call to source failed for retry count : {}\", retryCount);\n                }\n                Thread.sleep((15 * 1000));\n            }\n        }\n\n        if (null != response) {\n            LOGGER.error(\"[HUBSPOT] The api call to source failed for retry count : {} due to status: {} , code :{}\", ALLOWED_RETRIES, response.getStatusLine(), response.getStatusLine().getStatusCode());\n            throw new Exception(AdapterErrorMessages.HUBSPOT_API_FETCH_FAILED.getTranslatedMessage() + response.getStatusLine());\n        } else {\n            throw new Exception(AdapterErrorMessages.HUBSPOT_API_FETCH_FAILED_WITH_MAX_RETRIES.getTranslatedMessage());\n        }\n    }\n\n    @Override\n    public InputStream getAssociatedObjects(GSHubspotAssociationEnum gsHubspotAssociationEnum, Integer objectId, Long pageNumber) throws Exception {\n        String url = BASE_API_URL + ASSOCIATION_END_POINT + objectId + \"/\" + HUBSPOT_DEFINED + \"/\" + GSHubspotAssociationEnum.getDefinitionId(gsHubspotAssociationEnum);\n        URIBuilder uriBuilder = new URIBuilder(url);\n        if (pageNumber != Long.MIN_VALUE) {\n            uriBuilder.addParameter(\"offset\", String.valueOf(pageNumber));\n        }\n        this.httpGet.setURI(uriBuilder.build());\n        HttpResponse response = this.httpclient.execute(httpGet);\n        return response.getEntity().getContent();\n    }\n\n    @Override\n    public List<String> getAssociatedObjectsV2(GSHubspotAssociation","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"31316881-ec82-4080-ab59-770e0dffb934","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/file/FileSplitter.java","startLine":88,"endLine":117,"content":"     boolean isFirstRequest = true;\n        while (bigFileLineIterator.hasNext() && fileSizeInMBs(chunkFile) < maxChunkedFileSizeInMB) {\n            try (OutputStream chunkFileStream = IOUtils.buffer(new FileOutputStream(chunkFile, true))) {\n                if (isFirstRequest) {\n                    //write header\n                    flushToFile(chunkFileStream, Lists.newArrayList(headerLine));\n                }\n                isFirstRequest = false;\n                long chunkCounter = 0;\n                List<String> lines = Lists.newArrayListWithCapacity(chunkLinesCount);\n\n                while (chunkCounter < chunkLinesCount && bigFileLineIterator.hasNext()) {\n                    lines.add(bigFileLineIterator.next());\n                    if (lines.size() >= chunkLinesCount) {\n                        flushToFile(chunkFileStream, lines);\n                        lines.clear();\n                    }\n                    chunkCounter++;\n                }\n                if (CollectionUtils.isNotEmpty(lines)) {\n                    flushToFile(chunkFileStream, lines);\n                }\n                LOGGER.info(\"Written {} records into chunked file {}\", chunkCounter, chunkFile.getAbsolutePath());\n            }\n        }\n        LOGGER.info(\"Closing chunk file : {} as it reached max size in MBs: {}\", chunkFile.getAbsolutePath(), fileSizeInMBs(chunkFile));\n        return chunkFile;\n    }\n\n    private void flushToFile(OutputStream chunkFileStream, List<String> lines) throws IOExcept","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3d6635af-e484-4fc5-b886-411b1cae2b85","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/bigquery/src/main/java/com/gainsight/integration/connector/service/GainsightBigQueryChannelServiceImpl.java","startLine":560,"endLine":586,"content":"              params.add(new BasicNameValuePair(\"grant_type\", \"refresh_token\"));\n                params.add(new BasicNameValuePair(\"client_id\", clientId));\n                params.add(new BasicNameValuePair(\"client_secret\", clientSecret));\n                params.add(new BasicNameValuePair(\"refresh_token\", refreshToken));\n                httpPost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\n                HttpResponse response = httpclient.execute(httpPost);\n                HttpEntity entity = response.getEntity();\n                if (response.getStatusLine().getStatusCode() != 200) {\n                    LOGGER.error(\"Failed to get acccess token fo big query\");\n                    throw new SystemException(BigQueryErrorCode.AUTHORIZATION_FAILED, HttpStatus.SC_BAD_REQUEST);\n                }\n                InputStream inputStream = entity.getContent();\n                String jsonResponse = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\n                Map<String, Object> map = MAPPER.readValue(jsonResponse, Map.class);\n                return map.get(\"access_token\").toString();\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception occurred while getting access token {}\", e);\n            throw new SystemException(BigQueryErrorCode.AUTHORIZATION_FAILED, HttpStatus.SC_BAD_REQUEST);\n        }\n    }\n\n\n    private Map<String, Object> createQueryParamsForBQ(int pageSize, String nextPage) throws\n            Exception {\n        Map<St","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bc062bb6-703e-4923-bb0e-efab3577d9b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":156,"endLine":191,"content":"s.isEmpty()) {\n        objects.addAll(views);\n      } else {\n        tables.stream().forEach(\n                table -> {\n                  Optional<Map<String, Object>> optionalView = views.stream().filter(view -> view.get(\"VIEW_NAME\").equals(table.get(\"TABLE_NAME\"))).findFirst();\n                  if (optionalView.isPresent()) {\n                    objects.add(optionalView.get());\n                  } else {\n                    objects.add(table);\n                  }\n                }\n        );\n      }\n    } catch (SQLException sqlException) {\n      log.error(\"[SAP DATASPHERE] Failed to fetch objects from SAP Hana: {}\", sqlException.getMessage(), sqlException);\n      throw new SystemException(String.format(\"[SAP DATASPHERE] Failed to connect to source due to %s\", sqlException.getMessage()));\n    } finally {\n      closeConnectionQuietly(null, null, tableStatement);\n      closeConnectionQuietly(null, null, viewStatement);\n      closeConnectionQuietly(this.connection, null, null);\n    }\n    return objects;\n  }\n\n  private List<Map<String, Object>> executeWithMapListHandler(PreparedStatement preparedStatement) {\n    try (ResultSet resultSet = preparedStatement.executeQuery()) {\n      return new MapListHandler().handle(resultSet);\n    } catch (SQLException sqlException) {\n      throw new SystemException(\"[SAP DATASPHERE] Failed to connect to source due to {}\", sqlException);\n    }\n  }\n\n\n  @Override\n  public Set<Map<String, Object>> listAllFields(String objectName, List<String> ign","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2345b625-9682-4b6b-bf56-6401cc9d7f6e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":1,"endLine":23,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.enums;\n\n\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport exception.SystemException;\nimport org.apache.olingo.commons.api.http.HttpStatusCode;\n\nimport java.util.Arrays;\n\npublic enum Operators {\n    EQ(\"=\", FilterOperator.EQ, \"$left = $right\", \"$left = $right\",\"$left = $right\",\"$left = $right\", \"equal\", \"$left =$right\"),\n    NE(\"!=\", FilterOperator.NE, \"$left <> $right\", \"$left <> $right\",\"$left != $right\",\"$left != $right\", \"not_equal\", \"$left !=$right\"),\n    LT(\"<\", FilterOperator.LT, \"$left < $right\", \"$left < $right\",\"$left < $right\",\"$left < $right\", \"less_than\", \"$left <$right\"),\n    LTE(\"<=\", FilterOperator.LTE, \"$left <= $right\", \"$left <= $right\",\"$left <= $right\",\"$left <= $right\", \"less_equal\", \"$left <=$right\"),\n    GT(\">\", FilterOperator.GT, \"$left > $right\", \"$left > $right\",\"$left > $right\",\"$left > $right\", \"greater_than\", \"$left >$right\"),\n    GTE(\">=\", FilterOperator.GTE, \"$left >= $right\", \"$left >= $right\",\"$left >= $right\",\"$left >= $right\", \"greater_equal\", \"$left >=$right\"),\n    IN(\"IN\", FilterOperator.IN, \"$left IN ($right)\", \"$left IN ($right)\",\"$left in ($right)\",null, \"in\", null),\n    NOT_IN(\"Not In\", FilterOperator.NOT_IN, \"$left NOT IN ($right)\", \"$left NOT IN ($right)\",\"$left not in ($right)\",null, \"not_in\", null),\n    LIKE(\"Like\", FilterOperator.CONTAINS, \"$left LIKE $right\", \"$left LIKE $rig","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05865e1a-f881-4ec4-a027-ca7f2ec8329e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":274,"endLine":302,"content":"{\n\n        HashMap<String, List<String>> response =  gainsightHubspotFetchService.getAssociatedObjects(new ArrayList<String>(Arrays.asList(\"1342\", \"299\")), \"CONTACT_TO_COMPANY\",\n                    \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(response != null, \"No associations found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity PRODUCT Properties\")\n    @Order(4)\n    void testGetProductProperties() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityProperties(\"PRODUCT\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.assertTrue(inputStream != null, \"No data found\");\n        String jsonDataResponse = IOUtils.toString(inputStream);\n\n        ArrayList<Object> productMetaData = OBJECT_MAPPER.readValue(jsonDataResponse, ArrayList.class);\n        Assertions.assertNotNull(productMetaData, \"No Metadata found\");\n    }\n\n    @Test\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"Entity TICKET Properties\")\n    @Order(4)\n    void testGetTicketProperties() throws Exception {\n        InputStream inputStream = gainsightHubspotFetchService.getEntityProperties(\"TICKET\",\n                \"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertion","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ceeaf0c-9550-4bab-950f-9e1ee7ecb417","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":720,"endLine":765,"content":"url = nextPageUrl;\n        } else if (api == null) {\n            if (metadataPath) {\n                url = BASE_API_URL + GSHubSpotEntityEnum\n                        .getLatestMetaDataApiPath(GSHubSpotEntityEnum.getInstance(entityName));\n            } else {\n                url = BASE_API_URL + GSHubSpotEntityEnum\n                        .getLatestDataApiPath(GSHubSpotEntityEnum.getInstance(entityName));\n            }\n        }\n        else\n            url = BASE_API_URL + api;\n\n        uriBuilder = getUriBuilder(url);\n        return uriBuilder;\n    }\n\n    private URIBuilder getUriBuilder(String url) throws Exception {\n        URIBuilder uriBuilder;\n        switch (this.authenticationType) {\n            case API_KEY:\n                uriBuilder = new URIBuilder(url).addParameter(HAPIKEY, this.apiKey);\n                break;\n\n            case OAUTH2:\n                uriBuilder = new URIBuilder(url);\n                break;\n\n            default:\n                throw new Exception(\"[HUBSPOT] Unsupported Authentication Type.\");\n        }\n        return uriBuilder;\n    }\n\n\n    private void validate() {\n\n        final AuthenticationType type = this.authenticationType;\n\n        switch (type) {\n            case API_KEY:\n                Objects.requireNonNull(apiKey, \"[HUBSPOT] API Key Can't be NULL\");\n                break;\n            case OAUTH2:\n                Objects.requireNonNull(clientId, \"[HUBSPOT] Client ID  Can't be NULL\");\n                Objects.requireNonNull(clientSecre","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45eeb434-e0ef-47b5-8965-40d0033d1cd6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotMetaDataUtil.java","startLine":63,"endLine":77,"content":"         if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.companies.results[0].id\", \"companyId\", \"associations.companies.results[0].id\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n                } else {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"objectId\", \"objectId\", \"objectId\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"companyId\", \"companyId\", \"companyId\", \"string\", \"text\", GSHubSpotEntityEnum.COMPANY.name()));\n                    addCommonDeletedFieldRef(gainsightHubspotFieldDescriptions);\n                    addCommonPortalIdFieldRef(gainsightHubspotFieldDescriptions, entity);\n                }\n                break;\n            case CALL:\n                if (isApiVersionV3) {\n                    gainsightHubspotFieldDescriptions.add(createFieldDescription(\"id\", \"id\", \"id\", \"string\", \"text\"));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.contacts.results[*].id\", \"Associated Contact Ids\", \"associations.contacts.results[*].id\", \"string\", \"text\", GSHubSpotEntityEnum.CONTACT.name()));\n                    gainsightHubspotFieldDescriptions.add(createFieldDescriptionWithReference(\"associations.co","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"608658e2-7959-4231-a810-e096061ddeb4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/utils/HttpUrlConnectionUtils.java","startLine":143,"endLine":177,"content":"().substring(0, sb.length() - 1);\n    }\n\n    public HttpResponse get(String requestURL, Map<String, Object> headers, Map<String, Object> queryParams)\n            throws Exception {\n        return get(requestURL, headers, 15000, false, queryParams);\n    }\n\n    public HttpResponse post(String requestURL, Map<String, Object> headers, String body, int timeout) throws IOException {\n        HttpResponse resp = new HttpResponse();\n        HttpURLConnection httpConn = null;\n        try {\n            URL url = new URL(requestURL);\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setConnectTimeout(timeout);\n            httpConn.setReadTimeout(timeout);\n            httpConn.setUseCaches(false);\n            httpConn.setRequestMethod(\"POST\");\n            addHeaders(httpConn, headers);\n            httpConn.setDoInput(true);\n            httpConn.setDoOutput(true);\n            OutputStreamWriter writer = new OutputStreamWriter(\n                    httpConn.getOutputStream());\n            writer.write(body);\n            writer.flush();\n            InputStream is = null;\n            if (httpConn != null) {\n                is = httpConn.getInputStream();\n            } else {\n                throw new IOException(\"Connection is not established.\");\n            }\n            resp.setResponseIs(is, false);\n            resp.setResponseCode(httpConn.getResponseCode());\n            resp.setResponseHeaders(httpConn.getHeaderFields());\n        } catch (IOException e)","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a4edbae2-f0db-44b5-b21c-d10913491d08","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":262,"endLine":284,"content":"mUUID().toString(), \"-\", \"\");\n            //copy table data into staging table file\n            String copyManagerQuery = \"copy into @\" + tempStageName + \"/\" + stageFileName +\n                    \" from (\" + selectQuery + \") \" +\n                    \"file_format = (type = 'JSON' NULL_IF = ('\\\\N', 'NULL', 'NUL', '') strip_outer_array = true STRIP_NULL_VALUES = TRUE DATE_FORMAT = 'YYYY-MM-DD'  \" +\n                    \"compression = 'NONE') \" +\n                    \" OVERWRITE = TRUE SINGLE = FALSE MAX_FILE_SIZE = \" + maxFileSize;\n            LOGGER.info(\"Executing query : {}\", copyManagerQuery);\n            preparedStatement = this.connection.prepareStatement(copyManagerQuery);\n            preparedStatement.executeQuery();\n\n            //download files from staging to local\n            String downloadFilesQuery = \"get @\" + tempStageName + \"/\" + stageFileName + \" file://\" + System.getProperty(\"user.dir\") + \"/stagingFile\";\n            LOGGER.info(\"Executing query : {}\", downloadFilesQuery);\n            preparedStatement = this.connection.prepareStatement(downloadFilesQuery);\n            preparedStatement.executeQuery();\n\n            //list the file paths\n            String listLocalStagingFilesQuery = \"list @\" + tempStageName + \"/\" + stageFileName;\n            LOGGER.info(\"Executing query : {}\", listLocalStagingFilesQuery);\n            preparedStatement = this.connection.prepareStatement(listLocalStagingFilesQuery);\n            resultSet = preparedStatement.executeQuery();\n        ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8538518e-8be3-4883-8db3-064b93bea586","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/zoom/src/main/java/com/gainsight/integration/connector/zoom/service/GainsightZoomChannelServiceImpl.java","startLine":89,"endLine":122,"content":"r.build());\n            try {\n                response = this.httpclient.execute(httpGet);\n\n            } catch (Exception exception) {\n                LOGGER.error(\"[ZOOM] error in fetching data \", exception);\n            }\n\n        } catch (Exception exception) {\n            LOGGER.error(\"[ZOOM] error in searching data \", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public InputStream getPaginatedEntityData(String entityName, List<String> projections, String nextPageUrl, String api) throws Exception {\n        URIBuilder uriBuilder = new URIBuilder(BASE_API_URL + api + nextPageUrl);\n\n        this.httpGet.setURI(uriBuilder.build());\n        LOGGER.info(\"[ZOOM] URI being hit : {}\", this.httpGet.getURI());\n        HttpResponse response = null;\n\n        for (int retryCount = 0; retryCount < ALLOWED_RETRIES; retryCount += 1) {\n            try {\n                response = this.httpclient.execute(httpGet);\n                if (response.getStatusLine().getStatusCode() == 200) {\n                    return response.getEntity().getContent();\n                } else if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    LOGGER.error(\"[ZOOM] Access token expired, trying to regenerate...\");\n                    throw new Exception(AdapterErrorMessages.ZOOM_ACCESS_TOKEN_EXPIRED.getTranslatedMessage());\n                }\n      ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b089ca1b-91a6-4577-b45c-4cf10935135d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.connector.sapHana;\n\nimport com.gainsight.bean.base.connection.SAPDatasphereConnectionDetail;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.ColumnMapping;\nimport com.gainsight.integration.bean.DuctDataOperation;\nimport com.gainsight.integration.bean.db.common.AuthorizationType;\nimport com.gainsight.integration.bean.db.common.PNPConnectionsInfo;\nimport com.gainsight.integration.bean.i18n.AdapterErrorMessages;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo;\nimport com.gainsight.utils.CryptHandler;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.Lists;\nimport com.google.gson.Gson;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVWriter;\nimport exception.SystemException;\nimport lombok.SneakyThrows;\nimport org.apache.commons.dbutils.handlers.MapListHandler;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.sql.Date;\nimport java.sql.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeFormatterBuilder;\nimport java.time.temporal.ChronoField","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"76419f53-29fe-488b-80cc-8a33e2cd5216","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/databricks/src/main/java/com/gainsight/integration/connector/databricks/GainsightDatabricksChannelServiceImpl.java","startLine":135,"endLine":159,"content":"\n\n    public GainsightDatabricksChannelServiceImpl(Map properties, boolean isValueEncrypted, AuthorizationType authorizationType) {\n        File trustStoreFile = null;\n        File keyStoreFile = null;\n        try {\n            this.schema = properties.get(UCConstants.GSIntegration.SCHEMA_NAME).toString();\n            this.db = properties.get(UCConstants.GSIntegration.DATABASE_NAME).toString();\n\n            Properties prop = new Properties();\n            switch (authorizationType) {\n                case BASIC_AUTH:\n                    prop.put(AUTH_MECH, \"3\");\n                    this.userName = properties.get(UCConstants.GSIntegration.USERNAME).toString();\n                    this.password = (isValueEncrypted ? CryptHandler.getInstance().decrypt((byte[]) properties.get(UCConstants.GSIntegration.PASSWORD)) :\n                            properties.get(UCConstants.GSIntegration.PASSWORD).toString());\n\n                    prop.put(UID, this.userName);\n                    prop.put(PWD, this.password);\n                    break;\n                case OAUTH:\n                    this.oauthClientId = properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_ID).toString();\n                    this.oauthClientSecret = (isValueEncrypted ? CryptHandler.getInstance().decrypt((byte[]) properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET)) :\n                            properties.get(UCConstants.GSIntegration.OAUTH_CLIENT_SECRET).toString());\n                    prop.put(AUTH_MECH, \"11\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05e93a17-e2ed-4482-8244-1d84e9ed4329","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":281,"endLine":308,"content":"ery : {}\", listLocalStagingFilesQuery);\n            preparedStatement = this.connection.prepareStatement(listLocalStagingFilesQuery);\n            resultSet = preparedStatement.executeQuery();\n            List<String> filePaths = new ArrayList<>();\n            while (resultSet.next()) {\n                filePaths.add(resultSet.getString(\"name\").replace(tempStageName, System.getProperty(\"user.dir\") + \"/stagingFile\"));\n            }\n            LOGGER.info(\"Total of {} files got created\", filePaths.size());\n            if (CollectionUtils.isNotEmpty(filePaths)) {\n                for (String eachFilePath : filePaths) {\n                    LOGGER.info(\"Extracted file path : {}\", eachFilePath);\n                    dataFiles.add(new File(eachFilePath));\n                }\n            } else {\n                LOGGER.error(\"copyManager did not yield any result with multipart execution.\");\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"Exception in copyManager : {}\", e);\n            try {\n                return fallBackResult(selectQuery,fieldInfos,objectName,filter,ntz_fields,ntz_map);\n            } catch (SQLException ex) {\n                LOGGER.error(\"error occured while snowflake fetch using pagination {}\",ex);\n                throw new RuntimeException(ex);\n            }\n        } finally {\n            if (this.connection != null) {\n                try {\n                    this.connection.prepareStatement(\"drop stage if exists \" + tempStageName).executeQue","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4f29fc0-7f62-45c6-875b-a3a39f508e7d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/snowflake/src/main/java/com/gainsight/integration/connector/snowflake/GainsightSnowflakeChannelServiceImpl.java","startLine":304,"endLine":334,"content":"         }\n        } finally {\n            if (this.connection != null) {\n                try {\n                    this.connection.prepareStatement(\"drop stage if exists \" + tempStageName).executeQuery();\n                } catch (SQLException se) {\n                    LOGGER.error(\"Sql Exception while dropping temp stage. Ignoring..\", se);\n                }\n            }\n            closeQuietly(this.connection, resultSet, preparedStatement);\n        }\n        return dataFiles;\n    }\n\n\n    @Override\n    public List<File> fetchData(String objectName, String selectQuery, int maxFileSize,List<FieldInfo> fieldInfos,String filter,  Set<String> ntz_fields, Map<String, String> ntz_map,int limit,int fetchSize){\n        String tempStageName = null;\n        ResultSet resultSet = null;\n        PreparedStatement preparedStatement = null;\n        List<File> dataFiles = new ArrayList<>();\n        try {\n            String alterSession = \"alter session set timestamp_ltz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery();\n\n            alterSession = \"alter session set timestamp_ntz_output_format = 'YYYY-MM-DDTHH24:MI:SS.FF3Z'\";\n            LOGGER.info(\"Executing query : {}\", alterSession);\n            preparedStatement = this.connection.prepareStatement(alterSession);\n            preparedStatement.executeQuery(","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0cafe9c-0e99-45d6-bdec-f617c7a024e5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelServiceImpl.java","startLine":447,"endLine":479,"content":"   response = this.httpclient.execute(httpPost);\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n                return response;\n            }\n        } catch (Exception exception) {\n            LOGGER.error(\"[HUBSPOT] Error in Creating single data\", exception);\n        } finally {\n            MAPPER.configure(DeserializationFeature.USE_LONG_FOR_INTS, false);\n        }\n        return response;\n    }\n\n    @Override\n    public HttpResponse updateSingleDate(GSHubSpotEntityEnum gsHubSpotEntityEnum, Map<String, Object> data, String id) throws Exception {\n        HttpResponse response = null;\n        try {\n            String url = BASE_API_URL + GSHubSpotEntityEnum\n                    .getWriteDataApiPath(gsHubSpotEntityEnum) + \"/\" + id;\n            URIBuilder uriBuilder = new URIBuilder(url);\n            this.httpPatch.setURI(uriBuilder.build());\n            Map<String, Object> payload = new HashMap<>();\n            payload.put(\"properties\", data);\n            StringEntity stringEntity = new StringEntity(new ObjectMapper().writeValueAsString(payload), ContentType.APPLICATION_JSON);\n            this.httpPatch.setEntity(stringEntity);\n            try {\n                response = this.httpclient.execute(httpPatch);\n            } catch (Exception exception) {\n                LOGGER.error(\"[HUBSPOT] Error in Updating single data\", exception);\n                return response;\n            }\n\n        } catch ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48fc8136-be24-4b87-a037-d46556b30258","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotChannelService.java","startLine":61,"endLine":70,"content":"bspotSearchRequest) throws Exception;\n    HttpResponse searchOwnerData() throws Exception;\n\n     Map<String, Object> getFileMetaData(String fileId, boolean signedUrl);\n\n    Map<String, Object> uploadFile(File file, Map<String, Object> options, String folderId);\n\n    HttpResponse getCustomObjects(String api) throws Exception;\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fde112fe-4362-4c2c-ae7e-444c78505f3d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/service/MSDynamicsDataServiceV2Impl.java","startLine":289,"endLine":312,"content":";\n        if (resolvePicklistOptions) {\n            optionSetMap = prepareOptionsetMap(objectDefinition);\n        } else {\n            multiPicklistColumns = objectDefinition.getFields().stream().filter(\n                    gsFieldDefinition -> getRecordsRequest.getProjections().contains(gsFieldDefinition.getFieldName())\n            ).collect(Collectors.toList()).stream().filter(\n                    gsFieldDefinition -> (gsFieldDefinition.getMeta().getOriginalDataType().equalsIgnoreCase(MULTISELECTDROPDOWNLIST))\n            ).map(gsFieldDefinition -> gsFieldDefinition.getFieldName()).collect(Collectors.toList());\n        }\n\n        Map<String, Set<String>> selectAndExpandGroup = groupProjectionBySelectAndExpand(getRecordsRequest.getProjections());\n        Set<String> expandGroup = Sets.newHashSet();\n        Set<String> selectGroup = Sets.newHashSet();\n        Map<String, String> logicalNameToExternalType = new HashMap<>(objectDefinition.getFields().size());\n        objectDefinition.getFields().forEach(gsFieldDefinition ->\n                logicalNameToExternalType.put(gsFieldDefinition.getFieldName(), gsFieldDefinition.getMeta().getOriginalDataType())\n        );\n\n        Map<String, Set<String>> modifiedProjectionToOriginalProjections = Maps.newHashMap();\n        Map<String, String> modifiedExpandToOriginalFieldName = Maps.newHashMap();\n        List<Relationship> relationships = Lists.newArrayList();\n\n        if (CollectionUtils.isNotEmpty(selectAndExpandGroup.get(PROJECTION_S","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"43d61998-90c0-40c6-b389-af43ac58f16d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sfdc/src/main/java/com/gainsight/integration/connector/sfdc/service/SalesforceBulkFetchService.java","startLine":160,"endLine":185,"content":".SYSTEM_ERROR, 500);\n        }\n    }\n\n    private String closeBulkJobForQuery() {\n        SalesforceJob jobInfo = new SalesforceJob();\n        jobInfo.setState(\"Closed\");\n        return JsonUtil.toJsonString(jobInfo);\n    }\n\n    public List<File> checkBatchStatus(String sfdcJobId, String batchId, PNPConnectionsInfo pnpConnectionsInfo, String clientId,\n                                       String clientSecret, String refreshToken, String sfdcApiversion, String filePath, String fileNamePrefix) throws Exception {\n\n        Document batchDetails = pollForBatchToComplete(pnpConnectionsInfo, clientId, clientSecret, refreshToken, sfdcJobId, 0, sfdcApiversion);\n\n        String batchState = UCXMLUtility.getElementValueById(batchDetails, \"state\");\n        int numberRecordsProcessed = Integer.parseInt(UCXMLUtility.getElementValueById(batchDetails, \"numberRecordsProcessed\"));\n        String batchStateMessage = UCXMLUtility.getElementValueById(batchDetails, \"stateMessage\");\n\n        if (batchState.equals(SalesforceBatchStatus.FAILED.batchState())) {\n            Pattern pattern = Pattern.compile(FIELD_PATTERN);\n            Matcher matcher = pattern.matcher(batchStateMessage);\n            if (matcher.find()) {\n                String fieldName = matcher.group(1);\n                String comments = String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.\\n\" +\n                        \"Remove the field from conne","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d7d5ef67-e607-4e25-9a69-b52eec0a8f6f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/Operators.java","startLine":22,"endLine":32,"content":", FilterOperator.NOT_IN, \"$left NOT IN ($right)\", \"$left NOT IN ($right)\",\"$left not in ($right)\",null, \"not_in\", null),\n    LIKE(\"Like\", FilterOperator.CONTAINS, \"$left LIKE $right\", \"$left LIKE $right\",\"$left LIKE $right\",\"$left LIKE $right\", null, null),\n    CONTAINS(\"Like\", FilterOperator.CONTAINS, \"$left ILIKE $right\", \"$left LIKE $right\",\"$left ~ $right\",null, \"contains\", \"$left LIKE$right\"),\n    NOT_CONTAINS(\"Like\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $right\", \"$left NOT LIKE $right\",\"$left !~ $right\", null, \"not_contains\", \"$left NOT LIKE$right\"),\n    DOES_NOT_CONTAINS(\"Like\", FilterOperator.DOES_NOT_CONTAINS, \"$left NOT ILIKE $right\", \"$left NOT LIKE $right\",\"$left !~ $right\", null, null, \"$left NOT LIKE$right\"),\n    STARTS_WITH(\"LIKE\", FilterOperator.STARTS_WITH, \"$left ILIKE $right\", \"$left LIKE $right\",\"$left ~ $right\", null, \"starts_with\", \"$left STARTSWITH$right\"),\n    ENDS_WITH(\"Ends With\", FilterOperator.ENDS_WITH, \"$left ILIKE $right\", \"$left LIKE $right\",null, null, \"ends_with\", \"$left ENDSWITH$right\"),\n    INCLUDES(\"includes\", FilterOperator.INCLUDES, \"$left IN ($right)\", \"$left IN ($right)\",\"$left in ($right)\",null, \"include_any\", null),\n    EXCLUDES(\"excludes\", FilterOperator.EXCLUDES, \"$left NOT IN ($right)\", \"$left NOT IN ($right)\",\"$left not in ($right)\",null, \"exclude_any\", null),\n    IS_NULL(\"isNull\", FilterOperator.IS_NULL, \"$left is Null\", \"$left IS NULL\",\"$left is Null\",\"$left IS NULL\", null, \"$left ISEMPTY\"),\n    IS_NOT_NULL(\"isNot","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4c5828bf-ecdf-4aa9-9442-e57b772d38fb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap-hana/src/main/java/com/gainsight/integration/connector/sapHana/GainsightSAPHanaDatasphereServiceImpl.java","startLine":221,"endLine":253,"content":"ews for the object\n      if (viewExistsResultSet.next()) {\n        int viewCount = viewExistsResultSet.getInt(COUNT);\n        if (viewCount > 0) {\n          viewExists = true;\n        }\n      }\n\n      if (viewExists) {\n        viewSchemaStatement = connection.prepareStatement(VIEW_DESCRIBE_QUERY);\n        viewSchemaStatement.setString(1, this.schema);\n        viewSchemaStatement.setString(2, objectName);\n        result = nullSafeSet(executeWithMapSetHandler(viewSchemaStatement, ignorableSystemFields));\n      } else if (tableExists) {\n        tableSchemaStatement = connection.prepareStatement(TABLE_DESCRIBE_QUERY);\n        tableSchemaStatement.setString(1, this.schema);\n        tableSchemaStatement.setString(2, objectName);\n        result = nullSafeSet(executeWithMapSetHandler(tableSchemaStatement, ignorableSystemFields));\n      } else {\n        throw new SystemException(String.format(\"[SAP DATASPHERE] Table or View %s does not exist\", objectName));\n      }\n    } catch (SQLException sqlException) {\n      log.error(\"[SAP DATASPHERE] Failed to fetch fields from source: {}\", sqlException.getMessage(), sqlException);\n      throw new SystemException(String.format(\"[SAP DATASPHERE] Failed to connect to source due to %s\", sqlException.getMessage()));\n    } finally {\n      closeConnectionQuietly(this.connection, null, null);\n    }\n    return result;\n  }\n\n\n  @SneakyThrows\n  private Set<Map<String, Object>> executeWithMapSetHandler(PreparedStatement preparedStatement, List<String> ignor","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e3daa16e-f550-4a4e-a647-f5d94d2189ff","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GainsightHubspotFieldDescriptionV3.java","startLine":116,"endLine":183,"content":"his.options = options;\n    }\n\n    public String getDisplayOrder() {\n        return displayOrder;\n    }\n\n    public void setDisplayOrder(String displayOrder) {\n        this.displayOrder = displayOrder;\n    }\n\n    public boolean isCalculated() {\n        return calculated;\n    }\n\n    public void setCalculated(boolean calculated) {\n        this.calculated = calculated;\n    }\n\n    public boolean isExternalOptions() {\n        return externalOptions;\n    }\n\n    public void setExternalOptions(boolean externalOptions) {\n        this.externalOptions = externalOptions;\n    }\n\n    public boolean isArchived() {\n        return archived;\n    }\n\n    public void setArchived(boolean archived) {\n        this.archived = archived;\n    }\n\n    public boolean isHasUniqueValue() {\n        return hasUniqueValue;\n    }\n\n    public void setHasUniqueValue(boolean hasUniqueValue) {\n        this.hasUniqueValue = hasUniqueValue;\n    }\n\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    public void setHidden(boolean hidden) {\n        this.hidden = hidden;\n    }\n\n    public boolean isFormField() {\n        return formField;\n    }\n\n    public void setFormField(boolean formField) {\n        this.formField = formField;\n    }\n\n    public ModificationMetadata getModificationMetadata() {\n        return modificationMetadata;\n    }\n\n    public void setModificationMetadata(ModificationMetadata modificationMetadata) {\n        this.modificationMetadata = modificationMetadata;\n    }\n\n    public boolean isHub","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"734bb9e1-606e-4253-a7ef-24241a1b170d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/dynamics/src/main/java/com/gainsight/integration/connector/dynamics/util/MSDynamicsObjectUtil.java","startLine":184,"endLine":203,"content":"\n                Map<String, Object> meta = new HashMap<>();\n\n                fieldDefinition.put(FIELD_NAME, attribute.get(\"LogicalName\"));\n                fieldDefinition.put(LABEL, poll(attribute, \"DisplayName\",\n                        DynamicsGainsightUtils.valueOf(MSDynamicsObjectUtil.parseDisplayName(attribute, DynamicsGainsightUtils.valueOf(attribute.get(\"LogicalName\"))))));\n                fieldDefinition.put(DB_NAME, poll(attribute, \"LogicalName\"));\n                fieldDefinition.put(OBJECT_NAME, poll(attribute, \"EntityLogicalName\"));\n\n                //set datatype\n                String externalDataType = DynamicsGainsightUtils.valueOf(attribute.get(\"AttributeType\"));\n                if (dataTypeMappings.stream().anyMatch(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(externalDataType))) {\n                    dataTypeMappingsForField = dataTypeMappings.stream().filter(dataTypeMapping -> dataTypeMapping.getExternalDatatype().equalsIgnoreCase(externalDataType)).findFirst().get();\n\n                    if (DataType.DATETIME.getValue().equalsIgnoreCase(dataTypeMappingsForField.getExternalDatatype())) {\n                        Map<String, Object> dateTimeBehaviorMap = (Map) attribute.get(\"DateTimeBehavior\");\n                        DateTimeBehavior dateTimeBehavior = DateTimeBehavior.forValue(DynamicsGainsightUtils.valueOf(dateTimeBehaviorMap.get(\"Value\")));\n\n                        switch (dateTimeBehavior) {\n                            case ","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0decd91-f024-40c1-98d8-b382a897079c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/test/java/com/gainsight/integration/connector/hubspot/GainsightHubspotConnectorTest.java","startLine":65,"endLine":87,"content":" @Order(2)\n    void getEntityProperties(String entityName) throws Exception {\n        InputStream propertiesStream = gainsightHubspotFetchService.getEntityProperties(entityName,\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        List<GainsightHubspotFieldDescription> result = OBJECT_MAPPER.readValue(IOUtils.toString(propertiesStream), new TypeReference<List<GainsightHubspotFieldDescription>>() {});\n        Assertions.assertTrue(result.size()>0,\"No properties found for entity with name - \"+entityName);\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"COMPANY\",\"CONTACT\"})\n    @Tag(\"IntegrationTest\")\n    @DisplayName(\"List Entity Data\")\n    @Order(3)\n    void getEntityData(String entityName) throws Exception {\n        List<String> projectionList = new ArrayList();\n        projectionList.add(\"name\");\n        Assertions.assertTrue(gainsightHubspotFetchService.getEntityData(entityName,projectionList,\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\").available() > 0);\n    }\n\n    @Test\n    void testRefreshAccessToken() throws Exception {\n        GainsightHubspotChannelService gainsightHubspotChannelService =\n                this.gainsightHubspotChannelFactory.getChannelServiceWithOAuth20(\"8481642d-66d1-4a8d-8b74-65299f91d5d6\", \"f6224a81-2103-442f-8729-c454ee503f9d\", \"2c26e31f-48c4-4e0f-9384-8cabace029ab\");\n        Assertions.asser","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"defa51b3-2440-4b11-a189-39fe398eef0e","type":"enum","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/bean/GSHubSpotEntityEnum.java","startLine":28,"endLine":50,"content":"\"DEAL\", \"deals/v1/deal/paged?includeAssociations=true&limit=250\", \"/deals/v1/deal/recent/modified\",\n            \"properties/v1/deals/properties\", \"offset\", \"offset\", \"since\",\n            \"hasMore\", \"deals\", \"properties\", \"crm/v3/objects/deals?limit=100&associations=company,contact\",\n            \"crm/v3/properties/deal\",\"crm/v3/objects/deals\",\"deals\"),\n\n    PRODUCT(\"PRODUCT\", \"crm-objects/v1/objects/products/paged\", null,\n            \"properties/v1/products/properties\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"objects\", \"properties\", \"crm/v3/objects/products?limit=100\",\n            \"crm/v3/properties/product\",\"crm/v3/objects/products\", \"products\"),\n\n    TICKET(\"TICKET\", \"crm-objects/v1/objects/tickets/paged\", null,\n            \"properties/v2/tickets/properties\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"objects\", \"properties\", \"crm/v3/objects/tickets?limit=100&associations=company,contact\",\n            \"crm/v3/properties/ticket\",\"crm/v3/objects/tickets\",\"tickets\"),\n\n    CALL(\"CALL\", \"\", null,\n                   \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"calls\", \"properties\", \"crm/v3/objects/calls?limit=100&associations=company,contact\",\n                   \"crm/v3/properties/call\",\"crm/v3/objects/calls\", \"calls\"),\n\n    EMAIL(\"EMAIL\", \"\", null,\n                   \"\", \"offset\", \"offset\", StringUtils.EMPTY,\n            \"hasMore\", \"emails\", \"properties\", \"crm/v3/objects/emails?limit=100&associations=company,contact\"","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1b0fb6e2-15e2-4d12-825d-f2db566ebf11","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":142,"endLine":170,"content":"== HttpStatus.SC_UNAUTHORIZED){\n                LOGGER.error(\"Access token expired\");\n                throw new Exception(\"Access token expired\");\n            } else {\n                LOGGER.error(\"Sleeping for 15 secs as the api call to Ecosystem failed for retry count : {} due to : {}, code :{}\",\n                        counter, response.getStatusLine(), response.getStatusLine().getStatusCode());\n                Thread.sleep((15 * 1000));\n            }\n            counter++;\n        }\n        if (counter > maxRetryCalls && response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n            LOGGER.error(\"Retries exhausted!!! but the call is not successful. Status code : {}. Status : {}\", response.getStatusLine(), response.getStatusLine());\n            throw new Exception(\"Fetch failed due to : \" + response.getStatusLine());\n        }\n        return response;\n    }\n\n    private URIBuilder getUriForEntityLatest(String entityName, int pageSize, int pageNumber)\n            throws Exception {\n        String url;\n        URIBuilder uriBuilder;\n        url = DeploymentProperties.getDeploymentProperties().getValue(\"ecosystem.connector.base.url\") + GainsightEcosystemEntityEnum\n                    .getDataApiPath(GainsightEcosystemEntityEnum.getInstance(entityName));\n        uriBuilder = getUriBuilder(url, pageSize, pageNumber);\n        return uriBuilder;\n    }\n\n    private URI getURI(String entityName, Map<String, String> queryParams) throws Exception {\n        String url = D","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ea46723a-1600-4b02-b611-27171d011527","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/sap/src/main/java/com/gainsight/integration/connector/sap/OlingoSampleApp.java","startLine":1,"endLine":30,"content":"package com.gainsight.integration.connector.sap;\n\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.olingo.client.api.ODataClient;\nimport org.apache.olingo.client.api.communication.request.cud.ODataEntityCreateRequest;\nimport org.apache.olingo.client.api.communication.request.cud.ODataEntityUpdateRequest;\nimport org.apache.olingo.client.api.communication.request.cud.UpdateType;\nimport org.apache.olingo.client.api.communication.request.retrieve.EdmMetadataRequest;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntityRequest;\nimport org.apache.olingo.client.api.communication.request.retrieve.ODataEntitySetIteratorRequest;\nimport org.apache.olingo.client.api.communication.response.ODataEntityCreateResponse;\nimport org.apache.olingo.client.api.communication.response.ODataEntityUpdateResponse;\nimport org.apache.olingo.client.api.communication.response.ODataRetrieveResponse;\nimport org.apache.olingo.client.api.domain.ClientCollectionValue;\nimport org.apache.olingo.client.api.domain.ClientComplexValue;\nimport org.apache.olingo.client.api.domain.ClientEntity;\nimport org.apache.olingo.client.api.domain.ClientEntitySet;\nimport org.apache.olingo.client.api.domain.ClientEntitySetIterator;\nimport org.apache.olingo.cl","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"19707034-36a4-4a29-9299-504dfaa560e6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/common/BeanPropertyTracker.java","startLine":1,"endLine":59,"content":"/*\n * Copyright 2017 Gainsight. All rights reserved.\n */\n\npackage com.gainsight.integration.bean.common;\n\n/**\n * @author : Vipin Sharma\n * @CreatedOn : 22/10/16, 02:54\n */\npublic class BeanPropertyTracker {\n\n  private String propertyName;\n  private Object oldValue;\n  private Object newValue;\n\n  /**\n   * @param propertyName : Name of the property that got changes\n   * @param oldValue : Old Value of the property\n   * @param newValue : New Value of the property\n   */\n  public BeanPropertyTracker(String propertyName, Object oldValue, Object newValue) {\n    this.propertyName = propertyName;\n    this.oldValue = oldValue;\n    this.newValue = newValue;\n  }\n\n  /**\n   * @return : returns the propertyName\n   */\n  public String getPropertyName() {\n    return propertyName;\n  }\n\n\n  /**\n   * @return : returns the oldValue\n   */\n  public Object getOldValue() {\n    return oldValue;\n  }\n\n\n  /**\n   * @return : returns the newValue\n   */\n  public Object getNewValue() {\n    return newValue;\n  }\n\n  @Override\n  public String toString() {\n    return \"BeanPropertyTracker{\" +\n        \"propertyName='\" + propertyName + '\\'' +\n        \", oldValue=\" + oldValue +\n        \", newValue=\" + newValue +\n        '}';\n  }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7f9f288-e2ae-48b3-88d7-2c2cf77fcb58","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/aha/src/main/java/com/gainsight/integration/connector/aha/bean/GainsightAhaFieldDescription.java","startLine":1,"endLine":37,"content":"package com.gainsight.integration.connector.aha.bean;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n/**\n * @author puneetsaluja\n * @created 12/03/23\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class GainsightAhaFieldDescription {\n    private String name;\n    private String label;\n    private String type;\n    private String description;\n    private String apiName;\n\n    public String getName() { return name; }\n\n    public void setName(String name) { this.name = name; }\n\n    public String getLabel() { return label; }\n\n    public void setLabel(String label) { this.label = label; }\n\n    public String getType() { return type; }\n\n    public void setType(String type) { this.type = type; }\n\n    public String getDescription() { return description; }\n\n    public void setDescription(String description) { this.description = description; }\n\n    public String getApiName() { return apiName; }\n\n    public void setApiName(String apiName) { this.apiName = apiName; }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dba87813-1c83-477c-b53e-43815d70405c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-core/src/main/java/com/gainsight/integration/bean/enums/common/ConnectorType.java","startLine":102,"endLine":140,"content":"or\n    @com.fasterxml.jackson.annotation.JsonCreator\n    public static ConnectorType getConnectorType(String connector) {\n        if (connector == null) {\n            return null;\n        }\n        return CONNECTOR_MAP.get(connector.toUpperCase());\n    }\n\n    @JsonCreator\n    public static ConnectorType fromString(String connector) {\n        if (connector == null) {\n            return null;\n        }\n        return CONNECTOR_MAP.get(connector.toUpperCase());\n    }\n\n    /**\n     * This code is for case-insensitive enums.\n     *\n     * @param value The value\n     * @return The enum\n     */\n    public static ConnectorType forValue(String value) {\n        if (value == null) {\n            return null;\n        }\n        return CONNECTOR_MAP.get(value.toUpperCase());\n    }\n\n    public static String getValue(ConnectorType connectorType) {\n        return connectorType.value;\n    }\n\n    public static List<ConnectorType> getIpaasEnabledConnectors() {\n        return Lists.newArrayList(ConnectorType.ZENDESK);\n    }\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"74436000-2d34-4ac7-920f-39a66ee8dab2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/hubspot/src/main/java/com/gainsight/integration/connector/hubspot/service/GainsightHubspotFetchService.java","startLine":66,"endLine":73,"content":" resourceName, HubspotSearchRequest hubspotSearchRequest) throws Exception;\n\n\n    Map<String, Object> getFileMetadata(String clientId, String clientSecret, String refreshToken, String fileId, boolean signedUrl);\n\n    Map<String, Object> uploadFile(String clientId, String clientSecret, String refreshToken, File file, Map<String, Object> options, String folderId);\n\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5600779b-06da-462f-be54-c32d65085657","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/adapter-common/src/main/java/com/gainsight/integration/kafka/serde/custom/GSDeserializer.java","startLine":1,"endLine":36,"content":"package com.gainsight.integration.kafka.serde.custom;\n\nimport com.gainsight.cryptography.CryptUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.util.Map;\n\n@Slf4j\npublic class GSDeserializer extends StringDeserializer {\n\n    private boolean decrypt = true;\n    public final static String DECRYPT_FAILED_RESPONSE = \"GS__DECRYPT_FAILED\";\n\n\n    public void configure(Map<String, ?> configs, boolean isKey){\n        String decryptValue = (String) configs.get(\"gs.encrypt.value\");\n\n        if(isKey || (decryptValue != null && decryptValue.equals(\"false\")))\n            decrypt = false;\n        super.configure(configs, isKey);\n    }\n\n    public String deserialize(String topic, byte[] data){\n        String tmpStr = super.deserialize(topic, data);\n        if(decrypt) {\n            try {\n                tmpStr = CryptUtil.getSimpleCryptor().decrypt(tmpStr);\n            }catch(Exception e){\n                log.error(\"failed to decrypt message from topic:{}\", topic,e);\n                return DECRYPT_FAILED_RESPONSE;\n            }\n        }\n        return tmpStr;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd0abafe-832a-4747-8137-4d781b3d8a24","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/productboard/src/main/java/com/gainsight/integration/productboard/service/AhaChannelService.java","startLine":1,"endLine":21,"content":"package com.gainsight.integration.productboard.service;\n\nimport com.gainsight.properties.DeploymentProperties;\n\npublic class AhaChannelService implements IRoadmapChannelService {\n\n    private static final String AHA_BASE_ENDPOINT_API = DeploymentProperties.getDeploymentProperties().getValue(\"uc.gs.connect.aha.api\", \".aha.io/api/v1/features?fields=id,name&per_page=1&page=1\");\n    private static final String AHA_FETCH_IDEA_ORGANIZATION_API_ENDPOINT = DeploymentProperties.getDeploymentProperties().getValue(\"uc.gs.connect.aha.idea.organization.endpoint\", \".aha.io/api/v1/idea_organizations\");\n    private final String subdomain;\n    private final String accessToken;\n    public AhaChannelService(String accessToken, String subdomain) {\n        this.accessToken = accessToken;\n        this.subdomain = subdomain;\n    }\n\n    @Override\n    public boolean authenticateAccessToken() {\n        String url = \"https://\" +subdomain;\n        return authenticate(url + AHA_BASE_ENDPOINT_API, this.accessToken) && authenticate(url + AHA_FETCH_IDEA_ORGANIZATION_API_ENDPOINT, this.accessToken);\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fa21793c-5cae-4bfc-8078-7737f601749b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/gainsight-adapter/ecosystem/src/main/java/com/gainsight/integration/connector/ecosystem/service/GainsightEcosystemChannelServiceImpl.java","startLine":165,"endLine":191,"content":"ilder = getUriBuilder(url, pageSize, pageNumber);\n        return uriBuilder;\n    }\n\n    private URI getURI(String entityName, Map<String, String> queryParams) throws Exception {\n        String url = DeploymentProperties.getDeploymentProperties().getValue(\"ecosystem.connector.base.url\") + GainsightEcosystemEntityEnum\n                .getDataApiPath(GainsightEcosystemEntityEnum.getInstance(entityName));\n        List<NameValuePair> nameValuePairs = new ArrayList<>();\n        queryParams.forEach((k, v) -> nameValuePairs.add(new BasicNameValuePair(k, v)));\n        return new URIBuilder(url).addParameters(nameValuePairs).build();\n    }\n\n    private URIBuilder getUriBuilder(String url, int pageSize, int pageNumber) throws Exception {\n        URIBuilder uriBuilder;\n        switch (this.authenticationType) {\n            case API_KEY:\n                uriBuilder = new URIBuilder(url)\n                        .addParameter(\"limit\", String.valueOf(pageSize))\n                        .addParameter(\"offset\", String.valueOf(pageNumber));\n                break;\n\n            default:\n                throw new Exception(\"Unsupported Authentication Type.\");\n        }\n        return uriBuilder;\n    }\n}\n","language":"java","repositoryNamespace":"gainsight-adapter","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null}]