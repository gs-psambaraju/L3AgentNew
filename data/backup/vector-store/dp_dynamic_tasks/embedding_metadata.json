[{"source":"2b1aaba4-3678-4374-b3f8-90791b3bba97","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":234,"endLine":255,"content":"                           String connectionId, String jobId,\n                                                                                       IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        IpaasStagingDetails ipaasStagingDetails = new IpaasStagingDetails();\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if (i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(da","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.isIgnoreInvalidData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":238,"endLine":240,"content":"    public boolean isIgnoreInvalidData() {\n        return ignoreInvalidData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":47,"endLine":193,"content":"public class SQLExtractHelper {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SQLExtractHelper.class);\n\n    private final ConnectionParamPojo connectionParamPojo;\n    private final String query;\n    private final SQLQueryInfo sqlQueryInfo;\n\n    public SQLExtractHelper(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo) {\n        this.connectionParamPojo = connectionParamPojo;\n        this.query = query;\n        this.sqlQueryInfo = sqlQueryInfo;\n    }\n\n    public void executeQuery(CsvFile csvFile) {\n        int limit = DeploymentProperties.getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_QUERY_LIMIT, 10000);\n        int offset = 0;\n        int recordsRetrieved = 0;\n        CSVPrinter csvPrinter = null;\n        PostgresSQLService dataBaseClient = null;\n        try {\n            LOGGER.info(\"Going to execute postgres query with legacy code\");\n            dataBaseClient = new TransientPostgresSQLServiceImpl(connectionParamPojo);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC));\n            createCsvHeaderAndUpdateFile(csvPrinter, csvFile);\n            boolean done = false;\n            do {\n                String queryToExecute = query.trim() + \" offset \" + offset + \" limit \" + limit;\n                LOGGER.info(\"Started executing query: {} with legacy code\", queryToExecute);\n                DBResultPojo executeResponse = dataBaseClient.execute(queryToExecute);\n                if (!executeResponse.isSucceded()) {\n                    LOGGER.error(\"Sql query execution failed with: \", executeResponse.getCause());\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", executeResponse.getCause().getMessage()));\n                }\n                JSONArray data = (JSONArray) executeResponse.getResult();\n                List<Object> recordList = new ArrayList<>();\n                for (int i = 0; i < data.length(); i++) {\n                    JSONObject jsonObject = data.getJSONObject(i);\n                    sqlQueryInfo.getShowFields().forEach(showField -> {\n                        String key = showField.getFieldAlias().toLowerCase();\n                        if (jsonObject.isNull(key)) {\n                            recordList.add(null);\n                        } else {\n                            if (showField.getDataType().equals(DataType.NUMBER)) {\n                                recordList.add(jsonObject.getDouble(key));\n                            } else if (showField.getDataType().equals(DataType.DATETIME)) {\n                                recordList.add(convertDateTimeFormat(jsonObject.get(key), showField.getDateTimeProperties()));\n                            } else {\n                                recordList.add(jsonObject.get(key));\n                            }\n                        }\n                    });\n                    csvPrinter.printRecord(recordList);\n                    recordList.clear();\n                }\n                offset = offset + limit;\n                recordsRetrieved = recordsRetrieved + data.length();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n                if (data.length() != limit) {\n                    done = true;\n                }\n            } while (!done && !Thread.currentThread().isInterrupted());\n            csvPrinter.flush();\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Unable to process SQL extract with legacy code due to: {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with legacy code for postgres/redshift/snowflake\", ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (dataBaseClient != null) {\n                dataBaseClient.closeConnection();\n            }\n        }\n    }\n\n    private Object convertDateTimeFormat(Object value, DateTimeProperties dateTimeProperties) {\n        if (value instanceof Timestamp) {\n            DateTimeFormatter outputDateTimeFormatter = DateTimeFormatter.ofPattern(dateTimeProperties.getFormat());\n            ZonedDateTime utcDateTime = ((Timestamp) value).toLocalDateTime().atZone(ZoneId.of(\"UTC\"));\n            ZonedDateTime zonedDateTime = utcDateTime.withZoneSameInstant(ZoneId.of(dateTimeProperties.getTimeZoneId()));\n            return zonedDateTime.format(outputDateTimeFormatter);\n        } else {\n            return value;\n        }\n    }\n\n    public void executeQueryWithPostgresCopyManager(CsvFile csvFile) throws IOException, SQLException {\n        int recordsRetrieved = 0;\n        Connection jdbcConnection = null;\n        FileOutputStream fileOutputStream = null;\n        Properties properties = new Properties();\n        try {\n            LOGGER.info(\"Going to execute postgres query with copy manager\");\n            com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo connectionParamPojoForCopyManager = new com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo(\n                    connectionParamPojo.getJdbcUrl(), connectionParamPojo.getUserName(), connectionParamPojo.getPassword(), connectionParamPojo.getConnectionPoolSize(), connectionParamPojo.getConnectionPoolName(), connectionParamPojo.isSslEnabled());\n            createCsvHeaderAndUpdateFileCopyManager(csvFile);\n            properties.setProperty(\"user\", connectionParamPojo.getUserName());\n            properties.setProperty(\"password\", connectionParamPojo.getPassword());\n            if (connectionParamPojo.isSslEnabled()) {\n                properties.setProperty(\"sslmode\", \"require\");\n                properties.setProperty(\"ssl\", \"true\");\n            }\n            jdbcConnection = DriverManager.getConnection(connectionParamPojoForCopyManager.getJdbcUrl(), properties);\n            CopyManager copyManager = new CopyManager((BaseConnection) jdbcConnection);\n            fileOutputStream = new FileOutputStream(csvFile, true);\n            String refinedQuery = query.trim();\n            String copyManagerQuery = \"COPY (\" + refinedQuery + \") TO STDOUT WITH (FORMAT CSV, HEADER true, QUOTE '\\\"', ESCAPE '\\\"', ENCODING 'UTF8')\";\n            LOGGER.info(\"Started executing query: {} with copyManager\", copyManagerQuery);\n            if (!Thread.currentThread().isInterrupted()) {\n                recordsRetrieved = Math.toIntExact(copyManager.copyOut(copyManagerQuery, fileOutputStream));\n            }\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Error while executing postgres query with copy manager due to : {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with postgres copy manager\", ex);\n        } finally {\n            if (fileOutputStream != null) {\n                fileOutputStream.close();\n            }\n            if (jdbcConnection != null) {\n                jdbcConnection.close();\n            }\n        }\n    }\n\n    private void createCsvHeaderAndUpdateFileCopyManager(CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        LOGGER.info(\"Started writing headers {} to csv file for copy manager\", headers);\n        csvFile.setHeaders(headers);\n    }\n\n    private void createCsvHeaderAndUpdateFile(CSVPrinter csvPrinter, CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        try {\n            LOGGER.info(\"Started writing headers {} to csv file\", headers);\n            csvPrinter.printRecord(headers);\n            csvFile.setHeaders(headers);\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(e.getMessage(), e);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dbf236ea-cf65-4f44-abb5-9121331da388","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":127,"endLine":150,"content":"imeProperties.getTimeZoneId()));\n            return zonedDateTime.format(outputDateTimeFormatter);\n        } else {\n            return value;\n        }\n    }\n\n    public void executeQueryWithPostgresCopyManager(CsvFile csvFile) throws IOException, SQLException {\n        int recordsRetrieved = 0;\n        Connection jdbcConnection = null;\n        FileOutputStream fileOutputStream = null;\n        Properties properties = new Properties();\n        try {\n            LOGGER.info(\"Going to execute postgres query with copy manager\");\n            com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo connectionParamPojoForCopyManager = new com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo(\n                    connectionParamPojo.getJdbcUrl(), connectionParamPojo.getUserName(), connectionParamPojo.getPassword(), connectionParamPojo.getConnectionPoolSize(), connectionParamPojo.getConnectionPoolName(), connectionParamPojo.isSslEnabled());\n            createCsvHeaderAndUpdateFileCopyManager(csvFile);\n            properties.setProperty(\"user\", connectionParamPojo.getUserName());\n            properties.setProperty(\"password\", connectionParamPojo.getPassword());\n            if (connectionParamPojo.isSslEnabled()) {\n                properties.setProperty(\"sslmode\", \"require\");\n                properties.setProperty(\"ssl\", \"true\");\n            }\n            jdbcConnection = DriverManager.getConnection(connectionParamPojoForCopyManager.getJd","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"678b9a60-7a85-4ea9-a12c-02572c8715e7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":74,"endLine":92,"content":"rivate static final String POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS = \"postgres.extract.sample.log.include.all.columns\";\n    private static final String POSTGRES_EXTRACT_DEFAULT_DATETIME_FORMAT = \"postgres.extract.default.datetime.format\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        try {\n            String jobId = externalTaskRequestContext.getJobId();\n            String tenantId = externalTaskRequestContext.getTenantId();\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            isNotNull(sqlQueryInfo, GENERIC_SYSTEM_ERROR, msg(\"Could not get valid sqlExtractionDetails from task metadata for jobId:{} and tenantId:{}\", jobId, tenantId));\n            LOGGER.info(\"SQL Query info for job:{} of tenant:{} is::{}\", jobId, tenantId, DPUtils.convertObjectToJson(sqlQueryInfo));\n\n            DPWorkflowJobDetailsDTO dpWorkflowJobDetailsDTO = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, dpWorkflowJobDetailsDTO.getExternalId(), externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getTaskName());\n            String configSourceUrl = TaskExec","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java#GA4ServiceImpl","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":30,"endLine":102,"content":"public class GA4ServiceImpl implements GA4Service {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(GA4ServiceImpl.class);\n\n    private final GA4ConnectionInfo connectionInfo;\n    private AnalyticsData analyticsData;\n\n\n    GA4ServiceImpl(GA4ConnectionInfo connectionInfo) {\n        this.connectionInfo = connectionInfo;\n        initialize();\n    }\n\n    private void initialize() {\n        try {\n            JsonFactory jsonFactory = new JacksonFactory();\n            HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();\n\n            String refreshToken = connectionInfo.getRefreshToken();\n            String clientId = connectionInfo.getClientId();\n            String clientSecret = connectionInfo.getClientSecret();\n\n            GoogleRefreshTokenRequest googleRefreshTokenRequest =\n                    new GoogleRefreshTokenRequest(httpTransport, jsonFactory, refreshToken, clientId, clientSecret);\n            GoogleTokenResponse tokenResponse = googleRefreshTokenRequest.execute();\n\n            GoogleCredential credential = new GoogleCredential\n                    .Builder()\n                    .setClientSecrets(clientId, clientSecret)\n                    .setJsonFactory(jsonFactory)\n                    .setTransport(httpTransport)\n                    .build()\n                    .setAccessToken(tokenResponse.getAccessToken())\n                    .setRefreshToken(refreshToken);\n\n          analyticsData = new AnalyticsData.Builder(httpTransport, jsonFactory, configureTimeouts(credential))\n                 .build();\n        } catch (Exception e) {\n            LOGGER.error(\"Not able to initialize the GA4 client :{}\",e.getMessage(),e);\n            throw new DPSystemException(\"Unable to initialize GA4 client.\", e);\n        }\n    }\n\n    private HttpRequestInitializer configureTimeouts(final HttpRequestInitializer requestInitializer) {\n        return new HttpRequestInitializer() {\n            @Override\n            public void initialize(HttpRequest httpRequest) throws IOException {\n                requestInitializer.initialize(httpRequest);\n                httpRequest.setConnectTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_CONNECT_TIMEOUT_MILLIS, 120000));\n                httpRequest.setReadTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_READ_TIMEOUT_MILLIS, 120000));\n                httpRequest.setNumberOfRetries(getDeploymentProperties().getIntegerValue(GA_EXTRACT_NUM_RETRIES, 5));\n\n                httpRequest.setIOExceptionHandler((request, supportsRetry) -> {\n                    LOGGER.error(\"IOException while calling: \" + request.getUrl() + \". Will issue retry if configured.\");\n                    //to make retries exponential multiply connectTimeout/socketTimeout\n                    return supportsRetry;\n                });\n            }\n        };\n    }\n\n    @Override\n    public BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException {\n        BatchRunReportsRequest getReportsRequest = new BatchRunReportsRequest()\n                .setRequests(requests);\n\n\n        return analyticsData.properties()\n                .batchRunReports(\"properties/\"+ propertyId, getReportsRequest)\n                .execute();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"da7349b6-d5d9-4bb6-b10b-a60f430e598c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":224,"endLine":258,"content":"\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in getting custom datetime format, using default ISO_OFFSET_DATE_TIME format. Reason: {}.\", ex.getMessage());\n        }\n\n        return ISO_OFFSET_DATE_TIME;\n    }\n\n    private static DPFile getErrorFile(String errorFilePath) {\n        DPFile errorFile = new DPFile(new File(errorFilePath).getAbsolutePath()) {\n        };\n        return errorFile;\n    }\n\n    private static CSVPrinter getErrorWriter(List<String> headers, DPFile errorFile) {\n        CSVPrinter csvPrinter = null;\n        try {\n            headers.add(\"Error Message\");\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            String[] headersArr = Iterables.toArray(headers, String.class);\n            CSVFormat format = csvFormat.withHeader(headersArr).withSkipHeaderRecord(false);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(errorFile)), format);\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating csvWriter for error file {}\", e.getMessage());\n        }\n        return csvPrinter;\n    }\n\n    private static ParquetWriter<List<String>> getParquetWriter(List<String> headers, List<FieldInfo> showFields, ParquetFile parquetFile) {\n        parquetFile.setHeaders(headers);\n        try {\n            return new TextRecordParquetWriterBuilder(new Path(parquetFile.toURI()), showFields)\n                    .withRowGroupSize(10 * 1000 * 1000)\n                    .withWriteMode(ParquetFileW","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fc27821-3b63-4905-9d87-e65795f99303","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":447,"endLine":468,"content":"ldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static void setDateForHistoricSync(FilterRule rule, String lastModifieldFieldPath) {\n        if (CollectionUtils.isEmpty(rule.getRules())) {\n            if (rule.getFieldInfo().getJsonPath().equalsIgnoreCase(lastModifieldFieldPath) &&\n                    rule.getOp() == FilterOperator.GT) {\n                try {\n                    DateTimeFormatter sourceDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSz\");\n                    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"1970-01-01T00:00:00.000+00:00\", sourceDateTimeFormatter.withZone(ZoneId.of(\"UTC\")));\n\n                    DateTimeFormatter targetDateTimeFormatter = StringUtils.isNotEmpty(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            ? DateTimeFormatter.ofPattern(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            : DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n                    ZoneId zoneId = StringUtils.isNotBlank(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#available","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":38,"endLine":40,"content":" * We had to make the turbo filter class available in same repo where each dynamic tasks are being written.\n */\npublic class DPDynamicTaskTurboFilter extends AbstractObfuscationTurboFilter {\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ede733a5-a049-4423-ac20-4697ba809604","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":69,"endLine":88,"content":"equestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetWriter<List<String>> parquetWriter = null;\n        DPFile errorFile;\n        CSVPrinter errorWriter = null;\n        ParquetFile parquetFile = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            PXExtractionDetails pxExtractionDetails = DHUtils.convertJsonToObject(metaData.get(PX_EXTRACT_DETAILS_KEY), PXExtractionDetails.class);\n            PXAccessDetails accessDetails = DHUtils.convertJsonToObject(metaData.get(PX_ACCESS_DETAILS_KEY), PXAccessDetails.class);\n\n            String connectorId = accessDetails.getConnectorId();\n            Pair<String, String> aptrinsicKeyURLPair = PxUtil.getAptrinsicKey(tenantId, ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), connectorId);\n            String apiKey = aptrinsicKeyURLPair.getKey();\n            String pxURL = aptrinsicKeyURLPair.getValue();\n            PxUtil.convertDateFilterToEpochInFilterRule(pxExtractionDetails.getWhereClause(), ExternalTaskUtil.getExternalTaskRequestContext().getWorkflowSystemProperties(), getDeploymentProperties().getValue(DEFAULT_DATE_FORMAT_KEY));\n            TenantDetailsDTO tenantD","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"286e9e00-8418-4b40-a9d0-7ecb95d0a9ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":1,"endLine":33,"content":"package com.gainsight.services.external.ga4.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.ga4.extraction.task.utils.GA4ExtractUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * @author Tarika on 12/12/2021\n */\npublic class GA4ExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GA4ExtractionTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        DPWorkflowJo","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e207ef3f-eb82-4fa3-b9fc-c3942b22e0bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":80,"endLine":102,"content":"IntegerValue(GA_EXTRACT_NUM_RETRIES, 5));\n\n                httpRequest.setIOExceptionHandler((request, supportsRetry) -> {\n                    LOGGER.error(\"IOException while calling: \" + request.getUrl() + \". Will issue retry if configured.\");\n                    //to make retries exponential multiply connectTimeout/socketTimeout\n                    return supportsRetry;\n                });\n            }\n        };\n    }\n\n    @Override\n    public BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException {\n        BatchRunReportsRequest getReportsRequest = new BatchRunReportsRequest()\n                .setRequests(requests);\n\n\n        return analyticsData.properties()\n                .batchRunReports(\"properties/\"+ propertyId, getReportsRequest)\n                .execute();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.isAfter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":270,"endLine":275,"content":"    private static String isAfter(String url, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(\"paging\") != null) {\n            url = jsonObject.getAsJsonObject(\"paging\").getAsJsonObject(\"next\").get(\"link\").getAsString();\n        }\n        return url;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.getCsvFileForSQLExtract","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":268,"endLine":278,"content":"    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.getGA4Report","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":88,"endLine":123,"content":"    public Map<String, Object> getGA4Report() {\n        logInfo(jobId, \"Starting GA4 extraction task\");\n\n        String tenantId = workflowJobDetails.getTenantId();\n        ParquetFile tmpParquetFile;\n        AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, workflowJobDetails.getExternalId(), taskId);\n\n        try {\n            tmpParquetFile = new ParquetFile(DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".parquet\"));\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(extractDetails.getStaticFields())) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), auditMetadata, true);\n            }\n            writeToParaquetG4(tmpParquetFile, currencyConversionMap);\n            logInfo(taskId, DHUtils.msg(\"Parquet file creation successful. Records written = {}.\", tmpParquetFile.getNumRecords()));\n            Map<String, Object> result = Maps.newHashMap();\n            result.put(\"parquetFile\", tmpParquetFile);\n            result.put(\"headers\", recordFormatter.getHeaders());\n            return result;\n        } catch (GoogleJsonResponseException e) {\n            GoogleJsonError details = e.getDetails();\n            DPSystemException dpSystemException = new DPSystemException(e);\n            if (details != null) {\n                String message = \"Message=\" + details.getMessage() + \"Status=\" + details.get(\"status\");\n                dpSystemException.setMessage(message);\n            } else {\n                dpSystemException.setMessage(e.getMessage());\n            }\n            dpSystemException.setHttpStatus(e.getStatusCode());\n            throw dpSystemException;\n        } catch (IOException e) {\n            throw new DPSystemException(e.getMessage(), e, IO_ERROR);\n        } finally {\n            logInfo(taskId, \"Cleaning up....bye bye...\");\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"47acdad6-4d84-42d0-9383-21c9d8bbcc0e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":204,"endLine":235,"content":"catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dad95397-c035-40eb-bf51-27af18abd652","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":18,"endLine":35,"content":"ices.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.postgres.extraction.utils.SQLExtractHelper;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections4.Co","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setIpaasStagingDetailsId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":179,"endLine":181,"content":"    public void setIpaasStagingDetailsId(String ipaasStagingDetailsId) {\n        this.ipaasStagingDetailsId = ipaasStagingDetailsId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59300728-ce9d-4719-aaef-aca0949cbdf6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":151,"endLine":165,"content":"                                                              String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                       ExternalTaskRequestContext externalTaskRequestContext) {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":13,"endLine":44,"content":"public class GA4ConnectionInfo implements Serializable {\n\n    private static final long serialVersionUID = -7057129865819056316L;\n\n    private String refreshToken;\n    private String clientId;\n    private String clientSecret;\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57605680-9bf2-40fe-b80c-6db27ff7fcef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":295,"endLine":321,"content":"Map.get(fieldAlias);\n                                    if (dateValues.size() < sampleRecordSize) {\n                                        dateValues.add(recordVal);\n                                        dateOrDateTimeColumnValueMap.put(fieldAlias, dateValues);\n                                    }\n                                } else {\n                                    dateOrDateTimeColumnValueMap.put(fieldAlias, Lists.newArrayList(recordVal));\n                                }\n                            }\n                        }\n                        int size = sampleRecordSize;\n                        Iterator<Map.Entry<String, List<String>>> iterator = dateOrDateTimeColumnValueMap.entrySet().stream().iterator();\n                        while (iterator.hasNext()) {\n                            List<String> value = iterator.next().getValue();\n                            if (value.size() < size) {\n                                size = value.size();\n                            }\n                        }\n                        if (size == sampleRecordSize) {\n                            break;\n                        }\n                    }\n                }\n                LOGGER.info(\"Sample data set for required columns for job:{} of tenant:{} are ::: {}\", jobId, tenantId, DPUtils.convertObjectToJson(dateOrDateTimeColumnValueMap));\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to log date/dateTime sample records for job:{} of t","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getPageSize","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":80,"endLine":82,"content":"    public String getPageSize() {\n        return pageSize;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.getConnectionObject","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":280,"endLine":287,"content":"    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java#GA4ExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":30,"endLine":57,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetFile parquetFile;\n\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            Map<String, Object> workFlowSystemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            Map<String, Object> extractFile = GA4ExtractUtil.getGA4Report(jobId, taskId, metaData, workFlowSystemProperties, workflowJobDetails);\n            parquetFile = (ParquetFile) extractFile.get(\"parquetFile\");\n            TaskResult taskResult = new TaskResult((List<FieldInfo>) extractFile.get(\"headers\"), null);\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing GA4 Task.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":82,"endLine":516,"content":"public class IpaasExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasExtractionTask.class);\n    public static final String IPAAS_EXTRACT_DETAILS_KEY = \"ipaasExtractDetails\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String IPAAS_INSTANCE_TOKEN = \"IPAAS_INSTANCE_TOKEN\";\n    private static final String IPAAS_ORG_TOKEN = \"IPAAS_ORG_TOKEN\";\n    private static final String IPAAS_USER_TOKEN = \"IPAAS_USER_TOKEN\";\n    private static final String IPAAS_EXCLUDE_STRING = \"uc.ipaas.external.task.excluded.string.list\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas extraction started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        LOGGER.info(\"checking : \", DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET));\n        List<File> fileList = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(),\n                    workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            IpaasExtractionDetails fetchTaskDetails = convertJsonToObject(metaData.get(IPAAS_EXTRACT_DETAILS_KEY), IpaasExtractionDetails.class);//todo remove from constants\n            LOGGER.info(\"MDA call out to fetch ipaas connection info for . connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            String ipaasConnectionUrl = \"/connector/ipaas/connection/datahighway/\" + fetchTaskDetails.getConnectionId();\n            JsonObject jsonObject = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasConnectionUrl, workflowJobDetails.getTenantId(), false);\n            isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n            LOGGER.info(\"Ipaas source connection details response :{}  for connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    jsonObject.get(\"result\").getAsBoolean(), fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            if (!jsonObject.get(\"result\").getAsBoolean()) {\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info not found for id : %s\", fetchTaskDetails.getConnectionId()));\n            }\n            JsonObject data = jsonObject.get(DATA).getAsJsonObject();\n            if (data == null || data.isJsonNull())\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info is empty for id : %s\", fetchTaskDetails.getConnectionId()));\n            JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(data.get(VALUE).getAsString())).getAsJsonObject();\n            Type type = new TypeToken<Map<String, Object>>() {\n            }.getType();\n            Map<String, Object> connectionDetailsMap = new Gson().fromJson(decryptedObject, type);\n            //extraction from ipaas\n            LOGGER.info(\"Fetching ipaas connection details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n\n            //fetch dp staging details\n            if (fetchTaskDetails.getStagingConnectionInfo() != null) {\n                stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId, fetchTaskDetails, externalTaskRequestContext);\n            }\n\n            //fetch ipaas job & task details\n            LOGGER.info(\"MDA call out to fetch ipaas job and task details started. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            String ipaasJobDetailsUrl = \"/connector/job/datahighway/\" + fetchTaskDetails.getJobId();\n            JsonObject obj = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasJobDetailsUrl, workflowJobDetails.getTenantId(), false);\n\n            Type taskType = new TypeToken<List<TaskInfo>>() {\n            }.getType();\n            List<TaskInfo> taskInfos = new Gson().fromJson(obj.get(DATA).getAsJsonObject().get(\"taskInfo\"), taskType);\n\n            Map<String, String> ntzFields = Maps.newHashMap();\n            if (ConnectorType.SNOWFLAKE.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                List<TaskInfo> extractTaskInfos = taskInfos.stream().filter(taskInfo -> taskInfo.getTaskType().equals(TaskType.IPAAS_EXTRACT)).collect(Collectors.toList());\n                if (CollectionUtils.isNotEmpty(extractTaskInfos)) {\n                    extractTaskInfos.stream().forEach(taskInfo -> {\n                        if (CollectionUtils.isNotEmpty(taskInfo.getFieldInfoList())) {\n                            taskInfo.getFieldInfoList().stream().forEach(fieldInfo -> {\n                                        if (fieldInfo.getDataType().equals(\"date-time\") && fieldInfo.getMeta().containsKey(\"NTZ_ZONE_ID\")) {\n                                            ntzFields.put(fieldInfo.getPath(), fieldInfo.getMeta().get(\"NTZ_ZONE_ID\").toString());\n                                        }\n                                    }\n                            );\n                        }\n                    });\n                }\n            }\n\n            TaskInfo taskInfo = taskInfos.stream().filter(i -> i.getTaskId().equalsIgnoreCase(fetchTaskDetails.getTaskId()))\n                    .findFirst().get();\n            LOGGER.info(\"Fetched ipaas job and task details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            Map<String, List<PicklistOption>> picklistMap = Maps.newHashMap();\n\n\n            mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            StringBuilder objectMetaDataUrl = new StringBuilder(\"/connector/ipaas/metadata/datahighway/\")\n                    .append(taskInfo.getConnectionDetails().getConnectionId())\n                    .append(\"/\")\n                    .append(fetchTaskDetails.getExternalEntityName().trim().replaceAll(UCConstants.SPACE, \"%20\"))\n                    .append(\"/attributes\");\n            JsonObject objectMetaDataFromConnectors = mdaCalloutsService.getIpaasDetailsFromMDA(\n                    objectMetaDataUrl.toString(), workflowJobDetails.getTenantId(), false);\n            Set<String> ipaasFields = Sets.newHashSet();\n\n            for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                validateMappingsExistInExternalSystem(field, objectMetaDataFromConnectors, ipaasFields);\n            }\n            if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                    if (!condition.isCustomizedFilterField())\n                        validateMappingsExistInExternalSystem(condition.getLeftOperand(), objectMetaDataFromConnectors, ipaasFields);\n                }\n            }\n\n            if (!ipaasFields.isEmpty()) {\n                if (!ConnectorType.FRESHDESK.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                    LOGGER.error(\"Exception while executing externalTask due to validation failure as fields are not present in external system tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                            tenantId, jobId, taskId, ipaasFields);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,\n                            String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.Remove the field from connector mappings and re-run the job.\", ipaasFields));   // throw new DPSystemException(IpaasExtractionValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,String.format(\"Column %s does not exist. Possible causes: The column is deleted or the Integration/OAuth user does not have read permissions on the field.\", ipaasFields));\n                }else{\n                    LOGGER.warn(\"Not throwing exception for FRESHDESK connector, fields are missing {}\", ipaasFields);\n                }\n            }\n\n            if (fetchTaskDetails.isResolvePicklist()) {\n                boolean isPicklistFieldPresent = taskInfo.getFieldInfoList().stream().anyMatch(\n                        task -> (Boolean) task.getMeta().get(\"isPicklistField\"));\n                if (!isPicklistFieldPresent && taskInfo.getCriteria() != null && taskInfo.getCriteria().getConditions() != null && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                    isPicklistFieldPresent = taskInfo.getCriteria().getConditions().stream().anyMatch(conditions -> conditions.getLeftOperand().getMeta().containsKey(\"isPicklistField\") && (Boolean) conditions.getLeftOperand().getMeta().get(\"isPicklistField\"));\n                }\n                if (isPicklistFieldPresent) {\n\n                    for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                        populatePicklistMap(picklistMap, objectMetaDataFromConnectors, field);\n                    }\n                    if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                        for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                            if (!condition.isCustomizedFilterField())\n                                populatePicklistMap(picklistMap, objectMetaDataFromConnectors, condition.getLeftOperand());\n                        }\n                    }\n                }\n            }\n            PaginatedDataExtractionService paginatedDataExtractionService = new PaginatedDataExtractionService();\n            List<com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo> fieldInfoList = Lists.newArrayList();\n            fetchTaskDetails.getProjections().forEach(projection -> fieldInfoList.add(getFieldInfoList(projection)));\n            DataExtractionRequest dataExtractionRequest = new DataExtractionRequest();\n            dataExtractionRequest.setObjectName(fetchTaskDetails.getExternalEntityName());\n            dataExtractionRequest.setInstanceToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_INSTANCE_TOKEN).toString()));\n            dataExtractionRequest.setUserToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_USER_TOKEN).toString()));\n            dataExtractionRequest.setOrgToken(connectionDetailsMap.get(IPAAS_ORG_TOKEN).toString());\n            dataExtractionRequest.setJobId(workflowJobDetails.getJobId());\n            dataExtractionRequest.setConnectorType(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()));\n            String ipaasExcludeString = DeploymentProperties.getDeploymentProperties().getValue(IPAAS_EXCLUDE_STRING);\n            if (StringUtils.isNotEmpty(ipaasExcludeString)) {\n                ipaasExcludeString = ipaasExcludeString.concat(\",\");\n            }\n            ipaasExcludeString = ipaasExcludeString.concat(\"\\u0000\");\n            List<String> excludedStringList = Arrays.asList(ipaasExcludeString.split(\",\"));\n            dataExtractionRequest.getProperties().put(\"ceTimeOut\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"ce.call.timeout.in.milli.secs\", 60000));\n            dataExtractionRequest.setExcludedStrings(excludedStringList);\n            LOGGER.info(\"Excluded Strings: {}\", dataExtractionRequest.getExcludedStrings());\n            dataExtractionRequest.setFilterRule(fetchTaskDetails.getWhereClause());\n            dataExtractionRequest.setFields(fieldInfoList);\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(\"default.snowflake.enabled\", true)\n                    || DeploymentProperties.getDeploymentProperties().getValue(\"snowflake.tenant.list\").contains(RequestContextProvider.getTenantId())) {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", true);\n            } else {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", false);\n            }\n            dataExtractionRequest.getProperties().put(\"snowflakeFileSize\", DeploymentProperties.getDeploymentProperties().getLongValue(\"snowflake.file.size\", 200000000));\n            dataExtractionRequest.getProperties().put(\"snowflakeBatchLimit\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"snowflake.batch.limit\", 10000));\n            dataExtractionRequest.setCloudElementsBaseUrl(connectionDetailsMap.get(\"baseUrl\").toString());\n            dataExtractionRequest.setDateTimeConversionRequired(Boolean.parseBoolean(connectionDetailsMap.get(\"isDateTimeConversionRequired\").toString()));\n            dataExtractionRequest.getProperties().put(PAGE_SIZE, fetchTaskDetails.getPageSize());\n            dataExtractionRequest.getProperties().put(\"skipFieldsAsQueryParam\", fetchTaskDetails.isSkipFieldsForFetch());\n            dataExtractionRequest.setLastModifiedFieldName(fetchTaskDetails.getLastModifieldFieldPath());\n            dataExtractionRequest.setLastModifiedFieldValue(fetchTaskDetails.getLastModifieldFieldValue());\n            dataExtractionRequest.setHonourLastModfiedFieldValueToFetchDeltaData(fetchTaskDetails.isHonourLastModfiedFieldValueToFetchDeltaData());\n            dataExtractionRequest.setIgnorableErrorMessages(fetchTaskDetails.getIgnorableErrorMessages());\n            dataExtractionRequest.setQueryParamForDataFetch(fetchTaskDetails.getQueryParamForDataFetch());\n            dataExtractionRequest.setPicklistOptionMap(picklistMap);\n            dataExtractionRequest.getProperties().putAll(connectionDetailsMap);\n            taskInfo.getFieldInfoList().stream().filter(fieldInfo -> fieldInfo.getMeta().containsKey(\"isPrimaryKey\") && (Boolean) fieldInfo.getMeta().get(\"isPrimaryKey\")).findFirst().ifPresent(fieldInfo -> dataExtractionRequest.setPrimaryField(fieldInfo.getPath()));\n\n\n            if (null != fetchTaskDetails.getOrderByInfo() && !fetchTaskDetails.getOrderByInfo().getOrderByFields().isEmpty()) {\n                if (fetchTaskDetails.getOrderByInfo().isAscending()) {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"asc\", \"UTF-8\"));\n                } else {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"desc\", \"UTF-8\"));\n                }\n            }\n            dataExtractionRequest.setDefaultSleepTimeOnFail(fetchTaskDetails.getDefaultSleepTimeOnFail());\n            dataExtractionRequest.setMaxNoOfRetries(fetchTaskDetails.getMaxNumberOfRetries());\n            if (!ntzFields.isEmpty()) {\n                dataExtractionRequest.getProperties().put(\"NTZ_FIELDS\", ntzFields);\n            }\n\n            if (MapUtils.isNotEmpty(fetchTaskDetails.getAdditionalInformation())) {\n\n                dataExtractionRequest.getProperties().putAll(fetchTaskDetails.getAdditionalInformation());\n            }\n            if (StringUtils.isNotEmpty(fetchTaskDetails.getQuery())) {\n                dataExtractionRequest.getProperties().put(\"CUSTOM_QUERY\", fetchTaskDetails.getQuery());\n            }\n\n            fileList = paginatedDataExtractionService.extractData(dataExtractionRequest);\n            LOGGER.info(\"Ipaas Extraction started, tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n\n\n            if (null != taskInfo.getCriteria()) {\n                taskInfo.getCriteria().getConditions().stream().filter(Objects::nonNull).forEach(criteria -> {\n                    if (criteria.getLeftOperand().getMeta().containsKey(IS_CURRENCY_FIELD)) {\n                        com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fieldInfoForCurrencyValue = new com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo();\n                        fieldInfoForCurrencyValue.setDecimalPlaces(16);\n                        fieldInfoForCurrencyValue.setDataType(com.gainsight.services.dataprocessing.commons.pojo.DataType.NUMBER);\n                        fieldInfoForCurrencyValue.setName(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setJsonPath(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldAlias(criteria.getLeftOperand().getFieldAlias() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldType(FieldType.FIELD);\n                        fetchTaskDetails.getProjections().add(fieldInfoForCurrencyValue);\n                    }\n                });\n            }\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjections(), null);\n\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(fileList.stream().map(file -> file.getAbsolutePath()).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(fetchTaskDetails.isEnableDownloadSourceData())\n                    //.setPushExtractedDataToS3(true)\n                    .setExcludedStrings(ipaasExcludeString)\n                    .setIgnoreInvalidData(fetchTaskDetails.isIgnoreInvalidData())\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n            LOGGER.info(\"Request to ipaas fetch completed in {} secs for tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasExtractiontask external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (CollectionUtils.isNotEmpty(fileList)) {\n                for (File file : fileList) {\n                    FileUtils.deleteQuietly(file);\n                }\n            }\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        }\n    }\n\n    private static void validateMappingsExistInExternalSystem(FieldInfo field, JsonObject objectMetaDataFromConnectors, Set<String> ipaasFields) {\n        JsonObject data;\n        data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n        JsonArray fields = data.get(\"fields\").getAsJsonArray();\n        Iterator<JsonElement> iterator = fields.iterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            JsonObject fieldInfo = iterator.next().getAsJsonObject();\n            JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n            if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            ipaasFields.add(field.getLabel());\n        }\n    }\n\n    private static void populatePicklistMap(Map<String, List<PicklistOption>> picklistMap,\n                                            JsonObject objectMetaDataFromConnectors, FieldInfo field) {\n        JsonObject data;\n\n        if (field.getMeta().containsKey(\"isPicklistField\") && (Boolean) field.getMeta().get(\"isPicklistField\")) {\n            data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n            JsonArray fields = data.get(\"fields\").getAsJsonArray();\n            Iterator<JsonElement> iterator = fields.iterator();\n            List<PicklistOption> picklistList = Lists.newArrayList();\n            while (iterator.hasNext()) {\n                JsonObject fieldInfo = iterator.next().getAsJsonObject();\n                JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n                if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath()) &&\n                        meta.getAsJsonObject().get(\"isPicklistField\").getAsBoolean()) {\n                    JsonArray options = fieldInfo.get(\"options\").getAsJsonArray();\n                    options.forEach(option -> {\n                        PicklistOption picklistOption = new PicklistOption();\n                        picklistOption.setPicklistLabel(option.getAsJsonObject().get(\"label\").getAsString());\n                        picklistOption.setPicklistValue(option.getAsJsonObject().get(\"value\").getAsString());\n                        picklistList.add(picklistOption);\n                    });\n                }\n            }\n            picklistMap.put(field.getPath(), picklistList);\n        }\n        LOGGER.info(\"Populated picklist map with {}\", picklistMap);\n    }\n\n    private static void stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                 String taskId, IpaasExtractionDetails fetchTaskDetails,\n                                                 ExternalTaskRequestContext externalTaskRequestContext) throws Exception {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        BasicDataSource dataSource = DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                fetchTaskDetails.getTaskId(), fetchTaskDetails.getJobId());\n        LOGGER.info(\"Showing ipaas staging details. tId- {}, jobId- {}, taskId- {}, Ipaas staging details  : {}\",\n                tenantId, jobId, taskId, ipaasStagingDetails);\n\n        //checking and updating field Infos & columns\n        if (ipaasStagingDetails != null && (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, fetchTaskDetails.getProjections())\n                || isUpsertKeyChanged(ipaasStagingDetails, fetchTaskDetails.getUpsertkey()))) {\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            fetchTaskDetails.setLastModifieldFieldValue(0);\n            //setting from date as 1970-01-01T00:00:00.000Z for fetching historical data\n            if (fetchTaskDetails.getWhereClause() != null && !fetchTaskDetails.getWhereClause().getRules().isEmpty() &&\n                    StringUtils.isNotEmpty(fetchTaskDetails.getLastModifieldFieldPath())) {\n                setDateForHistoricSync(fetchTaskDetails.getWhereClause(), fetchTaskDetails.getLastModifieldFieldPath());\n                ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n            }\n        }\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static void setDateForHistoricSync(FilterRule rule, String lastModifieldFieldPath) {\n        if (CollectionUtils.isEmpty(rule.getRules())) {\n            if (rule.getFieldInfo().getJsonPath().equalsIgnoreCase(lastModifieldFieldPath) &&\n                    rule.getOp() == FilterOperator.GT) {\n                try {\n                    DateTimeFormatter sourceDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSz\");\n                    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"1970-01-01T00:00:00.000+00:00\", sourceDateTimeFormatter.withZone(ZoneId.of(\"UTC\")));\n\n                    DateTimeFormatter targetDateTimeFormatter = StringUtils.isNotEmpty(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            ? DateTimeFormatter.ofPattern(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            : DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n                    ZoneId zoneId = StringUtils.isNotBlank(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            ? ZoneId.of(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            : ZoneId.of(\"UTC\");\n\n                    rule.getValues().get(0).setValue(zonedDateTime.format(targetDateTimeFormatter.withZone(zoneId)));\n\n                } catch (Exception e) {\n                    LOGGER.info(\"Date Parse exception occurred while setting from date. {}\", e);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.DATE_PARSE_EXCEPTION,\n                            String.format(\"Date Parse exception occurred while setting from date to January 01, 1970 due to %s\", e));\n                }\n            }\n        } else {\n            rule.getRules().forEach(innerRule -> setDateForHistoricSync(innerRule, lastModifieldFieldPath));\n        }\n    }\n\n    private static com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo getFieldInfoList(com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fetchTaskFieldInfo) {\n        com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo fieldInfo = new com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo();\n        fieldInfo.setName(fetchTaskFieldInfo.getName());\n        fieldInfo.setJsonPath(fetchTaskFieldInfo.getJsonPath());\n        fieldInfo.setFieldAlias(fetchTaskFieldInfo.getFieldAlias());\n        fieldInfo.setDecimalPlaces(fetchTaskFieldInfo.getDecimalPlaces());\n        if (null != fetchTaskFieldInfo.getDateTimeProperties()) {\n            DateTimeProperties dateTimeProperties = new DateTimeProperties();\n            dateTimeProperties.setFormat(fetchTaskFieldInfo.getDateTimeProperties().getFormat());\n            dateTimeProperties.setTimeZoneId(\"UTC\");\n            fieldInfo.setDateTimeProperties(dateTimeProperties);\n\n        }\n        fieldInfo.setDataType(com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.getDataType(fetchTaskFieldInfo.getDataType().getDataType()));\n        fieldInfo.setFieldType(com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType.FIELD);\n        fieldInfo.setIsCurrencyField(fetchTaskFieldInfo.isIsCurrencyField());\n        return fieldInfo;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            List<com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo> ipaasFetchDetails) {\n        Set<String> sourceFieldNames = ipaasFetchDetails\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":88,"endLine":119,"content":"    public static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        LOGGER.debug(\"Request to hubspot fetch started !!\");\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        List<File> uncompressedInputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n            HubspotExtractDetails fetchTaskDetails = convertJsonToObject(metaData.get(HUBSPOT_EXTRACT_DETAILS_KEY), HubspotExtractDetails.class);\n            extractDataFromHubspot(externalTaskRequestContext, workflowJobDetails, fetchTaskDetails,\n                    auditMetadata, uncompressedInputFiles);\n\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjectionClause(), null);\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(uncompressedInputFiles.stream().map(File::getAbsolutePath).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(true)\n                    .setExcludedStrings(StringUtils.EMPTY)\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(msg(\"Error while fetching data from Hubspot\"), e);\n        } finally {\n            LOGGER.debug(\"Request to hubspot fetch completed in {} secs\", stopwatch.elapsed(TimeUnit.SECONDS));\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.setDateForHistoricSync","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":456,"endLine":483,"content":"    private static void setDateForHistoricSync(FilterRule rule, String lastModifieldFieldPath) {\n        if (CollectionUtils.isEmpty(rule.getRules())) {\n            if (rule.getFieldInfo().getJsonPath().equalsIgnoreCase(lastModifieldFieldPath) &&\n                    rule.getOp() == FilterOperator.GT) {\n                try {\n                    DateTimeFormatter sourceDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSz\");\n                    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"1970-01-01T00:00:00.000+00:00\", sourceDateTimeFormatter.withZone(ZoneId.of(\"UTC\")));\n\n                    DateTimeFormatter targetDateTimeFormatter = StringUtils.isNotEmpty(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            ? DateTimeFormatter.ofPattern(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            : DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n                    ZoneId zoneId = StringUtils.isNotBlank(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            ? ZoneId.of(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            : ZoneId.of(\"UTC\");\n\n                    rule.getValues().get(0).setValue(zonedDateTime.format(targetDateTimeFormatter.withZone(zoneId)));\n\n                } catch (Exception e) {\n                    LOGGER.info(\"Date Parse exception occurred while setting from date. {}\", e);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.DATE_PARSE_EXCEPTION,\n                            String.format(\"Date Parse exception occurred while setting from date to January 01, 1970 due to %s\", e));\n                }\n            }\n        } else {\n            rule.getRules().forEach(innerRule -> setDateForHistoricSync(innerRule, lastModifieldFieldPath));\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1ce2f6dc-5c5f-4ffa-84d9-48c4ab15f90f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":234,"endLine":246,"content":".getQuery();\n            LOGGER.info(\"Redshift/Postgres Extract Query: {}\", postgresExtractQuery);\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionid {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOG","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.getFieldNames","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":267,"endLine":271,"content":"    private static List<String> getFieldNames(List<FieldInfo> showFields) {\n        return showFields.stream()\n                .map(fieldInfo -> StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName()))\n                .collect(Collectors.toList());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java#ExternalTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":27,"endLine":29,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e02d5a0-a64d-4711-8589-9224cafcbe44","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":294,"endLine":312,"content":"         ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        return ipaasStagingFieldInfos;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n        Set<String> sourceFieldNames = ipaasStagingLoadDetails.getProjections()\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.modifyFromClauseForRedshiftAndPostgres","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":223,"endLine":225,"content":"    private static String modifyFromClauseForRedshiftAndPostgres(String postgresExtractQuery, String schema) {\n        return postgresExtractQuery.replace(\"from \", \"from \" + schema + \".\");\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"526ba65f-8959-432c-9c37-4e61a6b10620","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":416,"endLine":432,"content":"               CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        BasicDataSource dataSource = DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                fetchTaskDetails.getTaskId(), fetchTaskDetails.getJobId());\n        LOGGER.info(\"Showing ipaas staging details. tId- {}, jobId- {}, taskId- {}, Ipaas staging details  : {}\",\n                tenantId, jobId, taskId, ipaasStagingDetails);\n\n        //checking and updating field Infos & columns\n        if (ipaasStagingDetails != null && (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, fetchTaskDetails.getProjections())\n                || isUpsertKeyChanged(ipaasStagingDetails, fetchTaskDetails.getUpsertkey()))) {\n  ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setUcId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":155,"endLine":157,"content":"    public void setUcId(String ucId) {\n        this.ucId = ucId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.getDHOBFConfigProperties","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":128,"endLine":151,"content":"    private DHOBFConfigProperties getDHOBFConfigProperties() {\n        try {\n            /*This is initialization block for the expiry cache which will happen once.\n            and since we already short-circuited if DeploymentProperties is not initialized, we can safely initialize the cache here.\n             */\n            if (Objects.isNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE)) {\n                DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = new ExpiryCache<>(DeploymentProperties.getDeploymentProperties().getLongValue(GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS, 60 * 60 * 1000));\n            }\n            //Checking in cache if property exists\n            if (Objects.nonNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY))) {\n                return DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            }\n            //If not present in cache, fetching from DeploymentProperties and storing in cache\n            String configValue = DeploymentProperties.getDeploymentProperties().getValue(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            Precondition.isNotBlank(configValue, GENERIC_SYSTEM_ERROR, \"[NO_OBF] Obfuscation config is not present in dynamic app's config server\");\n            DHOBFConfigProperties dhobfConfigProperties = DHUtils.convertJsonToObject(configValue, DHOBFConfigProperties.class);\n            DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.put(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY, dhobfConfigProperties);\n            return dhobfConfigProperties;\n        } catch (Exception ex) {\n            //Ignoring the exception as we don't want to fail the application startup in cases when DeploymentProperties hasn't been initialized\n            DPDTF.warn(\"[NO_OBF] Error in getting DHOBFConfigProperties: {}\", ex.getMessage(), ex);\n        }\n        return new DHOBFConfigProperties();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java#GA4ServiceImpl.configureTimeouts","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":73,"endLine":89,"content":"    private HttpRequestInitializer configureTimeouts(final HttpRequestInitializer requestInitializer) {\n        return new HttpRequestInitializer() {\n            @Override\n            public void initialize(HttpRequest httpRequest) throws IOException {\n                requestInitializer.initialize(httpRequest);\n                httpRequest.setConnectTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_CONNECT_TIMEOUT_MILLIS, 120000));\n                httpRequest.setReadTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_READ_TIMEOUT_MILLIS, 120000));\n                httpRequest.setNumberOfRetries(getDeploymentProperties().getIntegerValue(GA_EXTRACT_NUM_RETRIES, 5));\n\n                httpRequest.setIOExceptionHandler((request, supportsRetry) -> {\n                    LOGGER.error(\"IOException while calling: \" + request.getUrl() + \". Will issue retry if configured.\");\n                    //to make retries exponential multiply connectTimeout/socketTimeout\n                    return supportsRetry;\n                });\n            }\n        };\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6d1ae7e7-2b18-48d2-b95f-a94664f0edb1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":151,"endLine":170,"content":" fetchTaskDetails, List<String> projectionList) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        try {\n            return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), offset);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), offset);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n           ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8752ec03-e1cb-4de7-9468-a8c82e375b99","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":165,"endLine":193,"content":"m != null) {\n                fileOutputStream.close();\n            }\n            if (jdbcConnection != null) {\n                jdbcConnection.close();\n            }\n        }\n    }\n\n    private void createCsvHeaderAndUpdateFileCopyManager(CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        LOGGER.info(\"Started writing headers {} to csv file for copy manager\", headers);\n        csvFile.setHeaders(headers);\n    }\n\n    private void createCsvHeaderAndUpdateFile(CSVPrinter csvPrinter, CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        try {\n            LOGGER.info(\"Started writing headers {} to csv file\", headers);\n            csvPrinter.printRecord(headers);\n            csvFile.setHeaders(headers);\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(e.getMessage(), e);\n        }\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setTaskId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":171,"endLine":173,"content":"    public void setTaskId(String taskId) {\n        this.taskId = taskId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5ae1fb51-2afe-468c-bd49-d0a870ca8bb5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":430,"endLine":448,"content":"InSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, fetchTaskDetails.getProjections())\n                || isUpsertKeyChanged(ipaasStagingDetails, fetchTaskDetails.getUpsertkey()))) {\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            fetchTaskDetails.setLastModifieldFieldValue(0);\n            //setting from date as 1970-01-01T00:00:00.000Z for fetching historical data\n            if (fetchTaskDetails.getWhereClause() != null && !fetchTaskDetails.getWhereClause().getRules().isEmpty() &&\n                    StringUtils.isNotEmpty(fetchTaskDetails.getLastModifieldFieldPath())) {\n                setDateForHistoricSync(fetchTaskDetails.getWhereClause(), fetchTaskDetails.getLastModifieldFieldPath());\n                ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n            }\n        }\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagi","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java#ExternalTask.execute","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":31,"endLine":50,"content":"    public static void execute(ExternalTaskRequestContext externalTaskRequestContext) {\n        for (int i = 0; i < 10; i++) {\n            InputStream inputStream = ExternalTask.class.getClassLoader().getResourceAsStream(\"random.txt\");\n            File file = new File(\"random\" + i + \".txt\");\n            LOGGER.info(\"copying to file \" + file.getName());\n            try {\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                LOGGER.info(\"Copied file \" + file.getName() + \", size: \" + file.length());\n            } catch (IOException e) {\n                LOGGER.error(\"Error copying to file \" + file.getName());\n            }\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java#TooManyOpenFilesTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":27,"endLine":29,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d622a80c-fa77-462b-b04a-d82bd5e699aa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":205,"endLine":228,"content":"rtRequest.setDimensionFilter(gaReportGroup.getDimensionFilterRules().stream().map(this::getDimensionFilterClause).collect(Collectors.toList()));\n//        }\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getMetricFilterRules())) {\n//            //reportRequest.setMetricFilterClauses(gaReportGroup.getMetricFilterRules().stream().map(this::getMetricFilterClause).collect(Collectors.toList()));\n//        }\n//        OrderByInfo orderByInfo = gaReportGroup.getOrderByInfo();\n//        if (orderByInfo != null && CollectionUtils.isNotEmpty(orderByInfo.getOrderByFields())) {\n//            reportRequest.setOrderBys(Lists.newArrayList());\n//            for (FieldInfo fieldInfo : orderByInfo.getOrderByFields()) {\n//                //reportRequest.getOrderBys().add(getOrderBy(fieldInfo, orderByInfo.isAscending()));\n//            }\n//        }\n        return reportRequest;\n    }\n\n    private void writeGA4ReportToParaquetFile(RunReportResponse report, GAReportGroup gaReportGroup, CsvParquetWriter writer) throws IOException {\n        boolean recordsPresent = false;\n        if (report != null) {\n            List<Row> rows = report.getRows();\n            if (CollectionUtils.isNotEmpty(rows)) {\n                recordsPresent = true;\n                for (Row row : rows) {\n                    assertState(CollectionUtils.isNotEmpty(row.getMetricValues()), GENERIC_SYSTEM_ERROR, \"Unexpected error, found metrics empty while reading GA4 report.\");\n                    writer.writeForGA(recordFo","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java#ExternalTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":23,"endLine":52,"content":"public class ExternalTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        LOGGER.info(\"Hello World. This is DynamicTask\");\n        LOGGER.info(\"Reading properties from config file ['task.conf']\");\n        String fileName = DeploymentProperties.getDeploymentProperties().getValue(\"file.name\");\n        String sampleKeyValue = DeploymentProperties.getDeploymentProperties().getValue(\"sample.key\");\n\n        if (StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(sampleKeyValue)) {\n            LOGGER.info(\"Read fileName from conf file 'file.name' : \" + fileName);\n            LOGGER.info(\"Value of 'sample.key' : \" + sampleKeyValue);\n        } else {\n            throw new RuntimeException(\"Failed to read properties ['file.name', 'sample.key'] from conf file\");\n\n        }\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#L1-L312","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":1,"endLine":312,"content":"package com.gainsight.services.external.ipaas.staging.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.integration.exception.externaltasks.ExternalTaskException;\nimport com.gainsight.integration.exception.externaltasks.ExternalTasksValidationCode;\nimport com.gainsight.integration.staging.beans.DatabaseConnectionRequest;\nimport com.gainsight.integration.staging.beans.IpaasStagingDetails;\nimport com.gainsight.integration.staging.beans.IpaasStagingFieldInfo;\nimport com.gainsight.integration.staging.beans.IpaasStagingLoadDetails;\nimport com.gainsight.integration.staging.services.IpaasStagingDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDaoImpl;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDaoImpl;\nimport com.gainsight.integration.staging.utils.DatabaseConnectionPoolUtility;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.MDA_GAINSIGHT_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 05-APR-2020\n * External Task for loading records to ipaas staging postgres tables.\n */\n\npublic class IpaasStagingLoadTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasStagingLoadTask.class);\n\n    public static final String IPAAS_STAGING_LOAD_DETAILS_KEY = \"ipaasStagingLoadDetails\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas staging load started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        List<File> inputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n\n\n            // Get source S3 path on which free form query needs to be executed and convert it to apache drill path\n            List<String> parents = convertJsonToObject(metaData.get(\"parents\"), new TypeReference<List<String>>() {\n            });\n            Precondition.isNotEmpty(parents, ValidationCode.GENERIC_SYSTEM_ERROR, \"Parents in metadata is empty!\");\n\n            IpaasStagingLoadDetails ipaasStagingLoadDetails =\n                    convertJsonToObject(metaData.get(IPAAS_STAGING_LOAD_DETAILS_KEY), IpaasStagingLoadDetails.class);\n\n            //fetch dp staging details\n            BasicDataSource dataSource = getIpaasStagingConnectionDataSource(workflowJobDetails, tenantId, jobId,\n                    taskId, ipaasStagingLoadDetails, externalTaskRequestContext);\n            IpaasStagingDetails ipaasStagingDetails = null;\n            if (ipaasStagingLoadDetails.getStagingConnectionInfo() != null) {\n                ipaasStagingDetails = stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId,\n                        ipaasStagingLoadDetails, dataSource);\n            }\n\n            IpaasStagingDao stagingDao = new IpaasStagingDaoImpl(dataSource);\n\n            //Download Ready csv File from parent task\n            LOGGER.info(\"Downloading parent task CSV file for tId- {}, jobId- {}, taskId- {}, staging details: {}\",\n                    tenantId, jobId, taskId, ipaasStagingDetails);\n\n            String directory = ExternalTaskUtil.downloadParentTaskResults(externalTaskRequestContext, parents.get(0));\n            LOGGER.info(\"Parent directory name for  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    parents.get(0), directory);\n            File folder = new File(directory);\n            inputFiles = Arrays.asList(folder.listFiles());\n            LOGGER.info(\"input file names  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    inputFiles.stream().map(i -> i.toString()).collect(Collectors.joining(\" , \")));\n\n            int recordsAffected = 0;\n            for (File file : inputFiles) {\n                recordsAffected += stagingDao.batchUpsert(ipaasStagingDetails, file, ipaasStagingLoadDetails.getTenantZoneId());\n            }\n\n            LOGGER.info(\"{} records affected for  tId- {}, jobId- {}, taskId- {}\", recordsAffected, tenantId, jobId, taskId);\n            List<FieldInfo> fieldInfos = Lists.newArrayList();\n            FieldInfo fieldInfo;\n            for (IpaasStagingFieldInfo ipaasStagingFieldInfo : ipaasStagingDetails.getFieldInfos()) {\n                fieldInfo = new FieldInfo();\n                fieldInfo.setName(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setFieldAlias(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setDataType(DataType.getDataType(ipaasStagingFieldInfo.getDataType()));\n                fieldInfos.add(fieldInfo);\n            }\n            TaskResult taskResult = new TaskResult(null, recordsAffected, fieldInfos, null);\n            ExternalTaskResult externalTaskResult = new ExternalTaskResult(taskResult, true);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasStagingLoad external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        } finally {\n            if (CollectionUtils.isNotEmpty(inputFiles)) {\n                inputFiles.forEach(FileUtils::deleteQuietly);\n            }\n            LOGGER.error(\"Request to ipaas staging load completed in {} secs for  tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        }\n    }\n\n\n    private static BasicDataSource getIpaasStagingConnectionDataSource(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                       String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                       ExternalTaskRequestContext externalTaskRequestContext) {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        return DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n    }\n\n    private static IpaasStagingDetails stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                BasicDataSource dataSource) throws Exception {\n\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                ipaasStagingLoadDetails.getTaskId(), ipaasStagingLoadDetails.getJobId());\n\n        IpaasStagingDao ipaasStagingDao = new IpaasStagingDaoImpl(dataSource);\n        if (ipaasStagingDetails == null) {\n            LOGGER.info(\"Preparing ipaas staging postgres details as No staging details found for tId- {}, jobId- {}, taskId- {}\",\n                    tenantId, jobId, taskId);\n            ipaasStagingDetails = prepareIpaasStagingDetailsFromExtractionDetails(\n                    workflowJobDetails.getTenantId(), ipaasStagingLoadDetails.getConnectionId(),\n                    ipaasStagingLoadDetails.getJobId(), ipaasStagingLoadDetails);\n            ipaasStagingDetailsDao.insert(ipaasStagingDetails);\n            LOGGER.info(\"Inserting staging details metadata  for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.create(ipaasStagingDetails);\n            LOGGER.info(\"Created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        }\n\n        //checking and updating field Infos & columns\n        if (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, ipaasStagingLoadDetails)\n                || isUpsertKeyChanged(ipaasStagingDetails, ipaasStagingLoadDetails.getUpsertkey())) {\n\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = updateFieldInfosInStagingDetails(ipaasStagingLoadDetails);\n            ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n            ipaasStagingDetailsDao.updateIpaasStagingFieldInfosByID(ipaasStagingDetails);\n            LOGGER.info(\"updating fieldinfo metadata in staging details for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.dropAndCreate(ipaasStagingDetails);\n            LOGGER.info(\"re created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDetails.setInSync(true);\n            ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n        }\n        return ipaasStagingDetails;\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static IpaasStagingDetails prepareIpaasStagingDetailsFromExtractionDetails(String tenantId,\n                                                                                       String connectionId, String jobId,\n                                                                                       IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        IpaasStagingDetails ipaasStagingDetails = new IpaasStagingDetails();\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if (i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n        ipaasStagingDetails.setTenantId(tenantId);\n        ipaasStagingDetails.setConnectorJobId(jobId);\n        ipaasStagingDetails.setConnectionId(connectionId);\n        ipaasStagingDetails.setTaskId(ipaasStagingLoadDetails.getTaskId());\n        ipaasStagingDetails.setTableName(String.format(\"ips_%s_%s_%s\", tenantId.substring(0, tenantId.indexOf(\"-\")),\n                jobId.replaceAll(\"-\", \"\"),\n                ipaasStagingLoadDetails.getTaskId().replaceAll(\"-\", \"\")).toLowerCase());\n        ipaasStagingDetails.setInSync(true);\n        return ipaasStagingDetails;\n    }\n\n    private static List<IpaasStagingFieldInfo> updateFieldInfosInStagingDetails(IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if ((i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATE\n                    || i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATETIME)\n                    && i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        return ipaasStagingFieldInfos;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n        Set<String> sourceFieldNames = ipaasStagingLoadDetails.getProjections()\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.getErrorWriter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":239,"endLine":251,"content":"    private static CSVPrinter getErrorWriter(List<String> headers, DPFile errorFile) {\n        CSVPrinter csvPrinter = null;\n        try {\n            headers.add(\"Error Message\");\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            String[] headersArr = Iterables.toArray(headers, String.class);\n            CSVFormat format = csvFormat.withHeader(headersArr).withSkipHeaderRecord(false);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(errorFile)), format);\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating csvWriter for error file {}\", e.getMessage());\n        }\n        return csvPrinter;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"799b1367-64ca-451a-b4ae-f022bb9a1e76","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":156,"endLine":179,"content":"skInfos = taskInfos.stream().filter(taskInfo -> taskInfo.getTaskType().equals(TaskType.IPAAS_EXTRACT)).collect(Collectors.toList());\n                if (CollectionUtils.isNotEmpty(extractTaskInfos)) {\n                    extractTaskInfos.stream().forEach(taskInfo -> {\n                        if (CollectionUtils.isNotEmpty(taskInfo.getFieldInfoList())) {\n                            taskInfo.getFieldInfoList().stream().forEach(fieldInfo -> {\n                                        if (fieldInfo.getDataType().equals(\"date-time\") && fieldInfo.getMeta().containsKey(\"NTZ_ZONE_ID\")) {\n                                            ntzFields.put(fieldInfo.getPath(), fieldInfo.getMeta().get(\"NTZ_ZONE_ID\").toString());\n                                        }\n                                    }\n                            );\n                        }\n                    });\n                }\n            }\n\n            TaskInfo taskInfo = taskInfos.stream().filter(i -> i.getTaskId().equalsIgnoreCase(fetchTaskDetails.getTaskId()))\n                    .findFirst().get();\n            LOGGER.info(\"Fetched ipaas job and task details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            Map<String, List<PicklistOption>> picklistMap = Maps.newHashMap();\n\n\n            mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWor","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65d09854-3104-468d-85be-dce295f3be1d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":206,"endLine":226,"content":"ot throwing exception for FRESHDESK connector, fields are missing {}\", ipaasFields);\n                }\n            }\n\n            if (fetchTaskDetails.isResolvePicklist()) {\n                boolean isPicklistFieldPresent = taskInfo.getFieldInfoList().stream().anyMatch(\n                        task -> (Boolean) task.getMeta().get(\"isPicklistField\"));\n                if (!isPicklistFieldPresent && taskInfo.getCriteria() != null && taskInfo.getCriteria().getConditions() != null && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                    isPicklistFieldPresent = taskInfo.getCriteria().getConditions().stream().anyMatch(conditions -> conditions.getLeftOperand().getMeta().containsKey(\"isPicklistField\") && (Boolean) conditions.getLeftOperand().getMeta().get(\"isPicklistField\"));\n                }\n                if (isPicklistFieldPresent) {\n\n                    for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                        populatePicklistMap(picklistMap, objectMetaDataFromConnectors, field);\n                    }\n                    if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                        for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                            if (!condition.isCustomizedFilterField())\n                                populatePicklistMap(picklistMap, objectMetaDataFromConnectors, condition.getLeftOperand());\n                        }\n                    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getLastModifieldFieldPath","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":191,"endLine":193,"content":"    public String getLastModifieldFieldPath() {\n        return lastModifieldFieldPath;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getUcId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":151,"endLine":153,"content":"    public String getUcId() {\n        return ucId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getQueryParamForDataFetch","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":66,"endLine":68,"content":"    public String getQueryParamForDataFetch() {\n        return queryParamForDataFetch;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.convertToJSON","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":251,"endLine":266,"content":"    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a5f65a46-b73b-496a-afee-373573f9f673","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":81,"endLine":108,"content":"etResult();\n                List<Object> recordList = new ArrayList<>();\n                for (int i = 0; i < data.length(); i++) {\n                    JSONObject jsonObject = data.getJSONObject(i);\n                    sqlQueryInfo.getShowFields().forEach(showField -> {\n                        String key = showField.getFieldAlias().toLowerCase();\n                        if (jsonObject.isNull(key)) {\n                            recordList.add(null);\n                        } else {\n                            if (showField.getDataType().equals(DataType.NUMBER)) {\n                                recordList.add(jsonObject.getDouble(key));\n                            } else if (showField.getDataType().equals(DataType.DATETIME)) {\n                                recordList.add(convertDateTimeFormat(jsonObject.get(key), showField.getDateTimeProperties()));\n                            } else {\n                                recordList.add(jsonObject.get(key));\n                            }\n                        }\n                    });\n                    csvPrinter.printRecord(recordList);\n                    recordList.clear();\n                }\n                offset = offset + limit;\n                recordsRetrieved = recordsRetrieved + data.length();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n                if (data.length() != limit) {\n                    done = true;\n                }\n            } while (!done && !Thread.currentThread(","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b30c782-499a-43eb-8997-60044c9bc924","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":282,"endLine":298,"content":"column for job:{} of tenant:{}. Hence skipping logging of sample values\", jobId, tenantId);\n            } else {\n                LOGGER.info(\"Field list for which sample is required: {} for job:{} and tenant:{}\", sampleDataFieldList.stream().map(FieldInfo::getFieldAlias).collect(Collectors.toList()), jobId, tenantId);\n                CSVFormat csvFormatter = DPUtils.getCSVFormatter(DOUBLE_QUOTE_CHAR, DOUBLE_QUOTE_CHAR, true);\n                csvInputStream = Files.newInputStream(csvFile.getAbsoluteFile().toPath());\n                try (CSVParser csvParser = new CSVParser(new BufferedReader(new InputStreamReader(csvInputStream)), csvFormatter)) {\n                    for (CSVRecord record : csvParser) {\n                        Map<String, String> recordMap = DPCollectionUtils.nullSafeMap(record.toMap());\n                        for (FieldInfo fieldInfo : sampleDataFieldList) {\n                            String fieldAlias = fieldInfo.getFieldAlias();\n                            String recordVal = recordMap.get(fieldInfo.getFieldAlias());\n                            if (StringUtils.isNotBlank(recordVal)) {\n                                if (dateOrDateTimeColumnValueMap.containsKey(fieldAlias)) {\n                                    List<String> dateValues = dateOrDateTimeColumnValueMap.get(fieldAlias);\n                                    if (dateValues.size() < sampleRecordSize) {\n                                        dateValues.add(recordVal);\n                                ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.buildGAConnectionInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":150,"endLine":157,"content":"    private GA4ConnectionInfo buildGAConnectionInfo(GAAccessDetails gaAccessDetailsFromJob) {\n        GA4ConnectionInfo connectionInfo = new GA4ConnectionInfo();\n        GAAccessDetails gaAccessDetailsWithCredentials = fetchAccountDetailsFromMDA(gaAccessDetailsFromJob);\n        connectionInfo.setClientId(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientId()));\n        connectionInfo.setClientSecret(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientSecret()));\n        connectionInfo.setRefreshToken(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getRefreshToken()));\n        return connectionInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a809efca-24bc-420e-8c83-2182dae83d9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":264,"endLine":281,"content":"ldValueToFetchDeltaData());\n            dataExtractionRequest.setIgnorableErrorMessages(fetchTaskDetails.getIgnorableErrorMessages());\n            dataExtractionRequest.setQueryParamForDataFetch(fetchTaskDetails.getQueryParamForDataFetch());\n            dataExtractionRequest.setPicklistOptionMap(picklistMap);\n            dataExtractionRequest.getProperties().putAll(connectionDetailsMap);\n            taskInfo.getFieldInfoList().stream().filter(fieldInfo -> fieldInfo.getMeta().containsKey(\"isPrimaryKey\") && (Boolean) fieldInfo.getMeta().get(\"isPrimaryKey\")).findFirst().ifPresent(fieldInfo -> dataExtractionRequest.setPrimaryField(fieldInfo.getPath()));\n\n\n            if (null != fetchTaskDetails.getOrderByInfo() && !fetchTaskDetails.getOrderByInfo().getOrderByFields().isEmpty()) {\n                if (fetchTaskDetails.getOrderByInfo().isAscending()) {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"asc\", \"UTF-8\"));\n                } else {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"desc\", \"UTF-8\"));\n                }\n            }\n            dataExtractionRequest.setDefaultSleepTimeOnFail(fetchTaskDetails.getDefaultSleepTimeOnFail());\n            dataExtractionRequest.setMaxNoOfRetries(fetchTaskDetails.getMaxNumberOfRetries());\n            if (!ntzF","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setOrderByInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":207,"endLine":209,"content":"    public void setOrderByInfo(OrderByInfo orderByInfo) {\n        this.orderByInfo = orderByInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"be33bc9e-4a0b-47f2-9e83-57d7baf7985a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":1,"endLine":35,"content":"package com.gainsight.services.external.out.of.disk.space.task;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\n\n\n/**\n * @author sthammishetty on 09/06/20\n * <p>\n * Sample ExternalTask which tries to use more than allocated disk space. This task get's failed due to excess disk utilization\n */\npublic class ExternalTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class.getName());\n\n    public static void main(String[] args) {\n        execute(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void execute(ExternalTaskRequestContext externalTaskRequestContext) {\n        for (int i = 0; i < 10; i++) {\n            InputStream inputStream = ExternalTask.class.getClassLoader().getResourceAsStream(\"random.txt\");\n            File file = new File(\"random\" + i + \".txt\");\n         ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java#L1-L16","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java","startLine":1,"endLine":16,"content":"package com.gainsight.services.external.ga4.extraction.task.utils;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\n\nimport java.util.Map;\n\n/**\n * Created by Tarika on 12/12/2021.\n */\npublic final class GA4ExtractUtil {\n\n    public static Map<String, Object> getGA4Report(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        return new GA4ExtractHelper(jobId, taskId, metaData, systemProperties, workflowJobDetails).getGA4Report();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f7c92b5f-d90a-41b1-a478-19fa3d5a33fe","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":252,"endLine":266,"content":"\", true);\n            } else {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", false);\n            }\n            dataExtractionRequest.getProperties().put(\"snowflakeFileSize\", DeploymentProperties.getDeploymentProperties().getLongValue(\"snowflake.file.size\", 200000000));\n            dataExtractionRequest.getProperties().put(\"snowflakeBatchLimit\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"snowflake.batch.limit\", 10000));\n            dataExtractionRequest.setCloudElementsBaseUrl(connectionDetailsMap.get(\"baseUrl\").toString());\n            dataExtractionRequest.setDateTimeConversionRequired(Boolean.parseBoolean(connectionDetailsMap.get(\"isDateTimeConversionRequired\").toString()));\n            dataExtractionRequest.getProperties().put(PAGE_SIZE, fetchTaskDetails.getPageSize());\n            dataExtractionRequest.getProperties().put(\"skipFieldsAsQueryParam\", fetchTaskDetails.isSkipFieldsForFetch());\n            dataExtractionRequest.setLastModifiedFieldName(fetchTaskDetails.getLastModifieldFieldPath());\n            dataExtractionRequest.setLastModifiedFieldValue(fetchTaskDetails.getLastModifieldFieldValue());\n            dataExtractionRequest.setHonourLastModfiedFieldValueToFetchDeltaData(fetchTaskDetails.isHonourLastModfiedFieldValueToFetchDeltaData());\n            dataExtractionRequest.setIgnorableErrorMessages(fetchTaskDetails.getIgnorableErrorMessages());\n            dataExtractionRequest.setQueryParamForDataFetch(fetch","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ff1965e7-fbc6-4ebb-ba5c-3fb7ed0ff9dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":35,"endLine":72,"content":"import org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.MDA_GAINSIGHT_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 05-APR-2020\n * External Task for loading records to ipaas staging postgres tables.\n */\n\npublic class IpaasStagingLoadTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasStagingLoadTask.class);\n\n    public static final String IPAAS_STAGING_LOAD_DETAILS_KEY = \"ipaasStagingLoadDetails\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n   ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2a8b0f50-a72a-4256-a49a-b7865d20211e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":177,"endLine":191,"content":".get(\"clientId\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientId received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientSecret\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientSecret received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"refreshToken\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty refreshToken received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        // Setting encrypted GA access details from MDA\n        gaAccessDetailsWithCredentials.setClientId(valueOf(connectionDetails.get(\"clientId\")));\n        gaAccessDetailsWithCredentials.setClientSecret(valueOf(connectionDetails.get(\"clientSecret\")));\n        gaAccessDetailsWithCredentials.setRefreshToken(valueOf(connectionDetails.get(\"refreshToken\")));\n        gaAccessDetailsWithCredentials.setAccountId(gaAccessDetails.getAccountId());\n        return gaAccessDetailsWithCredentials;\n    }\n\n    private RunReportResponse validateGA4Response(BatchRunReportsResponse response) {\n        isNotNull(response, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        List<RunReportResponse> reports = response.getReports();\n        assertState(Col","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java#PlaceholderTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":24,"endLine":26,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#IpaasStagingLoadTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":66,"endLine":147,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas staging load started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        List<File> inputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n\n\n            // Get source S3 path on which free form query needs to be executed and convert it to apache drill path\n            List<String> parents = convertJsonToObject(metaData.get(\"parents\"), new TypeReference<List<String>>() {\n            });\n            Precondition.isNotEmpty(parents, ValidationCode.GENERIC_SYSTEM_ERROR, \"Parents in metadata is empty!\");\n\n            IpaasStagingLoadDetails ipaasStagingLoadDetails =\n                    convertJsonToObject(metaData.get(IPAAS_STAGING_LOAD_DETAILS_KEY), IpaasStagingLoadDetails.class);\n\n            //fetch dp staging details\n            BasicDataSource dataSource = getIpaasStagingConnectionDataSource(workflowJobDetails, tenantId, jobId,\n                    taskId, ipaasStagingLoadDetails, externalTaskRequestContext);\n            IpaasStagingDetails ipaasStagingDetails = null;\n            if (ipaasStagingLoadDetails.getStagingConnectionInfo() != null) {\n                ipaasStagingDetails = stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId,\n                        ipaasStagingLoadDetails, dataSource);\n            }\n\n            IpaasStagingDao stagingDao = new IpaasStagingDaoImpl(dataSource);\n\n            //Download Ready csv File from parent task\n            LOGGER.info(\"Downloading parent task CSV file for tId- {}, jobId- {}, taskId- {}, staging details: {}\",\n                    tenantId, jobId, taskId, ipaasStagingDetails);\n\n            String directory = ExternalTaskUtil.downloadParentTaskResults(externalTaskRequestContext, parents.get(0));\n            LOGGER.info(\"Parent directory name for  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    parents.get(0), directory);\n            File folder = new File(directory);\n            inputFiles = Arrays.asList(folder.listFiles());\n            LOGGER.info(\"input file names  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    inputFiles.stream().map(i -> i.toString()).collect(Collectors.joining(\" , \")));\n\n            int recordsAffected = 0;\n            for (File file : inputFiles) {\n                recordsAffected += stagingDao.batchUpsert(ipaasStagingDetails, file, ipaasStagingLoadDetails.getTenantZoneId());\n            }\n\n            LOGGER.info(\"{} records affected for  tId- {}, jobId- {}, taskId- {}\", recordsAffected, tenantId, jobId, taskId);\n            List<FieldInfo> fieldInfos = Lists.newArrayList();\n            FieldInfo fieldInfo;\n            for (IpaasStagingFieldInfo ipaasStagingFieldInfo : ipaasStagingDetails.getFieldInfos()) {\n                fieldInfo = new FieldInfo();\n                fieldInfo.setName(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setFieldAlias(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setDataType(DataType.getDataType(ipaasStagingFieldInfo.getDataType()));\n                fieldInfos.add(fieldInfo);\n            }\n            TaskResult taskResult = new TaskResult(null, recordsAffected, fieldInfos, null);\n            ExternalTaskResult externalTaskResult = new ExternalTaskResult(taskResult, true);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasStagingLoad external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        } finally {\n            if (CollectionUtils.isNotEmpty(inputFiles)) {\n                inputFiles.forEach(FileUtils::deleteQuietly);\n            }\n            LOGGER.error(\"Request to ipaas staging load completed in {} secs for  tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setHonourLastModfiedFieldValueToFetchDeltaData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":99,"endLine":101,"content":"    public void setHonourLastModfiedFieldValueToFetchDeltaData(boolean honourLastModfiedFieldValueToFetchDeltaData) {\n        this.honourLastModfiedFieldValueToFetchDeltaData = honourLastModfiedFieldValueToFetchDeltaData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"11877523-f683-45cc-baa8-28a14a1b7301","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":336,"endLine":365,"content":"                      ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        }\n    }\n\n    private static void validateMappingsExistInExternalSystem(FieldInfo field, JsonObject objectMetaDataFromConnectors, Set<String> ipaasFields) {\n        JsonObject data;\n        data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n        JsonArray fields = data.get(\"fields\").getAsJsonArray();\n        Iterator<JsonElement> iterator = fields.iterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            JsonObject fieldInfo = iterator.next().getAsJsonObject();\n            JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n            if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            ipaasFields.add(field.getLabel());\n        }\n    }\n\n    private static void populatePicklistMap(Map<String, List<Picklist","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a1fefecd-52dc-4c4f-9227-5f8ffb35a046","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":98,"endLine":121,"content":"tExtractDetails fetchTaskDetails = convertJsonToObject(metaData.get(HUBSPOT_EXTRACT_DETAILS_KEY), HubspotExtractDetails.class);\n            extractDataFromHubspot(externalTaskRequestContext, workflowJobDetails, fetchTaskDetails,\n                    auditMetadata, uncompressedInputFiles);\n\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjectionClause(), null);\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(uncompressedInputFiles.stream().map(File::getAbsolutePath).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(true)\n                    .setExcludedStrings(StringUtils.EMPTY)\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(msg(\"Error while fetching data from Hubspot\"), e);\n        } finally {\n            LOGGER.debug(\"Request to hubspot fetch completed in {} secs\", stopwatch.elapsed(TimeUnit.SECONDS));\n        }\n    }\n\n    private static void extractDataFromHubspot(ExternalTaskRequestContext ex","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"afddaca6-5723-4219-82e2-82d0658ebdf1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":202,"endLine":232,"content":"\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n            /**\n             * Has to explicitly shutdown AbandonedConnectionCleanupThread to avoid memory leak.\n             * Memory Leak:\n             *      Static block inside @see AbandonedConnectionCleanupThread class is spawning a new thread , which is holding a reference to the current classLoader object.\n             * @see AbandonedConnectionCleanupThread#checkedShutdown() explictly shoutdowns the executorService that created the thread, thereby removing the reference to current classLoader.\n             */\n            AbandonedConnectionCleanupThread.checkedShutdown();\n            Enumeration<Driver> drivers = DriverManager.getDrivers();\n            while (drivers.hasMoreElements()) {\n                Driver driver = drivers.nextElement();\n                if (driver.getClass().equals(com.mysql.cj.jdbc.Driver.class)) {\n                    try {\n                        DriverManager.deregisterDriver(driver);\n                    } catch (SQLException e) {\n                        LOGGER.error(\"Failed to deregister Driver : {}\", driver.getClass().getName());\n                    }\n                    break;\n                }\n            }\n        }\n ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bdb08961-3a8a-49be-af39-92e240af37d7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":357,"endLine":383,"content":"              break;\n            }\n        }\n        if (!found) {\n            ipaasFields.add(field.getLabel());\n        }\n    }\n\n    private static void populatePicklistMap(Map<String, List<PicklistOption>> picklistMap,\n                                            JsonObject objectMetaDataFromConnectors, FieldInfo field) {\n        JsonObject data;\n\n        if (field.getMeta().containsKey(\"isPicklistField\") && (Boolean) field.getMeta().get(\"isPicklistField\")) {\n            data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n            JsonArray fields = data.get(\"fields\").getAsJsonArray();\n            Iterator<JsonElement> iterator = fields.iterator();\n            List<PicklistOption> picklistList = Lists.newArrayList();\n            while (iterator.hasNext()) {\n                JsonObject fieldInfo = iterator.next().getAsJsonObject();\n                JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n                if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath()) &&\n                        meta.getAsJsonObject().get(\"isPicklistField\").getAsBoolean()) {\n                    JsonArray options = fieldInfo.get(\"options\").getAsJsonArray();\n                    options.forEach(option -> {\n                        PicklistOption picklistOption = new PicklistOption();\n                        picklistOption.setPicklistLabel(option.getAsJsonObject().get(\"label\").getAsString());\n                        picklistOption.setPicklistValue(option","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.toString","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":247,"endLine":274,"content":"    public String toString() {\n        return \"IpaasExtractionDetails{\" +\n                \"connectionId='\" + connectionId + '\\'' +\n                \", externalEntityName='\" + externalEntityName + '\\'' +\n                \", projections=\" + projections +\n                \", whereClause=\" + whereClause +\n                \", orderByInfo=\" + orderByInfo +\n                \", query='\" + query + '\\'' +\n                \", connectorType='\" + connectorType + '\\'' +\n                \", ucId='\" + ucId + '\\'' +\n                \", ipaasStagingDetailsId='\" + ipaasStagingDetailsId + '\\'' +\n                \", jobId='\" + jobId + '\\'' +\n                \", taskId='\" + taskId + '\\'' +\n                \", stagingConnectionInfo=\" + stagingConnectionInfo +\n                \", lastModifieldFieldPath='\" + lastModifieldFieldPath + '\\'' +\n                \", resolvePicklist=\" + resolvePicklist +\n                \", upsertkey='\" + upsertkey + '\\'' +\n                \", lastModifieldFieldValue=\" + lastModifieldFieldValue +\n                \", honourLastModfiedFieldValueToFetchDeltaData=\" + honourLastModfiedFieldValueToFetchDeltaData +\n                \", defaultSleepTimeOnFail=\" + defaultSleepTimeOnFail +\n                \", pageSize='\" + pageSize + '\\'' +\n                \", enableDownloadSourceData=\" + enableDownloadSourceData +\n                \", maxNumberOfRetries=\" + maxNumberOfRetries +\n                \", ignoreInvalidData=\" + ignoreInvalidData +\n                \", ignorableErrorMessages=\" + ignorableErrorMessages +\n                \", queryParamForDataFetch=\" + queryParamForDataFetch +\n                '}';\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setConnectionId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":107,"endLine":109,"content":"    public void setConnectionId(String connectionId) {\n        this.connectionId = connectionId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.createCsvHeaderAndUpdateFileCopyManager","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":174,"endLine":179,"content":"    private void createCsvHeaderAndUpdateFileCopyManager(CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        LOGGER.info(\"Started writing headers {} to csv file for copy manager\", headers);\n        csvFile.setHeaders(headers);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setStagingConnectionInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":187,"endLine":189,"content":"    public void setStagingConnectionInfo(ConnectionInfo stagingConnectionInfo) {\n        this.stagingConnectionInfo = stagingConnectionInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aca49f7e-efed-44fc-99a0-92e2794f532c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":1,"endLine":26,"content":"package com.gainsight.services.external.commons;\n\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.AbstractObfuscationTurboFilter;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.DHLogObfuscationUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.pojo.DHOBFConfigProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.ExpiryCache;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHFeatureUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.Precondition;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.*;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WebConstants.FEATURE_CONFIG_EVALUATE_PATH;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.FEATURE_CONFIG_URL;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.DUMMY_STRING;\nimport static com.gainsight.services.utilit","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#L1-L308","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":1,"endLine":308,"content":"package com.gainsight.services.external.hubspot.extraction.task;\n\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.JsonFileContentType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.hubspotextract.HubspotAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.hubspotextract.HubspotExtractDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowTaskDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.JsonParseException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.ObjectUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.HUBSPOT_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * user : Aditya Agrawal\n * date : 03/28/22\n **/\npublic class HubspotExtractTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotExtractTask.class);\n\n    private static final String PROPERTIES = \"properties\";\n    private static final String CLIENT_ID = \"clientId\";\n    private static final String CLIENT_SECRET = \"clientSecret\";\n    private static final String REFRESH_TOKEN = \"refreshToken\";\n    private static final String JSON_EXTENSION = \".json\";\n    private static final String HUBSPOT_API_VERSION = \"hubspotApiVersion\";\n    private static final String HUBSPOT_API_VERSION_LEGACY = \"legacy\";\n    private static final String HUBSPOT_API_EXTRACT = \"hubspotExtract\";\n\n\n    private static final int FILE_SIZE_THRESHOLD_IN_BYTES = 209715200;\n    private static final String CONNECTOR_TYPE = \"hubspot\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String CARRIAGE_RETURN = \"\\n\";\n\n\n    private HubspotExtractTask() {\n    }\n\n    /**\n     * External task for extracting data from Hubspot.\n     */\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        LOGGER.debug(\"Request to hubspot fetch started !!\");\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        List<File> uncompressedInputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n            HubspotExtractDetails fetchTaskDetails = convertJsonToObject(metaData.get(HUBSPOT_EXTRACT_DETAILS_KEY), HubspotExtractDetails.class);\n            extractDataFromHubspot(externalTaskRequestContext, workflowJobDetails, fetchTaskDetails,\n                    auditMetadata, uncompressedInputFiles);\n\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjectionClause(), null);\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(uncompressedInputFiles.stream().map(File::getAbsolutePath).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(true)\n                    .setExcludedStrings(StringUtils.EMPTY)\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(msg(\"Error while fetching data from Hubspot\"), e);\n        } finally {\n            LOGGER.debug(\"Request to hubspot fetch completed in {} secs\", stopwatch.elapsed(TimeUnit.SECONDS));\n        }\n    }\n\n    private static void extractDataFromHubspot(ExternalTaskRequestContext externalTaskRequestContext, DPWorkflowJobDetailsDTO workflowJobDetails,\n                                               HubspotExtractDetails fetchTaskDetails, AuditMetadata auditMetadata,\n                                               List<File> uncompressedInputFiles) throws Exception {\n        MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(), TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n        JsonObject jsonObject = mdaCalloutsService.getConnectionDetailsFromConnectors(fetchTaskDetails.getConnectorId(), CONNECTOR_TYPE);\n        isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n        HubspotAccessDetails accessDetailsFromDB = extractAccessDetails(jsonObject);\n        uncompressedInputFiles.addAll(readData(workflowJobDetails, externalTaskRequestContext, accessDetailsFromDB, fetchTaskDetails));\n    }\n\n    private static HubspotAccessDetails extractAccessDetails(JsonObject jsonObject) {\n        JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(jsonObject.get(DATA).getAsJsonObject().get(VALUE).getAsString())).getAsJsonObject();\n        HubspotAccessDetails accessDetails = null;\n        if (!decryptedObject.isJsonNull()) {\n            accessDetails = new HubspotAccessDetails();\n            accessDetails.setClientId(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_ID).getAsString());\n            accessDetails.setClientSecret(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_SECRET).getAsString());\n            accessDetails.setRefreshToken(decryptedObject.get(PROPERTIES).getAsJsonObject().get(REFRESH_TOKEN).getAsString());\n        }\n        return accessDetails;\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails) {\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        return getDataFromHubspot(accessDetails, offset, fetchTaskDetails, projectionList);\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails, List<String> projectionList) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        try {\n            return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), offset);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), offset);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static InputStream getDataFromHubspotLatestApi(HubspotAccessDetails accessDetails, String nextPageUrl, HubspotExtractDetails fetchTaskDetails) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        try {\n            return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), nextPageUrl);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), nextPageUrl);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static Deque<File> readData(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, HubspotAccessDetails accessDetails, HubspotExtractDetails fetchTaskDetails) {\n        InputStream stream = null;\n        Deque<File> fileStack = new ArrayDeque<>();\n        try {\n            boolean shouldContinue;\n            String hasMoreKeyword = GSHubSpotEntityEnum.getHasMoreKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String offsetKeyword = GSHubSpotEntityEnum.getRetrievOffsetKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String pluralName = GSHubSpotEntityEnum.getPluralName(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n            long offset = Long.MIN_VALUE;\n            String nextPageUrl = null;\n            int counter = 0;\n            Optional<DPWorkflowTaskDetailsDTO> taskDetailsDTO = workflowJobDetails.getWorkflowDetails().getTasks().stream().\n                    filter(task -> task.getMetaData() != null && task.getMetaData().get(\"taskName\").toString().equalsIgnoreCase(HUBSPOT_API_EXTRACT)).findFirst();\n            String apiVersion = HUBSPOT_API_VERSION_LEGACY;\n            if (!ObjectUtils.isEmpty(taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION))) {\n                apiVersion = taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION).toString();\n            }\n            do {\n                LOGGER.info(\"Paginated api running for offset : {}, pagination api counter: {}, nextpageurl :{} , apiVersion : {} \", offset, counter++, nextPageUrl, apiVersion);\n                if (apiVersion.equalsIgnoreCase(HUBSPOT_API_VERSION_LEGACY)) {\n                    stream = getDataFromHubspot(accessDetails, offset, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    offset = readDataAndStoreInFile(stream, hasMoreKeyword, offsetKeyword, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                } else {// New api Version V3\n                    stream = getDataFromHubspotLatestApi(accessDetails, nextPageUrl, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    nextPageUrl = readDataAndStoreInFileLatestApi(stream, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                }\n                shouldContinue = offset != Long.MIN_VALUE || (StringUtils.isNotEmpty(nextPageUrl));\n            } while (shouldContinue && !Thread.currentThread().isInterrupted());\n        } catch (IOException ioEx) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", ioEx);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", e);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n        return fileStack;\n    }\n\n    private static long readDataAndStoreInFile(InputStream inputStream, String hasMoreKeyword, String offsetKeyword, String pluralName, File tempFile, String entityName) throws IOException {\n        long offset = Long.MIN_VALUE;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, pluralName, tempFile, entityName, jsonObject);\n        offset = shouldContinue(hasMoreKeyword, offsetKeyword, offset, jsonObject);\n        return offset;\n    }\n\n    private static String readDataAndStoreInFileLatestApi(InputStream inputStream, String pluralName, File tempFile, String entityName) throws IOException {\n        String url = null;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, \"results\", tempFile, entityName, jsonObject);\n        url = isAfter(url, jsonObject);\n        return url;\n    }\n\n    private static long shouldContinue(String hasMoreKeyword, String offsetKeyword, long offset, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(hasMoreKeyword) != null && jsonObject.get(hasMoreKeyword).getAsBoolean()) {\n            offset = jsonObject.get(offsetKeyword).getAsLong();\n        }\n        return offset;\n    }\n\n    private static String isAfter(String url, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(\"paging\") != null) {\n            url = jsonObject.getAsJsonObject(\"paging\").getAsJsonObject(\"next\").get(\"link\").getAsString();\n        }\n        return url;\n    }\n\n    private static JsonObject iterativelyPullDataAndStoreInLocal(InputStream inputStream, String pluralName, File tempFile, String entityName, JsonObject jsonObject) throws IOException {\n        JsonArray iterator = null;\n        try {\n            if (entityName.equalsIgnoreCase(GSHubSpotEntityEnum.labelName(GSHubSpotEntityEnum.OWNER)) && !pluralName.equalsIgnoreCase(\"results\")) {\n                iterator = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonArray();\n            } else {\n                jsonObject = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonObject();\n                iterator = jsonObject.getAsJsonArray(pluralName);\n            }\n        } catch (JsonParseException e) {\n            LOGGER.error(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n            throw new DPSystemException(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n        }\n        if (iterator != null)\n            iterator.iterator().forEachRemaining((JsonElement jsonElement) -> {\n                try {\n                    FileUtils.writeStringToFile(tempFile, jsonElement.getAsJsonObject().toString() + CARRIAGE_RETURN, StandardCharsets.UTF_8, true);\n                } catch (IOException e) {\n                    LOGGER.error(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                    throw new DPSystemException(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                }\n            });\n        return jsonObject;\n    }\n\n    private static File getLocalFile(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, Deque<File> fileStack) throws IOException {\n        if (fileStack.isEmpty() || fileStack.peek().length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n            fileStack.push(File.createTempFile(DPUtils.getTempFilePath(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString()), JSON_EXTENSION));\n        }\n        return fileStack.peek();\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java#L1-L58","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":1,"endLine":58,"content":"package com.gainsight.services.external.ga4.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.ga4.extraction.task.utils.GA4ExtractUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * @author Tarika on 12/12/2021\n */\npublic class GA4ExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GA4ExtractionTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetFile parquetFile;\n\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            Map<String, Object> workFlowSystemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            Map<String, Object> extractFile = GA4ExtractUtil.getGA4Report(jobId, taskId, metaData, workFlowSystemProperties, workflowJobDetails);\n            parquetFile = (ParquetFile) extractFile.get(\"parquetFile\");\n            TaskResult taskResult = new TaskResult((List<FieldInfo>) extractFile.get(\"headers\"), null);\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing GA4 Task.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java#GA4Service.initialize","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java","startLine":15,"endLine":17,"content":"    static GA4Service initialize(GA4ConnectionInfo connectionInfo) {\n        return new GA4ServiceImpl(connectionInfo);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d5e428f8-967b-45a0-a7bf-b23e239bf693","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":62,"endLine":91,"content":".time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.bean.IPaasConstants.IS_CURRENCY_FIELD;\nimport static com.gainsight.integration.bean.IPaasConstants.PAGE_SIZE;\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.MDA_GAINSIGHT_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 05-APR-2020\n * External Task for extracting records from ipaas\n */\n\npublic class IpaasExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasExtractionTask.class);\n    public static final String IPAAS_EXTRACT_DETAILS_KEY = \"ipaasExtractDetails\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String IPAAS_INSTANCE_TOKEN = \"IPAAS_INSTANCE_TOKEN\";\n    private static final String IPAAS_ORG_TOKEN = \"IPAAS_ORG_TOKEN\";\n    private static final String IPAAS_USER_TOKEN = \"IPAAS_USER_TOKEN\";\n    private static final String IPAAS","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0cb19c1f-976b-4414-91be-931cdc1805f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":67,"endLine":84,"content":"ternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relational","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.buildReportRequestGA4","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":195,"endLine":218,"content":"    private RunReportRequest buildReportRequestGA4(GAReportGroup gaReportGroup) {\n        RunReportRequest reportRequest = new RunReportRequest();\n        com.google.api.services.analyticsdata.v1beta.model.DateRange dateRange = new com.google.api.services.analyticsdata.v1beta.model.DateRange()\n                .setStartDate(extractDetails.getStartDate())\n                .setEndDate(extractDetails.getEndDate());\n        reportRequest.setProperty(\"properties/\" + extractDetails.getViewId());\n        reportRequest.setDateRanges(Lists.newArrayList(dateRange));\n        reportRequest.setDimensions(gaReportGroup.getDimensions().stream().map(this::getDimensionV4).collect(Collectors.toList()));\n        reportRequest.setMetrics(gaReportGroup.getMetrics().stream().map(this::getMetricV4).collect(Collectors.toList()));\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getDimensionFilterRules())) {\n//            //reportRequest.setDimensionFilter(gaReportGroup.getDimensionFilterRules().stream().map(this::getDimensionFilterClause).collect(Collectors.toList()));\n//        }\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getMetricFilterRules())) {\n//            //reportRequest.setMetricFilterClauses(gaReportGroup.getMetricFilterRules().stream().map(this::getMetricFilterClause).collect(Collectors.toList()));\n//        }\n//        OrderByInfo orderByInfo = gaReportGroup.getOrderByInfo();\n//        if (orderByInfo != null && CollectionUtils.isNotEmpty(orderByInfo.getOrderByFields())) {\n//            reportRequest.setOrderBys(Lists.newArrayList());\n//            for (FieldInfo fieldInfo : orderByInfo.getOrderByFields()) {\n//                //reportRequest.getOrderBys().add(getOrderBy(fieldInfo, orderByInfo.isAscending()));\n//            }\n//        }\n        return reportRequest;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java#GA4ExtractUtil.getGA4Report","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java","startLine":12,"endLine":14,"content":"    public static Map<String, Object> getGA4Report(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        return new GA4ExtractHelper(jobId, taskId, metaData, systemProperties, workflowJobDetails).getGA4Report();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.iterativelyPullDataAndStoreInLocal","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":277,"endLine":300,"content":"    private static JsonObject iterativelyPullDataAndStoreInLocal(InputStream inputStream, String pluralName, File tempFile, String entityName, JsonObject jsonObject) throws IOException {\n        JsonArray iterator = null;\n        try {\n            if (entityName.equalsIgnoreCase(GSHubSpotEntityEnum.labelName(GSHubSpotEntityEnum.OWNER)) && !pluralName.equalsIgnoreCase(\"results\")) {\n                iterator = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonArray();\n            } else {\n                jsonObject = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonObject();\n                iterator = jsonObject.getAsJsonArray(pluralName);\n            }\n        } catch (JsonParseException e) {\n            LOGGER.error(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n            throw new DPSystemException(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n        }\n        if (iterator != null)\n            iterator.iterator().forEachRemaining((JsonElement jsonElement) -> {\n                try {\n                    FileUtils.writeStringToFile(tempFile, jsonElement.getAsJsonObject().toString() + CARRIAGE_RETURN, StandardCharsets.UTF_8, true);\n                } catch (IOException e) {\n                    LOGGER.error(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                    throw new DPSystemException(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                }\n            });\n        return jsonObject;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java#ExternalTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":31,"endLine":51,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        LOGGER.info(\"Hello World. This is DynamicTask\");\n        LOGGER.info(\"Reading properties from config file ['task.conf']\");\n        String fileName = DeploymentProperties.getDeploymentProperties().getValue(\"file.name\");\n        String sampleKeyValue = DeploymentProperties.getDeploymentProperties().getValue(\"sample.key\");\n\n        if (StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(sampleKeyValue)) {\n            LOGGER.info(\"Read fileName from conf file 'file.name' : \" + fileName);\n            LOGGER.info(\"Value of 'sample.key' : \" + sampleKeyValue);\n        } else {\n            throw new RuntimeException(\"Failed to read properties ['file.name', 'sample.key'] from conf file\");\n\n        }\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21af63a1-7ebb-462a-9cd1-7cebe2d9324b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":238,"endLine":256,"content":"e(fetchTaskDetails.getConnectorType()));\n            String ipaasExcludeString = DeploymentProperties.getDeploymentProperties().getValue(IPAAS_EXCLUDE_STRING);\n            if (StringUtils.isNotEmpty(ipaasExcludeString)) {\n                ipaasExcludeString = ipaasExcludeString.concat(\",\");\n            }\n            ipaasExcludeString = ipaasExcludeString.concat(\"\\u0000\");\n            List<String> excludedStringList = Arrays.asList(ipaasExcludeString.split(\",\"));\n            dataExtractionRequest.getProperties().put(\"ceTimeOut\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"ce.call.timeout.in.milli.secs\", 60000));\n            dataExtractionRequest.setExcludedStrings(excludedStringList);\n            LOGGER.info(\"Excluded Strings: {}\", dataExtractionRequest.getExcludedStrings());\n            dataExtractionRequest.setFilterRule(fetchTaskDetails.getWhereClause());\n            dataExtractionRequest.setFields(fieldInfoList);\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(\"default.snowflake.enabled\", true)\n                    || DeploymentProperties.getDeploymentProperties().getValue(\"snowflake.tenant.list\").contains(RequestContextProvider.getTenantId())) {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", true);\n            } else {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", false);\n            }\n            dataExtractionRequest.getProperties().put(\"snowfla","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8bd98057-2637-4b6e-952a-bf737ad365c6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":165,"endLine":190,"content":" offset);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static InputStream getDataFromHubspotLatestApi(HubspotAccessDetails accessDetails, String nextPageUrl, HubspotExtractDetails fetchTaskDetails) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        try {\n            return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), nextPageUrl);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFact","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java#GA4ExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":26,"endLine":28,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.isResolvePicklist","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":199,"endLine":201,"content":"    public boolean isResolvePicklist() {\n        return resolvePicklist;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#loading","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":156,"endLine":166,"content":"     * @return true if class loading should be short-circuited, false otherwise.\n     */\n    @Override\n    public boolean shortCircuitClassLoad() {\n        try {\n            return DeploymentProperties.isPropertiesServiceInitialized();\n        } catch (Throwable throwable) {\n            return false;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":81,"endLine":179,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        try {\n            String jobId = externalTaskRequestContext.getJobId();\n            String tenantId = externalTaskRequestContext.getTenantId();\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            isNotNull(sqlQueryInfo, GENERIC_SYSTEM_ERROR, msg(\"Could not get valid sqlExtractionDetails from task metadata for jobId:{} and tenantId:{}\", jobId, tenantId));\n            LOGGER.info(\"SQL Query info for job:{} of tenant:{} is::{}\", jobId, tenantId, DPUtils.convertObjectToJson(sqlQueryInfo));\n\n            DPWorkflowJobDetailsDTO dpWorkflowJobDetailsDTO = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, dpWorkflowJobDetailsDTO.getExternalId(), externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getTaskName());\n            String configSourceUrl = TaskExecutorWorkflowUtils.getConfigSourceUrl(dpWorkflowJobDetailsDTO);\n            String gsB2BSecret = getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n\n            ConnectorType connectorType;\n            RelationalDBConnectionDetail relationalDBConnectionDetail;\n            if (null != sqlQueryInfo.getConnectionInfo()) {\n                isNotBlank(sqlQueryInfo.getConnectionInfo().getConnectionId(), GENERIC_SYSTEM_ERROR, msg(\"No connectionId provided against jobId:{} and tenant:{}\", jobId, tenantId));\n                MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n                PNPConnectionInput pnpConnectionInfo = mdaCalloutsService.getConnectionDetails(sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                LOGGER.info(\"PNPConnectionInput fetched successfully for connectionId: {} tenantId: {}\", sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                sqlQueryInfo.getConnectionInfo().setConnectorType(ConnectorType.HAPOSTGRES);\n\n                if (pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                    relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail();\n                    connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n                } else {\n                    throw new DPSystemException(msg(\"Provided connectionDetail: {} is not registered with us. Please contact tech support!!\", DPUtils.convertObjectToJson(pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail())));\n                }\n            } else if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                LOGGER.info(\"ConnectionInfo is null. Fetching connection details from sqlExtractionDetails connectionDetails for jobId:{}\", jobId);\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid connectionInfo or connectionDetail\");\n            }\n            CsvFile csvFile;\n            List<String> copyManagerExcludedTenants = Lists.newArrayList();\n            String excludedTenants = DeploymentProperties.getDeploymentProperties().getValue(POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS);\n            if (StringUtils.isNotBlank(excludedTenants)) {\n                copyManagerExcludedTenants.addAll(Arrays.asList(excludedTenants.split(COMMA)));\n            }\n            boolean disableCopyManager = DeploymentProperties.getDeploymentProperties().getBooleanValue(DISABLE_POSTGRES_COPY_MANAGER, false);\n            if (disableCopyManager || copyManagerExcludedTenants.contains(tenantId)) {\n                LOGGER.warn(\"Skipping postgres copyManager execution for job:{} of tenant:{} since either it is restricted for this tenant or copy manager is disabled. Will proceed with legacy code though!!\", jobId, tenantId);\n                csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n            } else {\n                try {\n                    csvFile = executeQueryForPostgresCopyManager(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                } catch (Exception ex) {\n                    LOGGER.warn(msg(\"SQL Extraction for {} failed with copy manager functionality due to: {} \", connectorType, ex.getMessage()));\n                    LOGGER.warn(\"More details about the exception are: \", ex);\n                    if (!Thread.currentThread().isInterrupted()) {\n                        LOGGER.warn(\"Falling back to legacy code since copy manager did not give us what we wanted!!\");\n                        csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                    } else {\n                        LOGGER.info(\"Query execution failed without falling back to legacy code.\");\n                        throw ex;\n                    }\n                }\n            }\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : COMMA.charAt(0);\n\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(configSourceUrl, auditMetadata, true);\n            }\n\n            /*\n                Printing specified number of records for columns having dataType as date/dateTime only to find out format and other\n                discrepancies(if any). Since date/dateTime data is always a glitch in the matrix.\n                Based on config server property.\n             */\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING, false)) {\n                logDateOrDateTimeData(tenantId, jobId, headers, csvFile);\n            }\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(true)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(tenantId, jobId, externalTaskRequestContext.getTaskId(), externalExtractionTaskResult);\n            LOGGER.info(\"Successfully saved externalTask result for jobId:{}, tenantId:{}\", jobId, tenantId);\n        } catch (DPSystemException dpSysEx) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), dpSysEx);\n            throw dpSysEx;\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), ex);\n            throw new DPSystemException(msg(\"Error while performing jdbc extraction: {}\", ex.getMessage()), ex);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"342fb54c-6df2-405e-92e1-6d3cafb7d8db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":141,"endLine":168,"content":"RunReportResponse report = validateGA4Response(response);\n                writeGA4ReportToParaquetFile(report, gaReportGroup, writer);\n                rowCount = report.getRows() != null ? report.getRows().size() : 0;\n                offset = offset + GA_REPORT_PAGE_SIZE;\n            } while (rowCount == GA_REPORT_PAGE_SIZE && !Thread.currentThread().isInterrupted());\n        }\n        writer.close();\n    }\n\n    private GA4ConnectionInfo buildGAConnectionInfo(GAAccessDetails gaAccessDetailsFromJob) {\n        GA4ConnectionInfo connectionInfo = new GA4ConnectionInfo();\n        GAAccessDetails gaAccessDetailsWithCredentials = fetchAccountDetailsFromMDA(gaAccessDetailsFromJob);\n        connectionInfo.setClientId(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientId()));\n        connectionInfo.setClientSecret(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientSecret()));\n        connectionInfo.setRefreshToken(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getRefreshToken()));\n        return connectionInfo;\n    }\n\n    /**\n     * Get account details from MDA for Google Analytics.\n     * Assumption: AccountId and profileId are already set in extractDetails from UDM.\n     *\n     * @param gaAccessDetails {@link GAAccessDetails} from UDM which contains only accountId.\n     * @return {@link GAAccessDetails} encrypted GA credentials from MDA account details API.\n     */\n    private GAAccessDetails fetchAccountDetailsFromMDA(GAAccessDetails gaAccessDetails) {\n\n        GAAcc","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3c9cc217-bd12-489a-bc60-8c5896cbb425","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":111,"endLine":133,"content":"or (File file : inputFiles) {\n                recordsAffected += stagingDao.batchUpsert(ipaasStagingDetails, file, ipaasStagingLoadDetails.getTenantZoneId());\n            }\n\n            LOGGER.info(\"{} records affected for  tId- {}, jobId- {}, taskId- {}\", recordsAffected, tenantId, jobId, taskId);\n            List<FieldInfo> fieldInfos = Lists.newArrayList();\n            FieldInfo fieldInfo;\n            for (IpaasStagingFieldInfo ipaasStagingFieldInfo : ipaasStagingDetails.getFieldInfos()) {\n                fieldInfo = new FieldInfo();\n                fieldInfo.setName(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setFieldAlias(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setDataType(DataType.getDataType(ipaasStagingFieldInfo.getDataType()));\n                fieldInfos.add(fieldInfo);\n            }\n            TaskResult taskResult = new TaskResult(null, recordsAffected, fieldInfos, null);\n            ExternalTaskResult externalTaskResult = new ExternalTaskResult(taskResult, true);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasStagingLoad external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n        ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":20,"endLine":283,"content":"public class IpaasExtractionDetails {\n\n    private static final long serialVersionUID = -11278538782L;\n\n    private String connectionId;\n    private String externalEntityName;\n    private List<FieldInfo> projections;\n    private FilterRule whereClause;\n    private OrderByInfo orderByInfo;\n    private String query;\n    private String connectorType;\n    private String ucId;\n    private String ipaasStagingDetailsId;\n    private String jobId;\n    private String taskId;\n    private ConnectionInfo stagingConnectionInfo;\n    private String lastModifieldFieldPath;\n    private boolean resolvePicklist;\n    private String upsertkey;\n    private Object lastModifieldFieldValue;\n    private boolean honourLastModfiedFieldValueToFetchDeltaData;\n    private int defaultSleepTimeOnFail;\n    private String pageSize;\n    private boolean enableDownloadSourceData;\n    private int maxNumberOfRetries;\n    private boolean ignoreInvalidData;\n    private List<String> ignorableErrorMessages= Lists.newArrayList();\n    private String queryParamForDataFetch;\n    private boolean skipFieldsForFetch;\n\n    private Map<String, Object> additionalInformation;\n    public Map<String, Object> getAdditionalInformation() {\n        return additionalInformation;\n    }\n\n    public void setAdditionalInformation(Map<String, Object> additionalInformation) {\n        this.additionalInformation = additionalInformation;\n    }\n\n    public boolean isSkipFieldsForFetch() {\n        return skipFieldsForFetch;\n    }\n\n    public void setSkipFieldsForFetch(boolean skipFieldsForFetch) {\n        this.skipFieldsForFetch = skipFieldsForFetch;\n    }\n    public String getQueryParamForDataFetch() {\n        return queryParamForDataFetch;\n    }\n\n    public void setQueryParamForDataFetch(String queryParamForDataFetch) {\n        this.queryParamForDataFetch = queryParamForDataFetch;\n    }\n    public int getMaxNumberOfRetries() {\n        return maxNumberOfRetries;\n    }\n\n    public void setMaxNumberOfRetries(int maxNumberOfRetries) {\n        this.maxNumberOfRetries = maxNumberOfRetries;\n    }\n    public String getPageSize() {\n        return pageSize;\n    }\n\n    public void setPageSize(String pageSize) {\n        this.pageSize = pageSize;\n    }\n    public int getDefaultSleepTimeOnFail() {\n        return defaultSleepTimeOnFail;\n    }\n\n    public void setDefaultSleepTimeOnFail(int defaultSleepTimeOnFail) {\n        this.defaultSleepTimeOnFail = defaultSleepTimeOnFail;\n    }\n\n    public boolean isHonourLastModfiedFieldValueToFetchDeltaData() {\n        return honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    public void setHonourLastModfiedFieldValueToFetchDeltaData(boolean honourLastModfiedFieldValueToFetchDeltaData) {\n        this.honourLastModfiedFieldValueToFetchDeltaData = honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    public String getConnectionId() {\n        return connectionId;\n    }\n\n    public void setConnectionId(String connectionId) {\n        this.connectionId = connectionId;\n    }\n\n    public String getExternalEntityName() {\n        return externalEntityName;\n    }\n\n    public void setExternalEntityName(String externalEntityName) {\n        this.externalEntityName = externalEntityName;\n    }\n\n    public List<FieldInfo> getProjections() {\n        return projections;\n    }\n\n    public void setProjections(List<FieldInfo> projections) {\n        this.projections = projections;\n    }\n\n    public FilterRule getWhereClause() {\n        return whereClause;\n    }\n\n    public void setWhereClause(FilterRule whereClause) {\n        this.whereClause = whereClause;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n\n    public void setQuery(String query) {\n        this.query = query;\n    }\n\n    public String getConnectorType() {\n        return connectorType;\n    }\n\n    public void setConnectorType(String connectorType) {\n        this.connectorType = connectorType;\n    }\n\n    public String getUcId() {\n        return ucId;\n    }\n\n    public void setUcId(String ucId) {\n        this.ucId = ucId;\n    }\n\n    public String getJobId() {\n        return jobId;\n    }\n\n    public void setJobId(String jobId) {\n        this.jobId = jobId;\n    }\n\n    public String getTaskId() {\n        return taskId;\n    }\n\n    public void setTaskId(String taskId) {\n        this.taskId = taskId;\n    }\n\n    public String getIpaasStagingDetailsId() {\n        return ipaasStagingDetailsId;\n    }\n\n    public void setIpaasStagingDetailsId(String ipaasStagingDetailsId) {\n        this.ipaasStagingDetailsId = ipaasStagingDetailsId;\n    }\n\n    public ConnectionInfo getStagingConnectionInfo() {\n        return stagingConnectionInfo;\n    }\n\n    public void setStagingConnectionInfo(ConnectionInfo stagingConnectionInfo) {\n        this.stagingConnectionInfo = stagingConnectionInfo;\n    }\n\n    public String getLastModifieldFieldPath() {\n        return lastModifieldFieldPath;\n    }\n\n    public void setLastModifieldFieldPath(String lastModifieldFieldPath) {\n        this.lastModifieldFieldPath = lastModifieldFieldPath;\n    }\n\n    public boolean isResolvePicklist() {\n        return resolvePicklist;\n    }\n\n    public OrderByInfo getOrderByInfo() {\n        return orderByInfo;\n    }\n\n    public void setOrderByInfo(OrderByInfo orderByInfo) {\n        this.orderByInfo = orderByInfo;\n    }\n\n    public void setResolvePicklist(boolean resolvePicklist) {\n        this.resolvePicklist = resolvePicklist;\n    }\n\n    public String getUpsertkey() {\n        return upsertkey;\n    }\n\n    public void setUpsertkey(String upsertkey) {\n        this.upsertkey = upsertkey;\n    }\n    public Object getLastModifieldFieldValue() {\n        return lastModifieldFieldValue;\n    }\n\n    public void setLastModifieldFieldValue(Object lastModifieldFieldValue) {\n        this.lastModifieldFieldValue = lastModifieldFieldValue;\n    }\n\n    public boolean isEnableDownloadSourceData() {\n        return enableDownloadSourceData;\n    }\n\n    public void setEnableDownloadSourceData(boolean enableDownloadSourceData) {\n        this.enableDownloadSourceData = enableDownloadSourceData;\n    }\n\n    public boolean isIgnoreInvalidData() {\n        return ignoreInvalidData;\n    }\n\n    public void setIgnoreInvalidData(boolean ignoreInvalidData) {\n        this.ignoreInvalidData = ignoreInvalidData;\n    }\n\n    @Override\n    public String toString() {\n        return \"IpaasExtractionDetails{\" +\n                \"connectionId='\" + connectionId + '\\'' +\n                \", externalEntityName='\" + externalEntityName + '\\'' +\n                \", projections=\" + projections +\n                \", whereClause=\" + whereClause +\n                \", orderByInfo=\" + orderByInfo +\n                \", query='\" + query + '\\'' +\n                \", connectorType='\" + connectorType + '\\'' +\n                \", ucId='\" + ucId + '\\'' +\n                \", ipaasStagingDetailsId='\" + ipaasStagingDetailsId + '\\'' +\n                \", jobId='\" + jobId + '\\'' +\n                \", taskId='\" + taskId + '\\'' +\n                \", stagingConnectionInfo=\" + stagingConnectionInfo +\n                \", lastModifieldFieldPath='\" + lastModifieldFieldPath + '\\'' +\n                \", resolvePicklist=\" + resolvePicklist +\n                \", upsertkey='\" + upsertkey + '\\'' +\n                \", lastModifieldFieldValue=\" + lastModifieldFieldValue +\n                \", honourLastModfiedFieldValueToFetchDeltaData=\" + honourLastModfiedFieldValueToFetchDeltaData +\n                \", defaultSleepTimeOnFail=\" + defaultSleepTimeOnFail +\n                \", pageSize='\" + pageSize + '\\'' +\n                \", enableDownloadSourceData=\" + enableDownloadSourceData +\n                \", maxNumberOfRetries=\" + maxNumberOfRetries +\n                \", ignoreInvalidData=\" + ignoreInvalidData +\n                \", ignorableErrorMessages=\" + ignorableErrorMessages +\n                \", queryParamForDataFetch=\" + queryParamForDataFetch +\n                '}';\n    }\n\n    public List<String> getIgnorableErrorMessages() {\n        return ignorableErrorMessages;\n    }\n\n    public void setIgnorableErrorMessages(List<String> ignorableErrorMessages) {\n        this.ignorableErrorMessages = ignorableErrorMessages;\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b4fa72f8-f5ad-4908-b35a-2e5c1f1e5dd0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":205,"endLine":228,"content":"er.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"Error in closing csv writer\");\n                    throw new DPSystemException(\"Failed to close csv writer\", e);\n                }\n            }\n        }\n\n    }\n\n    private static DateTimeFormatter getDestinationDateTimeFormatter(String tenantId) {\n        try {\n            String pxOutputDatetimeFormat = getProperties().getProperty(\"px.output.datetime.format\", \"yyyy-MM-dd'T'HH:mm:ss['.'SSS][XXXXX]\");\n            String pxCustomDatetimeFormatterEnabledTenantsString = getProperties().getProperty(\"px.custom.datetime.format.enabled.tenants\", StringUtils.EMPTY);\n            Set<String> pxCustomDatetimeFormatterEnabledTenants = StringUtils.isNotBlank(pxCustomDatetimeFormatterEnabledTenantsString) ?\n                    Sets.newHashSet(pxCustomDatetimeFormatterEnabledTenantsString.split(\"\\\\s*,\\\\s*\")) : Sets.newHashSet();\n\n            if (BooleanUtils.toBoolean(getProperties().getProperty(\"px.output.custom.datetime.format.enabled\", \"false\")) || pxCustomDatetimeFormatterEnabledTenants.contains(tenantId)) {\n                LOGGER.info(\"Using custom PX output datetime format: {} for tenant: {}\", pxOutputDatetimeFormat, tenantId);\n                return DateTimeFormatter.ofPattern(pxOutputDatetimeFormat);\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in getting custom datetime format, using default ISO_OFFSET_DATE_TIME format. Reason: {}.\", ex.getMessage());\n        }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5c687c5a-02c1-48e7-809d-b0f6450d1c89","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":194,"endLine":211,"content":"sCustomizedFilterField())\n                        validateMappingsExistInExternalSystem(condition.getLeftOperand(), objectMetaDataFromConnectors, ipaasFields);\n                }\n            }\n\n            if (!ipaasFields.isEmpty()) {\n                if (!ConnectorType.FRESHDESK.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                    LOGGER.error(\"Exception while executing externalTask due to validation failure as fields are not present in external system tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                            tenantId, jobId, taskId, ipaasFields);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,\n                            String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.Remove the field from connector mappings and re-run the job.\", ipaasFields));   // throw new DPSystemException(IpaasExtractionValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,String.format(\"Column %s does not exist. Possible causes: The column is deleted or the Integration/OAuth user does not have read permissions on the field.\", ipaasFields));\n                }else{\n                    LOGGER.warn(\"Not throwing exception for FRESHDESK connector, fields are missing {}\", ipaasFields);\n                }\n            }\n\n            if (fetchTaskDetails.isResolvePicklist()) {\n                boolean is","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f0d213ed-ad29-40b0-a809-6d7aa3e9f8f7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":24,"endLine":45,"content":"nts.Constants.WorkflowConstants.FEATURE_CONFIG_URL;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.DUMMY_STRING;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.ObfuscationConstants.GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.ObfuscationConstants.GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.TENANT_ID_KEY;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\n\n/**\n * @author sabhishekh\n * Created On: 14/11/24\n * <p>\n * This class is exact replica of DPLogbackTurboFilter and it should be like that only.\n * Any changes done to original file should be maintained here too.\n * This was needed because separate thread pertaining to each individual dynamic jar was not taking original turbo filter file via external dependency.\n * We had to make the turbo filter class available in same repo where each dynamic tasks are being written.\n */\npublic class DPDynamicTaskTurboFilter extends AbstractObfuscationTurboFilter {\n\n    private static final Logger DPDTF = LoggerFactory.getLogger(\"DPDTF\");\n\n    // List of packages disabled for obfuscation(Corresponding to the individual repositories)\n    private static final List<String> packagesDisabledForObfuscation = Lists.ne","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79b21afd-9f82-42dd-9888-b1662d0400ce","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":1,"endLine":22,"content":"package com.gainsight.services.external.ipaas.staging.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.integration.exception.externaltasks.ExternalTaskException;\nimport com.gainsight.integration.exception.externaltasks.ExternalTasksValidationCode;\nimport com.gainsight.integration.staging.beans.DatabaseConnectionRequest;\nimport com.gainsight.integration.staging.beans.IpaasStagingDetails;\nimport com.gainsight.integration.staging.beans.IpaasStagingFieldInfo;\nimport com.gainsight.integration.staging.beans.IpaasStagingLoadDetails;\nimport com.gainsight.integration.staging.services.IpaasStagingDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDaoImpl;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDaoImpl;\nimport com.gainsight.integration.staging.utils.DatabaseConnectionPoolUtility;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#MySqlExtractionTask.executeQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":148,"endLine":233,"content":"    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" limit \" + offset + \", \" + SQL_EXTRACTION_QUERY_LIMIT;\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n            /**\n             * Has to explicitly shutdown AbandonedConnectionCleanupThread to avoid memory leak.\n             * Memory Leak:\n             *      Static block inside @see AbandonedConnectionCleanupThread class is spawning a new thread , which is holding a reference to the current classLoader object.\n             * @see AbandonedConnectionCleanupThread#checkedShutdown() explictly shoutdowns the executorService that created the thread, thereby removing the reference to current classLoader.\n             */\n            AbandonedConnectionCleanupThread.checkedShutdown();\n            Enumeration<Driver> drivers = DriverManager.getDrivers();\n            while (drivers.hasMoreElements()) {\n                Driver driver = drivers.nextElement();\n                if (driver.getClass().equals(com.mysql.cj.jdbc.Driver.class)) {\n                    try {\n                        DriverManager.deregisterDriver(driver);\n                    } catch (SQLException e) {\n                        LOGGER.error(\"Failed to deregister Driver : {}\", driver.getClass().getName());\n                    }\n                    break;\n                }\n            }\n        }\n        return csvFile;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setIgnoreInvalidData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":242,"endLine":244,"content":"    public void setIgnoreInvalidData(boolean ignoreInvalidData) {\n        this.ignoreInvalidData = ignoreInvalidData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getUpsertkey","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":215,"endLine":217,"content":"    public String getUpsertkey() {\n        return upsertkey;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3ae0c720-9bcb-46ad-b4db-1473b025e893","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":1,"endLine":43,"content":"package com.gainsight.services.external.outofmemory.task;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author sthammishetty on 16/03/20\n */\n\n/**\n *  Test class for testing OutOfMemoryIssue.\n *\n *  Register this task with below memory options.\n *  \"memoryOptions\": {\n *       \"max_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       },\n *       \"min_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       }\n *     }\n * */\npublic class OutOfMemoryExternalTask {\n    public static void main(String[] args) {\n        List<Employee> employees = new ArrayList<>();\n        for (int i = 0; i < 100000000; i++) {\n            employees.add(new Employee(\"a\", 1));\n        }\n\n    }\n\n    private static class Employee {\n        private String name;\n        private int age;\n\n        public Employee(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"21b827bb-32fc-4696-b2c9-0f55ff1230cf","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":128,"endLine":145,"content":"erties() {\n        try {\n            /*This is initialization block for the expiry cache which will happen once.\n            and since we already short-circuited if DeploymentProperties is not initialized, we can safely initialize the cache here.\n             */\n            if (Objects.isNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE)) {\n                DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = new ExpiryCache<>(DeploymentProperties.getDeploymentProperties().getLongValue(GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS, 60 * 60 * 1000));\n            }\n            //Checking in cache if property exists\n            if (Objects.nonNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY))) {\n                return DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            }\n            //If not present in cache, fetching from DeploymentProperties and storing in cache\n            String configValue = DeploymentProperties.getDeploymentProperties().getValue(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            Precondition.isNotBlank(configValue, GENERIC_SYSTEM_ERROR, \"[NO_OBF] Obfuscation config is not present in dynamic app's config server\");\n            DHOBFConfigProperties dhobfConfigProperties = DHUtils.convertJsonToObject(configValue, DHOBFConfigProperties.class);\n            DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.put(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY, dhobfConfigProperties);\n            return dhobfConfigProperti","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.convertDateTimeFormat","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":123,"endLine":132,"content":"    private Object convertDateTimeFormat(Object value, DateTimeProperties dateTimeProperties) {\n        if (value instanceof Timestamp) {\n            DateTimeFormatter outputDateTimeFormatter = DateTimeFormatter.ofPattern(dateTimeProperties.getFormat());\n            ZonedDateTime utcDateTime = ((Timestamp) value).toLocalDateTime().atZone(ZoneId.of(\"UTC\"));\n            ZonedDateTime zonedDateTime = utcDateTime.withZoneSameInstant(ZoneId.of(dateTimeProperties.getTimeZoneId()));\n            return zonedDateTime.format(outputDateTimeFormatter);\n        } else {\n            return value;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3f53ea02-5b46-4f1e-9aa7-9eacb4cbdeef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":188,"endLine":209,"content":"GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), nextPageUrl);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static Deque<File> readData(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, HubspotAccessDetails accessDetails, HubspotExtractDetails fetchTaskDetails) {\n        InputStream stream = null;\n        Deque<File> fileStack = new ArrayDeque<>();\n        try {\n            boolean shouldContinue;\n            String hasMoreKeyword = GSHubSpotEntityEnum.getHasMoreKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String offsetKeyword = GSHubSpotEntityEnum.getRetrievOffsetKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskD","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java#PlaceholderTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":20,"endLine":43,"content":"public class PlaceholderTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceholderTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String taskId = externalTaskRequestContext.getTaskId();\n\n        String primaryJobId = externalTaskRequestContext.getPrimaryJobId();\n        DPWorkflowTaskDetails taskDetailsFromDB = DbApiUtil.getTaskDetailsWithPrimaryJobFromDB(primaryJobId, taskId);\n        if (!taskDetailsFromDB.getTaskStatus().equals(SUCCESS.name())) {\n            String message = msg(\"Task with taskId {} in job with primaryJobId {} is not in SUCCESS state, current state of this task is {}, can not continue with this execution.\", taskId, primaryJobId, taskDetailsFromDB.getTaskStatus());\n            LOGGER.error(message);\n            throw new DPSystemException(message);\n        }\n\n        TaskResult taskResult = new TaskResult(ExternalTaskUtil.getS3OutputFilePath(externalTaskRequestContext, S3OutputDirType.INTERNAL), taskDetailsFromDB.getRecordCount(), null, null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult));\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setIgnorableErrorMessages","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":280,"endLine":282,"content":"    public void setIgnorableErrorMessages(List<String> ignorableErrorMessages) {\n        this.ignorableErrorMessages = ignorableErrorMessages;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"aa600a9e-c9c9-4a29-b254-0389e048da17","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":88,"endLine":111,"content":"IPAAS_INSTANCE_TOKEN\";\n    private static final String IPAAS_ORG_TOKEN = \"IPAAS_ORG_TOKEN\";\n    private static final String IPAAS_USER_TOKEN = \"IPAAS_USER_TOKEN\";\n    private static final String IPAAS_EXCLUDE_STRING = \"uc.ipaas.external.task.excluded.string.list\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas extraction started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        LOGGER.info(\"checking : \", DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET));\n        List<File> fileList = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(),\n                    workflowJobDetails.getExter","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"81ade886-fdd5-4f63-b557-c541be0c2e09","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":114,"endLine":143,"content":".getMessage());\n            }\n            dpSystemException.setHttpStatus(e.getStatusCode());\n            throw dpSystemException;\n        } catch (IOException e) {\n            throw new DPSystemException(e.getMessage(), e, IO_ERROR);\n        } finally {\n            logInfo(taskId, \"Cleaning up....bye bye...\");\n        }\n    }\n\n\n    private void writeToParaquetG4(ParquetFile tmpParquetFile, Map<String, CustomerCurrencyDTO> currencyConversionMap) throws IOException {\n\n        CsvParquetWriter writer = new CsvParquetWriter(tmpParquetFile, recordFormatter.getHeaders(), this.systemProperties, currencyConversionMap, true);\n\n        GA4ConnectionInfo connectionInfo = buildGAConnectionInfo(extractDetails.getGaAccessDetails());\n        GA4Service service = GA4Service.initialize(connectionInfo);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            RunReportRequest reportRequest = buildReportRequestGA4(gaReportGroup);\n            long offset = 0;\n            int rowCount;\n            do {\n                reportRequest.setLimit(GA_REPORT_PAGE_SIZE);\n                reportRequest.setOffset(offset);\n                BatchRunReportsResponse response = service.getReportForGA4(extractDetails.getViewId(), Lists.newArrayList(reportRequest));\n                RunReportResponse report = validateGA4Response(response);\n                writeGA4ReportToParaquetFile(report, gaReportGroup, writer);\n                rowCount = report.getRows() != null ? report.getR","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"333c3c45-f1f4-45d5-9636-336d9981d725","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":227,"endLine":261,"content":" assertState(CollectionUtils.isNotEmpty(row.getMetricValues()), GENERIC_SYSTEM_ERROR, \"Unexpected error, found metrics empty while reading GA4 report.\");\n                    writer.writeForGA(recordFormatter.formatRecordGA4(row.getDimensionValues(), row.getMetricValues(), gaReportGroup));\n                }\n            }\n        }\n        if (!recordsPresent) {\n            LOGGER.warn(msg(\"No records returned from GA for group: {}. Skipping writing into parquet file.\", gaReportGroup));\n        }\n    }\n\n    private Metric getMetricV4(FieldInfo fieldInfo) {\n        return new Metric().setExpression(fieldInfo.getName()).setName(fieldInfo.getFieldAlias());\n    }\n\n    private Dimension getDimensionV4(FieldInfo fieldInfo) {\n        return new Dimension().setName(fieldInfo.getName());\n    }\n\n    private void logInfo(String taskId, String message) {\n        LOGGER.info(\"GA Task[{}] - {}\", taskId, message);\n    }\n\n    private class RecordFormatter {\n\n        private LinkedList<FieldInfo> headers = new LinkedList<>();\n        private Map<String, RecordMeta> recordIndexMapping = new HashMap<>();\n\n        private RecordFormatter() {\n            Map<String, Integer> aliasIndexMapping = new HashMap<>();\n            headers.addAll(extractDetails.getStaticFields());\n            int recordIndex = headers.size();\n            int aliasIndex = headers.size();\n            for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n                int fieldInfoIndex = 0;\n              ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#is.convertToJSON","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":265,"endLine":280,"content":"    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"962940dc-3794-4f19-9b7b-81a88a85ddd7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":300,"endLine":318,"content":"ainsight.services.dataprocessing.commons.pojo.fields.FieldInfo();\n                        fieldInfoForCurrencyValue.setDecimalPlaces(16);\n                        fieldInfoForCurrencyValue.setDataType(com.gainsight.services.dataprocessing.commons.pojo.DataType.NUMBER);\n                        fieldInfoForCurrencyValue.setName(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setJsonPath(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldAlias(criteria.getLeftOperand().getFieldAlias() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldType(FieldType.FIELD);\n                        fetchTaskDetails.getProjections().add(fieldInfoForCurrencyValue);\n                    }\n                });\n            }\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjections(), null);\n\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(fileList.stream().map(file -> file.getAbsolutePath()).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(fetchTaskDetails.isEnableDownloadSourceData","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.createCsvHeaderAndUpdateFile","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":181,"endLine":192,"content":"    private void createCsvHeaderAndUpdateFile(CSVPrinter csvPrinter, CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        try {\n            LOGGER.info(\"Started writing headers {} to csv file\", headers);\n            csvPrinter.printRecord(headers);\n            csvFile.setHeaders(headers);\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(e.getMessage(), e);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"00eb1dc1-0806-4330-be97-5cc20a76976a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":283,"endLine":304,"content":"JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonObject();\n                iterator = jsonObject.getAsJsonArray(pluralName);\n            }\n        } catch (JsonParseException e) {\n            LOGGER.error(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n            throw new DPSystemException(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n        }\n        if (iterator != null)\n            iterator.iterator().forEachRemaining((JsonElement jsonElement) -> {\n                try {\n                    FileUtils.writeStringToFile(tempFile, jsonElement.getAsJsonObject().toString() + CARRIAGE_RETURN, StandardCharsets.UTF_8, true);\n                } catch (IOException e) {\n                    LOGGER.error(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                    throw new DPSystemException(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                }\n            });\n        return jsonObject;\n    }\n\n    private static File getLocalFile(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, Deque<File> fileStack) throws IOException {\n        if (fileStack.isEmpty() || fileStack.peek().length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n            fileStack.push(File.createTempFile(DPUtils.getTempFilePath(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), externalTaskRequest","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ebfb749f-afa6-4dbf-9cda-7045e9c2013b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":194,"endLine":215,"content":"nnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionId {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQueryWithPostgresCopyManager(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully with copy manager!!\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(String tenantId, String jobId, String taskId) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.getDestinationDateTimeFormatter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":215,"endLine":231,"content":"    private static DateTimeFormatter getDestinationDateTimeFormatter(String tenantId) {\n        try {\n            String pxOutputDatetimeFormat = getProperties().getProperty(\"px.output.datetime.format\", \"yyyy-MM-dd'T'HH:mm:ss['.'SSS][XXXXX]\");\n            String pxCustomDatetimeFormatterEnabledTenantsString = getProperties().getProperty(\"px.custom.datetime.format.enabled.tenants\", StringUtils.EMPTY);\n            Set<String> pxCustomDatetimeFormatterEnabledTenants = StringUtils.isNotBlank(pxCustomDatetimeFormatterEnabledTenantsString) ?\n                    Sets.newHashSet(pxCustomDatetimeFormatterEnabledTenantsString.split(\"\\\\s*,\\\\s*\")) : Sets.newHashSet();\n\n            if (BooleanUtils.toBoolean(getProperties().getProperty(\"px.output.custom.datetime.format.enabled\", \"false\")) || pxCustomDatetimeFormatterEnabledTenants.contains(tenantId)) {\n                LOGGER.info(\"Using custom PX output datetime format: {} for tenant: {}\", pxOutputDatetimeFormat, tenantId);\n                return DateTimeFormatter.ofPattern(pxOutputDatetimeFormat);\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in getting custom datetime format, using default ISO_OFFSET_DATE_TIME format. Reason: {}.\", ex.getMessage());\n        }\n\n        return ISO_OFFSET_DATE_TIME;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java#IpaasExtractionValidationCode.getUserText","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":30,"endLine":43,"content":"    public String getUserText(Object... args) {\n        String key = getErrorName();\n        MessageProperties messageProperties = MessageProperties.getMessageProperties();\n        if(messageProperties == null){\n            return key;\n        }\n        String message = messageProperties.getValue(key);\n        if (args == null || args.length == 0) {\n            message = DPUtils.msg(message, StringUtils.EMPTY);\n        } else {\n            message = DPUtils.msg(message, args);\n        }\n        return message;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3abe5f7d-3955-446a-bba2-d787bb9b8e7e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":164,"endLine":178,"content":" @return {@link GAAccessDetails} encrypted GA credentials from MDA account details API.\n     */\n    private GAAccessDetails fetchAccountDetailsFromMDA(GAAccessDetails gaAccessDetails) {\n\n        GAAccessDetails gaAccessDetailsWithCredentials = new GAAccessDetails();\n\n        MDACalloutService mdaCalloutService = new MDACalloutService().withMdaBaseUrl(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails)).\n                withAuthToken(CryptUtil.encrypt(getDeploymentProperties().getValue(DH_B2B_SECRET))).withSharedSecretHeaderKey(\"secret\").withTenantId(workflowJobDetails.getTenantId());\n\n        logInfo(jobId, DHUtils.msg(\" Calling MDA Rest Api to fetch accountDetails for mdaConnectionId:{}, GA accountId:{} and tenant:{}\", gaAccessDetails.getConnectionId(), gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Map<String, Object> connectionDetails = mdaCalloutService.getConnectionDetails(UDMAccountType.GOOGLE_ANALYTICS, gaAccessDetails.getConnectionId());\n\n        Precondition.assertState(MapUtils.isNotEmpty(connectionDetails), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty response received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientId\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientId received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n     ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setSkipFieldsForFetch","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":63,"endLine":65,"content":"    public void setSkipFieldsForFetch(boolean skipFieldsForFetch) {\n        this.skipFieldsForFetch = skipFieldsForFetch;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6fbf0103-8dc1-43f1-89cb-cb044924ae77","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":33,"endLine":69,"content":"rinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.*;\nimport java.util.*;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * Sample ExternalTask implementation for mysql extraction  {@link com.gainsight.services.dataprocessing.commons.pojo.DPTaskType#EXTERNALTASK }\n */\npublic class MySqlExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MySqlExtractionTask.class);\n    private static final int SQL_EXTRACTION_QUERY_LIMIT = 10000;\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = ex","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f73348ba-f6f6-4bf6-8eeb-4374af0f8ad6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":1,"endLine":20,"content":"package com.gainsight.services.external.ga4.extraction.task.utils;\n\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.parquet.writer.CsvParquetWriter;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.DateTimeProperties;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAExtractDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAReportGroup;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.gainsight.services.external.ga4.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c62bcd3f-cbac-4bae-9001-c4818835c1a3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":303,"endLine":308,"content":".length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n            fileStack.push(File.createTempFile(DPUtils.getTempFilePath(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString()), JSON_EXTENSION));\n        }\n        return fileStack.peek();\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6000491a-9170-49a1-8d70-39a9f07b2c8a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":223,"endLine":240,"content":".isCustomizedFilterField())\n                                populatePicklistMap(picklistMap, objectMetaDataFromConnectors, condition.getLeftOperand());\n                        }\n                    }\n                }\n            }\n            PaginatedDataExtractionService paginatedDataExtractionService = new PaginatedDataExtractionService();\n            List<com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo> fieldInfoList = Lists.newArrayList();\n            fetchTaskDetails.getProjections().forEach(projection -> fieldInfoList.add(getFieldInfoList(projection)));\n            DataExtractionRequest dataExtractionRequest = new DataExtractionRequest();\n            dataExtractionRequest.setObjectName(fetchTaskDetails.getExternalEntityName());\n            dataExtractionRequest.setInstanceToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_INSTANCE_TOKEN).toString()));\n            dataExtractionRequest.setUserToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_USER_TOKEN).toString()));\n            dataExtractionRequest.setOrgToken(connectionDetailsMap.get(IPAAS_ORG_TOKEN).toString());\n            dataExtractionRequest.setJobId(workflowJobDetails.getJobId());\n            dataExtractionRequest.setConnectorType(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()));\n            String ipaasExcludeString = DeploymentProperties.getDeploymentProperties().getValue(IPAAS_EXCLUDE_STRING);\n            if (StringUtils.isNotEmpty(i","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java#for","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":11,"endLine":23,"content":" *  Test class for testing OutOfMemoryIssue.\n *\n *  Register this task with below memory options.\n *  \"memoryOptions\": {\n *       \"max_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       },\n *       \"min_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       }\n *     }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getLastModifieldFieldValue","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":222,"endLine":224,"content":"    public Object getLastModifieldFieldValue() {\n        return lastModifieldFieldValue;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java#GA4ServiceImpl.getReportForGA4","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":92,"endLine":100,"content":"    public BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException {\n        BatchRunReportsRequest getReportsRequest = new BatchRunReportsRequest()\n                .setRequests(requests);\n\n\n        return analyticsData.properties()\n                .batchRunReports(\"properties/\"+ propertyId, getReportsRequest)\n                .execute();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setWhereClause","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":131,"endLine":133,"content":"    public void setWhereClause(FilterRule whereClause) {\n        this.whereClause = whereClause;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a7f37d2e-9487-4be6-b67a-9fc80d3e6a2c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":136,"endLine":157,"content":" tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n\n            //fetch dp staging details\n            if (fetchTaskDetails.getStagingConnectionInfo() != null) {\n                stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId, fetchTaskDetails, externalTaskRequestContext);\n            }\n\n            //fetch ipaas job & task details\n            LOGGER.info(\"MDA call out to fetch ipaas job and task details started. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            String ipaasJobDetailsUrl = \"/connector/job/datahighway/\" + fetchTaskDetails.getJobId();\n            JsonObject obj = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasJobDetailsUrl, workflowJobDetails.getTenantId(), false);\n\n            Type taskType = new TypeToken<List<TaskInfo>>() {\n            }.getType();\n            List<TaskInfo> taskInfos = new Gson().fromJson(obj.get(DATA).getAsJsonObject().get(\"taskInfo\"), taskType);\n\n            Map<String, String> ntzFields = Maps.newHashMap();\n            if (ConnectorType.SNOWFLAKE.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                List<TaskInfo> extractTaskInfos = taskInfos.stream().filter(taskInfo -> taskInfo.getTaskType().equals(TaskType.IPAAS_EXTRACT)).collect(Collectors.toList());\n                if (CollectionUtils.isNotEmpty(extractTaskInfos)) {","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"16ce40c2-146e-4f35-9617-0b849cabb059","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":147,"endLine":174,"content":"setProperty(\"sslmode\", \"require\");\n                properties.setProperty(\"ssl\", \"true\");\n            }\n            jdbcConnection = DriverManager.getConnection(connectionParamPojoForCopyManager.getJdbcUrl(), properties);\n            CopyManager copyManager = new CopyManager((BaseConnection) jdbcConnection);\n            fileOutputStream = new FileOutputStream(csvFile, true);\n            String refinedQuery = query.trim();\n            String copyManagerQuery = \"COPY (\" + refinedQuery + \") TO STDOUT WITH (FORMAT CSV, HEADER true, QUOTE '\\\"', ESCAPE '\\\"', ENCODING 'UTF8')\";\n            LOGGER.info(\"Started executing query: {} with copyManager\", copyManagerQuery);\n            if (!Thread.currentThread().isInterrupted()) {\n                recordsRetrieved = Math.toIntExact(copyManager.copyOut(copyManagerQuery, fileOutputStream));\n            }\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Error while executing postgres query with copy manager due to : {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with postgres copy manager\", ex);\n        } finally {\n            if (fileOutputStream != null) {\n                fileOutputStream.close();\n            }\n            if (jdbcConnection != null) {\n                jdbcConnection.close();\n            }\n        }\n    }\n\n    private void c","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.getClientSecret","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":37,"endLine":39,"content":"    public String getClientSecret() {\n        return clientSecret;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setExternalEntityName","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":115,"endLine":117,"content":"    public void setExternalEntityName(String externalEntityName) {\n        this.externalEntityName = externalEntityName;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c8753233-8591-46c8-ae9d-3dfe880cffc2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":130,"endLine":152,"content":"               tenantId, jobId, taskId, ex);\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        } finally {\n            if (CollectionUtils.isNotEmpty(inputFiles)) {\n                inputFiles.forEach(FileUtils::deleteQuietly);\n            }\n            LOGGER.error(\"Request to ipaas staging load completed in {} secs for  tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        }\n    }\n\n\n    private static BasicDataSource getIpaasStagingConnectionDataSource(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                       String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                       Ext","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#L1-L283","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":1,"endLine":283,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectionInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.OrderByInfo;\nimport com.google.common.collect.Lists;\n\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 20-APR-2020\n * External Task for extracting records from ipaas\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class IpaasExtractionDetails {\n\n    private static final long serialVersionUID = -11278538782L;\n\n    private String connectionId;\n    private String externalEntityName;\n    private List<FieldInfo> projections;\n    private FilterRule whereClause;\n    private OrderByInfo orderByInfo;\n    private String query;\n    private String connectorType;\n    private String ucId;\n    private String ipaasStagingDetailsId;\n    private String jobId;\n    private String taskId;\n    private ConnectionInfo stagingConnectionInfo;\n    private String lastModifieldFieldPath;\n    private boolean resolvePicklist;\n    private String upsertkey;\n    private Object lastModifieldFieldValue;\n    private boolean honourLastModfiedFieldValueToFetchDeltaData;\n    private int defaultSleepTimeOnFail;\n    private String pageSize;\n    private boolean enableDownloadSourceData;\n    private int maxNumberOfRetries;\n    private boolean ignoreInvalidData;\n    private List<String> ignorableErrorMessages= Lists.newArrayList();\n    private String queryParamForDataFetch;\n    private boolean skipFieldsForFetch;\n\n    private Map<String, Object> additionalInformation;\n    public Map<String, Object> getAdditionalInformation() {\n        return additionalInformation;\n    }\n\n    public void setAdditionalInformation(Map<String, Object> additionalInformation) {\n        this.additionalInformation = additionalInformation;\n    }\n\n    public boolean isSkipFieldsForFetch() {\n        return skipFieldsForFetch;\n    }\n\n    public void setSkipFieldsForFetch(boolean skipFieldsForFetch) {\n        this.skipFieldsForFetch = skipFieldsForFetch;\n    }\n    public String getQueryParamForDataFetch() {\n        return queryParamForDataFetch;\n    }\n\n    public void setQueryParamForDataFetch(String queryParamForDataFetch) {\n        this.queryParamForDataFetch = queryParamForDataFetch;\n    }\n    public int getMaxNumberOfRetries() {\n        return maxNumberOfRetries;\n    }\n\n    public void setMaxNumberOfRetries(int maxNumberOfRetries) {\n        this.maxNumberOfRetries = maxNumberOfRetries;\n    }\n    public String getPageSize() {\n        return pageSize;\n    }\n\n    public void setPageSize(String pageSize) {\n        this.pageSize = pageSize;\n    }\n    public int getDefaultSleepTimeOnFail() {\n        return defaultSleepTimeOnFail;\n    }\n\n    public void setDefaultSleepTimeOnFail(int defaultSleepTimeOnFail) {\n        this.defaultSleepTimeOnFail = defaultSleepTimeOnFail;\n    }\n\n    public boolean isHonourLastModfiedFieldValueToFetchDeltaData() {\n        return honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    public void setHonourLastModfiedFieldValueToFetchDeltaData(boolean honourLastModfiedFieldValueToFetchDeltaData) {\n        this.honourLastModfiedFieldValueToFetchDeltaData = honourLastModfiedFieldValueToFetchDeltaData;\n    }\n\n    public String getConnectionId() {\n        return connectionId;\n    }\n\n    public void setConnectionId(String connectionId) {\n        this.connectionId = connectionId;\n    }\n\n    public String getExternalEntityName() {\n        return externalEntityName;\n    }\n\n    public void setExternalEntityName(String externalEntityName) {\n        this.externalEntityName = externalEntityName;\n    }\n\n    public List<FieldInfo> getProjections() {\n        return projections;\n    }\n\n    public void setProjections(List<FieldInfo> projections) {\n        this.projections = projections;\n    }\n\n    public FilterRule getWhereClause() {\n        return whereClause;\n    }\n\n    public void setWhereClause(FilterRule whereClause) {\n        this.whereClause = whereClause;\n    }\n\n    public String getQuery() {\n        return query;\n    }\n\n    public void setQuery(String query) {\n        this.query = query;\n    }\n\n    public String getConnectorType() {\n        return connectorType;\n    }\n\n    public void setConnectorType(String connectorType) {\n        this.connectorType = connectorType;\n    }\n\n    public String getUcId() {\n        return ucId;\n    }\n\n    public void setUcId(String ucId) {\n        this.ucId = ucId;\n    }\n\n    public String getJobId() {\n        return jobId;\n    }\n\n    public void setJobId(String jobId) {\n        this.jobId = jobId;\n    }\n\n    public String getTaskId() {\n        return taskId;\n    }\n\n    public void setTaskId(String taskId) {\n        this.taskId = taskId;\n    }\n\n    public String getIpaasStagingDetailsId() {\n        return ipaasStagingDetailsId;\n    }\n\n    public void setIpaasStagingDetailsId(String ipaasStagingDetailsId) {\n        this.ipaasStagingDetailsId = ipaasStagingDetailsId;\n    }\n\n    public ConnectionInfo getStagingConnectionInfo() {\n        return stagingConnectionInfo;\n    }\n\n    public void setStagingConnectionInfo(ConnectionInfo stagingConnectionInfo) {\n        this.stagingConnectionInfo = stagingConnectionInfo;\n    }\n\n    public String getLastModifieldFieldPath() {\n        return lastModifieldFieldPath;\n    }\n\n    public void setLastModifieldFieldPath(String lastModifieldFieldPath) {\n        this.lastModifieldFieldPath = lastModifieldFieldPath;\n    }\n\n    public boolean isResolvePicklist() {\n        return resolvePicklist;\n    }\n\n    public OrderByInfo getOrderByInfo() {\n        return orderByInfo;\n    }\n\n    public void setOrderByInfo(OrderByInfo orderByInfo) {\n        this.orderByInfo = orderByInfo;\n    }\n\n    public void setResolvePicklist(boolean resolvePicklist) {\n        this.resolvePicklist = resolvePicklist;\n    }\n\n    public String getUpsertkey() {\n        return upsertkey;\n    }\n\n    public void setUpsertkey(String upsertkey) {\n        this.upsertkey = upsertkey;\n    }\n    public Object getLastModifieldFieldValue() {\n        return lastModifieldFieldValue;\n    }\n\n    public void setLastModifieldFieldValue(Object lastModifieldFieldValue) {\n        this.lastModifieldFieldValue = lastModifieldFieldValue;\n    }\n\n    public boolean isEnableDownloadSourceData() {\n        return enableDownloadSourceData;\n    }\n\n    public void setEnableDownloadSourceData(boolean enableDownloadSourceData) {\n        this.enableDownloadSourceData = enableDownloadSourceData;\n    }\n\n    public boolean isIgnoreInvalidData() {\n        return ignoreInvalidData;\n    }\n\n    public void setIgnoreInvalidData(boolean ignoreInvalidData) {\n        this.ignoreInvalidData = ignoreInvalidData;\n    }\n\n    @Override\n    public String toString() {\n        return \"IpaasExtractionDetails{\" +\n                \"connectionId='\" + connectionId + '\\'' +\n                \", externalEntityName='\" + externalEntityName + '\\'' +\n                \", projections=\" + projections +\n                \", whereClause=\" + whereClause +\n                \", orderByInfo=\" + orderByInfo +\n                \", query='\" + query + '\\'' +\n                \", connectorType='\" + connectorType + '\\'' +\n                \", ucId='\" + ucId + '\\'' +\n                \", ipaasStagingDetailsId='\" + ipaasStagingDetailsId + '\\'' +\n                \", jobId='\" + jobId + '\\'' +\n                \", taskId='\" + taskId + '\\'' +\n                \", stagingConnectionInfo=\" + stagingConnectionInfo +\n                \", lastModifieldFieldPath='\" + lastModifieldFieldPath + '\\'' +\n                \", resolvePicklist=\" + resolvePicklist +\n                \", upsertkey='\" + upsertkey + '\\'' +\n                \", lastModifieldFieldValue=\" + lastModifieldFieldValue +\n                \", honourLastModfiedFieldValueToFetchDeltaData=\" + honourLastModfiedFieldValueToFetchDeltaData +\n                \", defaultSleepTimeOnFail=\" + defaultSleepTimeOnFail +\n                \", pageSize='\" + pageSize + '\\'' +\n                \", enableDownloadSourceData=\" + enableDownloadSourceData +\n                \", maxNumberOfRetries=\" + maxNumberOfRetries +\n                \", ignoreInvalidData=\" + ignoreInvalidData +\n                \", ignorableErrorMessages=\" + ignorableErrorMessages +\n                \", queryParamForDataFetch=\" + queryParamForDataFetch +\n                '}';\n    }\n\n    public List<String> getIgnorableErrorMessages() {\n        return ignorableErrorMessages;\n    }\n\n    public void setIgnorableErrorMessages(List<String> ignorableErrorMessages) {\n        this.ignorableErrorMessages = ignorableErrorMessages;\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.getCsvFileForSQLExtract","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":211,"endLine":221,"content":"    private static CsvFile getCsvFileForSQLExtract(String tenantId, String jobId, String taskId) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f3be85ff-afd7-44d8-a58e-eadb998121db","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":381,"endLine":402,"content":"ion = new PicklistOption();\n                        picklistOption.setPicklistLabel(option.getAsJsonObject().get(\"label\").getAsString());\n                        picklistOption.setPicklistValue(option.getAsJsonObject().get(\"value\").getAsString());\n                        picklistList.add(picklistOption);\n                    });\n                }\n            }\n            picklistMap.put(field.getPath(), picklistList);\n        }\n        LOGGER.info(\"Populated picklist map with {}\", picklistMap);\n    }\n\n    private static void stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                 String taskId, IpaasExtractionDetails fetchTaskDetails,\n                                                 ExternalTaskRequestContext externalTaskRequestContext) throws Exception {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n   ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8ec56a45-4847-40f1-8bbd-482b1df9c70b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":87,"endLine":104,"content":"ils.getWhereClause(), ExternalTaskUtil.getExternalTaskRequestContext().getWorkflowSystemProperties(), getDeploymentProperties().getValue(DEFAULT_DATE_FORMAT_KEY));\n            TenantDetailsDTO tenantDetailsDTO = externalTaskRequestContext.getTenantDetailsDTO();\n            parquetFile = new ParquetFile(getTempFilePath(tenantId, jobId, externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".parquet\"));\n            errorFile = getErrorFile(taskId + \"_error.csv\");\n            List<String> showFieldsList = getFieldNames(pxExtractionDetails.getShowFields());\n            errorWriter = getErrorWriter(showFieldsList, errorFile);\n            parquetWriter = getParquetWriter(showFieldsList, pxExtractionDetails.getShowFields(), parquetFile);\n\n            String pageSize = String.valueOf(accessDetails.getPageSize() != 0 ? accessDetails.getPageSize() : StringUtils.defaultIfBlank(getProperties().getProperty(\"px.page.size\"), DEFAULT_PAGE_SIZE));\n            PXExtractInfo pxExtractInfo = new PXExtractInfo();\n            pxExtractInfo.setAccessDetails(accessDetails);\n            pxExtractInfo.setPxExtractionDetails(pxExtractionDetails);\n\n            boolean isFinalResult = false;\n            String nextPageToken = null;\n            LOGGER.info(\"Fetching events using POST call to endpoint: {} with body {} \", pxURL, DHUtils.convertObjectToJson(pxExtractionDetails));\n            DateTimeFormatter destDateTimeFormatter = getDestinationDateTimeFormatter(tenantId);\n            whil","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getProjections","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":119,"endLine":121,"content":"    public List<FieldInfo> getProjections() {\n        return projections;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.validateMappingsExistInExternalSystem","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":346,"endLine":363,"content":"    private static void validateMappingsExistInExternalSystem(FieldInfo field, JsonObject objectMetaDataFromConnectors, Set<String> ipaasFields) {\n        JsonObject data;\n        data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n        JsonArray fields = data.get(\"fields\").getAsJsonArray();\n        Iterator<JsonElement> iterator = fields.iterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            JsonObject fieldInfo = iterator.next().getAsJsonObject();\n            JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n            if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            ipaasFields.add(field.getLabel());\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4fdce5ce-b0b5-48a7-b942-b0962fc3bf00","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":123,"endLine":141,"content":"onHelper.getDerivedDataType(fieldInfo);\n                            String attributeName = StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName());\n                            Object obj = row.get(attributeName);\n                            if (obj != null) {\n                                if (obj instanceof String) {\n                                    convertedValue = (String) row.get(attributeName);\n                                } else {\n                                    if (obj instanceof Double && isTimeStampField(dataType)) {\n                                        convertedValue = String.valueOf(((Double) obj).longValue());\n                                    } else {\n                                        convertedValue = String.valueOf(obj);\n                                    }\n                                }\n                                if (StringUtils.isNotBlank(convertedValue)) {\n                                    if (isTimeStampField(dataType)) {\n                                        convertedValue = DateTimeUtils.convertEpochToDateTime(convertedValue, EpochUnit.MILLIS, destDateTimeFormatter, ZoneId.of(tenantDetailsDTO.getTimeZoneId()));\n                                    } else if (DataType.NUMBER.equals(dataType)) {\n                                        Locale locale = fieldInfo.getFieldLocale() == null ? Locale.US : fieldInfo.getFieldLocale().getLocale();\n                                        NumberFormat nf = NumberForma","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#MySqlExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":62,"endLine":64,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b722302c-893d-4402-bb79-dd1669164af6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":196,"endLine":215,"content":"StagingLoadDetails.getJobId(), ipaasStagingLoadDetails);\n            ipaasStagingDetailsDao.insert(ipaasStagingDetails);\n            LOGGER.info(\"Inserting staging details metadata  for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.create(ipaasStagingDetails);\n            LOGGER.info(\"Created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        }\n\n        //checking and updating field Infos & columns\n        if (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, ipaasStagingLoadDetails)\n                || isUpsertKeyChanged(ipaasStagingDetails, ipaasStagingLoadDetails.getUpsertkey())) {\n\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = updateFieldInfosInStagingDetails(ipaasStagingLoadDetails);\n            ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n            ipaasStagingDetailsDao.updateIpaasStagingFieldInfosByID(ipaasStagingDetails);\n            LOGGER.info(\"updating fieldinfo metadata in staging details for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.dropAndCreate(ipaasStagingDetails);\n            LOGGER.info(\"re created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n    ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"851889aa-420b-4d05-8d9e-3ebcc9b5be3a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":104,"endLine":120,"content":"onsInfo().getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                    relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail();\n                    connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n                } else {\n                    throw new DPSystemException(msg(\"Provided connectionDetail: {} is not registered with us. Please contact tech support!!\", DPUtils.convertObjectToJson(pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail())));\n                }\n            } else if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                LOGGER.info(\"ConnectionInfo is null. Fetching connection details from sqlExtractionDetails connectionDetails for jobId:{}\", jobId);\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid connectionInfo or connectionDetail\");\n            }\n            CsvFile csvFile;\n            List<String> copyManagerExcludedTenants = Lists.newArrayList();\n            String excludedTenants = DeploymentProperties.getDeploymentProperties().getValue(POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS);\n            if (StringUtils.isNotBlank(excludedTenants)","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.getParquetWriter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":253,"endLine":265,"content":"    private static ParquetWriter<List<String>> getParquetWriter(List<String> headers, List<FieldInfo> showFields, ParquetFile parquetFile) {\n        parquetFile.setHeaders(headers);\n        try {\n            return new TextRecordParquetWriterBuilder(new Path(parquetFile.toURI()), showFields)\n                    .withRowGroupSize(10 * 1000 * 1000)\n                    .withWriteMode(ParquetFileWriter.Mode.OVERWRITE)\n                    .withCompressionCodec(CompressionCodecName.SNAPPY).build();\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in creating parquet file - probably error during writing schema.\");\n            throw new DPSystemException(\"Failed to create parquet file\", ex);\n        }\n\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"94c290d2-7599-4294-9054-17fb366483ee","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":220,"endLine":237,"content":"(HUBSPOT_API_VERSION).toString();\n            }\n            do {\n                LOGGER.info(\"Paginated api running for offset : {}, pagination api counter: {}, nextpageurl :{} , apiVersion : {} \", offset, counter++, nextPageUrl, apiVersion);\n                if (apiVersion.equalsIgnoreCase(HUBSPOT_API_VERSION_LEGACY)) {\n                    stream = getDataFromHubspot(accessDetails, offset, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    offset = readDataAndStoreInFile(stream, hasMoreKeyword, offsetKeyword, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                } else {// New api Version V3\n                    stream = getDataFromHubspotLatestApi(accessDetails, nextPageUrl, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    nextPageUrl = readDataAndStoreInFileLatestApi(stream, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                }\n                shouldContinue = offset != Long.MIN_VALUE || (StringUtils.isNotEmpty(nextPageUrl));\n            } while (shouldContinue && !Thread.currentThread().isInterrupted());\n        } catch (IOExcep","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cade24b7-8b8c-4be6-a2bd-207b4b6bb65f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":235,"endLine":263,"content":"           shouldContinue = offset != Long.MIN_VALUE || (StringUtils.isNotEmpty(nextPageUrl));\n            } while (shouldContinue && !Thread.currentThread().isInterrupted());\n        } catch (IOException ioEx) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", ioEx);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", e);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n        return fileStack;\n    }\n\n    private static long readDataAndStoreInFile(InputStream inputStream, String hasMoreKeyword, String offsetKeyword, String pluralName, File tempFile, String entityName) throws IOException {\n        long offset = Long.MIN_VALUE;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, pluralName, tempFile, entityName, jsonObject);\n        offset = shouldContinue(hasMoreKeyword, offsetKeyword, offset, jsonObject);\n        return offset;\n    }\n\n    private static String readDataAndStoreInFileLatestApi(InputStream inputStream, String pluralName, File tempFile, String entityName) throws IOException {\n        String url = null;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, \"results\", tempFile, entityName, jsonObject);\n        url = isAfter(url, jsonObject);\n        return url;\n    }\n\n    private static long shouldContinue(String hasMoreKeyword, String offsetKeyword, long offset, J","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.executeQueryForPostgresOrRedshift","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":227,"endLine":256,"content":"    private static CsvFile executeQueryForPostgresOrRedshift(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(sqlQueryInfo.getConnectionInfo().getConnectorType()))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            LOGGER.info(\"Redshift/Postgres Extract Query: {}\", postgresExtractQuery);\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionid {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query after modification: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQuery(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fdca0042-80a0-4a93-9fa7-d9587c2e57c4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":1,"endLine":31,"content":"package com.gainsight.service.external.placeholder.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowTaskDetails;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.S3OutputDirType;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.DbApiUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static com.gainsight.services.dataprocessing.commons.pojo.workflow.WorkflowJobStatus.SUCCESS;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sthammishetty on 26/03/20\n */\npublic class PlaceholderTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceholderTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String taskId = externalTaskRequestContext.getTaskId();\n\n        String primaryJobId = exte","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getOrderByInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":203,"endLine":205,"content":"    public OrderByInfo getOrderByInfo() {\n        return orderByInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java#Employee","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":34,"endLine":43,"content":"    private static class Employee {\n        private String name;\n        private int age;\n\n        public Employee(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.isEnableDownloadSourceData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":230,"endLine":232,"content":"    public boolean isEnableDownloadSourceData() {\n        return enableDownloadSourceData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.getErrorFile","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":233,"endLine":237,"content":"    private static DPFile getErrorFile(String errorFilePath) {\n        DPFile errorFile = new DPFile(new File(errorFilePath).getAbsolutePath()) {\n        };\n        return errorFile;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#RecordMeta","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":317,"endLine":342,"content":"    private static class RecordMeta {\n        private FieldInfo fieldInfo;\n        private int recordPosition = -1;\n        private DateTimeFormatter dateTimeFormatter;\n\n        public RecordMeta(FieldInfo fieldInfo, int recordPosition) {\n            this.fieldInfo = fieldInfo;\n            this.recordPosition = recordPosition;\n            init();\n        }\n\n        private void init() {\n            DateTimeProperties dateTimeProperties = fieldInfo.getDateTimeProperties();\n            String format;\n            if (dateTimeProperties != null && (format = dateTimeProperties.getFormat()) != null) {\n                this.dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            }\n        }\n\n\n        public int getRecordPosition() {\n            return recordPosition;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.getClientId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":29,"endLine":31,"content":"    public String getClientId() {\n        return clientId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e390ad37-2eb0-48b6-8fc2-664430d44392","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":96,"endLine":119,"content":"DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".parquet\"));\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(extractDetails.getStaticFields())) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), auditMetadata, true);\n            }\n            writeToParaquetG4(tmpParquetFile, currencyConversionMap);\n            logInfo(taskId, DHUtils.msg(\"Parquet file creation successful. Records written = {}.\", tmpParquetFile.getNumRecords()));\n            Map<String, Object> result = Maps.newHashMap();\n            result.put(\"parquetFile\", tmpParquetFile);\n            result.put(\"headers\", recordFormatter.getHeaders());\n            return result;\n        } catch (GoogleJsonResponseException e) {\n            GoogleJsonError details = e.getDetails();\n            DPSystemException dpSystemException = new DPSystemException(e);\n            if (details != null) {\n                String message = \"Message=\" + details.getMessage() + \"Status=\" + details.get(\"status\");\n                dpSystemException.setMessage(message);\n            } else {\n                dpSystemException.setMessage(e.getMessage());\n            }\n            dpSystemException.setHttpStatus(e.getStatusCode());\n            throw dpSystemException;\n        } catch (IOException e) {\n            throw new DPSystemExcep","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34d60838-6043-49c3-a590-efb8078c091b","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":132,"endLine":154,"content":"().parse(CryptUtil.decrypt(jsonObject.get(DATA).getAsJsonObject().get(VALUE).getAsString())).getAsJsonObject();\n        HubspotAccessDetails accessDetails = null;\n        if (!decryptedObject.isJsonNull()) {\n            accessDetails = new HubspotAccessDetails();\n            accessDetails.setClientId(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_ID).getAsString());\n            accessDetails.setClientSecret(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_SECRET).getAsString());\n            accessDetails.setRefreshToken(decryptedObject.get(PROPERTIES).getAsJsonObject().get(REFRESH_TOKEN).getAsString());\n        }\n        return accessDetails;\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails) {\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        return getDataFromHubspot(accessDetails, offset, fetchTaskDetails, projectionList);\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails, List<String> projectionList) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        try {\n            return fetchService.getPaginated","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#MySqlExtractionTask.saveExtractionTaskResult","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":124,"endLine":126,"content":"    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.readDataAndStoreInFileLatestApi","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":255,"endLine":261,"content":"    private static String readDataAndStoreInFileLatestApi(InputStream inputStream, String pluralName, File tempFile, String entityName) throws IOException {\n        String url = null;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, \"results\", tempFile, entityName, jsonObject);\n        url = isAfter(url, jsonObject);\n        return url;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#L1-L302","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":1,"endLine":302,"content":"package com.gainsight.services.external.mysql.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport com.mysql.cj.jdbc.AbandonedConnectionCleanupThread;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.*;\nimport java.util.*;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * Sample ExternalTask implementation for mysql extraction  {@link com.gainsight.services.dataprocessing.commons.pojo.DPTaskType#EXTERNALTASK }\n */\npublic class MySqlExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MySqlExtractionTask.class);\n    private static final int SQL_EXTRACTION_QUERY_LIMIT = 10000;\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MySql ConnectionInfo \");\n            }\n\n            if (connectorType == null || !UDMAccountType.MYSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MySql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n\n    private static CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestContext) {\n        CsvFile csvFile = null;\n        try {\n            QueryBuilderResponse mysqlExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.MYSQL))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .withNullLastInOrderByClause(false).build();\n            String mySqlExtractQuery = mysqlExtract.getQuery();\n            LOGGER.info(\"MySql Extract Query: {}\", mySqlExtractQuery);\n            String connectionUrl = \"jdbc:mysql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnabled());\n            csvFile = executeQuery(connectionParamPojo, mySqlExtractQuery, sqlQueryInfo, externalTaskRequestContext);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n        return csvFile;\n    }\n\n    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" limit \" + offset + \", \" + SQL_EXTRACTION_QUERY_LIMIT;\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n            /**\n             * Has to explicitly shutdown AbandonedConnectionCleanupThread to avoid memory leak.\n             * Memory Leak:\n             *      Static block inside @see AbandonedConnectionCleanupThread class is spawning a new thread , which is holding a reference to the current classLoader object.\n             * @see AbandonedConnectionCleanupThread#checkedShutdown() explictly shoutdowns the executorService that created the thread, thereby removing the reference to current classLoader.\n             */\n            AbandonedConnectionCleanupThread.checkedShutdown();\n            Enumeration<Driver> drivers = DriverManager.getDrivers();\n            while (drivers.hasMoreElements()) {\n                Driver driver = drivers.nextElement();\n                if (driver.getClass().equals(com.mysql.cj.jdbc.Driver.class)) {\n                    try {\n                        DriverManager.deregisterDriver(driver);\n                    } catch (SQLException e) {\n                        LOGGER.error(\"Failed to deregister Driver : {}\", driver.getClass().getName());\n                    }\n                    break;\n                }\n            }\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setPageSize","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":84,"endLine":86,"content":"    public void setPageSize(String pageSize) {\n        this.pageSize = pageSize;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"007d097e-8d83-44e4-8d55-a43a29037d22","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":104,"endLine":134,"content":"\"Retrieved {} records so far.\", recordsRetrieved);\n                if (data.length() != limit) {\n                    done = true;\n                }\n            } while (!done && !Thread.currentThread().isInterrupted());\n            csvPrinter.flush();\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Unable to process SQL extract with legacy code due to: {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with legacy code for postgres/redshift/snowflake\", ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (dataBaseClient != null) {\n                dataBaseClient.closeConnection();\n            }\n        }\n    }\n\n    private Object convertDateTimeFormat(Object value, DateTimeProperties dateTimeProperties) {\n        if (value instanceof Timestamp) {\n            DateTimeFormatter outputDateTimeFormatter = DateTimeFormatter.ofPattern(dateTimeProperties.getFormat());\n            ZonedDateTime utcDateTime = ((Timestamp) value).toLocalDateTime().atZone(ZoneId.of(\"UTC\"));\n            ZonedDateTime zonedDateTime = utcDateTime.withZoneSameInstant(ZoneId.of(dateTimeProperties.getTimeZoneId()));\n            return zonedDateTime.format(outputDateTimeFormatter);\n        } else {\n            return value;\n        }\n    }\n\n    public void executeQueryWithPostgresC","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"673e835c-eb66-4f1f-88bf-807b8b798ac4","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":72,"endLine":95,"content":"isabledPackagesForObfuscation(getDHOBFConfigProperties());\n        packages.addAll(packagesDisabledForObfuscation);\n        return packages;\n    }\n\n    /**\n     * Retrieves the obfuscation patterns for the tenant.\n     *\n     * @return List of regex patterns for tenant obfuscation.\n     * <p>\n     * DHFeatureUtil is utility method which needs to be called by the respective repository to get the obfuscation patterns.\n     */\n    @Override\n    public List<Pattern> getTenantObfuscationPattern() {\n        try {\n            if (StringUtils.isBlank(MDC.get(TENANT_ID_KEY)) || MDC.get(TENANT_ID_KEY).equalsIgnoreCase(DUMMY_STRING)) {\n                return Collections.emptyList();\n            } else {\n                DHOBFConfigProperties dhobfConfigProperties = getDHOBFConfigProperties();\n                DHFeatureUtils dhFeatureUtils = DHFeatureUtils.getInstance(DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_URL),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_EVALUATE_PATH, \"/v1/features/evaluate/\"),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_ENVIRONMENT), DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET),\n                        dhobfConfigProperties.getGsLogObfuscationFeatureVariationCacheExpiry(), dhobfConfigProperties.getGsLogObfuscationPatternCacheExpiry());\n                return dhFeatureUtils.getTenantLogObfuscationPatter","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.getLocalFile","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":302,"endLine":307,"content":"    private static File getLocalFile(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, Deque<File> fileStack) throws IOException {\n        if (fileStack.isEmpty() || fileStack.peek().length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n            fileStack.push(File.createTempFile(DPUtils.getTempFilePath(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString()), JSON_EXTENSION));\n        }\n        return fileStack.peek();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3efc40b3-c441-449f-aa47-aa6213921854","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":91,"endLine":105,"content":"a.newInstance(tenantId, jobId, dpWorkflowJobDetailsDTO.getExternalId(), externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getTaskName());\n            String configSourceUrl = TaskExecutorWorkflowUtils.getConfigSourceUrl(dpWorkflowJobDetailsDTO);\n            String gsB2BSecret = getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n\n            ConnectorType connectorType;\n            RelationalDBConnectionDetail relationalDBConnectionDetail;\n            if (null != sqlQueryInfo.getConnectionInfo()) {\n                isNotBlank(sqlQueryInfo.getConnectionInfo().getConnectionId(), GENERIC_SYSTEM_ERROR, msg(\"No connectionId provided against jobId:{} and tenant:{}\", jobId, tenantId));\n                MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n                PNPConnectionInput pnpConnectionInfo = mdaCalloutsService.getConnectionDetails(sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                LOGGER.info(\"PNPConnectionInput fetched successfully for connectionId: {} tenantId: {}\", sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                sqlQueryInfo.getConnectionInfo().setConnectorType(ConnectorType.HAPOSTGRES);\n\n                if (pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                    relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInfo.getPnpConnectionsInfo().g","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getConnectorType","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":143,"endLine":145,"content":"    public String getConnectorType() {\n        return connectorType;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"c0825d18-afd7-440d-9c92-6df09c99b333","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":149,"endLine":173,"content":"onversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(configSourceUrl, auditMetadata, true);\n            }\n\n            /*\n                Printing specified number of records for columns having dataType as date/dateTime only to find out format and other\n                discrepancies(if any). Since date/dateTime data is always a glitch in the matrix.\n                Based on config server property.\n             */\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING, false)) {\n                logDateOrDateTimeData(tenantId, jobId, headers, csvFile);\n            }\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(true)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(tenantId, jobId, externalTaskRequestContext.getTaskId(), externalExtractionTaskResult);\n            LOGGER.info(\"Successfully saved externalTask result for jobId:{}, tenantId:{}\", jobId, tenantId);\n        } catch (DPSystemException dpSysEx) {\n            LOGGER.error(\"Error while performing jdbc ext","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getAdditionalInformation","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":51,"endLine":53,"content":"    public Map<String, Object> getAdditionalInformation() {\n        return additionalInformation;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8c546f3d-6406-4602-98db-c4bd0cab2f52","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":1,"endLine":19,"content":"package com.gainsight.services.external.hubspot.extraction.task;\n\nimport com.gainsight.integration.connector.hubspot.bean.GSHubSpotEntityEnum;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotChannelFactory;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchService;\nimport com.gainsight.integration.connector.hubspot.service.GainsightHubspotFetchServiceImpl;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.JsonFileContentType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.hubspotextract.HubspotAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.hubspotextract.HubspotExtractDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowTaskDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#L1-L516","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":1,"endLine":516,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\n\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.Conditions;\nimport com.gainsight.integration.bean.db.common.FieldInfo;\nimport com.gainsight.integration.bean.db.common.TaskInfo;\nimport com.gainsight.integration.bean.enums.TaskType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connection.db.bean.PicklistOption;\nimport com.gainsight.integration.dataExtract.PaginatedDataExtractionService;\nimport com.gainsight.integration.dataExtract.bean.DataExtractionRequest;\nimport com.gainsight.integration.exception.externaltasks.ExternalTaskException;\nimport com.gainsight.integration.exception.externaltasks.ExternalTasksValidationCode;\nimport com.gainsight.integration.staging.beans.DatabaseConnectionRequest;\nimport com.gainsight.integration.staging.beans.IpaasStagingDetails;\nimport com.gainsight.integration.staging.beans.IpaasStagingFieldInfo;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDaoImpl;\nimport com.gainsight.integration.staging.utils.DatabaseConnectionPoolUtility;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.JsonFileContentType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldType;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.gson.*;\nimport com.google.gson.reflect.TypeToken;\nimport net.snowflake.client.jdbc.internal.apache.commons.io.FileUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.lang.reflect.Type;\nimport java.net.URLEncoder;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.bean.IPaasConstants.IS_CURRENCY_FIELD;\nimport static com.gainsight.integration.bean.IPaasConstants.PAGE_SIZE;\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.MDA_GAINSIGHT_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 05-APR-2020\n * External Task for extracting records from ipaas\n */\n\npublic class IpaasExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasExtractionTask.class);\n    public static final String IPAAS_EXTRACT_DETAILS_KEY = \"ipaasExtractDetails\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String IPAAS_INSTANCE_TOKEN = \"IPAAS_INSTANCE_TOKEN\";\n    private static final String IPAAS_ORG_TOKEN = \"IPAAS_ORG_TOKEN\";\n    private static final String IPAAS_USER_TOKEN = \"IPAAS_USER_TOKEN\";\n    private static final String IPAAS_EXCLUDE_STRING = \"uc.ipaas.external.task.excluded.string.list\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas extraction started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        LOGGER.info(\"checking : \", DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET));\n        List<File> fileList = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(),\n                    workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            IpaasExtractionDetails fetchTaskDetails = convertJsonToObject(metaData.get(IPAAS_EXTRACT_DETAILS_KEY), IpaasExtractionDetails.class);//todo remove from constants\n            LOGGER.info(\"MDA call out to fetch ipaas connection info for . connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            String ipaasConnectionUrl = \"/connector/ipaas/connection/datahighway/\" + fetchTaskDetails.getConnectionId();\n            JsonObject jsonObject = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasConnectionUrl, workflowJobDetails.getTenantId(), false);\n            isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n            LOGGER.info(\"Ipaas source connection details response :{}  for connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    jsonObject.get(\"result\").getAsBoolean(), fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            if (!jsonObject.get(\"result\").getAsBoolean()) {\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info not found for id : %s\", fetchTaskDetails.getConnectionId()));\n            }\n            JsonObject data = jsonObject.get(DATA).getAsJsonObject();\n            if (data == null || data.isJsonNull())\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info is empty for id : %s\", fetchTaskDetails.getConnectionId()));\n            JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(data.get(VALUE).getAsString())).getAsJsonObject();\n            Type type = new TypeToken<Map<String, Object>>() {\n            }.getType();\n            Map<String, Object> connectionDetailsMap = new Gson().fromJson(decryptedObject, type);\n            //extraction from ipaas\n            LOGGER.info(\"Fetching ipaas connection details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n\n            //fetch dp staging details\n            if (fetchTaskDetails.getStagingConnectionInfo() != null) {\n                stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId, fetchTaskDetails, externalTaskRequestContext);\n            }\n\n            //fetch ipaas job & task details\n            LOGGER.info(\"MDA call out to fetch ipaas job and task details started. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            String ipaasJobDetailsUrl = \"/connector/job/datahighway/\" + fetchTaskDetails.getJobId();\n            JsonObject obj = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasJobDetailsUrl, workflowJobDetails.getTenantId(), false);\n\n            Type taskType = new TypeToken<List<TaskInfo>>() {\n            }.getType();\n            List<TaskInfo> taskInfos = new Gson().fromJson(obj.get(DATA).getAsJsonObject().get(\"taskInfo\"), taskType);\n\n            Map<String, String> ntzFields = Maps.newHashMap();\n            if (ConnectorType.SNOWFLAKE.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                List<TaskInfo> extractTaskInfos = taskInfos.stream().filter(taskInfo -> taskInfo.getTaskType().equals(TaskType.IPAAS_EXTRACT)).collect(Collectors.toList());\n                if (CollectionUtils.isNotEmpty(extractTaskInfos)) {\n                    extractTaskInfos.stream().forEach(taskInfo -> {\n                        if (CollectionUtils.isNotEmpty(taskInfo.getFieldInfoList())) {\n                            taskInfo.getFieldInfoList().stream().forEach(fieldInfo -> {\n                                        if (fieldInfo.getDataType().equals(\"date-time\") && fieldInfo.getMeta().containsKey(\"NTZ_ZONE_ID\")) {\n                                            ntzFields.put(fieldInfo.getPath(), fieldInfo.getMeta().get(\"NTZ_ZONE_ID\").toString());\n                                        }\n                                    }\n                            );\n                        }\n                    });\n                }\n            }\n\n            TaskInfo taskInfo = taskInfos.stream().filter(i -> i.getTaskId().equalsIgnoreCase(fetchTaskDetails.getTaskId()))\n                    .findFirst().get();\n            LOGGER.info(\"Fetched ipaas job and task details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            Map<String, List<PicklistOption>> picklistMap = Maps.newHashMap();\n\n\n            mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            StringBuilder objectMetaDataUrl = new StringBuilder(\"/connector/ipaas/metadata/datahighway/\")\n                    .append(taskInfo.getConnectionDetails().getConnectionId())\n                    .append(\"/\")\n                    .append(fetchTaskDetails.getExternalEntityName().trim().replaceAll(UCConstants.SPACE, \"%20\"))\n                    .append(\"/attributes\");\n            JsonObject objectMetaDataFromConnectors = mdaCalloutsService.getIpaasDetailsFromMDA(\n                    objectMetaDataUrl.toString(), workflowJobDetails.getTenantId(), false);\n            Set<String> ipaasFields = Sets.newHashSet();\n\n            for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                validateMappingsExistInExternalSystem(field, objectMetaDataFromConnectors, ipaasFields);\n            }\n            if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                    if (!condition.isCustomizedFilterField())\n                        validateMappingsExistInExternalSystem(condition.getLeftOperand(), objectMetaDataFromConnectors, ipaasFields);\n                }\n            }\n\n            if (!ipaasFields.isEmpty()) {\n                if (!ConnectorType.FRESHDESK.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                    LOGGER.error(\"Exception while executing externalTask due to validation failure as fields are not present in external system tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                            tenantId, jobId, taskId, ipaasFields);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,\n                            String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.Remove the field from connector mappings and re-run the job.\", ipaasFields));   // throw new DPSystemException(IpaasExtractionValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,String.format(\"Column %s does not exist. Possible causes: The column is deleted or the Integration/OAuth user does not have read permissions on the field.\", ipaasFields));\n                }else{\n                    LOGGER.warn(\"Not throwing exception for FRESHDESK connector, fields are missing {}\", ipaasFields);\n                }\n            }\n\n            if (fetchTaskDetails.isResolvePicklist()) {\n                boolean isPicklistFieldPresent = taskInfo.getFieldInfoList().stream().anyMatch(\n                        task -> (Boolean) task.getMeta().get(\"isPicklistField\"));\n                if (!isPicklistFieldPresent && taskInfo.getCriteria() != null && taskInfo.getCriteria().getConditions() != null && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                    isPicklistFieldPresent = taskInfo.getCriteria().getConditions().stream().anyMatch(conditions -> conditions.getLeftOperand().getMeta().containsKey(\"isPicklistField\") && (Boolean) conditions.getLeftOperand().getMeta().get(\"isPicklistField\"));\n                }\n                if (isPicklistFieldPresent) {\n\n                    for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                        populatePicklistMap(picklistMap, objectMetaDataFromConnectors, field);\n                    }\n                    if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                        for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                            if (!condition.isCustomizedFilterField())\n                                populatePicklistMap(picklistMap, objectMetaDataFromConnectors, condition.getLeftOperand());\n                        }\n                    }\n                }\n            }\n            PaginatedDataExtractionService paginatedDataExtractionService = new PaginatedDataExtractionService();\n            List<com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo> fieldInfoList = Lists.newArrayList();\n            fetchTaskDetails.getProjections().forEach(projection -> fieldInfoList.add(getFieldInfoList(projection)));\n            DataExtractionRequest dataExtractionRequest = new DataExtractionRequest();\n            dataExtractionRequest.setObjectName(fetchTaskDetails.getExternalEntityName());\n            dataExtractionRequest.setInstanceToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_INSTANCE_TOKEN).toString()));\n            dataExtractionRequest.setUserToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_USER_TOKEN).toString()));\n            dataExtractionRequest.setOrgToken(connectionDetailsMap.get(IPAAS_ORG_TOKEN).toString());\n            dataExtractionRequest.setJobId(workflowJobDetails.getJobId());\n            dataExtractionRequest.setConnectorType(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()));\n            String ipaasExcludeString = DeploymentProperties.getDeploymentProperties().getValue(IPAAS_EXCLUDE_STRING);\n            if (StringUtils.isNotEmpty(ipaasExcludeString)) {\n                ipaasExcludeString = ipaasExcludeString.concat(\",\");\n            }\n            ipaasExcludeString = ipaasExcludeString.concat(\"\\u0000\");\n            List<String> excludedStringList = Arrays.asList(ipaasExcludeString.split(\",\"));\n            dataExtractionRequest.getProperties().put(\"ceTimeOut\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"ce.call.timeout.in.milli.secs\", 60000));\n            dataExtractionRequest.setExcludedStrings(excludedStringList);\n            LOGGER.info(\"Excluded Strings: {}\", dataExtractionRequest.getExcludedStrings());\n            dataExtractionRequest.setFilterRule(fetchTaskDetails.getWhereClause());\n            dataExtractionRequest.setFields(fieldInfoList);\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(\"default.snowflake.enabled\", true)\n                    || DeploymentProperties.getDeploymentProperties().getValue(\"snowflake.tenant.list\").contains(RequestContextProvider.getTenantId())) {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", true);\n            } else {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", false);\n            }\n            dataExtractionRequest.getProperties().put(\"snowflakeFileSize\", DeploymentProperties.getDeploymentProperties().getLongValue(\"snowflake.file.size\", 200000000));\n            dataExtractionRequest.getProperties().put(\"snowflakeBatchLimit\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"snowflake.batch.limit\", 10000));\n            dataExtractionRequest.setCloudElementsBaseUrl(connectionDetailsMap.get(\"baseUrl\").toString());\n            dataExtractionRequest.setDateTimeConversionRequired(Boolean.parseBoolean(connectionDetailsMap.get(\"isDateTimeConversionRequired\").toString()));\n            dataExtractionRequest.getProperties().put(PAGE_SIZE, fetchTaskDetails.getPageSize());\n            dataExtractionRequest.getProperties().put(\"skipFieldsAsQueryParam\", fetchTaskDetails.isSkipFieldsForFetch());\n            dataExtractionRequest.setLastModifiedFieldName(fetchTaskDetails.getLastModifieldFieldPath());\n            dataExtractionRequest.setLastModifiedFieldValue(fetchTaskDetails.getLastModifieldFieldValue());\n            dataExtractionRequest.setHonourLastModfiedFieldValueToFetchDeltaData(fetchTaskDetails.isHonourLastModfiedFieldValueToFetchDeltaData());\n            dataExtractionRequest.setIgnorableErrorMessages(fetchTaskDetails.getIgnorableErrorMessages());\n            dataExtractionRequest.setQueryParamForDataFetch(fetchTaskDetails.getQueryParamForDataFetch());\n            dataExtractionRequest.setPicklistOptionMap(picklistMap);\n            dataExtractionRequest.getProperties().putAll(connectionDetailsMap);\n            taskInfo.getFieldInfoList().stream().filter(fieldInfo -> fieldInfo.getMeta().containsKey(\"isPrimaryKey\") && (Boolean) fieldInfo.getMeta().get(\"isPrimaryKey\")).findFirst().ifPresent(fieldInfo -> dataExtractionRequest.setPrimaryField(fieldInfo.getPath()));\n\n\n            if (null != fetchTaskDetails.getOrderByInfo() && !fetchTaskDetails.getOrderByInfo().getOrderByFields().isEmpty()) {\n                if (fetchTaskDetails.getOrderByInfo().isAscending()) {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"asc\", \"UTF-8\"));\n                } else {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"desc\", \"UTF-8\"));\n                }\n            }\n            dataExtractionRequest.setDefaultSleepTimeOnFail(fetchTaskDetails.getDefaultSleepTimeOnFail());\n            dataExtractionRequest.setMaxNoOfRetries(fetchTaskDetails.getMaxNumberOfRetries());\n            if (!ntzFields.isEmpty()) {\n                dataExtractionRequest.getProperties().put(\"NTZ_FIELDS\", ntzFields);\n            }\n\n            if (MapUtils.isNotEmpty(fetchTaskDetails.getAdditionalInformation())) {\n\n                dataExtractionRequest.getProperties().putAll(fetchTaskDetails.getAdditionalInformation());\n            }\n            if (StringUtils.isNotEmpty(fetchTaskDetails.getQuery())) {\n                dataExtractionRequest.getProperties().put(\"CUSTOM_QUERY\", fetchTaskDetails.getQuery());\n            }\n\n            fileList = paginatedDataExtractionService.extractData(dataExtractionRequest);\n            LOGGER.info(\"Ipaas Extraction started, tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n\n\n            if (null != taskInfo.getCriteria()) {\n                taskInfo.getCriteria().getConditions().stream().filter(Objects::nonNull).forEach(criteria -> {\n                    if (criteria.getLeftOperand().getMeta().containsKey(IS_CURRENCY_FIELD)) {\n                        com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fieldInfoForCurrencyValue = new com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo();\n                        fieldInfoForCurrencyValue.setDecimalPlaces(16);\n                        fieldInfoForCurrencyValue.setDataType(com.gainsight.services.dataprocessing.commons.pojo.DataType.NUMBER);\n                        fieldInfoForCurrencyValue.setName(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setJsonPath(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldAlias(criteria.getLeftOperand().getFieldAlias() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldType(FieldType.FIELD);\n                        fetchTaskDetails.getProjections().add(fieldInfoForCurrencyValue);\n                    }\n                });\n            }\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjections(), null);\n\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(fileList.stream().map(file -> file.getAbsolutePath()).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(fetchTaskDetails.isEnableDownloadSourceData())\n                    //.setPushExtractedDataToS3(true)\n                    .setExcludedStrings(ipaasExcludeString)\n                    .setIgnoreInvalidData(fetchTaskDetails.isIgnoreInvalidData())\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n            LOGGER.info(\"Request to ipaas fetch completed in {} secs for tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasExtractiontask external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (CollectionUtils.isNotEmpty(fileList)) {\n                for (File file : fileList) {\n                    FileUtils.deleteQuietly(file);\n                }\n            }\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        }\n    }\n\n    private static void validateMappingsExistInExternalSystem(FieldInfo field, JsonObject objectMetaDataFromConnectors, Set<String> ipaasFields) {\n        JsonObject data;\n        data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n        JsonArray fields = data.get(\"fields\").getAsJsonArray();\n        Iterator<JsonElement> iterator = fields.iterator();\n        boolean found = false;\n        while (iterator.hasNext()) {\n            JsonObject fieldInfo = iterator.next().getAsJsonObject();\n            JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n            if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            ipaasFields.add(field.getLabel());\n        }\n    }\n\n    private static void populatePicklistMap(Map<String, List<PicklistOption>> picklistMap,\n                                            JsonObject objectMetaDataFromConnectors, FieldInfo field) {\n        JsonObject data;\n\n        if (field.getMeta().containsKey(\"isPicklistField\") && (Boolean) field.getMeta().get(\"isPicklistField\")) {\n            data = objectMetaDataFromConnectors.get(DATA).getAsJsonObject();\n            JsonArray fields = data.get(\"fields\").getAsJsonArray();\n            Iterator<JsonElement> iterator = fields.iterator();\n            List<PicklistOption> picklistList = Lists.newArrayList();\n            while (iterator.hasNext()) {\n                JsonObject fieldInfo = iterator.next().getAsJsonObject();\n                JsonObject meta = fieldInfo.get(\"meta\").getAsJsonObject();\n                if (meta.getAsJsonObject().get(\"path\").getAsString().equals(field.getPath()) &&\n                        meta.getAsJsonObject().get(\"isPicklistField\").getAsBoolean()) {\n                    JsonArray options = fieldInfo.get(\"options\").getAsJsonArray();\n                    options.forEach(option -> {\n                        PicklistOption picklistOption = new PicklistOption();\n                        picklistOption.setPicklistLabel(option.getAsJsonObject().get(\"label\").getAsString());\n                        picklistOption.setPicklistValue(option.getAsJsonObject().get(\"value\").getAsString());\n                        picklistList.add(picklistOption);\n                    });\n                }\n            }\n            picklistMap.put(field.getPath(), picklistList);\n        }\n        LOGGER.info(\"Populated picklist map with {}\", picklistMap);\n    }\n\n    private static void stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                 String taskId, IpaasExtractionDetails fetchTaskDetails,\n                                                 ExternalTaskRequestContext externalTaskRequestContext) throws Exception {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        BasicDataSource dataSource = DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                fetchTaskDetails.getTaskId(), fetchTaskDetails.getJobId());\n        LOGGER.info(\"Showing ipaas staging details. tId- {}, jobId- {}, taskId- {}, Ipaas staging details  : {}\",\n                tenantId, jobId, taskId, ipaasStagingDetails);\n\n        //checking and updating field Infos & columns\n        if (ipaasStagingDetails != null && (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, fetchTaskDetails.getProjections())\n                || isUpsertKeyChanged(ipaasStagingDetails, fetchTaskDetails.getUpsertkey()))) {\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            fetchTaskDetails.setLastModifieldFieldValue(0);\n            //setting from date as 1970-01-01T00:00:00.000Z for fetching historical data\n            if (fetchTaskDetails.getWhereClause() != null && !fetchTaskDetails.getWhereClause().getRules().isEmpty() &&\n                    StringUtils.isNotEmpty(fetchTaskDetails.getLastModifieldFieldPath())) {\n                setDateForHistoricSync(fetchTaskDetails.getWhereClause(), fetchTaskDetails.getLastModifieldFieldPath());\n                ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n            }\n        }\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static void setDateForHistoricSync(FilterRule rule, String lastModifieldFieldPath) {\n        if (CollectionUtils.isEmpty(rule.getRules())) {\n            if (rule.getFieldInfo().getJsonPath().equalsIgnoreCase(lastModifieldFieldPath) &&\n                    rule.getOp() == FilterOperator.GT) {\n                try {\n                    DateTimeFormatter sourceDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSz\");\n                    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"1970-01-01T00:00:00.000+00:00\", sourceDateTimeFormatter.withZone(ZoneId.of(\"UTC\")));\n\n                    DateTimeFormatter targetDateTimeFormatter = StringUtils.isNotEmpty(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            ? DateTimeFormatter.ofPattern(rule.getFieldInfo().getDateTimeProperties().getFormat())\n                            : DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n                    ZoneId zoneId = StringUtils.isNotBlank(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            ? ZoneId.of(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            : ZoneId.of(\"UTC\");\n\n                    rule.getValues().get(0).setValue(zonedDateTime.format(targetDateTimeFormatter.withZone(zoneId)));\n\n                } catch (Exception e) {\n                    LOGGER.info(\"Date Parse exception occurred while setting from date. {}\", e);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.DATE_PARSE_EXCEPTION,\n                            String.format(\"Date Parse exception occurred while setting from date to January 01, 1970 due to %s\", e));\n                }\n            }\n        } else {\n            rule.getRules().forEach(innerRule -> setDateForHistoricSync(innerRule, lastModifieldFieldPath));\n        }\n    }\n\n    private static com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo getFieldInfoList(com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fetchTaskFieldInfo) {\n        com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo fieldInfo = new com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo();\n        fieldInfo.setName(fetchTaskFieldInfo.getName());\n        fieldInfo.setJsonPath(fetchTaskFieldInfo.getJsonPath());\n        fieldInfo.setFieldAlias(fetchTaskFieldInfo.getFieldAlias());\n        fieldInfo.setDecimalPlaces(fetchTaskFieldInfo.getDecimalPlaces());\n        if (null != fetchTaskFieldInfo.getDateTimeProperties()) {\n            DateTimeProperties dateTimeProperties = new DateTimeProperties();\n            dateTimeProperties.setFormat(fetchTaskFieldInfo.getDateTimeProperties().getFormat());\n            dateTimeProperties.setTimeZoneId(\"UTC\");\n            fieldInfo.setDateTimeProperties(dateTimeProperties);\n\n        }\n        fieldInfo.setDataType(com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.getDataType(fetchTaskFieldInfo.getDataType().getDataType()));\n        fieldInfo.setFieldType(com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType.FIELD);\n        fieldInfo.setIsCurrencyField(fetchTaskFieldInfo.isIsCurrencyField());\n        return fieldInfo;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            List<com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo> ipaasFetchDetails) {\n        Set<String> sourceFieldNames = ipaasFetchDetails\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"66701b0b-543d-4335-b3ad-ba9885299aba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":258,"endLine":286,"content":"tempFile, entityName, jsonObject);\n        url = isAfter(url, jsonObject);\n        return url;\n    }\n\n    private static long shouldContinue(String hasMoreKeyword, String offsetKeyword, long offset, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(hasMoreKeyword) != null && jsonObject.get(hasMoreKeyword).getAsBoolean()) {\n            offset = jsonObject.get(offsetKeyword).getAsLong();\n        }\n        return offset;\n    }\n\n    private static String isAfter(String url, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(\"paging\") != null) {\n            url = jsonObject.getAsJsonObject(\"paging\").getAsJsonObject(\"next\").get(\"link\").getAsString();\n        }\n        return url;\n    }\n\n    private static JsonObject iterativelyPullDataAndStoreInLocal(InputStream inputStream, String pluralName, File tempFile, String entityName, JsonObject jsonObject) throws IOException {\n        JsonArray iterator = null;\n        try {\n            if (entityName.equalsIgnoreCase(GSHubSpotEntityEnum.labelName(GSHubSpotEntityEnum.OWNER)) && !pluralName.equalsIgnoreCase(\"results\")) {\n                iterator = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonArray();\n            } else {\n                jsonObject = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonObject();\n                iterator = jsonObject.getAsJsonArray(pluralName);\n            }\n        } catch (JsonPars","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#is","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":215,"endLine":302,"content":"             *      Static block inside @see AbandonedConnectionCleanupThread class is spawning a new thread , which is holding a reference to the current classLoader object.\n             * @see AbandonedConnectionCleanupThread#checkedShutdown() explictly shoutdowns the executorService that created the thread, thereby removing the reference to current classLoader.\n             */\n            AbandonedConnectionCleanupThread.checkedShutdown();\n            Enumeration<Driver> drivers = DriverManager.getDrivers();\n            while (drivers.hasMoreElements()) {\n                Driver driver = drivers.nextElement();\n                if (driver.getClass().equals(com.mysql.cj.jdbc.Driver.class)) {\n                    try {\n                        DriverManager.deregisterDriver(driver);\n                    } catch (SQLException e) {\n                        LOGGER.error(\"Failed to deregister Driver : {}\", driver.getClass().getName());\n                    }\n                    break;\n                }\n            }\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f4d11dd-96db-4fb7-81c4-6d933af5242d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":233,"endLine":268,"content":"_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestCo","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dacf6cae-04f8-47cc-9263-2011f1faf0bb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":164,"endLine":182,"content":"etching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        return DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n    }\n\n    private static IpaasStagingDetails stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                Stri","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.isUpsertKeyChanged","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":444,"endLine":454,"content":"    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.saveExtractionTaskResult","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":258,"endLine":260,"content":"    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7c52b356-a97f-4bff-9678-fc2a93a49794","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":140,"endLine":164,"content":"                          Locale locale = fieldInfo.getFieldLocale() == null ? Locale.US : fieldInfo.getFieldLocale().getLocale();\n                                        NumberFormat nf = NumberFormat.getInstance(locale);\n                                        try {\n                                            convertedValue = DHUtils.valueOf(nf.parse(convertedValue));\n                                        } catch (ParseException e) {\n                                            LOGGER.info(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale);\n                                            throw new DPSystemException(msg(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale), e);\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (Exception e) {\n                            isParsingSuccess = false;\n                            if (errorMsg == null) {\n                                errorMsg = msg(\"Error while parsing row : {}. {} \", row, e, e.getCause());\n                            }\n                        }\n                        recordValues.add(convertedValue);\n\n                    }\n                    if (isParsingSuccess) {\n                        parquetWriter.write(recordValues);\n                        parquetFile.addNumRecords(1);\n                    } else {\n                        if (Objects.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"de950054-63db-45a8-a927-0e940720f370","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":109,"endLine":123,"content":"TaskRequestContext.getMetaData();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(),\n                    workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            IpaasExtractionDetails fetchTaskDetails = convertJsonToObject(metaData.get(IPAAS_EXTRACT_DETAILS_KEY), IpaasExtractionDetails.class);//todo remove from constants\n            LOGGER.info(\"MDA call out to fetch ipaas connection info for . connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            String ipaasConnectionUrl = \"/connector/ipaas/connection/datahighway/\" + fetchTaskDetails.getConnectionId();\n            JsonObject jsonObject = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasConnectionUrl, workflowJobDetails.getTenantId(), false);\n            isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n            LOGGER.info(\"Ipaas source connection details response :{}  for connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    jsonObject.get(\"result\").getAsBoolean(), fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n       ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.isTimeStampField","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":273,"endLine":275,"content":"    private static boolean isTimeStampField(DataType dataType) {\n        return dataType != null && dataType.equals(DataType.TIMESTAMP) || dataType.equals(DataType.DATE) || dataType.equals(DataType.DATETIME);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"79dc8d9a-73a7-4fa3-9490-8348a55ea8e8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":45,"endLine":71,"content":"ort java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.ExternalTaskConstants.DEFAULT_DATE_FORMAT_KEY;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.PX_ACCESS_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.PX_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getProperties;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.getTempFilePath;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.msg;\nimport static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n\n/**\n * @author sthammishetty on 17/11/20\n */\npublic class PxExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PxExtractionTask.class);\n    private static final String DEFAULT_PAGE_SIZE = \"1000\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJob","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#IpaasStagingLoadTask.isUpsertKeyChanged","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":221,"endLine":231,"content":"    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7529cd94-07e0-4119-b456-0defad0e4fca","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":243,"endLine":265,"content":" {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query after modification: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQuery(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n\n    private static void logDateOrDateTimeData(String tenantId, String jobId, List<FieldInfo> headers, CsvFile csvFile) {\n        InputStream csvInputStream = null;\n        int sampleRecordSize = DeploymentProperties.getDeploymentProperties().getIntegerValue(POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE, 10);\n        boolean incl","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a94b423d-513f-4ee1-b3ac-88577b4d1909","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":64,"endLine":66,"content":"TaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"code","type":"chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":189,"endLine":207,"content":"        isNotNull(response, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        List<RunReportResponse> reports = response.getReports();\n        assertState(CollectionUtils.isNotEmpty(reports) && reports.size() == 1, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        return reports.get(0);\n    }\n\n    private RunReportRequest buildReportRequestGA4(GAReportGroup gaReportGroup) {\n        RunReportRequest reportRequest = new RunReportRequest();\n        com.google.api.services.analyticsdata.v1beta.model.DateRange dateRange = new com.google.api.services.analyticsdata.v1beta.model.DateRange()\n                .setStartDate(extractDetails.getStartDate())\n                .setEndDate(extractDetails.getEndDate());\n        reportRequest.setProperty(\"properties/\" + extractDetails.getViewId());\n        reportRequest.setDateRanges(Lists.newArrayList(dateRange));\n        reportRequest.setDimensions(gaReportGroup.getDimensions().stream().map(this::getDimensionV4).collect(Collectors.toList()));\n        reportRequest.setMetrics(gaReportGroup.getMetrics().stream().map(this::getMetricV4).collect(Collectors.toList()));\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getDimensionFilterRules())) {\n//            //reportRequest.setDimensionFilter(gaReportGroup.getDimensionFilterRules().stream().map(this::getDimensionFilterClause).collect(Collectors.toList()));\n//        }\n//        if (CollectionUtils.isNotEmpty(ga","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":"```json\n{\n  \"description\": \"The GA4ExtractHelper class is designed to facilitate the extraction of Google Analytics 4 (GA4) reports. It includes methods to validate the response from the GA4 API and to build requests for fetching GA4 reports. The class ensures that the responses are not null and contain the expected data, and it constructs requests with the necessary parameters such as date ranges, dimensions, and metrics. This class is part of a larger system that likely involves data extraction, transformation, and loading (ETL) processes for analytics purposes.\",\n  \"purposeSummary\": \"Facilitates the extraction and validation of Google Analytics 4 (GA4) reports.\",\n  \"capabilities\": [\n    \"Validates the response from the GA4 API to ensure it is not null and contains the expected data.\",\n    \"Builds GA4 report requests with specified date ranges, dimensions, and metrics.\",\n    \"Handles the construction of complex request objects for the GA4 API.\",\n    \"Ensures that the GA4 report requests are correctly formatted and contain all necessary parameters.\"\n  ],\n  \"usageExamples\": [\n    {\n      \"description\": \"Example of validating a GA4 API response and extracting the first report.\",\n      \"code\": \"RunReportResponse response = ga4ExtractHelper.validateAndExtractReport(apiResponse);\"\n    },\n    {\n      \"description\": \"Example of building a GA4 report request with specific parameters.\",\n      \"code\": \"GAReportGroup gaReportGroup = new GAReportGroup();\\n// Set dimensions and metrics for the report group\\nRunReportRequest request = ga4ExtractHelper.buildReportRequestGA4(gaReportGroup);\"\n    }\n  ]\n}\n```","purposeSummary":"```json\n{\n  \"description\": \"The GA4ExtractHelper class is designed to facilitate the extraction of Google Analytics 4 (GA4) reports.","capabilities":[],"usageExamples":[]},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setLastModifieldFieldPath","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":195,"endLine":197,"content":"    public void setLastModifieldFieldPath(String lastModifieldFieldPath) {\n        this.lastModifieldFieldPath = lastModifieldFieldPath;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.getMetricV4","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":237,"endLine":239,"content":"    private Metric getMetricV4(FieldInfo fieldInfo) {\n        return new Metric().setExpression(fieldInfo.getName()).setName(fieldInfo.getFieldAlias());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.executeQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":61,"endLine":121,"content":"    public void executeQuery(CsvFile csvFile) {\n        int limit = DeploymentProperties.getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_QUERY_LIMIT, 10000);\n        int offset = 0;\n        int recordsRetrieved = 0;\n        CSVPrinter csvPrinter = null;\n        PostgresSQLService dataBaseClient = null;\n        try {\n            LOGGER.info(\"Going to execute postgres query with legacy code\");\n            dataBaseClient = new TransientPostgresSQLServiceImpl(connectionParamPojo);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC));\n            createCsvHeaderAndUpdateFile(csvPrinter, csvFile);\n            boolean done = false;\n            do {\n                String queryToExecute = query.trim() + \" offset \" + offset + \" limit \" + limit;\n                LOGGER.info(\"Started executing query: {} with legacy code\", queryToExecute);\n                DBResultPojo executeResponse = dataBaseClient.execute(queryToExecute);\n                if (!executeResponse.isSucceded()) {\n                    LOGGER.error(\"Sql query execution failed with: \", executeResponse.getCause());\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", executeResponse.getCause().getMessage()));\n                }\n                JSONArray data = (JSONArray) executeResponse.getResult();\n                List<Object> recordList = new ArrayList<>();\n                for (int i = 0; i < data.length(); i++) {\n                    JSONObject jsonObject = data.getJSONObject(i);\n                    sqlQueryInfo.getShowFields().forEach(showField -> {\n                        String key = showField.getFieldAlias().toLowerCase();\n                        if (jsonObject.isNull(key)) {\n                            recordList.add(null);\n                        } else {\n                            if (showField.getDataType().equals(DataType.NUMBER)) {\n                                recordList.add(jsonObject.getDouble(key));\n                            } else if (showField.getDataType().equals(DataType.DATETIME)) {\n                                recordList.add(convertDateTimeFormat(jsonObject.get(key), showField.getDateTimeProperties()));\n                            } else {\n                                recordList.add(jsonObject.get(key));\n                            }\n                        }\n                    });\n                    csvPrinter.printRecord(recordList);\n                    recordList.clear();\n                }\n                offset = offset + limit;\n                recordsRetrieved = recordsRetrieved + data.length();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n                if (data.length() != limit) {\n                    done = true;\n                }\n            } while (!done && !Thread.currentThread().isInterrupted());\n            csvPrinter.flush();\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Unable to process SQL extract with legacy code due to: {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with legacy code for postgres/redshift/snowflake\", ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (dataBaseClient != null) {\n                dataBaseClient.closeConnection();\n            }\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"34ae7fe5-4683-411b-b389-a2213225628a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":31,"endLine":52,"content":"{\n\n        LOGGER.info(\"Hello World. This is DynamicTask\");\n        LOGGER.info(\"Reading properties from config file ['task.conf']\");\n        String fileName = DeploymentProperties.getDeploymentProperties().getValue(\"file.name\");\n        String sampleKeyValue = DeploymentProperties.getDeploymentProperties().getValue(\"sample.key\");\n\n        if (StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(sampleKeyValue)) {\n            LOGGER.info(\"Read fileName from conf file 'file.name' : \" + fileName);\n            LOGGER.info(\"Value of 'sample.key' : \" + sampleKeyValue);\n        } else {\n            throw new RuntimeException(\"Failed to read properties ['file.name', 'sample.key'] from conf file\");\n\n        }\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getTaskId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":167,"endLine":169,"content":"    public String getTaskId() {\n        return taskId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":40,"endLine":154,"content":"public class DPDynamicTaskTurboFilter extends AbstractObfuscationTurboFilter {\n\n    private static final Logger DPDTF = LoggerFactory.getLogger(\"DPDTF\");\n\n    // List of packages disabled for obfuscation(Corresponding to the individual repositories)\n    private static final List<String> packagesDisabledForObfuscation = Lists.newArrayList();\n    private static ExpiryCache<String, DHOBFConfigProperties> DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = null;\n\n    static {\n        packagesDisabledForObfuscation.add(\"DPDTF\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.external.commons.DPDynamicTaskTurboFilter\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.properties\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.cryptography\");\n    }\n\n    /**\n     * Retrieves the list of packages enabled for obfuscation.\n     *\n     * @return List of package names enabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesEnabledForObfuscation() {\n        return getDHOBFConfigProperties().getGsLogOBFPackagesEnabled();\n    }\n\n    /**\n     * Retrieves the list of packages disabled for obfuscation.\n     *\n     * @return List of package names disabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesDisabledForObfuscation() {\n        List<String> packages = DHLogObfuscationUtil.disabledPackagesForObfuscation(getDHOBFConfigProperties());\n        packages.addAll(packagesDisabledForObfuscation);\n        return packages;\n    }\n\n    /**\n     * Retrieves the obfuscation patterns for the tenant.\n     *\n     * @return List of regex patterns for tenant obfuscation.\n     * <p>\n     * DHFeatureUtil is utility method which needs to be called by the respective repository to get the obfuscation patterns.\n     */\n    @Override\n    public List<Pattern> getTenantObfuscationPattern() {\n        try {\n            if (StringUtils.isBlank(MDC.get(TENANT_ID_KEY)) || MDC.get(TENANT_ID_KEY).equalsIgnoreCase(DUMMY_STRING)) {\n                return Collections.emptyList();\n            } else {\n                DHOBFConfigProperties dhobfConfigProperties = getDHOBFConfigProperties();\n                DHFeatureUtils dhFeatureUtils = DHFeatureUtils.getInstance(DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_URL),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_EVALUATE_PATH, \"/v1/features/evaluate/\"),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_ENVIRONMENT), DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET),\n                        dhobfConfigProperties.getGsLogObfuscationFeatureVariationCacheExpiry(), dhobfConfigProperties.getGsLogObfuscationPatternCacheExpiry());\n                return dhFeatureUtils.getTenantLogObfuscationPatterns(MDC.get(TENANT_ID_KEY), MDC.get(REQUEST_ID_KEY));\n            }\n        } catch (Exception ex) {//NOSONAR\n            DPDTF.warn(\"[NO_OBF] Error in getting tenant obfuscation patterns: {}\", ex.getMessage(), ex);\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * Checks if obfuscation is enabled in the application.\n     *\n     * @return true if obfuscation is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationEnabledInApp() {\n        return getDHOBFConfigProperties().isGsLogOBFEnabled();\n    }\n\n    /**\n     * Checks if obfuscation metric logging is enabled.\n     *\n     * @return true if obfuscation metric logging is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationMetricLogEnabled() {\n        return getDHOBFConfigProperties().isGsLogOBFEnableFilterMetricLog();\n    }\n\n    /**\n     * Retrieves the obfuscation configuration properties from dh_env_config.\n     *\n     * @return DHOBFConfigProperties object containing obfuscation configuration.\n     */\n    private DHOBFConfigProperties getDHOBFConfigProperties() {\n        try {\n            /*This is initialization block for the expiry cache which will happen once.\n            and since we already short-circuited if DeploymentProperties is not initialized, we can safely initialize the cache here.\n             */\n            if (Objects.isNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE)) {\n                DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = new ExpiryCache<>(DeploymentProperties.getDeploymentProperties().getLongValue(GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS, 60 * 60 * 1000));\n            }\n            //Checking in cache if property exists\n            if (Objects.nonNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY))) {\n                return DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            }\n            //If not present in cache, fetching from DeploymentProperties and storing in cache\n            String configValue = DeploymentProperties.getDeploymentProperties().getValue(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            Precondition.isNotBlank(configValue, GENERIC_SYSTEM_ERROR, \"[NO_OBF] Obfuscation config is not present in dynamic app's config server\");\n            DHOBFConfigProperties dhobfConfigProperties = DHUtils.convertJsonToObject(configValue, DHOBFConfigProperties.class);\n            DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.put(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY, dhobfConfigProperties);\n            return dhobfConfigProperties;\n        } catch (Exception ex) {\n            //Ignoring the exception as we don't want to fail the application startup in cases when DeploymentProperties hasn't been initialized\n            DPDTF.warn(\"[NO_OBF] Error in getting DHOBFConfigProperties: {}\", ex.getMessage(), ex);\n        }\n        return new DHOBFConfigProperties();\n    }\n\n    /**\n     * Checks if class loading should be short-circuited where DeploymentProperties is yet to be initialized.\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7cc33de8-8da5-4862-9eb3-8e82727de522","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":309,"endLine":342,"content":"et(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), metric.getValue());\n                fieldIndex++;\n            }\n            return values;\n        }\n    }\n\n    private static class RecordMeta {\n        private FieldInfo fieldInfo;\n        private int recordPosition = -1;\n        private DateTimeFormatter dateTimeFormatter;\n\n        public RecordMeta(FieldInfo fieldInfo, int recordPosition) {\n            this.fieldInfo = fieldInfo;\n            this.recordPosition = recordPosition;\n            init();\n        }\n\n        private void init() {\n            DateTimeProperties dateTimeProperties = fieldInfo.getDateTimeProperties();\n            String format;\n            if (dateTimeProperties != null && (format = dateTimeProperties.getFormat()) != null) {\n                this.dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            }\n        }\n\n\n        public int getRecordPosition() {\n            return recordPosition;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setLastModifieldFieldValue","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":226,"endLine":228,"content":"    public void setLastModifieldFieldValue(Object lastModifieldFieldValue) {\n        this.lastModifieldFieldValue = lastModifieldFieldValue;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"800c9678-e265-4612-8569-f31b8c37809c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":171,"endLine":188,"content":"OGGER.info(\"Successfully saved externalTask result for jobId:{}, tenantId:{}\", jobId, tenantId);\n        } catch (DPSystemException dpSysEx) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), dpSysEx);\n            throw dpSysEx;\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), ex);\n            throw new DPSystemException(msg(\"Error while performing jdbc extraction: {}\", ex.getMessage()), ex);\n        }\n    }\n\n    private static CsvFile executeQueryForPostgresCopyManager(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) throws SQLException, IOException {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.POSTGRES))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.ge","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.getPackagesDisabledForObfuscation","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":71,"endLine":75,"content":"    public List<String> getPackagesDisabledForObfuscation() {\n        List<String> packages = DHLogObfuscationUtil.disabledPackagesForObfuscation(getDHOBFConfigProperties());\n        packages.addAll(packagesDisabledForObfuscation);\n        return packages;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.getDataFromHubspotLatestApi","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":175,"endLine":201,"content":"    private static InputStream getDataFromHubspotLatestApi(HubspotAccessDetails accessDetails, String nextPageUrl, HubspotExtractDetails fetchTaskDetails) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        try {\n            return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), nextPageUrl);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), nextPageUrl);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java#TooManyOpenFilesTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":23,"endLine":67,"content":"public class TooManyOpenFilesTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TooManyOpenFilesTask.class.getName());\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        List<FileWriter> files = new ArrayList();\n        try {\n            File file = File.createTempFile(UUID.randomUUID().toString() + \"_dummy\", \".txt\");\n            FileWriter fileWriter;\n            int batchSize = 1000;\n            for (int i = 0; i < 5000; i++) {\n                try {\n                    fileWriter = new FileWriter(file);\n                    files.add(fileWriter);\n                    if (batchSize == 0) {\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            LOGGER.error(e.getMessage(), e);\n                        }\n                        batchSize = 1000;\n                    }\n                    batchSize--;\n                } catch (Exception e) {\n                    LOGGER.error(\"error creating temp file {}\", e.getMessage(), e);\n                    throw new RuntimeException(e);\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java#IpaasExtractionValidationCode.getErrorName","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":23,"endLine":25,"content":"    public String getErrorName() {\n        return className + \"__\" + this.name();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.getRefreshToken","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":21,"endLine":23,"content":"    public String getRefreshToken() {\n        return refreshToken;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33e4b641-245f-4211-b891-e4c55284078e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":121,"endLine":140,"content":"response :{}  for connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    jsonObject.get(\"result\").getAsBoolean(), fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            if (!jsonObject.get(\"result\").getAsBoolean()) {\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info not found for id : %s\", fetchTaskDetails.getConnectionId()));\n            }\n            JsonObject data = jsonObject.get(DATA).getAsJsonObject();\n            if (data == null || data.isJsonNull())\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info is empty for id : %s\", fetchTaskDetails.getConnectionId()));\n            JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(data.get(VALUE).getAsString())).getAsJsonObject();\n            Type type = new TypeToken<Map<String, Object>>() {\n            }.getType();\n            Map<String, Object> connectionDetailsMap = new Gson().fromJson(decryptedObject, type);\n            //extraction from ipaas\n            LOGGER.info(\"Fetching ipaas connection details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n\n            //fetch dp staging details\n            if (fetchTaskDetails.getStagingC","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setResolvePicklist","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":211,"endLine":213,"content":"    public void setResolvePicklist(boolean resolvePicklist) {\n        this.resolvePicklist = resolvePicklist;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b77889df-4c13-4d93-8836-f667406c46f3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":89,"endLine":115,"content":"alTaskRequestContext);\n            IpaasStagingDetails ipaasStagingDetails = null;\n            if (ipaasStagingLoadDetails.getStagingConnectionInfo() != null) {\n                ipaasStagingDetails = stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId,\n                        ipaasStagingLoadDetails, dataSource);\n            }\n\n            IpaasStagingDao stagingDao = new IpaasStagingDaoImpl(dataSource);\n\n            //Download Ready csv File from parent task\n            LOGGER.info(\"Downloading parent task CSV file for tId- {}, jobId- {}, taskId- {}, staging details: {}\",\n                    tenantId, jobId, taskId, ipaasStagingDetails);\n\n            String directory = ExternalTaskUtil.downloadParentTaskResults(externalTaskRequestContext, parents.get(0));\n            LOGGER.info(\"Parent directory name for  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    parents.get(0), directory);\n            File folder = new File(directory);\n            inputFiles = Arrays.asList(folder.listFiles());\n            LOGGER.info(\"input file names  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    inputFiles.stream().map(i -> i.toString()).collect(Collectors.joining(\" , \")));\n\n            int recordsAffected = 0;\n            for (File file : inputFiles) {\n                recordsAffected += stagingDao.batchUpsert(ipaasStagingDetails, file, ipaasStagingLoadDetails.getTenantZoneId());\n            }\n\n            LOGGER.info(\"{","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java#ExternalTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":27,"endLine":29,"content":"    public static void main(String[] args) {\n        execute(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9531ab13-e1bc-4597-94d0-dc3291558a48","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":36,"endLine":78,"content":" lastModifieldFieldPath;\n    private boolean resolvePicklist;\n    private String upsertkey;\n    private Object lastModifieldFieldValue;\n    private boolean honourLastModfiedFieldValueToFetchDeltaData;\n    private int defaultSleepTimeOnFail;\n    private String pageSize;\n    private boolean enableDownloadSourceData;\n    private int maxNumberOfRetries;\n    private boolean ignoreInvalidData;\n    private List<String> ignorableErrorMessages= Lists.newArrayList();\n    private String queryParamForDataFetch;\n    private boolean skipFieldsForFetch;\n\n    private Map<String, Object> additionalInformation;\n    public Map<String, Object> getAdditionalInformation() {\n        return additionalInformation;\n    }\n\n    public void setAdditionalInformation(Map<String, Object> additionalInformation) {\n        this.additionalInformation = additionalInformation;\n    }\n\n    public boolean isSkipFieldsForFetch() {\n        return skipFieldsForFetch;\n    }\n\n    public void setSkipFieldsForFetch(boolean skipFieldsForFetch) {\n        this.skipFieldsForFetch = skipFieldsForFetch;\n    }\n    public String getQueryParamForDataFetch() {\n        return queryParamForDataFetch;\n    }\n\n    public void setQueryParamForDataFetch(String queryParamForDataFetch) {\n        this.queryParamForDataFetch = queryParamForDataFetch;\n    }\n    public int getMaxNumberOfRetries() {\n        return maxNumberOfRetries;\n    }\n\n    public void setMaxNumberOfRetries(int maxNumberOfRetries) {\n        this.maxNumberOfRetries = maxNumber","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9e958666-3e60-41d0-9b52-222ceafdcff5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":25,"endLine":43,"content":"\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String taskId = externalTaskRequestContext.getTaskId();\n\n        String primaryJobId = externalTaskRequestContext.getPrimaryJobId();\n        DPWorkflowTaskDetails taskDetailsFromDB = DbApiUtil.getTaskDetailsWithPrimaryJobFromDB(primaryJobId, taskId);\n        if (!taskDetailsFromDB.getTaskStatus().equals(SUCCESS.name())) {\n            String message = msg(\"Task with taskId {} in job with primaryJobId {} is not in SUCCESS state, current state of this task is {}, can not continue with this execution.\", taskId, primaryJobId, taskDetailsFromDB.getTaskStatus());\n            LOGGER.error(message);\n            throw new DPSystemException(message);\n        }\n\n        TaskResult taskResult = new TaskResult(ExternalTaskUtil.getS3OutputFilePath(externalTaskRequestContext, S3OutputDirType.INTERNAL), taskDetailsFromDB.getRecordCount(), null, null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult));\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cdea05d1-1707-4876-97fd-310d5f7a23ba","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":160,"endLine":184,"content":" (isParsingSuccess) {\n                        parquetWriter.write(recordValues);\n                        parquetFile.addNumRecords(1);\n                    } else {\n                        if (Objects.nonNull(errorFile) && Objects.nonNull(errorWriter)) {\n                            recordValues.add(errorMsg);\n                            errorWriter.printRecord(recordValues);\n                            errorFile.setNumRecords(errorFile.getNumRecords() + 1);\n                        }\n                    }\n                }\n            }\n            LOGGER.info(\"Added {} records to parquetFile\", parquetFile.getNumRecords());\n            if (errorFile.getNumRecords() > 0) {\n                LOGGER.warn(\"Found {}  error records\", errorFile.getNumRecords());\n                LOGGER.info(\"Added {} records to errorFile\", errorFile.getNumRecords());\n            }\n            TaskResult taskResult = new TaskResult(pxExtractionDetails.getShowFields(), null, errorFile.getNumRecords());\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            if (Objects.nonNull(errorFile) && errorFile.getNumRecords() > 0) {\n                externalExtraction","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"73e17e47-30ac-4548-8e73-9f4f2361b7b1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":22,"endLine":66,"content":"slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.DataExtractorConstants.SQL_EXTRACTION_QUERY_LIMIT;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sghosh\n * Created On: 24-May-2023\n */\n\npublic class SQLExtractHelper {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SQLExtractHelper.class);\n\n    private final ConnectionParamPojo connectionParamPojo;\n    private final String query;\n    private final SQLQueryInfo sqlQueryInfo;\n\n    public SQLExtractHelper(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo) {\n        this.connectionParamPojo = connectionParamPojo;\n        this.query = query;\n        this.sqlQueryInfo = sqlQueryInfo;\n    }\n\n    public void executeQuery(CsvFile csvFile) {\n        int limit = DeploymentProperties.getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_QUERY_LIMIT, 10000);\n        int offset = 0;\n        int recordsRetrieved = 0;\n        CSVPrinter csvPrinter = null;\n        PostgresSQLService d","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.GA4ExtractHelper","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":65,"endLine":73,"content":"    public GA4ExtractHelper(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        this.systemProperties = systemProperties;\n        this.metaData = metaData;\n        this.taskId = taskId;\n        this.jobId = jobId;\n        this.workflowJobDetails = workflowJobDetails;\n        init();\n        this.recordFormatter = new RecordFormatter();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getMaxNumberOfRetries","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":73,"endLine":75,"content":"    public int getMaxNumberOfRetries() {\n        return maxNumberOfRetries;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65c0f2d3-cb0b-45bf-883d-b8359880d18a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":81,"endLine":103,"content":"flowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MySql ConnectionInfo \");\n            }\n\n            if (connectorType == null || !UDMAccountType.MYSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MySql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java#TooManyOpenFilesTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":31,"endLine":66,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        List<FileWriter> files = new ArrayList();\n        try {\n            File file = File.createTempFile(UUID.randomUUID().toString() + \"_dummy\", \".txt\");\n            FileWriter fileWriter;\n            int batchSize = 1000;\n            for (int i = 0; i < 5000; i++) {\n                try {\n                    fileWriter = new FileWriter(file);\n                    files.add(fileWriter);\n                    if (batchSize == 0) {\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            LOGGER.error(e.getMessage(), e);\n                        }\n                        batchSize = 1000;\n                    }\n                    batchSize--;\n                } catch (Exception e) {\n                    LOGGER.error(\"error creating temp file {}\", e.getMessage(), e);\n                    throw new RuntimeException(e);\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4845db16-c9b9-4e75-8a6b-0f48111a3a51","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":279,"endLine":302,"content":"ionRequest.setDefaultSleepTimeOnFail(fetchTaskDetails.getDefaultSleepTimeOnFail());\n            dataExtractionRequest.setMaxNoOfRetries(fetchTaskDetails.getMaxNumberOfRetries());\n            if (!ntzFields.isEmpty()) {\n                dataExtractionRequest.getProperties().put(\"NTZ_FIELDS\", ntzFields);\n            }\n\n            if (MapUtils.isNotEmpty(fetchTaskDetails.getAdditionalInformation())) {\n\n                dataExtractionRequest.getProperties().putAll(fetchTaskDetails.getAdditionalInformation());\n            }\n            if (StringUtils.isNotEmpty(fetchTaskDetails.getQuery())) {\n                dataExtractionRequest.getProperties().put(\"CUSTOM_QUERY\", fetchTaskDetails.getQuery());\n            }\n\n            fileList = paginatedDataExtractionService.extractData(dataExtractionRequest);\n            LOGGER.info(\"Ipaas Extraction started, tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n\n\n            if (null != taskInfo.getCriteria()) {\n                taskInfo.getCriteria().getConditions().stream().filter(Objects::nonNull).forEach(criteria -> {\n                    if (criteria.getLeftOperand().getMeta().containsKey(IS_CURRENCY_FIELD)) {\n                        com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fieldInfoForCurrencyValue = new com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo();\n                        fieldInfoForCurrencyValue.setDecimalPlaces(16);\n                        fieldInfoForCurrencyValue.setDataType(","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java#L1-L51","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":1,"endLine":51,"content":"package com.gainsight.services.external.out.of.disk.space.task;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.apache.commons.io.FileUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Collections;\n\n\n/**\n * @author sthammishetty on 09/06/20\n * <p>\n * Sample ExternalTask which tries to use more than allocated disk space. This task get's failed due to excess disk utilization\n */\npublic class ExternalTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class.getName());\n\n    public static void main(String[] args) {\n        execute(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void execute(ExternalTaskRequestContext externalTaskRequestContext) {\n        for (int i = 0; i < 10; i++) {\n            InputStream inputStream = ExternalTask.class.getClassLoader().getResourceAsStream(\"random.txt\");\n            File file = new File(\"random\" + i + \".txt\");\n            LOGGER.info(\"copying to file \" + file.getName());\n            try {\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                LOGGER.info(\"Copied file \" + file.getName() + \", size: \" + file.length());\n            } catch (IOException e) {\n                LOGGER.error(\"Error copying to file \" + file.getName());\n            }\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java#L1-L43","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":1,"endLine":43,"content":"package com.gainsight.service.external.placeholder.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowTaskDetails;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.S3OutputDirType;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.DbApiUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static com.gainsight.services.dataprocessing.commons.pojo.workflow.WorkflowJobStatus.SUCCESS;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sthammishetty on 26/03/20\n */\npublic class PlaceholderTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PlaceholderTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String taskId = externalTaskRequestContext.getTaskId();\n\n        String primaryJobId = externalTaskRequestContext.getPrimaryJobId();\n        DPWorkflowTaskDetails taskDetailsFromDB = DbApiUtil.getTaskDetailsWithPrimaryJobFromDB(primaryJobId, taskId);\n        if (!taskDetailsFromDB.getTaskStatus().equals(SUCCESS.name())) {\n            String message = msg(\"Task with taskId {} in job with primaryJobId {} is not in SUCCESS state, current state of this task is {}, can not continue with this execution.\", taskId, primaryJobId, taskDetailsFromDB.getTaskStatus());\n            LOGGER.error(message);\n            throw new DPSystemException(message);\n        }\n\n        TaskResult taskResult = new TaskResult(ExternalTaskUtil.getS3OutputFilePath(externalTaskRequestContext, S3OutputDirType.INTERNAL), taskDetailsFromDB.getRecordCount(), null, null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult));\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"042283af-a2a1-4edb-bf6a-5ec5dc8bd145","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":225,"endLine":257,"content":"e) {\n                        LOGGER.error(\"Failed to deregister Driver : {}\", driver.getClass().getName());\n                    }\n                    break;\n                }\n            }\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLEx","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e698e6a6-32a3-4511-a281-c3d2b1bc4727","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":102,"endLine":125,"content":"endpoint: {} with body {} \", pxURL, DHUtils.convertObjectToJson(pxExtractionDetails));\n            DateTimeFormatter destDateTimeFormatter = getDestinationDateTimeFormatter(tenantId);\n            while (!isFinalResult) {\n                PXResponse pxResponse = PxUtil.fetchEvents(pxExtractInfo, jobId, apiKey, pxURL, nextPageToken, pageSize, false);\n                nextPageToken = null;\n                isFinalResult = true;\n                if (!pxResponse.isLastPage()) {\n                    nextPageToken = pxResponse.getNextPageToken();\n                    if (StringUtils.isNotBlank(nextPageToken)) {\n                        isFinalResult = false;\n                    }\n                    jobId = pxResponse.getJobId();\n                }\n                List<Map<String, Object>> rows = pxResponse.getRows();\n                for (Map<String, Object> row : rows) {\n                    boolean isParsingSuccess = true;\n                    List<String> recordValues = new ArrayList<>(pxExtractionDetails.getShowFields().size());\n                    String errorMsg = null;\n                    for (FieldInfo fieldInfo : pxExtractionDetails.getShowFields()) {\n                        String convertedValue = null;\n                        try {\n                            DataType dataType = FunctionHelper.getDerivedDataType(fieldInfo);\n                            String attributeName = StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName());\n                            Objec","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e1c81391-f3e6-4d8c-b66c-cae7dbdc23dc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":101,"endLine":124,"content":"e of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .build();\n\n            //Saving externalTask Result.\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n\n    private static CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestConte","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.executeQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":221,"endLine":249,"content":"    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":135,"endLine":137,"content":"    public String getQuery() {\n        return query;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":139,"endLine":141,"content":"    public void setQuery(String query) {\n        this.query = query;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getStagingConnectionInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":183,"endLine":185,"content":"    public ConnectionInfo getStagingConnectionInfo() {\n        return stagingConnectionInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java#L1-L43","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":1,"endLine":43,"content":"package com.gainsight.services.external.outofmemory.task;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author sthammishetty on 16/03/20\n */\n\n/**\n *  Test class for testing OutOfMemoryIssue.\n *\n *  Register this task with below memory options.\n *  \"memoryOptions\": {\n *       \"max_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       },\n *       \"min_heap\": {\n *         \"value\": 1,\n *         \"memoryUnit\": \"mb\"\n *       }\n *     }\n * */\npublic class OutOfMemoryExternalTask {\n    public static void main(String[] args) {\n        List<Employee> employees = new ArrayList<>();\n        for (int i = 0; i < 100000000; i++) {\n            employees.add(new Employee(\"a\", 1));\n        }\n\n    }\n\n    private static class Employee {\n        private String name;\n        private int age;\n\n        public Employee(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e7da77c0-a66f-42f7-b4c7-0a4bfdb494ec","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":1,"endLine":29,"content":"package com.gainsight.services.external.postgres.extraction.utils;\n\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.storage.db.postgres.PostgresSQLService;\nimport com.gainsight.services.utilities.datahighway.storage.db.postgres.impl.TransientPostgresSQLServiceImpl;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.postgresql.copy.CopyManager;\nimport org.postgresql.core.BaseConnection;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dff02e3c-b327-497c-8c10-b4c9e59d7ad3","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":179,"endLine":208,"content":"             recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n          ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.getFieldInfoList","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":485,"endLine":502,"content":"    private static com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo getFieldInfoList(com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fetchTaskFieldInfo) {\n        com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo fieldInfo = new com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo();\n        fieldInfo.setName(fetchTaskFieldInfo.getName());\n        fieldInfo.setJsonPath(fetchTaskFieldInfo.getJsonPath());\n        fieldInfo.setFieldAlias(fetchTaskFieldInfo.getFieldAlias());\n        fieldInfo.setDecimalPlaces(fetchTaskFieldInfo.getDecimalPlaces());\n        if (null != fetchTaskFieldInfo.getDateTimeProperties()) {\n            DateTimeProperties dateTimeProperties = new DateTimeProperties();\n            dateTimeProperties.setFormat(fetchTaskFieldInfo.getDateTimeProperties().getFormat());\n            dateTimeProperties.setTimeZoneId(\"UTC\");\n            fieldInfo.setDateTimeProperties(dateTimeProperties);\n\n        }\n        fieldInfo.setDataType(com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.getDataType(fetchTaskFieldInfo.getDataType().getDataType()));\n        fieldInfo.setFieldType(com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType.FIELD);\n        fieldInfo.setIsCurrencyField(fetchTaskFieldInfo.isIsCurrencyField());\n        return fieldInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91e69ca0-d8a0-428b-abc1-9ffb7f74563f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":22,"endLine":39,"content":"s.DatabaseConnectionPoolUtility;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.JsonFileContentType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldType;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnec","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"285ea155-e307-4d2a-95fd-b42e1353c226","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":66,"endLine":83,"content":"k(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1bb3502f-28a1-4416-8568-49987a6f0df8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java","startLine":1,"endLine":16,"content":"package com.gainsight.services.external.ga4.extraction.task.utils;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\n\nimport java.util.Map;\n\n/**\n * Created by Tarika on 12/12/2021.\n */\npublic final class GA4ExtractUtil {\n\n    public static Map<String, Object> getGA4Report(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        return new GA4ExtractHelper(jobId, taskId, metaData, systemProperties, workflowJobDetails).getGA4Report();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.isSkipFieldsForFetch","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":59,"endLine":61,"content":"    public boolean isSkipFieldsForFetch() {\n        return skipFieldsForFetch;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setProjections","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":123,"endLine":125,"content":"    public void setProjections(List<FieldInfo> projections) {\n        this.projections = projections;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":58,"endLine":288,"content":"public class MsSqlExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MsSqlExtractionTask.class);\n    private static final int SQL_EXTRACTION_QUERY_LIMIT = 10000;\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MsSql ConnectionDetails\");\n            }\n\n            if (connectorType == null || !UDMAccountType.MSSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MsSql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .build();\n\n            //Saving externalTask Result.\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n\n    private static CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestContext) {\n        CsvFile csvFile = null;\n        try {\n            if (Objects.isNull(sqlQueryInfo.getOrderByInfo())) {\n                OrderByInfo orderByInfo = new OrderByInfo();\n                orderByInfo.setOrderByFields(Collections.singletonList(sqlQueryInfo.getShowFields().get(0)));\n                sqlQueryInfo.setOrderByInfo(orderByInfo);\n            }\n\n            QueryBuilderResponse msSqlExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.MSSQL))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .withNullLastInOrderByClause(false).build();\n            String msSqlExtractQuery = msSqlExtract.getQuery();\n            LOGGER.info(\"MsSql Extract Query: {}\", msSqlExtractQuery);\n            String connectionUrl = \"jdbc:sqlserver://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \";databaseName=\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            if (dbConnectionDetail.isSslEnabled()) {\n                connectionUrl += \";encrypt=true\";\n            }\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnabled());\n            csvFile = executeQuery(connectionParamPojo, msSqlExtractQuery, sqlQueryInfo, externalTaskRequestContext);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n        return csvFile;\n    }\n\n    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" offset \" + offset + \" ROWS FETCH NEXT \" + SQL_EXTRACTION_QUERY_LIMIT + \" ROWS ONLY\";\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"306d7729-d866-48b0-b118-dc50392a730a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":163,"endLine":184,"content":"csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" offset \" + offset + \" ROWS FETCH NEXT \" + SQL_EXTRACTION_QUERY_LIMIT + \" ROWS ONLY\";\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                            ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#MySqlExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":66,"endLine":122,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MySql ConnectionInfo \");\n            }\n\n            if (connectorType == null || !UDMAccountType.MYSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MySql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d73ab872-3ade-4779-b079-22180cda2c9f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":118,"endLine":133,"content":"rayList();\n            String excludedTenants = DeploymentProperties.getDeploymentProperties().getValue(POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS);\n            if (StringUtils.isNotBlank(excludedTenants)) {\n                copyManagerExcludedTenants.addAll(Arrays.asList(excludedTenants.split(COMMA)));\n            }\n            boolean disableCopyManager = DeploymentProperties.getDeploymentProperties().getBooleanValue(DISABLE_POSTGRES_COPY_MANAGER, false);\n            if (disableCopyManager || copyManagerExcludedTenants.contains(tenantId)) {\n                LOGGER.warn(\"Skipping postgres copyManager execution for job:{} of tenant:{} since either it is restricted for this tenant or copy manager is disabled. Will proceed with legacy code though!!\", jobId, tenantId);\n                csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n            } else {\n                try {\n                    csvFile = executeQueryForPostgresCopyManager(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                } catch (Exception ex) {\n                    LOGGER.warn(msg(\"SQL Extraction for {} failed with copy manager functionality due to: {} \", connectorType, ex.getMessage()));\n                    LOGGER.warn(\"More details about the exception are: \", ex);\n                    if (!Thread.c","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9f6d606a-d74c-4cd3-a7df-6765043c3f73","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":62,"endLine":85,"content":"tDeploymentProperties().getIntegerValue(SQL_EXTRACTION_QUERY_LIMIT, 10000);\n        int offset = 0;\n        int recordsRetrieved = 0;\n        CSVPrinter csvPrinter = null;\n        PostgresSQLService dataBaseClient = null;\n        try {\n            LOGGER.info(\"Going to execute postgres query with legacy code\");\n            dataBaseClient = new TransientPostgresSQLServiceImpl(connectionParamPojo);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC));\n            createCsvHeaderAndUpdateFile(csvPrinter, csvFile);\n            boolean done = false;\n            do {\n                String queryToExecute = query.trim() + \" offset \" + offset + \" limit \" + limit;\n                LOGGER.info(\"Started executing query: {} with legacy code\", queryToExecute);\n                DBResultPojo executeResponse = dataBaseClient.execute(queryToExecute);\n                if (!executeResponse.isSucceded()) {\n                    LOGGER.error(\"Sql query execution failed with: \", executeResponse.getCause());\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", executeResponse.getCause().getMessage()));\n                }\n                JSONArray data = (JSONArray) executeResponse.getResult();\n                List<Object> recordList = new ArrayList<>();\n                for (int i = 0; i < data.length(); i++) {\n                    JSONObject jsonObject = data.getJSONObject(i);\n  ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1b8c5236-264e-4669-915a-56647172ada1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":65,"endLine":98,"content":"p<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        this.systemProperties = systemProperties;\n        this.metaData = metaData;\n        this.taskId = taskId;\n        this.jobId = jobId;\n        this.workflowJobDetails = workflowJobDetails;\n        init();\n        this.recordFormatter = new RecordFormatter();\n    }\n\n    private void init() {\n        String gaExtractDetailsJson = metaData.get(GA_EXTRACT_DETAILS_KEY);\n        this.extractDetails = DPUtils.convertJsonToObject(gaExtractDetailsJson, GAExtractDetails.class);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            gaReportGroup.setDimensions(nullSafeList(gaReportGroup.getDimensions()));\n        }\n\n        if (extractDetails.getStaticFields() == null) {\n            extractDetails.setStaticFields(Collections.emptyList());\n        }\n    }\n\n    public Map<String, Object> getGA4Report() {\n        logInfo(jobId, \"Starting GA4 extraction task\");\n\n        String tenantId = workflowJobDetails.getTenantId();\n        ParquetFile tmpParquetFile;\n        AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, workflowJobDetails.getExternalId(), taskId);\n\n        try {\n            tmpParquetFile = new ParquetFile(DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".parquet\"));\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurre","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.writeToParaquetG4","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":126,"endLine":148,"content":"    private void writeToParaquetG4(ParquetFile tmpParquetFile, Map<String, CustomerCurrencyDTO> currencyConversionMap) throws IOException {\n\n        CsvParquetWriter writer = new CsvParquetWriter(tmpParquetFile, recordFormatter.getHeaders(), this.systemProperties, currencyConversionMap, true);\n\n        GA4ConnectionInfo connectionInfo = buildGAConnectionInfo(extractDetails.getGaAccessDetails());\n        GA4Service service = GA4Service.initialize(connectionInfo);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            RunReportRequest reportRequest = buildReportRequestGA4(gaReportGroup);\n            long offset = 0;\n            int rowCount;\n            do {\n                reportRequest.setLimit(GA_REPORT_PAGE_SIZE);\n                reportRequest.setOffset(offset);\n                BatchRunReportsResponse response = service.getReportForGA4(extractDetails.getViewId(), Lists.newArrayList(reportRequest));\n                RunReportResponse report = validateGA4Response(response);\n                writeGA4ReportToParaquetFile(report, gaReportGroup, writer);\n                rowCount = report.getRows() != null ? report.getRows().size() : 0;\n                offset = offset + GA_REPORT_PAGE_SIZE;\n            } while (rowCount == GA_REPORT_PAGE_SIZE && !Thread.currentThread().isInterrupted());\n        }\n        writer.close();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.HubspotExtractTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":77,"endLine":78,"content":"    private HubspotExtractTask() {\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":77,"endLine":79,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.getPackagesEnabledForObfuscation","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":61,"endLine":63,"content":"    public List<String> getPackagesEnabledForObfuscation() {\n        return getDHOBFConfigProperties().getGsLogOBFPackagesEnabled();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java#GA4ExtractUtil","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractUtil.java","startLine":10,"endLine":16,"content":"public final class GA4ExtractUtil {\n\n    public static Map<String, Object> getGA4Report(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        return new GA4ExtractHelper(jobId, taskId, metaData, systemProperties, workflowJobDetails).getGA4Report();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a2b02cc2-72ea-4307-a480-282bf5907472","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":486,"endLine":507,"content":"lder.constructs.fields.FieldInfo fieldInfo = new com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo();\n        fieldInfo.setName(fetchTaskFieldInfo.getName());\n        fieldInfo.setJsonPath(fetchTaskFieldInfo.getJsonPath());\n        fieldInfo.setFieldAlias(fetchTaskFieldInfo.getFieldAlias());\n        fieldInfo.setDecimalPlaces(fetchTaskFieldInfo.getDecimalPlaces());\n        if (null != fetchTaskFieldInfo.getDateTimeProperties()) {\n            DateTimeProperties dateTimeProperties = new DateTimeProperties();\n            dateTimeProperties.setFormat(fetchTaskFieldInfo.getDateTimeProperties().getFormat());\n            dateTimeProperties.setTimeZoneId(\"UTC\");\n            fieldInfo.setDateTimeProperties(dateTimeProperties);\n\n        }\n        fieldInfo.setDataType(com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.getDataType(fetchTaskFieldInfo.getDataType().getDataType()));\n        fieldInfo.setFieldType(com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldType.FIELD);\n        fieldInfo.setIsCurrencyField(fetchTaskFieldInfo.isIsCurrencyField());\n        return fieldInfo;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            List<com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo> ipaasFetchDetails) {\n        Set<String> sourceFieldNames = ipaasFetchDetails\n ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4bc4de49-e2ea-4c09-a9d2-ddd8bde1ab62","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":181,"endLine":208,"content":"Fields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n        ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b584b8e6-2bee-4eab-95ba-d5641742aec9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":139,"endLine":161,"content":"Pojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnabled());\n            csvFile = executeQuery(connectionParamPojo, mySqlExtractQuery, sqlQueryInfo, externalTaskRequestContext);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n        return csvFile;\n    }\n\n    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0c26f09a-3dcc-4910-8c84-2d5c819c110a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":30,"endLine":50,"content":"lTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetFile parquetFile;\n\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            Map<String, Object> workFlowSystemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            Map<String, Object> extractFile = GA4ExtractUtil.getGA4Report(jobId, taskId, metaData, workFlowSystemProperties, workflowJobDetails);\n            parquetFile = (ParquetFile) extractFile.get(\"parquetFile\");\n            TaskResult taskResult = new TaskResult((List<FieldInfo>) extractFile.get(\"headers\"), null);\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n      ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#loading.shortCircuitClassLoad","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":159,"endLine":165,"content":"    public boolean shortCircuitClassLoad() {\n        try {\n            return DeploymentProperties.isPropertiesServiceInitialized();\n        } catch (Throwable throwable) {\n            return false;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java#PlaceholderTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/placeholder-task/src/main/java/com/gainsight/service/external/placeholder/task/PlaceholderTask.java","startLine":28,"endLine":41,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String taskId = externalTaskRequestContext.getTaskId();\n\n        String primaryJobId = externalTaskRequestContext.getPrimaryJobId();\n        DPWorkflowTaskDetails taskDetailsFromDB = DbApiUtil.getTaskDetailsWithPrimaryJobFromDB(primaryJobId, taskId);\n        if (!taskDetailsFromDB.getTaskStatus().equals(SUCCESS.name())) {\n            String message = msg(\"Task with taskId {} in job with primaryJobId {} is not in SUCCESS state, current state of this task is {}, can not continue with this execution.\", taskId, primaryJobId, taskDetailsFromDB.getTaskStatus());\n            LOGGER.error(message);\n            throw new DPSystemException(message);\n        }\n\n        TaskResult taskResult = new TaskResult(ExternalTaskUtil.getS3OutputFilePath(externalTaskRequestContext, S3OutputDirType.INTERNAL), taskDetailsFromDB.getRecordCount(), null, null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult));\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.writeGA4ReportToParaquetFile","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":220,"endLine":235,"content":"    private void writeGA4ReportToParaquetFile(RunReportResponse report, GAReportGroup gaReportGroup, CsvParquetWriter writer) throws IOException {\n        boolean recordsPresent = false;\n        if (report != null) {\n            List<Row> rows = report.getRows();\n            if (CollectionUtils.isNotEmpty(rows)) {\n                recordsPresent = true;\n                for (Row row : rows) {\n                    assertState(CollectionUtils.isNotEmpty(row.getMetricValues()), GENERIC_SYSTEM_ERROR, \"Unexpected error, found metrics empty while reading GA4 report.\");\n                    writer.writeForGA(recordFormatter.formatRecordGA4(row.getDimensionValues(), row.getMetricValues(), gaReportGroup));\n                }\n            }\n        }\n        if (!recordsPresent) {\n            LOGGER.warn(msg(\"No records returned from GA for group: {}. Skipping writing into parquet file.\", gaReportGroup));\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#L1-L44","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":1,"endLine":44,"content":"package com.gainsight.services.external.ga4.extraction.task.pojo;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\n\n/**\n * Created by ptarika on 16/12/21.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class GA4ConnectionInfo implements Serializable {\n\n    private static final long serialVersionUID = -7057129865819056316L;\n\n    private String refreshToken;\n    private String clientId;\n    private String clientSecret;\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#L1-L276","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":1,"endLine":276,"content":"package com.gainsight.services.external.px.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.parquet.writer.TextRecordParquetWriterBuilder;\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.EpochUnit;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXExtractInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXExtractionDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXResponse;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.TenantDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.querybuilders.expressions.helpers.FunctionHelper;\nimport com.gainsight.services.dataprocessing.commons.system.DPFile;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.commons.utils.DateTimeUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.px.PxUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Sets;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.parquet.hadoop.ParquetFileWriter;\nimport org.apache.parquet.hadoop.ParquetWriter;\nimport org.apache.parquet.hadoop.metadata.CompressionCodecName;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.ExternalTaskConstants.DEFAULT_DATE_FORMAT_KEY;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.PX_ACCESS_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.PX_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getProperties;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.getTempFilePath;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils.msg;\nimport static java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n\n/**\n * @author sthammishetty on 17/11/20\n */\npublic class PxExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PxExtractionTask.class);\n    private static final String DEFAULT_PAGE_SIZE = \"1000\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetWriter<List<String>> parquetWriter = null;\n        DPFile errorFile;\n        CSVPrinter errorWriter = null;\n        ParquetFile parquetFile = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            PXExtractionDetails pxExtractionDetails = DHUtils.convertJsonToObject(metaData.get(PX_EXTRACT_DETAILS_KEY), PXExtractionDetails.class);\n            PXAccessDetails accessDetails = DHUtils.convertJsonToObject(metaData.get(PX_ACCESS_DETAILS_KEY), PXAccessDetails.class);\n\n            String connectorId = accessDetails.getConnectorId();\n            Pair<String, String> aptrinsicKeyURLPair = PxUtil.getAptrinsicKey(tenantId, ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), connectorId);\n            String apiKey = aptrinsicKeyURLPair.getKey();\n            String pxURL = aptrinsicKeyURLPair.getValue();\n            PxUtil.convertDateFilterToEpochInFilterRule(pxExtractionDetails.getWhereClause(), ExternalTaskUtil.getExternalTaskRequestContext().getWorkflowSystemProperties(), getDeploymentProperties().getValue(DEFAULT_DATE_FORMAT_KEY));\n            TenantDetailsDTO tenantDetailsDTO = externalTaskRequestContext.getTenantDetailsDTO();\n            parquetFile = new ParquetFile(getTempFilePath(tenantId, jobId, externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".parquet\"));\n            errorFile = getErrorFile(taskId + \"_error.csv\");\n            List<String> showFieldsList = getFieldNames(pxExtractionDetails.getShowFields());\n            errorWriter = getErrorWriter(showFieldsList, errorFile);\n            parquetWriter = getParquetWriter(showFieldsList, pxExtractionDetails.getShowFields(), parquetFile);\n\n            String pageSize = String.valueOf(accessDetails.getPageSize() != 0 ? accessDetails.getPageSize() : StringUtils.defaultIfBlank(getProperties().getProperty(\"px.page.size\"), DEFAULT_PAGE_SIZE));\n            PXExtractInfo pxExtractInfo = new PXExtractInfo();\n            pxExtractInfo.setAccessDetails(accessDetails);\n            pxExtractInfo.setPxExtractionDetails(pxExtractionDetails);\n\n            boolean isFinalResult = false;\n            String nextPageToken = null;\n            LOGGER.info(\"Fetching events using POST call to endpoint: {} with body {} \", pxURL, DHUtils.convertObjectToJson(pxExtractionDetails));\n            DateTimeFormatter destDateTimeFormatter = getDestinationDateTimeFormatter(tenantId);\n            while (!isFinalResult) {\n                PXResponse pxResponse = PxUtil.fetchEvents(pxExtractInfo, jobId, apiKey, pxURL, nextPageToken, pageSize, false);\n                nextPageToken = null;\n                isFinalResult = true;\n                if (!pxResponse.isLastPage()) {\n                    nextPageToken = pxResponse.getNextPageToken();\n                    if (StringUtils.isNotBlank(nextPageToken)) {\n                        isFinalResult = false;\n                    }\n                    jobId = pxResponse.getJobId();\n                }\n                List<Map<String, Object>> rows = pxResponse.getRows();\n                for (Map<String, Object> row : rows) {\n                    boolean isParsingSuccess = true;\n                    List<String> recordValues = new ArrayList<>(pxExtractionDetails.getShowFields().size());\n                    String errorMsg = null;\n                    for (FieldInfo fieldInfo : pxExtractionDetails.getShowFields()) {\n                        String convertedValue = null;\n                        try {\n                            DataType dataType = FunctionHelper.getDerivedDataType(fieldInfo);\n                            String attributeName = StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName());\n                            Object obj = row.get(attributeName);\n                            if (obj != null) {\n                                if (obj instanceof String) {\n                                    convertedValue = (String) row.get(attributeName);\n                                } else {\n                                    if (obj instanceof Double && isTimeStampField(dataType)) {\n                                        convertedValue = String.valueOf(((Double) obj).longValue());\n                                    } else {\n                                        convertedValue = String.valueOf(obj);\n                                    }\n                                }\n                                if (StringUtils.isNotBlank(convertedValue)) {\n                                    if (isTimeStampField(dataType)) {\n                                        convertedValue = DateTimeUtils.convertEpochToDateTime(convertedValue, EpochUnit.MILLIS, destDateTimeFormatter, ZoneId.of(tenantDetailsDTO.getTimeZoneId()));\n                                    } else if (DataType.NUMBER.equals(dataType)) {\n                                        Locale locale = fieldInfo.getFieldLocale() == null ? Locale.US : fieldInfo.getFieldLocale().getLocale();\n                                        NumberFormat nf = NumberFormat.getInstance(locale);\n                                        try {\n                                            convertedValue = DHUtils.valueOf(nf.parse(convertedValue));\n                                        } catch (ParseException e) {\n                                            LOGGER.info(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale);\n                                            throw new DPSystemException(msg(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale), e);\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (Exception e) {\n                            isParsingSuccess = false;\n                            if (errorMsg == null) {\n                                errorMsg = msg(\"Error while parsing row : {}. {} \", row, e, e.getCause());\n                            }\n                        }\n                        recordValues.add(convertedValue);\n\n                    }\n                    if (isParsingSuccess) {\n                        parquetWriter.write(recordValues);\n                        parquetFile.addNumRecords(1);\n                    } else {\n                        if (Objects.nonNull(errorFile) && Objects.nonNull(errorWriter)) {\n                            recordValues.add(errorMsg);\n                            errorWriter.printRecord(recordValues);\n                            errorFile.setNumRecords(errorFile.getNumRecords() + 1);\n                        }\n                    }\n                }\n            }\n            LOGGER.info(\"Added {} records to parquetFile\", parquetFile.getNumRecords());\n            if (errorFile.getNumRecords() > 0) {\n                LOGGER.warn(\"Found {}  error records\", errorFile.getNumRecords());\n                LOGGER.info(\"Added {} records to errorFile\", errorFile.getNumRecords());\n            }\n            TaskResult taskResult = new TaskResult(pxExtractionDetails.getShowFields(), null, errorFile.getNumRecords());\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            if (Objects.nonNull(errorFile) && errorFile.getNumRecords() > 0) {\n                externalExtractionTaskResultBuilder.setWriteToErrorFile(true);\n                externalExtractionTaskResultBuilder.setErrorFilePath(errorFile.getAbsolutePath());\n            }\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing PX-Extraction task  {} - {}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            if (Objects.nonNull(parquetWriter)) {\n                try {\n                    parquetWriter.close();\n                } catch (Exception ex) {\n                    LOGGER.error(\"Error in closing parquet file writer\");\n                    throw new DPSystemException(\"Failed to close parquet writer\", ex);\n                }\n            }\n\n            if (Objects.nonNull(errorWriter)) {\n                try {\n                    errorWriter.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"Error in closing csv writer\");\n                    throw new DPSystemException(\"Failed to close csv writer\", e);\n                }\n            }\n        }\n\n    }\n\n    private static DateTimeFormatter getDestinationDateTimeFormatter(String tenantId) {\n        try {\n            String pxOutputDatetimeFormat = getProperties().getProperty(\"px.output.datetime.format\", \"yyyy-MM-dd'T'HH:mm:ss['.'SSS][XXXXX]\");\n            String pxCustomDatetimeFormatterEnabledTenantsString = getProperties().getProperty(\"px.custom.datetime.format.enabled.tenants\", StringUtils.EMPTY);\n            Set<String> pxCustomDatetimeFormatterEnabledTenants = StringUtils.isNotBlank(pxCustomDatetimeFormatterEnabledTenantsString) ?\n                    Sets.newHashSet(pxCustomDatetimeFormatterEnabledTenantsString.split(\"\\\\s*,\\\\s*\")) : Sets.newHashSet();\n\n            if (BooleanUtils.toBoolean(getProperties().getProperty(\"px.output.custom.datetime.format.enabled\", \"false\")) || pxCustomDatetimeFormatterEnabledTenants.contains(tenantId)) {\n                LOGGER.info(\"Using custom PX output datetime format: {} for tenant: {}\", pxOutputDatetimeFormat, tenantId);\n                return DateTimeFormatter.ofPattern(pxOutputDatetimeFormat);\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in getting custom datetime format, using default ISO_OFFSET_DATE_TIME format. Reason: {}.\", ex.getMessage());\n        }\n\n        return ISO_OFFSET_DATE_TIME;\n    }\n\n    private static DPFile getErrorFile(String errorFilePath) {\n        DPFile errorFile = new DPFile(new File(errorFilePath).getAbsolutePath()) {\n        };\n        return errorFile;\n    }\n\n    private static CSVPrinter getErrorWriter(List<String> headers, DPFile errorFile) {\n        CSVPrinter csvPrinter = null;\n        try {\n            headers.add(\"Error Message\");\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            String[] headersArr = Iterables.toArray(headers, String.class);\n            CSVFormat format = csvFormat.withHeader(headersArr).withSkipHeaderRecord(false);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(errorFile)), format);\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating csvWriter for error file {}\", e.getMessage());\n        }\n        return csvPrinter;\n    }\n\n    private static ParquetWriter<List<String>> getParquetWriter(List<String> headers, List<FieldInfo> showFields, ParquetFile parquetFile) {\n        parquetFile.setHeaders(headers);\n        try {\n            return new TextRecordParquetWriterBuilder(new Path(parquetFile.toURI()), showFields)\n                    .withRowGroupSize(10 * 1000 * 1000)\n                    .withWriteMode(ParquetFileWriter.Mode.OVERWRITE)\n                    .withCompressionCodec(CompressionCodecName.SNAPPY).build();\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in creating parquet file - probably error during writing schema.\");\n            throw new DPSystemException(\"Failed to create parquet file\", ex);\n        }\n\n    }\n\n    private static List<String> getFieldNames(List<FieldInfo> showFields) {\n        return showFields.stream()\n                .map(fieldInfo -> StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName()))\n                .collect(Collectors.toList());\n    }\n\n    private static boolean isTimeStampField(DataType dataType) {\n        return dataType != null && dataType.equals(DataType.TIMESTAMP) || dataType.equals(DataType.DATE) || dataType.equals(DataType.DATETIME);\n    }\n}\n\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getWhereClause","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":127,"endLine":129,"content":"    public FilterRule getWhereClause() {\n        return whereClause;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7192a60d-3f24-4dd4-8fe9-7a2528b06218","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":41,"endLine":68,"content":"tatic com.gainsight.services.dataprocessing.commons.exception.ValidationCode.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.assertState;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPCollectionUtils.nullSafeList;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.valueOf;\n\n/**\n * Created by ptarika on 16/12/12.\n */\npublic class GA4ExtractHelper {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(com.gainsight.services.external.ga4.extraction.task.utils.GA4ExtractHelper.class);\n    private static final long GA_REPORT_PAGE_SIZE = 10000;\n\n    private final Map<String, Object> systemProperties;\n    private final RecordFormatter recordFormatter;\n    private final Map<String, String> metaData;\n    private GAExtractDetails extractDetails;\n    private final String jobId;\n    private final String taskId;\n    private DPWorkflowJobDetailsDTO workflowJobDetails;\n\n    public GA4ExtractHelper(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        this.systemProperties = systemProperties;\n        this.metaData = metaData;\n    ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.extractAccessDetails","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":131,"endLine":141,"content":"    private static HubspotAccessDetails extractAccessDetails(JsonObject jsonObject) {\n        JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(jsonObject.get(DATA).getAsJsonObject().get(VALUE).getAsString())).getAsJsonObject();\n        HubspotAccessDetails accessDetails = null;\n        if (!decryptedObject.isJsonNull()) {\n            accessDetails = new HubspotAccessDetails();\n            accessDetails.setClientId(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_ID).getAsString());\n            accessDetails.setClientSecret(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_SECRET).getAsString());\n            accessDetails.setRefreshToken(decryptedObject.get(PROPERTIES).getAsJsonObject().get(REFRESH_TOKEN).getAsString());\n        }\n        return accessDetails;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cd9bf9d2-9aec-48ec-b600-9ec0478ea28d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":58,"endLine":83,"content":"      .setClientSecrets(clientId, clientSecret)\n                    .setJsonFactory(jsonFactory)\n                    .setTransport(httpTransport)\n                    .build()\n                    .setAccessToken(tokenResponse.getAccessToken())\n                    .setRefreshToken(refreshToken);\n\n          analyticsData = new AnalyticsData.Builder(httpTransport, jsonFactory, configureTimeouts(credential))\n                 .build();\n        } catch (Exception e) {\n            LOGGER.error(\"Not able to initialize the GA4 client :{}\",e.getMessage(),e);\n            throw new DPSystemException(\"Unable to initialize GA4 client.\", e);\n        }\n    }\n\n    private HttpRequestInitializer configureTimeouts(final HttpRequestInitializer requestInitializer) {\n        return new HttpRequestInitializer() {\n            @Override\n            public void initialize(HttpRequest httpRequest) throws IOException {\n                requestInitializer.initialize(httpRequest);\n                httpRequest.setConnectTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_CONNECT_TIMEOUT_MILLIS, 120000));\n                httpRequest.setReadTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_READ_TIMEOUT_MILLIS, 120000));\n                httpRequest.setNumberOfRetries(getDeploymentProperties().getIntegerValue(GA_EXTRACT_NUM_RETRIES, 5));\n\n                httpRequest.setIOExceptionHandler((request, supportsRetry) -> {\n                    LOGGER.error(\"IOException while calling: \" + request.getU","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"08ffb859-8ddc-4eb5-a6ba-09a5ded5988d","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":257,"endLine":280,"content":"headers.size();\n            int aliasIndex = headers.size();\n            for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n                int fieldInfoIndex = 0;\n                for (FieldInfo dim : gaReportGroup.getDimensions()) {\n                    if (aliasIndexMapping.containsKey(dim.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, aliasIndexMapping.get(dim.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, recordIndex++));\n                        aliasIndexMapping.put(dim.getFieldAlias(), aliasIndex++);\n                        headers.add(dim);\n                    }\n                    fieldInfoIndex++;\n                }\n                for (FieldInfo met : gaReportGroup.getMetrics()) {\n                    if (aliasIndexMapping.containsKey(met.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, aliasIndexMapping.get(met.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, recordIndex++));\n                        aliasIndexMapping.put(met.getFieldAlias(), aliasIndex++);\n                        headers.add(met);\n                    }\n                    fieldInfoIndex++;\n               ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.readData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":203,"endLine":245,"content":"    private static Deque<File> readData(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, HubspotAccessDetails accessDetails, HubspotExtractDetails fetchTaskDetails) {\n        InputStream stream = null;\n        Deque<File> fileStack = new ArrayDeque<>();\n        try {\n            boolean shouldContinue;\n            String hasMoreKeyword = GSHubSpotEntityEnum.getHasMoreKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String offsetKeyword = GSHubSpotEntityEnum.getRetrievOffsetKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String pluralName = GSHubSpotEntityEnum.getPluralName(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n            long offset = Long.MIN_VALUE;\n            String nextPageUrl = null;\n            int counter = 0;\n            Optional<DPWorkflowTaskDetailsDTO> taskDetailsDTO = workflowJobDetails.getWorkflowDetails().getTasks().stream().\n                    filter(task -> task.getMetaData() != null && task.getMetaData().get(\"taskName\").toString().equalsIgnoreCase(HUBSPOT_API_EXTRACT)).findFirst();\n            String apiVersion = HUBSPOT_API_VERSION_LEGACY;\n            if (!ObjectUtils.isEmpty(taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION))) {\n                apiVersion = taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION).toString();\n            }\n            do {\n                LOGGER.info(\"Paginated api running for offset : {}, pagination api counter: {}, nextpageurl :{} , apiVersion : {} \", offset, counter++, nextPageUrl, apiVersion);\n                if (apiVersion.equalsIgnoreCase(HUBSPOT_API_VERSION_LEGACY)) {\n                    stream = getDataFromHubspot(accessDetails, offset, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    offset = readDataAndStoreInFile(stream, hasMoreKeyword, offsetKeyword, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                } else {// New api Version V3\n                    stream = getDataFromHubspotLatestApi(accessDetails, nextPageUrl, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    nextPageUrl = readDataAndStoreInFileLatestApi(stream, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                }\n                shouldContinue = offset != Long.MIN_VALUE || (StringUtils.isNotEmpty(nextPageUrl));\n            } while (shouldContinue && !Thread.currentThread().isInterrupted());\n        } catch (IOException ioEx) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", ioEx);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", e);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n        return fileStack;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ce0bcb5e-7803-48c5-a32e-5889f2b035f9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":70,"endLine":99,"content":"S = 209715200;\n    private static final String CONNECTOR_TYPE = \"hubspot\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String CARRIAGE_RETURN = \"\\n\";\n\n\n    private HubspotExtractTask() {\n    }\n\n    /**\n     * External task for extracting data from Hubspot.\n     */\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        LOGGER.debug(\"Request to hubspot fetch started !!\");\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        List<File> uncompressedInputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n            HubspotExtractDetails fetchTaskDetails = convertJsonToObject(metaData.get(HUBSPOT_EXTRACT_DETAILS_KEY), HubspotExtractDetails.class);\n            extractDataFromHubspot(externalTaskRequestContext, workflowJ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getDefaultSleepTimeOnFail","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":87,"endLine":89,"content":"    public int getDefaultSleepTimeOnFail() {\n        return defaultSleepTimeOnFail;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"a83a0729-8456-4a7c-8e80-4ad8e3eeceaa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":316,"endLine":338,"content":"    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(fetchTaskDetails.isEnableDownloadSourceData())\n                    //.setPushExtractedDataToS3(true)\n                    .setExcludedStrings(ipaasExcludeString)\n                    .setIgnoreInvalidData(fetchTaskDetails.isIgnoreInvalidData())\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n            LOGGER.info(\"Request to ipaas fetch completed in {} secs for tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasExtractiontask external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (CollectionUtils.isNotEmpty(fileList)) {\n                for (File file : fileList) {\n                    FileUtils.deleteQuietly(file);\n                }\n            }\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n             ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"98ed9cc7-ed58-4e23-9a0a-0e55d0073078","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":69,"endLine":92,"content":"d = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas staging load started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        List<File> inputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n\n\n            // Get source S3 path on which free form query needs to be executed and convert it to apache drill path\n            List<String> parents = convertJsonToObject(metaData.get(\"parents\"), new TypeReference<List<String>>() {\n            });\n            Precondition.isNotEmpty(parents, ValidationCode.GENERIC_SYSTEM_ERROR, \"Parents in metadata is empty!\");\n\n            IpaasStagingLoadDetails ipaasStagingLoadDetails =\n                    convertJsonToObject(metaData.get(IPAAS_STAGING_LOAD_DETAILS_KEY), IpaasStagingLoadDetails.class);\n\n            //fetch dp staging details\n            BasicDataSource dataSource = getIpaasStagingConnectionDataSource(workflowJobDetails, tenantId, jobId,\n                    taskId, ipaasStagingLoadDetails, externalTaskRequestContext);\n            IpaasStagingDetails ipaasStagingDetails = null;\n            if (ipaasStagingLoadDetails.getStagingConnectionInfo() != null) {\n                ipaasStagingDetails = s","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java#IpaasExtractionValidationCode","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":8,"endLine":44,"content":"public enum IpaasExtractionValidationCode implements ErrorCode {\n    FIELD_NOT_PRESENT_IN_SYSTEM(100001)\n    ;\n\n    private final int code;\n    private String className = getClass().getSimpleName();\n\n    IpaasExtractionValidationCode(int code) {\n        this.code = code;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getErrorName() {\n        return className + \"__\" + this.name();\n    }\n\n    /**\n     * Refers to User Defined Text\n     */\n    public String getUserText(Object... args) {\n        String key = getErrorName();\n        MessageProperties messageProperties = MessageProperties.getMessageProperties();\n        if(messageProperties == null){\n            return key;\n        }\n        String message = messageProperties.getValue(key);\n        if (args == null || args.length == 0) {\n            message = DPUtils.msg(message, StringUtils.EMPTY);\n        } else {\n            message = DPUtils.msg(message, args);\n        }\n        return message;\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java#GA4ServiceImpl.initialize","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":43,"endLine":71,"content":"    private void initialize() {\n        try {\n            JsonFactory jsonFactory = new JacksonFactory();\n            HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();\n\n            String refreshToken = connectionInfo.getRefreshToken();\n            String clientId = connectionInfo.getClientId();\n            String clientSecret = connectionInfo.getClientSecret();\n\n            GoogleRefreshTokenRequest googleRefreshTokenRequest =\n                    new GoogleRefreshTokenRequest(httpTransport, jsonFactory, refreshToken, clientId, clientSecret);\n            GoogleTokenResponse tokenResponse = googleRefreshTokenRequest.execute();\n\n            GoogleCredential credential = new GoogleCredential\n                    .Builder()\n                    .setClientSecrets(clientId, clientSecret)\n                    .setJsonFactory(jsonFactory)\n                    .setTransport(httpTransport)\n                    .build()\n                    .setAccessToken(tokenResponse.getAccessToken())\n                    .setRefreshToken(refreshToken);\n\n          analyticsData = new AnalyticsData.Builder(httpTransport, jsonFactory, configureTimeouts(credential))\n                 .build();\n        } catch (Exception e) {\n            LOGGER.error(\"Not able to initialize the GA4 client :{}\",e.getMessage(),e);\n            throw new DPSystemException(\"Unable to initialize GA4 client.\", e);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0bdb80a2-3ba3-4a21-8b1f-bb9951a3aa3a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":181,"endLine":198,"content":"vate static IpaasStagingDetails stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                BasicDataSource dataSource) throws Exception {\n\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                ipaasStagingLoadDetails.getTaskId(), ipaasStagingLoadDetails.getJobId());\n\n        IpaasStagingDao ipaasStagingDao = new IpaasStagingDaoImpl(dataSource);\n        if (ipaasStagingDetails == null) {\n            LOGGER.info(\"Preparing ipaas staging postgres details as No staging details found for tId- {}, jobId- {}, taskId- {}\",\n                    tenantId, jobId, taskId);\n            ipaasStagingDetails = prepareIpaasStagingDetailsFromExtractionDetails(\n                    workflowJobDetails.getTenantId(), ipaasStagingLoadDetails.getConnectionId(),\n                    ipaasStagingLoadDetails.getJobId(), ipaasStagingLoadDetails);\n            ipaasStagingDetailsDao.insert(ipaasStagingDetails);\n            LOGGER.info(\"Inserting staging details metadata  for tId- {}, jobId","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.isObfuscationMetricLogEnabled","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":119,"endLine":121,"content":"    public boolean isObfuscationMetricLogEnabled() {\n        return getDHOBFConfigProperties().isGsLogOBFEnableFilterMetricLog();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#RecordMeta.RecordMeta","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":322,"endLine":340,"content":"        public RecordMeta(FieldInfo fieldInfo, int recordPosition) {\n            this.fieldInfo = fieldInfo;\n            this.recordPosition = recordPosition;\n            init();\n        }\n\n        private void init() {\n            DateTimeProperties dateTimeProperties = fieldInfo.getDateTimeProperties();\n            String format;\n            if (dateTimeProperties != null && (format = dateTimeProperties.getFormat()) != null) {\n                this.dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            }\n        }\n\n\n        public int getRecordPosition() {\n            return recordPosition;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e434ff9c-d4d2-4048-9f0c-a4167e687a59","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":227,"endLine":264,"content":"astModifieldFieldValue = lastModifieldFieldValue;\n    }\n\n    public boolean isEnableDownloadSourceData() {\n        return enableDownloadSourceData;\n    }\n\n    public void setEnableDownloadSourceData(boolean enableDownloadSourceData) {\n        this.enableDownloadSourceData = enableDownloadSourceData;\n    }\n\n    public boolean isIgnoreInvalidData() {\n        return ignoreInvalidData;\n    }\n\n    public void setIgnoreInvalidData(boolean ignoreInvalidData) {\n        this.ignoreInvalidData = ignoreInvalidData;\n    }\n\n    @Override\n    public String toString() {\n        return \"IpaasExtractionDetails{\" +\n                \"connectionId='\" + connectionId + '\\'' +\n                \", externalEntityName='\" + externalEntityName + '\\'' +\n                \", projections=\" + projections +\n                \", whereClause=\" + whereClause +\n                \", orderByInfo=\" + orderByInfo +\n                \", query='\" + query + '\\'' +\n                \", connectorType='\" + connectorType + '\\'' +\n                \", ucId='\" + ucId + '\\'' +\n                \", ipaasStagingDetailsId='\" + ipaasStagingDetailsId + '\\'' +\n                \", jobId='\" + jobId + '\\'' +\n                \", taskId='\" + taskId + '\\'' +\n                \", stagingConnectionInfo=\" + stagingConnectionInfo +\n                \", lastModifieldFieldPath='\" + lastModifieldFieldPath + '\\'' +\n                \", resolvePicklist=\" + resolvePicklist +\n                \", upsertkey='\" + upsertkey + '\\'' +\n                \", lastModifieldFieldValue=\"","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1287babb-4705-4ec3-b331-2be7197a1295","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":1,"endLine":30,"content":"package com.gainsight.services.external.ga4.extraction.task.service;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpRequest;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.analyticsdata.v1beta.AnalyticsData;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsRequest;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsResponse;\nimport com.google.api.services.analyticsdata.v1beta.model.RunReportRequest;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\n\n/**\n * Created by ptarika on 12/12/2021.\n */\npublic class GA4ServiceImpl i","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.init","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":75,"endLine":86,"content":"    private void init() {\n        String gaExtractDetailsJson = metaData.get(GA_EXTRACT_DETAILS_KEY);\n        this.extractDetails = DPUtils.convertJsonToObject(gaExtractDetailsJson, GAExtractDetails.class);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            gaReportGroup.setDimensions(nullSafeList(gaReportGroup.getDimensions()));\n        }\n\n        if (extractDetails.getStaticFields() == null) {\n            extractDetails.setStaticFields(Collections.emptyList());\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"91beb57b-ab8e-4384-9a8d-234589a80caa","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":252,"endLine":278,"content":"().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n        ipaasStagingDetails.setTenantId(tenantId);\n        ipaasStagingDetails.setConnectorJobId(jobId);\n        ipaasStagingDetails.setConnectionId(connectionId);\n        ipaasStagingDetails.setTaskId(ipaasStagingLoadDetails.getTaskId());\n        ipaasStagingDetails.setTableName(String.format(\"ips_%s_%s_%s\", tenantId.substring(0, tenantId.indexOf(\"-\")),\n                jobId.replaceAll(\"-\", \"\"),\n                ipaasStagingLoadDetails.getTaskId().replaceAll(\"-\", \"\")).toLowerCase());\n        ipaasStagingDetails.setInSync(true);\n        return ipaasStagingDetails;\n    }\n\n    private static List<IpaasStagingFieldInfo> updateFieldInfosInStagingDetails(IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldIn","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#is.executeQuery","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":235,"endLine":263,"content":"    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"09433c3a-3da5-40f9-b66d-7c447c32e7b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":46,"endLine":74,"content":"g.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.HUBSPOT_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * user : Aditya Agrawal\n * date : 03/28/22\n **/\npublic class HubspotExtractTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotExtractTask.class);\n\n    private static final String PROPERTIES = \"properties\";\n    private static final String CLIENT_ID = \"clientId\";\n    private static final String CLIENT_SECRET = \"clientSecret\";\n    private static final String REFRESH_TOKEN = \"refreshToken\";\n    private static final String JSON_EXTENSION = \".json\";\n    private static final String HUBSPOT_API_VERSION = \"hubspotApiVersion\";\n    private static final String HUBSPOT_API_VERSION_LEGACY = \"legacy\";\n    private static final String HUBSPOT_API_EXTRACT = \"hubspotExtract\";\n\n\n    private static final int FILE_SIZE_THRESHOLD_IN_BYTES = 209715200;\n    private static final String CONNECTOR_TYPE = \"hubspot\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final Stri","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#L1-L166","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":1,"endLine":166,"content":"package com.gainsight.services.external.commons;\n\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.AbstractObfuscationTurboFilter;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.DHLogObfuscationUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.logback.pojo.DHOBFConfigProperties;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.ExpiryCache;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHFeatureUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.Precondition;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.MDC;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.regex.Pattern;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.*;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WebConstants.FEATURE_CONFIG_EVALUATE_PATH;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.FEATURE_CONFIG_URL;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.DUMMY_STRING;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.ObfuscationConstants.GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.ObfuscationConstants.GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.constants.DHConstants.TENANT_ID_KEY;\nimport static com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\n\n/**\n * @author sabhishekh\n * Created On: 14/11/24\n * <p>\n * This class is exact replica of DPLogbackTurboFilter and it should be like that only.\n * Any changes done to original file should be maintained here too.\n * This was needed because separate thread pertaining to each individual dynamic jar was not taking original turbo filter file via external dependency.\n * We had to make the turbo filter class available in same repo where each dynamic tasks are being written.\n */\npublic class DPDynamicTaskTurboFilter extends AbstractObfuscationTurboFilter {\n\n    private static final Logger DPDTF = LoggerFactory.getLogger(\"DPDTF\");\n\n    // List of packages disabled for obfuscation(Corresponding to the individual repositories)\n    private static final List<String> packagesDisabledForObfuscation = Lists.newArrayList();\n    private static ExpiryCache<String, DHOBFConfigProperties> DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = null;\n\n    static {\n        packagesDisabledForObfuscation.add(\"DPDTF\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.external.commons.DPDynamicTaskTurboFilter\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.properties\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.cryptography\");\n    }\n\n    /**\n     * Retrieves the list of packages enabled for obfuscation.\n     *\n     * @return List of package names enabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesEnabledForObfuscation() {\n        return getDHOBFConfigProperties().getGsLogOBFPackagesEnabled();\n    }\n\n    /**\n     * Retrieves the list of packages disabled for obfuscation.\n     *\n     * @return List of package names disabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesDisabledForObfuscation() {\n        List<String> packages = DHLogObfuscationUtil.disabledPackagesForObfuscation(getDHOBFConfigProperties());\n        packages.addAll(packagesDisabledForObfuscation);\n        return packages;\n    }\n\n    /**\n     * Retrieves the obfuscation patterns for the tenant.\n     *\n     * @return List of regex patterns for tenant obfuscation.\n     * <p>\n     * DHFeatureUtil is utility method which needs to be called by the respective repository to get the obfuscation patterns.\n     */\n    @Override\n    public List<Pattern> getTenantObfuscationPattern() {\n        try {\n            if (StringUtils.isBlank(MDC.get(TENANT_ID_KEY)) || MDC.get(TENANT_ID_KEY).equalsIgnoreCase(DUMMY_STRING)) {\n                return Collections.emptyList();\n            } else {\n                DHOBFConfigProperties dhobfConfigProperties = getDHOBFConfigProperties();\n                DHFeatureUtils dhFeatureUtils = DHFeatureUtils.getInstance(DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_URL),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_EVALUATE_PATH, \"/v1/features/evaluate/\"),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_ENVIRONMENT), DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET),\n                        dhobfConfigProperties.getGsLogObfuscationFeatureVariationCacheExpiry(), dhobfConfigProperties.getGsLogObfuscationPatternCacheExpiry());\n                return dhFeatureUtils.getTenantLogObfuscationPatterns(MDC.get(TENANT_ID_KEY), MDC.get(REQUEST_ID_KEY));\n            }\n        } catch (Exception ex) {//NOSONAR\n            DPDTF.warn(\"[NO_OBF] Error in getting tenant obfuscation patterns: {}\", ex.getMessage(), ex);\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * Checks if obfuscation is enabled in the application.\n     *\n     * @return true if obfuscation is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationEnabledInApp() {\n        return getDHOBFConfigProperties().isGsLogOBFEnabled();\n    }\n\n    /**\n     * Checks if obfuscation metric logging is enabled.\n     *\n     * @return true if obfuscation metric logging is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationMetricLogEnabled() {\n        return getDHOBFConfigProperties().isGsLogOBFEnableFilterMetricLog();\n    }\n\n    /**\n     * Retrieves the obfuscation configuration properties from dh_env_config.\n     *\n     * @return DHOBFConfigProperties object containing obfuscation configuration.\n     */\n    private DHOBFConfigProperties getDHOBFConfigProperties() {\n        try {\n            /*This is initialization block for the expiry cache which will happen once.\n            and since we already short-circuited if DeploymentProperties is not initialized, we can safely initialize the cache here.\n             */\n            if (Objects.isNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE)) {\n                DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = new ExpiryCache<>(DeploymentProperties.getDeploymentProperties().getLongValue(GS_LOG_OBFUSCATION_CONFIG_PROPS_CACHE_TTL_MILLIS, 60 * 60 * 1000));\n            }\n            //Checking in cache if property exists\n            if (Objects.nonNull(DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY))) {\n                return DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.get(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            }\n            //If not present in cache, fetching from DeploymentProperties and storing in cache\n            String configValue = DeploymentProperties.getDeploymentProperties().getValue(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY);\n            Precondition.isNotBlank(configValue, GENERIC_SYSTEM_ERROR, \"[NO_OBF] Obfuscation config is not present in dynamic app's config server\");\n            DHOBFConfigProperties dhobfConfigProperties = DHUtils.convertJsonToObject(configValue, DHOBFConfigProperties.class);\n            DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.put(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY, dhobfConfigProperties);\n            return dhobfConfigProperties;\n        } catch (Exception ex) {\n            //Ignoring the exception as we don't want to fail the application startup in cases when DeploymentProperties hasn't been initialized\n            DPDTF.warn(\"[NO_OBF] Error in getting DHOBFConfigProperties: {}\", ex.getMessage(), ex);\n        }\n        return new DHOBFConfigProperties();\n    }\n\n    /**\n     * Checks if class loading should be short-circuited where DeploymentProperties is yet to be initialized.\n     *\n     * @return true if class loading should be short-circuited, false otherwise.\n     */\n    @Override\n    public boolean shortCircuitClassLoad() {\n        try {\n            return DeploymentProperties.isPropertiesServiceInitialized();\n        } catch (Throwable throwable) {\n            return false;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"908132af-d2e1-4c00-a4ab-ef01548d1b39","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":1,"endLine":35,"content":"package com.gainsight.services.external.conf.file.reader.task;\n\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collections;\n\n/**\n * @author sthammishetty on 04/05/20\n * <p>\n * ExternalTask to read config properties from classpath resource file [task.conf]. 'task.conf' is packaged along with the jar.\n *\n */\npublic class ExternalTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        LOGGER.info(\"Hello World. This is DynamicTask\");\n        LOGGER.info(\"Reading properties from config file ['task.conf']\");\n        String fileName = DeploymentProperties.getDeploymentProper","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":65,"endLine":327,"content":"public class PostgresExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PostgresExtractionTask.class);\n    private static final String connectionPoolName = \"DynamicSQLExtractPool_\" + RandomStringUtils.randomAlphanumeric(8);\n    private static final String EPOCH_DATETIME_FORMAT = \"epoch\";\n    private static final String POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS = \"postgres.copy.manager.excluded.tenants\";\n    private static final String DISABLE_POSTGRES_COPY_MANAGER = \"disable.postgres.copy.manager\";\n    private static final String ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING = \"enable.postgres.extract.sample.logging\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE = \"postgres.extract.sample.log.record.size\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS = \"postgres.extract.sample.log.include.all.columns\";\n    private static final String POSTGRES_EXTRACT_DEFAULT_DATETIME_FORMAT = \"postgres.extract.default.datetime.format\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        try {\n            String jobId = externalTaskRequestContext.getJobId();\n            String tenantId = externalTaskRequestContext.getTenantId();\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            isNotNull(sqlQueryInfo, GENERIC_SYSTEM_ERROR, msg(\"Could not get valid sqlExtractionDetails from task metadata for jobId:{} and tenantId:{}\", jobId, tenantId));\n            LOGGER.info(\"SQL Query info for job:{} of tenant:{} is::{}\", jobId, tenantId, DPUtils.convertObjectToJson(sqlQueryInfo));\n\n            DPWorkflowJobDetailsDTO dpWorkflowJobDetailsDTO = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, dpWorkflowJobDetailsDTO.getExternalId(), externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getTaskName());\n            String configSourceUrl = TaskExecutorWorkflowUtils.getConfigSourceUrl(dpWorkflowJobDetailsDTO);\n            String gsB2BSecret = getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n\n            ConnectorType connectorType;\n            RelationalDBConnectionDetail relationalDBConnectionDetail;\n            if (null != sqlQueryInfo.getConnectionInfo()) {\n                isNotBlank(sqlQueryInfo.getConnectionInfo().getConnectionId(), GENERIC_SYSTEM_ERROR, msg(\"No connectionId provided against jobId:{} and tenant:{}\", jobId, tenantId));\n                MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n                PNPConnectionInput pnpConnectionInfo = mdaCalloutsService.getConnectionDetails(sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                LOGGER.info(\"PNPConnectionInput fetched successfully for connectionId: {} tenantId: {}\", sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                sqlQueryInfo.getConnectionInfo().setConnectorType(ConnectorType.HAPOSTGRES);\n\n                if (pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                    relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail();\n                    connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n                } else {\n                    throw new DPSystemException(msg(\"Provided connectionDetail: {} is not registered with us. Please contact tech support!!\", DPUtils.convertObjectToJson(pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail())));\n                }\n            } else if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                LOGGER.info(\"ConnectionInfo is null. Fetching connection details from sqlExtractionDetails connectionDetails for jobId:{}\", jobId);\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid connectionInfo or connectionDetail\");\n            }\n            CsvFile csvFile;\n            List<String> copyManagerExcludedTenants = Lists.newArrayList();\n            String excludedTenants = DeploymentProperties.getDeploymentProperties().getValue(POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS);\n            if (StringUtils.isNotBlank(excludedTenants)) {\n                copyManagerExcludedTenants.addAll(Arrays.asList(excludedTenants.split(COMMA)));\n            }\n            boolean disableCopyManager = DeploymentProperties.getDeploymentProperties().getBooleanValue(DISABLE_POSTGRES_COPY_MANAGER, false);\n            if (disableCopyManager || copyManagerExcludedTenants.contains(tenantId)) {\n                LOGGER.warn(\"Skipping postgres copyManager execution for job:{} of tenant:{} since either it is restricted for this tenant or copy manager is disabled. Will proceed with legacy code though!!\", jobId, tenantId);\n                csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n            } else {\n                try {\n                    csvFile = executeQueryForPostgresCopyManager(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                } catch (Exception ex) {\n                    LOGGER.warn(msg(\"SQL Extraction for {} failed with copy manager functionality due to: {} \", connectorType, ex.getMessage()));\n                    LOGGER.warn(\"More details about the exception are: \", ex);\n                    if (!Thread.currentThread().isInterrupted()) {\n                        LOGGER.warn(\"Falling back to legacy code since copy manager did not give us what we wanted!!\");\n                        csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                    } else {\n                        LOGGER.info(\"Query execution failed without falling back to legacy code.\");\n                        throw ex;\n                    }\n                }\n            }\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : COMMA.charAt(0);\n\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(configSourceUrl, auditMetadata, true);\n            }\n\n            /*\n                Printing specified number of records for columns having dataType as date/dateTime only to find out format and other\n                discrepancies(if any). Since date/dateTime data is always a glitch in the matrix.\n                Based on config server property.\n             */\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING, false)) {\n                logDateOrDateTimeData(tenantId, jobId, headers, csvFile);\n            }\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(true)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(tenantId, jobId, externalTaskRequestContext.getTaskId(), externalExtractionTaskResult);\n            LOGGER.info(\"Successfully saved externalTask result for jobId:{}, tenantId:{}\", jobId, tenantId);\n        } catch (DPSystemException dpSysEx) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), dpSysEx);\n            throw dpSysEx;\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), ex);\n            throw new DPSystemException(msg(\"Error while performing jdbc extraction: {}\", ex.getMessage()), ex);\n        }\n    }\n\n    private static CsvFile executeQueryForPostgresCopyManager(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) throws SQLException, IOException {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.POSTGRES))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName()) + \"?ssl=\" + dbConnectionDetail.isSslEnabled();\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionId {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQueryWithPostgresCopyManager(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully with copy manager!!\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(String tenantId, String jobId, String taskId) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static String modifyFromClauseForRedshiftAndPostgres(String postgresExtractQuery, String schema) {\n        return postgresExtractQuery.replace(\"from \", \"from \" + schema + \".\");\n    }\n\n    private static CsvFile executeQueryForPostgresOrRedshift(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(sqlQueryInfo.getConnectionInfo().getConnectorType()))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            LOGGER.info(\"Redshift/Postgres Extract Query: {}\", postgresExtractQuery);\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionid {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query after modification: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQuery(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n\n    private static void logDateOrDateTimeData(String tenantId, String jobId, List<FieldInfo> headers, CsvFile csvFile) {\n        InputStream csvInputStream = null;\n        int sampleRecordSize = DeploymentProperties.getDeploymentProperties().getIntegerValue(POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE, 10);\n        boolean includeAllDateDateTimeColumns = DeploymentProperties.getDeploymentProperties().getBooleanValue(POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS, false);\n        List<FieldInfo> sampleDataFieldList = Lists.newArrayList();\n        Map<String, List<String>> dateOrDateTimeColumnValueMap = Maps.newHashMap();\n        try {\n            if (!includeAllDateDateTimeColumns) {\n                FieldInfo dateField = headers.stream().filter(header -> header.getDataType().equals(DATE)).findFirst().orElse(null);\n                if (Objects.nonNull(dateField)) {\n                    sampleDataFieldList.add(dateField);\n                }\n                FieldInfo dateTimeField = headers.stream().filter(header -> header.getDataType().equals(DATETIME)).findFirst().orElse(null);\n                if (Objects.nonNull(dateTimeField)) {\n                    sampleDataFieldList.add(dateTimeField);\n                }\n            } else {\n                sampleDataFieldList = headers;\n            }\n            if (CollectionUtils.isEmpty(sampleDataFieldList)) {\n                LOGGER.info(\"Did not find any date/dateTime column for job:{} of tenant:{}. Hence skipping logging of sample values\", jobId, tenantId);\n            } else {\n                LOGGER.info(\"Field list for which sample is required: {} for job:{} and tenant:{}\", sampleDataFieldList.stream().map(FieldInfo::getFieldAlias).collect(Collectors.toList()), jobId, tenantId);\n                CSVFormat csvFormatter = DPUtils.getCSVFormatter(DOUBLE_QUOTE_CHAR, DOUBLE_QUOTE_CHAR, true);\n                csvInputStream = Files.newInputStream(csvFile.getAbsoluteFile().toPath());\n                try (CSVParser csvParser = new CSVParser(new BufferedReader(new InputStreamReader(csvInputStream)), csvFormatter)) {\n                    for (CSVRecord record : csvParser) {\n                        Map<String, String> recordMap = DPCollectionUtils.nullSafeMap(record.toMap());\n                        for (FieldInfo fieldInfo : sampleDataFieldList) {\n                            String fieldAlias = fieldInfo.getFieldAlias();\n                            String recordVal = recordMap.get(fieldInfo.getFieldAlias());\n                            if (StringUtils.isNotBlank(recordVal)) {\n                                if (dateOrDateTimeColumnValueMap.containsKey(fieldAlias)) {\n                                    List<String> dateValues = dateOrDateTimeColumnValueMap.get(fieldAlias);\n                                    if (dateValues.size() < sampleRecordSize) {\n                                        dateValues.add(recordVal);\n                                        dateOrDateTimeColumnValueMap.put(fieldAlias, dateValues);\n                                    }\n                                } else {\n                                    dateOrDateTimeColumnValueMap.put(fieldAlias, Lists.newArrayList(recordVal));\n                                }\n                            }\n                        }\n                        int size = sampleRecordSize;\n                        Iterator<Map.Entry<String, List<String>>> iterator = dateOrDateTimeColumnValueMap.entrySet().stream().iterator();\n                        while (iterator.hasNext()) {\n                            List<String> value = iterator.next().getValue();\n                            if (value.size() < size) {\n                                size = value.size();\n                            }\n                        }\n                        if (size == sampleRecordSize) {\n                            break;\n                        }\n                    }\n                }\n                LOGGER.info(\"Sample data set for required columns for job:{} of tenant:{} are ::: {}\", jobId, tenantId, DPUtils.convertObjectToJson(dateOrDateTimeColumnValueMap));\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to log date/dateTime sample records for job:{} of tenant:{} due to:\", jobId, tenantId, ex);\n        } finally {\n            IOUtils.closeQuietly(csvInputStream);\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.setClientId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":33,"endLine":35,"content":"    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"8f8c627e-f5fb-4ef4-9b31-0a52084684de","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":1,"endLine":20,"content":"package com.gainsight.services.external.postgres.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.utils.DPCollectionUtils;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.service","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ae7b2726-5284-4ab2-b100-9f0d35b449c5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":263,"endLine":284,"content":"     InputStream csvInputStream = null;\n        int sampleRecordSize = DeploymentProperties.getDeploymentProperties().getIntegerValue(POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE, 10);\n        boolean includeAllDateDateTimeColumns = DeploymentProperties.getDeploymentProperties().getBooleanValue(POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS, false);\n        List<FieldInfo> sampleDataFieldList = Lists.newArrayList();\n        Map<String, List<String>> dateOrDateTimeColumnValueMap = Maps.newHashMap();\n        try {\n            if (!includeAllDateDateTimeColumns) {\n                FieldInfo dateField = headers.stream().filter(header -> header.getDataType().equals(DATE)).findFirst().orElse(null);\n                if (Objects.nonNull(dateField)) {\n                    sampleDataFieldList.add(dateField);\n                }\n                FieldInfo dateTimeField = headers.stream().filter(header -> header.getDataType().equals(DATETIME)).findFirst().orElse(null);\n                if (Objects.nonNull(dateTimeField)) {\n                    sampleDataFieldList.add(dateTimeField);\n                }\n            } else {\n                sampleDataFieldList = headers;\n            }\n            if (CollectionUtils.isEmpty(sampleDataFieldList)) {\n                LOGGER.info(\"Did not find any date/dateTime column for job:{} of tenant:{}. Hence skipping logging of sample values\", jobId, tenantId);\n            } else {\n                LOGGER.info(\"Field list for which sample is required: {} for job:{} and","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.isObfuscationEnabledInApp","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":109,"endLine":111,"content":"    public boolean isObfuscationEnabledInApp() {\n        return getDHOBFConfigProperties().isGsLogOBFEnabled();\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f2f24b86-ea5b-4866-a018-a1d47cb8decc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":465,"endLine":488,"content":"Format())\n                            : DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n\n                    ZoneId zoneId = StringUtils.isNotBlank(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            ? ZoneId.of(rule.getFieldInfo().getDateTimeProperties().getTimeZoneId())\n                            : ZoneId.of(\"UTC\");\n\n                    rule.getValues().get(0).setValue(zonedDateTime.format(targetDateTimeFormatter.withZone(zoneId)));\n\n                } catch (Exception e) {\n                    LOGGER.info(\"Date Parse exception occurred while setting from date. {}\", e);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.DATE_PARSE_EXCEPTION,\n                            String.format(\"Date Parse exception occurred while setting from date to January 01, 1970 due to %s\", e));\n                }\n            }\n        } else {\n            rule.getRules().forEach(innerRule -> setDateForHistoricSync(innerRule, lastModifieldFieldPath));\n        }\n    }\n\n    private static com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo getFieldInfoList(com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fetchTaskFieldInfo) {\n        com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo fieldInfo = new com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo();\n        fieldInfo.setName(fetchTaskFieldInfo.getName());\n   ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#L1-L288","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":1,"endLine":288,"content":"package com.gainsight.services.external.mssql.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.OrderByInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.*;\nimport java.util.*;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sthammishetty on 16/03/20\n */\npublic class MsSqlExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MsSqlExtractionTask.class);\n    private static final int SQL_EXTRACTION_QUERY_LIMIT = 10000;\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MsSql ConnectionDetails\");\n            }\n\n            if (connectorType == null || !UDMAccountType.MSSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MsSql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .build();\n\n            //Saving externalTask Result.\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n\n    private static CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestContext) {\n        CsvFile csvFile = null;\n        try {\n            if (Objects.isNull(sqlQueryInfo.getOrderByInfo())) {\n                OrderByInfo orderByInfo = new OrderByInfo();\n                orderByInfo.setOrderByFields(Collections.singletonList(sqlQueryInfo.getShowFields().get(0)));\n                sqlQueryInfo.setOrderByInfo(orderByInfo);\n            }\n\n            QueryBuilderResponse msSqlExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.MSSQL))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .withNullLastInOrderByClause(false).build();\n            String msSqlExtractQuery = msSqlExtract.getQuery();\n            LOGGER.info(\"MsSql Extract Query: {}\", msSqlExtractQuery);\n            String connectionUrl = \"jdbc:sqlserver://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \";databaseName=\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            if (dbConnectionDetail.isSslEnabled()) {\n                connectionUrl += \";encrypt=true\";\n            }\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnabled());\n            csvFile = executeQuery(connectionParamPojo, msSqlExtractQuery, sqlQueryInfo, externalTaskRequestContext);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n        return csvFile;\n    }\n\n    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" offset \" + offset + \" ROWS FETCH NEXT \" + SQL_EXTRACTION_QUERY_LIMIT + \" ROWS ONLY\";\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recordList.add(jsonObject.getDouble(key));\n                                } else {\n                                    recordList.add(jsonObject.get(key));\n                                }\n                            }\n                        });\n                        csvPrinter.printRecord(recordList);\n                        recordList.clear();\n                    }\n                }\n                offset = offset + SQL_EXTRACTION_QUERY_LIMIT;\n                recordsRetrieved = recordsRetrieved + dbResultSetRows.size();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n            } while (dbResultSetRows.size() == SQL_EXTRACTION_QUERY_LIMIT && !Thread.currentThread().isInterrupted());\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n            csvPrinter.flush();\n        } catch (Exception ex) {\n            LOGGER.error(\"Unable to process SQL extract! {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Could not close connection to: {}\", connectionParamPojo.getJdbcUrl());\n                }\n            }\n\n        }\n        return csvFile;\n    }\n\n    private static DBResultPojo executeQuery(Connection connection, String queryToExecute) {\n        Statement statement = null;\n        DBResultPojo dbResultPojo = new DBResultPojo();\n        try {\n            statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(queryToExecute);\n            dbResultPojo.setSucceded(true);\n            dbResultPojo.setResult(convertToJSON(resultSet));\n        } catch (Exception exception) {\n            dbResultPojo.setSucceded(false);\n            dbResultPojo.setCause(exception);\n            if (exception instanceof SQLException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.DB_ERROR);\n            } else if (exception instanceof IOException) {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.IO_ERROR);\n            } else {\n                dbResultPojo.setErrorCode(com.gainsight.services.utilities.datahighway.dhcommons.exception.ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5dd787c2-0366-439b-9a73-d33e953f3428","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":37,"endLine":68,"content":"til;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterOperator;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\nimport com.google.gson.*;\nimport com.google.gson.reflect.TypeToken;\nimport net.snowflake.client.jdbc.internal.apache.commons.io.FileUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.lang.reflect.Type;\nimport java.net.URLEncoder;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.integration.b","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.logInfo","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":245,"endLine":247,"content":"    private void logInfo(String taskId, String message) {\n        LOGGER.info(\"GA Task[{}] - {}\", taskId, message);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.SQLExtractHelper","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":55,"endLine":59,"content":"    public SQLExtractHelper(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo) {\n        this.connectionParamPojo = connectionParamPojo;\n        this.query = query;\n        this.sqlQueryInfo = sqlQueryInfo;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.readDataAndStoreInFile","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":247,"endLine":253,"content":"    private static long readDataAndStoreInFile(InputStream inputStream, String hasMoreKeyword, String offsetKeyword, String pluralName, File tempFile, String entityName) throws IOException {\n        long offset = Long.MIN_VALUE;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, pluralName, tempFile, entityName, jsonObject);\n        offset = shouldContinue(hasMoreKeyword, offsetKeyword, offset, jsonObject);\n        return offset;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":62,"endLine":64,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"718abd95-9fb3-4399-b316-00f7d2c3d8d5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":175,"endLine":199,"content":"ist<PicklistOption>> picklistMap = Maps.newHashMap();\n\n\n            mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            StringBuilder objectMetaDataUrl = new StringBuilder(\"/connector/ipaas/metadata/datahighway/\")\n                    .append(taskInfo.getConnectionDetails().getConnectionId())\n                    .append(\"/\")\n                    .append(fetchTaskDetails.getExternalEntityName().trim().replaceAll(UCConstants.SPACE, \"%20\"))\n                    .append(\"/attributes\");\n            JsonObject objectMetaDataFromConnectors = mdaCalloutsService.getIpaasDetailsFromMDA(\n                    objectMetaDataUrl.toString(), workflowJobDetails.getTenantId(), false);\n            Set<String> ipaasFields = Sets.newHashSet();\n\n            for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                validateMappingsExistInExternalSystem(field, objectMetaDataFromConnectors, ipaasFields);\n            }\n            if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                    if (!condition.isCustomizedFilterField())\n                        validateMappingsExistInExternalSystem(condition.getLeftOperand(), objectMetaDataFromConnectors, ipaasFields);\n                }\n            }\n\n       ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1c24c15f-618c-4398-8020-05e6e1dfcc80","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":212,"endLine":236,"content":"nantId, jobId, taskId, UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static String modifyFromClauseForRedshiftAndPostgres(String postgresExtractQuery, String schema) {\n        return postgresExtractQuery.replace(\"from \", \"from \" + schema + \".\");\n    }\n\n    private static CsvFile executeQueryForPostgresOrRedshift(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(sqlQueryInfo.getConnectionInfo().getConnectorType()))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            LOGGER.info(\"Redshift/Postgres Extract Query: {}\", postgresExtractQuery);\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHos","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"29e805e7-45f6-495c-919f-c4fc0a0f94f6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":1,"endLine":44,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.ErrorCode;\nimport com.gainsight.services.dataprocessing.commons.properties.MessageProperties;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport org.apache.commons.lang3.StringUtils;\n\npublic enum IpaasExtractionValidationCode implements ErrorCode {\n    FIELD_NOT_PRESENT_IN_SYSTEM(100001)\n    ;\n\n    private final int code;\n    private String className = getClass().getSimpleName();\n\n    IpaasExtractionValidationCode(int code) {\n        this.code = code;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getErrorName() {\n        return className + \"__\" + this.name();\n    }\n\n    /**\n     * Refers to User Defined Text\n     */\n    public String getUserText(Object... args) {\n        String key = getErrorName();\n        MessageProperties messageProperties = MessageProperties.getMessageProperties();\n        if(messageProperties == null){\n            return key;\n        }\n        String message = messageProperties.getValue(key);\n        if (args == null || args.length == 0) {\n            message = DPUtils.msg(message, StringUtils.EMPTY);\n        } else {\n            message = DPUtils.msg(message, args);\n        }\n        return message;\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":97,"endLine":344,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas extraction started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        LOGGER.info(\"checking : \", DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET));\n        List<File> fileList = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(),\n                    workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            IpaasExtractionDetails fetchTaskDetails = convertJsonToObject(metaData.get(IPAAS_EXTRACT_DETAILS_KEY), IpaasExtractionDetails.class);//todo remove from constants\n            LOGGER.info(\"MDA call out to fetch ipaas connection info for . connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            String ipaasConnectionUrl = \"/connector/ipaas/connection/datahighway/\" + fetchTaskDetails.getConnectionId();\n            JsonObject jsonObject = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasConnectionUrl, workflowJobDetails.getTenantId(), false);\n            isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n            LOGGER.info(\"Ipaas source connection details response :{}  for connectionId : {}, tId- {}, jobId- {}, taskId- {}\",\n                    jsonObject.get(\"result\").getAsBoolean(), fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            if (!jsonObject.get(\"result\").getAsBoolean()) {\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info not found for id : %s\", fetchTaskDetails.getConnectionId()));\n            }\n            JsonObject data = jsonObject.get(DATA).getAsJsonObject();\n            if (data == null || data.isJsonNull())\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.IPAAS_CONNECTION_INFO_NOT_FOUND,\n                        String.format(\"Ipaas Connection info is empty for id : %s\", fetchTaskDetails.getConnectionId()));\n            JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(data.get(VALUE).getAsString())).getAsJsonObject();\n            Type type = new TypeToken<Map<String, Object>>() {\n            }.getType();\n            Map<String, Object> connectionDetailsMap = new Gson().fromJson(decryptedObject, type);\n            //extraction from ipaas\n            LOGGER.info(\"Fetching ipaas connection details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n\n            //fetch dp staging details\n            if (fetchTaskDetails.getStagingConnectionInfo() != null) {\n                stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId, fetchTaskDetails, externalTaskRequestContext);\n            }\n\n            //fetch ipaas job & task details\n            LOGGER.info(\"MDA call out to fetch ipaas job and task details started. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            String ipaasJobDetailsUrl = \"/connector/job/datahighway/\" + fetchTaskDetails.getJobId();\n            JsonObject obj = mdaCalloutsService.getIpaasDetailsFromMDA(ipaasJobDetailsUrl, workflowJobDetails.getTenantId(), false);\n\n            Type taskType = new TypeToken<List<TaskInfo>>() {\n            }.getType();\n            List<TaskInfo> taskInfos = new Gson().fromJson(obj.get(DATA).getAsJsonObject().get(\"taskInfo\"), taskType);\n\n            Map<String, String> ntzFields = Maps.newHashMap();\n            if (ConnectorType.SNOWFLAKE.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                List<TaskInfo> extractTaskInfos = taskInfos.stream().filter(taskInfo -> taskInfo.getTaskType().equals(TaskType.IPAAS_EXTRACT)).collect(Collectors.toList());\n                if (CollectionUtils.isNotEmpty(extractTaskInfos)) {\n                    extractTaskInfos.stream().forEach(taskInfo -> {\n                        if (CollectionUtils.isNotEmpty(taskInfo.getFieldInfoList())) {\n                            taskInfo.getFieldInfoList().stream().forEach(fieldInfo -> {\n                                        if (fieldInfo.getDataType().equals(\"date-time\") && fieldInfo.getMeta().containsKey(\"NTZ_ZONE_ID\")) {\n                                            ntzFields.put(fieldInfo.getPath(), fieldInfo.getMeta().get(\"NTZ_ZONE_ID\").toString());\n                                        }\n                                    }\n                            );\n                        }\n                    });\n                }\n            }\n\n            TaskInfo taskInfo = taskInfos.stream().filter(i -> i.getTaskId().equalsIgnoreCase(fetchTaskDetails.getTaskId()))\n                    .findFirst().get();\n            LOGGER.info(\"Fetched ipaas job and task details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                    fetchTaskDetails.getConnectionId(), tenantId, jobId, taskId);\n            Map<String, List<PicklistOption>> picklistMap = Maps.newHashMap();\n\n\n            mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(),\n                    TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n            StringBuilder objectMetaDataUrl = new StringBuilder(\"/connector/ipaas/metadata/datahighway/\")\n                    .append(taskInfo.getConnectionDetails().getConnectionId())\n                    .append(\"/\")\n                    .append(fetchTaskDetails.getExternalEntityName().trim().replaceAll(UCConstants.SPACE, \"%20\"))\n                    .append(\"/attributes\");\n            JsonObject objectMetaDataFromConnectors = mdaCalloutsService.getIpaasDetailsFromMDA(\n                    objectMetaDataUrl.toString(), workflowJobDetails.getTenantId(), false);\n            Set<String> ipaasFields = Sets.newHashSet();\n\n            for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                validateMappingsExistInExternalSystem(field, objectMetaDataFromConnectors, ipaasFields);\n            }\n            if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                    if (!condition.isCustomizedFilterField())\n                        validateMappingsExistInExternalSystem(condition.getLeftOperand(), objectMetaDataFromConnectors, ipaasFields);\n                }\n            }\n\n            if (!ipaasFields.isEmpty()) {\n                if (!ConnectorType.FRESHDESK.equals(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()))) {\n                    LOGGER.error(\"Exception while executing externalTask due to validation failure as fields are not present in external system tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                            tenantId, jobId, taskId, ipaasFields);\n                    throw new ExternalTaskException(500, ExternalTasksValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,\n                            String.format(\"The job cannot be completed as the %s field was either deleted from the source or user is not authorised to access the field.Remove the field from connector mappings and re-run the job.\", ipaasFields));   // throw new DPSystemException(IpaasExtractionValidationCode.FIELD_NOT_PRESENT_IN_SYSTEM,String.format(\"Column %s does not exist. Possible causes: The column is deleted or the Integration/OAuth user does not have read permissions on the field.\", ipaasFields));\n                }else{\n                    LOGGER.warn(\"Not throwing exception for FRESHDESK connector, fields are missing {}\", ipaasFields);\n                }\n            }\n\n            if (fetchTaskDetails.isResolvePicklist()) {\n                boolean isPicklistFieldPresent = taskInfo.getFieldInfoList().stream().anyMatch(\n                        task -> (Boolean) task.getMeta().get(\"isPicklistField\"));\n                if (!isPicklistFieldPresent && taskInfo.getCriteria() != null && taskInfo.getCriteria().getConditions() != null && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                    isPicklistFieldPresent = taskInfo.getCriteria().getConditions().stream().anyMatch(conditions -> conditions.getLeftOperand().getMeta().containsKey(\"isPicklistField\") && (Boolean) conditions.getLeftOperand().getMeta().get(\"isPicklistField\"));\n                }\n                if (isPicklistFieldPresent) {\n\n                    for (FieldInfo field : taskInfo.getFieldInfoList()) {\n                        populatePicklistMap(picklistMap, objectMetaDataFromConnectors, field);\n                    }\n                    if (null != taskInfo.getCriteria() && !taskInfo.getCriteria().getConditions().isEmpty()) {\n                        for (Conditions condition : taskInfo.getCriteria().getConditions()) {\n                            if (!condition.isCustomizedFilterField())\n                                populatePicklistMap(picklistMap, objectMetaDataFromConnectors, condition.getLeftOperand());\n                        }\n                    }\n                }\n            }\n            PaginatedDataExtractionService paginatedDataExtractionService = new PaginatedDataExtractionService();\n            List<com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.fields.FieldInfo> fieldInfoList = Lists.newArrayList();\n            fetchTaskDetails.getProjections().forEach(projection -> fieldInfoList.add(getFieldInfoList(projection)));\n            DataExtractionRequest dataExtractionRequest = new DataExtractionRequest();\n            dataExtractionRequest.setObjectName(fetchTaskDetails.getExternalEntityName());\n            dataExtractionRequest.setInstanceToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_INSTANCE_TOKEN).toString()));\n            dataExtractionRequest.setUserToken(SecretData.fromValue(connectionDetailsMap.get(IPAAS_USER_TOKEN).toString()));\n            dataExtractionRequest.setOrgToken(connectionDetailsMap.get(IPAAS_ORG_TOKEN).toString());\n            dataExtractionRequest.setJobId(workflowJobDetails.getJobId());\n            dataExtractionRequest.setConnectorType(ConnectorType.getConnectorType(fetchTaskDetails.getConnectorType()));\n            String ipaasExcludeString = DeploymentProperties.getDeploymentProperties().getValue(IPAAS_EXCLUDE_STRING);\n            if (StringUtils.isNotEmpty(ipaasExcludeString)) {\n                ipaasExcludeString = ipaasExcludeString.concat(\",\");\n            }\n            ipaasExcludeString = ipaasExcludeString.concat(\"\\u0000\");\n            List<String> excludedStringList = Arrays.asList(ipaasExcludeString.split(\",\"));\n            dataExtractionRequest.getProperties().put(\"ceTimeOut\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"ce.call.timeout.in.milli.secs\", 60000));\n            dataExtractionRequest.setExcludedStrings(excludedStringList);\n            LOGGER.info(\"Excluded Strings: {}\", dataExtractionRequest.getExcludedStrings());\n            dataExtractionRequest.setFilterRule(fetchTaskDetails.getWhereClause());\n            dataExtractionRequest.setFields(fieldInfoList);\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(\"default.snowflake.enabled\", true)\n                    || DeploymentProperties.getDeploymentProperties().getValue(\"snowflake.tenant.list\").contains(RequestContextProvider.getTenantId())) {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", true);\n            } else {\n                dataExtractionRequest.getProperties().put(\"isJdbcSnowflakeRequired\", false);\n            }\n            dataExtractionRequest.getProperties().put(\"snowflakeFileSize\", DeploymentProperties.getDeploymentProperties().getLongValue(\"snowflake.file.size\", 200000000));\n            dataExtractionRequest.getProperties().put(\"snowflakeBatchLimit\", DeploymentProperties.getDeploymentProperties().getIntegerValue(\"snowflake.batch.limit\", 10000));\n            dataExtractionRequest.setCloudElementsBaseUrl(connectionDetailsMap.get(\"baseUrl\").toString());\n            dataExtractionRequest.setDateTimeConversionRequired(Boolean.parseBoolean(connectionDetailsMap.get(\"isDateTimeConversionRequired\").toString()));\n            dataExtractionRequest.getProperties().put(PAGE_SIZE, fetchTaskDetails.getPageSize());\n            dataExtractionRequest.getProperties().put(\"skipFieldsAsQueryParam\", fetchTaskDetails.isSkipFieldsForFetch());\n            dataExtractionRequest.setLastModifiedFieldName(fetchTaskDetails.getLastModifieldFieldPath());\n            dataExtractionRequest.setLastModifiedFieldValue(fetchTaskDetails.getLastModifieldFieldValue());\n            dataExtractionRequest.setHonourLastModfiedFieldValueToFetchDeltaData(fetchTaskDetails.isHonourLastModfiedFieldValueToFetchDeltaData());\n            dataExtractionRequest.setIgnorableErrorMessages(fetchTaskDetails.getIgnorableErrorMessages());\n            dataExtractionRequest.setQueryParamForDataFetch(fetchTaskDetails.getQueryParamForDataFetch());\n            dataExtractionRequest.setPicklistOptionMap(picklistMap);\n            dataExtractionRequest.getProperties().putAll(connectionDetailsMap);\n            taskInfo.getFieldInfoList().stream().filter(fieldInfo -> fieldInfo.getMeta().containsKey(\"isPrimaryKey\") && (Boolean) fieldInfo.getMeta().get(\"isPrimaryKey\")).findFirst().ifPresent(fieldInfo -> dataExtractionRequest.setPrimaryField(fieldInfo.getPath()));\n\n\n            if (null != fetchTaskDetails.getOrderByInfo() && !fetchTaskDetails.getOrderByInfo().getOrderByFields().isEmpty()) {\n                if (fetchTaskDetails.getOrderByInfo().isAscending()) {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"asc\", \"UTF-8\"));\n                } else {\n                    dataExtractionRequest.setOrderByInfoField(fetchTaskDetails.getOrderByInfo().getOrderByFields().get(0).getJsonPath() + URLEncoder.encode(\" \" + \"desc\", \"UTF-8\"));\n                }\n            }\n            dataExtractionRequest.setDefaultSleepTimeOnFail(fetchTaskDetails.getDefaultSleepTimeOnFail());\n            dataExtractionRequest.setMaxNoOfRetries(fetchTaskDetails.getMaxNumberOfRetries());\n            if (!ntzFields.isEmpty()) {\n                dataExtractionRequest.getProperties().put(\"NTZ_FIELDS\", ntzFields);\n            }\n\n            if (MapUtils.isNotEmpty(fetchTaskDetails.getAdditionalInformation())) {\n\n                dataExtractionRequest.getProperties().putAll(fetchTaskDetails.getAdditionalInformation());\n            }\n            if (StringUtils.isNotEmpty(fetchTaskDetails.getQuery())) {\n                dataExtractionRequest.getProperties().put(\"CUSTOM_QUERY\", fetchTaskDetails.getQuery());\n            }\n\n            fileList = paginatedDataExtractionService.extractData(dataExtractionRequest);\n            LOGGER.info(\"Ipaas Extraction started, tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n\n\n            if (null != taskInfo.getCriteria()) {\n                taskInfo.getCriteria().getConditions().stream().filter(Objects::nonNull).forEach(criteria -> {\n                    if (criteria.getLeftOperand().getMeta().containsKey(IS_CURRENCY_FIELD)) {\n                        com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo fieldInfoForCurrencyValue = new com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo();\n                        fieldInfoForCurrencyValue.setDecimalPlaces(16);\n                        fieldInfoForCurrencyValue.setDataType(com.gainsight.services.dataprocessing.commons.pojo.DataType.NUMBER);\n                        fieldInfoForCurrencyValue.setName(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setJsonPath(criteria.getLeftOperand().getFieldName() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldAlias(criteria.getLeftOperand().getFieldAlias() + IPaasConstants.CURRENCY_FIELD);\n                        fieldInfoForCurrencyValue.setFieldType(FieldType.FIELD);\n                        fetchTaskDetails.getProjections().add(fieldInfoForCurrencyValue);\n                    }\n                });\n            }\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjections(), null);\n\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(fileList.stream().map(file -> file.getAbsolutePath()).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(fetchTaskDetails.isEnableDownloadSourceData())\n                    //.setPushExtractedDataToS3(true)\n                    .setExcludedStrings(ipaasExcludeString)\n                    .setIgnoreInvalidData(fetchTaskDetails.isIgnoreInvalidData())\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n            LOGGER.info(\"Request to ipaas fetch completed in {} secs for tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasExtractiontask external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (CollectionUtils.isNotEmpty(fileList)) {\n                for (File file : fileList) {\n                    FileUtils.deleteQuietly(file);\n                }\n            }\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.logDateOrDateTimeData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":262,"endLine":325,"content":"    private static void logDateOrDateTimeData(String tenantId, String jobId, List<FieldInfo> headers, CsvFile csvFile) {\n        InputStream csvInputStream = null;\n        int sampleRecordSize = DeploymentProperties.getDeploymentProperties().getIntegerValue(POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE, 10);\n        boolean includeAllDateDateTimeColumns = DeploymentProperties.getDeploymentProperties().getBooleanValue(POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS, false);\n        List<FieldInfo> sampleDataFieldList = Lists.newArrayList();\n        Map<String, List<String>> dateOrDateTimeColumnValueMap = Maps.newHashMap();\n        try {\n            if (!includeAllDateDateTimeColumns) {\n                FieldInfo dateField = headers.stream().filter(header -> header.getDataType().equals(DATE)).findFirst().orElse(null);\n                if (Objects.nonNull(dateField)) {\n                    sampleDataFieldList.add(dateField);\n                }\n                FieldInfo dateTimeField = headers.stream().filter(header -> header.getDataType().equals(DATETIME)).findFirst().orElse(null);\n                if (Objects.nonNull(dateTimeField)) {\n                    sampleDataFieldList.add(dateTimeField);\n                }\n            } else {\n                sampleDataFieldList = headers;\n            }\n            if (CollectionUtils.isEmpty(sampleDataFieldList)) {\n                LOGGER.info(\"Did not find any date/dateTime column for job:{} of tenant:{}. Hence skipping logging of sample values\", jobId, tenantId);\n            } else {\n                LOGGER.info(\"Field list for which sample is required: {} for job:{} and tenant:{}\", sampleDataFieldList.stream().map(FieldInfo::getFieldAlias).collect(Collectors.toList()), jobId, tenantId);\n                CSVFormat csvFormatter = DPUtils.getCSVFormatter(DOUBLE_QUOTE_CHAR, DOUBLE_QUOTE_CHAR, true);\n                csvInputStream = Files.newInputStream(csvFile.getAbsoluteFile().toPath());\n                try (CSVParser csvParser = new CSVParser(new BufferedReader(new InputStreamReader(csvInputStream)), csvFormatter)) {\n                    for (CSVRecord record : csvParser) {\n                        Map<String, String> recordMap = DPCollectionUtils.nullSafeMap(record.toMap());\n                        for (FieldInfo fieldInfo : sampleDataFieldList) {\n                            String fieldAlias = fieldInfo.getFieldAlias();\n                            String recordVal = recordMap.get(fieldInfo.getFieldAlias());\n                            if (StringUtils.isNotBlank(recordVal)) {\n                                if (dateOrDateTimeColumnValueMap.containsKey(fieldAlias)) {\n                                    List<String> dateValues = dateOrDateTimeColumnValueMap.get(fieldAlias);\n                                    if (dateValues.size() < sampleRecordSize) {\n                                        dateValues.add(recordVal);\n                                        dateOrDateTimeColumnValueMap.put(fieldAlias, dateValues);\n                                    }\n                                } else {\n                                    dateOrDateTimeColumnValueMap.put(fieldAlias, Lists.newArrayList(recordVal));\n                                }\n                            }\n                        }\n                        int size = sampleRecordSize;\n                        Iterator<Map.Entry<String, List<String>>> iterator = dateOrDateTimeColumnValueMap.entrySet().stream().iterator();\n                        while (iterator.hasNext()) {\n                            List<String> value = iterator.next().getValue();\n                            if (value.size() < size) {\n                                size = value.size();\n                            }\n                        }\n                        if (size == sampleRecordSize) {\n                            break;\n                        }\n                    }\n                }\n                LOGGER.info(\"Sample data set for required columns for job:{} of tenant:{} are ::: {}\", jobId, tenantId, DPUtils.convertObjectToJson(dateOrDateTimeColumnValueMap));\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to log date/dateTime sample records for job:{} of tenant:{} due to:\", jobId, tenantId, ex);\n        } finally {\n            IOUtils.closeQuietly(csvInputStream);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.isHonourLastModfiedFieldValueToFetchDeltaData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":95,"endLine":97,"content":"    public boolean isHonourLastModfiedFieldValueToFetchDeltaData() {\n        return honourLastModfiedFieldValueToFetchDeltaData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java#ExternalTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":24,"endLine":51,"content":"public class ExternalTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class.getName());\n\n    public static void main(String[] args) {\n        execute(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void execute(ExternalTaskRequestContext externalTaskRequestContext) {\n        for (int i = 0; i < 10; i++) {\n            InputStream inputStream = ExternalTask.class.getClassLoader().getResourceAsStream(\"random.txt\");\n            File file = new File(\"random\" + i + \".txt\");\n            LOGGER.info(\"copying to file \" + file.getName());\n            try {\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                LOGGER.info(\"Copied file \" + file.getName() + \", size: \" + file.length());\n            } catch (IOException e) {\n                LOGGER.error(\"Error copying to file \" + file.getName());\n            }\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f2243af-2332-4fa6-8d26-0ae37bb21a30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":18,"endLine":43,"content":"ort com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.gainsight.services.external.ga4.extraction.task.service.GA4Service;\nimport com.gainsight.services.utilities.datahighway.dhcommons.externals.MDACalloutService;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.services.analyticsdata.v1beta.model.*;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WebConstants.DH_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.GA_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimp","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"48b87d11-f7c1-4282-8c0b-54cbc6baa560","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":19,"endLine":39,"content":"lds.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionsInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bd6f4987-1125-445e-9a3b-286739240f9a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":124,"endLine":144,"content":"tatic CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestContext) {\n        CsvFile csvFile = null;\n        try {\n            if (Objects.isNull(sqlQueryInfo.getOrderByInfo())) {\n                OrderByInfo orderByInfo = new OrderByInfo();\n                orderByInfo.setOrderByFields(Collections.singletonList(sqlQueryInfo.getShowFields().get(0)));\n                sqlQueryInfo.setOrderByInfo(orderByInfo);\n            }\n\n            QueryBuilderResponse msSqlExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.MSSQL))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .withNullLastInOrderByClause(false).build();\n            String msSqlExtractQuery = msSqlExtract.getQuery();\n            LOGGER.info(\"MsSql Extract Query: {}\", msSqlExtractQuery);\n            String connectionUrl = \"jdbc:sqlserver://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \";databaseName=\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            if (dbConnectionDetail.isSslEnabled()) {\n                connectionUrl += \";encrypt=true\";\n            }\n            ConnectionParamPojo connectionParamPojo = new Connectio","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getExternalEntityName","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":111,"endLine":113,"content":"    public String getExternalEntityName() {\n        return externalEntityName;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java#L1-L102","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":1,"endLine":102,"content":"package com.gainsight.services.external.ga4.extraction.task.service;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleRefreshTokenRequest;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpRequest;\nimport com.google.api.client.http.HttpRequestInitializer;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.services.analyticsdata.v1beta.AnalyticsData;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsRequest;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsResponse;\nimport com.google.api.services.analyticsdata.v1beta.model.RunReportRequest;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\n\n/**\n * Created by ptarika on 12/12/2021.\n */\npublic class GA4ServiceImpl implements GA4Service {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(GA4ServiceImpl.class);\n\n    private final GA4ConnectionInfo connectionInfo;\n    private AnalyticsData analyticsData;\n\n\n    GA4ServiceImpl(GA4ConnectionInfo connectionInfo) {\n        this.connectionInfo = connectionInfo;\n        initialize();\n    }\n\n    private void initialize() {\n        try {\n            JsonFactory jsonFactory = new JacksonFactory();\n            HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();\n\n            String refreshToken = connectionInfo.getRefreshToken();\n            String clientId = connectionInfo.getClientId();\n            String clientSecret = connectionInfo.getClientSecret();\n\n            GoogleRefreshTokenRequest googleRefreshTokenRequest =\n                    new GoogleRefreshTokenRequest(httpTransport, jsonFactory, refreshToken, clientId, clientSecret);\n            GoogleTokenResponse tokenResponse = googleRefreshTokenRequest.execute();\n\n            GoogleCredential credential = new GoogleCredential\n                    .Builder()\n                    .setClientSecrets(clientId, clientSecret)\n                    .setJsonFactory(jsonFactory)\n                    .setTransport(httpTransport)\n                    .build()\n                    .setAccessToken(tokenResponse.getAccessToken())\n                    .setRefreshToken(refreshToken);\n\n          analyticsData = new AnalyticsData.Builder(httpTransport, jsonFactory, configureTimeouts(credential))\n                 .build();\n        } catch (Exception e) {\n            LOGGER.error(\"Not able to initialize the GA4 client :{}\",e.getMessage(),e);\n            throw new DPSystemException(\"Unable to initialize GA4 client.\", e);\n        }\n    }\n\n    private HttpRequestInitializer configureTimeouts(final HttpRequestInitializer requestInitializer) {\n        return new HttpRequestInitializer() {\n            @Override\n            public void initialize(HttpRequest httpRequest) throws IOException {\n                requestInitializer.initialize(httpRequest);\n                httpRequest.setConnectTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_CONNECT_TIMEOUT_MILLIS, 120000));\n                httpRequest.setReadTimeout(getDeploymentProperties().getIntegerValue(GA_EXTRACT_READ_TIMEOUT_MILLIS, 120000));\n                httpRequest.setNumberOfRetries(getDeploymentProperties().getIntegerValue(GA_EXTRACT_NUM_RETRIES, 5));\n\n                httpRequest.setIOExceptionHandler((request, supportsRetry) -> {\n                    LOGGER.error(\"IOException while calling: \" + request.getUrl() + \". Will issue retry if configured.\");\n                    //to make retries exponential multiply connectTimeout/socketTimeout\n                    return supportsRetry;\n                });\n            }\n        };\n    }\n\n    @Override\n    public BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException {\n        BatchRunReportsRequest getReportsRequest = new BatchRunReportsRequest()\n                .setRequests(requests);\n\n\n        return analyticsData.properties()\n                .batchRunReports(\"properties/\"+ propertyId, getReportsRequest)\n                .execute();\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java#MsSqlExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":66,"endLine":122,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            String jobId = externalTaskRequestContext.getJobId();\n\n            //Get workflowJobDetails of given jobId\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            UDMAccountType connectorType = null;\n            RelationalDBConnectionDetail relationalDBConnectionDetail = null;\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            Precondition.isNotNull(sqlQueryInfo, ValidationCode.GENERIC_SYSTEM_ERROR, \"Sql Extraction details cannot be empty. Missing extractionDetails information in task metadata\");\n            String mdaBaseUrl = Objects.nonNull(workflowJobDetails.getConfigSourceUrl()) ? workflowJobDetails.getConfigSourceUrl() : workflowJobDetails.getCallbackUrl();\n            String taskId = externalTaskRequestContext.getTaskId();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MsSql ConnectionDetails\");\n            }\n\n            if (connectorType == null || !UDMAccountType.MSSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MsSql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .build();\n\n            //Saving externalTask Result.\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.setClientSecret","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":41,"endLine":43,"content":"    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#is.getConnectionObject","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":294,"endLine":301,"content":"    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setAdditionalInformation","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":55,"endLine":57,"content":"    public void setAdditionalInformation(Map<String, Object> additionalInformation) {\n        this.additionalInformation = additionalInformation;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"785fe8ad-44a2-4e8d-a386-c9ec02e4fe15","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":1,"endLine":20,"content":"package com.gainsight.services.external.mysql.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"bffa2e90-c0c2-4cd5-8e92-88715d7d96ae","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":180,"endLine":209,"content":"nList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            if (Objects.nonNull(errorFile) && errorFile.getNumRecords() > 0) {\n                externalExtractionTaskResultBuilder.setWriteToErrorFile(true);\n                externalExtractionTaskResultBuilder.setErrorFilePath(errorFile.getAbsolutePath());\n            }\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing PX-Extraction task  {} - {}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            if (Objects.nonNull(parquetWriter)) {\n                try {\n                    parquetWriter.close();\n                } catch (Exception ex) {\n                    LOGGER.error(\"Error in closing parquet file writer\");\n                    throw new DPSystemException(\"Failed to close parquet writer\", ex);\n                }\n            }\n\n            if (Objects.nonNull(errorWriter)) {\n                try {\n                    errorWriter.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"Error in closing csv writer\");\n                    throw new DPSystemException(\"Failed to close csv writer\", e);\n ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9fd0a30b-bf7f-4ce8-8540-82a7490eaf61","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":131,"endLine":153,"content":" failed with copy manager functionality due to: {} \", connectorType, ex.getMessage()));\n                    LOGGER.warn(\"More details about the exception are: \", ex);\n                    if (!Thread.currentThread().isInterrupted()) {\n                        LOGGER.warn(\"Falling back to legacy code since copy manager did not give us what we wanted!!\");\n                        csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                    } else {\n                        LOGGER.info(\"Query execution failed without falling back to legacy code.\");\n                        throw ex;\n                    }\n                }\n            }\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : COMMA.charAt(0);\n\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(configSourceUrl, auditMetadata, true);\n            }\n\n            /*\n                Printing specified number of records for colum","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7fe4326d-f85e-43ea-8ed5-23f25c2cd666","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":318,"endLine":327,"content":"tenantId, DPUtils.convertObjectToJson(dateOrDateTimeColumnValueMap));\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to log date/dateTime sample records for job:{} of tenant:{} due to:\", jobId, tenantId, ex);\n        } finally {\n            IOUtils.closeQuietly(csvInputStream);\n        }\n    }\n\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setMaxNumberOfRetries","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":77,"endLine":79,"content":"    public void setMaxNumberOfRetries(int maxNumberOfRetries) {\n        this.maxNumberOfRetries = maxNumberOfRetries;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"2e43afd1-d388-4445-9039-41e548b122e0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":1,"endLine":38,"content":"package com.gainsight.services.external.too.many.open.file.task;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\n\n/**\n * @author sthammishetty on 09/06/20\n * External task to test 'too many open files'.\n */\npublic class TooManyOpenFilesTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TooManyOpenFilesTask.class.getName());\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        List<FileWriter> files = new ArrayList();\n        try {\n            File file = File.createTempFile(UUID.randomUUID().toString() + \"_dummy\", \".txt\");\n            FileWriter fileWriter;\n            int batchSize = 1000;\n            for (int i = 0; i < 5000; i++)","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"dd9648a2-24a7-4ba3-a9d7-fea28551687a","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":399,"endLine":418,"content":";\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                fetchTaskDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.pa","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.executeTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":69,"endLine":213,"content":"    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetWriter<List<String>> parquetWriter = null;\n        DPFile errorFile;\n        CSVPrinter errorWriter = null;\n        ParquetFile parquetFile = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            PXExtractionDetails pxExtractionDetails = DHUtils.convertJsonToObject(metaData.get(PX_EXTRACT_DETAILS_KEY), PXExtractionDetails.class);\n            PXAccessDetails accessDetails = DHUtils.convertJsonToObject(metaData.get(PX_ACCESS_DETAILS_KEY), PXAccessDetails.class);\n\n            String connectorId = accessDetails.getConnectorId();\n            Pair<String, String> aptrinsicKeyURLPair = PxUtil.getAptrinsicKey(tenantId, ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), connectorId);\n            String apiKey = aptrinsicKeyURLPair.getKey();\n            String pxURL = aptrinsicKeyURLPair.getValue();\n            PxUtil.convertDateFilterToEpochInFilterRule(pxExtractionDetails.getWhereClause(), ExternalTaskUtil.getExternalTaskRequestContext().getWorkflowSystemProperties(), getDeploymentProperties().getValue(DEFAULT_DATE_FORMAT_KEY));\n            TenantDetailsDTO tenantDetailsDTO = externalTaskRequestContext.getTenantDetailsDTO();\n            parquetFile = new ParquetFile(getTempFilePath(tenantId, jobId, externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".parquet\"));\n            errorFile = getErrorFile(taskId + \"_error.csv\");\n            List<String> showFieldsList = getFieldNames(pxExtractionDetails.getShowFields());\n            errorWriter = getErrorWriter(showFieldsList, errorFile);\n            parquetWriter = getParquetWriter(showFieldsList, pxExtractionDetails.getShowFields(), parquetFile);\n\n            String pageSize = String.valueOf(accessDetails.getPageSize() != 0 ? accessDetails.getPageSize() : StringUtils.defaultIfBlank(getProperties().getProperty(\"px.page.size\"), DEFAULT_PAGE_SIZE));\n            PXExtractInfo pxExtractInfo = new PXExtractInfo();\n            pxExtractInfo.setAccessDetails(accessDetails);\n            pxExtractInfo.setPxExtractionDetails(pxExtractionDetails);\n\n            boolean isFinalResult = false;\n            String nextPageToken = null;\n            LOGGER.info(\"Fetching events using POST call to endpoint: {} with body {} \", pxURL, DHUtils.convertObjectToJson(pxExtractionDetails));\n            DateTimeFormatter destDateTimeFormatter = getDestinationDateTimeFormatter(tenantId);\n            while (!isFinalResult) {\n                PXResponse pxResponse = PxUtil.fetchEvents(pxExtractInfo, jobId, apiKey, pxURL, nextPageToken, pageSize, false);\n                nextPageToken = null;\n                isFinalResult = true;\n                if (!pxResponse.isLastPage()) {\n                    nextPageToken = pxResponse.getNextPageToken();\n                    if (StringUtils.isNotBlank(nextPageToken)) {\n                        isFinalResult = false;\n                    }\n                    jobId = pxResponse.getJobId();\n                }\n                List<Map<String, Object>> rows = pxResponse.getRows();\n                for (Map<String, Object> row : rows) {\n                    boolean isParsingSuccess = true;\n                    List<String> recordValues = new ArrayList<>(pxExtractionDetails.getShowFields().size());\n                    String errorMsg = null;\n                    for (FieldInfo fieldInfo : pxExtractionDetails.getShowFields()) {\n                        String convertedValue = null;\n                        try {\n                            DataType dataType = FunctionHelper.getDerivedDataType(fieldInfo);\n                            String attributeName = StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName());\n                            Object obj = row.get(attributeName);\n                            if (obj != null) {\n                                if (obj instanceof String) {\n                                    convertedValue = (String) row.get(attributeName);\n                                } else {\n                                    if (obj instanceof Double && isTimeStampField(dataType)) {\n                                        convertedValue = String.valueOf(((Double) obj).longValue());\n                                    } else {\n                                        convertedValue = String.valueOf(obj);\n                                    }\n                                }\n                                if (StringUtils.isNotBlank(convertedValue)) {\n                                    if (isTimeStampField(dataType)) {\n                                        convertedValue = DateTimeUtils.convertEpochToDateTime(convertedValue, EpochUnit.MILLIS, destDateTimeFormatter, ZoneId.of(tenantDetailsDTO.getTimeZoneId()));\n                                    } else if (DataType.NUMBER.equals(dataType)) {\n                                        Locale locale = fieldInfo.getFieldLocale() == null ? Locale.US : fieldInfo.getFieldLocale().getLocale();\n                                        NumberFormat nf = NumberFormat.getInstance(locale);\n                                        try {\n                                            convertedValue = DHUtils.valueOf(nf.parse(convertedValue));\n                                        } catch (ParseException e) {\n                                            LOGGER.info(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale);\n                                            throw new DPSystemException(msg(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale), e);\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (Exception e) {\n                            isParsingSuccess = false;\n                            if (errorMsg == null) {\n                                errorMsg = msg(\"Error while parsing row : {}. {} \", row, e, e.getCause());\n                            }\n                        }\n                        recordValues.add(convertedValue);\n\n                    }\n                    if (isParsingSuccess) {\n                        parquetWriter.write(recordValues);\n                        parquetFile.addNumRecords(1);\n                    } else {\n                        if (Objects.nonNull(errorFile) && Objects.nonNull(errorWriter)) {\n                            recordValues.add(errorMsg);\n                            errorWriter.printRecord(recordValues);\n                            errorFile.setNumRecords(errorFile.getNumRecords() + 1);\n                        }\n                    }\n                }\n            }\n            LOGGER.info(\"Added {} records to parquetFile\", parquetFile.getNumRecords());\n            if (errorFile.getNumRecords() > 0) {\n                LOGGER.warn(\"Found {}  error records\", errorFile.getNumRecords());\n                LOGGER.info(\"Added {} records to errorFile\", errorFile.getNumRecords());\n            }\n            TaskResult taskResult = new TaskResult(pxExtractionDetails.getShowFields(), null, errorFile.getNumRecords());\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            if (Objects.nonNull(errorFile) && errorFile.getNumRecords() > 0) {\n                externalExtractionTaskResultBuilder.setWriteToErrorFile(true);\n                externalExtractionTaskResultBuilder.setErrorFilePath(errorFile.getAbsolutePath());\n            }\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing PX-Extraction task  {} - {}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            if (Objects.nonNull(parquetWriter)) {\n                try {\n                    parquetWriter.close();\n                } catch (Exception ex) {\n                    LOGGER.error(\"Error in closing parquet file writer\");\n                    throw new DPSystemException(\"Failed to close parquet writer\", ex);\n                }\n            }\n\n            if (Objects.nonNull(errorWriter)) {\n                try {\n                    errorWriter.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"Error in closing csv writer\");\n                    throw new DPSystemException(\"Failed to close csv writer\", e);\n                }\n            }\n        }\n\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5f91a415-cc3f-4762-b139-30e3aaec97b0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":94,"endLine":131,"content":"bfConfigProperties.getGsLogObfuscationFeatureVariationCacheExpiry(), dhobfConfigProperties.getGsLogObfuscationPatternCacheExpiry());\n                return dhFeatureUtils.getTenantLogObfuscationPatterns(MDC.get(TENANT_ID_KEY), MDC.get(REQUEST_ID_KEY));\n            }\n        } catch (Exception ex) {//NOSONAR\n            DPDTF.warn(\"[NO_OBF] Error in getting tenant obfuscation patterns: {}\", ex.getMessage(), ex);\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * Checks if obfuscation is enabled in the application.\n     *\n     * @return true if obfuscation is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationEnabledInApp() {\n        return getDHOBFConfigProperties().isGsLogOBFEnabled();\n    }\n\n    /**\n     * Checks if obfuscation metric logging is enabled.\n     *\n     * @return true if obfuscation metric logging is enabled, false otherwise.\n     */\n    @Override\n    public boolean isObfuscationMetricLogEnabled() {\n        return getDHOBFConfigProperties().isGsLogOBFEnableFilterMetricLog();\n    }\n\n    /**\n     * Retrieves the obfuscation configuration properties from dh_env_config.\n     *\n     * @return DHOBFConfigProperties object containing obfuscation configuration.\n     */\n    private DHOBFConfigProperties getDHOBFConfigProperties() {\n        try {\n            /*This is initialization block for the expiry cache which will happen once.\n            and since we already short-circuited if DeploymentProperties is not initial","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.shouldContinue","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":263,"endLine":268,"content":"    private static long shouldContinue(String hasMoreKeyword, String offsetKeyword, long offset, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(hasMoreKeyword) != null && jsonObject.get(hasMoreKeyword).getAsBoolean()) {\n            offset = jsonObject.get(offsetKeyword).getAsLong();\n        }\n        return offset;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java#L1-L44","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":1,"endLine":44,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.ErrorCode;\nimport com.gainsight.services.dataprocessing.commons.properties.MessageProperties;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport org.apache.commons.lang3.StringUtils;\n\npublic enum IpaasExtractionValidationCode implements ErrorCode {\n    FIELD_NOT_PRESENT_IN_SYSTEM(100001)\n    ;\n\n    private final int code;\n    private String className = getClass().getSimpleName();\n\n    IpaasExtractionValidationCode(int code) {\n        this.code = code;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getErrorName() {\n        return className + \"__\" + this.name();\n    }\n\n    /**\n     * Refers to User Defined Text\n     */\n    public String getUserText(Object... args) {\n        String key = getErrorName();\n        MessageProperties messageProperties = MessageProperties.getMessageProperties();\n        if(messageProperties == null){\n            return key;\n        }\n        String message = messageProperties.getValue(key);\n        if (args == null || args.length == 0) {\n            message = DPUtils.msg(message, StringUtils.EMPTY);\n        } else {\n            message = DPUtils.msg(message, args);\n        }\n        return message;\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4e9fcc83-8731-4d17-bd14-5e6bc73db5ad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":1,"endLine":40,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectionInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.filters.FilterRule;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.OrderByInfo;\nimport com.google.common.collect.Lists;\n\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * @author Manas Ranjan Sur (msur@gainsight.com)\n * created on 20-APR-2020\n * External Task for extracting records from ipaas\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class IpaasExtractionDetails {\n\n    private static final long serialVersionUID = -11278538782L;\n\n    private String connectionId;\n    private String externalEntityName;\n    private List<FieldInfo> projections;\n    private FilterRule whereClause;\n    private OrderByInfo orderByInfo;\n    private String query;\n    private String connectorType;\n    private String ucId;\n    private String ipaasStagingDetailsId;\n    private String jobId;\n    private String taskId;\n    private ConnectionInfo stagingConnectionInfo;\n    private String lastModifieldFieldPath;\n    private boolean resolvePicklist;\n    private String upsertkey;\n    private Object lastModifieldFieldValue;\n    private boolean honourLastModfiedFieldValueToFetchDeltaData;","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":65,"endLine":67,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"7eb44d0a-6a53-42b9-a19f-8028ef453b89","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":261,"endLine":288,"content":"ct);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"51ea259c-d10b-45ba-9ac0-b88b9aab1dc9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":1,"endLine":20,"content":"package com.gainsight.services.external.mssql.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.exception.ValidationCode;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java#IpaasExtractionTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":93,"endLine":95,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5be58b6f-4983-423f-8ea2-dd7fe28eebcc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":261,"endLine":283,"content":"ieldPath='\" + lastModifieldFieldPath + '\\'' +\n                \", resolvePicklist=\" + resolvePicklist +\n                \", upsertkey='\" + upsertkey + '\\'' +\n                \", lastModifieldFieldValue=\" + lastModifieldFieldValue +\n                \", honourLastModfiedFieldValueToFetchDeltaData=\" + honourLastModfiedFieldValueToFetchDeltaData +\n                \", defaultSleepTimeOnFail=\" + defaultSleepTimeOnFail +\n                \", pageSize='\" + pageSize + '\\'' +\n                \", enableDownloadSourceData=\" + enableDownloadSourceData +\n                \", maxNumberOfRetries=\" + maxNumberOfRetries +\n                \", ignoreInvalidData=\" + ignoreInvalidData +\n                \", ignorableErrorMessages=\" + ignorableErrorMessages +\n                \", queryParamForDataFetch=\" + queryParamForDataFetch +\n                '}';\n    }\n\n    public List<String> getIgnorableErrorMessages() {\n        return ignorableErrorMessages;\n    }\n\n    public void setIgnorableErrorMessages(List<String> ignorableErrorMessages) {\n        this.ignorableErrorMessages = ignorableErrorMessages;\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java#L1-L52","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/conf-file-reader-task/src/main/java/com/gainsight/services/external/conf/file/reader/task/ExternalTask.java","startLine":1,"endLine":52,"content":"package com.gainsight.services.external.conf.file.reader.task;\n\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collections;\n\n/**\n * @author sthammishetty on 04/05/20\n * <p>\n * ExternalTask to read config properties from classpath resource file [task.conf]. 'task.conf' is packaged along with the jar.\n *\n */\npublic class ExternalTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ExternalTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        LOGGER.info(\"Hello World. This is DynamicTask\");\n        LOGGER.info(\"Reading properties from config file ['task.conf']\");\n        String fileName = DeploymentProperties.getDeploymentProperties().getValue(\"file.name\");\n        String sampleKeyValue = DeploymentProperties.getDeploymentProperties().getValue(\"sample.key\");\n\n        if (StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(sampleKeyValue)) {\n            LOGGER.info(\"Read fileName from conf file 'file.name' : \" + fileName);\n            LOGGER.info(\"Value of 'sample.key' : \" + sampleKeyValue);\n        } else {\n            throw new RuntimeException(\"Failed to read properties ['file.name', 'sample.key'] from conf file\");\n\n        }\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"5559f5d0-eaab-467c-b57c-78eca98c7cad","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":143,"endLine":166,"content":"(configValue, DHOBFConfigProperties.class);\n            DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE.put(GS_LOG_OBFUSCATION_CONFIG_PROPERTY_KEY, dhobfConfigProperties);\n            return dhobfConfigProperties;\n        } catch (Exception ex) {\n            //Ignoring the exception as we don't want to fail the application startup in cases when DeploymentProperties hasn't been initialized\n            DPDTF.warn(\"[NO_OBF] Error in getting DHOBFConfigProperties: {}\", ex.getMessage(), ex);\n        }\n        return new DHOBFConfigProperties();\n    }\n\n    /**\n     * Checks if class loading should be short-circuited where DeploymentProperties is yet to be initialized.\n     *\n     * @return true if class loading should be short-circuited, false otherwise.\n     */\n    @Override\n    public boolean shortCircuitClassLoad() {\n        try {\n            return DeploymentProperties.isPropertiesServiceInitialized();\n        } catch (Throwable throwable) {\n            return false;\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"b758f251-4956-416a-bbc9-efea30bfaceb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":99,"endLine":125,"content":"e.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(mdaBaseUrl, auditMetadata, true);\n            }\n            //If no csvRecord parsing handler is added, DefaultCsvRecordParsingHandler is set for parsing each csvRecord.\n            externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(csvFile.getHeaders() != null)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing externalTask {}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUti","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9865755a-e52a-4890-9670-b8aee1c995c7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":1,"endLine":25,"content":"package com.gainsight.services.external.ipaas.extraction.task;\n\n\nimport com.gainsight.bean.SecretData;\nimport com.gainsight.context.RequestContextProvider;\nimport com.gainsight.integration.bean.IPaasConstants;\nimport com.gainsight.integration.bean.db.common.Conditions;\nimport com.gainsight.integration.bean.db.common.FieldInfo;\nimport com.gainsight.integration.bean.db.common.TaskInfo;\nimport com.gainsight.integration.bean.enums.TaskType;\nimport com.gainsight.integration.bean.enums.common.ConnectorType;\nimport com.gainsight.integration.connection.db.bean.PicklistOption;\nimport com.gainsight.integration.dataExtract.PaginatedDataExtractionService;\nimport com.gainsight.integration.dataExtract.bean.DataExtractionRequest;\nimport com.gainsight.integration.exception.externaltasks.ExternalTaskException;\nimport com.gainsight.integration.exception.externaltasks.ExternalTasksValidationCode;\nimport com.gainsight.integration.staging.beans.DatabaseConnectionRequest;\nimport com.gainsight.integration.staging.beans.IpaasStagingDetails;\nimport com.gainsight.integration.staging.beans.IpaasStagingFieldInfo;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDao;\nimport com.gainsight.integration.staging.services.IpaasStagingDetailsDaoImpl;\nimport com.gainsight.integration.staging.utils.DatabaseConnectionPoolUtility;\nimport com.gainsight.integration.utils.common.UCConstants;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.data","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setUpsertkey","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":219,"endLine":221,"content":"    public void setUpsertkey(String upsertkey) {\n        this.upsertkey = upsertkey;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d2fccd9e-335e-4f6f-8f9f-4cb09aeff100","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":17,"endLine":48,"content":"ernals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.google.common.base.Stopwatch;\nimport com.google.common.collect.Lists;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.codehaus.jackson.JsonParseException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.ObjectUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.HUBSPOT_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.se","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"1943fdac-ba06-480d-8971-196eddedc80f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":275,"endLine":299,"content":"paasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if ((i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATE\n                    || i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATETIME)\n                    && i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        return ipaasStagingFieldInfos;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ip","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0e4e920e-a714-40e7-abf5-5b16b4461f67","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":212,"endLine":235,"content":"d, jobId, taskId);\n            ipaasStagingDao.dropAndCreate(ipaasStagingDetails);\n            LOGGER.info(\"re created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDetails.setInSync(true);\n            ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n        }\n        return ipaasStagingDetails;\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static IpaasStagingDetails prepareIpaasStagingDetailsFromExtractionDetails(String tenantId,\n                                                                                       String connectionId, String jobId,\n                                                                                       IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setJobId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":163,"endLine":165,"content":"    public void setJobId(String jobId) {\n        this.jobId = jobId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java#OutOfMemoryExternalTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":26,"endLine":32,"content":"    public static void main(String[] args) {\n        List<Employee> employees = new ArrayList<>();\n        for (int i = 0; i < 100000000; i++) {\n            employees.add(new Employee(\"a\", 1));\n        }\n\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java#L1-L67","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":1,"endLine":67,"content":"package com.gainsight.services.external.too.many.open.file.task;\n\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\n\n/**\n * @author sthammishetty on 09/06/20\n * External task to test 'too many open files'.\n */\npublic class TooManyOpenFilesTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TooManyOpenFilesTask.class.getName());\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n\n        List<FileWriter> files = new ArrayList();\n        try {\n            File file = File.createTempFile(UUID.randomUUID().toString() + \"_dummy\", \".txt\");\n            FileWriter fileWriter;\n            int batchSize = 1000;\n            for (int i = 0; i < 5000; i++) {\n                try {\n                    fileWriter = new FileWriter(file);\n                    files.add(fileWriter);\n                    if (batchSize == 0) {\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            LOGGER.error(e.getMessage(), e);\n                        }\n                        batchSize = 1000;\n                    }\n                    batchSize--;\n                } catch (Exception e) {\n                    LOGGER.error(\"error creating temp file {}\", e.getMessage(), e);\n                    throw new RuntimeException(e);\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#PostgresExtractionTask.executeQueryForPostgresCopyManager","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":181,"endLine":209,"content":"    private static CsvFile executeQueryForPostgresCopyManager(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) throws SQLException, IOException {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.POSTGRES))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName()) + \"?ssl=\" + dbConnectionDetail.isSslEnabled();\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionId {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQueryWithPostgresCopyManager(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully with copy manager!!\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"340e980f-8787-4f82-aa0e-8f57b328025e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":284,"endLine":286,"content":"nager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setEnableDownloadSourceData","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":234,"endLine":236,"content":"    public void setEnableDownloadSourceData(boolean enableDownloadSourceData) {\n        this.enableDownloadSourceData = enableDownloadSourceData;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java#IpaasExtractionValidationCode.getCode","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionValidationCode.java","startLine":19,"endLine":21,"content":"    public int getCode() {\n        return code;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getJobId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":159,"endLine":161,"content":"    public String getJobId() {\n        return jobId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#RecordFormatter.RecordFormatter","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":254,"endLine":315,"content":"        private RecordFormatter() {\n            Map<String, Integer> aliasIndexMapping = new HashMap<>();\n            headers.addAll(extractDetails.getStaticFields());\n            int recordIndex = headers.size();\n            int aliasIndex = headers.size();\n            for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n                int fieldInfoIndex = 0;\n                for (FieldInfo dim : gaReportGroup.getDimensions()) {\n                    if (aliasIndexMapping.containsKey(dim.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, aliasIndexMapping.get(dim.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, recordIndex++));\n                        aliasIndexMapping.put(dim.getFieldAlias(), aliasIndex++);\n                        headers.add(dim);\n                    }\n                    fieldInfoIndex++;\n                }\n                for (FieldInfo met : gaReportGroup.getMetrics()) {\n                    if (aliasIndexMapping.containsKey(met.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, aliasIndexMapping.get(met.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, recordIndex++));\n                        aliasIndexMapping.put(met.getFieldAlias(), aliasIndex++);\n                        headers.add(met);\n                    }\n                    fieldInfoIndex++;\n                }\n            }\n        }\n\n        public List<FieldInfo> getHeaders() {\n            return headers;\n        }\n\n        private List<String> formatRecordGA4(List<DimensionValue> dimensions, List<MetricValue> metrics, GAReportGroup gaReportGroup) {\n            List<String> values = Lists.newArrayList();\n            //prepend all static values in record\n            for (FieldInfo fieldInfo : extractDetails.getStaticFields()) {\n                values.add(DHUtils.valueOf(fieldInfo.getValue()));\n            }\n\n            //padman...\n            for (int i = 0; i < headers.size(); i++) {\n                values.add(null);\n            }\n\n            String name = gaReportGroup.getName();\n            int fieldIndex = 0;\n            for (DimensionValue dimension : dimensions) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), dimension.getValue());\n                fieldIndex++;\n            }\n\n            for (MetricValue metric : metrics) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), metric.getValue());\n                fieldIndex++;\n            }\n            return values;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#IpaasStagingLoadTask.updateFieldInfosInStagingDetails","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":271,"endLine":297,"content":"    private static List<IpaasStagingFieldInfo> updateFieldInfosInStagingDetails(IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if ((i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATE\n                    || i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATETIME)\n                    && i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        return ipaasStagingFieldInfos;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java#GA4ConnectionInfo.setRefreshToken","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":25,"endLine":27,"content":"    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java#PxExtractionTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":61,"endLine":276,"content":"public class PxExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(PxExtractionTask.class);\n    private static final String DEFAULT_PAGE_SIZE = \"1000\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetWriter<List<String>> parquetWriter = null;\n        DPFile errorFile;\n        CSVPrinter errorWriter = null;\n        ParquetFile parquetFile = null;\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            PXExtractionDetails pxExtractionDetails = DHUtils.convertJsonToObject(metaData.get(PX_EXTRACT_DETAILS_KEY), PXExtractionDetails.class);\n            PXAccessDetails accessDetails = DHUtils.convertJsonToObject(metaData.get(PX_ACCESS_DETAILS_KEY), PXAccessDetails.class);\n\n            String connectorId = accessDetails.getConnectorId();\n            Pair<String, String> aptrinsicKeyURLPair = PxUtil.getAptrinsicKey(tenantId, ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), connectorId);\n            String apiKey = aptrinsicKeyURLPair.getKey();\n            String pxURL = aptrinsicKeyURLPair.getValue();\n            PxUtil.convertDateFilterToEpochInFilterRule(pxExtractionDetails.getWhereClause(), ExternalTaskUtil.getExternalTaskRequestContext().getWorkflowSystemProperties(), getDeploymentProperties().getValue(DEFAULT_DATE_FORMAT_KEY));\n            TenantDetailsDTO tenantDetailsDTO = externalTaskRequestContext.getTenantDetailsDTO();\n            parquetFile = new ParquetFile(getTempFilePath(tenantId, jobId, externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".parquet\"));\n            errorFile = getErrorFile(taskId + \"_error.csv\");\n            List<String> showFieldsList = getFieldNames(pxExtractionDetails.getShowFields());\n            errorWriter = getErrorWriter(showFieldsList, errorFile);\n            parquetWriter = getParquetWriter(showFieldsList, pxExtractionDetails.getShowFields(), parquetFile);\n\n            String pageSize = String.valueOf(accessDetails.getPageSize() != 0 ? accessDetails.getPageSize() : StringUtils.defaultIfBlank(getProperties().getProperty(\"px.page.size\"), DEFAULT_PAGE_SIZE));\n            PXExtractInfo pxExtractInfo = new PXExtractInfo();\n            pxExtractInfo.setAccessDetails(accessDetails);\n            pxExtractInfo.setPxExtractionDetails(pxExtractionDetails);\n\n            boolean isFinalResult = false;\n            String nextPageToken = null;\n            LOGGER.info(\"Fetching events using POST call to endpoint: {} with body {} \", pxURL, DHUtils.convertObjectToJson(pxExtractionDetails));\n            DateTimeFormatter destDateTimeFormatter = getDestinationDateTimeFormatter(tenantId);\n            while (!isFinalResult) {\n                PXResponse pxResponse = PxUtil.fetchEvents(pxExtractInfo, jobId, apiKey, pxURL, nextPageToken, pageSize, false);\n                nextPageToken = null;\n                isFinalResult = true;\n                if (!pxResponse.isLastPage()) {\n                    nextPageToken = pxResponse.getNextPageToken();\n                    if (StringUtils.isNotBlank(nextPageToken)) {\n                        isFinalResult = false;\n                    }\n                    jobId = pxResponse.getJobId();\n                }\n                List<Map<String, Object>> rows = pxResponse.getRows();\n                for (Map<String, Object> row : rows) {\n                    boolean isParsingSuccess = true;\n                    List<String> recordValues = new ArrayList<>(pxExtractionDetails.getShowFields().size());\n                    String errorMsg = null;\n                    for (FieldInfo fieldInfo : pxExtractionDetails.getShowFields()) {\n                        String convertedValue = null;\n                        try {\n                            DataType dataType = FunctionHelper.getDerivedDataType(fieldInfo);\n                            String attributeName = StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName());\n                            Object obj = row.get(attributeName);\n                            if (obj != null) {\n                                if (obj instanceof String) {\n                                    convertedValue = (String) row.get(attributeName);\n                                } else {\n                                    if (obj instanceof Double && isTimeStampField(dataType)) {\n                                        convertedValue = String.valueOf(((Double) obj).longValue());\n                                    } else {\n                                        convertedValue = String.valueOf(obj);\n                                    }\n                                }\n                                if (StringUtils.isNotBlank(convertedValue)) {\n                                    if (isTimeStampField(dataType)) {\n                                        convertedValue = DateTimeUtils.convertEpochToDateTime(convertedValue, EpochUnit.MILLIS, destDateTimeFormatter, ZoneId.of(tenantDetailsDTO.getTimeZoneId()));\n                                    } else if (DataType.NUMBER.equals(dataType)) {\n                                        Locale locale = fieldInfo.getFieldLocale() == null ? Locale.US : fieldInfo.getFieldLocale().getLocale();\n                                        NumberFormat nf = NumberFormat.getInstance(locale);\n                                        try {\n                                            convertedValue = DHUtils.valueOf(nf.parse(convertedValue));\n                                        } catch (ParseException e) {\n                                            LOGGER.info(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale);\n                                            throw new DPSystemException(msg(\"Error while parsing number:{} with given Locale:{}\", convertedValue, locale), e);\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (Exception e) {\n                            isParsingSuccess = false;\n                            if (errorMsg == null) {\n                                errorMsg = msg(\"Error while parsing row : {}. {} \", row, e, e.getCause());\n                            }\n                        }\n                        recordValues.add(convertedValue);\n\n                    }\n                    if (isParsingSuccess) {\n                        parquetWriter.write(recordValues);\n                        parquetFile.addNumRecords(1);\n                    } else {\n                        if (Objects.nonNull(errorFile) && Objects.nonNull(errorWriter)) {\n                            recordValues.add(errorMsg);\n                            errorWriter.printRecord(recordValues);\n                            errorFile.setNumRecords(errorFile.getNumRecords() + 1);\n                        }\n                    }\n                }\n            }\n            LOGGER.info(\"Added {} records to parquetFile\", parquetFile.getNumRecords());\n            if (errorFile.getNumRecords() > 0) {\n                LOGGER.warn(\"Found {}  error records\", errorFile.getNumRecords());\n                LOGGER.info(\"Added {} records to errorFile\", errorFile.getNumRecords());\n            }\n            TaskResult taskResult = new TaskResult(pxExtractionDetails.getShowFields(), null, errorFile.getNumRecords());\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            if (Objects.nonNull(errorFile) && errorFile.getNumRecords() > 0) {\n                externalExtractionTaskResultBuilder.setWriteToErrorFile(true);\n                externalExtractionTaskResultBuilder.setErrorFilePath(errorFile.getAbsolutePath());\n            }\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing PX-Extraction task  {} - {}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        } finally {\n            if (Objects.nonNull(parquetWriter)) {\n                try {\n                    parquetWriter.close();\n                } catch (Exception ex) {\n                    LOGGER.error(\"Error in closing parquet file writer\");\n                    throw new DPSystemException(\"Failed to close parquet writer\", ex);\n                }\n            }\n\n            if (Objects.nonNull(errorWriter)) {\n                try {\n                    errorWriter.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"Error in closing csv writer\");\n                    throw new DPSystemException(\"Failed to close csv writer\", e);\n                }\n            }\n        }\n\n    }\n\n    private static DateTimeFormatter getDestinationDateTimeFormatter(String tenantId) {\n        try {\n            String pxOutputDatetimeFormat = getProperties().getProperty(\"px.output.datetime.format\", \"yyyy-MM-dd'T'HH:mm:ss['.'SSS][XXXXX]\");\n            String pxCustomDatetimeFormatterEnabledTenantsString = getProperties().getProperty(\"px.custom.datetime.format.enabled.tenants\", StringUtils.EMPTY);\n            Set<String> pxCustomDatetimeFormatterEnabledTenants = StringUtils.isNotBlank(pxCustomDatetimeFormatterEnabledTenantsString) ?\n                    Sets.newHashSet(pxCustomDatetimeFormatterEnabledTenantsString.split(\"\\\\s*,\\\\s*\")) : Sets.newHashSet();\n\n            if (BooleanUtils.toBoolean(getProperties().getProperty(\"px.output.custom.datetime.format.enabled\", \"false\")) || pxCustomDatetimeFormatterEnabledTenants.contains(tenantId)) {\n                LOGGER.info(\"Using custom PX output datetime format: {} for tenant: {}\", pxOutputDatetimeFormat, tenantId);\n                return DateTimeFormatter.ofPattern(pxOutputDatetimeFormat);\n            }\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in getting custom datetime format, using default ISO_OFFSET_DATE_TIME format. Reason: {}.\", ex.getMessage());\n        }\n\n        return ISO_OFFSET_DATE_TIME;\n    }\n\n    private static DPFile getErrorFile(String errorFilePath) {\n        DPFile errorFile = new DPFile(new File(errorFilePath).getAbsolutePath()) {\n        };\n        return errorFile;\n    }\n\n    private static CSVPrinter getErrorWriter(List<String> headers, DPFile errorFile) {\n        CSVPrinter csvPrinter = null;\n        try {\n            headers.add(\"Error Message\");\n            CSVFormat csvFormat = CSVFormat.DEFAULT;\n            String[] headersArr = Iterables.toArray(headers, String.class);\n            CSVFormat format = csvFormat.withHeader(headersArr).withSkipHeaderRecord(false);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(errorFile)), format);\n        } catch (Exception e) {\n            LOGGER.error(\"Error while creating csvWriter for error file {}\", e.getMessage());\n        }\n        return csvPrinter;\n    }\n\n    private static ParquetWriter<List<String>> getParquetWriter(List<String> headers, List<FieldInfo> showFields, ParquetFile parquetFile) {\n        parquetFile.setHeaders(headers);\n        try {\n            return new TextRecordParquetWriterBuilder(new Path(parquetFile.toURI()), showFields)\n                    .withRowGroupSize(10 * 1000 * 1000)\n                    .withWriteMode(ParquetFileWriter.Mode.OVERWRITE)\n                    .withCompressionCodec(CompressionCodecName.SNAPPY).build();\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in creating parquet file - probably error during writing schema.\");\n            throw new DPSystemException(\"Failed to create parquet file\", ex);\n        }\n\n    }\n\n    private static List<String> getFieldNames(List<FieldInfo> showFields) {\n        return showFields.stream()\n                .map(fieldInfo -> StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName()))\n                .collect(Collectors.toList());\n    }\n\n    private static boolean isTimeStampField(DataType dataType) {\n        return dataType != null && dataType.equals(DataType.TIMESTAMP) || dataType.equals(DataType.DATE) || dataType.equals(DataType.DATETIME);\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java#Employee.Employee","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/out-of-memory-task/src/main/java/com/gainsight/services/external/outofmemory/task/OutOfMemoryExternalTask.java","startLine":38,"endLine":42,"content":"        public Employee(String name, int age) {\n            this.name = name;\n            this.age = age;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#IpaasStagingLoadTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":56,"endLine":312,"content":"public class IpaasStagingLoadTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(IpaasStagingLoadTask.class);\n\n    public static final String IPAAS_STAGING_LOAD_DETAILS_KEY = \"ipaasStagingLoadDetails\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        //Get workflowJobDetails of given jobId\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        LOGGER.info(\"Request to ipaas staging load started !!  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        List<File> inputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n\n\n            // Get source S3 path on which free form query needs to be executed and convert it to apache drill path\n            List<String> parents = convertJsonToObject(metaData.get(\"parents\"), new TypeReference<List<String>>() {\n            });\n            Precondition.isNotEmpty(parents, ValidationCode.GENERIC_SYSTEM_ERROR, \"Parents in metadata is empty!\");\n\n            IpaasStagingLoadDetails ipaasStagingLoadDetails =\n                    convertJsonToObject(metaData.get(IPAAS_STAGING_LOAD_DETAILS_KEY), IpaasStagingLoadDetails.class);\n\n            //fetch dp staging details\n            BasicDataSource dataSource = getIpaasStagingConnectionDataSource(workflowJobDetails, tenantId, jobId,\n                    taskId, ipaasStagingLoadDetails, externalTaskRequestContext);\n            IpaasStagingDetails ipaasStagingDetails = null;\n            if (ipaasStagingLoadDetails.getStagingConnectionInfo() != null) {\n                ipaasStagingDetails = stagingDetailsProcessing(workflowJobDetails, tenantId, jobId, taskId,\n                        ipaasStagingLoadDetails, dataSource);\n            }\n\n            IpaasStagingDao stagingDao = new IpaasStagingDaoImpl(dataSource);\n\n            //Download Ready csv File from parent task\n            LOGGER.info(\"Downloading parent task CSV file for tId- {}, jobId- {}, taskId- {}, staging details: {}\",\n                    tenantId, jobId, taskId, ipaasStagingDetails);\n\n            String directory = ExternalTaskUtil.downloadParentTaskResults(externalTaskRequestContext, parents.get(0));\n            LOGGER.info(\"Parent directory name for  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    parents.get(0), directory);\n            File folder = new File(directory);\n            inputFiles = Arrays.asList(folder.listFiles());\n            LOGGER.info(\"input file names  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId,\n                    inputFiles.stream().map(i -> i.toString()).collect(Collectors.joining(\" , \")));\n\n            int recordsAffected = 0;\n            for (File file : inputFiles) {\n                recordsAffected += stagingDao.batchUpsert(ipaasStagingDetails, file, ipaasStagingLoadDetails.getTenantZoneId());\n            }\n\n            LOGGER.info(\"{} records affected for  tId- {}, jobId- {}, taskId- {}\", recordsAffected, tenantId, jobId, taskId);\n            List<FieldInfo> fieldInfos = Lists.newArrayList();\n            FieldInfo fieldInfo;\n            for (IpaasStagingFieldInfo ipaasStagingFieldInfo : ipaasStagingDetails.getFieldInfos()) {\n                fieldInfo = new FieldInfo();\n                fieldInfo.setName(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setFieldAlias(ipaasStagingFieldInfo.getDbName());\n                fieldInfo.setDataType(DataType.getDataType(ipaasStagingFieldInfo.getDataType()));\n                fieldInfos.add(fieldInfo);\n            }\n            TaskResult taskResult = new TaskResult(null, recordsAffected, fieldInfos, null);\n            ExternalTaskResult externalTaskResult = new ExternalTaskResult(taskResult, true);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing IpaasStagingLoad external.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex);\n            if (ex instanceof ExternalTaskException)\n                throw new ExternalTaskException(((ExternalTaskException) ex).getHttpStatus(),\n                        ((ExternalTaskException) ex).getErrorCode(), ((ExternalTaskException) ex).getErrorMessage(), ex.getMessage());\n            else if (ex instanceof DPSystemException)\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.DP_SYSTEM_EXCPETION,\n                        String.format(\"Failing with DP system exception due to : %s\", ex));\n            else\n                throw new ExternalTaskException(500, ExternalTasksValidationCode.GENERIC_ERROR,\n                        String.format(\"Failing with some exception due to : %s\", ex));\n        } finally {\n            if (CollectionUtils.isNotEmpty(inputFiles)) {\n                inputFiles.forEach(FileUtils::deleteQuietly);\n            }\n            LOGGER.error(\"Request to ipaas staging load completed in {} secs for  tId- {}, jobId- {}, taskId- {}\",\n                    stopwatch.elapsed(TimeUnit.SECONDS), tenantId, jobId, taskId);\n        }\n    }\n\n\n    private static BasicDataSource getIpaasStagingConnectionDataSource(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                       String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                       ExternalTaskRequestContext externalTaskRequestContext) {\n        String configSourceUrl = ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails);\n        String gsB2BSecret = DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n        LOGGER.info(\"MDA call out to fetch ipaas staging postgres details started uc connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n        PNPConnectionInput pnpConnectionInput = mdaCalloutsService.getConnectionDetails(\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), externalTaskRequestContext.getTenantId());\n\n        PNPConnectionsInfo pnpConnectionsInfo = pnpConnectionInput.getPnpConnectionsInfo();\n        RelationalDBConnectionDetail relationalDBConnectionDetail =\n                (RelationalDBConnectionDetail) pnpConnectionsInfo.getConnectionDetail();\n        LOGGER.info(\"Fetching ipaas staging postgres details ended. connectionId- {}, tId- {}, jobId- {}, taskId- {}\",\n                ipaasStagingLoadDetails.getStagingConnectionInfo().getConnectionId(), tenantId, jobId, taskId);\n        StringBuilder url = new StringBuilder();\n        url.append(CryptUtil.decrypt(relationalDBConnectionDetail.getHost())).append(\":\")\n                .append(CryptUtil.decrypt(relationalDBConnectionDetail.getPort()));\n        DatabaseConnectionRequest databaseConnectionRequest = new DatabaseConnectionRequest(\n                url.toString(),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getDataBaseName()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getUser()),\n                CryptUtil.decrypt(relationalDBConnectionDetail.getPwd()),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"minIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"maxIdle\"))),\n                Integer.parseInt(String.valueOf(pnpConnectionsInfo.getProperties().get(\"initialSize\"))));\n        databaseConnectionRequest.setSslEnabled(relationalDBConnectionDetail.isSslEnabled());\n        return DatabaseConnectionPoolUtility.getOrCreateConnection(databaseConnectionRequest);\n    }\n\n    private static IpaasStagingDetails stagingDetailsProcessing(DPWorkflowJobDetailsDTO workflowJobDetails, String tenantId, String jobId,\n                                                                String taskId, IpaasStagingLoadDetails ipaasStagingLoadDetails,\n                                                                BasicDataSource dataSource) throws Exception {\n\n        IpaasStagingDetailsDao ipaasStagingDetailsDao = new IpaasStagingDetailsDaoImpl(dataSource);\n        LOGGER.info(\"fetching staging details.  tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        IpaasStagingDetails ipaasStagingDetails = ipaasStagingDetailsDao.findStagingDetails(workflowJobDetails.getTenantId(),\n                ipaasStagingLoadDetails.getTaskId(), ipaasStagingLoadDetails.getJobId());\n\n        IpaasStagingDao ipaasStagingDao = new IpaasStagingDaoImpl(dataSource);\n        if (ipaasStagingDetails == null) {\n            LOGGER.info(\"Preparing ipaas staging postgres details as No staging details found for tId- {}, jobId- {}, taskId- {}\",\n                    tenantId, jobId, taskId);\n            ipaasStagingDetails = prepareIpaasStagingDetailsFromExtractionDetails(\n                    workflowJobDetails.getTenantId(), ipaasStagingLoadDetails.getConnectionId(),\n                    ipaasStagingLoadDetails.getJobId(), ipaasStagingLoadDetails);\n            ipaasStagingDetailsDao.insert(ipaasStagingDetails);\n            LOGGER.info(\"Inserting staging details metadata  for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.create(ipaasStagingDetails);\n            LOGGER.info(\"Created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n        }\n\n        //checking and updating field Infos & columns\n        if (!ipaasStagingDetails.isInSync() || !checkSyncStatusForStagingDetails(ipaasStagingDetails, ipaasStagingLoadDetails)\n                || isUpsertKeyChanged(ipaasStagingDetails, ipaasStagingLoadDetails.getUpsertkey())) {\n\n            LOGGER.info(\"full sync required . Hence changing from date in filter for jobId:{}, taskId:{}, tenantId:{}. \",\n                    jobId, taskId, workflowJobDetails.getTenantId());\n            List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = updateFieldInfosInStagingDetails(ipaasStagingLoadDetails);\n            ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n            ipaasStagingDetailsDao.updateIpaasStagingFieldInfosByID(ipaasStagingDetails);\n            LOGGER.info(\"updating fieldinfo metadata in staging details for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDao.dropAndCreate(ipaasStagingDetails);\n            LOGGER.info(\"re created staging table for tId- {}, jobId- {}, taskId- {}\", tenantId, jobId, taskId);\n            ipaasStagingDetails.setInSync(true);\n            ipaasStagingDetailsDao.updateInSyncByJobIdAndTaskId(ipaasStagingDetails);\n        }\n        return ipaasStagingDetails;\n    }\n\n    private static boolean isUpsertKeyChanged(IpaasStagingDetails ipaasStagingDetails, String newUpsertKey) {\n        boolean upsertKeyChanged = false;\n        if (CollectionUtils.isNotEmpty(ipaasStagingDetails.getFieldInfos()) && StringUtils.isNotEmpty(newUpsertKey)) {\n            Optional<IpaasStagingFieldInfo> ipaasStagingFieldInfo = ipaasStagingDetails.getFieldInfos().stream().filter(fieldInfo -> fieldInfo.isUpsertKey()).findFirst();\n            if (!ipaasStagingFieldInfo.isPresent() || !ipaasStagingFieldInfo.get().getFieldName().equalsIgnoreCase(newUpsertKey)) {\n                upsertKeyChanged = true;\n                LOGGER.info(\"new upsertKey selected. {}\", newUpsertKey);\n            }\n        }\n        return upsertKeyChanged;\n    }\n\n    private static IpaasStagingDetails prepareIpaasStagingDetailsFromExtractionDetails(String tenantId,\n                                                                                       String connectionId, String jobId,\n                                                                                       IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        IpaasStagingDetails ipaasStagingDetails = new IpaasStagingDetails();\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if (i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        ipaasStagingDetails.setFieldInfos(ipaasStagingFieldInfos);\n        ipaasStagingDetails.setTenantId(tenantId);\n        ipaasStagingDetails.setConnectorJobId(jobId);\n        ipaasStagingDetails.setConnectionId(connectionId);\n        ipaasStagingDetails.setTaskId(ipaasStagingLoadDetails.getTaskId());\n        ipaasStagingDetails.setTableName(String.format(\"ips_%s_%s_%s\", tenantId.substring(0, tenantId.indexOf(\"-\")),\n                jobId.replaceAll(\"-\", \"\"),\n                ipaasStagingLoadDetails.getTaskId().replaceAll(\"-\", \"\")).toLowerCase());\n        ipaasStagingDetails.setInSync(true);\n        return ipaasStagingDetails;\n    }\n\n    private static List<IpaasStagingFieldInfo> updateFieldInfosInStagingDetails(IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n\n        List<IpaasStagingFieldInfo> ipaasStagingFieldInfos = new ArrayList<>();\n        ipaasStagingLoadDetails.getProjections().stream().forEach(i -> {\n            IpaasStagingFieldInfo ipaasStagingFieldInfo = new IpaasStagingFieldInfo();\n            ipaasStagingFieldInfo.setFieldName(i.getFieldAlias());\n            ipaasStagingFieldInfo.setDbName(i.getFieldAlias().toLowerCase());\n            ipaasStagingFieldInfo.setDataType(i.getDataType().getDataType());\n            if (i.getFieldAlias().equalsIgnoreCase(ipaasStagingLoadDetails.getUpsertkey())) {\n                ipaasStagingFieldInfo.setUpsertKey(true);\n            }\n            if ((i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATE\n                    || i.getDataType() == com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType.DATETIME)\n                    && i.getDateTimeProperties() != null) {\n                DateTimeProperties dateTimeProperties = new DateTimeProperties();\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getFormat())) {\n                    dateTimeProperties.setFormat(i.getDateTimeProperties().getFormat());\n                }\n                if (StringUtils.isNotEmpty(i.getDateTimeProperties().getTimeZoneId())) {\n                    dateTimeProperties.setTimeZoneId(i.getDateTimeProperties().getTimeZoneId());\n                }\n                ipaasStagingFieldInfo.setDateTimeProperties(dateTimeProperties);\n            }\n            ipaasStagingFieldInfos.add(ipaasStagingFieldInfo);\n        });\n        return ipaasStagingFieldInfos;\n    }\n\n    private static boolean checkSyncStatusForStagingDetails(IpaasStagingDetails ipaasStagingDetails,\n                                                            IpaasStagingLoadDetails ipaasStagingLoadDetails) {\n        Set<String> sourceFieldNames = ipaasStagingLoadDetails.getProjections()\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"382eed73-003a-4058-9c03-aef70b80c2b7","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":117,"endLine":134,"content":"       LOGGER.debug(\"Request to hubspot fetch completed in {} secs\", stopwatch.elapsed(TimeUnit.SECONDS));\n        }\n    }\n\n    private static void extractDataFromHubspot(ExternalTaskRequestContext externalTaskRequestContext, DPWorkflowJobDetailsDTO workflowJobDetails,\n                                               HubspotExtractDetails fetchTaskDetails, AuditMetadata auditMetadata,\n                                               List<File> uncompressedInputFiles) throws Exception {\n        MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(), TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n        JsonObject jsonObject = mdaCalloutsService.getConnectionDetailsFromConnectors(fetchTaskDetails.getConnectorId(), CONNECTOR_TYPE);\n        isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n        HubspotAccessDetails accessDetailsFromDB = extractAccessDetails(jsonObject);\n        uncompressedInputFiles.addAll(readData(workflowJobDetails, externalTaskRequestContext, accessDetailsFromDB, fetchTaskDetails));\n    }\n\n    private static HubspotAccessDetails extractAccessDetails(JsonObject jsonObject) {\n        JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(jsonObject.get(DATA).getAsJsonObject().get(VALUE).getAsString())).getAsJsonObject();\n        HubspotAccessDetails accessDetails = null;\n        if (!decryptedObject.isJsonNu","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"0f883deb-6830-470b-ada8-e44e19ad746c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":46,"endLine":58,"content":"Result(taskResult);\n\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing GA4 Task.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"adfe5797-19f7-48ee-8e42-47c529d97fc1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/too-many-open-files-task/src/main/java/com/gainsight/services/external/too/many/open/file/task/TooManyOpenFilesTask.java","startLine":35,"endLine":67,"content":"       File file = File.createTempFile(UUID.randomUUID().toString() + \"_dummy\", \".txt\");\n            FileWriter fileWriter;\n            int batchSize = 1000;\n            for (int i = 0; i < 5000; i++) {\n                try {\n                    fileWriter = new FileWriter(file);\n                    files.add(fileWriter);\n                    if (batchSize == 0) {\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            LOGGER.error(e.getMessage(), e);\n                        }\n                        batchSize = 1000;\n                    }\n                    batchSize--;\n                } catch (Exception e) {\n                    LOGGER.error(\"error creating temp file {}\", e.getMessage(), e);\n                    throw new RuntimeException(e);\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fba0a350-3562-4fb8-8611-e8fe6136a6fc","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4ServiceImpl.java","startLine":24,"endLine":62,"content":"ants.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\n\n/**\n * Created by ptarika on 12/12/2021.\n */\npublic class GA4ServiceImpl implements GA4Service {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(GA4ServiceImpl.class);\n\n    private final GA4ConnectionInfo connectionInfo;\n    private AnalyticsData analyticsData;\n\n\n    GA4ServiceImpl(GA4ConnectionInfo connectionInfo) {\n        this.connectionInfo = connectionInfo;\n        initialize();\n    }\n\n    private void initialize() {\n        try {\n            JsonFactory jsonFactory = new JacksonFactory();\n            HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();\n\n            String refreshToken = connectionInfo.getRefreshToken();\n            String clientId = connectionInfo.getClientId();\n            String clientSecret = connectionInfo.getClientSecret();\n\n            GoogleRefreshTokenRequest googleRefreshTokenRequest =\n                    new GoogleRefreshTokenRequest(httpTransport, jsonFactory, refreshToken, clientId, clientSecret);\n            GoogleTokenResponse tokenResponse = googleRefreshTokenRequest.execute();\n\n            GoogleCredential credential = new GoogleCredential\n                    .Builder()\n                    .setClientSecrets(clientId, clientSecret)\n                    .setJsonFactory(jsonFactory)\n                    .setTransport(httpTransport)\n                    .build()\n                    .setA","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"df5d062f-c59c-4f2b-982d-2b1d3adaa6f0","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":32,"endLine":70,"content":"at;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.*;\nimport java.util.*;\n\nimport static com.gainsight.services.dataprocessing.commons.audit.AuditMetadata.newInstance;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sthammishetty on 16/03/20\n */\npublic class MsSqlExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MsSqlExtractionTask.class);\n    private static final int SQL_EXTRACTION_QUERY_LIMIT = 10000;\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        ExternalExtractionTaskResult externalExtractionTaskResult = null;\n        try {\n            Map<String, Object> systemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            S","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setConnectorType","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":147,"endLine":149,"content":"    public void setConnectorType(String connectorType) {\n        this.connectorType = connectorType;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"ace91547-a153-4d4d-837f-275bdb82e3ef","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":140,"endLine":164,"content":"ataBaseName());\n            if (dbConnectionDetail.isSslEnabled()) {\n                connectionUrl += \";encrypt=true\";\n            }\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnabled());\n            csvFile = executeQuery(connectionParamPojo, msSqlExtractQuery, sqlQueryInfo, externalTaskRequestContext);\n        } catch (Exception ex) {\n            LOGGER.error(\"{}-{}\", ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n        return csvFile;\n    }\n\n    private static CsvFile executeQuery(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo, ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        int offset = 0;\n        int recordsRetrieved = 0;\n        Connection connection = null;\n        CsvFile csvFile = null;\n        CSVPrinter csvPrinter = null;\n        try {\n            csvFile = getCsvFileForSQLExtract(externalTaskRequestContext);\n            List<String> headers = new ArrayList<>();\n            sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n            csvFile.setHeaders(headers);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC).withHeader(headers.toArray(new ","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"cf6a8c7c-988a-4c94-9ba4-c9d1455c81f8","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":31,"endLine":60,"content":".helpers.SqlQueryBuilderHelper;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.SQLException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.*;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.DataExtractorConstants.SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.pojo.DataType.DATE;\nimport static com.gainsight.services.dataprocessing.commons.pojo.DataType.DATETIME;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.validateGA4Response","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":188,"endLine":193,"content":"    private RunReportResponse validateGA4Response(BatchRunReportsResponse response) {\n        isNotNull(response, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        List<RunReportResponse> reports = response.getReports();\n        assertState(CollectionUtils.isNotEmpty(reports) && reports.size() == 1, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        return reports.get(0);\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e0e4c2b3-de4c-40a9-9311-5fce83ea7710","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":251,"endLine":285,"content":"ValidationCode.UNKNOWN_SERVER_ERROR);\n            }\n        } finally {\n            if (statement != null) {\n                try {\n                    statement.close();\n                } catch (SQLException e) {\n                    LOGGER.warn(\"Error while closing jdbc statement object \");\n                }\n            }\n        }\n        return dbResultPojo;\n    }\n\n    private static JSONArray convertToJSON(ResultSet resultSet) throws Exception {\n        JSONArray jsonArray = new JSONArray();\n        while (resultSet.next()) {\n            int columnCount = resultSet.getMetaData().getColumnCount();\n            JSONObject jsonObject = new JSONObject();\n            for (int i = 0; i < columnCount; ++i) {\n                Object object = resultSet.getObject(i + 1);\n                if (object == null) {\n                    object = JSONObject.NULL;\n                }\n                jsonObject.put(resultSet.getMetaData().getColumnLabel(i + 1).toLowerCase(), object);\n            }\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray;\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"45ebfe74-f5d2-41a8-ada0-cbdf5ffebe2e","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java","startLine":1,"endLine":21,"content":"package com.gainsight.services.external.ga4.extraction.task.service;\n\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsResponse;\nimport com.google.api.services.analyticsdata.v1beta.model.RunReportRequest;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * Created by ptarika on 16/12/21.\n */\npublic interface GA4Service {\n\n    static GA4Service initialize(GA4ConnectionInfo connectionInfo) {\n        return new GA4ServiceImpl(connectionInfo);\n    }\n\n    BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException;\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"fc0c176b-a163-4c05-982a-d98c7ec4b288","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":18,"endLine":39,"content":"ocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport com.mysql.cj.jdbc.AbandonedConnectionCleanupThread;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.fetchAccountDetailsFromMDA","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":166,"endLine":186,"content":"    private GAAccessDetails fetchAccountDetailsFromMDA(GAAccessDetails gaAccessDetails) {\n\n        GAAccessDetails gaAccessDetailsWithCredentials = new GAAccessDetails();\n\n        MDACalloutService mdaCalloutService = new MDACalloutService().withMdaBaseUrl(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails)).\n                withAuthToken(CryptUtil.encrypt(getDeploymentProperties().getValue(DH_B2B_SECRET))).withSharedSecretHeaderKey(\"secret\").withTenantId(workflowJobDetails.getTenantId());\n\n        logInfo(jobId, DHUtils.msg(\" Calling MDA Rest Api to fetch accountDetails for mdaConnectionId:{}, GA accountId:{} and tenant:{}\", gaAccessDetails.getConnectionId(), gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Map<String, Object> connectionDetails = mdaCalloutService.getConnectionDetails(UDMAccountType.GOOGLE_ANALYTICS, gaAccessDetails.getConnectionId());\n\n        Precondition.assertState(MapUtils.isNotEmpty(connectionDetails), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty response received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientId\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientId received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientSecret\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientSecret received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"refreshToken\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty refreshToken received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        // Setting encrypted GA access details from MDA\n        gaAccessDetailsWithCredentials.setClientId(valueOf(connectionDetails.get(\"clientId\")));\n        gaAccessDetailsWithCredentials.setClientSecret(valueOf(connectionDetails.get(\"clientSecret\")));\n        gaAccessDetailsWithCredentials.setRefreshToken(valueOf(connectionDetails.get(\"refreshToken\")));\n        gaAccessDetailsWithCredentials.setAccountId(gaAccessDetails.getAccountId());\n        return gaAccessDetailsWithCredentials;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getIpaasStagingDetailsId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":175,"endLine":177,"content":"    public String getIpaasStagingDetailsId() {\n        return ipaasStagingDetailsId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"57ddedfe-18c1-4e3d-ab80-5745631bbe30","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":42,"endLine":78,"content":"tory.getLogger(\"DPDTF\");\n\n    // List of packages disabled for obfuscation(Corresponding to the individual repositories)\n    private static final List<String> packagesDisabledForObfuscation = Lists.newArrayList();\n    private static ExpiryCache<String, DHOBFConfigProperties> DH_OBF_CONFIG_PROPERTIES_EXPIRY_CACHE = null;\n\n    static {\n        packagesDisabledForObfuscation.add(\"DPDTF\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.external.commons.DPDynamicTaskTurboFilter\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.properties\");\n        packagesDisabledForObfuscation.add(\"com.gainsight.services.dataprocessing.commons.cryptography\");\n    }\n\n    /**\n     * Retrieves the list of packages enabled for obfuscation.\n     *\n     * @return List of package names enabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesEnabledForObfuscation() {\n        return getDHOBFConfigProperties().getGsLogOBFPackagesEnabled();\n    }\n\n    /**\n     * Retrieves the list of packages disabled for obfuscation.\n     *\n     * @return List of package names disabled for obfuscation.\n     */\n    @Override\n    public List<String> getPackagesDisabledForObfuscation() {\n        List<String> packages = DHLogObfuscationUtil.disabledPackagesForObfuscation(getDHOBFConfigProperties());\n        packages.addAll(packagesDisabledForObfuscation);\n        return packages;\n    }\n\n    /**\n     * Retrieves the obfuscation patterns fo","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#GA4ExtractHelper.getDimensionV4","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":241,"endLine":243,"content":"    private Dimension getDimensionV4(FieldInfo fieldInfo) {\n        return new Dimension().setName(fieldInfo.getName());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3195ac75-2d63-4a10-b8e9-ca45252e6fcb","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":256,"endLine":276,"content":"            return new TextRecordParquetWriterBuilder(new Path(parquetFile.toURI()), showFields)\n                    .withRowGroupSize(10 * 1000 * 1000)\n                    .withWriteMode(ParquetFileWriter.Mode.OVERWRITE)\n                    .withCompressionCodec(CompressionCodecName.SNAPPY).build();\n        } catch (Exception ex) {\n            LOGGER.error(\"Error in creating parquet file - probably error during writing schema.\");\n            throw new DPSystemException(\"Failed to create parquet file\", ex);\n        }\n\n    }\n\n    private static List<String> getFieldNames(List<FieldInfo> showFields) {\n        return showFields.stream()\n                .map(fieldInfo -> StringUtils.defaultIfBlank(fieldInfo.getFieldAlias(), fieldInfo.getName()))\n                .collect(Collectors.toList());\n    }\n\n    private static boolean isTimeStampField(DataType dataType) {\n        return dataType != null && dataType.equals(DataType.TIMESTAMP) || dataType.equals(DataType.DATE) || dataType.equals(DataType.DATETIME);\n    }\n}\n\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java#IpaasStagingLoadTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-staging-load/src/main/java/com/gainsight/services/external/ipaas/staging/task/IpaasStagingLoadTask.java","startLine":62,"endLine":64,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.main","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":84,"endLine":86,"content":"    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"61260d99-c3a3-4aa2-8845-3dbb5f7f117f","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":159,"endLine":182,"content":"NUMERIC).withHeader(headers.toArray(new String[headers.size()])));\n            connection = getConnectionObject(connectionParamPojo);\n            List<JSONObject> dbResultSetRows = new ArrayList<>();\n            do {\n                dbResultSetRows.clear();\n                String queryToExecute = query.trim() + \" limit \" + offset + \", \" + SQL_EXTRACTION_QUERY_LIMIT;\n                DBResultPojo dbResult = executeQuery(connection, queryToExecute);\n                if (!dbResult.isSucceded()) {\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", dbResult.getCause().getMessage()));\n                }\n                JSONArray resultData = (JSONArray) dbResult.getResult();\n                for (int i = 0; i < resultData.length(); i++) {\n                    dbResultSetRows.add(resultData.getJSONObject(i));\n                }\n                List<Object> recordList = new ArrayList<>();\n                if (CollectionUtils.isNotEmpty(dbResultSetRows)) {\n                    for (JSONObject jsonObject : dbResultSetRows) {\n                        sqlQueryInfo.getShowFields().forEach(showField -> {\n                            String key = showField.getFieldAlias().toLowerCase();\n                            if (jsonObject.isNull(key)) {\n                                recordList.add(null);\n                            } else {\n                                if (showField.getDataType().equals(DataType.NUMBER)) {\n                                    recor","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"e94e713d-51e4-4525-8fe8-75c7cf3804e9","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":119,"endLine":139,"content":"x.getMessage(), ex);\n\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n\n    private static CsvFile executeQuery(Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail, ExternalTaskRequestContext externalTaskRequestContext) {\n        CsvFile csvFile = null;\n        try {\n            QueryBuilderResponse mysqlExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.MYSQL))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .withNullLastInOrderByClause(false).build();\n            String mySqlExtractQuery = mysqlExtract.getQuery();\n            LOGGER.info(\"MySql Extract Query: {}\", mySqlExtractQuery);\n            String connectionUrl = \"jdbc:mysql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), 1, null, dbConnectionDetail.isSslEnab","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"71ecda46-e144-4325-97cf-809d834a2157","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":283,"endLine":302,"content":"nalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static Connection getConnectionObject(ConnectionParamPojo connectionParamPojo) throws SQLException, ClassNotFoundException {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", connectionParamPojo.getUserName());\n        properties.setProperty(\"password\", connectionParamPojo.getPassword());\n        properties.setProperty(\"tcpKeepAlive\", Boolean.TRUE.toString());\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        return DriverManager.getConnection(connectionParamPojo.getJdbcUrl(), properties);\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask.getDataFromHubspot","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":151,"endLine":173,"content":"    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails, List<String> projectionList) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        try {\n            return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), offset);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), offset);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setQueryParamForDataFetch","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":70,"endLine":72,"content":"    public void setQueryParamForDataFetch(String queryParamForDataFetch) {\n        this.queryParamForDataFetch = queryParamForDataFetch;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"d4be50f3-d871-4a4b-be2b-8726411c65a5","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/pojo/GA4ConnectionInfo.java","startLine":1,"endLine":44,"content":"package com.gainsight.services.external.ga4.extraction.task.pojo;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\nimport java.io.Serializable;\n\n/**\n * Created by ptarika on 16/12/21.\n */\n@JsonIgnoreProperties(ignoreUnknown = true)\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class GA4ConnectionInfo implements Serializable {\n\n    private static final long serialVersionUID = -7057129865819056316L;\n\n    private String refreshToken;\n    private String clientId;\n    private String clientSecret;\n\n    public String getRefreshToken() {\n        return refreshToken;\n    }\n\n    public void setRefreshToken(String refreshToken) {\n        this.refreshToken = refreshToken;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public void setClientId(String clientId) {\n        this.clientId = clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public void setClientSecret(String clientSecret) {\n        this.clientSecret = clientSecret;\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#SQLExtractHelper.executeQueryWithPostgresCopyManager","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":134,"endLine":172,"content":"    public void executeQueryWithPostgresCopyManager(CsvFile csvFile) throws IOException, SQLException {\n        int recordsRetrieved = 0;\n        Connection jdbcConnection = null;\n        FileOutputStream fileOutputStream = null;\n        Properties properties = new Properties();\n        try {\n            LOGGER.info(\"Going to execute postgres query with copy manager\");\n            com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo connectionParamPojoForCopyManager = new com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo(\n                    connectionParamPojo.getJdbcUrl(), connectionParamPojo.getUserName(), connectionParamPojo.getPassword(), connectionParamPojo.getConnectionPoolSize(), connectionParamPojo.getConnectionPoolName(), connectionParamPojo.isSslEnabled());\n            createCsvHeaderAndUpdateFileCopyManager(csvFile);\n            properties.setProperty(\"user\", connectionParamPojo.getUserName());\n            properties.setProperty(\"password\", connectionParamPojo.getPassword());\n            if (connectionParamPojo.isSslEnabled()) {\n                properties.setProperty(\"sslmode\", \"require\");\n                properties.setProperty(\"ssl\", \"true\");\n            }\n            jdbcConnection = DriverManager.getConnection(connectionParamPojoForCopyManager.getJdbcUrl(), properties);\n            CopyManager copyManager = new CopyManager((BaseConnection) jdbcConnection);\n            fileOutputStream = new FileOutputStream(csvFile, true);\n            String refinedQuery = query.trim();\n            String copyManagerQuery = \"COPY (\" + refinedQuery + \") TO STDOUT WITH (FORMAT CSV, HEADER true, QUOTE '\\\"', ESCAPE '\\\"', ENCODING 'UTF8')\";\n            LOGGER.info(\"Started executing query: {} with copyManager\", copyManagerQuery);\n            if (!Thread.currentThread().isInterrupted()) {\n                recordsRetrieved = Math.toIntExact(copyManager.copyOut(copyManagerQuery, fileOutputStream));\n            }\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Error while executing postgres query with copy manager due to : {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with postgres copy manager\", ex);\n        } finally {\n            if (fileOutputStream != null) {\n                fileOutputStream.close();\n            }\n            if (jdbcConnection != null) {\n                jdbcConnection.close();\n            }\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java#L1-L327","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":1,"endLine":327,"content":"package com.gainsight.services.external.postgres.extraction.task;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.dataprocessing.commons.utils.DPCollectionUtils;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsService;\nimport com.gainsight.services.dataprocessing.dataexternals.mda.MDACalloutsServiceImpl;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.TaskExecutorWorkflowUtils;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.postgres.extraction.utils.SQLExtractHelper;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.PNPConnectionInput;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections.MapUtils;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.sql.SQLException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.*;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.DataExtractorConstants.SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.SQL_EXTRACTION_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.GENERIC_SYSTEM_ERROR;\nimport static com.gainsight.services.dataprocessing.commons.pojo.DataType.DATE;\nimport static com.gainsight.services.dataprocessing.commons.pojo.DataType.DATETIME;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotBlank;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\npublic class PostgresExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PostgresExtractionTask.class);\n    private static final String connectionPoolName = \"DynamicSQLExtractPool_\" + RandomStringUtils.randomAlphanumeric(8);\n    private static final String EPOCH_DATETIME_FORMAT = \"epoch\";\n    private static final String POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS = \"postgres.copy.manager.excluded.tenants\";\n    private static final String DISABLE_POSTGRES_COPY_MANAGER = \"disable.postgres.copy.manager\";\n    private static final String ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING = \"enable.postgres.extract.sample.logging\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE = \"postgres.extract.sample.log.record.size\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS = \"postgres.extract.sample.log.include.all.columns\";\n    private static final String POSTGRES_EXTRACT_DEFAULT_DATETIME_FORMAT = \"postgres.extract.default.datetime.format\";\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        try {\n            String jobId = externalTaskRequestContext.getJobId();\n            String tenantId = externalTaskRequestContext.getTenantId();\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            SQLQueryInfo sqlQueryInfo = convertJsonToObject(metaData.get(SQL_EXTRACTION_DETAILS_KEY), SQLQueryInfo.class);\n            isNotNull(sqlQueryInfo, GENERIC_SYSTEM_ERROR, msg(\"Could not get valid sqlExtractionDetails from task metadata for jobId:{} and tenantId:{}\", jobId, tenantId));\n            LOGGER.info(\"SQL Query info for job:{} of tenant:{} is::{}\", jobId, tenantId, DPUtils.convertObjectToJson(sqlQueryInfo));\n\n            DPWorkflowJobDetailsDTO dpWorkflowJobDetailsDTO = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, dpWorkflowJobDetailsDTO.getExternalId(), externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getTaskName());\n            String configSourceUrl = TaskExecutorWorkflowUtils.getConfigSourceUrl(dpWorkflowJobDetailsDTO);\n            String gsB2BSecret = getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET);\n\n            ConnectorType connectorType;\n            RelationalDBConnectionDetail relationalDBConnectionDetail;\n            if (null != sqlQueryInfo.getConnectionInfo()) {\n                isNotBlank(sqlQueryInfo.getConnectionInfo().getConnectionId(), GENERIC_SYSTEM_ERROR, msg(\"No connectionId provided against jobId:{} and tenant:{}\", jobId, tenantId));\n                MDACalloutsService mdaCalloutsService = new MDACalloutsServiceImpl(gsB2BSecret, configSourceUrl);\n                PNPConnectionInput pnpConnectionInfo = mdaCalloutsService.getConnectionDetails(sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                LOGGER.info(\"PNPConnectionInput fetched successfully for connectionId: {} tenantId: {}\", sqlQueryInfo.getConnectionInfo().getConnectionId(), tenantId);\n                sqlQueryInfo.getConnectionInfo().setConnectorType(ConnectorType.HAPOSTGRES);\n\n                if (pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                    relationalDBConnectionDetail = (RelationalDBConnectionDetail) pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail();\n                    connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n                } else {\n                    throw new DPSystemException(msg(\"Provided connectionDetail: {} is not registered with us. Please contact tech support!!\", DPUtils.convertObjectToJson(pnpConnectionInfo.getPnpConnectionsInfo().getConnectionDetail())));\n                }\n            } else if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                LOGGER.info(\"ConnectionInfo is null. Fetching connection details from sqlExtractionDetails connectionDetails for jobId:{}\", jobId);\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = ConnectorType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid connectionInfo or connectionDetail\");\n            }\n            CsvFile csvFile;\n            List<String> copyManagerExcludedTenants = Lists.newArrayList();\n            String excludedTenants = DeploymentProperties.getDeploymentProperties().getValue(POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS);\n            if (StringUtils.isNotBlank(excludedTenants)) {\n                copyManagerExcludedTenants.addAll(Arrays.asList(excludedTenants.split(COMMA)));\n            }\n            boolean disableCopyManager = DeploymentProperties.getDeploymentProperties().getBooleanValue(DISABLE_POSTGRES_COPY_MANAGER, false);\n            if (disableCopyManager || copyManagerExcludedTenants.contains(tenantId)) {\n                LOGGER.warn(\"Skipping postgres copyManager execution for job:{} of tenant:{} since either it is restricted for this tenant or copy manager is disabled. Will proceed with legacy code though!!\", jobId, tenantId);\n                csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n            } else {\n                try {\n                    csvFile = executeQueryForPostgresCopyManager(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                } catch (Exception ex) {\n                    LOGGER.warn(msg(\"SQL Extraction for {} failed with copy manager functionality due to: {} \", connectorType, ex.getMessage()));\n                    LOGGER.warn(\"More details about the exception are: \", ex);\n                    if (!Thread.currentThread().isInterrupted()) {\n                        LOGGER.warn(\"Falling back to legacy code since copy manager did not give us what we wanted!!\");\n                        csvFile = executeQueryForPostgresOrRedshift(externalTaskRequestContext, externalTaskRequestContext.getWorkflowSystemProperties(), sqlQueryInfo, relationalDBConnectionDetail);\n                    } else {\n                        LOGGER.info(\"Query execution failed without falling back to legacy code.\");\n                        throw ex;\n                    }\n                }\n            }\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : COMMA.charAt(0);\n\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(configSourceUrl, auditMetadata, true);\n            }\n\n            /*\n                Printing specified number of records for columns having dataType as date/dateTime only to find out format and other\n                discrepancies(if any). Since date/dateTime data is always a glitch in the matrix.\n                Based on config server property.\n             */\n            if (DeploymentProperties.getDeploymentProperties().getBooleanValue(ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING, false)) {\n                logDateOrDateTimeData(tenantId, jobId, headers, csvFile);\n            }\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setWithHeader(true)\n                    .setDelimiter(delimiter)\n                    .setTaskResult(taskResult)\n                    .setCurrencyConversionMap(currencyConversionMap)\n                    .setExtractedFiles(Collections.singletonList(csvFile.getAbsolutePath()))\n                    .build();\n\n            //Saving externalTask Result.\n            saveExtractionTaskResult(tenantId, jobId, externalTaskRequestContext.getTaskId(), externalExtractionTaskResult);\n            LOGGER.info(\"Successfully saved externalTask result for jobId:{}, tenantId:{}\", jobId, tenantId);\n        } catch (DPSystemException dpSysEx) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), dpSysEx);\n            throw dpSysEx;\n        } catch (Exception ex) {\n            LOGGER.error(\"Error while performing jdbc extraction - taskId: {}, jobId: {}, tenantId: {}\", externalTaskRequestContext.getTaskId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTenantId(), ex);\n            throw new DPSystemException(msg(\"Error while performing jdbc extraction: {}\", ex.getMessage()), ex);\n        }\n    }\n\n    private static CsvFile executeQueryForPostgresCopyManager(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) throws SQLException, IOException {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(ConnectorType.POSTGRES))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName()) + \"?ssl=\" + dbConnectionDetail.isSslEnabled();\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionId {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQueryWithPostgresCopyManager(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully with copy manager!!\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static CsvFile getCsvFileForSQLExtract(String tenantId, String jobId, String taskId) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n\n    private static String modifyFromClauseForRedshiftAndPostgres(String postgresExtractQuery, String schema) {\n        return postgresExtractQuery.replace(\"from \", \"from \" + schema + \".\");\n    }\n\n    private static CsvFile executeQueryForPostgresOrRedshift(ExternalTaskRequestContext externalTaskRequestContext, Map<String, Object> workflowSystemProperties, SQLQueryInfo sqlQueryInfo, RelationalDBConnectionDetail dbConnectionDetail) {\n        try {\n            QueryBuilderResponse postgresExtract = new FreeFormQueryBuilder().with(sqlQueryInfo)\n                    .withQueryBuilderHelper(new SqlQueryBuilderHelper(sqlQueryInfo.getConnectionInfo().getConnectorType()))\n                    .withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            LOGGER.info(\"Redshift/Postgres Extract Query: {}\", postgresExtractQuery);\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName());\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionid {}.\", sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            }\n            postgresExtractQuery = modifyFromClauseForRedshiftAndPostgres(postgresExtractQuery, tableSchema);\n            LOGGER.info(\"Postgres Extract Query after modification: {}\", postgresExtractQuery);\n            SQLExtractHelper sqlExtractHelper = new SQLExtractHelper(connectionParamPojo, postgresExtractQuery, sqlQueryInfo);\n            CsvFile csvFile = getCsvFileForSQLExtract(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId());\n            sqlExtractHelper.executeQuery(csvFile);\n            LOGGER.info(\"Postgres SQL Query Executed Successfully\");\n            return csvFile;\n        } catch (Exception ex) {\n            LOGGER.error(\"SQL query execution failed: {}. {}.\", ex.getMessage(), ex);\n            throw new DPSystemException(\"SQL query execution failed.\", ex);\n        }\n    }\n\n    private static void saveExtractionTaskResult(String tenantId, String jobId, String taskId, ExternalExtractionTaskResult taskResult) {\n        ExternalTaskUtil.saveExternalTaskResult(tenantId, jobId, taskId, taskResult);\n    }\n\n    private static void logDateOrDateTimeData(String tenantId, String jobId, List<FieldInfo> headers, CsvFile csvFile) {\n        InputStream csvInputStream = null;\n        int sampleRecordSize = DeploymentProperties.getDeploymentProperties().getIntegerValue(POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE, 10);\n        boolean includeAllDateDateTimeColumns = DeploymentProperties.getDeploymentProperties().getBooleanValue(POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS, false);\n        List<FieldInfo> sampleDataFieldList = Lists.newArrayList();\n        Map<String, List<String>> dateOrDateTimeColumnValueMap = Maps.newHashMap();\n        try {\n            if (!includeAllDateDateTimeColumns) {\n                FieldInfo dateField = headers.stream().filter(header -> header.getDataType().equals(DATE)).findFirst().orElse(null);\n                if (Objects.nonNull(dateField)) {\n                    sampleDataFieldList.add(dateField);\n                }\n                FieldInfo dateTimeField = headers.stream().filter(header -> header.getDataType().equals(DATETIME)).findFirst().orElse(null);\n                if (Objects.nonNull(dateTimeField)) {\n                    sampleDataFieldList.add(dateTimeField);\n                }\n            } else {\n                sampleDataFieldList = headers;\n            }\n            if (CollectionUtils.isEmpty(sampleDataFieldList)) {\n                LOGGER.info(\"Did not find any date/dateTime column for job:{} of tenant:{}. Hence skipping logging of sample values\", jobId, tenantId);\n            } else {\n                LOGGER.info(\"Field list for which sample is required: {} for job:{} and tenant:{}\", sampleDataFieldList.stream().map(FieldInfo::getFieldAlias).collect(Collectors.toList()), jobId, tenantId);\n                CSVFormat csvFormatter = DPUtils.getCSVFormatter(DOUBLE_QUOTE_CHAR, DOUBLE_QUOTE_CHAR, true);\n                csvInputStream = Files.newInputStream(csvFile.getAbsoluteFile().toPath());\n                try (CSVParser csvParser = new CSVParser(new BufferedReader(new InputStreamReader(csvInputStream)), csvFormatter)) {\n                    for (CSVRecord record : csvParser) {\n                        Map<String, String> recordMap = DPCollectionUtils.nullSafeMap(record.toMap());\n                        for (FieldInfo fieldInfo : sampleDataFieldList) {\n                            String fieldAlias = fieldInfo.getFieldAlias();\n                            String recordVal = recordMap.get(fieldInfo.getFieldAlias());\n                            if (StringUtils.isNotBlank(recordVal)) {\n                                if (dateOrDateTimeColumnValueMap.containsKey(fieldAlias)) {\n                                    List<String> dateValues = dateOrDateTimeColumnValueMap.get(fieldAlias);\n                                    if (dateValues.size() < sampleRecordSize) {\n                                        dateValues.add(recordVal);\n                                        dateOrDateTimeColumnValueMap.put(fieldAlias, dateValues);\n                                    }\n                                } else {\n                                    dateOrDateTimeColumnValueMap.put(fieldAlias, Lists.newArrayList(recordVal));\n                                }\n                            }\n                        }\n                        int size = sampleRecordSize;\n                        Iterator<Map.Entry<String, List<String>>> iterator = dateOrDateTimeColumnValueMap.entrySet().stream().iterator();\n                        while (iterator.hasNext()) {\n                            List<String> value = iterator.next().getValue();\n                            if (value.size() < size) {\n                                size = value.size();\n                            }\n                        }\n                        if (size == sampleRecordSize) {\n                            break;\n                        }\n                    }\n                }\n                LOGGER.info(\"Sample data set for required columns for job:{} of tenant:{} are ::: {}\", jobId, tenantId, DPUtils.convertObjectToJson(dateOrDateTimeColumnValueMap));\n            }\n        } catch (Exception ex) {\n            LOGGER.warn(\"Unable to log date/dateTime sample records for job:{} of tenant:{} due to:\", jobId, tenantId, ex);\n        } finally {\n            IOUtils.closeQuietly(csvInputStream);\n        }\n    }\n\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getConnectionId","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":103,"endLine":105,"content":"    public String getConnectionId() {\n        return connectionId;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.setDefaultSleepTimeOnFail","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":91,"endLine":93,"content":"    public void setDefaultSleepTimeOnFail(int defaultSleepTimeOnFail) {\n        this.defaultSleepTimeOnFail = defaultSleepTimeOnFail;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java#GA4Service","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java","startLine":13,"endLine":21,"content":"public interface GA4Service {\n\n    static GA4Service initialize(GA4ConnectionInfo connectionInfo) {\n        return new GA4ServiceImpl(connectionInfo);\n    }\n\n    BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException;\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java#HubspotExtractTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":57,"endLine":308,"content":"public class HubspotExtractTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(HubspotExtractTask.class);\n\n    private static final String PROPERTIES = \"properties\";\n    private static final String CLIENT_ID = \"clientId\";\n    private static final String CLIENT_SECRET = \"clientSecret\";\n    private static final String REFRESH_TOKEN = \"refreshToken\";\n    private static final String JSON_EXTENSION = \".json\";\n    private static final String HUBSPOT_API_VERSION = \"hubspotApiVersion\";\n    private static final String HUBSPOT_API_VERSION_LEGACY = \"legacy\";\n    private static final String HUBSPOT_API_EXTRACT = \"hubspotExtract\";\n\n\n    private static final int FILE_SIZE_THRESHOLD_IN_BYTES = 209715200;\n    private static final String CONNECTOR_TYPE = \"hubspot\";\n    private static final String DATA = \"data\";\n    private static final String VALUE = \"value\";\n    private static final String CARRIAGE_RETURN = \"\\n\";\n\n\n    private HubspotExtractTask() {\n    }\n\n    /**\n     * External task for extracting data from Hubspot.\n     */\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    public static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        LOGGER.debug(\"Request to hubspot fetch started !!\");\n        String jobId = externalTaskRequestContext.getJobId();\n        String taskId = externalTaskRequestContext.getTaskId();\n        List<File> uncompressedInputFiles = Lists.newArrayList();\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n            AuditMetadata auditMetadata = newInstance(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), workflowJobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n            HubspotExtractDetails fetchTaskDetails = convertJsonToObject(metaData.get(HUBSPOT_EXTRACT_DETAILS_KEY), HubspotExtractDetails.class);\n            extractDataFromHubspot(externalTaskRequestContext, workflowJobDetails, fetchTaskDetails,\n                    auditMetadata, uncompressedInputFiles);\n\n            TaskResult taskResult = new TaskResult(fetchTaskDetails.getProjectionClause(), null);\n\n            ExternalExtractionTaskResult externalExtractionTaskResult = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setTaskResult(taskResult)\n                    .setExtractedFiles(uncompressedInputFiles.stream().map(File::getAbsolutePath).collect(Collectors.toList()))\n                    .setJsonData(true)\n                    .setJsonFileContentType(JsonFileContentType.LINE_SEPARATED_OBJECTS)\n                    .setPushExtractedDataToS3(true)\n                    .setExcludedStrings(StringUtils.EMPTY)\n                    .build();\n            ExternalTaskUtil.saveExternalTaskResult(workflowJobDetails.getTenantId(), jobId, taskId, externalExtractionTaskResult);\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(msg(\"Error while fetching data from Hubspot\"), e);\n        } finally {\n            LOGGER.debug(\"Request to hubspot fetch completed in {} secs\", stopwatch.elapsed(TimeUnit.SECONDS));\n        }\n    }\n\n    private static void extractDataFromHubspot(ExternalTaskRequestContext externalTaskRequestContext, DPWorkflowJobDetailsDTO workflowJobDetails,\n                                               HubspotExtractDetails fetchTaskDetails, AuditMetadata auditMetadata,\n                                               List<File> uncompressedInputFiles) throws Exception {\n        MDACalloutsService mdaCalloutsService = MDACalloutsService.createOrGetInstance(workflowJobDetails.getSystemToken(), TaskExecutorWorkflowUtils.getConfigSourceUrl(workflowJobDetails), auditMetadata);\n        JsonObject jsonObject = mdaCalloutsService.getConnectionDetailsFromConnectors(fetchTaskDetails.getConnectorId(), CONNECTOR_TYPE);\n        isNotNull(jsonObject, GENERIC_SYSTEM_ERROR, \"No connection details found for this connection\");\n        HubspotAccessDetails accessDetailsFromDB = extractAccessDetails(jsonObject);\n        uncompressedInputFiles.addAll(readData(workflowJobDetails, externalTaskRequestContext, accessDetailsFromDB, fetchTaskDetails));\n    }\n\n    private static HubspotAccessDetails extractAccessDetails(JsonObject jsonObject) {\n        JsonObject decryptedObject = new JsonParser().parse(CryptUtil.decrypt(jsonObject.get(DATA).getAsJsonObject().get(VALUE).getAsString())).getAsJsonObject();\n        HubspotAccessDetails accessDetails = null;\n        if (!decryptedObject.isJsonNull()) {\n            accessDetails = new HubspotAccessDetails();\n            accessDetails.setClientId(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_ID).getAsString());\n            accessDetails.setClientSecret(decryptedObject.get(PROPERTIES).getAsJsonObject().get(CLIENT_SECRET).getAsString());\n            accessDetails.setRefreshToken(decryptedObject.get(PROPERTIES).getAsJsonObject().get(REFRESH_TOKEN).getAsString());\n        }\n        return accessDetails;\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails) {\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        return getDataFromHubspot(accessDetails, offset, fetchTaskDetails, projectionList);\n    }\n\n    private static InputStream getDataFromHubspot(HubspotAccessDetails accessDetails, long offset, HubspotExtractDetails fetchTaskDetails, List<String> projectionList) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        try {\n            return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), offset);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityData(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), offset);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static InputStream getDataFromHubspotLatestApi(HubspotAccessDetails accessDetails, String nextPageUrl, HubspotExtractDetails fetchTaskDetails) {\n        GainsightHubspotFetchService fetchService = new GainsightHubspotFetchServiceImpl();\n        List<String> projectionList = fetchTaskDetails.getProjectionClause().stream()\n                .filter(fieldInfo -> StringUtils.isNotEmpty(fieldInfo.getName()))\n                .map(FieldInfo::getName)\n                .collect(Collectors.toList());\n        try {\n            return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                    accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                    accessDetails.getAccessToken(), nextPageUrl);\n        } catch (Exception ex) {\n            if (StringUtils.isNotEmpty(ex.getMessage()) && ex.getMessage().equals(\"Hubspot access token expired\")) {\n                LOGGER.error(\"Regenerating Hubspot access token...\");\n                GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n                try {\n                    accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n                    return fetchService.getPaginatedEntityDataLatest(fetchTaskDetails.getExternalEntityName(), projectionList,\n                            accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken(),\n                            accessDetails.getAccessToken(), nextPageUrl);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error while Regenerating Hubspot access token. \", e);\n                    return null;\n                }\n            }\n            return null;\n        }\n    }\n\n    private static Deque<File> readData(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, HubspotAccessDetails accessDetails, HubspotExtractDetails fetchTaskDetails) {\n        InputStream stream = null;\n        Deque<File> fileStack = new ArrayDeque<>();\n        try {\n            boolean shouldContinue;\n            String hasMoreKeyword = GSHubSpotEntityEnum.getHasMoreKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String offsetKeyword = GSHubSpotEntityEnum.getRetrievOffsetKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String pluralName = GSHubSpotEntityEnum.getPluralName(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n            long offset = Long.MIN_VALUE;\n            String nextPageUrl = null;\n            int counter = 0;\n            Optional<DPWorkflowTaskDetailsDTO> taskDetailsDTO = workflowJobDetails.getWorkflowDetails().getTasks().stream().\n                    filter(task -> task.getMetaData() != null && task.getMetaData().get(\"taskName\").toString().equalsIgnoreCase(HUBSPOT_API_EXTRACT)).findFirst();\n            String apiVersion = HUBSPOT_API_VERSION_LEGACY;\n            if (!ObjectUtils.isEmpty(taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION))) {\n                apiVersion = taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION).toString();\n            }\n            do {\n                LOGGER.info(\"Paginated api running for offset : {}, pagination api counter: {}, nextpageurl :{} , apiVersion : {} \", offset, counter++, nextPageUrl, apiVersion);\n                if (apiVersion.equalsIgnoreCase(HUBSPOT_API_VERSION_LEGACY)) {\n                    stream = getDataFromHubspot(accessDetails, offset, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    offset = readDataAndStoreInFile(stream, hasMoreKeyword, offsetKeyword, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                } else {// New api Version V3\n                    stream = getDataFromHubspotLatestApi(accessDetails, nextPageUrl, fetchTaskDetails);\n                    isNotNull(stream, GENERIC_SYSTEM_ERROR, \"No data fetched from external source\");\n                    File tempFile = getLocalFile(workflowJobDetails, externalTaskRequestContext, fileStack);\n                    nextPageUrl = readDataAndStoreInFileLatestApi(stream, pluralName, tempFile, fetchTaskDetails.getExternalEntityName());\n                }\n                shouldContinue = offset != Long.MIN_VALUE || (StringUtils.isNotEmpty(nextPageUrl));\n            } while (shouldContinue && !Thread.currentThread().isInterrupted());\n        } catch (IOException ioEx) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", ioEx);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed during fetching data from hubspot.\", e);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n        return fileStack;\n    }\n\n    private static long readDataAndStoreInFile(InputStream inputStream, String hasMoreKeyword, String offsetKeyword, String pluralName, File tempFile, String entityName) throws IOException {\n        long offset = Long.MIN_VALUE;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, pluralName, tempFile, entityName, jsonObject);\n        offset = shouldContinue(hasMoreKeyword, offsetKeyword, offset, jsonObject);\n        return offset;\n    }\n\n    private static String readDataAndStoreInFileLatestApi(InputStream inputStream, String pluralName, File tempFile, String entityName) throws IOException {\n        String url = null;\n        JsonObject jsonObject = null;\n        jsonObject = iterativelyPullDataAndStoreInLocal(inputStream, \"results\", tempFile, entityName, jsonObject);\n        url = isAfter(url, jsonObject);\n        return url;\n    }\n\n    private static long shouldContinue(String hasMoreKeyword, String offsetKeyword, long offset, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(hasMoreKeyword) != null && jsonObject.get(hasMoreKeyword).getAsBoolean()) {\n            offset = jsonObject.get(offsetKeyword).getAsLong();\n        }\n        return offset;\n    }\n\n    private static String isAfter(String url, JsonObject jsonObject) {\n        if (jsonObject != null && jsonObject.get(\"paging\") != null) {\n            url = jsonObject.getAsJsonObject(\"paging\").getAsJsonObject(\"next\").get(\"link\").getAsString();\n        }\n        return url;\n    }\n\n    private static JsonObject iterativelyPullDataAndStoreInLocal(InputStream inputStream, String pluralName, File tempFile, String entityName, JsonObject jsonObject) throws IOException {\n        JsonArray iterator = null;\n        try {\n            if (entityName.equalsIgnoreCase(GSHubSpotEntityEnum.labelName(GSHubSpotEntityEnum.OWNER)) && !pluralName.equalsIgnoreCase(\"results\")) {\n                iterator = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonArray();\n            } else {\n                jsonObject = new JsonParser().parse(IOUtils.toString(inputStream, Charset.defaultCharset())).getAsJsonObject();\n                iterator = jsonObject.getAsJsonArray(pluralName);\n            }\n        } catch (JsonParseException e) {\n            LOGGER.error(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n            throw new DPSystemException(\"Exception occurred while parsing hubspot response to JSON object : \", e);\n        }\n        if (iterator != null)\n            iterator.iterator().forEachRemaining((JsonElement jsonElement) -> {\n                try {\n                    FileUtils.writeStringToFile(tempFile, jsonElement.getAsJsonObject().toString() + CARRIAGE_RETURN, StandardCharsets.UTF_8, true);\n                } catch (IOException e) {\n                    LOGGER.error(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                    throw new DPSystemException(\"Exception occurred while parsing hubspot JSON response to temp file : \", e);\n                }\n            });\n        return jsonObject;\n    }\n\n    private static File getLocalFile(DPWorkflowJobDetailsDTO workflowJobDetails, ExternalTaskRequestContext externalTaskRequestContext, Deque<File> fileStack) throws IOException {\n        if (fileStack.isEmpty() || fileStack.peek().length() >= FILE_SIZE_THRESHOLD_IN_BYTES) {\n            fileStack.push(File.createTempFile(DPUtils.getTempFilePath(workflowJobDetails.getTenantId(), workflowJobDetails.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString()), JSON_EXTENSION));\n        }\n        return fileStack.peek();\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"9ccf1021-edb2-4d4b-b503-ff8ed256d282","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionTask.java","startLine":505,"endLine":516,"content":"                                               List<com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo> ipaasFetchDetails) {\n        Set<String> sourceFieldNames = ipaasFetchDetails\n                .stream().map(i -> i.getFieldAlias())\n                .collect(Collectors.toSet());\n\n        List<String> existingFieldNames = ipaasStagingDetails.getFieldInfos()\n                .stream().map(i -> i.getFieldName())\n                .collect(Collectors.toList());\n\n        return existingFieldNames.size() == sourceFieldNames.size() && existingFieldNames.containsAll(sourceFieldNames);\n    }\n}","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"64f929fe-b094-4a39-a876-ab740dc50bd2","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":1,"endLine":20,"content":"package com.gainsight.services.external.px.extraction.task;\n\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.parquet.writer.TextRecordParquetWriterBuilder;\nimport com.gainsight.services.dataprocessing.commons.pojo.DataType;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.EpochUnit;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXExtractInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXExtractionDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.pxextract.PXResponse;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.TenantDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.querybuilders.expressions.helpers.FunctionHelper;\nimport com.gainsight.services.dataprocessing.commons.system.DPFile;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.commons.utils.DateTimeUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimpor","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"3b1ad86e-d714-4afe-b69c-0ece8559bc34","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":18,"endLine":38,"content":"ocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.ConnectorType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.base.connection.RelationalDBConnectionDetail;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.query.QuerySourceType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.builders.FreeFormQueryBuilder;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.OrderByInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.QueryBuilderResponse;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.helpers.SqlQueryBuilderHelper;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.slf4j.Log","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"98b43171-bbb2-4b9e-8b88-eafc6805a071","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/out-of-disk-space-task/src/main/java/com/gainsight/services/external/out/of/disk/space/task/ExternalTask.java","startLine":32,"endLine":51,"content":"nt i = 0; i < 10; i++) {\n            InputStream inputStream = ExternalTask.class.getClassLoader().getResourceAsStream(\"random.txt\");\n            File file = new File(\"random\" + i + \".txt\");\n            LOGGER.info(\"copying to file \" + file.getName());\n            try {\n                FileUtils.copyInputStreamToFile(inputStream, file);\n                LOGGER.info(\"Copied file \" + file.getName() + \", size: \" + file.length());\n            } catch (IOException e) {\n                LOGGER.error(\"Error copying to file \" + file.getName());\n            }\n        }\n\n        FieldInfo fieldInfo = new FieldInfo();\n        fieldInfo.setName(\"dummy_column\");\n        fieldInfo.setDataType(DataType.STRING);\n        fieldInfo.setFieldAlias(fieldInfo.getName());\n        TaskResult taskResult = new TaskResult(Collections.singletonList(fieldInfo), null);\n        ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, new ExternalTaskResult(taskResult, true));\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"33303677-77e1-46a0-a0b4-45b43cf9d5d1","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/px-extraction-task/src/main/java/com/gainsight/services/external/px/extraction/task/PxExtractionTask.java","startLine":18,"endLine":49,"content":"m.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.ExternalExtractionTaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.pojo.TaskResult;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.px.PxUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskRequestContext;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Sets;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.lang3.BooleanUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.parquet.hadoop.ParquetFileWriter;\nimport org.apache.parquet.hadoop.ParquetWriter;\nimport org.apache.parquet.hadoop.metadata.CompressionCodecName;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.text.NumberFormat;\nimport java.text.ParseException;\nimport java.time.ZoneId;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.ExternalTaskConstants.DEFAULT_DATE_FORMAT_KEY;\nimport static com.g","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java#IpaasExtractionDetails.getIgnorableErrorMessages","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ipaas-extraction-task/src/main/java/com/gainsight/services/external/ipaas/extraction/task/IpaasExtractionDetails.java","startLine":276,"endLine":278,"content":"    public List<String> getIgnorableErrorMessages() {\n        return ignorableErrorMessages;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"4061c661-1b44-4e74-8dcb-aee964592430","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/hubspot-extraction-task/src/main/java/com/gainsight/services/external/hubspot/extraction/task/HubspotExtractTask.java","startLine":208,"endLine":223,"content":"rd(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String offsetKeyword = GSHubSpotEntityEnum.getRetrievOffsetKeyWord(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            String pluralName = GSHubSpotEntityEnum.getPluralName(GSHubSpotEntityEnum.getInstance(fetchTaskDetails.getExternalEntityName()));\n            GainsightHubspotChannelFactory gainsightHubspotChannelFactory = new GainsightHubspotChannelFactory();\n            accessDetails.setAccessToken(gainsightHubspotChannelFactory.getAccessToken(accessDetails.getClientId(), accessDetails.getClientSecret(), accessDetails.getRefreshToken()));\n            long offset = Long.MIN_VALUE;\n            String nextPageUrl = null;\n            int counter = 0;\n            Optional<DPWorkflowTaskDetailsDTO> taskDetailsDTO = workflowJobDetails.getWorkflowDetails().getTasks().stream().\n                    filter(task -> task.getMetaData() != null && task.getMetaData().get(\"taskName\").toString().equalsIgnoreCase(HUBSPOT_API_EXTRACT)).findFirst();\n            String apiVersion = HUBSPOT_API_VERSION_LEGACY;\n            if (!ObjectUtils.isEmpty(taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION))) {\n                apiVersion = taskDetailsDTO.get().getMetaData().get(HUBSPOT_API_VERSION).toString();\n            }\n            do {\n                LOGGER.info(\"Paginated api running for offset : {}, pagination api counter: {}, nextpageurl :{} , apiVersion : {} \", of","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"05192db8-ccf1-4fae-a2e9-d77261e3a7dd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":275,"endLine":317,"content":"\n                        aliasIndexMapping.put(met.getFieldAlias(), aliasIndex++);\n                        headers.add(met);\n                    }\n                    fieldInfoIndex++;\n                }\n            }\n        }\n\n        public List<FieldInfo> getHeaders() {\n            return headers;\n        }\n\n        private List<String> formatRecordGA4(List<DimensionValue> dimensions, List<MetricValue> metrics, GAReportGroup gaReportGroup) {\n            List<String> values = Lists.newArrayList();\n            //prepend all static values in record\n            for (FieldInfo fieldInfo : extractDetails.getStaticFields()) {\n                values.add(DHUtils.valueOf(fieldInfo.getValue()));\n            }\n\n            //padman...\n            for (int i = 0; i < headers.size(); i++) {\n                values.add(null);\n            }\n\n            String name = gaReportGroup.getName();\n            int fieldIndex = 0;\n            for (DimensionValue dimension : dimensions) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), dimension.getValue());\n                fieldIndex++;\n            }\n\n            for (MetricValue metric : metrics) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), metric.getValue());\n                fieldIndex++;\n            }\n            return values;\n        }\n    }\n\n    privat","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java#L1-L21","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/service/GA4Service.java","startLine":1,"endLine":21,"content":"package com.gainsight.services.external.ga4.extraction.task.service;\n\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.google.api.services.analyticsdata.v1beta.model.BatchRunReportsResponse;\nimport com.google.api.services.analyticsdata.v1beta.model.RunReportRequest;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * Created by ptarika on 16/12/21.\n */\npublic interface GA4Service {\n\n    static GA4Service initialize(GA4ConnectionInfo connectionInfo) {\n        return new GA4ServiceImpl(connectionInfo);\n    }\n\n    BatchRunReportsResponse getReportForGA4(String propertyId, List<RunReportRequest> requests) throws IOException;\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"6059ab6e-70df-4301-9667-63d3f1e677dd","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":185,"endLine":196,"content":".withQuerySourceType(QuerySourceType.SQL)\n                    .withSystemProperties(workflowSystemProperties)\n                    .build();\n            String postgresExtractQuery = postgresExtract.getQuery();\n            String connectionUrl = \"jdbc:postgresql://\" + CryptUtil.decrypt(dbConnectionDetail.getHost()) + \":\" + CryptUtil.decrypt(dbConnectionDetail.getPort()) + \"/\" + CryptUtil.decrypt(dbConnectionDetail.getDataBaseName()) + \"?ssl=\" + dbConnectionDetail.isSslEnabled();\n            ConnectionParamPojo connectionParamPojo = new ConnectionParamPojo(connectionUrl, CryptUtil.decrypt(dbConnectionDetail.getUser()), CryptUtil.decrypt(dbConnectionDetail.getPwd()), getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_DB_CONNECTION_POOL_SIZE, 1), connectionPoolName, dbConnectionDetail.isSslEnabled());\n            String tableSchema = \"public\";\n            if (MapUtils.isNotEmpty(dbConnectionDetail.getProperties()) && StringUtils.isNotBlank(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")))) {\n                tableSchema = CryptUtil.decrypt(DPUtils.valueOf(dbConnectionDetail.getProperties().get(\"tablesSchema\")));\n                LOGGER.info(msg(\"Using tablesSchema: {} from properties for connectionId {}.\", tableSchema, sqlQueryInfo.getConnectionInfo().getConnectionId()));\n            } else {\n                LOGGER.warn(msg(\"Did not find tablesSchema in properties, proceeding with public schema for connectionId {}.\", sqlQueryInfo.getConnectionInfo().get","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java#is.getCsvFileForSQLExtract","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/mysql-extraction-task/src/main/java/com/gainsight/services/external/mysql/extraction/task/MySqlExtractionTask.java","startLine":282,"endLine":292,"content":"    private static CsvFile getCsvFileForSQLExtract(ExternalTaskRequestContext externalTaskRequestContext) throws IOException {\n        String tempFilePath = DPUtils.getTempFilePath(externalTaskRequestContext.getTenantId(), externalTaskRequestContext.getJobId(), externalTaskRequestContext.getTaskId(), UUID.randomUUID().toString() + \".csv\");\n        File file = new File(tempFilePath);\n        Files.createDirectories(Paths.get(file.getParent()));\n        Files.createFile(Paths.get(file.getAbsolutePath()));\n\n        CsvFile csvFile = new CsvFile(tempFilePath);\n        csvFile.setFirstRecordHeader(true);\n        csvFile.setQuoteMode(QuoteMode.NON_NUMERIC);\n        return csvFile;\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java#DPDynamicTaskTurboFilter.getTenantObfuscationPattern","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/dp-dynamic-commons/src/main/java/com/gainsight/services/external/commons/DPDynamicTaskTurboFilter.java","startLine":85,"endLine":101,"content":"    public List<Pattern> getTenantObfuscationPattern() {\n        try {\n            if (StringUtils.isBlank(MDC.get(TENANT_ID_KEY)) || MDC.get(TENANT_ID_KEY).equalsIgnoreCase(DUMMY_STRING)) {\n                return Collections.emptyList();\n            } else {\n                DHOBFConfigProperties dhobfConfigProperties = getDHOBFConfigProperties();\n                DHFeatureUtils dhFeatureUtils = DHFeatureUtils.getInstance(DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_URL),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_EVALUATE_PATH, \"/v1/features/evaluate/\"),\n                        DeploymentProperties.getDeploymentProperties().getValue(FEATURE_CONFIG_ENVIRONMENT), DeploymentProperties.getDeploymentProperties().getValue(MDA_GAINSIGHT_B2B_SECRET),\n                        dhobfConfigProperties.getGsLogObfuscationFeatureVariationCacheExpiry(), dhobfConfigProperties.getGsLogObfuscationPatternCacheExpiry());\n                return dhFeatureUtils.getTenantLogObfuscationPatterns(MDC.get(TENANT_ID_KEY), MDC.get(REQUEST_ID_KEY));\n            }\n        } catch (Exception ex) {//NOSONAR\n            DPDTF.warn(\"[NO_OBF] Error in getting tenant obfuscation patterns: {}\", ex.getMessage(), ex);\n            return Collections.emptyList();\n        }\n    }\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java#L1-L342","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":1,"endLine":342,"content":"package com.gainsight.services.external.ga4.extraction.task.utils;\n\nimport com.gainsight.services.dataprocessing.commons.audit.AuditMetadata;\nimport com.gainsight.services.dataprocessing.commons.cryptography.CryptUtil;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.parquet.writer.CsvParquetWriter;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.DateTimeProperties;\nimport com.gainsight.services.dataprocessing.commons.pojo.fields.FieldInfo;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAAccessDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAExtractDetails;\nimport com.gainsight.services.dataprocessing.commons.pojo.gaextract.GAReportGroup;\nimport com.gainsight.services.dataprocessing.commons.pojo.workflow.DPWorkflowJobDetailsDTO;\nimport com.gainsight.services.dataprocessing.commons.proxy.mda.CustomerCurrencyDTO;\nimport com.gainsight.services.dataprocessing.commons.system.ParquetFile;\nimport com.gainsight.services.dataprocessing.commons.system.Precondition;\nimport com.gainsight.services.dataprocessing.commons.utils.DPUtils;\nimport com.gainsight.services.dataprocessing.dataprocessor.dagdataprocessor.utils.CustomerCurrencyUtil;\nimport com.gainsight.services.dataprocessing.external.task.ExternalTaskUtil;\nimport com.gainsight.services.external.ga4.extraction.task.pojo.GA4ConnectionInfo;\nimport com.gainsight.services.external.ga4.extraction.task.service.GA4Service;\nimport com.gainsight.services.utilities.datahighway.dhcommons.externals.MDACalloutService;\nimport com.gainsight.services.utilities.datahighway.dhcommons.pojo.account.UDMAccountType;\nimport com.gainsight.services.utilities.datahighway.dhcommons.utils.DHUtils;\nimport com.google.api.client.googleapis.json.GoogleJsonError;\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.services.analyticsdata.v1beta.model.*;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WebConstants.DH_B2B_SECRET;\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.WorkflowConstants.GA_EXTRACT_DETAILS_KEY;\nimport static com.gainsight.services.dataprocessing.commons.exception.ValidationCode.*;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.assertState;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPCollectionUtils.nullSafeList;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.valueOf;\n\n/**\n * Created by ptarika on 16/12/12.\n */\npublic class GA4ExtractHelper {\n\n    private final Logger LOGGER = LoggerFactory.getLogger(com.gainsight.services.external.ga4.extraction.task.utils.GA4ExtractHelper.class);\n    private static final long GA_REPORT_PAGE_SIZE = 10000;\n\n    private final Map<String, Object> systemProperties;\n    private final RecordFormatter recordFormatter;\n    private final Map<String, String> metaData;\n    private GAExtractDetails extractDetails;\n    private final String jobId;\n    private final String taskId;\n    private DPWorkflowJobDetailsDTO workflowJobDetails;\n\n    public GA4ExtractHelper(String jobId, String taskId, Map<String, String> metaData, Map<String, Object> systemProperties, DPWorkflowJobDetailsDTO workflowJobDetails) {\n        this.systemProperties = systemProperties;\n        this.metaData = metaData;\n        this.taskId = taskId;\n        this.jobId = jobId;\n        this.workflowJobDetails = workflowJobDetails;\n        init();\n        this.recordFormatter = new RecordFormatter();\n    }\n\n    private void init() {\n        String gaExtractDetailsJson = metaData.get(GA_EXTRACT_DETAILS_KEY);\n        this.extractDetails = DPUtils.convertJsonToObject(gaExtractDetailsJson, GAExtractDetails.class);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            gaReportGroup.setDimensions(nullSafeList(gaReportGroup.getDimensions()));\n        }\n\n        if (extractDetails.getStaticFields() == null) {\n            extractDetails.setStaticFields(Collections.emptyList());\n        }\n    }\n\n    public Map<String, Object> getGA4Report() {\n        logInfo(jobId, \"Starting GA4 extraction task\");\n\n        String tenantId = workflowJobDetails.getTenantId();\n        ParquetFile tmpParquetFile;\n        AuditMetadata auditMetadata = AuditMetadata.newInstance(tenantId, jobId, workflowJobDetails.getExternalId(), taskId);\n\n        try {\n            tmpParquetFile = new ParquetFile(DPUtils.getTempFilePath(tenantId, jobId, taskId, UUID.randomUUID().toString() + \".parquet\"));\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(extractDetails.getStaticFields())) {\n                currencyConversionMap = CustomerCurrencyUtil.getCustomerCurrencyConversionMap(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails), auditMetadata, true);\n            }\n            writeToParaquetG4(tmpParquetFile, currencyConversionMap);\n            logInfo(taskId, DHUtils.msg(\"Parquet file creation successful. Records written = {}.\", tmpParquetFile.getNumRecords()));\n            Map<String, Object> result = Maps.newHashMap();\n            result.put(\"parquetFile\", tmpParquetFile);\n            result.put(\"headers\", recordFormatter.getHeaders());\n            return result;\n        } catch (GoogleJsonResponseException e) {\n            GoogleJsonError details = e.getDetails();\n            DPSystemException dpSystemException = new DPSystemException(e);\n            if (details != null) {\n                String message = \"Message=\" + details.getMessage() + \"Status=\" + details.get(\"status\");\n                dpSystemException.setMessage(message);\n            } else {\n                dpSystemException.setMessage(e.getMessage());\n            }\n            dpSystemException.setHttpStatus(e.getStatusCode());\n            throw dpSystemException;\n        } catch (IOException e) {\n            throw new DPSystemException(e.getMessage(), e, IO_ERROR);\n        } finally {\n            logInfo(taskId, \"Cleaning up....bye bye...\");\n        }\n    }\n\n\n    private void writeToParaquetG4(ParquetFile tmpParquetFile, Map<String, CustomerCurrencyDTO> currencyConversionMap) throws IOException {\n\n        CsvParquetWriter writer = new CsvParquetWriter(tmpParquetFile, recordFormatter.getHeaders(), this.systemProperties, currencyConversionMap, true);\n\n        GA4ConnectionInfo connectionInfo = buildGAConnectionInfo(extractDetails.getGaAccessDetails());\n        GA4Service service = GA4Service.initialize(connectionInfo);\n\n        for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n            RunReportRequest reportRequest = buildReportRequestGA4(gaReportGroup);\n            long offset = 0;\n            int rowCount;\n            do {\n                reportRequest.setLimit(GA_REPORT_PAGE_SIZE);\n                reportRequest.setOffset(offset);\n                BatchRunReportsResponse response = service.getReportForGA4(extractDetails.getViewId(), Lists.newArrayList(reportRequest));\n                RunReportResponse report = validateGA4Response(response);\n                writeGA4ReportToParaquetFile(report, gaReportGroup, writer);\n                rowCount = report.getRows() != null ? report.getRows().size() : 0;\n                offset = offset + GA_REPORT_PAGE_SIZE;\n            } while (rowCount == GA_REPORT_PAGE_SIZE && !Thread.currentThread().isInterrupted());\n        }\n        writer.close();\n    }\n\n    private GA4ConnectionInfo buildGAConnectionInfo(GAAccessDetails gaAccessDetailsFromJob) {\n        GA4ConnectionInfo connectionInfo = new GA4ConnectionInfo();\n        GAAccessDetails gaAccessDetailsWithCredentials = fetchAccountDetailsFromMDA(gaAccessDetailsFromJob);\n        connectionInfo.setClientId(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientId()));\n        connectionInfo.setClientSecret(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getClientSecret()));\n        connectionInfo.setRefreshToken(CryptUtil.decrypt(gaAccessDetailsWithCredentials.getRefreshToken()));\n        return connectionInfo;\n    }\n\n    /**\n     * Get account details from MDA for Google Analytics.\n     * Assumption: AccountId and profileId are already set in extractDetails from UDM.\n     *\n     * @param gaAccessDetails {@link GAAccessDetails} from UDM which contains only accountId.\n     * @return {@link GAAccessDetails} encrypted GA credentials from MDA account details API.\n     */\n    private GAAccessDetails fetchAccountDetailsFromMDA(GAAccessDetails gaAccessDetails) {\n\n        GAAccessDetails gaAccessDetailsWithCredentials = new GAAccessDetails();\n\n        MDACalloutService mdaCalloutService = new MDACalloutService().withMdaBaseUrl(ExternalTaskUtil.getConfigSourceUrl(workflowJobDetails)).\n                withAuthToken(CryptUtil.encrypt(getDeploymentProperties().getValue(DH_B2B_SECRET))).withSharedSecretHeaderKey(\"secret\").withTenantId(workflowJobDetails.getTenantId());\n\n        logInfo(jobId, DHUtils.msg(\" Calling MDA Rest Api to fetch accountDetails for mdaConnectionId:{}, GA accountId:{} and tenant:{}\", gaAccessDetails.getConnectionId(), gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Map<String, Object> connectionDetails = mdaCalloutService.getConnectionDetails(UDMAccountType.GOOGLE_ANALYTICS, gaAccessDetails.getConnectionId());\n\n        Precondition.assertState(MapUtils.isNotEmpty(connectionDetails), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty response received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientId\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientId received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"clientSecret\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty clientSecret received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        Precondition.isNotBlank(valueOf(connectionDetails.get(\"refreshToken\")), INVALID_GA_CREDENTIALS_VIA_MDA, msg(\" Empty refreshToken received from MDA for GA account id:{} and tenant:{}\", gaAccessDetails.getAccountId(), workflowJobDetails.getTenantId()));\n        // Setting encrypted GA access details from MDA\n        gaAccessDetailsWithCredentials.setClientId(valueOf(connectionDetails.get(\"clientId\")));\n        gaAccessDetailsWithCredentials.setClientSecret(valueOf(connectionDetails.get(\"clientSecret\")));\n        gaAccessDetailsWithCredentials.setRefreshToken(valueOf(connectionDetails.get(\"refreshToken\")));\n        gaAccessDetailsWithCredentials.setAccountId(gaAccessDetails.getAccountId());\n        return gaAccessDetailsWithCredentials;\n    }\n\n    private RunReportResponse validateGA4Response(BatchRunReportsResponse response) {\n        isNotNull(response, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        List<RunReportResponse> reports = response.getReports();\n        assertState(CollectionUtils.isNotEmpty(reports) && reports.size() == 1, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        return reports.get(0);\n    }\n\n    private RunReportRequest buildReportRequestGA4(GAReportGroup gaReportGroup) {\n        RunReportRequest reportRequest = new RunReportRequest();\n        com.google.api.services.analyticsdata.v1beta.model.DateRange dateRange = new com.google.api.services.analyticsdata.v1beta.model.DateRange()\n                .setStartDate(extractDetails.getStartDate())\n                .setEndDate(extractDetails.getEndDate());\n        reportRequest.setProperty(\"properties/\" + extractDetails.getViewId());\n        reportRequest.setDateRanges(Lists.newArrayList(dateRange));\n        reportRequest.setDimensions(gaReportGroup.getDimensions().stream().map(this::getDimensionV4).collect(Collectors.toList()));\n        reportRequest.setMetrics(gaReportGroup.getMetrics().stream().map(this::getMetricV4).collect(Collectors.toList()));\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getDimensionFilterRules())) {\n//            //reportRequest.setDimensionFilter(gaReportGroup.getDimensionFilterRules().stream().map(this::getDimensionFilterClause).collect(Collectors.toList()));\n//        }\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getMetricFilterRules())) {\n//            //reportRequest.setMetricFilterClauses(gaReportGroup.getMetricFilterRules().stream().map(this::getMetricFilterClause).collect(Collectors.toList()));\n//        }\n//        OrderByInfo orderByInfo = gaReportGroup.getOrderByInfo();\n//        if (orderByInfo != null && CollectionUtils.isNotEmpty(orderByInfo.getOrderByFields())) {\n//            reportRequest.setOrderBys(Lists.newArrayList());\n//            for (FieldInfo fieldInfo : orderByInfo.getOrderByFields()) {\n//                //reportRequest.getOrderBys().add(getOrderBy(fieldInfo, orderByInfo.isAscending()));\n//            }\n//        }\n        return reportRequest;\n    }\n\n    private void writeGA4ReportToParaquetFile(RunReportResponse report, GAReportGroup gaReportGroup, CsvParquetWriter writer) throws IOException {\n        boolean recordsPresent = false;\n        if (report != null) {\n            List<Row> rows = report.getRows();\n            if (CollectionUtils.isNotEmpty(rows)) {\n                recordsPresent = true;\n                for (Row row : rows) {\n                    assertState(CollectionUtils.isNotEmpty(row.getMetricValues()), GENERIC_SYSTEM_ERROR, \"Unexpected error, found metrics empty while reading GA4 report.\");\n                    writer.writeForGA(recordFormatter.formatRecordGA4(row.getDimensionValues(), row.getMetricValues(), gaReportGroup));\n                }\n            }\n        }\n        if (!recordsPresent) {\n            LOGGER.warn(msg(\"No records returned from GA for group: {}. Skipping writing into parquet file.\", gaReportGroup));\n        }\n    }\n\n    private Metric getMetricV4(FieldInfo fieldInfo) {\n        return new Metric().setExpression(fieldInfo.getName()).setName(fieldInfo.getFieldAlias());\n    }\n\n    private Dimension getDimensionV4(FieldInfo fieldInfo) {\n        return new Dimension().setName(fieldInfo.getName());\n    }\n\n    private void logInfo(String taskId, String message) {\n        LOGGER.info(\"GA Task[{}] - {}\", taskId, message);\n    }\n\n    private class RecordFormatter {\n\n        private LinkedList<FieldInfo> headers = new LinkedList<>();\n        private Map<String, RecordMeta> recordIndexMapping = new HashMap<>();\n\n        private RecordFormatter() {\n            Map<String, Integer> aliasIndexMapping = new HashMap<>();\n            headers.addAll(extractDetails.getStaticFields());\n            int recordIndex = headers.size();\n            int aliasIndex = headers.size();\n            for (GAReportGroup gaReportGroup : extractDetails.getGaReportGroups()) {\n                int fieldInfoIndex = 0;\n                for (FieldInfo dim : gaReportGroup.getDimensions()) {\n                    if (aliasIndexMapping.containsKey(dim.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, aliasIndexMapping.get(dim.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(dim, recordIndex++));\n                        aliasIndexMapping.put(dim.getFieldAlias(), aliasIndex++);\n                        headers.add(dim);\n                    }\n                    fieldInfoIndex++;\n                }\n                for (FieldInfo met : gaReportGroup.getMetrics()) {\n                    if (aliasIndexMapping.containsKey(met.getFieldAlias())) {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, aliasIndexMapping.get(met.getFieldAlias())));\n                    } else {\n                        recordIndexMapping.put(gaReportGroup.getName() + fieldInfoIndex, new RecordMeta(met, recordIndex++));\n                        aliasIndexMapping.put(met.getFieldAlias(), aliasIndex++);\n                        headers.add(met);\n                    }\n                    fieldInfoIndex++;\n                }\n            }\n        }\n\n        public List<FieldInfo> getHeaders() {\n            return headers;\n        }\n\n        private List<String> formatRecordGA4(List<DimensionValue> dimensions, List<MetricValue> metrics, GAReportGroup gaReportGroup) {\n            List<String> values = Lists.newArrayList();\n            //prepend all static values in record\n            for (FieldInfo fieldInfo : extractDetails.getStaticFields()) {\n                values.add(DHUtils.valueOf(fieldInfo.getValue()));\n            }\n\n            //padman...\n            for (int i = 0; i < headers.size(); i++) {\n                values.add(null);\n            }\n\n            String name = gaReportGroup.getName();\n            int fieldIndex = 0;\n            for (DimensionValue dimension : dimensions) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), dimension.getValue());\n                fieldIndex++;\n            }\n\n            for (MetricValue metric : metrics) {\n                RecordMeta recordMeta = recordIndexMapping.get(name + fieldIndex);\n                values.set(recordMeta.getRecordPosition(), metric.getValue());\n                fieldIndex++;\n            }\n            return values;\n        }\n    }\n\n    private static class RecordMeta {\n        private FieldInfo fieldInfo;\n        private int recordPosition = -1;\n        private DateTimeFormatter dateTimeFormatter;\n\n        public RecordMeta(FieldInfo fieldInfo, int recordPosition) {\n            this.fieldInfo = fieldInfo;\n            this.recordPosition = recordPosition;\n            init();\n        }\n\n        private void init() {\n            DateTimeProperties dateTimeProperties = fieldInfo.getDateTimeProperties();\n            String format;\n            if (dateTimeProperties != null && (format = dateTimeProperties.getFormat()) != null) {\n                this.dateTimeFormatter = DateTimeFormatter.ofPattern(format);\n            }\n        }\n\n\n        public int getRecordPosition() {\n            return recordPosition;\n        }\n    }\n\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"59624eb2-4fd9-46f3-b7f0-a77925883ee6","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/task/PostgresExtractionTask.java","startLine":58,"endLine":75,"content":"ervices.dataprocessing.commons.pojo.DataType.DATETIME;\nimport static com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties.getDeploymentProperties;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotBlank;\nimport static com.gainsight.services.dataprocessing.commons.system.Precondition.isNotNull;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.convertJsonToObject;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\npublic class PostgresExtractionTask {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PostgresExtractionTask.class);\n    private static final String connectionPoolName = \"DynamicSQLExtractPool_\" + RandomStringUtils.randomAlphanumeric(8);\n    private static final String EPOCH_DATETIME_FORMAT = \"epoch\";\n    private static final String POSTGRES_COPY_MANAGER_EXCLUDED_TENANTS = \"postgres.copy.manager.excluded.tenants\";\n    private static final String DISABLE_POSTGRES_COPY_MANAGER = \"disable.postgres.copy.manager\";\n    private static final String ENABLE_POSTGRES_EXTRACT_SAMPLE_LOGGING = \"enable.postgres.extract.sample.logging\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_RECORD_SIZE = \"postgres.extract.sample.log.record.size\";\n    private static final String POSTGRES_EXTRACT_SAMPLE_LOG_INCLUDE_ALL_COLUMNS = \"postgres.extract.sample.log.include.all.columns\";\n    private static final String POSTGRES_EXTRACT_DEFAULT_DATETIME_FORMAT","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"f4f4106a-13ac-4e0f-9782-31068896626c","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/utils/GA4ExtractHelper.java","startLine":189,"endLine":207,"content":"        isNotNull(response, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        List<RunReportResponse> reports = response.getReports();\n        assertState(CollectionUtils.isNotEmpty(reports) && reports.size() == 1, GENERIC_SYSTEM_ERROR, \"Unexpected error, found report empty while GA Extraction.\");\n        return reports.get(0);\n    }\n\n    private RunReportRequest buildReportRequestGA4(GAReportGroup gaReportGroup) {\n        RunReportRequest reportRequest = new RunReportRequest();\n        com.google.api.services.analyticsdata.v1beta.model.DateRange dateRange = new com.google.api.services.analyticsdata.v1beta.model.DateRange()\n                .setStartDate(extractDetails.getStartDate())\n                .setEndDate(extractDetails.getEndDate());\n        reportRequest.setProperty(\"properties/\" + extractDetails.getViewId());\n        reportRequest.setDateRanges(Lists.newArrayList(dateRange));\n        reportRequest.setDimensions(gaReportGroup.getDimensions().stream().map(this::getDimensionV4).collect(Collectors.toList()));\n        reportRequest.setMetrics(gaReportGroup.getMetrics().stream().map(this::getMetricV4).collect(Collectors.toList()));\n//        if (CollectionUtils.isNotEmpty(gaReportGroup.getDimensionFilterRules())) {\n//            //reportRequest.setDimensionFilter(gaReportGroup.getDimensionFilterRules().stream().map(this::getDimensionFilterClause).collect(Collectors.toList()));\n//        }\n//        if (CollectionUtils.isNotEmpty(ga","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"65c353a0-4f44-437a-add4-dcd1961d9449","type":"class","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/data/code/dp_dynamic_tasks/mssql-extraction-task/src/main/java/com/gainsight/services/external/mssql/extraction/task/MsSqlExtractionTask.java","startLine":81,"endLine":104,"content":"JobDetails.getExternalId(), taskId, externalTaskRequestContext.getTaskName());\n\n            if (sqlQueryInfo.getConnectionDetail() instanceof RelationalDBConnectionDetail) {\n                relationalDBConnectionDetail = (RelationalDBConnectionDetail) sqlQueryInfo.getConnectionDetail();\n                connectorType = UDMAccountType.valueOf(relationalDBConnectionDetail.getType());\n            } else {\n                throw new DPSystemException(\"Please provide either valid MsSql ConnectionDetails\");\n            }\n\n            if (connectorType == null || !UDMAccountType.MSSQL.equals(connectorType))\n                throw new DPSystemException(msg(\"Invalid ConnectorType :{}. Only Supports MsSql ConnectorType.\", connectorType));\n\n            List<FieldInfo> headers = DPUtils.convertJsonToObject(DPUtils.convertObjectToJson(sqlQueryInfo.getShowFields()), new TypeReference<List<FieldInfo>>() {\n            });\n            CsvFile csvFile = executeQuery(systemProperties, sqlQueryInfo, relationalDBConnectionDetail, externalTaskRequestContext);\n\n            //Creating instance of TaskResult\n            TaskResult taskResult = new TaskResult(headers, null);\n            char delimiter = csvFile.getDelimiter() != null ? csvFile.getDelimiter().charAt(0) : null;\n\n            // Creating instance of ExternalExtractionTaskResult\n            Map<String, CustomerCurrencyDTO> currencyConversionMap = null;\n            if (DPUtils.isCurrencyConversionMapRequired(headers)) {\n                currenc","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java#GA4ExtractionTask","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/ga4-extraction-task/src/main/java/com/gainsight/services/external/ga4/extraction/task/GA4ExtractionTask.java","startLine":23,"endLine":58,"content":"public class GA4ExtractionTask {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GA4ExtractionTask.class);\n\n    public static void main(String[] args) {\n        executeTask(ExternalTaskUtil.getExternalTaskRequestContext());\n    }\n\n    private static void executeTask(ExternalTaskRequestContext externalTaskRequestContext) {\n        String jobId = externalTaskRequestContext.getJobId();\n        String tenantId = externalTaskRequestContext.getTenantId();\n        DPWorkflowJobDetailsDTO workflowJobDetails = externalTaskRequestContext.getWorkflowJobDetails();\n        String taskId = externalTaskRequestContext.getTaskId();\n        ParquetFile parquetFile;\n\n        try {\n            Map<String, String> metaData = externalTaskRequestContext.getMetaData();\n            Map<String, Object> workFlowSystemProperties = externalTaskRequestContext.getWorkflowSystemProperties();\n            Map<String, Object> extractFile = GA4ExtractUtil.getGA4Report(jobId, taskId, metaData, workFlowSystemProperties, workflowJobDetails);\n            parquetFile = (ParquetFile) extractFile.get(\"parquetFile\");\n            TaskResult taskResult = new TaskResult((List<FieldInfo>) extractFile.get(\"headers\"), null);\n            taskResult.setResultCount(parquetFile.getNumRecords());\n            ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder externalExtractionTaskResultBuilder = new ExternalExtractionTaskResult.ExternalExtractionTaskResultBuilder()\n                    .setExtractedFiles(Collections.singletonList(parquetFile.getAbsolutePath()))\n                    .setTaskResult(taskResult);\n\n            ExternalExtractionTaskResult externalTaskResult = externalExtractionTaskResultBuilder.build();\n            externalTaskResult.setEnableParquetConversion(false);\n            ExternalTaskUtil.saveExternalTaskResult(externalTaskRequestContext, externalTaskResult);\n\n        } catch (Exception ex) {\n            LOGGER.error(\"Exception while executing GA4 Task.  tId- {}, jobId- {}, taskId- {}  with error - {}\",\n                    tenantId, jobId, taskId, ex.getMessage(), ex);\n            throw new DPSystemException(ex.getMessage(), ex);\n        }\n    }\n}\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null},{"source":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java#L1-L193","type":"code_chunk","filePath":"/Users/psambaraju/Desktop/cursorProjects/l3AgentNew/./data/code/dp_dynamic_tasks/postgres-extraction-task/src/main/java/com/gainsight/services/external/postgres/extraction/utils/SQLExtractHelper.java","startLine":1,"endLine":193,"content":"package com.gainsight.services.external.postgres.extraction.utils;\n\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.ConnectionParamPojo;\nimport com.gainsight.services.datahighway.storage.db.commons.pojo.DBResultPojo;\nimport com.gainsight.services.dataprocessing.commons.exception.DPSystemException;\nimport com.gainsight.services.dataprocessing.commons.properties.DeploymentProperties;\nimport com.gainsight.services.dataprocessing.commons.system.CsvFile;\nimport com.gainsight.services.utilities.datahighway.dhcommons.enums.datatype.DataType;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.custom.DateTimeProperties;\nimport com.gainsight.services.utilities.datahighway.dhquerybuilder.constructs.query.SQLQueryInfo;\nimport com.gainsight.services.utilities.datahighway.storage.db.postgres.PostgresSQLService;\nimport com.gainsight.services.utilities.datahighway.storage.db.postgres.impl.TransientPostgresSQLServiceImpl;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVPrinter;\nimport org.apache.commons.csv.QuoteMode;\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.postgresql.copy.CopyManager;\nimport org.postgresql.core.BaseConnection;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedWriter;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport static com.gainsight.services.dataprocessing.commons.constants.Constants.DataExtractorConstants.SQL_EXTRACTION_QUERY_LIMIT;\nimport static com.gainsight.services.dataprocessing.commons.utils.DPUtils.msg;\n\n/**\n * @author sghosh\n * Created On: 24-May-2023\n */\n\npublic class SQLExtractHelper {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SQLExtractHelper.class);\n\n    private final ConnectionParamPojo connectionParamPojo;\n    private final String query;\n    private final SQLQueryInfo sqlQueryInfo;\n\n    public SQLExtractHelper(ConnectionParamPojo connectionParamPojo, String query, SQLQueryInfo sqlQueryInfo) {\n        this.connectionParamPojo = connectionParamPojo;\n        this.query = query;\n        this.sqlQueryInfo = sqlQueryInfo;\n    }\n\n    public void executeQuery(CsvFile csvFile) {\n        int limit = DeploymentProperties.getDeploymentProperties().getIntegerValue(SQL_EXTRACTION_QUERY_LIMIT, 10000);\n        int offset = 0;\n        int recordsRetrieved = 0;\n        CSVPrinter csvPrinter = null;\n        PostgresSQLService dataBaseClient = null;\n        try {\n            LOGGER.info(\"Going to execute postgres query with legacy code\");\n            dataBaseClient = new TransientPostgresSQLServiceImpl(connectionParamPojo);\n            csvPrinter = new CSVPrinter(new BufferedWriter(new FileWriter(csvFile)), CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC));\n            createCsvHeaderAndUpdateFile(csvPrinter, csvFile);\n            boolean done = false;\n            do {\n                String queryToExecute = query.trim() + \" offset \" + offset + \" limit \" + limit;\n                LOGGER.info(\"Started executing query: {} with legacy code\", queryToExecute);\n                DBResultPojo executeResponse = dataBaseClient.execute(queryToExecute);\n                if (!executeResponse.isSucceded()) {\n                    LOGGER.error(\"Sql query execution failed with: \", executeResponse.getCause());\n                    throw new DPSystemException(msg(\"Query execution failed because of: {}\", executeResponse.getCause().getMessage()));\n                }\n                JSONArray data = (JSONArray) executeResponse.getResult();\n                List<Object> recordList = new ArrayList<>();\n                for (int i = 0; i < data.length(); i++) {\n                    JSONObject jsonObject = data.getJSONObject(i);\n                    sqlQueryInfo.getShowFields().forEach(showField -> {\n                        String key = showField.getFieldAlias().toLowerCase();\n                        if (jsonObject.isNull(key)) {\n                            recordList.add(null);\n                        } else {\n                            if (showField.getDataType().equals(DataType.NUMBER)) {\n                                recordList.add(jsonObject.getDouble(key));\n                            } else if (showField.getDataType().equals(DataType.DATETIME)) {\n                                recordList.add(convertDateTimeFormat(jsonObject.get(key), showField.getDateTimeProperties()));\n                            } else {\n                                recordList.add(jsonObject.get(key));\n                            }\n                        }\n                    });\n                    csvPrinter.printRecord(recordList);\n                    recordList.clear();\n                }\n                offset = offset + limit;\n                recordsRetrieved = recordsRetrieved + data.length();\n                LOGGER.info(\"Retrieved {} records so far.\", recordsRetrieved);\n                if (data.length() != limit) {\n                    done = true;\n                }\n            } while (!done && !Thread.currentThread().isInterrupted());\n            csvPrinter.flush();\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Unable to process SQL extract with legacy code due to: {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with legacy code for postgres/redshift/snowflake\", ex);\n        } finally {\n            IOUtils.closeQuietly(csvPrinter);\n            if (dataBaseClient != null) {\n                dataBaseClient.closeConnection();\n            }\n        }\n    }\n\n    private Object convertDateTimeFormat(Object value, DateTimeProperties dateTimeProperties) {\n        if (value instanceof Timestamp) {\n            DateTimeFormatter outputDateTimeFormatter = DateTimeFormatter.ofPattern(dateTimeProperties.getFormat());\n            ZonedDateTime utcDateTime = ((Timestamp) value).toLocalDateTime().atZone(ZoneId.of(\"UTC\"));\n            ZonedDateTime zonedDateTime = utcDateTime.withZoneSameInstant(ZoneId.of(dateTimeProperties.getTimeZoneId()));\n            return zonedDateTime.format(outputDateTimeFormatter);\n        } else {\n            return value;\n        }\n    }\n\n    public void executeQueryWithPostgresCopyManager(CsvFile csvFile) throws IOException, SQLException {\n        int recordsRetrieved = 0;\n        Connection jdbcConnection = null;\n        FileOutputStream fileOutputStream = null;\n        Properties properties = new Properties();\n        try {\n            LOGGER.info(\"Going to execute postgres query with copy manager\");\n            com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo connectionParamPojoForCopyManager = new com.gainsight.services.dataprocessing.database.commons.pojo.ConnectionParamPojo(\n                    connectionParamPojo.getJdbcUrl(), connectionParamPojo.getUserName(), connectionParamPojo.getPassword(), connectionParamPojo.getConnectionPoolSize(), connectionParamPojo.getConnectionPoolName(), connectionParamPojo.isSslEnabled());\n            createCsvHeaderAndUpdateFileCopyManager(csvFile);\n            properties.setProperty(\"user\", connectionParamPojo.getUserName());\n            properties.setProperty(\"password\", connectionParamPojo.getPassword());\n            if (connectionParamPojo.isSslEnabled()) {\n                properties.setProperty(\"sslmode\", \"require\");\n                properties.setProperty(\"ssl\", \"true\");\n            }\n            jdbcConnection = DriverManager.getConnection(connectionParamPojoForCopyManager.getJdbcUrl(), properties);\n            CopyManager copyManager = new CopyManager((BaseConnection) jdbcConnection);\n            fileOutputStream = new FileOutputStream(csvFile, true);\n            String refinedQuery = query.trim();\n            String copyManagerQuery = \"COPY (\" + refinedQuery + \") TO STDOUT WITH (FORMAT CSV, HEADER true, QUOTE '\\\"', ESCAPE '\\\"', ENCODING 'UTF8')\";\n            LOGGER.info(\"Started executing query: {} with copyManager\", copyManagerQuery);\n            if (!Thread.currentThread().isInterrupted()) {\n                recordsRetrieved = Math.toIntExact(copyManager.copyOut(copyManagerQuery, fileOutputStream));\n            }\n            csvFile.setNumRecords(recordsRetrieved);\n            LOGGER.info(\"Total {} records retrieved for this task.\", recordsRetrieved);\n        } catch (Exception ex) {\n            LOGGER.error(msg(\"Error while executing postgres query with copy manager due to : {}, {}\", ex.getMessage(), ex));\n            throw new DPSystemException(\"Query execution failed with postgres copy manager\", ex);\n        } finally {\n            if (fileOutputStream != null) {\n                fileOutputStream.close();\n            }\n            if (jdbcConnection != null) {\n                jdbcConnection.close();\n            }\n        }\n    }\n\n    private void createCsvHeaderAndUpdateFileCopyManager(CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        LOGGER.info(\"Started writing headers {} to csv file for copy manager\", headers);\n        csvFile.setHeaders(headers);\n    }\n\n    private void createCsvHeaderAndUpdateFile(CSVPrinter csvPrinter, CsvFile csvFile) {\n        List<String> headers = new ArrayList<>();\n        sqlQueryInfo.getShowFields().forEach(showField -> headers.add(showField.getFieldAlias()));\n        try {\n            LOGGER.info(\"Started writing headers {} to csv file\", headers);\n            csvPrinter.printRecord(headers);\n            csvFile.setHeaders(headers);\n        } catch (IOException e) {\n            LOGGER.error(e.getMessage(), e);\n            throw new DPSystemException(e.getMessage(), e);\n        }\n    }\n}\n\n","language":"java","repositoryNamespace":"dp_dynamic_tasks","description":null,"purposeSummary":null,"capabilities":null,"usageExamples":null}]